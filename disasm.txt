
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 81 02 00       	call   c00281e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3c 8e 02 c0       	mov    ebx,0xc0028e3c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 48 8e 02 c0    	cmp    ebx,0xc0028e48
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 cb 02 c0       	mov    eax,0xc002cb38
c0000049:	3d 38 cb 02 c0       	cmp    eax,0xc002cb38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 cb 02 c0       	push   0xc002cb38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 cb 02 c0       	mov    eax,0xc002cb38
c0000075:	2d 38 cb 02 c0       	sub    eax,0xc002cb38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 cb 02 c0       	push   0xc002cb38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d168,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 50 8e 02 c0       	mov    ebx,0xc0028e50
c00000bb:	81 eb 4c 8e 02 c0    	sub    ebx,0xc0028e4c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 4c 8e 02 c0       	mov    esi,0xc0028e4c
c00000ca:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c d1 02 c0       	mov    ds:0xc002d16c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c d1 02 c0       	mov    eax,ds:0xc002d16c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 cb 02 c0       	push   0xc002cb38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d168,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 d1 02 c0       	push   0xc002d170
c000012c:	68 38 cb 02 c0       	push   0xc002cb38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 1f cd 01 00       	call   c001d0c2 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 36 1f 01 00       	call   c00122f1 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 fd cc 01 00       	call   c001d0c2 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 a5 d1 01 00       	call   c001d589 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 bb d7 01 00       	call   c001dba8 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 b0 d5 02 c0 	lgdtd  ds:0xc002d5b0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 2f 3c 01 00       	call   c0014211 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 88 d1 02 c0       	mov    ds:0xc002d188,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 88 d1 02 c0    	mov    DWORD PTR ds:0xc002d188,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 88 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d188
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd71a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd71a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd71a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d a0 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1a0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 a4 d1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2e5c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 a4 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e5c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d dc d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1dc
c0000e38:	c7 42 0c d4 d1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d1d4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 a0 d1 02 c0 02 	test   BYTE PTR ds:0xc002d1a0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d a0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1a0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 a4 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e5c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 a4 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2e5c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 d4 d1 02 c0 	lea    edx,[eax*8-0x3ffd2e2c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d e0 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1e0
c00011ba:	81 fb d4 d1 02 c0    	cmp    ebx,0xc002d1d4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d d4 d1 02 c0       	cmp    eax,0xc002d1d4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d d0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1d0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 dc d1 02 c0       	mov    ds:0xc002d1dc,eax
c00011f6:	a3 e0 d1 02 c0       	mov    ds:0xc002d1e0,eax
c00011fb:	a3 d0 d1 02 c0       	mov    ds:0xc002d1d0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 d4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1d4
c0001209:	c7 40 0c d4 d1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d1d4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 e0 d1 02 c0       	mov    ds:0xc002d1e0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 d4 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d1d4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 98 d1 02 c0 	lea    ebp,[edx*4-0x3ffd2e68]
c000125a:	8b 14 95 a0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e60]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 a0 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2e60]
c0001275:	8b 14 95 a0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e60]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd d4 d4 02 c0 	or     DWORD PTR [edi*4-0x3ffd2b2c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 d4 d1 02 c0 	lea    eax,[eax*8-0x3ffd2e2c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,ecx
c000132f:	89 0d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,ecx
c0001335:	c7 41 08 d4 d1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d1d4
c000133c:	c7 41 0c d4 d1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d1d4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd cc d1 02 c0 	lea    edx,[ecx*8-0x3ffd2e34]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d d4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b2c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d d4 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2b2c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 cc d1 02 c0 	lea    edx,[eax*4-0x3ffd2e34]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d d4 d4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2b2c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d dc d1 02 c0    	mov    DWORD PTR ds:0xc002d1dc,edi
c0001402:	89 3d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,edi
c0001408:	c7 47 08 d4 d1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d1d4
c000140f:	c7 47 0c d4 d1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d1d4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d d0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1d0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba a0 d1 02 c0       	mov    edx,0xc002d1a0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d f4 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d4f4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 f4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4f4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d f4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4f4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 cc d1 02 c0    	cmp    DWORD PTR ds:0xc002d1cc,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d cc d1 02 c0    	mov    DWORD PTR ds:0xc002d1cc,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 fc d4 02 c0    	push   DWORD PTR ds:0xc002d4fc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d a0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1a0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 fc d4 02 c0       	mov    eax,ds:0xc002d4fc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d cc d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1cc,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 cc d1 02 c0       	mov    eax,ds:0xc002d1cc
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 a4 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e5c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 d4 d1 02 c0       	mov    eax,0xc002d1d4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d cc d4 02 c0       	cmp    eax,0xc002d4cc
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 08 d5 02 c0       	mov    eax,ds:0xc002d508
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 f0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4f0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 04 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d504
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 14 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d514
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 a0 d1 02 c0       	mov    eax,0xc002d1a0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd709c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 a0 d1 02 c0       	mov    ds:0xc002d1a0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d e4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d e8 d4 02 c0    	mov    DWORD PTR ds:0xc002d4e8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ec d4 02 c0    	mov    DWORD PTR ds:0xc002d4ec,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 f4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4f4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 e6 e9 01 00       	jmp    c00205d8 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 17 ea 01 00       	jmp    c002061f <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf3a0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 3f ea 01 00       	jmp    c0020666 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 3a 46 02 00       	call   c0026544 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 6c ba 02 c0       	mov    edx,0xc002ba6c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 90 02 c0       	mov    edx,0xc00290ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 90 02 c0       	mov    edx,0xc0029090
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 40 d5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2ac0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 20 d5 02 c0    	mov    ax,ds:0xc002d520
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 20 d5 02 c0    	mov    ds:0xc002d520,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 37 34 02 00       	call   c0026544 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 90 02 c0       	mov    eax,0xc00290b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7000]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 90 02 c0       	mov    eax,0xc00290bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 02 1e 02 00       	call   c0026544 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 90 02 c0       	mov    edx,0xc0029090
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 40 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ac0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 40 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2ac0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 c9 07 02 00       	call   c0026544 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 af 07 02 00       	call   c0026544 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 8f 02 c0       	mov    eax,0xc0028fd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 8f 02 c0       	mov    eax,0xc0028fd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 40 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ac0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 8f 02 c0       	mov    esi,0xc0028fc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 f2 ee 01 00       	call   c0026544 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 8f 02 c0       	mov    edx,0xc0028fb0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 90 02 c0       	mov    edx,0xc00290c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 90 02 c0       	mov    edx,0xc00290ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 90 02 c0       	mov    edx,0xc00290e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029400
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029400
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 92 02 c0       	mov    eax,0xc0029200
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 91 02 c0       	mov    eax,0xc0029140
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 46 f8 01 00       	call   c0028017 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 09 f8 01 00       	call   c0027ff9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 dd f7 01 00       	call   c0028017 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 90 ee 01 00       	call   c002771c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 12 f9 01 00       	call   c00281b0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 57 f7 01 00       	call   c0028017 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 99 f6 01 00       	call   c0028017 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 66 f6 01 00       	call   c0027ff9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 53 f5 01 00       	call   c0028017 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 1b f5 01 00       	call   c0027ff9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 95 02 c0       	mov    eax,0xc0029500
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 27 f3 01 00       	call   c0028017 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ec f2 01 00       	call   c0027ff9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 fc ef 01 00       	call   c0027dab <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 7a e9 01 00       	call   c0027748 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 36 f2 01 00       	call   c002801b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 24 f3 01 00       	call   c002813f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 0e e9 01 00       	call   c0027748 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 b9 f1 01 00       	call   c0028015 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 9a f1 01 00       	call   c0028019 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 30 f3 01 00       	call   c00281d0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 da ee 01 00       	call   c0027dab <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 58 e8 01 00       	call   c0027748 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 14 f1 01 00       	call   c002801b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 02 f2 01 00       	call   c002813f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ec e7 01 00       	call   c0027748 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 97 f0 01 00       	call   c0028015 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 77 f0 01 00       	call   c0028019 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 0c f2 01 00       	call   c00281d0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 b2 ef 01 00       	call   c0028017 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 70 ef 01 00       	call   c0027ff9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 58 ef 01 00       	call   c0028017 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ca ec 01 00       	call   c0027dab <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 cc df 01 00       	call   c00270cb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 2f e6 01 00       	call   c0027748 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 81 ec 01 00       	call   c0027dab <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 87 df 01 00       	call   c00270cb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 56 ec 01 00       	call   c0027dab <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 a6 ee 01 00       	call   c0028015 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 83 e5 01 00       	call   c002771c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 05 f0 01 00       	call   c00281b0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 2c ee 01 00       	call   c0027ff9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 27 e5 01 00       	call   c002771c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 a5 eb 01 00       	call   c0027dab <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 28 e5 01 00       	call   c0027748 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 7a eb 01 00       	call   c0027dab <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 e1 e7 01 00       	call   c0027a2c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 60 de 01 00       	call   c00270cb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 c0 d7 01 00       	call   c0026a60 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 97 ee 01 00       	call   c002813f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 80 e4 01 00       	call   c0027748 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 67 ee 01 00       	call   c002813f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 d9 dd 01 00       	call   c00270cb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 12 ed 01 00       	call   c002801b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 fa e6 01 00       	call   c0027a2c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 80 dd 01 00       	call   c00270cb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 6e ee 01 00       	call   c00281d0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 40 ea 01 00       	call   c0027dab <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 97 e3 01 00       	call   c002771c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 76 ec 01 00       	call   c0028017 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 0f dd 01 00       	call   c00270cb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 3b e3 01 00       	call   c002771c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 dd ed 01 00       	call   c00281d0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 8e e9 01 00       	call   c0027dab <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 0b e3 01 00       	call   c0027748 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 5e e9 01 00       	call   c0027dab <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 64 dc 01 00       	call   c00270cb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 34 e9 01 00       	call   c0027dab <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 86 eb 01 00       	call   c0028017 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 5d e2 01 00       	call   c002771c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 df ec 01 00       	call   c00281b0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 06 eb 01 00       	call   c0027ff9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 00 e2 01 00       	call   c002771c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 7e e8 01 00       	call   c0027dab <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 01 e2 01 00       	call   c0027748 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 53 e8 01 00       	call   c0027dab <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ba e4 01 00       	call   c0027a2c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 39 db 01 00       	call   c00270cb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 89 d4 01 00       	call   c0026a60 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 60 eb 01 00       	call   c002813f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 49 e1 01 00       	call   c0027748 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 30 eb 01 00       	call   c002813f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 a2 da 01 00       	call   c00270cb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 db e9 01 00       	call   c002801b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 c2 e3 01 00       	call   c0027a2c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 41 da 01 00       	call   c00270cb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 2f eb 01 00       	call   c00281d0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 01 e7 01 00       	call   c0027dab <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 58 e0 01 00       	call   c002771c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 37 e9 01 00       	call   c0028017 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 d0 d9 01 00       	call   c00270cb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 fc df 01 00       	call   c002771c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 71 e6 01 00       	call   c0027dab <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 77 d9 01 00       	call   c00270cb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 99 02 c0       	mov    eax,0xc00299d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ec e4 01 00       	call   c0027dab <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 6a de 01 00       	call   c0027748 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 fc d0 01 00       	call   c0026a60 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 d3 e7 01 00       	call   c002813f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 bc dd 01 00       	call   c0027748 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 9f e7 01 00       	call   c002813f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 11 d7 01 00       	call   c00270cb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 71 e7 01 00       	call   c002813f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 60 dd 01 00       	call   c0027748 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 c9 d6 01 00       	call   c00270cb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ea cf 01 00       	call   c0026a60 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 c1 e6 01 00       	call   c002813f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 aa dc 01 00       	call   c0027748 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 8d e6 01 00       	call   c002813f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ff d5 01 00       	call   c00270cb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 5f e6 01 00       	call   c002813f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 4e dc 01 00       	call   c0027748 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 b7 d5 01 00       	call   c00270cb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 95 d5 01 00       	call   c00270cb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 71 ce 01 00       	call   c0026a60 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 48 e5 01 00       	call   c002813f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 31 db 01 00       	call   c0027748 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 14 e5 01 00       	call   c002813f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 86 d4 01 00       	call   c00270cb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 e6 e4 01 00       	call   c002813f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 cf da 01 00       	call   c0027748 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 38 d4 01 00       	call   c00270cb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 98 e4 01 00       	call   c002813f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 81 da 01 00       	call   c0027748 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ea d3 01 00       	call   c00270cb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ff cc 01 00       	call   c0026a60 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 d6 e3 01 00       	call   c002813f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 bf d9 01 00       	call   c0027748 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 a6 e3 01 00       	call   c002813f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 18 d3 01 00       	call   c00270cb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 78 e3 01 00       	call   c002813f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 61 d9 01 00       	call   c0027748 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ca d2 01 00       	call   c00270cb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 2a e3 01 00       	call   c002813f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 13 d9 01 00       	call   c0027748 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 7c d2 01 00       	call   c00270cb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 50 d2 01 00       	call   c00270cb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 ad d8 01 00       	call   c0027748 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 69 e1 01 00       	call   c002801b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 f8 d1 01 00       	call   c00270cb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 55 d8 01 00       	call   c0027748 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 11 e1 01 00       	call   c002801b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 8b ca 01 00       	call   c0026a60 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 62 e1 01 00       	call   c002813f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 4b d7 01 00       	call   c0027748 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 2e e1 01 00       	call   c002813f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 a0 d0 01 00       	call   c00270cb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 00 e1 01 00       	call   c002813f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 e9 d6 01 00       	call   c0027748 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 52 d0 01 00       	call   c00270cb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 b2 e0 01 00       	call   c002813f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 9b d6 01 00       	call   c0027748 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 04 d0 01 00       	call   c00270cb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 64 e0 01 00       	call   c002813f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 4d d6 01 00       	call   c0027748 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 b6 cf 01 00       	call   c00270cb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 16 e0 01 00       	call   c002813f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ff d5 01 00       	call   c0027748 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 68 cf 01 00       	call   c00270cb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 6a c8 01 00       	call   c0026a60 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 41 df 01 00       	call   c002813f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 2a d5 01 00       	call   c0027748 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 11 df 01 00       	call   c002813f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 83 ce 01 00       	call   c00270cb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 e3 de 01 00       	call   c002813f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 cc d4 01 00       	call   c0027748 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 35 ce 01 00       	call   c00270cb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 95 de 01 00       	call   c002813f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 7e d4 01 00       	call   c0027748 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 e7 cd 01 00       	call   c00270cb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 47 de 01 00       	call   c002813f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 30 d4 01 00       	call   c0027748 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 99 cd 01 00       	call   c00270cb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 f9 dd 01 00       	call   c002813f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 e2 d3 01 00       	call   c0027748 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 4b cd 01 00       	call   c00270cb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 1f cd 01 00       	call   c00270cb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 7c d3 01 00       	call   c0027748 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 38 dc 01 00       	call   c002801b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 c7 cc 01 00       	call   c00270cb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 24 d3 01 00       	call   c0027748 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 e0 db 01 00       	call   c002801b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 6e cc 01 00       	call   c00270cb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 cb d2 01 00       	call   c0027748 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 87 db 01 00       	call   c002801b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 15 cc 01 00       	call   c00270cb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 72 d2 01 00       	call   c0027748 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 2e db 01 00       	call   c002801b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 8c c4 01 00       	call   c0026a60 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 63 db 01 00       	call   c002813f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 4c d1 01 00       	call   c0027748 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 2f db 01 00       	call   c002813f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 a1 ca 01 00       	call   c00270cb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 01 db 01 00       	call   c002813f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ea d0 01 00       	call   c0027748 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 53 ca 01 00       	call   c00270cb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 b3 da 01 00       	call   c002813f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 9c d0 01 00       	call   c0027748 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 05 ca 01 00       	call   c00270cb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 65 da 01 00       	call   c002813f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 4e d0 01 00       	call   c0027748 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 b7 c9 01 00       	call   c00270cb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 17 da 01 00       	call   c002813f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 00 d0 01 00       	call   c0027748 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 69 c9 01 00       	call   c00270cb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 c9 d9 01 00       	call   c002813f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 b2 cf 01 00       	call   c0027748 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 18 c9 01 00       	call   c00270cb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 78 d9 01 00       	call   c002813f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 61 cf 01 00       	call   c0027748 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ca c8 01 00       	call   c00270cb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 c4 c1 01 00       	call   c0026a60 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 9b d8 01 00       	call   c002813f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 84 ce 01 00       	call   c0027748 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 64 d8 01 00       	call   c002813f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 d6 c7 01 00       	call   c00270cb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 36 d8 01 00       	call   c002813f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 1f ce 01 00       	call   c0027748 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 88 c7 01 00       	call   c00270cb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 e8 d7 01 00       	call   c002813f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 d1 cd 01 00       	call   c0027748 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 3a c7 01 00       	call   c00270cb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 9a d7 01 00       	call   c002813f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 83 cd 01 00       	call   c0027748 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ec c6 01 00       	call   c00270cb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 4c d7 01 00       	call   c002813f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 35 cd 01 00       	call   c0027748 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 9e c6 01 00       	call   c00270cb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 fe d6 01 00       	call   c002813f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 e7 cc 01 00       	call   c0027748 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 4d c6 01 00       	call   c00270cb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 ad d6 01 00       	call   c002813f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 96 cc 01 00       	call   c0027748 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 05 c6 01 00       	call   c00270cb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 de c5 01 00       	call   c00270cb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 3c cc 01 00       	call   c0027748 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 f8 d4 01 00       	call   c002801b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 87 c5 01 00       	call   c00270cb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 e5 cb 01 00       	call   c0027748 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 a1 d4 01 00       	call   c002801b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 2f c5 01 00       	call   c00270cb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 8d cb 01 00       	call   c0027748 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 49 d4 01 00       	call   c002801b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 d7 c4 01 00       	call   c00270cb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 35 cb 01 00       	call   c0027748 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 f1 d3 01 00       	call   c002801b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 7f c4 01 00       	call   c00270cb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 dd ca 01 00       	call   c0027748 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 99 d3 01 00       	call   c002801b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 2d c4 01 00       	call   c00270cb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 8b ca 01 00       	call   c0027748 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 47 d3 01 00       	call   c002801b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 5b bc 01 00       	call   c0026a60 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 32 d3 01 00       	call   c002813f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 1b c9 01 00       	call   c0027748 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 02 d3 01 00       	call   c002813f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 74 c2 01 00       	call   c00270cb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 a8 d2 01 00       	call   c002813f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 91 c8 01 00       	call   c0027748 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 fc c1 01 00       	call   c00270cb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 49 d2 01 00       	call   c002813f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 32 c8 01 00       	call   c0027748 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 9d c1 01 00       	call   c00270cb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ea d1 01 00       	call   c002813f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 d3 c7 01 00       	call   c0027748 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 3e c1 01 00       	call   c00270cb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 8b d1 01 00       	call   c002813f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 74 c7 01 00       	call   c0027748 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 df c0 01 00       	call   c00270cb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 2c d1 01 00       	call   c002813f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 15 c7 01 00       	call   c0027748 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 80 c0 01 00       	call   c00270cb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 cd d0 01 00       	call   c002813f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 b6 c6 01 00       	call   c0027748 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 21 c0 01 00       	call   c00270cb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 6e d0 01 00       	call   c002813f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 57 c6 01 00       	call   c0027748 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 c2 bf 01 00       	call   c00270cb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 0f d0 01 00       	call   c002813f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 f8 c5 01 00       	call   c0027748 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 63 bf 01 00       	call   c00270cb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 6d b8 01 00       	call   c0026a60 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 44 cf 01 00       	call   c002813f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 2d c5 01 00       	call   c0027748 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 14 cf 01 00       	call   c002813f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 86 be 01 00       	call   c00270cb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 b9 ce 01 00       	call   c002813f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 a2 c4 01 00       	call   c0027748 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 0d be 01 00       	call   c00270cb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 59 ce 01 00       	call   c002813f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 42 c4 01 00       	call   c0027748 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 ad bd 01 00       	call   c00270cb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 f9 cd 01 00       	call   c002813f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 e2 c3 01 00       	call   c0027748 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 4d bd 01 00       	call   c00270cb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 99 cd 01 00       	call   c002813f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 82 c3 01 00       	call   c0027748 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ed bc 01 00       	call   c00270cb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 39 cd 01 00       	call   c002813f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 22 c3 01 00       	call   c0027748 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 8d bc 01 00       	call   c00270cb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 d9 cc 01 00       	call   c002813f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 c2 c2 01 00       	call   c0027748 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 2d bc 01 00       	call   c00270cb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 79 cc 01 00       	call   c002813f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 62 c2 01 00       	call   c0027748 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 cd bb 01 00       	call   c00270cb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 19 cc 01 00       	call   c002813f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 02 c2 01 00       	call   c0027748 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 6d bb 01 00       	call   c00270cb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 12 bb 01 00       	call   c00270cb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 6f c1 01 00       	call   c0027748 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 2b ca 01 00       	call   c002801b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 b5 ba 01 00       	call   c00270cb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 12 c1 01 00       	call   c0027748 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ce c9 01 00       	call   c002801b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 58 ba 01 00       	call   c00270cb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 b5 c0 01 00       	call   c0027748 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 71 c9 01 00       	call   c002801b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 fb b9 01 00       	call   c00270cb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 58 c0 01 00       	call   c0027748 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 14 c9 01 00       	call   c002801b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 9e b9 01 00       	call   c00270cb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 fb bf 01 00       	call   c0027748 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 b7 c8 01 00       	call   c002801b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 41 b9 01 00       	call   c00270cb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 9e bf 01 00       	call   c0027748 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 5a c8 01 00       	call   c002801b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 e4 b8 01 00       	call   c00270cb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 41 bf 01 00       	call   c0027748 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 fd c7 01 00       	call   c002801b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 87 b8 01 00       	call   c00270cb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 e4 be 01 00       	call   c0027748 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 a0 c7 01 00       	call   c002801b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 9c be 01 00       	call   c0027748 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 14 c9 01 00       	jmp    c00281d0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 7e c5 01 00       	call   c0028017 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 3c c5 01 00       	call   c0027ff9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 d3 c2 01 00       	call   c0027dab <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 d4 b5 01 00       	call   c00270cb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 a3 c2 01 00       	call   c0027dab <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 0a bf 01 00       	call   c0027a2c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 a9 c4 01 00       	call   c0027ff9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 ac c4 01 00       	call   c0028017 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 7f c4 01 00       	call   c0028017 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 78 be 01 00       	call   c0027a2c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 02 c6 01 00       	call   c00281d0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 dd c5 01 00       	call   c00281d0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 af c1 01 00       	call   c0027dab <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 06 bb 01 00       	call   c002771c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 e5 c3 01 00       	call   c0028017 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 7e b4 01 00       	call   c00270cb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 a2 ba 01 00       	call   c002771c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 44 c5 01 00       	call   c00281d0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 7c bd 01 00       	call   c0027a2c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 f9 b3 01 00       	call   c00270cb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 25 c0 01 00       	call   c0027dab <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 25 b3 01 00       	call   c00270cb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 05 b3 01 00       	call   c00270cb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 d5 bf 01 00       	call   c0027dab <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 25 c2 01 00       	call   c0028015 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 04 b9 01 00       	call   c002771c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 86 c3 01 00       	call   c00281b0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 ad c1 01 00       	call   c0027ff9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 ab b8 01 00       	call   c002771c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 29 bf 01 00       	call   c0027dab <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 ac b8 01 00       	call   c0027748 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 fe be 01 00       	call   c0027dab <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 65 bb 01 00       	call   c0027a2c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 e4 b1 01 00       	call   c00270cb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ae be 01 00       	call   c0027dab <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 fa c0 01 00       	call   c0028017 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 ef b7 01 00       	call   c0027748 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 c1 b7 01 00       	call   c0027748 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 fa bd 01 00       	call   c0027dab <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 5e ba 01 00       	call   c0027a2c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 26 ba 01 00       	call   c0027a2c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 a5 b0 01 00       	call   c00270cb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 92 c1 01 00       	call   c00281d0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 64 bd 01 00       	call   c0027dab <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 bb b6 01 00       	call   c002771c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 9a bf 01 00       	call   c0028017 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 32 b0 01 00       	call   c00270cb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 56 b6 01 00       	call   c002771c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 f8 c0 01 00       	call   c00281d0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 b9 be 01 00       	call   c0028017 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 77 be 01 00       	call   c0027ff9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 0e bc 01 00       	call   c0027dab <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 0f af 01 00       	call   c00270cb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 de bb 01 00       	call   c0027dab <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 45 b8 01 00       	call   c0027a2c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 e4 bd 01 00       	call   c0027ff9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 e7 bd 01 00       	call   c0028017 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ba bd 01 00       	call   c0028017 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 b3 b7 01 00       	call   c0027a2c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 3d bf 01 00       	call   c00281d0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 18 bf 01 00       	call   c00281d0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ea ba 01 00       	call   c0027dab <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 41 b4 01 00       	call   c002771c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 20 bd 01 00       	call   c0028017 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 b9 ad 01 00       	call   c00270cb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 dd b3 01 00       	call   c002771c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 7f be 01 00       	call   c00281d0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 b7 b6 01 00       	call   c0027a2c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 34 ad 01 00       	call   c00270cb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 5f b9 01 00       	call   c0027dab <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 5f ac 01 00       	call   c00270cb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 3f ac 01 00       	call   c00270cb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 0f b9 01 00       	call   c0027dab <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 5f bb 01 00       	call   c0028015 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 3d b2 01 00       	call   c002771c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 bf bc 01 00       	call   c00281b0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 e6 ba 01 00       	call   c0027ff9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 e3 b1 01 00       	call   c002771c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 61 b8 01 00       	call   c0027dab <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 e4 b1 01 00       	call   c0027748 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 36 b8 01 00       	call   c0027dab <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 9d b4 01 00       	call   c0027a2c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 1c ab 01 00       	call   c00270cb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 e6 b7 01 00       	call   c0027dab <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 32 ba 01 00       	call   c0028017 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 27 b1 01 00       	call   c0027748 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 f9 b0 01 00       	call   c0027748 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 30 b7 01 00       	call   c0027dab <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 94 b3 01 00       	call   c0027a2c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 61 b3 01 00       	call   c0027a2c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 e0 a9 01 00       	call   c00270cb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 cd ba 01 00       	call   c00281d0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 9f b6 01 00       	call   c0027dab <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 f6 af 01 00       	call   c002771c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 d5 b8 01 00       	call   c0028017 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 6d a9 01 00       	call   c00270cb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 91 af 01 00       	call   c002771c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 33 ba 01 00       	call   c00281d0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 f4 b7 01 00       	call   c0028017 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 b2 b7 01 00       	call   c0027ff9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 49 b5 01 00       	call   c0027dab <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 4a a8 01 00       	call   c00270cb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 19 b5 01 00       	call   c0027dab <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 80 b1 01 00       	call   c0027a2c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 1f b7 01 00       	call   c0027ff9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 22 b7 01 00       	call   c0028017 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 f5 b6 01 00       	call   c0028017 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ee b0 01 00       	call   c0027a2c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 78 b8 01 00       	call   c00281d0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 53 b8 01 00       	call   c00281d0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 25 b4 01 00       	call   c0027dab <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 7c ad 01 00       	call   c002771c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 5b b6 01 00       	call   c0028017 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 f4 a6 01 00       	call   c00270cb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 18 ad 01 00       	call   c002771c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ba b7 01 00       	call   c00281d0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 f2 af 01 00       	call   c0027a2c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 6f a6 01 00       	call   c00270cb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 9a b2 01 00       	call   c0027dab <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 9a a5 01 00       	call   c00270cb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 7a a5 01 00       	call   c00270cb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 4a b2 01 00       	call   c0027dab <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 9a b4 01 00       	call   c0028015 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 78 ab 01 00       	call   c002771c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 fa b5 01 00       	call   c00281b0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 21 b4 01 00       	call   c0027ff9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 1e ab 01 00       	call   c002771c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 9c b1 01 00       	call   c0027dab <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 1f ab 01 00       	call   c0027748 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 71 b1 01 00       	call   c0027dab <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 d8 ad 01 00       	call   c0027a2c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 57 a4 01 00       	call   c00270cb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 21 b1 01 00       	call   c0027dab <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 6d b3 01 00       	call   c0028017 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 62 aa 01 00       	call   c0027748 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 34 aa 01 00       	call   c0027748 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 6b b0 01 00       	call   c0027dab <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 cf ac 01 00       	call   c0027a2c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 9c ac 01 00       	call   c0027a2c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 1b a3 01 00       	call   c00270cb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 08 b4 01 00       	call   c00281d0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 da af 01 00       	call   c0027dab <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 31 a9 01 00       	call   c002771c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 10 b2 01 00       	call   c0028017 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 a8 a2 01 00       	call   c00270cb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 cc a8 01 00       	call   c002771c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 6e b3 01 00       	call   c00281d0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 2f b1 01 00       	call   c0028017 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ed b0 01 00       	call   c0027ff9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 84 ae 01 00       	call   c0027dab <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 85 a1 01 00       	call   c00270cb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 54 ae 01 00       	call   c0027dab <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 bb aa 01 00       	call   c0027a2c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 5a b0 01 00       	call   c0027ff9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 5d b0 01 00       	call   c0028017 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 30 b0 01 00       	call   c0028017 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 29 aa 01 00       	call   c0027a2c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 b3 b1 01 00       	call   c00281d0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 8e b1 01 00       	call   c00281d0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 60 ad 01 00       	call   c0027dab <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 b7 a6 01 00       	call   c002771c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 96 af 01 00       	call   c0028017 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 2f a0 01 00       	call   c00270cb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 53 a6 01 00       	call   c002771c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 f5 b0 01 00       	call   c00281d0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 2d a9 01 00       	call   c0027a2c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 aa 9f 01 00       	call   c00270cb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 d5 ab 01 00       	call   c0027dab <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 d5 9e 01 00       	call   c00270cb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 b5 9e 01 00       	call   c00270cb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 85 ab 01 00       	call   c0027dab <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 d5 ad 01 00       	call   c0028015 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 b3 a4 01 00       	call   c002771c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 35 af 01 00       	call   c00281b0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 5c ad 01 00       	call   c0027ff9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 59 a4 01 00       	call   c002771c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 d7 aa 01 00       	call   c0027dab <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 5a a4 01 00       	call   c0027748 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 ac aa 01 00       	call   c0027dab <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 13 a7 01 00       	call   c0027a2c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 92 9d 01 00       	call   c00270cb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 5c aa 01 00       	call   c0027dab <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 a8 ac 01 00       	call   c0028017 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 9d a3 01 00       	call   c0027748 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 6f a3 01 00       	call   c0027748 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 a6 a9 01 00       	call   c0027dab <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 0a a6 01 00       	call   c0027a2c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 d7 a5 01 00       	call   c0027a2c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 56 9c 01 00       	call   c00270cb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 43 ad 01 00       	call   c00281d0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 15 a9 01 00       	call   c0027dab <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 6c a2 01 00       	call   c002771c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 4b ab 01 00       	call   c0028017 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 e3 9b 01 00       	call   c00270cb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 07 a2 01 00       	call   c002771c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 a9 ac 01 00       	call   c00281d0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 67 aa 01 00       	call   c0028017 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 25 aa 01 00       	call   c0027ff9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 bc a7 01 00       	call   c0027dab <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 bd 9a 01 00       	call   c00270cb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 8c a7 01 00       	call   c0027dab <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 f3 a3 01 00       	call   c0027a2c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 92 a9 01 00       	call   c0027ff9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 95 a9 01 00       	call   c0028017 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 68 a9 01 00       	call   c0028017 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 61 a3 01 00       	call   c0027a2c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 eb aa 01 00       	call   c00281d0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 c2 aa 01 00       	call   c00281d0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 94 a6 01 00       	call   c0027dab <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 eb 9f 01 00       	call   c002771c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ca a8 01 00       	call   c0028017 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 63 99 01 00       	call   c00270cb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 8b 9f 01 00       	call   c002771c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 2d aa 01 00       	call   c00281d0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 66 a2 01 00       	call   c0027a2c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 e3 98 01 00       	call   c00270cb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 0f a5 01 00       	call   c0027dab <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 0f 98 01 00       	call   c00270cb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 ef 97 01 00       	call   c00270cb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 bf a4 01 00       	call   c0027dab <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 f3 a6 01 00       	call   c0027ff9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ea 9d 01 00       	call   c002771c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 6c a8 01 00       	call   c00281b0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 93 a6 01 00       	call   c0027ff9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 8d 9d 01 00       	call   c002771c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 0b a4 01 00       	call   c0027dab <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 8e 9d 01 00       	call   c0027748 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 e0 a3 01 00       	call   c0027dab <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 47 a0 01 00       	call   c0027a2c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 c6 96 01 00       	call   c00270cb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 90 a3 01 00       	call   c0027dab <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 dc a5 01 00       	call   c0028017 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 d1 9c 01 00       	call   c0027748 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 a3 9c 01 00       	call   c0027748 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 e7 a2 01 00       	call   c0027dab <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 4e 9f 01 00       	call   c0027a2c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 37 9c 01 00       	call   c0027748 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 f3 a4 01 00       	call   c002801b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 e6 9e 01 00       	call   c0027a2c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 65 95 01 00       	call   c00270cb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 52 a6 01 00       	call   c00281d0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 24 a2 01 00       	call   c0027dab <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 7b 9b 01 00       	call   c002771c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 5a a4 01 00       	call   c0028017 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 f2 94 01 00       	call   c00270cb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 1a 9b 01 00       	call   c002771c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 bc a5 01 00       	call   c00281d0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd659c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 6f a2 01 00       	call   c0028017 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 2d a2 01 00       	call   c0027ff9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 19 a2 01 00       	call   c0028017 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 8b 9f 01 00       	call   c0027dab <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 09 99 01 00       	call   c0027748 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 5b 9f 01 00       	call   c0027dab <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 61 92 01 00       	call   c00270cb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 30 9f 01 00       	call   c0027dab <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 80 a1 01 00       	call   c0028015 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 61 98 01 00       	call   c002771c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 e3 a2 01 00       	call   c00281b0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 0a a1 01 00       	call   c0027ff9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 09 98 01 00       	call   c002771c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 87 9e 01 00       	call   c0027dab <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 0a 98 01 00       	call   c0027748 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 5c 9e 01 00       	call   c0027dab <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 c3 9a 01 00       	call   c0027a2c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 42 91 01 00       	call   c00270cb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 6a 9a 01 00       	call   c0027a2c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 f0 90 01 00       	call   c00270cb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 de a1 01 00       	call   c00281d0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 b0 9d 01 00       	call   c0027dab <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 07 97 01 00       	call   c002771c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 e6 9f 01 00       	call   c0028017 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 7f 90 01 00       	call   c00270cb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 ab 96 01 00       	call   c002771c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 4d a1 01 00       	call   c00281d0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 fa 9c 01 00       	call   c0027dab <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 77 96 01 00       	call   c0027748 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 c8 9c 01 00       	call   c0027dab <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ce 8f 01 00       	call   c00270cb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 9e 9c 01 00       	call   c0027dab <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 f2 9e 01 00       	call   c0028019 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 cb 95 01 00       	call   c002771c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 4d a0 01 00       	call   c00281b0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 74 9e 01 00       	call   c0027ff9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 72 95 01 00       	call   c002771c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 f0 9b 01 00       	call   c0027dab <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 73 95 01 00       	call   c0027748 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 c5 9b 01 00       	call   c0027dab <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 2c 98 01 00       	call   c0027a2c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 ab 8e 01 00       	call   c00270cb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 c7 97 01 00       	call   c0027a2c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 46 8e 01 00       	call   c00270cb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 34 9f 01 00       	call   c00281d0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 06 9b 01 00       	call   c0027dab <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 5d 94 01 00       	call   c002771c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 3c 9d 01 00       	call   c0028017 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 d5 8d 01 00       	call   c00270cb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 01 94 01 00       	call   c002771c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 72 9a 01 00       	call   c0027dab <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 78 8d 01 00       	call   c00270cb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9b 02 c0       	mov    eax,0xc0029b7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9b 02 c0       	mov    eax,0xc0029b8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000e4e3:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c000e50d:	e8 e5 f2 00 00       	call   c001d7f7 <schedule()>
c000e512:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9b 02 c0       	push   0xc0029bc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 a8 d5 02 c0       	mov    eax,0xc002d5a8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9b 02 c0       	push   0xc0029bcf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 44 65 02 c0       	mov    eax,0xc0026544
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9b 02 c0       	push   0xc0029bd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 78 62 02 c0       	mov    eax,0xc0026278
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9b 02 c0       	push   0xc0029be2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 44 66 02 c0       	mov    eax,0xc0026644
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9b 02 c0       	push   0xc0029bec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 c4 63 02 c0       	mov    eax,0xc00263c4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9b 02 c0       	push   0xc0029bf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ac d5 02 c0       	mov    eax,0xc002d5ac
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 9c 02 c0       	push   0xc0029c02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ad d5 02 c0       	mov    eax,0xc002d5ad
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 61 54 00 00       	call   c0013ace <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f 9c 02 c0       	push   0xc0029c0f
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c000e6be:	68 28 9c 02 c0       	push   0xc0029c28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 0f ed 00 00       	call   c001d3da <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 f2 ee 00 00       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 b6 df 01 c0       	push   0xc001dfb6
c000e6e9:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c000e6ef:	e8 de ee 00 00       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 a8 0a 03 c0       	mov    ds:0xc0030aa8,eax
c000e6fc:	68 0c 9d 02 c0       	push   0xc0029d0c
c000e701:	c6 05 ad d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5ad,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 4f fc 00 00       	call   c001e361 <Vm::initialise8086()>
c000e712:	e8 7f 41 00 00       	call   c0012896 <Fs::initVFS()>
c000e717:	c7 04 24 35 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c35
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c 9d 02 c0       	push   0xc0029d0c
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 19 d5 00 00       	call   c001bc65 <Sys::loadSyscalls()>
c000e74c:	e8 11 b4 00 00       	call   c0019b62 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f 9c 02 c0       	push   0xc0029c4f
c000e75b:	68 58 9c 02 c0       	push   0xc0029c58
c000e760:	e8 c2 c2 00 00       	call   c001aa27 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 19 4c 00 00       	call   c0013386 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d30
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 04 53 00 00       	call   c0013a8e <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c60
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 2f af 00 00       	call   c00196ca <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c7a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b 9c 02 c0       	push   0xc0029c8b
c000e7b6:	e8 7a e6 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 9f e8 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 fc f1 00 00       	call   c001d9cd <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 9c 02 c0       	push   0xc0029ca7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 5d 53 00 00       	call   c0013b48 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 c1 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5c1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 87 78 01 00       	call   c0026206 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 a2 9c 00 00       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 7b 9c 00 00       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 59 9c 00 00       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 37 9c 00 00       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 c0 d5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d5c0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 45 9b 00 00       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 20 9b 00 00       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 f1 76 01 00       	call   c00261c0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ae 76 01 00       	call   c00261a0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 3c 9b 00 00       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 9c 02 c0       	push   0xc0029cb0
c000eb62:	e8 04 b1 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 9c 02 c0       	push   0xc0029cb6
c000eb9a:	e8 cc b0 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 9d 02 c0       	push   0xc0029d50
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 c0 d5 02 c0 04 	test   BYTE PTR ds:0xc002d5c0,0x4
c000ec03:	0f 94 05 e0 c4 02 c0 	sete   BYTE PTR ds:0xc002c4e0
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 b7 8c 00 00       	call   c00178d0 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 1c 4d 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c60
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 b8 9a 00 00       	call   c0018714 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 d9 4c 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 55 52 00 00       	call   c0013edc <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 a9 4c 00 00       	call   c0013944 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc 9c 02 c0       	push   0xc0029cbc
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 2b ea 00 00       	call   c001d6f4 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 9c 02 c0       	push   0xc0029cd7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 f4 37 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 9c 02 c0       	push   0xc0029ce8
c000ed34:	e8 32 af 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 9c 02 c0       	push   0xc0029cf5
c000ed49:	e8 1d af 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029cff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 06 af 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 b2 d5 02 c0       	mov    ds:0xc002d5b2,eax
c000ee21:	66 89 15 b0 d5 02 c0 	mov    WORD PTR ds:0xc002d5b0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000ef38:	48                   	dec    eax
c000ef39:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 c1 92 01 00       	call   c0028250 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 b8 92 01 00       	call   c0028250 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 b8 d5 02 c0 ff 07 	mov    WORD PTR ds:0xc002d5b8,0x7ff
c000f085:	a3 ba d5 02 c0       	mov    ds:0xc002d5ba,eax
c000f08a:	0f 01 1d b8 d5 02 c0 	lidtd  ds:0xc002d5b8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f37c:	e8 df 26 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 49 17 00 00       	call   c0010ae8 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 7a 17 00 00       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 74 c3 02 c0    	mov    ecx,DWORD PTR ds:0xc002c374
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 74 c3 02 c0       	mov    eax,ds:0xc002c374
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 9d 02 c0       	push   0xc0029da0
c000f455:	e8 b1 30 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 74 c3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c374,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c000f481:	8b 2d 74 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c374
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 c5 24 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 74 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c374
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 9d 02 c0       	push   0xc0029dd0
c000f50d:	e8 59 a7 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 9d 02 c0       	push   0xc0029dd5
c000f523:	e8 43 a7 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000f543:	48                   	dec    eax
c000f544:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f564:	e8 f7 24 00 00       	call   c0011a60 <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c000f57a:	e8 8b 21 00 00       	call   c001170a <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 dc 9d 02 c0       	push   0xc0029ddc
c000f6a7:	e8 5f 2e 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 39 09 00 00       	call   c000ffea <installVgaTextImplementation()>
c000f6b1:	0f b6 05 80 c3 02 c0 	movzx  eax,BYTE PTR ds:0xc002c380
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 80 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c80]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 b6 c3 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3c4a],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 b5 c3 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3c4b]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 80 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c80]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 f4 9d 02 c0       	push   0xc0029df4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 c0 d5 02 c0       	mov    ds:0xc002d5c0,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 24 03 00 00       	call   c000fa7d <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 02 1c 00 00       	call   c0011360 <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 c9 1d 00 00       	call   c0011532 <VAS::VAS()>
c000f769:	89 1d 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 a8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a8,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 3d 20 00 00       	call   c00117e2 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba 00 d6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2a00],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be 00 d6 02 c0       	mov    esi,0xc002d600
c000f816:	8d 90 00 d6 02 c0    	lea    edx,[eax-0x3ffd2a00]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 00 d6 02 c0    	lea    eax,[edx-0x3ffd2a00]
c000f87c:	8d 94 11 00 d6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2a00]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 c4 c4 02 c0    	mov    esi,DWORD PTR ds:0xc002c4c4
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 c4 c4 02 c0    	add    eax,DWORD PTR ds:0xc002c4c4
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 c4 c4 02 c0    	mov    edx,DWORD PTR ds:0xc002c4c4
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d f0 d5 02 c0    	dec    DWORD PTR ds:0xc002d5f0
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 13 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e13
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 3d a3 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 e4 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d5e4
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 6b                	je     c000f9cd <Phys::allocatePage()+0x8d>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 e4 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d5e4,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f983:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f986:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f98c:	e8 b7 28 00 00       	call   c0012248 <VAS::scanForEviction()>
c000f991:	83 c4 10             	add    esp,0x10
c000f994:	85 c0                	test   eax,eax
c000f996:	75 4d                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f998:	83 ec 0c             	sub    esp,0xc
c000f99b:	68 00 10 00 00       	push   0x1000
c000f9a0:	e8 07 fe ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9a5:	83 c4 10             	add    esp,0x10
c000f9a8:	85 c0                	test   eax,eax
c000f9aa:	75 39                	jne    c000f9e5 <Phys::allocatePage()+0xa5>
c000f9ac:	83 ec 0c             	sub    esp,0xc
c000f9af:	68 29 9e 02 c0       	push   0xc0029e29
c000f9b4:	e8 b2 a2 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 1d e4 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e4
c000f9c2:	53                   	push   ebx
c000f9c3:	e8 01 ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9c8:	5a                   	pop    edx
c000f9c9:	84 c0                	test   al,al
c000f9cb:	75 95                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9cd:	6a 01                	push   0x1
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 c2 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9d5:	a1 e4 d5 02 c0       	mov    eax,ds:0xc002d5e4
c000f9da:	59                   	pop    ecx
c000f9db:	ff 05 f0 d5 02 c0    	inc    DWORD PTR ds:0xc002d5f0
c000f9e1:	c1 e0 0c             	shl    eax,0xc
c000f9e4:	5b                   	pop    ebx
c000f9e5:	5a                   	pop    edx
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	c3                   	ret    

c000f9e9 <Phys::allocateContiguousPages(int)>:
c000f9e9:	57                   	push   edi
c000f9ea:	56                   	push   esi
c000f9eb:	53                   	push   ebx
c000f9ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9f0:	fa                   	cli    
c000f9f1:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000f9f7:	31 db                	xor    ebx,ebx
c000f9f9:	85 db                	test   ebx,ebx
c000f9fb:	75 11                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000f9fd:	e8 3e ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa02:	83 fe 01             	cmp    esi,0x1
c000fa05:	89 c7                	mov    edi,eax
c000fa07:	74 21                	je     c000fa2a <Phys::allocateContiguousPages(int)+0x41>
c000fa09:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0e:	e8 2d ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	c1 e2 0c             	shl    edx,0xc
c000fa18:	01 fa                	add    edx,edi
c000fa1a:	39 c2                	cmp    edx,eax
c000fa1c:	74 20                	je     c000fa3e <Phys::allocateContiguousPages(int)+0x55>
c000fa1e:	bb 01 00 00 00       	mov    ebx,0x1
c000fa23:	89 c7                	mov    edi,eax
c000fa25:	83 fe 01             	cmp    esi,0x1
c000fa28:	75 e4                	jne    c000fa0e <Phys::allocateContiguousPages(int)+0x25>
c000fa2a:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000fa2f:	48                   	dec    eax
c000fa30:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000fa35:	75 01                	jne    c000fa38 <Phys::allocateContiguousPages(int)+0x4f>
c000fa37:	fb                   	sti    
c000fa38:	89 f8                	mov    eax,edi
c000fa3a:	5b                   	pop    ebx
c000fa3b:	5e                   	pop    esi
c000fa3c:	5f                   	pop    edi
c000fa3d:	c3                   	ret    
c000fa3e:	43                   	inc    ebx
c000fa3f:	39 f3                	cmp    ebx,esi
c000fa41:	75 b6                	jne    c000f9f9 <Phys::allocateContiguousPages(int)+0x10>
c000fa43:	eb e5                	jmp    c000fa2a <Phys::allocateContiguousPages(int)+0x41>

c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa45:	56                   	push   esi
c000fa46:	53                   	push   ebx
c000fa47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa4b:	39 1d e8 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5e8,ebx
c000fa51:	73 06                	jae    c000fa59 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa53:	89 1d e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,ebx
c000fa59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5d:	c1 eb 0c             	shr    ebx,0xc
c000fa60:	c1 e8 0c             	shr    eax,0xc
c000fa63:	39 d8                	cmp    eax,ebx
c000fa65:	73 13                	jae    c000fa7a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa67:	6a 00                	push   0x0
c000fa69:	8d 70 01             	lea    esi,[eax+0x1]
c000fa6c:	50                   	push   eax
c000fa6d:	e8 25 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fa72:	5a                   	pop    edx
c000fa73:	89 f0                	mov    eax,esi
c000fa75:	59                   	pop    ecx
c000fa76:	39 f3                	cmp    ebx,esi
c000fa78:	75 ed                	jne    c000fa67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa7a:	5b                   	pop    ebx
c000fa7b:	5e                   	pop    esi
c000fa7c:	c3                   	ret    

c000fa7d <Phys::physicalMemorySetup(unsigned int)>:
c000fa7d:	55                   	push   ebp
c000fa7e:	57                   	push   edi
c000fa7f:	56                   	push   esi
c000fa80:	53                   	push   ebx
c000fa81:	31 db                	xor    ebx,ebx
c000fa83:	83 ec 40             	sub    esp,0x40
c000fa86:	6a 30                	push   0x30
c000fa88:	6a 00                	push   0x0
c000fa8a:	68 00 d6 02 c0       	push   0xc002d600
c000fa8f:	e8 bc 0c ff ff       	call   c0000750 <memset>
c000fa94:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa9d:	05 00 10 00 00       	add    eax,0x1000
c000faa2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000faa6:	5a                   	pop    edx
c000faa7:	59                   	pop    ecx
c000faa8:	50                   	push   eax
c000faa9:	68 37 9e 02 c0       	push   0xc0029e37
c000faae:	e8 58 2a 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000fab3:	83 c4 10             	add    esp,0x10
c000fab6:	83 ec 08             	sub    esp,0x8
c000fab9:	6a 01                	push   0x1
c000fabb:	53                   	push   ebx
c000fabc:	43                   	inc    ebx
c000fabd:	e8 d5 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fac2:	83 c4 10             	add    esp,0x10
c000fac5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000facb:	75 e9                	jne    c000fab6 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000facd:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fad4:	66 85 c0             	test   ax,ax
c000fad7:	0f 84 b5 01 00 00    	je     c000fc92 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fadd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fae1:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fae7:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000faec:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000faf2:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000faf8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fafc:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb00:	01 c1                	add    ecx,eax
c000fb02:	11 d3                	adc    ebx,edx
c000fb04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb0c:	31 ff                	xor    edi,edi
c000fb0e:	89 d3                	mov    ebx,edx
c000fb10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb14:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb1a:	09 cb                	or     ebx,ecx
c000fb1c:	0f 85 80 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb22:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb2e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb37:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb3f:	eb 49                	jmp    c000fb8a <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb41:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb45:	83 c3 18             	add    ebx,0x18
c000fb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb50:	39 d0                	cmp    eax,edx
c000fb52:	0f 84 4a 01 00 00    	je     c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb58:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb5e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb61:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb63:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb67:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb6b:	01 c6                	add    esi,eax
c000fb6d:	89 d5                	mov    ebp,edx
c000fb6f:	11 d7                	adc    edi,edx
c000fb71:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb75:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb79:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb7c:	31 ff                	xor    edi,edi
c000fb7e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb82:	09 cd                	or     ebp,ecx
c000fb84:	0f 85 18 01 00 00    	jne    c000fca2 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb8a:	89 f1                	mov    ecx,esi
c000fb8c:	83 f1 01             	xor    ecx,0x1
c000fb8f:	09 f9                	or     ecx,edi
c000fb91:	75 ae                	jne    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fb93:	be 00 00 08 00       	mov    esi,0x80000
c000fb98:	89 cf                	mov    edi,ecx
c000fb9a:	39 c6                	cmp    esi,eax
c000fb9c:	19 d7                	sbb    edi,edx
c000fb9e:	0f 82 98 00 00 00    	jb     c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fba4:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fba8:	89 cd                	mov    ebp,ecx
c000fbaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbae:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbb2:	19 fd                	sbb    ebp,edi
c000fbb4:	0f 83 82 00 00 00    	jae    c000fc3c <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbba:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbbf:	39 f0                	cmp    eax,esi
c000fbc1:	19 f9                	sbb    ecx,edi
c000fbc3:	0f 82 03 01 00 00    	jb     c000fccc <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbc9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd6:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbdc:	83 d7 ff             	adc    edi,0xffffffff
c000fbdf:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe3:	31 c0                	xor    eax,eax
c000fbe5:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe9:	39 f2                	cmp    edx,esi
c000fbeb:	89 c2                	mov    edx,eax
c000fbed:	19 fa                	sbb    edx,edi
c000fbef:	0f 83 4c ff ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf5:	b8 00 00 08 00       	mov    eax,0x80000
c000fbfa:	83 ec 08             	sub    esp,0x8
c000fbfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc01:	50                   	push   eax
c000fc02:	e8 3e fe ff ff       	call   c000fa45 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc07:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc0f:	83 c4 0c             	add    esp,0xc
c000fc12:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc16:	03 05 f4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5f4
c000fc1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc23:	a3 f4 d5 02 c0       	mov    ds:0xc002d5f4,eax
c000fc28:	52                   	push   edx
c000fc29:	50                   	push   eax
c000fc2a:	68 5d 9e 02 c0       	push   0xc0029e5d
c000fc2f:	e8 d7 28 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c000fc34:	83 c4 10             	add    esp,0x10
c000fc37:	e9 05 ff ff ff       	jmp    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc3c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc44:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc48:	39 ee                	cmp    esi,ebp
c000fc4a:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc4e:	0f 82 ed fe ff ff    	jb     c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc54:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc59:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc5d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc61:	0f 83 da fe ff ff    	jae    c000fb41 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc67:	39 e8                	cmp    eax,ebp
c000fc69:	89 d1                	mov    ecx,edx
c000fc6b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc6f:	73 89                	jae    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc79:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc7d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8d:	e9 68 ff ff ff       	jmp    c000fbfa <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	68 4f 9e 02 c0       	push   0xc0029e4f
c000fc9a:	e8 cc 9f 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000fc9f:	83 c4 10             	add    esp,0x10
c000fca2:	bb 40 01 00 00       	mov    ebx,0x140
c000fca7:	83 ec 08             	sub    esp,0x8
c000fcaa:	6a 00                	push   0x0
c000fcac:	53                   	push   ebx
c000fcad:	43                   	inc    ebx
c000fcae:	e8 e4 fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fcb3:	ff 05 f4 d5 02 c0    	inc    DWORD PTR ds:0xc002d5f4
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcc2:	75 e3                	jne    c000fca7 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcc4:	83 c4 3c             	add    esp,0x3c
c000fcc7:	5b                   	pop    ebx
c000fcc8:	5e                   	pop    esi
c000fcc9:	5f                   	pop    edi
c000fcca:	5d                   	pop    ebp
c000fccb:	c3                   	ret    
c000fccc:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcd4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcdc:	e9 e8 fe ff ff       	jmp    c000fbc9 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fce1:	90                   	nop

c000fce2 <Pipe::isAtty()>:
c000fce2:	31 c0                	xor    eax,eax
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <Pipe::~Pipe()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c000fcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf2:	89 10                	mov    DWORD PTR [eax],edx
c000fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf8:	83 ec 0c             	sub    esp,0xc
c000fcfb:	50                   	push   eax
c000fcfc:	e8 3f 12 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000fd01:	83 c4 10             	add    esp,0x10
c000fd04:	90                   	nop
c000fd05:	83 c4 0c             	add    esp,0xc
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Pipe::~Pipe()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd14:	e8 cd ff ff ff       	call   c000fce6 <Pipe::~Pipe()>
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	83 ec 08             	sub    esp,0x8
c000fd1f:	6a 20                	push   0x20
c000fd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd25:	e8 09 27 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop

c000fd32 <Pipe::read(unsigned long long, void*, int*)>:
c000fd32:	55                   	push   ebp
c000fd33:	57                   	push   edi
c000fd34:	56                   	push   esi
c000fd35:	53                   	push   ebx
c000fd36:	83 ec 1c             	sub    esp,0x1c
c000fd39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd41:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd45:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd48:	89 c8                	mov    eax,ecx
c000fd4a:	99                   	cdq    
c000fd4b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd4f:	74 24                	je     c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd51:	39 f9                	cmp    ecx,edi
c000fd53:	89 d1                	mov    ecx,edx
c000fd55:	19 f1                	sbb    ecx,esi
c000fd57:	73 1c                	jae    c000fd75 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd59:	fa                   	cli    
c000fd5a:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c000fd60:	e8 92 da 00 00       	call   c001d7f7 <schedule()>
c000fd65:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c000fd6a:	48                   	dec    eax
c000fd6b:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c000fd70:	75 d3                	jne    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd72:	fb                   	sti    
c000fd73:	eb d0                	jmp    c000fd45 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd75:	39 f8                	cmp    eax,edi
c000fd77:	89 d1                	mov    ecx,edx
c000fd79:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd7c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd80:	19 f1                	sbb    ecx,esi
c000fd82:	73 07                	jae    c000fd8b <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd84:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd8b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd8e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd91:	29 f7                	sub    edi,esi
c000fd93:	89 f8                	mov    eax,edi
c000fd95:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd99:	99                   	cdq    
c000fd9a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda1:	19 d0                	sbb    eax,edx
c000fda3:	73 07                	jae    c000fdac <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fda5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fda8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdac:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdb5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdba:	74 0d                	je     c000fdc9 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdbc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdbf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdc3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc9:	85 d2                	test   edx,edx
c000fdcb:	74 11                	je     c000fdde <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdd1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdd4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdd8:	89 d1                	mov    ecx,edx
c000fdda:	89 c7                	mov    edi,eax
c000fddc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fde1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fde4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fde7:	99                   	cdq    
c000fde8:	89 f7                	mov    edi,esi
c000fdea:	03 04 24             	add    eax,DWORD PTR [esp]
c000fded:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fdf1:	c1 ff 1f             	sar    edi,0x1f
c000fdf4:	57                   	push   edi
c000fdf5:	56                   	push   esi
c000fdf6:	52                   	push   edx
c000fdf7:	50                   	push   eax
c000fdf8:	e8 47 68 01 00       	call   c0026644 <__umoddi3>
c000fdfd:	83 c4 10             	add    esp,0x10
c000fe00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe08:	75 10                	jne    c000fe1a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	68 79 9e 02 c0       	push   0xc0029e79
c000fe12:	e8 54 9e 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe1e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe21:	89 10                	mov    DWORD PTR [eax],edx
c000fe23:	83 c4 1c             	add    esp,0x1c
c000fe26:	31 c0                	xor    eax,eax
c000fe28:	5b                   	pop    ebx
c000fe29:	5e                   	pop    esi
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop

c000fe2e <Pipe::write(unsigned long long, void*, int*)>:
c000fe2e:	55                   	push   ebp
c000fe2f:	57                   	push   edi
c000fe30:	56                   	push   esi
c000fe31:	53                   	push   ebx
c000fe32:	83 ec 1c             	sub    esp,0x1c
c000fe35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe3d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe40:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe4b:	89 d8                	mov    eax,ebx
c000fe4d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe54:	89 d6                	mov    esi,edx
c000fe56:	89 d7                	mov    edi,edx
c000fe58:	c1 ff 1f             	sar    edi,0x1f
c000fe5b:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe5e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe62:	c1 f8 1f             	sar    eax,0x1f
c000fe65:	39 f3                	cmp    ebx,esi
c000fe67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6f:	19 f8                	sbb    eax,edi
c000fe71:	b8 01 00 00 00       	mov    eax,0x1
c000fe76:	72 6e                	jb     c000fee6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe7b:	01 d0                	add    eax,edx
c000fe7d:	99                   	cdq    
c000fe7e:	f7 fb                	idiv   ebx
c000fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe84:	29 d3                	sub    ebx,edx
c000fe86:	89 d7                	mov    edi,edx
c000fe88:	89 de                	mov    esi,ebx
c000fe8a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe8d:	c1 fb 1f             	sar    ebx,0x1f
c000fe90:	39 f2                	cmp    edx,esi
c000fe92:	19 d8                	sbb    eax,ebx
c000fe94:	b8 00 00 00 00       	mov    eax,0x0
c000fe99:	72 04                	jb     c000fe9f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe9b:	89 d0                	mov    eax,edx
c000fe9d:	29 f0                	sub    eax,esi
c000fe9f:	89 d3                	mov    ebx,edx
c000fea1:	29 c3                	sub    ebx,eax
c000fea3:	74 0b                	je     c000feb0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fea5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fea8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000feac:	89 d9                	mov    ecx,ebx
c000feae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb0:	85 c0                	test   eax,eax
c000feb2:	74 0d                	je     c000fec1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000feb4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feb8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000febb:	89 de                	mov    esi,ebx
c000febd:	89 c1                	mov    ecx,eax
c000febf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fec1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fec4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec9:	75 10                	jne    c000fedb <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	68 95 9e 02 c0       	push   0xc0029e95
c000fed3:	e8 93 9d 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c000fed8:	83 c4 10             	add    esp,0x10
c000fedb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fedf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fee2:	89 08                	mov    DWORD PTR [eax],ecx
c000fee4:	31 c0                	xor    eax,eax
c000fee6:	83 c4 1c             	add    esp,0x1c
c000fee9:	5b                   	pop    ebx
c000feea:	5e                   	pop    esi
c000feeb:	5f                   	pop    edi
c000feec:	5d                   	pop    ebp
c000feed:	c3                   	ret    

c000feee <Pipe::Pipe(int)>:
c000feee:	83 ec 0c             	sub    esp,0xc
c000fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef5:	83 ec 08             	sub    esp,0x8
c000fef8:	6a 00                	push   0x0
c000fefa:	50                   	push   eax
c000fefb:	e8 5e 0e 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c000ff00:	83 c4 10             	add    esp,0x10
c000ff03:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c000ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0c:	89 10                	mov    DWORD PTR [eax],edx
c000ff0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff16:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff28:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	50                   	push   eax
c000ff37:	e8 60 f6 ff ff       	call   c000f59c <malloc>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	89 c2                	mov    edx,eax
c000ff41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff45:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff50:	90                   	nop
c000ff51:	83 c4 0c             	add    esp,0xc
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <VgaText::isAtty()>:
c000ff56:	b0 01                	mov    al,0x1
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <VgaText::~VgaText()>:
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	ba 44 9f 02 c0       	mov    edx,0xc0029f44
c000ff62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff66:	89 10                	mov    DWORD PTR [eax],edx
c000ff68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	50                   	push   eax
c000ff70:	e8 cb 0f 00 00       	call   c0010f40 <UnixFile::~UnixFile()>
c000ff75:	83 c4 10             	add    esp,0x10
c000ff78:	90                   	nop
c000ff79:	83 c4 0c             	add    esp,0xc
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::~VgaText()>:
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	83 ec 0c             	sub    esp,0xc
c000ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff88:	e8 cd ff ff ff       	call   c000ff5a <VgaText::~VgaText()>
c000ff8d:	83 c4 10             	add    esp,0x10
c000ff90:	83 ec 08             	sub    esp,0x8
c000ff93:	68 c4 02 00 00       	push   0x2c4
c000ff98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff9c:	e8 92 24 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	83 c4 0c             	add    esp,0xc
c000ffa7:	c3                   	ret    

c000ffa8 <VgaText::read(unsigned long long, void*, int*)>:
c000ffa8:	83 ec 10             	sub    esp,0x10
c000ffab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb7:	e8 0a 5a 00 00       	call   c00159c6 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffc0:	89 02                	mov    DWORD PTR [edx],eax
c000ffc2:	31 c0                	xor    eax,eax
c000ffc4:	83 c4 1c             	add    esp,0x1c
c000ffc7:	c3                   	ret    

c000ffc8 <setTerminalScrollLock(bool)>:
c000ffc8:	c3                   	ret    

c000ffc9 <addToTerminalCycle(VgaText*)>:
c000ffc9:	8b 15 60 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d660
c000ffcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd3:	85 d2                	test   edx,edx
c000ffd5:	75 09                	jne    c000ffe0 <addToTerminalCycle(VgaText*)+0x17>
c000ffd7:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffda:	a3 60 d6 02 c0       	mov    ds:0xc002d660,eax
c000ffdf:	c3                   	ret    
c000ffe0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffe3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffe6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffe9:	c3                   	ret    

c000ffea <installVgaTextImplementation()>:
c000ffea:	83 ec 10             	sub    esp,0x10
c000ffed:	6a 20                	push   0x20
c000ffef:	6a 00                	push   0x0
c000fff1:	68 40 d6 02 c0       	push   0xc002d640
c000fff6:	e8 55 07 ff ff       	call   c0000750 <memset>
c000fffb:	83 c4 1c             	add    esp,0x1c
c000fffe:	c3                   	ret    

c000ffff <scrollTerminalScrollLock(int)>:
c000ffff:	c3                   	ret    

c0010000 <VgaText::updateTitle()>:
c0010000:	53                   	push   ebx
c0010001:	31 c0                	xor    eax,eax
c0010003:	83 ec 58             	sub    esp,0x58
c0010006:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001000a:	89 e1                	mov    ecx,esp
c001000c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010010:	40                   	inc    eax
c0010011:	83 f8 50             	cmp    eax,0x50
c0010014:	75 f6                	jne    c001000c <VgaText::updateTitle()+0xc>
c0010016:	31 c0                	xor    eax,eax
c0010018:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001001f:	84 db                	test   bl,bl
c0010021:	74 06                	je     c0010029 <VgaText::updateTitle()+0x29>
c0010023:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010026:	40                   	inc    eax
c0010027:	eb ef                	jmp    c0010018 <VgaText::updateTitle()+0x18>
c0010029:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001002c:	85 c0                	test   eax,eax
c001002e:	74 09                	je     c0010039 <VgaText::updateTitle()+0x39>
c0010030:	53                   	push   ebx
c0010031:	53                   	push   ebx
c0010032:	51                   	push   ecx
c0010033:	52                   	push   edx
c0010034:	ff d0                	call   eax
c0010036:	83 c4 10             	add    esp,0x10
c0010039:	83 c4 58             	add    esp,0x58
c001003c:	5b                   	pop    ebx
c001003d:	c3                   	ret    

c001003e <VgaText::load()>:
c001003e:	53                   	push   ebx
c001003f:	31 c0                	xor    eax,eax
c0010041:	83 ec 58             	sub    esp,0x58
c0010044:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010048:	89 e2                	mov    edx,esp
c001004a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001004e:	40                   	inc    eax
c001004f:	83 f8 50             	cmp    eax,0x50
c0010052:	75 f6                	jne    c001004a <VgaText::load()+0xc>
c0010054:	31 c0                	xor    eax,eax
c0010056:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001005d:	84 c9                	test   cl,cl
c001005f:	74 06                	je     c0010067 <VgaText::load()+0x29>
c0010061:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010064:	40                   	inc    eax
c0010065:	eb ef                	jmp    c0010056 <VgaText::load()+0x18>
c0010067:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001006a:	85 c0                	test   eax,eax
c001006c:	74 09                	je     c0010077 <VgaText::load()+0x39>
c001006e:	51                   	push   ecx
c001006f:	51                   	push   ecx
c0010070:	52                   	push   edx
c0010071:	53                   	push   ebx
c0010072:	ff d0                	call   eax
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001007a:	85 c0                	test   eax,eax
c001007c:	74 09                	je     c0010087 <VgaText::load()+0x49>
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	53                   	push   ebx
c0010082:	ff d0                	call   eax
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	83 c4 58             	add    esp,0x58
c001008a:	5b                   	pop    ebx
c001008b:	c3                   	ret    

c001008c <VgaText::updateCursor()>:
c001008c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010090:	39 05 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,eax
c0010096:	75 09                	jne    c00100a1 <VgaText::updateCursor()+0x15>
c0010098:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001009b:	85 c0                	test   eax,eax
c001009d:	74 02                	je     c00100a1 <VgaText::updateCursor()+0x15>
c001009f:	ff e0                	jmp    eax
c00100a1:	c3                   	ret    

c00100a2 <VgaText::doANSI_SGR(int)>:
c00100a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100aa:	85 d2                	test   edx,edx
c00100ac:	75 0b                	jne    c00100b9 <VgaText::doANSI_SGR(int)+0x17>
c00100ae:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100b1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100b4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100b7:	eb 59                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100b9:	83 fa 07             	cmp    edx,0x7
c00100bc:	75 0b                	jne    c00100c9 <VgaText::doANSI_SGR(int)+0x27>
c00100be:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100c1:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100c4:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100c7:	eb 49                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100c9:	83 fa 1b             	cmp    edx,0x1b
c00100cc:	74 e0                	je     c00100ae <VgaText::doANSI_SGR(int)+0xc>
c00100ce:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100d1:	83 f9 07             	cmp    ecx,0x7
c00100d4:	77 09                	ja     c00100df <VgaText::doANSI_SGR(int)+0x3d>
c00100d6:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c00100dd:	eb 20                	jmp    c00100ff <VgaText::doANSI_SGR(int)+0x5d>
c00100df:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100e2:	83 f9 07             	cmp    ecx,0x7
c00100e5:	77 09                	ja     c00100f0 <VgaText::doANSI_SGR(int)+0x4e>
c00100e7:	8b 14 8d 00 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3b00]
c00100ee:	eb 22                	jmp    c0010112 <VgaText::doANSI_SGR(int)+0x70>
c00100f0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100f3:	83 f9 07             	cmp    ecx,0x7
c00100f6:	77 0b                	ja     c0010103 <VgaText::doANSI_SGR(int)+0x61>
c00100f8:	8b 14 95 b8 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c48]
c00100ff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010102:	c3                   	ret    
c0010103:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010106:	83 f9 07             	cmp    ecx,0x7
c0010109:	77 0a                	ja     c0010115 <VgaText::doANSI_SGR(int)+0x73>
c001010b:	8b 14 95 90 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c70]
c0010112:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010115:	c3                   	ret    

c0010116 <VgaText::setDefaultBgColour(VgaColour)>:
c0010116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001011a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010121:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010124:	c3                   	ret    
c0010125:	90                   	nop

c0010126 <VgaText::setDefaultFgColour(VgaColour)>:
c0010126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001012a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001012e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010131:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010134:	c3                   	ret    
c0010135:	90                   	nop

c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010136:	53                   	push   ebx
c0010137:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001013b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001013f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010143:	51                   	push   ecx
c0010144:	e8 cd ff ff ff       	call   c0010116 <VgaText::setDefaultBgColour(VgaColour)>
c0010149:	58                   	pop    eax
c001014a:	5a                   	pop    edx
c001014b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001014f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010153:	5b                   	pop    ebx
c0010154:	eb d0                	jmp    c0010126 <VgaText::setDefaultFgColour(VgaColour)>

c0010156 <VgaText::setTitleTextColour(VgaColour)>:
c0010156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001015a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010161:	e9 9a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010166 <VgaText::setTitleColour(VgaColour)>:
c0010166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010171:	e9 8a fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>

c0010176 <VgaText::setTitle(char*)>:
c0010176:	53                   	push   ebx
c0010177:	83 ec 10             	sub    esp,0x10
c001017a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010182:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010188:	50                   	push   eax
c0010189:	e8 7e 06 ff ff       	call   c000080c <strcpy>
c001018e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010192:	83 c4 18             	add    esp,0x18
c0010195:	5b                   	pop    ebx
c0010196:	e9 65 fe ff ff       	jmp    c0010000 <VgaText::updateTitle()>
c001019b:	90                   	nop

c001019c <VgaText::combineColours(unsigned char, unsigned char)>:
c001019c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101a0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101a5:	83 e0 0f             	and    eax,0xf
c00101a8:	c1 e2 04             	shl    edx,0x4
c00101ab:	09 d0                	or     eax,edx
c00101ad:	c3                   	ret    

c00101ae <VgaText::scrollScreen()>:
c00101ae:	55                   	push   ebp
c00101af:	b9 01 00 00 00       	mov    ecx,0x1
c00101b4:	57                   	push   edi
c00101b5:	56                   	push   esi
c00101b6:	53                   	push   ebx
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101be:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101c4:	31 ff                	xor    edi,edi
c00101c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101c9:	83 f9 17             	cmp    ecx,0x17
c00101cc:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101cf:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101d6:	75 27                	jne    c00101ff <VgaText::scrollScreen()+0x51>
c00101d8:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101db:	01 f5                	add    ebp,esi
c00101dd:	f7 c7 01 00 00 00    	test   edi,0x1
c00101e3:	74 16                	je     c00101fb <VgaText::scrollScreen()+0x4d>
c00101e5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101e9:	50                   	push   eax
c00101ea:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101ee:	50                   	push   eax
c00101ef:	e8 a8 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c00101f4:	5a                   	pop    edx
c00101f5:	5a                   	pop    edx
c00101f6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101f9:	eb 04                	jmp    c00101ff <VgaText::scrollScreen()+0x51>
c00101fb:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101ff:	47                   	inc    edi
c0010200:	46                   	inc    esi
c0010201:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010207:	75 bd                	jne    c00101c6 <VgaText::scrollScreen()+0x18>
c0010209:	41                   	inc    ecx
c001020a:	83 f9 18             	cmp    ecx,0x18
c001020d:	75 af                	jne    c00101be <VgaText::scrollScreen()+0x10>
c001020f:	39 1d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ebx
c0010215:	75 1b                	jne    c0010232 <VgaText::scrollScreen()+0x84>
c0010217:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001021b:	74 05                	je     c0010222 <VgaText::scrollScreen()+0x74>
c001021d:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010220:	eb 10                	jmp    c0010232 <VgaText::scrollScreen()+0x84>
c0010222:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010225:	85 c0                	test   eax,eax
c0010227:	74 09                	je     c0010232 <VgaText::scrollScreen()+0x84>
c0010229:	83 ec 0c             	sub    esp,0xc
c001022c:	53                   	push   ebx
c001022d:	ff d0                	call   eax
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010236:	83 c4 0c             	add    esp,0xc
c0010239:	5b                   	pop    ebx
c001023a:	5e                   	pop    esi
c001023b:	5f                   	pop    edi
c001023c:	5d                   	pop    ebp
c001023d:	e9 4a fe ff ff       	jmp    c001008c <VgaText::updateCursor()>

c0010242 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010247:	c1 e0 08             	shl    eax,0x8
c001024a:	89 c2                	mov    edx,eax
c001024c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010251:	09 d0                	or     eax,edx
c0010253:	c3                   	ret    

c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010254:	56                   	push   esi
c0010255:	53                   	push   ebx
c0010256:	51                   	push   ecx
c0010257:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001025b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010260:	50                   	push   eax
c0010261:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010266:	50                   	push   eax
c0010267:	e8 30 ff ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c001026c:	5b                   	pop    ebx
c001026d:	0f b6 c0             	movzx  eax,al
c0010270:	5e                   	pop    esi
c0010271:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010276:	50                   	push   eax
c0010277:	53                   	push   ebx
c0010278:	e8 c5 ff ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c001027d:	5a                   	pop    edx
c001027e:	5e                   	pop    esi
c001027f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010282:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010288:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001028c:	0f b7 d2             	movzx  edx,dx
c001028f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010293:	39 0d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ecx
c0010299:	75 10                	jne    c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001029b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001029e:	85 c0                	test   eax,eax
c00102a0:	74 09                	je     c00102ab <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102a6:	5a                   	pop    edx
c00102a7:	5b                   	pop    ebx
c00102a8:	5e                   	pop    esi
c00102a9:	ff e0                	jmp    eax
c00102ab:	58                   	pop    eax
c00102ac:	5b                   	pop    ebx
c00102ad:	5e                   	pop    esi
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VgaText::getCursorX()>:
c00102b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102b7:	c3                   	ret    

c00102b8 <VgaText::getCursorY()>:
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102bf:	c3                   	ret    

c00102c0 <VgaText::setCursor(int, int)>:
c00102c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102cf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102d2:	e9 b5 fd ff ff       	jmp    c001008c <VgaText::updateCursor()>

c00102d7 <setActiveTerminal(VgaText*)>:
c00102d7:	53                   	push   ebx
c00102d8:	83 ec 08             	sub    esp,0x8
c00102db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102df:	85 db                	test   ebx,ebx
c00102e1:	75 11                	jne    c00102f4 <setActiveTerminal(VgaText*)+0x1d>
c00102e3:	c7 44 24 10 d0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ed0
c00102eb:	83 c4 08             	add    esp,0x8
c00102ee:	5b                   	pop    ebx
c00102ef:	e9 77 99 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c00102f4:	a1 64 d6 02 c0       	mov    eax,ds:0xc002d664
c00102f9:	85 c0                	test   eax,eax
c00102fb:	74 0c                	je     c0010309 <setActiveTerminal(VgaText*)+0x32>
c00102fd:	83 ec 0c             	sub    esp,0xc
c0010300:	50                   	push   eax
c0010301:	e8 86 fd ff ff       	call   c001008c <VgaText::updateCursor()>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	89 1d 64 d6 02 c0    	mov    DWORD PTR ds:0xc002d664,ebx
c001030f:	51                   	push   ecx
c0010310:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010313:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010316:	53                   	push   ebx
c0010317:	e8 a4 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001031c:	83 c4 10             	add    esp,0x10
c001031f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010323:	75 07                	jne    c001032c <setActiveTerminal(VgaText*)+0x55>
c0010325:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001032c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010330:	83 c4 08             	add    esp,0x8
c0010333:	5b                   	pop    ebx
c0010334:	e9 05 fd ff ff       	jmp    c001003e <VgaText::load()>

c0010339 <doTerminalCycle()>:
c0010339:	83 ec 18             	sub    esp,0x18
c001033c:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c0010341:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010344:	50                   	push   eax
c0010345:	a3 60 d6 02 c0       	mov    ds:0xc002d660,eax
c001034a:	e8 88 ff ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001034f:	83 c4 1c             	add    esp,0x1c
c0010352:	c3                   	ret    
c0010353:	90                   	nop

c0010354 <VgaText::setCursorX(int)>:
c0010354:	83 ec 10             	sub    esp,0x10
c0010357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001035e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010362:	50                   	push   eax
c0010363:	e8 58 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010368:	83 c4 1c             	add    esp,0x1c
c001036b:	c3                   	ret    

c001036c <VgaText::setCursorY(int)>:
c001036c:	83 ec 10             	sub    esp,0x10
c001036f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010377:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001037a:	50                   	push   eax
c001037b:	e8 40 ff ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010380:	83 c4 1c             	add    esp,0x1c
c0010383:	c3                   	ret    

c0010384 <VgaText::incrementCursor(bool)>:
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	51                   	push   ecx
c0010387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001038b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001038f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010392:	40                   	inc    eax
c0010393:	83 f8 50             	cmp    eax,0x50
c0010396:	74 05                	je     c001039d <VgaText::incrementCursor(bool)+0x19>
c0010398:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001039b:	eb 24                	jmp    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c001039d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103a7:	8d 50 01             	lea    edx,[eax+0x1]
c00103aa:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103ad:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103b0:	75 0f                	jne    c00103c1 <VgaText::incrementCursor(bool)+0x3d>
c00103b2:	83 ec 0c             	sub    esp,0xc
c00103b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103b8:	53                   	push   ebx
c00103b9:	e8 f0 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c00103be:	83 c4 10             	add    esp,0x10
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	84 c0                	test   al,al
c00103c5:	74 0c                	je     c00103d3 <VgaText::incrementCursor(bool)+0x4f>
c00103c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103cb:	5a                   	pop    edx
c00103cc:	5b                   	pop    ebx
c00103cd:	5e                   	pop    esi
c00103ce:	e9 b9 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103d3:	58                   	pop    eax
c00103d4:	5b                   	pop    ebx
c00103d5:	5e                   	pop    esi
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <VgaText::decrementCursor(bool)>:
c00103d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103e3:	85 c0                	test   eax,eax
c00103e5:	74 04                	je     c00103eb <VgaText::decrementCursor(bool)+0x13>
c00103e7:	48                   	dec    eax
c00103e8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103eb:	84 c9                	test   cl,cl
c00103ed:	74 09                	je     c00103f8 <VgaText::decrementCursor(bool)+0x20>
c00103ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f3:	e9 94 fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103fa:	53                   	push   ebx
c00103fb:	83 ec 08             	sub    esp,0x8
c00103fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010402:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010406:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001040a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001040e:	3c 07                	cmp    al,0x7
c0010410:	75 2a                	jne    c001043c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010412:	a1 18 d7 02 c0       	mov    eax,ds:0xc002d718
c0010417:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001041f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010427:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001042f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010433:	83 c4 08             	add    esp,0x8
c0010436:	5b                   	pop    ebx
c0010437:	e9 dc 2e 00 00       	jmp    c0013318 <Buzzer::beep(int, int, bool)>
c001043c:	3c 0d                	cmp    al,0xd
c001043e:	75 09                	jne    c0010449 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010440:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010447:	eb 2c                	jmp    c0010475 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010449:	3c 0a                	cmp    al,0xa
c001044b:	75 31                	jne    c001047e <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001044d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010450:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010457:	8d 50 01             	lea    edx,[eax+0x1]
c001045a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001045d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010460:	75 0f                	jne    c0010471 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010468:	53                   	push   ebx
c0010469:	e8 40 fd ff ff       	call   c00101ae <VgaText::scrollScreen()>
c001046e:	83 c4 10             	add    esp,0x10
c0010471:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010475:	83 c4 08             	add    esp,0x8
c0010478:	5b                   	pop    ebx
c0010479:	e9 0e fc ff ff       	jmp    c001008c <VgaText::updateCursor()>
c001047e:	3c 08                	cmp    al,0x8
c0010480:	75 25                	jne    c00104a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010482:	50                   	push   eax
c0010483:	50                   	push   eax
c0010484:	6a 01                	push   0x1
c0010486:	53                   	push   ebx
c0010487:	e8 4c ff ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c001048c:	5a                   	pop    edx
c001048d:	59                   	pop    ecx
c001048e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010491:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010494:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010497:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001049a:	6a 20                	push   0x20
c001049c:	53                   	push   ebx
c001049d:	e8 b2 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104a2:	83 c4 28             	add    esp,0x28
c00104a5:	5b                   	pop    ebx
c00104a6:	c3                   	ret    
c00104a7:	83 ec 08             	sub    esp,0x8
c00104aa:	0f be c0             	movsx  eax,al
c00104ad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b3:	51                   	push   ecx
c00104b4:	52                   	push   edx
c00104b5:	50                   	push   eax
c00104b6:	53                   	push   ebx
c00104b7:	e8 98 fd ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104bc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104c0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104c8:	83 c4 28             	add    esp,0x28
c00104cb:	5b                   	pop    ebx
c00104cc:	e9 b3 fe ff ff       	jmp    c0010384 <VgaText::incrementCursor(bool)>
c00104d1:	90                   	nop

c00104d2 <VgaText::doUpdate()>:
c00104d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d6:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104d9:	85 c0                	test   eax,eax
c00104db:	74 02                	je     c00104df <VgaText::doUpdate()+0xd>
c00104dd:	ff e0                	jmp    eax
c00104df:	c3                   	ret    

c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104e0:	55                   	push   ebp
c00104e1:	31 ed                	xor    ebp,ebp
c00104e3:	57                   	push   edi
c00104e4:	56                   	push   esi
c00104e5:	53                   	push   ebx
c00104e6:	83 ec 1c             	sub    esp,0x1c
c00104e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104ed:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104f2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104f9:	50                   	push   eax
c00104fa:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ff:	50                   	push   eax
c0010500:	e8 97 fc ff ff       	call   c001019c <VgaText::combineColours(unsigned char, unsigned char)>
c0010505:	59                   	pop    ecx
c0010506:	0f b6 c0             	movzx  eax,al
c0010509:	5e                   	pop    esi
c001050a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001050f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010513:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001051a:	0f b7 f6             	movzx  esi,si
c001051d:	01 f6                	add    esi,esi
c001051f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010522:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010525:	84 c0                	test   al,al
c0010527:	0f 84 fd 00 00 00    	je     c001062a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001052d:	3c 0d                	cmp    al,0xd
c001052f:	75 0c                	jne    c001053d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010531:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010538:	e9 e7 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001053d:	3c 0a                	cmp    al,0xa
c001053f:	75 47                	jne    c0010588 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010541:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010544:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001054b:	8d 48 01             	lea    ecx,[eax+0x1]
c001054e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010551:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010554:	75 0f                	jne    c0010565 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010556:	83 ec 0c             	sub    esp,0xc
c0010559:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001055c:	53                   	push   ebx
c001055d:	e8 4c fc ff ff       	call   c00101ae <VgaText::scrollScreen()>
c0010562:	83 c4 10             	add    esp,0x10
c0010565:	83 ec 0c             	sub    esp,0xc
c0010568:	31 ed                	xor    ebp,ebp
c001056a:	53                   	push   ebx
c001056b:	e8 1c fb ff ff       	call   c001008c <VgaText::updateCursor()>
c0010570:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001057b:	0f b7 f6             	movzx  esi,si
c001057e:	01 f6                	add    esi,esi
c0010580:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010583:	e9 9c 00 00 00       	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010588:	3c 08                	cmp    al,0x8
c001058a:	75 35                	jne    c00105c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001058c:	56                   	push   esi
c001058d:	56                   	push   esi
c001058e:	6a 01                	push   0x1
c0010590:	53                   	push   ebx
c0010591:	e8 42 fe ff ff       	call   c00103d8 <VgaText::decrementCursor(bool)>
c0010596:	58                   	pop    eax
c0010597:	5a                   	pop    edx
c0010598:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001059b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001059e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105a1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105a4:	6a 20                	push   0x20
c00105a6:	53                   	push   ebx
c00105a7:	e8 a8 fc ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ac:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105b1:	83 c4 20             	add    esp,0x20
c00105b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105b7:	0f b7 f6             	movzx  esi,si
c00105ba:	01 f6                	add    esi,esi
c00105bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105bf:	eb 63                	jmp    c0010624 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105c1:	51                   	push   ecx
c00105c2:	51                   	push   ecx
c00105c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105c7:	50                   	push   eax
c00105c8:	e8 75 fc ff ff       	call   c0010242 <VgaText::combineCharAndColour(char, unsigned char)>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	66 89 06             	mov    WORD PTR [esi],ax
c00105d3:	39 1d 64 d6 02 c0    	cmp    DWORD PTR ds:0xc002d664,ebx
c00105d9:	75 21                	jne    c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105db:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105de:	85 c0                	test   eax,eax
c00105e0:	74 1a                	je     c00105fc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105e2:	52                   	push   edx
c00105e3:	52                   	push   edx
c00105e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105f2:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105f5:	51                   	push   ecx
c00105f6:	53                   	push   ebx
c00105f7:	ff d0                	call   eax
c00105f9:	83 c4 20             	add    esp,0x20
c00105fc:	83 c6 02             	add    esi,0x2
c00105ff:	50                   	push   eax
c0010600:	50                   	push   eax
c0010601:	6a 00                	push   0x0
c0010603:	53                   	push   ebx
c0010604:	e8 7b fd ff ff       	call   c0010384 <VgaText::incrementCursor(bool)>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010610:	75 0d                	jne    c001061f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010612:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010617:	0f b7 f6             	movzx  esi,si
c001061a:	01 f6                	add    esi,esi
c001061c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061f:	bd 01 00 00 00       	mov    ebp,0x1
c0010624:	47                   	inc    edi
c0010625:	e9 f8 fe ff ff       	jmp    c0010522 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	53                   	push   ebx
c001062e:	e8 59 fa ff ff       	call   c001008c <VgaText::updateCursor()>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	89 e8                	mov    eax,ebp
c0010638:	84 c0                	test   al,al
c001063a:	74 0c                	je     c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001063c:	83 ec 0c             	sub    esp,0xc
c001063f:	53                   	push   ebx
c0010640:	e8 8d fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010645:	83 c4 10             	add    esp,0x10
c0010648:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001064f:	83 c4 1c             	add    esp,0x1c
c0010652:	5b                   	pop    ebx
c0010653:	5e                   	pop    esi
c0010654:	5f                   	pop    edi
c0010655:	5d                   	pop    ebp
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::clearScreen()>:
c0010658:	57                   	push   edi
c0010659:	56                   	push   esi
c001065a:	31 f6                	xor    esi,esi
c001065c:	53                   	push   ebx
c001065d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010661:	52                   	push   edx
c0010662:	6a 00                	push   0x0
c0010664:	6a 00                	push   0x0
c0010666:	53                   	push   ebx
c0010667:	e8 54 fc ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001066c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010679:	7e 20                	jle    c001069b <VgaText::clearScreen()+0x43>
c001067b:	31 ff                	xor    edi,edi
c001067d:	50                   	push   eax
c001067e:	50                   	push   eax
c001067f:	56                   	push   esi
c0010680:	57                   	push   edi
c0010681:	47                   	inc    edi
c0010682:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010685:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010688:	6a 20                	push   0x20
c001068a:	53                   	push   ebx
c001068b:	e8 c4 fb ff ff       	call   c0010254 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010690:	83 c4 20             	add    esp,0x20
c0010693:	83 ff 50             	cmp    edi,0x50
c0010696:	75 e5                	jne    c001067d <VgaText::clearScreen()+0x25>
c0010698:	46                   	inc    esi
c0010699:	eb db                	jmp    c0010676 <VgaText::clearScreen()+0x1e>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	53                   	push   ebx
c001069f:	e8 2e fe ff ff       	call   c00104d2 <VgaText::doUpdate()>
c00106a4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	5b                   	pop    ebx
c00106af:	5e                   	pop    esi
c00106b0:	5f                   	pop    edi
c00106b1:	c3                   	ret    

c00106b2 <VgaText::putchar(char)>:
c00106b2:	56                   	push   esi
c00106b3:	53                   	push   ebx
c00106b4:	83 ec 14             	sub    esp,0x14
c00106b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106bf:	3c 5b                	cmp    al,0x5b
c00106c1:	75 18                	jne    c00106db <VgaText::putchar(char)+0x29>
c00106c3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106c7:	74 1f                	je     c00106e8 <VgaText::putchar(char)+0x36>
c00106c9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106cf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106d6:	e9 bd 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106db:	3c 1b                	cmp    al,0x1b
c00106dd:	75 09                	jne    c00106e8 <VgaText::putchar(char)+0x36>
c00106df:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106e3:	e9 b0 00 00 00       	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c00106e8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106eb:	84 c9                	test   cl,cl
c00106ed:	0f 84 92 00 00 00    	je     c0010785 <VgaText::putchar(char)+0xd3>
c00106f3:	8d 50 c0             	lea    edx,[eax-0x40]
c00106f6:	80 fa 3e             	cmp    dl,0x3e
c00106f9:	77 76                	ja     c0010771 <VgaText::putchar(char)+0xbf>
c00106fb:	3c 6d                	cmp    al,0x6d
c00106fd:	75 47                	jne    c0010746 <VgaText::putchar(char)+0x94>
c00106ff:	31 f6                	xor    esi,esi
c0010701:	31 d2                	xor    edx,edx
c0010703:	31 c0                	xor    eax,eax
c0010705:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010708:	7e 2d                	jle    c0010737 <VgaText::putchar(char)+0x85>
c001070a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001070f:	80 fa 3b             	cmp    dl,0x3b
c0010712:	75 17                	jne    c001072b <VgaText::putchar(char)+0x79>
c0010714:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010718:	50                   	push   eax
c0010719:	53                   	push   ebx
c001071a:	e8 83 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c001071f:	59                   	pop    ecx
c0010720:	31 d2                	xor    edx,edx
c0010722:	58                   	pop    eax
c0010723:	31 c0                	xor    eax,eax
c0010725:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010729:	eb 09                	jmp    c0010734 <VgaText::putchar(char)+0x82>
c001072b:	6b c0 0a             	imul   eax,eax,0xa
c001072e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010732:	88 ca                	mov    dl,cl
c0010734:	46                   	inc    esi
c0010735:	eb ce                	jmp    c0010705 <VgaText::putchar(char)+0x53>
c0010737:	84 d2                	test   dl,dl
c0010739:	74 2e                	je     c0010769 <VgaText::putchar(char)+0xb7>
c001073b:	50                   	push   eax
c001073c:	53                   	push   ebx
c001073d:	e8 60 f9 ff ff       	call   c00100a2 <VgaText::doANSI_SGR(int)>
c0010742:	58                   	pop    eax
c0010743:	5a                   	pop    edx
c0010744:	eb 23                	jmp    c0010769 <VgaText::putchar(char)+0xb7>
c0010746:	3c 4a                	cmp    al,0x4a
c0010748:	75 1f                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c001074a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001074e:	75 19                	jne    c0010769 <VgaText::putchar(char)+0xb7>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	53                   	push   ebx
c0010754:	e8 ff fe ff ff       	call   c0010658 <VgaText::clearScreen()>
c0010759:	83 c4 0c             	add    esp,0xc
c001075c:	6a 00                	push   0x0
c001075e:	6a 00                	push   0x0
c0010760:	53                   	push   ebx
c0010761:	e8 5a fb ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001076f:	eb 27                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010771:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010774:	83 fa 0e             	cmp    edx,0xe
c0010777:	7f 1f                	jg     c0010798 <VgaText::putchar(char)+0xe6>
c0010779:	8d 4a 01             	lea    ecx,[edx+0x1]
c001077c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001077f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010783:	eb 13                	jmp    c0010798 <VgaText::putchar(char)+0xe6>
c0010785:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010788:	0f be c0             	movsx  eax,al
c001078b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001078e:	50                   	push   eax
c001078f:	53                   	push   ebx
c0010790:	e8 65 fc ff ff       	call   c00103fa <VgaText::putchar(char, VgaColour, VgaColour)>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	83 c4 14             	add    esp,0x14
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	c3                   	ret    

c001079e <VgaText::putx(unsigned int)>:
c001079e:	57                   	push   edi
c001079f:	b9 11 00 00 00       	mov    ecx,0x11
c00107a4:	56                   	push   esi
c00107a5:	be de 9e 02 c0       	mov    esi,0xc0029ede
c00107aa:	53                   	push   ebx
c00107ab:	83 ec 20             	sub    esp,0x20
c00107ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b6:	fc                   	cld    
c00107b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b9:	be 08 00 00 00       	mov    esi,0x8
c00107be:	50                   	push   eax
c00107bf:	50                   	push   eax
c00107c0:	89 d8                	mov    eax,ebx
c00107c2:	c1 e3 04             	shl    ebx,0x4
c00107c5:	c1 e8 1c             	shr    eax,0x1c
c00107c8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107cd:	50                   	push   eax
c00107ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107d2:	e8 db fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00107d7:	83 c4 10             	add    esp,0x10
c00107da:	4e                   	dec    esi
c00107db:	75 e1                	jne    c00107be <VgaText::putx(unsigned int)+0x20>
c00107dd:	83 c4 20             	add    esp,0x20
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	5f                   	pop    edi
c00107e3:	c3                   	ret    

c00107e4 <VgaText::puts(char const*)>:
c00107e4:	53                   	push   ebx
c00107e5:	83 ec 08             	sub    esp,0x8
c00107e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107ef:	84 c0                	test   al,al
c00107f1:	74 12                	je     c0010805 <VgaText::puts(char const*)+0x21>
c00107f3:	43                   	inc    ebx
c00107f4:	51                   	push   ecx
c00107f5:	51                   	push   ecx
c00107f6:	50                   	push   eax
c00107f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fb:	e8 b2 fe ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	eb e7                	jmp    c00107ec <VgaText::puts(char const*)+0x8>
c0010805:	83 c4 08             	add    esp,0x8
c0010808:	5b                   	pop    ebx
c0010809:	c3                   	ret    

c001080a <VgaText::VgaText(char const*)>:
c001080a:	57                   	push   edi
c001080b:	56                   	push   esi
c001080c:	53                   	push   ebx
c001080d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010811:	83 ec 08             	sub    esp,0x8
c0010814:	6a 00                	push   0x0
c0010816:	50                   	push   eax
c0010817:	e8 42 05 00 00       	call   c0010d5e <UnixFile::UnixFile(int)>
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	ba 44 9f 02 c0       	mov    edx,0xc0029f44
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	89 10                	mov    DWORD PTR [eax],edx
c001082a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010839:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010844:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001085b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010875:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	8d 50 60             	lea    edx,[eax+0x60]
c0010883:	bb 40 d6 02 c0       	mov    ebx,0xc002d640
c0010888:	b8 08 00 00 00       	mov    eax,0x8
c001088d:	fc                   	cld    
c001088e:	89 d7                	mov    edi,edx
c0010890:	89 de                	mov    esi,ebx
c0010892:	89 c1                	mov    ecx,eax
c0010894:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089a:	05 82 00 00 00       	add    eax,0x82
c001089f:	83 ec 08             	sub    esp,0x8
c00108a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a6:	50                   	push   eax
c00108a7:	e8 60 ff fe ff       	call   c000080c <strcpy>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b3:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	6a 01                	push   0x1
c00108bf:	e8 dd 08 00 00       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00108c4:	83 c4 10             	add    esp,0x10
c00108c7:	89 c2                	mov    edx,eax
c00108c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108d0:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108dd:	89 c6                	mov    esi,eax
c00108df:	e8 5c f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c00108e4:	6a 05                	push   0x5
c00108e6:	56                   	push   esi
c00108e7:	50                   	push   eax
c00108e8:	53                   	push   ebx
c00108e9:	e8 70 10 00 00       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108f8:	83 ec 04             	sub    esp,0x4
c00108fb:	68 00 0f 00 00       	push   0xf00
c0010900:	6a 00                	push   0x0
c0010902:	50                   	push   eax
c0010903:	e8 48 fe fe ff       	call   c0000750 <memset>
c0010908:	83 c4 10             	add    esp,0x10
c001090b:	83 ec 04             	sub    esp,0x4
c001090e:	6a 00                	push   0x0
c0010910:	6a 07                	push   0x7
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	e8 1b f8 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	83 ec 04             	sub    esp,0x4
c0010921:	6a 00                	push   0x0
c0010923:	6a 00                	push   0x0
c0010925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010929:	e8 92 f9 ff ff       	call   c00102c0 <VgaText::setCursor(int, int)>
c001092e:	83 c4 10             	add    esp,0x10
c0010931:	83 ec 0c             	sub    esp,0xc
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	e8 1b fd ff ff       	call   c0010658 <VgaText::clearScreen()>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	05 02 01 00 00       	add    eax,0x102
c0010951:	83 ec 04             	sub    esp,0x4
c0010954:	68 96 00 00 00       	push   0x96
c0010959:	6a 00                	push   0x0
c001095b:	50                   	push   eax
c001095c:	e8 ef fd fe ff       	call   c0000750 <memset>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	05 98 01 00 00       	add    eax,0x198
c001096d:	83 ec 04             	sub    esp,0x4
c0010970:	68 2c 01 00 00       	push   0x12c
c0010975:	6a 00                	push   0x0
c0010977:	50                   	push   eax
c0010978:	e8 d3 fd fe ff       	call   c0000750 <memset>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	90                   	nop
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	5f                   	pop    edi
c0010984:	c3                   	ret    
c0010985:	90                   	nop

c0010986 <VgaText::receiveKey(unsigned char)>:
c0010986:	55                   	push   ebp
c0010987:	57                   	push   edi
c0010988:	56                   	push   esi
c0010989:	53                   	push   ebx
c001098a:	83 ec 1c             	sub    esp,0x1c
c001098d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010991:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010995:	84 db                	test   bl,bl
c0010997:	0f 84 c9 00 00 00    	je     c0010a66 <VgaText::receiveKey(unsigned char)+0xe0>
c001099d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109a3:	80 fb 08             	cmp    bl,0x8
c00109a6:	75 2c                	jne    c00109d4 <VgaText::receiveKey(unsigned char)+0x4e>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	57                   	push   edi
c00109ac:	e8 bb fd fe ff       	call   c000076c <strlen>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	85 c0                	test   eax,eax
c00109b6:	74 41                	je     c00109f9 <VgaText::receiveKey(unsigned char)+0x73>
c00109b8:	50                   	push   eax
c00109b9:	50                   	push   eax
c00109ba:	6a 08                	push   0x8
c00109bc:	56                   	push   esi
c00109bd:	e8 f0 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c5:	e8 a2 fd fe ff       	call   c000076c <strlen>
c00109ca:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109d2:	eb 22                	jmp    c00109f6 <VgaText::receiveKey(unsigned char)+0x70>
c00109d4:	0f be c3             	movsx  eax,bl
c00109d7:	52                   	push   edx
c00109d8:	52                   	push   edx
c00109d9:	50                   	push   eax
c00109da:	56                   	push   esi
c00109db:	e8 d2 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c00109e0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109e9:	59                   	pop    ecx
c00109ea:	5d                   	pop    ebp
c00109eb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109ef:	50                   	push   eax
c00109f0:	57                   	push   edi
c00109f1:	e8 56 ff fe ff       	call   c000094c <strcat>
c00109f6:	83 c4 10             	add    esp,0x10
c00109f9:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a00:	75 05                	jne    c0010a07 <VgaText::receiveKey(unsigned char)+0x81>
c0010a02:	80 fb 0a             	cmp    bl,0xa
c0010a05:	75 53                	jne    c0010a5a <VgaText::receiveKey(unsigned char)+0xd4>
c0010a07:	83 ec 0c             	sub    esp,0xc
c0010a0a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a10:	53                   	push   ebx
c0010a11:	e8 56 fd fe ff       	call   c000076c <strlen>
c0010a16:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a19:	89 c5                	mov    ebp,eax
c0010a1b:	e8 4c fd fe ff       	call   c000076c <strlen>
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a27:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a2c:	76 10                	jbe    c0010a3e <VgaText::receiveKey(unsigned char)+0xb8>
c0010a2e:	83 ec 0c             	sub    esp,0xc
c0010a31:	68 ef 9e 02 c0       	push   0xc0029eef
c0010a36:	e8 30 92 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	50                   	push   eax
c0010a3f:	50                   	push   eax
c0010a40:	57                   	push   edi
c0010a41:	53                   	push   ebx
c0010a42:	e8 05 ff fe ff       	call   c000094c <strcat>
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	68 96 00 00 00       	push   0x96
c0010a4f:	6a 00                	push   0x0
c0010a51:	57                   	push   edi
c0010a52:	e8 f9 fc fe ff       	call   c0000750 <memset>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	83 ec 0c             	sub    esp,0xc
c0010a5d:	56                   	push   esi
c0010a5e:	e8 6f fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	83 c4 1c             	add    esp,0x1c
c0010a69:	5b                   	pop    ebx
c0010a6a:	5e                   	pop    esi
c0010a6b:	5f                   	pop    edi
c0010a6c:	5d                   	pop    ebp
c0010a6d:	c3                   	ret    

c0010a6e <VgaText::write(unsigned long long, void*, int*)>:
c0010a6e:	55                   	push   ebp
c0010a6f:	57                   	push   edi
c0010a70:	56                   	push   esi
c0010a71:	53                   	push   ebx
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a79:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a7d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a81:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a88:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a8b:	39 eb                	cmp    ebx,ebp
c0010a8d:	74 13                	je     c0010aa2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a8f:	43                   	inc    ebx
c0010a90:	50                   	push   eax
c0010a91:	50                   	push   eax
c0010a92:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a96:	50                   	push   eax
c0010a97:	56                   	push   esi
c0010a98:	e8 15 fc ff ff       	call   c00106b2 <VgaText::putchar(char)>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	eb e9                	jmp    c0010a8b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010aa2:	83 ec 0c             	sub    esp,0xc
c0010aa5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010aac:	56                   	push   esi
c0010aad:	e8 20 fa ff ff       	call   c00104d2 <VgaText::doUpdate()>
c0010ab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ab6:	89 38                	mov    DWORD PTR [eax],edi
c0010ab8:	83 c4 1c             	add    esp,0x1c
c0010abb:	31 c0                	xor    eax,eax
c0010abd:	5b                   	pop    ebx
c0010abe:	5e                   	pop    esi
c0010abf:	5f                   	pop    edi
c0010ac0:	5d                   	pop    ebp
c0010ac1:	c3                   	ret    

c0010ac2 <newTerminal(char*)>:
c0010ac2:	83 ec 28             	sub    esp,0x28
c0010ac5:	68 c4 02 00 00       	push   0x2c4
c0010aca:	e8 cd ea ff ff       	call   c000f59c <malloc>
c0010acf:	5a                   	pop    edx
c0010ad0:	59                   	pop    ecx
c0010ad1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ad5:	50                   	push   eax
c0010ad6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ada:	e8 2b fd ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c0010adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ae3:	83 c4 2c             	add    esp,0x2c
c0010ae6:	c3                   	ret    
c0010ae7:	90                   	nop

c0010ae8 <TSS::TSS()>:
c0010ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010af3:	90                   	nop
c0010af4:	c3                   	ret    
c0010af5:	90                   	nop

c0010af6 <TSS::setESP(unsigned long)>:
c0010af6:	55                   	push   ebp
c0010af7:	89 e5                	mov    ebp,esp
c0010af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b05:	90                   	nop
c0010b06:	5d                   	pop    ebp
c0010b07:	c3                   	ret    

c0010b08 <TSS::flush()>:
c0010b08:	55                   	push   ebp
c0010b09:	89 e5                	mov    ebp,esp
c0010b0b:	83 ec 10             	sub    esp,0x10
c0010b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b13:	83 c8 03             	or     eax,0x3
c0010b16:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b1a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b1e:	66 89 d0             	mov    ax,dx
c0010b21:	0f 00 d8             	ltr    ax
c0010b24:	90                   	nop
c0010b25:	c9                   	leave  
c0010b26:	c3                   	ret    
c0010b27:	90                   	nop

c0010b28 <TSS::setup(unsigned long, unsigned long)>:
c0010b28:	55                   	push   ebp
c0010b29:	89 e5                	mov    ebp,esp
c0010b2b:	83 ec 18             	sub    esp,0x18
c0010b2e:	83 ec 0c             	sub    esp,0xc
c0010b31:	6a 68                	push   0x68
c0010b33:	e8 64 ea ff ff       	call   c000f59c <malloc>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	89 c2                	mov    edx,eax
c0010b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b49:	83 ec 04             	sub    esp,0x4
c0010b4c:	6a 68                	push   0x68
c0010b4e:	6a 00                	push   0x0
c0010b50:	50                   	push   eax
c0010b51:	e8 fa fb fe ff       	call   c0000750 <memset>
c0010b56:	83 c4 10             	add    esp,0x10
c0010b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b83:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bda:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf0:	0f 20 da             	mov    edx,cr3
c0010bf3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010bf6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010bf9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c02:	83 ec 08             	sub    esp,0x8
c0010c05:	50                   	push   eax
c0010c06:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c09:	50                   	push   eax
c0010c0a:	e8 83 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c0f:	83 c4 10             	add    esp,0x10
c0010c12:	83 ec 08             	sub    esp,0x8
c0010c15:	6a 68                	push   0x68
c0010c17:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c1a:	50                   	push   eax
c0010c1b:	e8 8e e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c27:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c2a:	83 e0 0f             	and    eax,0xf
c0010c2d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c33:	83 c8 40             	or     eax,0x40
c0010c36:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c39:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0010c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c44:	05 78 01 00 00       	add    eax,0x178
c0010c49:	83 ec 04             	sub    esp,0x4
c0010c4c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c4f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c52:	50                   	push   eax
c0010c53:	e8 8a e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	89 c2                	mov    edx,eax
c0010c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c60:	89 10                	mov    DWORD PTR [eax],edx
c0010c62:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0010c67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c6d:	05 78 01 00 00       	add    eax,0x178
c0010c72:	83 ec 0c             	sub    esp,0xc
c0010c75:	50                   	push   eax
c0010c76:	e8 91 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c83:	c9                   	leave  
c0010c84:	c3                   	ret    
c0010c85:	90                   	nop

c0010c86 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c91:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c96:	75 08                	jne    c0010ca0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010c98:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010c9e:	eb 38                	jmp    c0010cd8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ca0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ca5:	75 17                	jne    c0010cbe <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010caf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cb5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cbb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cbe:	89 c1                	mov    ecx,eax
c0010cc0:	83 e1 fd             	and    ecx,0xfffffffd
c0010cc3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cc9:	74 cd                	je     c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ccb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cd0:	83 e0 ef             	and    eax,0xffffffef
c0010cd3:	83 f8 08             	cmp    eax,0x8
c0010cd6:	76 c0                	jbe    c0010c98 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd8:	31 c0                	xor    eax,eax
c0010cda:	c3                   	ret    
c0010cdb:	90                   	nop

c0010cdc <ReservedFilename::isAtty()>:
c0010cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ce3:	31 c0                	xor    eax,eax
c0010ce5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ceb:	74 09                	je     c0010cf6 <ReservedFilename::isAtty()+0x1a>
c0010ced:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cf3:	0f 94 c0             	sete   al
c0010cf6:	c3                   	ret    
c0010cf7:	90                   	nop

c0010cf8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d07:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d0c:	75 08                	jne    c0010d16 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d0e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d14:	eb 3d                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d1b:	75 17                	jne    c0010d34 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d31:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d34:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d39:	75 04                	jne    c0010d3f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d3b:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d3d:	eb 14                	jmp    c0010d53 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d44:	74 c8                	je     c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d46:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4b:	83 e0 ef             	and    eax,0xffffffef
c0010d4e:	83 f8 08             	cmp    eax,0x8
c0010d51:	76 bb                	jbe    c0010d0e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d53:	31 c0                	xor    eax,eax
c0010d55:	c3                   	ret    

c0010d56 <UnixFile::getFileDescriptor()>:
c0010d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d5d:	c3                   	ret    

c0010d5e <UnixFile::UnixFile(int)>:
c0010d5e:	53                   	push   ebx
c0010d5f:	83 ec 28             	sub    esp,0x28
c0010d62:	ba 0c a0 02 c0       	mov    edx,0xc002a00c
c0010d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d75:	0f 8f 8c 01 00 00    	jg     c0010f07 <UnixFile::UnixFile(int)+0x1a9>
c0010d7b:	a1 40 c5 02 c0       	mov    eax,ds:0xc002c540
c0010d80:	8d 50 01             	lea    edx,[eax+0x1]
c0010d83:	89 15 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,edx
c0010d89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d90:	83 ec 08             	sub    esp,0x8
c0010d93:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d97:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010d9c:	e8 15 75 01 00       	call   c00282b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010da1:	83 c4 10             	add    esp,0x10
c0010da4:	a0 f4 d6 02 c0       	mov    al,ds:0xc002d6f4
c0010da9:	83 f0 01             	xor    eax,0x1
c0010dac:	84 c0                	test   al,al
c0010dae:	0f 84 54 01 00 00    	je     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010db4:	c6 05 f4 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6f4,0x1
c0010dbb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dc3:	83 ec 0c             	sub    esp,0xc
c0010dc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dca:	e8 cd e7 ff ff       	call   c000f59c <malloc>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	89 c3                	mov    ebx,eax
c0010dd4:	83 ec 08             	sub    esp,0x8
c0010dd7:	68 03 ff ff 0f       	push   0xfffff03
c0010ddc:	53                   	push   ebx
c0010ddd:	e8 2c 01 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010de2:	83 c4 10             	add    esp,0x10
c0010de5:	89 1d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,ebx
c0010deb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010df3:	83 ec 0c             	sub    esp,0xc
c0010df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfa:	e8 9d e7 ff ff       	call   c000f59c <malloc>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	89 c3                	mov    ebx,eax
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	68 01 ff ff 0f       	push   0xfffff01
c0010e0c:	53                   	push   ebx
c0010e0d:	e8 fc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	89 1d f0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f0,ebx
c0010e1b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e23:	83 ec 0c             	sub    esp,0xc
c0010e26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e2a:	e8 6d e7 ff ff       	call   c000f59c <malloc>
c0010e2f:	83 c4 10             	add    esp,0x10
c0010e32:	89 c3                	mov    ebx,eax
c0010e34:	83 ec 08             	sub    esp,0x8
c0010e37:	68 00 ff ff 0f       	push   0xfffff00
c0010e3c:	53                   	push   ebx
c0010e3d:	e8 cc 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e42:	83 c4 10             	add    esp,0x10
c0010e45:	89 1d e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,ebx
c0010e4b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e53:	83 ec 0c             	sub    esp,0xc
c0010e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e5a:	e8 3d e7 ff ff       	call   c000f59c <malloc>
c0010e5f:	83 c4 10             	add    esp,0x10
c0010e62:	89 c3                	mov    ebx,eax
c0010e64:	83 ec 08             	sub    esp,0x8
c0010e67:	68 02 ff ff 0f       	push   0xfffff02
c0010e6c:	53                   	push   ebx
c0010e6d:	e8 9c 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	89 1d e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,ebx
c0010e7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e83:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e88:	7f 7e                	jg     c0010f08 <UnixFile::UnixFile(int)+0x1aa>
c0010e8a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e92:	83 ec 0c             	sub    esp,0xc
c0010e95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e99:	e8 fe e6 ff ff       	call   c000f59c <malloc>
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	89 c3                	mov    ebx,eax
c0010ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea7:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010eac:	83 ec 08             	sub    esp,0x8
c0010eaf:	50                   	push   eax
c0010eb0:	53                   	push   ebx
c0010eb1:	e8 58 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ebd:	89 1c 85 c0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2940],ebx
c0010ec4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ecc:	83 ec 0c             	sub    esp,0xc
c0010ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ed3:	e8 c4 e6 ff ff       	call   c000f59c <malloc>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	89 c3                	mov    ebx,eax
c0010edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee1:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	50                   	push   eax
c0010eea:	53                   	push   ebx
c0010eeb:	e8 1e 00 00 00       	call   c0010f0e <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef7:	89 1c 85 80 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2980],ebx
c0010efe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f02:	e9 7c ff ff ff       	jmp    c0010e83 <UnixFile::UnixFile(int)+0x125>
c0010f07:	90                   	nop
c0010f08:	83 c4 28             	add    esp,0x28
c0010f0b:	5b                   	pop    ebx
c0010f0c:	c3                   	ret    
c0010f0d:	90                   	nop

c0010f0e <ReservedFilename::ReservedFilename(int)>:
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f15:	83 ec 08             	sub    esp,0x8
c0010f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1c:	50                   	push   eax
c0010f1d:	e8 3c fe ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c0010f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2e:	89 10                	mov    DWORD PTR [eax],edx
c0010f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f3b:	90                   	nop
c0010f3c:	83 c4 0c             	add    esp,0xc
c0010f3f:	c3                   	ret    

c0010f40 <UnixFile::~UnixFile()>:
c0010f40:	83 ec 1c             	sub    esp,0x1c
c0010f43:	ba 0c a0 02 c0       	mov    edx,0xc002a00c
c0010f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4c:	89 10                	mov    DWORD PTR [eax],edx
c0010f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f5a:	7f 73                	jg     c0010fcf <UnixFile::~UnixFile()+0x8f>
c0010f5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f6c:	e8 19 74 01 00       	call   c002838a <LinkedList<UnixFile>::getFirstElement()>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f78:	83 ec 0c             	sub    esp,0xc
c0010f7b:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f80:	e8 0d 74 01 00       	call   c0028392 <LinkedList<UnixFile>::removeFirst()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f90:	74 40                	je     c0010fd2 <UnixFile::~UnixFile()+0x92>
c0010f92:	83 ec 08             	sub    esp,0x8
c0010f95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f99:	68 f8 d6 02 c0       	push   0xc002d6f8
c0010f9e:	e8 13 73 01 00       	call   c00282b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010faa:	8d 50 01             	lea    edx,[eax+0x1]
c0010fad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fb1:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fb6:	0f 94 c0             	sete   al
c0010fb9:	84 c0                	test   al,al
c0010fbb:	74 a7                	je     c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fbd:	83 ec 0c             	sub    esp,0xc
c0010fc0:	68 e4 9f 02 c0       	push   0xc0029fe4
c0010fc5:	e8 a1 8c 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	eb 95                	jmp    c0010f64 <UnixFile::~UnixFile()+0x24>
c0010fcf:	90                   	nop
c0010fd0:	eb 01                	jmp    c0010fd3 <UnixFile::~UnixFile()+0x93>
c0010fd2:	90                   	nop
c0010fd3:	90                   	nop
c0010fd4:	83 c4 1c             	add    esp,0x1c
c0010fd7:	c3                   	ret    

c0010fd8 <UnixFile::~UnixFile()>:
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	83 ec 0c             	sub    esp,0xc
c0010fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fe2:	e8 59 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	83 ec 08             	sub    esp,0x8
c0010fed:	6a 0c                	push   0xc
c0010fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff3:	e8 3b 14 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	83 c4 0c             	add    esp,0xc
c0010ffe:	c3                   	ret    
c0010fff:	90                   	nop

c0011000 <ReservedFilename::~ReservedFilename()>:
c0011000:	83 ec 0c             	sub    esp,0xc
c0011003:	ba 28 a0 02 c0       	mov    edx,0xc002a028
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	50                   	push   eax
c0011016:	e8 25 ff ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c001101b:	83 c4 10             	add    esp,0x10
c001101e:	90                   	nop
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::~ReservedFilename()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	83 ec 0c             	sub    esp,0xc
c001102a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102e:	e8 cd ff ff ff       	call   c0011000 <ReservedFilename::~ReservedFilename()>
c0011033:	83 c4 10             	add    esp,0x10
c0011036:	83 ec 08             	sub    esp,0x8
c0011039:	6a 0c                	push   0xc
c001103b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103f:	e8 ef 13 00 00       	call   c0012433 <operator delete(void*, unsigned long)>
c0011044:	83 c4 10             	add    esp,0x10
c0011047:	83 c4 0c             	add    esp,0xc
c001104a:	c3                   	ret    

c001104b <getFromFileDescriptor(int)>:
c001104b:	53                   	push   ebx
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011053:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011059:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001105f:	7f 2c                	jg     c001108d <getFromFileDescriptor(int)+0x42>
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011069:	e8 1c 73 01 00       	call   c002838a <LinkedList<UnixFile>::getFirstElement()>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	85 c0                	test   eax,eax
c0011073:	75 04                	jne    c0011079 <getFromFileDescriptor(int)+0x2e>
c0011075:	31 c0                	xor    eax,eax
c0011077:	eb 6e                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c0011079:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001107c:	74 69                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001107e:	52                   	push   edx
c001107f:	52                   	push   edx
c0011080:	50                   	push   eax
c0011081:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011086:	e8 a9 73 01 00       	call   c0028434 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001108b:	eb e1                	jmp    c001106e <getFromFileDescriptor(int)+0x23>
c001108d:	a1 ec d6 02 c0       	mov    eax,ds:0xc002d6ec
c0011092:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011098:	74 4d                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c001109a:	a1 f0 d6 02 c0       	mov    eax,ds:0xc002d6f0
c001109f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110a5:	74 40                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110a7:	a1 e8 d6 02 c0       	mov    eax,ds:0xc002d6e8
c00110ac:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110b2:	74 33                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110b4:	a1 e4 d6 02 c0       	mov    eax,ds:0xc002d6e4
c00110b9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110bf:	74 26                	je     c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110c1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110c7:	83 f8 08             	cmp    eax,0x8
c00110ca:	77 09                	ja     c00110d5 <getFromFileDescriptor(int)+0x8a>
c00110cc:	8b 04 85 c0 d6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2940]
c00110d3:	eb 12                	jmp    c00110e7 <getFromFileDescriptor(int)+0x9c>
c00110d5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110db:	83 fb 08             	cmp    ebx,0x8
c00110de:	77 95                	ja     c0011075 <getFromFileDescriptor(int)+0x2a>
c00110e0:	8b 04 9d 80 d6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2980]
c00110e7:	83 c4 08             	add    esp,0x8
c00110ea:	5b                   	pop    ebx
c00110eb:	c3                   	ret    

c00110ec <__static_initialization_and_destruction_0(int, int)>:
c00110ec:	83 ec 0c             	sub    esp,0xc
c00110ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110f4:	75 34                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110f6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00110fe:	75 2a                	jne    c001112a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	68 f8 d6 02 c0       	push   0xc002d6f8
c0011108:	e8 67 71 01 00       	call   c0028274 <LinkedList<UnixFile>::LinkedList()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	83 ec 04             	sub    esp,0x4
c0011113:	68 70 c3 02 c0       	push   0xc002c370
c0011118:	68 f8 d6 02 c0       	push   0xc002d6f8
c001111d:	68 72 82 02 c0       	push   0xc0028272
c0011122:	e8 86 12 00 00       	call   c00123ad <__cxa_atexit>
c0011127:	83 c4 10             	add    esp,0x10
c001112a:	90                   	nop
c001112b:	83 c4 0c             	add    esp,0xc
c001112e:	c3                   	ret    

c001112f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	83 ec 08             	sub    esp,0x8
c0011135:	68 ff ff 00 00       	push   0xffff
c001113a:	6a 01                	push   0x1
c001113c:	e8 ab ff ff ff       	call   c00110ec <__static_initialization_and_destruction_0(int, int)>
c0011141:	83 c4 10             	add    esp,0x10
c0011144:	83 c4 0c             	add    esp,0xc
c0011147:	c3                   	ret    

c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011148:	53                   	push   ebx
c0011149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001114d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011151:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011157:	89 c8                	mov    eax,ecx
c0011159:	d1 e8                	shr    eax,1
c001115b:	03 05 48 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c548
c0011161:	83 e1 01             	and    ecx,0x1
c0011164:	8a 10                	mov    dl,BYTE PTR [eax]
c0011166:	75 09                	jne    c0011171 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011168:	83 e2 f0             	and    edx,0xfffffff0
c001116b:	09 da                	or     edx,ebx
c001116d:	88 10                	mov    BYTE PTR [eax],dl
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    
c0011171:	c1 e3 04             	shl    ebx,0x4
c0011174:	83 e2 0f             	and    edx,0xf
c0011177:	09 da                	or     edx,ebx
c0011179:	88 10                	mov    BYTE PTR [eax],dl
c001117b:	5b                   	pop    ebx
c001117c:	c3                   	ret    

c001117d <Virt::getPageState(unsigned long)>:
c001117d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011181:	8b 0d 48 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c548
c0011187:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001118d:	89 d0                	mov    eax,edx
c001118f:	d1 e8                	shr    eax,1
c0011191:	83 e2 01             	and    edx,0x1
c0011194:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011197:	75 04                	jne    c001119d <Virt::getPageState(unsigned long)+0x20>
c0011199:	83 e0 0f             	and    eax,0xf
c001119c:	c3                   	ret    
c001119d:	c0 e8 04             	shr    al,0x4
c00111a0:	c3                   	ret    

c00111a1 <Virt::allocateKernelVirtualPages(int)>:
c00111a1:	55                   	push   ebp
c00111a2:	31 ed                	xor    ebp,ebp
c00111a4:	57                   	push   edi
c00111a5:	56                   	push   esi
c00111a6:	53                   	push   ebx
c00111a7:	31 db                	xor    ebx,ebx
c00111a9:	83 ec 1c             	sub    esp,0x1c
c00111ac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b0:	8b 3d 44 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c544
c00111b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111bb:	57                   	push   edi
c00111bc:	e8 bc ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111c1:	5a                   	pop    edx
c00111c2:	84 c0                	test   al,al
c00111c4:	75 3a                	jne    c0011200 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111c6:	85 db                	test   ebx,ebx
c00111c8:	75 02                	jne    c00111cc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ca:	89 fd                	mov    ebp,edi
c00111cc:	43                   	inc    ebx
c00111cd:	39 f3                	cmp    ebx,esi
c00111cf:	74 5a                	je     c001122b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111d1:	47                   	inc    edi
c00111d2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111d8:	76 31                	jbe    c001120b <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111da:	c7 05 44 c5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c544,0xc8000
c00111e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111e9:	75 28                	jne    c0011213 <Virt::allocateKernelVirtualPages(int)+0x72>
c00111eb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111f0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111f5:	57                   	push   edi
c00111f6:	e8 82 ff ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c00111fb:	5a                   	pop    edx
c00111fc:	84 c0                	test   al,al
c00111fe:	74 c6                	je     c00111c6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011200:	31 db                	xor    ebx,ebx
c0011202:	47                   	inc    edi
c0011203:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011209:	77 cf                	ja     c00111da <Virt::allocateKernelVirtualPages(int)+0x39>
c001120b:	89 3d 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,edi
c0011211:	eb a8                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	68 3c a0 02 c0       	push   0xc002a03c
c001121b:	e8 4b 8a 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0011220:	8b 3d 44 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c544
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	eb 90                	jmp    c00111bb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001122b:	89 2d 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,ebp
c0011231:	4b                   	dec    ebx
c0011232:	74 5f                	je     c0011293 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011234:	85 f6                	test   esi,esi
c0011236:	74 3d                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011238:	89 e8                	mov    eax,ebp
c001123a:	31 db                	xor    ebx,ebx
c001123c:	8d 7e ff             	lea    edi,[esi-0x1]
c001123f:	eb 14                	jmp    c0011255 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011241:	6a 01                	push   0x1
c0011243:	43                   	inc    ebx
c0011244:	50                   	push   eax
c0011245:	e8 fe fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001124a:	58                   	pop    eax
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	5a                   	pop    edx
c001124e:	74 25                	je     c0011275 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011250:	a1 44 c5 02 c0       	mov    eax,ds:0xc002c544
c0011255:	8d 50 01             	lea    edx,[eax+0x1]
c0011258:	85 db                	test   ebx,ebx
c001125a:	89 15 44 c5 02 c0    	mov    DWORD PTR ds:0xc002c544,edx
c0011260:	74 20                	je     c0011282 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011262:	39 df                	cmp    edi,ebx
c0011264:	75 db                	jne    c0011241 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011266:	6a 03                	push   0x3
c0011268:	43                   	inc    ebx
c0011269:	50                   	push   eax
c001126a:	e8 d9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126f:	59                   	pop    ecx
c0011270:	39 f3                	cmp    ebx,esi
c0011272:	58                   	pop    eax
c0011273:	75 db                	jne    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011275:	83 c4 1c             	add    esp,0x1c
c0011278:	89 e8                	mov    eax,ebp
c001127a:	5b                   	pop    ebx
c001127b:	c1 e0 0c             	shl    eax,0xc
c001127e:	5e                   	pop    esi
c001127f:	5f                   	pop    edi
c0011280:	5d                   	pop    ebp
c0011281:	c3                   	ret    
c0011282:	6a 02                	push   0x2
c0011284:	bb 01 00 00 00       	mov    ebx,0x1
c0011289:	50                   	push   eax
c001128a:	e8 b9 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001128f:	58                   	pop    eax
c0011290:	5a                   	pop    edx
c0011291:	eb bd                	jmp    c0011250 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011293:	6a 04                	push   0x4
c0011295:	8d 45 01             	lea    eax,[ebp+0x1]
c0011298:	55                   	push   ebp
c0011299:	a3 44 c5 02 c0       	mov    ds:0xc002c544,eax
c001129e:	e8 a5 fe ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112a3:	59                   	pop    ecx
c00112a4:	89 e8                	mov    eax,ebp
c00112a6:	5b                   	pop    ebx
c00112a7:	c1 e0 0c             	shl    eax,0xc
c00112aa:	83 c4 1c             	add    esp,0x1c
c00112ad:	5b                   	pop    ebx
c00112ae:	5e                   	pop    esi
c00112af:	5f                   	pop    edi
c00112b0:	5d                   	pop    ebp
c00112b1:	c3                   	ret    

c00112b2 <Virt::freeSwapfilePage(unsigned long)>:
c00112b2:	53                   	push   ebx
c00112b3:	8b 15 0c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d70c
c00112b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112bd:	b8 01 00 00 00       	mov    eax,0x1
c00112c2:	89 cb                	mov    ebx,ecx
c00112c4:	d3 e0                	shl    eax,cl
c00112c6:	c1 eb 05             	shr    ebx,0x5
c00112c9:	f7 d0                	not    eax
c00112cb:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112ce:	5b                   	pop    ebx
c00112cf:	c3                   	ret    

c00112d0 <Virt::swapIDToSector(unsigned long)>:
c00112d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d4:	0f af 05 4c c5 02 c0 	imul   eax,DWORD PTR ds:0xc002c54c
c00112db:	03 05 54 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c554
c00112e1:	c3                   	ret    

c00112e2 <Virt::allocateSwapfilePage()>:
c00112e2:	55                   	push   ebp
c00112e3:	31 d2                	xor    edx,edx
c00112e5:	57                   	push   edi
c00112e6:	56                   	push   esi
c00112e7:	53                   	push   ebx
c00112e8:	83 ec 0c             	sub    esp,0xc
c00112eb:	8b 0d 4c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c54c
c00112f1:	a1 50 c5 02 c0       	mov    eax,ds:0xc002c550
c00112f6:	f7 f1                	div    ecx
c00112f8:	39 0d 50 c5 02 c0    	cmp    DWORD PTR ds:0xc002c550,ecx
c00112fe:	72 2d                	jb     c001132d <Virt::allocateSwapfilePage()+0x4b>
c0011300:	8b 35 0c d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d70c
c0011306:	8b 16                	mov    edx,DWORD PTR [esi]
c0011308:	f6 c2 01             	test   dl,0x1
c001130b:	74 3c                	je     c0011349 <Virt::allocateSwapfilePage()+0x67>
c001130d:	31 c9                	xor    ecx,ecx
c001130f:	bf 01 00 00 00       	mov    edi,0x1
c0011314:	eb 12                	jmp    c0011328 <Virt::allocateSwapfilePage()+0x46>
c0011316:	89 fd                	mov    ebp,edi
c0011318:	89 ca                	mov    edx,ecx
c001131a:	d3 e5                	shl    ebp,cl
c001131c:	c1 ea 05             	shr    edx,0x5
c001131f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011322:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011324:	85 ea                	test   edx,ebp
c0011326:	74 2a                	je     c0011352 <Virt::allocateSwapfilePage()+0x70>
c0011328:	41                   	inc    ecx
c0011329:	39 c8                	cmp    eax,ecx
c001132b:	77 e9                	ja     c0011316 <Virt::allocateSwapfilePage()+0x34>
c001132d:	83 ec 0c             	sub    esp,0xc
c0011330:	68 c3 a1 02 c0       	push   0xc002a1c3
c0011335:	e8 31 89 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001133a:	83 c4 10             	add    esp,0x10
c001133d:	31 c9                	xor    ecx,ecx
c001133f:	83 c4 0c             	add    esp,0xc
c0011342:	89 c8                	mov    eax,ecx
c0011344:	5b                   	pop    ebx
c0011345:	5e                   	pop    esi
c0011346:	5f                   	pop    edi
c0011347:	5d                   	pop    ebp
c0011348:	c3                   	ret    
c0011349:	89 f3                	mov    ebx,esi
c001134b:	bd 01 00 00 00       	mov    ebp,0x1
c0011350:	31 c9                	xor    ecx,ecx
c0011352:	09 ea                	or     edx,ebp
c0011354:	89 c8                	mov    eax,ecx
c0011356:	89 13                	mov    DWORD PTR [ebx],edx
c0011358:	83 c4 0c             	add    esp,0xc
c001135b:	5b                   	pop    ebx
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    

c0011360 <Virt::virtualMemorySetup()>:
c0011360:	53                   	push   ebx
c0011361:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011366:	6a 0f                	push   0xf
c0011368:	53                   	push   ebx
c0011369:	43                   	inc    ebx
c001136a:	e8 d9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136f:	58                   	pop    eax
c0011370:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011376:	5a                   	pop    edx
c0011377:	75 ed                	jne    c0011366 <Virt::virtualMemorySetup()+0x6>
c0011379:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001137e:	6a 00                	push   0x0
c0011380:	53                   	push   ebx
c0011381:	43                   	inc    ebx
c0011382:	e8 c1 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011387:	59                   	pop    ecx
c0011388:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138e:	58                   	pop    eax
c001138f:	75 ed                	jne    c001137e <Virt::virtualMemorySetup()+0x1e>
c0011391:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011396:	6a 0f                	push   0xf
c0011398:	53                   	push   ebx
c0011399:	43                   	inc    ebx
c001139a:	e8 a9 fd ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139f:	58                   	pop    eax
c00113a0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113a6:	5a                   	pop    edx
c00113a7:	75 ed                	jne    c0011396 <Virt::virtualMemorySetup()+0x36>
c00113a9:	5b                   	pop    ebx
c00113aa:	c3                   	ret    

c00113ab <Virt::setupPageSwapping(int)>:
c00113ab:	57                   	push   edi
c00113ac:	56                   	push   esi
c00113ad:	53                   	push   ebx
c00113ae:	83 ec 1c             	sub    esp,0x1c
c00113b1:	68 14 01 00 00       	push   0x114
c00113b6:	e8 e1 e1 ff ff       	call   c000f59c <malloc>
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c6                	mov    esi,eax
c00113c0:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c00113c6:	68 da a1 02 c0       	push   0xc002a1da
c00113cb:	50                   	push   eax
c00113cc:	e8 99 16 00 00       	call   c0012a6a <File::File(char const*, Process*)>
c00113d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d4:	e8 6d 18 00 00       	call   c0012c46 <File::unlink()>
c00113d9:	58                   	pop    eax
c00113da:	5a                   	pop    edx
c00113db:	6a 12                	push   0x12
c00113dd:	56                   	push   esi
c00113de:	e8 eb 16 00 00       	call   c0012ace <File::open(FileOpenMode)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	85 c0                	test   eax,eax
c00113e8:	0f 85 2f 01 00 00    	jne    c001151d <Virt::setupPageSwapping(int)+0x172>
c00113ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113fa:	c1 e3 08             	shl    ebx,0x8
c00113fd:	83 ec 0c             	sub    esp,0xc
c0011400:	68 00 00 01 00       	push   0x10000
c0011405:	e8 92 e1 ff ff       	call   c000f59c <malloc>
c001140a:	83 c4 0c             	add    esp,0xc
c001140d:	89 c7                	mov    edi,eax
c001140f:	68 00 00 01 00       	push   0x10000
c0011414:	68 ee 00 00 00       	push   0xee
c0011419:	50                   	push   eax
c001141a:	e8 31 f3 fe ff       	call   c0000750 <memset>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 db                	test   ebx,ebx
c0011424:	79 03                	jns    c0011429 <Virt::setupPageSwapping(int)+0x7e>
c0011426:	83 c3 0f             	add    ebx,0xf
c0011429:	c1 fb 04             	sar    ebx,0x4
c001142c:	4b                   	dec    ebx
c001142d:	83 fb ff             	cmp    ebx,0xffffffff
c0011430:	74 41                	je     c0011473 <Virt::setupPageSwapping(int)+0xc8>
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	8b 06                	mov    eax,DWORD PTR [esi]
c0011437:	8d 54 24 18          	lea    edx,[esp+0x18]
c001143b:	52                   	push   edx
c001143c:	57                   	push   edi
c001143d:	6a 00                	push   0x0
c001143f:	68 00 00 01 00       	push   0x10000
c0011444:	56                   	push   esi
c0011445:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011448:	83 c4 20             	add    esp,0x20
c001144b:	85 c0                	test   eax,eax
c001144d:	0f 85 b5 00 00 00    	jne    c0011508 <Virt::setupPageSwapping(int)+0x15d>
c0011453:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001145b:	74 cf                	je     c001142c <Virt::setupPageSwapping(int)+0x81>
c001145d:	83 ec 0c             	sub    esp,0xc
c0011460:	4b                   	dec    ebx
c0011461:	68 0c a2 02 c0       	push   0xc002a20c
c0011466:	e8 00 88 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001146b:	83 c4 10             	add    esp,0x10
c001146e:	83 fb ff             	cmp    ebx,0xffffffff
c0011471:	75 bf                	jne    c0011432 <Virt::setupPageSwapping(int)+0x87>
c0011473:	83 ec 0c             	sub    esp,0xc
c0011476:	56                   	push   esi
c0011477:	e8 b0 16 00 00       	call   c0012b2c <File::close()>
c001147c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147f:	e8 38 e1 ff ff       	call   c000f5bc <rfree>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	85 f6                	test   esi,esi
c0011489:	74 0c                	je     c0011497 <Virt::setupPageSwapping(int)+0xec>
c001148b:	83 ec 0c             	sub    esp,0xc
c001148e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011490:	56                   	push   esi
c0011491:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	83 ec 08             	sub    esp,0x8
c001149a:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c001149f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a7:	68 da a1 02 c0       	push   0xc002a1da
c00114ac:	50                   	push   eax
c00114ad:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114b4:	c6 05 58 c5 02 c0 43 	mov    BYTE PTR ds:0xc002c558,0x43
c00114bb:	c1 e2 0b             	shl    edx,0xb
c00114be:	a3 54 c5 02 c0       	mov    ds:0xc002c554,eax
c00114c3:	89 15 50 c5 02 c0    	mov    DWORD PTR ds:0xc002c550,edx
c00114c9:	c7 05 4c c5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c54c,0x8
c00114d3:	c1 ea 08             	shr    edx,0x8
c00114d6:	89 14 24             	mov    DWORD PTR [esp],edx
c00114d9:	e8 be e0 ff ff       	call   c000f59c <malloc>
c00114de:	83 c4 0c             	add    esp,0xc
c00114e1:	89 c1                	mov    ecx,eax
c00114e3:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00114e8:	31 d2                	xor    edx,edx
c00114ea:	a1 50 c5 02 c0       	mov    eax,ds:0xc002c550
c00114ef:	f7 35 4c c5 02 c0    	div    DWORD PTR ds:0xc002c54c
c00114f5:	c1 e8 05             	shr    eax,0x5
c00114f8:	50                   	push   eax
c00114f9:	6a 00                	push   0x0
c00114fb:	51                   	push   ecx
c00114fc:	e8 4f f2 fe ff       	call   c0000750 <memset>
c0011501:	83 c4 20             	add    esp,0x20
c0011504:	5b                   	pop    ebx
c0011505:	5e                   	pop    esi
c0011506:	5f                   	pop    edi
c0011507:	c3                   	ret    
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	68 0c a2 02 c0       	push   0xc002a20c
c0011510:	e8 56 87 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	e9 36 ff ff ff       	jmp    c0011453 <Virt::setupPageSwapping(int)+0xa8>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	68 f1 a1 02 c0       	push   0xc002a1f1
c0011525:	e8 41 87 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	e9 bc fe ff ff       	jmp    c00113ee <Virt::setupPageSwapping(int)+0x43>

c0011532 <VAS::VAS()>:
c0011532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001153d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154c:	a3 10 d7 02 c0       	mov    ds:0xc002d710,eax
c0011551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011555:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001156b:	90                   	nop
c001156c:	c3                   	ret    
c001156d:	90                   	nop

c001156e <VAS::VAS(VAS*)>:
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011575:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011580:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	68 5c a0 02 c0       	push   0xc002a05c
c001158f:	e8 d7 86 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0011594:	83 c4 10             	add    esp,0x10
c0011597:	90                   	nop
c0011598:	83 c4 0c             	add    esp,0xc
c001159b:	c3                   	ret    

c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001159c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115a0:	89 c2                	mov    edx,eax
c00115a2:	c1 e8 0a             	shr    eax,0xa
c00115a5:	c1 ea 16             	shr    edx,0x16
c00115a8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115ad:	19 c9                	sbb    ecx,ecx
c00115af:	c1 e2 0c             	shl    edx,0xc
c00115b2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b8:	25 fc 0f 00 00       	and    eax,0xffc
c00115bd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c4:	01 d0                	add    eax,edx
c00115c6:	c3                   	ret    
c00115c7:	90                   	nop

c00115c8 <VAS::getPageTableEntry(unsigned long)>:
c00115c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115cc:	89 ca                	mov    edx,ecx
c00115ce:	c1 e9 0a             	shr    ecx,0xa
c00115d1:	c1 ea 16             	shr    edx,0x16
c00115d4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115da:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115e0:	c1 e0 0c             	shl    eax,0xc
c00115e3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e6:	c3                   	ret    

c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e7:	57                   	push   edi
c00115e8:	56                   	push   esi
c00115e9:	be 01 00 00 00       	mov    esi,0x1
c00115ee:	53                   	push   ebx
c00115ef:	83 ec 10             	sub    esp,0x10
c00115f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f6:	c1 eb 0c             	shr    ebx,0xc
c00115f9:	eb 3f                	jmp    c001163a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115fb:	83 ec 08             	sub    esp,0x8
c00115fe:	57                   	push   edi
c00115ff:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0011605:	e8 be ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011613:	f6 c4 04             	test   ah,0x4
c0011616:	75 5f                	jne    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011618:	80 fa 04             	cmp    dl,0x4
c001161b:	74 78                	je     c0011695 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001161d:	80 fa 02             	cmp    dl,0x2
c0011620:	0f 84 88 00 00 00    	je     c00116ae <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011626:	80 fa 03             	cmp    dl,0x3
c0011629:	0f 84 ad 00 00 00    	je     c00116dc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001162f:	fe ca                	dec    dl
c0011631:	0f 84 92 00 00 00    	je     c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011637:	43                   	inc    ebx
c0011638:	31 f6                	xor    esi,esi
c001163a:	53                   	push   ebx
c001163b:	89 df                	mov    edi,ebx
c001163d:	e8 3b fb ff ff       	call   c001117d <Virt::getPageState(unsigned long)>
c0011642:	c1 e7 0c             	shl    edi,0xc
c0011645:	59                   	pop    ecx
c0011646:	84 c0                	test   al,al
c0011648:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001164c:	75 ad                	jne    c00115fb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001164e:	83 ec 0c             	sub    esp,0xc
c0011651:	68 12 a2 02 c0       	push   0xc002a212
c0011656:	e8 10 86 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001165b:	58                   	pop    eax
c001165c:	5a                   	pop    edx
c001165d:	57                   	push   edi
c001165e:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0011664:	e8 5f ff ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 00                	mov    eax,DWORD PTR [eax]
c001166e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011672:	f6 c4 04             	test   ah,0x4
c0011675:	74 c0                	je     c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011677:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001167b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	50                   	push   eax
c0011684:	e8 5c e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011690:	80 fa 04             	cmp    dl,0x4
c0011693:	75 88                	jne    c001161d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011695:	89 f0                	mov    eax,esi
c0011697:	84 c0                	test   al,al
c0011699:	75 47                	jne    c00116e2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001169b:	c7 44 24 20 80 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a080
c00116a3:	83 c4 10             	add    esp,0x10
c00116a6:	5b                   	pop    ebx
c00116a7:	5e                   	pop    esi
c00116a8:	5f                   	pop    edi
c00116a9:	e9 bd 85 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c00116ae:	89 f0                	mov    eax,esi
c00116b0:	84 c0                	test   al,al
c00116b2:	75 15                	jne    c00116c9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	68 2e a2 02 c0       	push   0xc002a22e
c00116bc:	e8 aa 85 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00116c1:	83 c4 10             	add    esp,0x10
c00116c4:	e9 6e ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c9:	83 ec 08             	sub    esp,0x8
c00116cc:	6a 00                	push   0x0
c00116ce:	53                   	push   ebx
c00116cf:	e8 74 fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	e9 5b ff ff ff       	jmp    c0011637 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116dc:	89 f0                	mov    eax,esi
c00116de:	84 c0                	test   al,al
c00116e0:	75 15                	jne    c00116f7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	6a 00                	push   0x0
c00116e7:	53                   	push   ebx
c00116e8:	e8 5b fa ff ff       	call   c0011148 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	5b                   	pop    ebx
c00116f4:	5e                   	pop    esi
c00116f5:	5f                   	pop    edi
c00116f6:	c3                   	ret    
c00116f7:	c7 44 24 20 4a a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a24a
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	5b                   	pop    ebx
c0011703:	5e                   	pop    esi
c0011704:	5f                   	pop    edi
c0011705:	e9 61 85 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>

c001170a <VAS::freeAllocatedPages(unsigned long)>:
c001170a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011712:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011716:	74 09                	je     c0011721 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011718:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001171c:	e9 c6 fe ff ff       	jmp    c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011721:	c7 44 24 04 a4 a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a0a4
c0011729:	e9 dd 0d 00 00       	jmp    c001250b <Dbg::kprintf(char const*, ...)>

c001172e <VAS::virtualToPhysical(unsigned long)>:
c001172e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011732:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011736:	e8 8d fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001173b:	5a                   	pop    edx
c001173c:	8b 00                	mov    eax,DWORD PTR [eax]
c001173e:	59                   	pop    ecx
c001173f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011744:	c3                   	ret    
c0011745:	90                   	nop

c0011746 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011746:	55                   	push   ebp
c0011747:	57                   	push   edi
c0011748:	56                   	push   esi
c0011749:	53                   	push   ebx
c001174a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001174e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011752:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011756:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001175a:	85 db                	test   ebx,ebx
c001175c:	7e 22                	jle    c0011780 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001175e:	c1 e3 0c             	shl    ebx,0xc
c0011761:	01 f3                	add    ebx,esi
c0011763:	56                   	push   esi
c0011764:	81 c6 00 10 00 00    	add    esi,0x1000
c001176a:	55                   	push   ebp
c001176b:	e8 58 fe ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0011770:	5a                   	pop    edx
c0011771:	59                   	pop    ecx
c0011772:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011774:	21 f9                	and    ecx,edi
c0011776:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001177a:	39 f3                	cmp    ebx,esi
c001177c:	89 08                	mov    DWORD PTR [eax],ecx
c001177e:	75 e3                	jne    c0011763 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011780:	5b                   	pop    ebx
c0011781:	5e                   	pop    esi
c0011782:	5f                   	pop    edi
c0011783:	5d                   	pop    ebp
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VAS::setToWriteCombining(unsigned long, int)>:
c0011786:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001178b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011791:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011798:	75 01                	jne    c001179b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001179a:	c3                   	ret    
c001179b:	68 80 00 00 00       	push   0x80
c00117a0:	6a ff                	push   0xffffffff
c00117a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ae:	e8 93 ff ff ff       	call   c0011746 <VAS::reflagRange(unsigned long, int, int, int)>
c00117b3:	83 c4 14             	add    esp,0x14
c00117b6:	c3                   	ret    
c00117b7:	90                   	nop

c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117cb:	19 c0                	sbb    eax,eax
c00117cd:	83 ca 03             	or     edx,0x3
c00117d0:	83 e0 fc             	and    eax,0xfffffffc
c00117d3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117da:	0f 20 d8             	mov    eax,cr3
c00117dd:	0f 22 d8             	mov    cr3,eax
c00117e0:	c3                   	ret    
c00117e1:	90                   	nop

c00117e2 <VAS::~VAS()>:
c00117e2:	83 ec 2c             	sub    esp,0x2c
c00117e5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117ed:	fa                   	cli    
c00117ee:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00117f3:	40                   	inc    eax
c00117f4:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00117f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011800:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011803:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011809:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 a3 ff ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 0c             	add    esp,0xc
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d4 00 00 00    	jg     c0011902 <VAS::~VAS()+0x120>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 a8 00 00 00    	je     c00118f9 <VAS::~VAS()+0x117>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 72                	jg     c00118d5 <VAS::~VAS()+0xf3>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001188d:	6a 01                	push   0x1
c001188f:	50                   	push   eax
c0011890:	e8 07 fd ff ff       	call   c001159c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118aa:	25 01 04 00 00       	and    eax,0x401
c00118af:	3d 01 04 00 00       	cmp    eax,0x401
c00118b4:	75 19                	jne    c00118cf <VAS::~VAS()+0xed>
c00118b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bf:	83 ec 0c             	sub    esp,0xc
c00118c2:	50                   	push   eax
c00118c3:	e8 1d e0 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d3:	eb 84                	jmp    c0011859 <VAS::~VAS()+0x77>
c00118d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d9:	25 00 04 00 00       	and    eax,0x400
c00118de:	74 19                	je     c00118f9 <VAS::~VAS()+0x117>
c00118e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e9:	83 ec 0c             	sub    esp,0xc
c00118ec:	50                   	push   eax
c00118ed:	e8 f3 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118fd:	e9 1e ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3e>
c0011902:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011906:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011909:	83 ec 0c             	sub    esp,0xc
c001190c:	50                   	push   eax
c001190d:	e8 d5 fc ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011919:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	50                   	push   eax
c0011920:	e8 c0 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011930:	c1 e0 02             	shl    eax,0x2
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	50                   	push   eax
c0011937:	68 c8 a0 02 c0       	push   0xc002a0c8
c001193c:	e8 ca 0b 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0011949:	48                   	dec    eax
c001194a:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001194f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0011954:	85 c0                	test   eax,eax
c0011956:	75 01                	jne    c0011959 <VAS::~VAS()+0x177>
c0011958:	fb                   	sti    
c0011959:	90                   	nop
c001195a:	83 c4 2c             	add    esp,0x2c
c001195d:	c3                   	ret    

c001195e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001195e:	55                   	push   ebp
c001195f:	57                   	push   edi
c0011960:	56                   	push   esi
c0011961:	53                   	push   ebx
c0011962:	83 ec 1c             	sub    esp,0x1c
c0011965:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011969:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001196d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011973:	77 08                	ja     c001197d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011975:	0f 20 d8             	mov    eax,cr3
c0011978:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001197b:	75 47                	jne    c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001197d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011981:	09 d8                	or     eax,ebx
c0011983:	a9 ff 0f 00 00       	test   eax,0xfff
c0011988:	75 57                	jne    c00119e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001198a:	89 de                	mov    esi,ebx
c001198c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001198f:	c1 ee 16             	shr    esi,0x16
c0011992:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011999:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001199d:	74 54                	je     c00119f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001199f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119a3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119ad:	c1 e6 0c             	shl    esi,0xc
c00119b0:	c1 eb 0a             	shr    ebx,0xa
c00119b3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119bc:	83 c4 1c             	add    esp,0x1c
c00119bf:	5b                   	pop    ebx
c00119c0:	5e                   	pop    esi
c00119c1:	5f                   	pop    edi
c00119c2:	5d                   	pop    ebp
c00119c3:	c3                   	ret    
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 e8 a0 02 c0       	push   0xc002a0e8
c00119cc:	e8 3a 0b 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d8:	09 d8                	or     eax,ebx
c00119da:	a9 ff 0f 00 00       	test   eax,0xfff
c00119df:	74 a9                	je     c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e1:	83 ec 0c             	sub    esp,0xc
c00119e4:	68 50 a1 02 c0       	push   0xc002a150
c00119e9:	e8 7d 82 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	eb 97                	jmp    c001198a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f7:	e8 44 df ff ff       	call   c000f940 <Phys::allocatePage()>
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	89 c5                	mov    ebp,eax
c0011a01:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0011a07:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a0b:	6a 01                	push   0x1
c0011a0d:	e8 8f f7 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011a12:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a19:	6a 01                	push   0x1
c0011a1b:	50                   	push   eax
c0011a1c:	55                   	push   ebp
c0011a1d:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a23:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a27:	51                   	push   ecx
c0011a28:	e8 27 02 00 00       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a2d:	83 c4 1c             	add    esp,0x1c
c0011a30:	68 00 10 00 00       	push   0x1000
c0011a35:	6a 00                	push   0x0
c0011a37:	50                   	push   eax
c0011a38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a3c:	e8 0f ed fe ff       	call   c0000750 <memset>
c0011a41:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a45:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a48:	e8 9a fb ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a51:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a5a:	e9 40 ff ff ff       	jmp    c001199f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a5f:	90                   	nop

c0011a60 <VAS::allocatePages(int, int)>:
c0011a60:	55                   	push   ebp
c0011a61:	57                   	push   edi
c0011a62:	56                   	push   esi
c0011a63:	53                   	push   ebx
c0011a64:	83 ec 1c             	sub    esp,0x1c
c0011a67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a6b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011a70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a76:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a7c:	83 e0 01             	and    eax,0x1
c0011a7f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a87:	0f 85 cc 00 00 00    	jne    c0011b59 <VAS::allocatePages(int, int)+0xf9>
c0011a8d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a94:	85 c0                	test   eax,eax
c0011a96:	0f 84 a1 00 00 00    	je     c0011b3d <VAS::allocatePages(int, int)+0xdd>
c0011a9c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011aa0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa4:	c1 e6 0c             	shl    esi,0xc
c0011aa7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aab:	85 c0                	test   eax,eax
c0011aad:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ab0:	7e 33                	jle    c0011ae5 <VAS::allocatePages(int, int)+0x85>
c0011ab2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ab6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aba:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ac0:	e8 7b de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011ac5:	55                   	push   ebp
c0011ac6:	53                   	push   ebx
c0011ac7:	50                   	push   eax
c0011ac8:	57                   	push   edi
c0011ac9:	e8 90 fe ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 03                	je     c0011adb <VAS::allocatePages(int, int)+0x7b>
c0011ad8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011adb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ae1:	39 de                	cmp    esi,ebx
c0011ae3:	75 db                	jne    c0011ac0 <VAS::allocatePages(int, int)+0x60>
c0011ae5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aea:	75 12                	jne    c0011afe <VAS::allocatePages(int, int)+0x9e>
c0011aec:	0f 20 d8             	mov    eax,cr3
c0011aef:	0f 22 d8             	mov    cr3,eax
c0011af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af6:	83 c4 1c             	add    esp,0x1c
c0011af9:	5b                   	pop    ebx
c0011afa:	5e                   	pop    esi
c0011afb:	5f                   	pop    edi
c0011afc:	5d                   	pop    ebp
c0011afd:	c3                   	ret    
c0011afe:	c1 ee 0a             	shr    esi,0xa
c0011b01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b0b:	c1 eb 0a             	shr    ebx,0xa
c0011b0e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b20:	39 c3                	cmp    ebx,eax
c0011b22:	77 ce                	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011b24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b2d:	39 d8                	cmp    eax,ebx
c0011b2f:	73 f3                	jae    c0011b24 <VAS::allocatePages(int, int)+0xc4>
c0011b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b35:	83 c4 1c             	add    esp,0x1c
c0011b38:	5b                   	pop    ebx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	5d                   	pop    ebp
c0011b3c:	c3                   	ret    
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	68 74 a1 02 c0       	push   0xc002a174
c0011b45:	e8 21 81 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0011b4a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b51:	83 c4 10             	add    esp,0x10
c0011b54:	e9 43 ff ff ff       	jmp    c0011a9c <VAS::allocatePages(int, int)+0x3c>
c0011b59:	83 ec 0c             	sub    esp,0xc
c0011b5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b60:	e8 3c f6 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b71:	0f 87 9b 00 00 00    	ja     c0011c12 <VAS::allocatePages(int, int)+0x1b2>
c0011b77:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b7b:	85 d2                	test   edx,edx
c0011b7d:	7e 3c                	jle    c0011bbb <VAS::allocatePages(int, int)+0x15b>
c0011b7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b8b:	c1 e5 0c             	shl    ebp,0xc
c0011b8e:	81 ce 00 04 00 00    	or     esi,0x400
c0011b94:	01 dd                	add    ebp,ebx
c0011b96:	e8 a5 dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011b9b:	56                   	push   esi
c0011b9c:	53                   	push   ebx
c0011b9d:	50                   	push   eax
c0011b9e:	57                   	push   edi
c0011b9f:	e8 ba fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba4:	83 c4 10             	add    esp,0x10
c0011ba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bac:	74 03                	je     c0011bb1 <VAS::allocatePages(int, int)+0x151>
c0011bae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb7:	39 dd                	cmp    ebp,ebx
c0011bb9:	75 db                	jne    c0011b96 <VAS::allocatePages(int, int)+0x136>
c0011bbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc0:	0f 84 26 ff ff ff    	je     c0011aec <VAS::allocatePages(int, int)+0x8c>
c0011bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bce:	89 d3                	mov    ebx,edx
c0011bd0:	c1 e0 0c             	shl    eax,0xc
c0011bd3:	c1 eb 0a             	shr    ebx,0xa
c0011bd6:	01 d0                	add    eax,edx
c0011bd8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bde:	c1 e8 0a             	shr    eax,0xa
c0011be1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bec:	2d 00 00 40 00       	sub    eax,0x400000
c0011bf1:	39 c3                	cmp    ebx,eax
c0011bf3:	0f 87 f9 fe ff ff    	ja     c0011af2 <VAS::allocatePages(int, int)+0x92>
c0011bf9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bfc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c02:	39 d8                	cmp    eax,ebx
c0011c04:	73 f3                	jae    c0011bf9 <VAS::allocatePages(int, int)+0x199>
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011c17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c1d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c24:	0f 84 4d ff ff ff    	je     c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c2a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c32:	e9 40 ff ff ff       	jmp    c0011b77 <VAS::allocatePages(int, int)+0x117>
c0011c37:	90                   	nop

c0011c38 <VAS::setCPUSpecific(unsigned long)>:
c0011c38:	83 ec 0c             	sub    esp,0xc
c0011c3b:	6a 05                	push   0x5
c0011c3d:	68 00 00 40 c2       	push   0xc2400000
c0011c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c4a:	e8 0f fd ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4f:	83 c4 1c             	add    esp,0x1c
c0011c52:	c3                   	ret    
c0011c53:	90                   	nop

c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c54:	55                   	push   ebp
c0011c55:	57                   	push   edi
c0011c56:	56                   	push   esi
c0011c57:	53                   	push   ebx
c0011c58:	83 ec 1c             	sub    esp,0x1c
c0011c5b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011c60:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c6a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c6e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c74:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c78:	83 e0 01             	and    eax,0x1
c0011c7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c83:	85 c0                	test   eax,eax
c0011c85:	7e 39                	jle    c0011cc0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8b:	89 f3                	mov    ebx,esi
c0011c8d:	c1 e0 0c             	shl    eax,0xc
c0011c90:	01 f0                	add    eax,esi
c0011c92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c96:	55                   	push   ebp
c0011c97:	53                   	push   ebx
c0011c98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c9c:	29 f0                	sub    eax,esi
c0011c9e:	01 d8                	add    eax,ebx
c0011ca0:	50                   	push   eax
c0011ca1:	57                   	push   edi
c0011ca2:	e8 b7 fc ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 03                	je     c0011cb4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cb1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cbe:	75 d6                	jne    c0011c96 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cc0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc5:	75 10                	jne    c0011cd7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cc7:	0f 20 d8             	mov    eax,cr3
c0011cca:	0f 22 d8             	mov    cr3,eax
c0011ccd:	83 c4 1c             	add    esp,0x1c
c0011cd0:	89 f0                	mov    eax,esi
c0011cd2:	5b                   	pop    ebx
c0011cd3:	5e                   	pop    esi
c0011cd4:	5f                   	pop    edi
c0011cd5:	5d                   	pop    ebp
c0011cd6:	c3                   	ret    
c0011cd7:	89 f3                	mov    ebx,esi
c0011cd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cdd:	c1 eb 0a             	shr    ebx,0xa
c0011ce0:	c1 e0 0c             	shl    eax,0xc
c0011ce3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce9:	01 f0                	add    eax,esi
c0011ceb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cf1:	c1 e8 0a             	shr    eax,0xa
c0011cf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf9:	2d 00 00 40 00       	sub    eax,0x400000
c0011cfe:	39 c3                	cmp    ebx,eax
c0011d00:	77 cb                	ja     c0011ccd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d02:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d05:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d0b:	39 d8                	cmp    eax,ebx
c0011d0d:	73 f3                	jae    c0011d02 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d0f:	83 c4 1c             	add    esp,0x1c
c0011d12:	89 f0                	mov    eax,esi
c0011d14:	5b                   	pop    ebx
c0011d15:	5e                   	pop    esi
c0011d16:	5f                   	pop    edi
c0011d17:	5d                   	pop    ebp
c0011d18:	c3                   	ret    
c0011d19:	90                   	nop

c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d1a:	55                   	push   ebp
c0011d1b:	57                   	push   edi
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 1c             	sub    esp,0x1c
c0011d21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d29:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d2d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d31:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d36:	75 4a                	jne    c0011d82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d38:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d3f:	c1 eb 16             	shr    ebx,0x16
c0011d42:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d49:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d4d:	74 4d                	je     c0011d9c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d53:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d57:	c1 e8 0a             	shr    eax,0xa
c0011d5a:	80 fa 01             	cmp    dl,0x1
c0011d5d:	19 d2                	sbb    edx,edx
c0011d5f:	c1 e3 0c             	shl    ebx,0xc
c0011d62:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d66:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d6c:	25 fc 0f 00 00       	and    eax,0xffc
c0011d71:	01 d8                	add    eax,ebx
c0011d73:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d7a:	83 c4 1c             	add    esp,0x1c
c0011d7d:	5b                   	pop    ebx
c0011d7e:	5e                   	pop    esi
c0011d7f:	5f                   	pop    edi
c0011d80:	5d                   	pop    ebp
c0011d81:	c3                   	ret    
c0011d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	68 a0 a1 02 c0       	push   0xc002a1a0
c0011d8e:	e8 d8 7e 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d9a:	eb 9c                	jmp    c0011d38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011da0:	e8 9b db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011da5:	83 ec 0c             	sub    esp,0xc
c0011da8:	89 c5                	mov    ebp,eax
c0011daa:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0011db0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db4:	6a 01                	push   0x1
c0011db6:	e8 e6 f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011dbb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dc2:	6a 01                	push   0x1
c0011dc4:	50                   	push   eax
c0011dc5:	55                   	push   ebp
c0011dc6:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dcc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dd0:	51                   	push   ecx
c0011dd1:	e8 7e fe ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd6:	83 c4 1c             	add    esp,0x1c
c0011dd9:	68 00 10 00 00       	push   0x1000
c0011dde:	6a 00                	push   0x0
c0011de0:	50                   	push   eax
c0011de1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de5:	e8 66 e9 fe ff       	call   c0000750 <memset>
c0011dea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011df1:	e8 f1 f7 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e03:	e9 47 ff ff ff       	jmp    c0011d4f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e08 <VAS::VAS(bool)>:
c0011e08:	53                   	push   ebx
c0011e09:	83 ec 28             	sub    esp,0x28
c0011e0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e32:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e35:	e8 06 db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e43:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	6a 01                	push   0x1
c0011e4e:	e8 4e f3 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	89 c2                	mov    edx,eax
c0011e58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e5f:	83 ec 0c             	sub    esp,0xc
c0011e62:	6a 03                	push   0x3
c0011e64:	6a 01                	push   0x1
c0011e66:	52                   	push   edx
c0011e67:	50                   	push   eax
c0011e68:	53                   	push   ebx
c0011e69:	e8 e6 fd ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6e:	83 c4 20             	add    esp,0x20
c0011e71:	89 c2                	mov    edx,eax
c0011e73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e77:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e7a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e82:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e8a:	7f 1c                	jg     c0011ea8 <VAS::VAS(bool)+0xa0>
c0011e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e97:	c1 e2 02             	shl    edx,0x2
c0011e9a:	01 d0                	add    eax,edx
c0011e9c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ea2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea6:	eb da                	jmp    c0011e82 <VAS::VAS(bool)+0x7a>
c0011ea8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eb0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eb8:	7f 7a                	jg     c0011f34 <VAS::VAS(bool)+0x12c>
c0011eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ebe:	2d 00 02 00 00       	sub    eax,0x200
c0011ec3:	c1 e0 0c             	shl    eax,0xc
c0011ec6:	83 c8 03             	or     eax,0x3
c0011ec9:	89 c2                	mov    edx,eax
c0011ecb:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ed6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011edc:	83 e0 10             	and    eax,0x10
c0011edf:	84 c0                	test   al,al
c0011ee1:	74 07                	je     c0011eea <VAS::VAS(bool)+0xe2>
c0011ee3:	b8 00 01 00 00       	mov    eax,0x100
c0011ee8:	eb 05                	jmp    c0011eef <VAS::VAS(bool)+0xe7>
c0011eea:	b8 00 00 00 00       	mov    eax,0x0
c0011eef:	09 d0                	or     eax,edx
c0011ef1:	89 c1                	mov    ecx,eax
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	89 ca                	mov    edx,ecx
c0011f05:	89 10                	mov    DWORD PTR [eax],edx
c0011f07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f0b:	2d 40 03 00 00       	sub    eax,0x340
c0011f10:	83 f8 7f             	cmp    eax,0x7f
c0011f13:	77 16                	ja     c0011f2b <VAS::VAS(bool)+0x123>
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f20:	c1 e2 02             	shl    edx,0x2
c0011f23:	01 d0                	add    eax,edx
c0011f25:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f2b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2f:	e9 7c ff ff ff       	jmp    c0011eb0 <VAS::VAS(bool)+0xa8>
c0011f34:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f45:	83 e0 10             	and    eax,0x10
c0011f48:	84 c0                	test   al,al
c0011f4a:	74 07                	je     c0011f53 <VAS::VAS(bool)+0x14b>
c0011f4c:	b8 03 41 00 00       	mov    eax,0x4103
c0011f51:	eb 05                	jmp    c0011f58 <VAS::VAS(bool)+0x150>
c0011f53:	b8 03 40 00 00       	mov    eax,0x4003
c0011f58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f5c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f5f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f65:	89 02                	mov    DWORD PTR [edx],eax
c0011f67:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f72:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f78:	83 ec 08             	sub    esp,0x8
c0011f7b:	50                   	push   eax
c0011f7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f80:	e8 b3 fc ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c0011f85:	83 c4 10             	add    esp,0x10
c0011f88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011f8f:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011f94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa0:	83 e0 10             	and    eax,0x10
c0011fa3:	84 c0                	test   al,al
c0011fa5:	74 07                	je     c0011fae <VAS::VAS(bool)+0x1a6>
c0011fa7:	b8 00 01 00 00       	mov    eax,0x100
c0011fac:	eb 05                	jmp    c0011fb3 <VAS::VAS(bool)+0x1ab>
c0011fae:	b8 00 00 00 00       	mov    eax,0x0
c0011fb3:	09 c2                	or     edx,eax
c0011fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fbc:	05 fc 0f 00 00       	add    eax,0xffc
c0011fc1:	83 ca 03             	or     edx,0x3
c0011fc4:	89 10                	mov    DWORD PTR [eax],edx
c0011fc6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0011fcb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 6a 1c 00 00       	call   c0013c44 <Device::getName()>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	83 ec 08             	sub    esp,0x8
c0011fe0:	68 64 a2 02 c0       	push   0xc002a264
c0011fe5:	50                   	push   eax
c0011fe6:	e8 ad e8 fe ff       	call   c0000898 <strcmp>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	85 c0                	test   eax,eax
c0011ff0:	0f 94 c0             	sete   al
c0011ff3:	84 c0                	test   al,al
c0011ff5:	0f 84 87 00 00 00    	je     c0012082 <VAS::VAS(bool)+0x27a>
c0011ffb:	fa                   	cli    
c0011ffc:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012001:	40                   	inc    eax
c0012002:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0012007:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001200c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012012:	05 7c 09 00 00       	add    eax,0x97c
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	50                   	push   eax
c001201b:	e8 fe cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012020:	83 c4 10             	add    esp,0x10
c0012023:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012028:	89 c3                	mov    ebx,eax
c001202a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001202f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012035:	05 7c 09 00 00       	add    eax,0x97c
c001203a:	83 ec 0c             	sub    esp,0xc
c001203d:	50                   	push   eax
c001203e:	e8 db cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012043:	83 c4 10             	add    esp,0x10
c0012046:	83 ec 08             	sub    esp,0x8
c0012049:	50                   	push   eax
c001204a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001204e:	e8 75 f5 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205d:	6a 11                	push   0x11
c001205f:	53                   	push   ebx
c0012060:	50                   	push   eax
c0012061:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012065:	e8 f4 f8 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012072:	48                   	dec    eax
c0012073:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0012078:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001207d:	85 c0                	test   eax,eax
c001207f:	75 01                	jne    c0012082 <VAS::VAS(bool)+0x27a>
c0012081:	fb                   	sti    
c0012082:	90                   	nop
c0012083:	83 c4 28             	add    esp,0x28
c0012086:	5b                   	pop    ebx
c0012087:	c3                   	ret    

c0012088 <VAS::evict(unsigned long)>:
c0012088:	55                   	push   ebp
c0012089:	57                   	push   edi
c001208a:	56                   	push   esi
c001208b:	53                   	push   ebx
c001208c:	83 ec 1c             	sub    esp,0x1c
c001208f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012093:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209b:	e8 42 f2 ff ff       	call   c00112e2 <Virt::allocateSwapfilePage()>
c00120a0:	89 c7                	mov    edi,eax
c00120a2:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c00120a7:	85 c0                	test   eax,eax
c00120a9:	7e 3d                	jle    c00120e8 <VAS::evict(unsigned long)+0x60>
c00120ab:	89 ee                	mov    esi,ebp
c00120ad:	31 db                	xor    ebx,ebx
c00120af:	83 ec 0c             	sub    esp,0xc
c00120b2:	57                   	push   edi
c00120b3:	e8 18 f2 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00120b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00120bb:	01 d8                	add    eax,ebx
c00120bd:	6a 01                	push   0x1
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	43                   	inc    ebx
c00120c2:	52                   	push   edx
c00120c3:	81 c6 00 02 00 00    	add    esi,0x200
c00120c9:	50                   	push   eax
c00120ca:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c00120d1:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c00120d8:	e8 e3 3d 00 00       	call   c0015ec0 <LogicalDisk::write(unsigned long long, int, void*)>
c00120dd:	83 c4 20             	add    esp,0x20
c00120e0:	39 1d 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,ebx
c00120e6:	7f c7                	jg     c00120af <VAS::evict(unsigned long)+0x27>
c00120e8:	83 ec 08             	sub    esp,0x8
c00120eb:	c1 e7 0b             	shl    edi,0xb
c00120ee:	55                   	push   ebp
c00120ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120f3:	e8 d0 f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c00120f8:	83 c4 0c             	add    esp,0xc
c00120fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00120fd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012103:	09 d7                	or     edi,edx
c0012105:	89 38                	mov    DWORD PTR [eax],edi
c0012107:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c001210c:	40                   	inc    eax
c001210d:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c0012112:	0f 20 da             	mov    edx,cr3
c0012115:	0f 22 da             	mov    cr3,edx
c0012118:	50                   	push   eax
c0012119:	55                   	push   ebp
c001211a:	68 72 a2 02 c0       	push   0xc002a272
c001211f:	e8 e7 03 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0012124:	a1 04 d7 02 c0       	mov    eax,ds:0xc002d704
c0012129:	c7 44 24 40 87 a2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a287
c0012131:	8d 50 01             	lea    edx,[eax+0x1]
c0012134:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012138:	89 15 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edx
c001213e:	83 c4 2c             	add    esp,0x2c
c0012141:	5b                   	pop    ebx
c0012142:	5e                   	pop    esi
c0012143:	5f                   	pop    edi
c0012144:	5d                   	pop    ebp
c0012145:	e9 c1 03 00 00       	jmp    c001250b <Dbg::kprintf(char const*, ...)>

c001214a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001214a:	55                   	push   ebp
c001214b:	57                   	push   edi
c001214c:	56                   	push   esi
c001214d:	53                   	push   ebx
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012155:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c001215b:	74 1c                	je     c0012179 <VAS::tryLoadBackOffDisk(unsigned long)+0x2f>
c001215d:	55                   	push   ebp
c001215e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012162:	e8 61 f4 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c0012167:	5b                   	pop    ebx
c0012168:	85 c0                	test   eax,eax
c001216a:	5e                   	pop    esi
c001216b:	89 c3                	mov    ebx,eax
c001216d:	74 0a                	je     c0012179 <VAS::tryLoadBackOffDisk(unsigned long)+0x2f>
c001216f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012171:	f7 c7 01 00 00 00    	test   edi,0x1
c0012177:	74 0a                	je     c0012183 <VAS::tryLoadBackOffDisk(unsigned long)+0x39>
c0012179:	31 c0                	xor    eax,eax
c001217b:	83 c4 0c             	add    esp,0xc
c001217e:	5b                   	pop    ebx
c001217f:	5e                   	pop    esi
c0012180:	5f                   	pop    edi
c0012181:	5d                   	pop    ebp
c0012182:	c3                   	ret    
c0012183:	e8 b8 d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012188:	c1 ef 0b             	shr    edi,0xb
c001218b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001218d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012193:	09 c2                	or     edx,eax
c0012195:	81 ca 01 08 00 00    	or     edx,0x801
c001219b:	89 13                	mov    DWORD PTR [ebx],edx
c001219d:	8b 0d 4c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c54c
c00121a3:	85 c9                	test   ecx,ecx
c00121a5:	7e 3d                	jle    c00121e4 <VAS::tryLoadBackOffDisk(unsigned long)+0x9a>
c00121a7:	89 ee                	mov    esi,ebp
c00121a9:	31 db                	xor    ebx,ebx
c00121ab:	83 ec 0c             	sub    esp,0xc
c00121ae:	57                   	push   edi
c00121af:	e8 1c f1 ff ff       	call   c00112d0 <Virt::swapIDToSector(unsigned long)>
c00121b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00121b7:	01 d8                	add    eax,ebx
c00121b9:	6a 01                	push   0x1
c00121bb:	31 d2                	xor    edx,edx
c00121bd:	43                   	inc    ebx
c00121be:	52                   	push   edx
c00121bf:	81 c6 00 02 00 00    	add    esi,0x200
c00121c5:	50                   	push   eax
c00121c6:	0f be 05 58 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c558
c00121cd:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c00121d4:	e8 7b 3c 00 00       	call   c0015e54 <LogicalDisk::read(unsigned long long, int, void*)>
c00121d9:	83 c4 20             	add    esp,0x20
c00121dc:	39 1d 4c c5 02 c0    	cmp    DWORD PTR ds:0xc002c54c,ebx
c00121e2:	7f c7                	jg     c00121ab <VAS::tryLoadBackOffDisk(unsigned long)+0x61>
c00121e4:	a1 08 d7 02 c0       	mov    eax,ds:0xc002d708
c00121e9:	48                   	dec    eax
c00121ea:	52                   	push   edx
c00121eb:	a3 08 d7 02 c0       	mov    ds:0xc002d708,eax
c00121f0:	50                   	push   eax
c00121f1:	55                   	push   ebp
c00121f2:	68 98 a2 02 c0       	push   0xc002a298
c00121f7:	e8 0f 03 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00121fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121ff:	e8 ae f0 ff ff       	call   c00112b2 <Virt::freeSwapfilePage(unsigned long)>
c0012204:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	48                   	dec    eax
c001220d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0012212:	85 c0                	test   eax,eax
c0012214:	74 1d                	je     c0012233 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012216:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001221a:	25 ff 0f 00 00       	and    eax,0xfff
c001221f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012224:	77 10                	ja     c0012236 <VAS::tryLoadBackOffDisk(unsigned long)+0xec>
c0012226:	0f 20 d8             	mov    eax,cr3
c0012229:	0f 22 d8             	mov    cr3,eax
c001222c:	b0 01                	mov    al,0x1
c001222e:	e9 48 ff ff ff       	jmp    c001217b <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0012233:	fb                   	sti    
c0012234:	eb e0                	jmp    c0012216 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	68 ad a2 02 c0       	push   0xc002a2ad
c001223e:	e8 c8 02 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	eb de                	jmp    c0012226 <VAS::tryLoadBackOffDisk(unsigned long)+0xdc>

c0012248 <VAS::scanForEviction()>:
c0012248:	57                   	push   edi
c0012249:	56                   	push   esi
c001224a:	53                   	push   ebx
c001224b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001224f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012252:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012258:	75 0e                	jne    c0012268 <VAS::scanForEviction()+0x20>
c001225a:	89 da                	mov    edx,ebx
c001225c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001225f:	c1 ea 16             	shr    edx,0x16
c0012262:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012266:	74 48                	je     c00122b0 <VAS::scanForEviction()+0x68>
c0012268:	53                   	push   ebx
c0012269:	56                   	push   esi
c001226a:	e8 59 f3 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001226f:	5a                   	pop    edx
c0012270:	8b 38                	mov    edi,DWORD PTR [eax]
c0012272:	59                   	pop    ecx
c0012273:	89 fa                	mov    edx,edi
c0012275:	81 e2 01 08 00 00    	and    edx,0x801
c001227b:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012281:	74 3d                	je     c00122c0 <VAS::scanForEviction()+0x78>
c0012283:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012289:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001228f:	76 2a                	jbe    c00122bb <VAS::scanForEviction()+0x73>
c0012291:	31 db                	xor    ebx,ebx
c0012293:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001229a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122a0:	75 c6                	jne    c0012268 <VAS::scanForEviction()+0x20>
c00122a2:	89 da                	mov    edx,ebx
c00122a4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122a7:	c1 ea 16             	shr    edx,0x16
c00122aa:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122ae:	75 b8                	jne    c0012268 <VAS::scanForEviction()+0x20>
c00122b0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00122b6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122b9:	eb 97                	jmp    c0012252 <VAS::scanForEviction()+0xa>
c00122bb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122be:	eb 92                	jmp    c0012252 <VAS::scanForEviction()+0xa>
c00122c0:	f7 c7 20 00 00 00    	test   edi,0x20
c00122c6:	74 0a                	je     c00122d2 <VAS::scanForEviction()+0x8a>
c00122c8:	83 e7 df             	and    edi,0xffffffdf
c00122cb:	89 38                	mov    DWORD PTR [eax],edi
c00122cd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122d0:	eb b1                	jmp    c0012283 <VAS::scanForEviction()+0x3b>
c00122d2:	83 ec 08             	sub    esp,0x8
c00122d5:	53                   	push   ebx
c00122d6:	56                   	push   esi
c00122d7:	e8 ac fd ff ff       	call   c0012088 <VAS::evict(unsigned long)>
c00122dc:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00122e3:	83 c4 10             	add    esp,0x10
c00122e6:	89 f8                	mov    eax,edi
c00122e8:	5b                   	pop    ebx
c00122e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ee:	5e                   	pop    esi
c00122ef:	5f                   	pop    edi
c00122f0:	c3                   	ret    

c00122f1 <mapVASFirstTime>:
c00122f1:	55                   	push   ebp
c00122f2:	57                   	push   edi
c00122f3:	56                   	push   esi
c00122f4:	53                   	push   ebx
c00122f5:	83 ec 0c             	sub    esp,0xc
c00122f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122fd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012300:	4a                   	dec    edx
c0012301:	0f 84 8e 00 00 00    	je     c0012395 <mapVASFirstTime+0xa4>
c0012307:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001230a:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001230d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012312:	c1 e5 15             	shl    ebp,0x15
c0012315:	be 00 90 e7 01       	mov    esi,0x1e79000
c001231a:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012320:	29 eb                	sub    ebx,ebp
c0012322:	29 ee                	sub    esi,ebp
c0012324:	e8 17 d6 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012329:	83 ec 0c             	sub    esp,0xc
c001232c:	68 03 04 00 00       	push   0x403
c0012331:	6a 01                	push   0x1
c0012333:	53                   	push   ebx
c0012334:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001233a:	50                   	push   eax
c001233b:	57                   	push   edi
c001233c:	e8 13 f9 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012341:	83 c4 20             	add    esp,0x20
c0012344:	39 f3                	cmp    ebx,esi
c0012346:	75 dc                	jne    c0012324 <mapVASFirstTime+0x33>
c0012348:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001234d:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012352:	29 ee                	sub    esi,ebp
c0012354:	29 e8                	sub    eax,ebp
c0012356:	89 c5                	mov    ebp,eax
c0012358:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001235c:	19 db                	sbb    ebx,ebx
c001235e:	e8 dd d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012363:	83 e3 04             	and    ebx,0x4
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	81 c3 03 04 00 00    	add    ebx,0x403
c001236f:	53                   	push   ebx
c0012370:	6a 01                	push   0x1
c0012372:	56                   	push   esi
c0012373:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012379:	50                   	push   eax
c001237a:	57                   	push   edi
c001237b:	e8 d4 f8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012380:	83 c4 20             	add    esp,0x20
c0012383:	39 f5                	cmp    ebp,esi
c0012385:	75 d1                	jne    c0012358 <mapVASFirstTime+0x67>
c0012387:	0f 20 d8             	mov    eax,cr3
c001238a:	0f 22 d8             	mov    cr3,eax
c001238d:	83 c4 0c             	add    esp,0xc
c0012390:	5b                   	pop    ebx
c0012391:	5e                   	pop    esi
c0012392:	5f                   	pop    edi
c0012393:	5d                   	pop    ebp
c0012394:	c3                   	ret    
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	68 bd a2 02 c0       	push   0xc002a2bd
c001239d:	e8 69 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	83 c4 0c             	add    esp,0xc
c00123a8:	5b                   	pop    ebx
c00123a9:	5e                   	pop    esi
c00123aa:	5f                   	pop    edi
c00123ab:	5d                   	pop    ebp
c00123ac:	c3                   	ret    

c00123ad <__cxa_atexit>:
c00123ad:	31 c0                	xor    eax,eax
c00123af:	c3                   	ret    

c00123b0 <__cxa_finalize>:
c00123b0:	c3                   	ret    

c00123b1 <__stack_chk_fail>:
c00123b1:	55                   	push   ebp
c00123b2:	89 e5                	mov    ebp,esp
c00123b4:	83 ec 14             	sub    esp,0x14
c00123b7:	68 d6 a2 02 c0       	push   0xc002a2d6
c00123bc:	e8 4a 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123c1:	58                   	pop    eax
c00123c2:	5a                   	pop    edx
c00123c3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123c6:	68 26 a3 02 c0       	push   0xc002a326
c00123cb:	e8 3b 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123d0:	59                   	pop    ecx
c00123d1:	58                   	pop    eax
c00123d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123d5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123d8:	68 26 a3 02 c0       	push   0xc002a326
c00123dd:	e8 29 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123e2:	5a                   	pop    edx
c00123e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123e6:	59                   	pop    ecx
c00123e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123ec:	68 26 a3 02 c0       	push   0xc002a326
c00123f1:	e8 15 01 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00123f6:	5a                   	pop    edx
c00123f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123fa:	59                   	pop    ecx
c00123fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00123ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012402:	68 26 a3 02 c0       	push   0xc002a326
c0012407:	e8 ff 00 00 00       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001240c:	c7 04 24 2e a3 02 c0 	mov    DWORD PTR [esp],0xc002a32e
c0012413:	e8 53 78 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	c9                   	leave  
c001241c:	c3                   	ret    

c001241d <__cxa_pure_virtual>:
c001241d:	83 ec 18             	sub    esp,0x18
c0012420:	68 46 a3 02 c0       	push   0xc002a346
c0012425:	e8 41 78 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001242a:	83 c4 1c             	add    esp,0x1c
c001242d:	c3                   	ret    

c001242e <operator new[](unsigned long)>:
c001242e:	e9 69 d1 ff ff       	jmp    c000f59c <malloc>

c0012433 <operator delete(void*, unsigned long)>:
c0012433:	e9 84 d1 ff ff       	jmp    c000f5bc <rfree>

c0012438 <operator delete[](void*)>:
c0012438:	e9 7f d1 ff ff       	jmp    c000f5bc <rfree>

c001243d <operator delete[](void*, unsigned long)>:
c001243d:	e9 7a d1 ff ff       	jmp    c000f5bc <rfree>

c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012442:	55                   	push   ebp
c0012443:	b9 11 00 00 00       	mov    ecx,0x11
c0012448:	57                   	push   edi
c0012449:	56                   	push   esi
c001244a:	be de 9e 02 c0       	mov    esi,0xc0029ede
c001244f:	53                   	push   ebx
c0012450:	83 ec 20             	sub    esp,0x20
c0012453:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012457:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001245b:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001245f:	fc                   	cld    
c0012460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012462:	89 ee                	mov    esi,ebp
c0012464:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012468:	eb 02                	jmp    c001246c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001246a:	89 c6                	mov    esi,eax
c001246c:	31 d2                	xor    edx,edx
c001246e:	41                   	inc    ecx
c001246f:	89 f0                	mov    eax,esi
c0012471:	f7 f3                	div    ebx
c0012473:	39 de                	cmp    esi,ebx
c0012475:	73 f3                	jae    c001246a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012477:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001247a:	eb 02                	jmp    c001247e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001247c:	89 c5                	mov    ebp,eax
c001247e:	31 d2                	xor    edx,edx
c0012480:	49                   	dec    ecx
c0012481:	89 e8                	mov    eax,ebp
c0012483:	f7 f3                	div    ebx
c0012485:	39 dd                	cmp    ebp,ebx
c0012487:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001248b:	88 11                	mov    BYTE PTR [ecx],dl
c001248d:	73 ed                	jae    c001247c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001248f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012493:	83 c4 20             	add    esp,0x20
c0012496:	5b                   	pop    ebx
c0012497:	5e                   	pop    esi
c0012498:	5f                   	pop    edi
c0012499:	5d                   	pop    ebp
c001249a:	c3                   	ret    

c001249b <Dbg::logc(char)>:
c001249b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001249f:	ba fd 03 00 00       	mov    edx,0x3fd
c00124a4:	ec                   	in     al,dx
c00124a5:	a8 20                	test   al,0x20
c00124a7:	74 fb                	je     c00124a4 <Dbg::logc(char)+0x9>
c00124a9:	ba f8 03 00 00       	mov    edx,0x3f8
c00124ae:	88 c8                	mov    al,cl
c00124b0:	ee                   	out    dx,al
c00124b1:	c3                   	ret    

c00124b2 <Dbg::logs(char*)>:
c00124b2:	53                   	push   ebx
c00124b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00124b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124ba:	84 c0                	test   al,al
c00124bc:	74 0f                	je     c00124cd <Dbg::logs(char*)+0x1b>
c00124be:	50                   	push   eax
c00124bf:	43                   	inc    ebx
c00124c0:	e8 d6 ff ff ff       	call   c001249b <Dbg::logc(char)>
c00124c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124c8:	5a                   	pop    edx
c00124c9:	84 c0                	test   al,al
c00124cb:	75 f1                	jne    c00124be <Dbg::logs(char*)+0xc>
c00124cd:	5b                   	pop    ebx
c00124ce:	c3                   	ret    

c00124cf <Dbg::logWriteInt(unsigned int)>:
c00124cf:	83 ec 10             	sub    esp,0x10
c00124d2:	6a 0a                	push   0xa
c00124d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00124d8:	50                   	push   eax
c00124d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124dd:	e8 60 ff ff ff       	call   c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00124e2:	50                   	push   eax
c00124e3:	e8 ca ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c00124e8:	83 c4 20             	add    esp,0x20
c00124eb:	c3                   	ret    

c00124ec <Dbg::logWriteIntBase(unsigned int, int)>:
c00124ec:	83 ec 10             	sub    esp,0x10
c00124ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124f3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00124f7:	50                   	push   eax
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 41 ff ff ff       	call   c0012442 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012501:	50                   	push   eax
c0012502:	e8 ab ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c0012507:	83 c4 20             	add    esp,0x20
c001250a:	c3                   	ret    

c001250b <Dbg::kprintf(char const*, ...)>:
c001250b:	55                   	push   ebp
c001250c:	57                   	push   edi
c001250d:	56                   	push   esi
c001250e:	53                   	push   ebx
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012516:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001251a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001251e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012521:	84 c0                	test   al,al
c0012523:	74 4a                	je     c001256f <Dbg::kprintf(char const*, ...)+0x64>
c0012525:	31 db                	xor    ebx,ebx
c0012527:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001252a:	3c 25                	cmp    al,0x25
c001252c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001252f:	0f 85 e4 00 00 00    	jne    c0012619 <Dbg::kprintf(char const*, ...)+0x10e>
c0012535:	83 c3 02             	add    ebx,0x2
c0012538:	8a 07                	mov    al,BYTE PTR [edi]
c001253a:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001253d:	83 e8 25             	sub    eax,0x25
c0012540:	3c 53                	cmp    al,0x53
c0012542:	0f 87 ba 00 00 00    	ja     c0012602 <Dbg::kprintf(char const*, ...)+0xf7>
c0012548:	0f b6 c0             	movzx  eax,al
c001254b:	ff 24 85 5c a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5ca4]
c0012552:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012556:	89 c8                	mov    eax,ecx
c0012558:	83 c1 04             	add    ecx,0x4
c001255b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001255f:	ff 30                	push   DWORD PTR [eax]
c0012561:	e8 69 ff ff ff       	call   c00124cf <Dbg::logWriteInt(unsigned int)>
c0012566:	5f                   	pop    edi
c0012567:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001256b:	84 c0                	test   al,al
c001256d:	75 b8                	jne    c0012527 <Dbg::kprintf(char const*, ...)+0x1c>
c001256f:	83 c4 0c             	add    esp,0xc
c0012572:	5b                   	pop    ebx
c0012573:	5e                   	pop    esi
c0012574:	5f                   	pop    edi
c0012575:	5d                   	pop    ebp
c0012576:	c3                   	ret    
c0012577:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001257b:	89 c8                	mov    eax,ecx
c001257d:	83 c1 04             	add    ecx,0x4
c0012580:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012584:	ff 30                	push   DWORD PTR [eax]
c0012586:	e8 27 ff ff ff       	call   c00124b2 <Dbg::logs(char*)>
c001258b:	58                   	pop    eax
c001258c:	eb d9                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c001258e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012592:	89 d0                	mov    eax,edx
c0012594:	83 c2 04             	add    edx,0x4
c0012597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001259b:	ff 30                	push   DWORD PTR [eax]
c001259d:	e8 2d ff ff ff       	call   c00124cf <Dbg::logWriteInt(unsigned int)>
c00125a2:	58                   	pop    eax
c00125a3:	eb c2                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125a9:	89 d0                	mov    eax,edx
c00125ab:	83 c2 04             	add    edx,0x4
c00125ae:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00125b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125b5:	50                   	push   eax
c00125b6:	e8 e0 fe ff ff       	call   c001249b <Dbg::logc(char)>
c00125bb:	58                   	pop    eax
c00125bc:	eb a9                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125c2:	89 c8                	mov    eax,ecx
c00125c4:	83 c1 04             	add    ecx,0x4
c00125c7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125cb:	6a 10                	push   0x10
c00125cd:	ff 30                	push   DWORD PTR [eax]
c00125cf:	e8 18 ff ff ff       	call   c00124ec <Dbg::logWriteIntBase(unsigned int, int)>
c00125d4:	59                   	pop    ecx
c00125d5:	5f                   	pop    edi
c00125d6:	eb 8f                	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125dc:	89 d0                	mov    eax,edx
c00125de:	83 c2 08             	add    edx,0x8
c00125e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125e5:	6a 10                	push   0x10
c00125e7:	ff 30                	push   DWORD PTR [eax]
c00125e9:	e8 fe fe ff ff       	call   c00124ec <Dbg::logWriteIntBase(unsigned int, int)>
c00125ee:	58                   	pop    eax
c00125ef:	5a                   	pop    edx
c00125f0:	e9 72 ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c00125f5:	6a 25                	push   0x25
c00125f7:	e8 9f fe ff ff       	call   c001249b <Dbg::logc(char)>
c00125fc:	58                   	pop    eax
c00125fd:	e9 65 ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012602:	6a 25                	push   0x25
c0012604:	e8 92 fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012609:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001260c:	50                   	push   eax
c001260d:	e8 89 fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012612:	5a                   	pop    edx
c0012613:	59                   	pop    ecx
c0012614:	e9 4e ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012619:	50                   	push   eax
c001261a:	89 eb                	mov    ebx,ebp
c001261c:	e8 7a fe ff ff       	call   c001249b <Dbg::logc(char)>
c0012621:	89 fd                	mov    ebp,edi
c0012623:	58                   	pop    eax
c0012624:	e9 3e ff ff ff       	jmp    c0012567 <Dbg::kprintf(char const*, ...)+0x5c>
c0012629:	90                   	nop

c001262a <File::read(unsigned long long, void*, int*)>:
c001262a:	53                   	push   ebx
c001262b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001262f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012633:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001263a:	3c 19                	cmp    al,0x19
c001263c:	77 35                	ja     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c001263e:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c0012645:	85 c0                	test   eax,eax
c0012647:	74 2a                	je     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c0012649:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001264f:	85 c0                	test   eax,eax
c0012651:	74 20                	je     c0012673 <File::read(unsigned long long, void*, int*)+0x49>
c0012653:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012657:	74 21                	je     c001267a <File::read(unsigned long long, void*, int*)+0x50>
c0012659:	8b 08                	mov    ecx,DWORD PTR [eax]
c001265b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001265f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012669:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001266d:	5b                   	pop    ebx
c001266e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012671:	ff e0                	jmp    eax
c0012673:	b8 0b 00 00 00       	mov    eax,0xb
c0012678:	eb 05                	jmp    c001267f <File::read(unsigned long long, void*, int*)+0x55>
c001267a:	b8 05 00 00 00       	mov    eax,0x5
c001267f:	5b                   	pop    ebx
c0012680:	c3                   	ret    
c0012681:	90                   	nop

c0012682 <File::write(unsigned long long, void*, int*)>:
c0012682:	53                   	push   ebx
c0012683:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012687:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001268b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012692:	3c 19                	cmp    al,0x19
c0012694:	77 35                	ja     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c0012696:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c001269d:	85 c0                	test   eax,eax
c001269f:	74 2a                	je     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c00126a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126a7:	85 c0                	test   eax,eax
c00126a9:	74 20                	je     c00126cb <File::write(unsigned long long, void*, int*)+0x49>
c00126ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126af:	74 21                	je     c00126d2 <File::write(unsigned long long, void*, int*)+0x50>
c00126b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126b7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00126bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126c5:	5b                   	pop    ebx
c00126c6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00126c9:	ff e0                	jmp    eax
c00126cb:	b8 0b 00 00 00       	mov    eax,0xb
c00126d0:	eb 05                	jmp    c00126d7 <File::write(unsigned long long, void*, int*)+0x55>
c00126d2:	b8 05 00 00 00       	mov    eax,0x5
c00126d7:	5b                   	pop    ebx
c00126d8:	c3                   	ret    
c00126d9:	90                   	nop

c00126da <Directory::read(unsigned long long, void*, int*)>:
c00126da:	53                   	push   ebx
c00126db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126e3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126ea:	3c 19                	cmp    al,0x19
c00126ec:	77 35                	ja     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c00126ee:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00126f5:	85 c0                	test   eax,eax
c00126f7:	74 2a                	je     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c00126f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126ff:	85 c0                	test   eax,eax
c0012701:	74 20                	je     c0012723 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012703:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012707:	74 21                	je     c001272a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012709:	8b 08                	mov    ecx,DWORD PTR [eax]
c001270b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001270f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012719:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001271d:	5b                   	pop    ebx
c001271e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012721:	ff e0                	jmp    eax
c0012723:	b8 0b 00 00 00       	mov    eax,0xb
c0012728:	eb 05                	jmp    c001272f <Directory::read(unsigned long long, void*, int*)+0x55>
c001272a:	b8 05 00 00 00       	mov    eax,0x5
c001272f:	5b                   	pop    ebx
c0012730:	c3                   	ret    
c0012731:	90                   	nop

c0012732 <Directory::write(unsigned long long, void*, int*)>:
c0012732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012736:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001273d:	b8 0b 00 00 00       	mov    eax,0xb
c0012742:	80 fa 19             	cmp    dl,0x19
c0012745:	77 18                	ja     c001275f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012747:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c001274e:	85 d2                	test   edx,edx
c0012750:	74 0d                	je     c001275f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012752:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012759:	19 c0                	sbb    eax,eax
c001275b:	83 e0 0a             	and    eax,0xa
c001275e:	40                   	inc    eax
c001275f:	c3                   	ret    

c0012760 <File::isAtty()>:
c0012760:	31 c0                	xor    eax,eax
c0012762:	c3                   	ret    
c0012763:	90                   	nop

c0012764 <Directory::isAtty()>:
c0012764:	31 c0                	xor    eax,eax
c0012766:	c3                   	ret    
c0012767:	90                   	nop

c0012768 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012768:	b8 0a 00 00 00       	mov    eax,0xa
c001276d:	c3                   	ret    

c001276e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001276e:	b8 0a 00 00 00       	mov    eax,0xa
c0012773:	c3                   	ret    

c0012774 <Filesystem::getFileFirstSector(char const*)>:
c0012774:	31 c0                	xor    eax,eax
c0012776:	31 d2                	xor    edx,edx
c0012778:	c3                   	ret    
c0012779:	90                   	nop

c001277a <File::~File()>:
c001277a:	83 ec 0c             	sub    esp,0xc
c001277d:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c0012782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012786:	89 10                	mov    DWORD PTR [eax],edx
c0012788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	50                   	push   eax
c0012790:	e8 ab e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c0012795:	83 c4 10             	add    esp,0x10
c0012798:	90                   	nop
c0012799:	83 c4 0c             	add    esp,0xc
c001279c:	c3                   	ret    
c001279d:	90                   	nop

c001279e <File::~File()>:
c001279e:	83 ec 0c             	sub    esp,0xc
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127a8:	e8 cd ff ff ff       	call   c001277a <File::~File()>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	83 ec 08             	sub    esp,0x8
c00127b3:	68 14 01 00 00       	push   0x114
c00127b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127bc:	e8 72 fc ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	83 c4 0c             	add    esp,0xc
c00127c7:	c3                   	ret    

c00127c8 <Directory::~Directory()>:
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	ba 38 a5 02 c0       	mov    edx,0xc002a538
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	89 10                	mov    DWORD PTR [eax],edx
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	83 ec 0c             	sub    esp,0xc
c00127dd:	50                   	push   eax
c00127de:	e8 5d e7 ff ff       	call   c0010f40 <UnixFile::~UnixFile()>
c00127e3:	83 c4 10             	add    esp,0x10
c00127e6:	90                   	nop
c00127e7:	83 c4 0c             	add    esp,0xc
c00127ea:	c3                   	ret    
c00127eb:	90                   	nop

c00127ec <Directory::~Directory()>:
c00127ec:	83 ec 0c             	sub    esp,0xc
c00127ef:	83 ec 0c             	sub    esp,0xc
c00127f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127f6:	e8 cd ff ff ff       	call   c00127c8 <Directory::~Directory()>
c00127fb:	83 c4 10             	add    esp,0x10
c00127fe:	83 ec 08             	sub    esp,0x8
c0012801:	68 14 01 00 00       	push   0x114
c0012806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001280a:	e8 24 fc ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001280f:	83 c4 10             	add    esp,0x10
c0012812:	83 c4 0c             	add    esp,0xc
c0012815:	c3                   	ret    

c0012816 <Filesystem::Filesystem()>:
c0012816:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c001281b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281f:	89 10                	mov    DWORD PTR [eax],edx
c0012821:	8b 15 14 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d714
c0012827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001282b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001282e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012832:	a3 14 d7 02 c0       	mov    ds:0xc002d714,eax
c0012837:	90                   	nop
c0012838:	c3                   	ret    
c0012839:	90                   	nop

c001283a <Filesystem::~Filesystem()>:
c001283a:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c001283f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012843:	89 10                	mov    DWORD PTR [eax],edx
c0012845:	90                   	nop
c0012846:	c3                   	ret    
c0012847:	90                   	nop

c0012848 <Filesystem::~Filesystem()>:
c0012848:	83 ec 0c             	sub    esp,0xc
c001284b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001284f:	e8 e6 ff ff ff       	call   c001283a <Filesystem::~Filesystem()>
c0012854:	83 c4 04             	add    esp,0x4
c0012857:	83 ec 08             	sub    esp,0x8
c001285a:	6a 08                	push   0x8
c001285c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012860:	e8 ce fb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	83 c4 0c             	add    esp,0xc
c001286b:	c3                   	ret    

c001286c <Fs::getcwd(Process*, char*, int)>:
c001286c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012870:	31 c0                	xor    eax,eax
c0012872:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012875:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012879:	7d 15                	jge    c0012890 <Fs::getcwd(Process*, char*, int)+0x24>
c001287b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001287f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012886:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012889:	84 c9                	test   cl,cl
c001288b:	74 06                	je     c0012893 <Fs::getcwd(Process*, char*, int)+0x27>
c001288d:	40                   	inc    eax
c001288e:	eb e2                	jmp    c0012872 <Fs::getcwd(Process*, char*, int)+0x6>
c0012890:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012893:	31 c0                	xor    eax,eax
c0012895:	c3                   	ret    

c0012896 <Fs::initVFS()>:
c0012896:	83 ec 18             	sub    esp,0x18
c0012899:	6a 08                	push   0x8
c001289b:	e8 fc cc ff ff       	call   c000f59c <malloc>
c00128a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00128a3:	e8 c2 de 00 00       	call   c002076a <FAT::FAT()>
c00128a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00128af:	e8 e8 cc ff ff       	call   c000f59c <malloc>
c00128b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00128b7:	e8 ba f0 00 00       	call   c0021976 <ISO9660::ISO9660()>
c00128bc:	83 c4 1c             	add    esp,0x1c
c00128bf:	c3                   	ret    

c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00128c0:	55                   	push   ebp
c00128c1:	57                   	push   edi
c00128c2:	56                   	push   esi
c00128c3:	53                   	push   ebx
c00128c4:	81 ec 10 04 00 00    	sub    esp,0x410
c00128ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00128d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00128d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00128df:	68 00 04 00 00       	push   0x400
c00128e4:	6a 00                	push   0x0
c00128e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ea:	56                   	push   esi
c00128eb:	e8 60 de fe ff       	call   c0000750 <memset>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00128f7:	75 0b                	jne    c0012904 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00128f9:	50                   	push   eax
c00128fa:	50                   	push   eax
c00128fb:	57                   	push   edi
c00128fc:	56                   	push   esi
c00128fd:	e8 0a df fe ff       	call   c000080c <strcpy>
c0012902:	eb 41                	jmp    c0012945 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012904:	8a 07                	mov    al,BYTE PTR [edi]
c0012906:	3c 5c                	cmp    al,0x5c
c0012908:	74 04                	je     c001290e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001290a:	3c 2f                	cmp    al,0x2f
c001290c:	75 18                	jne    c0012926 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001290e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012911:	3c 60                	cmp    al,0x60
c0012913:	7e 03                	jle    c0012918 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012915:	83 e8 20             	sub    eax,0x20
c0012918:	88 04 24             	mov    BYTE PTR [esp],al
c001291b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012922:	50                   	push   eax
c0012923:	50                   	push   eax
c0012924:	eb 18                	jmp    c001293e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012926:	50                   	push   eax
c0012927:	50                   	push   eax
c0012928:	55                   	push   ebp
c0012929:	56                   	push   esi
c001292a:	e8 dd de fe ff       	call   c000080c <strcpy>
c001292f:	5a                   	pop    edx
c0012930:	59                   	pop    ecx
c0012931:	68 a2 b7 02 c0       	push   0xc002b7a2
c0012936:	56                   	push   esi
c0012937:	e8 10 e0 fe ff       	call   c000094c <strcat>
c001293c:	5d                   	pop    ebp
c001293d:	58                   	pop    eax
c001293e:	57                   	push   edi
c001293f:	56                   	push   esi
c0012940:	e8 07 e0 fe ff       	call   c000094c <strcat>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	8a 04 24             	mov    al,BYTE PTR [esp]
c001294b:	3c 60                	cmp    al,0x60
c001294d:	7e 03                	jle    c0012952 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001294f:	83 e8 20             	sub    eax,0x20
c0012952:	88 04 24             	mov    BYTE PTR [esp],al
c0012955:	88 03                	mov    BYTE PTR [ebx],al
c0012957:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001295e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012964:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012968:	bf 03 00 00 00       	mov    edi,0x3
c001296d:	b8 03 00 00 00       	mov    eax,0x3
c0012972:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012975:	84 d2                	test   dl,dl
c0012977:	0f 84 91 00 00 00    	je     c0012a0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001297d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012980:	80 fa 5c             	cmp    dl,0x5c
c0012983:	74 05                	je     c001298a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012985:	80 fa 2f             	cmp    dl,0x2f
c0012988:	75 12                	jne    c001299c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001298a:	89 c5                	mov    ebp,eax
c001298c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012991:	74 09                	je     c001299c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012993:	40                   	inc    eax
c0012994:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012998:	89 cf                	mov    edi,ecx
c001299a:	eb d6                	jmp    c0012972 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001299c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00129a1:	75 5b                	jne    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129a3:	80 fa 2e             	cmp    dl,0x2e
c00129a6:	75 56                	jne    c00129fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00129ac:	74 19                	je     c00129c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00129ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129b3:	74 53                	je     c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129b5:	89 f9                	mov    ecx,edi
c00129b7:	41                   	inc    ecx
c00129b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129bb:	80 fa 2f             	cmp    dl,0x2f
c00129be:	74 f7                	je     c00129b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129c0:	80 fa 5c             	cmp    dl,0x5c
c00129c3:	74 f2                	je     c00129b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129c5:	eb d1                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129cc:	74 3a                	je     c0012a08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129ce:	83 f8 03             	cmp    eax,0x3
c00129d1:	74 c5                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129d3:	41                   	inc    ecx
c00129d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129d7:	80 fa 2f             	cmp    dl,0x2f
c00129da:	74 f7                	je     c00129d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129dc:	80 fa 5c             	cmp    dl,0x5c
c00129df:	74 f2                	je     c00129d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00129e1:	48                   	dec    eax
c00129e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129e6:	75 06                	jne    c00129ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00129e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00129ec:	eb f3                	jmp    c00129e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00129ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129f2:	74 07                	je     c00129fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00129f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00129f8:	48                   	dec    eax
c00129f9:	eb f3                	jmp    c00129ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00129fb:	40                   	inc    eax
c00129fc:	eb 9a                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129fe:	80 fa 2f             	cmp    dl,0x2f
c0012a01:	74 95                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a03:	80 fa 5c             	cmp    dl,0x5c
c0012a06:	74 90                	je     c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a08:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012a0b:	40                   	inc    eax
c0012a0c:	eb 8a                	jmp    c0012998 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a12:	83 ec 0c             	sub    esp,0xc
c0012a15:	53                   	push   ebx
c0012a16:	e8 51 dd fe ff       	call   c000076c <strlen>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012a23:	75 26                	jne    c0012a4b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012a25:	83 ec 0c             	sub    esp,0xc
c0012a28:	53                   	push   ebx
c0012a29:	e8 3e dd fe ff       	call   c000076c <strlen>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012a36:	74 26                	je     c0012a5e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	53                   	push   ebx
c0012a3c:	e8 2b dd fe ff       	call   c000076c <strlen>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012a49:	eb c7                	jmp    c0012a12 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012a4b:	83 ec 0c             	sub    esp,0xc
c0012a4e:	53                   	push   ebx
c0012a4f:	e8 18 dd fe ff       	call   c000076c <strlen>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a5c:	74 c7                	je     c0012a25 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012a5e:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012a64:	5b                   	pop    ebx
c0012a65:	5e                   	pop    esi
c0012a66:	5f                   	pop    edi
c0012a67:	5d                   	pop    ebp
c0012a68:	c3                   	ret    
c0012a69:	90                   	nop

c0012a6a <File::File(char const*, Process*)>:
c0012a6a:	83 ec 0c             	sub    esp,0xc
c0012a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a71:	83 ec 08             	sub    esp,0x8
c0012a74:	6a 00                	push   0x0
c0012a76:	50                   	push   eax
c0012a77:	e8 e2 e2 ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012a7c:	83 c4 10             	add    esp,0x10
c0012a7f:	ba 1c a5 02 c0       	mov    edx,0xc002a51c
c0012a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a88:	89 10                	mov    DWORD PTR [eax],edx
c0012a8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a98:	83 c0 0d             	add    eax,0xd
c0012a9b:	83 ec 04             	sub    esp,0x4
c0012a9e:	52                   	push   edx
c0012a9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aa3:	50                   	push   eax
c0012aa4:	e8 17 fe ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012aa9:	83 c4 10             	add    esp,0x10
c0012aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ab3:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ac8:	90                   	nop
c0012ac9:	83 c4 0c             	add    esp,0xc
c0012acc:	c3                   	ret    
c0012acd:	90                   	nop

c0012ace <File::open(FileOpenMode)>:
c0012ace:	53                   	push   ebx
c0012acf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ad4:	83 ec 08             	sub    esp,0x8
c0012ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012adb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ae2:	80 fa 19             	cmp    dl,0x19
c0012ae5:	77 40                	ja     c0012b27 <File::open(FileOpenMode)+0x59>
c0012ae7:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012aee:	85 d2                	test   edx,edx
c0012af0:	74 35                	je     c0012b27 <File::open(FileOpenMode)+0x59>
c0012af2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012af8:	85 d2                	test   edx,edx
c0012afa:	74 2b                	je     c0012b27 <File::open(FileOpenMode)+0x59>
c0012afc:	b8 06 00 00 00       	mov    eax,0x6
c0012b01:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b05:	75 20                	jne    c0012b27 <File::open(FileOpenMode)+0x59>
c0012b07:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b09:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b13:	51                   	push   ecx
c0012b14:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b17:	51                   	push   ecx
c0012b18:	52                   	push   edx
c0012b19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012b1c:	83 c4 10             	add    esp,0x10
c0012b1f:	85 c0                	test   eax,eax
c0012b21:	75 04                	jne    c0012b27 <File::open(FileOpenMode)+0x59>
c0012b23:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b27:	83 c4 08             	add    esp,0x8
c0012b2a:	5b                   	pop    ebx
c0012b2b:	c3                   	ret    

c0012b2c <File::close()>:
c0012b2c:	53                   	push   ebx
c0012b2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b32:	83 ec 08             	sub    esp,0x8
c0012b35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b39:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b40:	80 fa 19             	cmp    dl,0x19
c0012b43:	77 41                	ja     c0012b86 <File::close()+0x5a>
c0012b45:	8b 1c 95 a0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2460]
c0012b4c:	85 db                	test   ebx,ebx
c0012b4e:	74 36                	je     c0012b86 <File::close()+0x5a>
c0012b50:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b57:	74 2d                	je     c0012b86 <File::close()+0x5a>
c0012b59:	b8 05 00 00 00       	mov    eax,0x5
c0012b5e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b62:	74 22                	je     c0012b86 <File::close()+0x5a>
c0012b64:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b68:	8b 04 95 a0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2460]
c0012b6f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b75:	53                   	push   ebx
c0012b76:	53                   	push   ebx
c0012b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b79:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012b7f:	50                   	push   eax
c0012b80:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	83 c4 08             	add    esp,0x8
c0012b89:	5b                   	pop    ebx
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <File::seek(unsigned long long)>:
c0012b8c:	56                   	push   esi
c0012b8d:	53                   	push   ebx
c0012b8e:	b8 0b 00 00 00       	mov    eax,0xb
c0012b93:	51                   	push   ecx
c0012b94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012b9c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012ba3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ba7:	80 fa 19             	cmp    dl,0x19
c0012baa:	77 31                	ja     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bac:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012bb3:	85 d2                	test   edx,edx
c0012bb5:	74 26                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bb7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bbd:	85 d2                	test   edx,edx
c0012bbf:	74 1c                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bc1:	b8 05 00 00 00       	mov    eax,0x5
c0012bc6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012bca:	74 11                	je     c0012bdd <File::seek(unsigned long long)+0x51>
c0012bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bce:	53                   	push   ebx
c0012bcf:	51                   	push   ecx
c0012bd0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012bd6:	52                   	push   edx
c0012bd7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	5a                   	pop    edx
c0012bde:	5b                   	pop    ebx
c0012bdf:	5e                   	pop    esi
c0012be0:	c3                   	ret    
c0012be1:	90                   	nop

c0012be2 <File::tell(unsigned long long*)>:
c0012be2:	83 ec 0c             	sub    esp,0xc
c0012be5:	b8 0b 00 00 00       	mov    eax,0xb
c0012bea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012bee:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012bf5:	80 fa 19             	cmp    dl,0x19
c0012bf8:	77 34                	ja     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012bfa:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012c01:	85 d2                	test   edx,edx
c0012c03:	74 29                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c05:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c0b:	85 d2                	test   edx,edx
c0012c0d:	74 1f                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c0f:	b8 05 00 00 00       	mov    eax,0x5
c0012c14:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c18:	74 14                	je     c0012c2e <File::tell(unsigned long long*)+0x4c>
c0012c1a:	50                   	push   eax
c0012c1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c27:	52                   	push   edx
c0012c28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012c2b:	83 c4 10             	add    esp,0x10
c0012c2e:	83 c4 0c             	add    esp,0xc
c0012c31:	c3                   	ret    

c0012c32 <File::rewind()>:
c0012c32:	83 ec 10             	sub    esp,0x10
c0012c35:	6a 00                	push   0x0
c0012c37:	6a 00                	push   0x0
c0012c39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c3d:	e8 4a ff ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c0012c42:	83 c4 1c             	add    esp,0x1c
c0012c45:	c3                   	ret    

c0012c46 <File::unlink()>:
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	b8 0b 00 00 00       	mov    eax,0xb
c0012c4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c59:	80 f9 19             	cmp    cl,0x19
c0012c5c:	77 2f                	ja     c0012c8d <File::unlink()+0x47>
c0012c5e:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012c65:	85 c9                	test   ecx,ecx
c0012c67:	74 24                	je     c0012c8d <File::unlink()+0x47>
c0012c69:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c6f:	85 c9                	test   ecx,ecx
c0012c71:	74 1a                	je     c0012c8d <File::unlink()+0x47>
c0012c73:	b8 06 00 00 00       	mov    eax,0x6
c0012c78:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c7c:	75 0f                	jne    c0012c8d <File::unlink()+0x47>
c0012c7e:	83 c2 0d             	add    edx,0xd
c0012c81:	50                   	push   eax
c0012c82:	50                   	push   eax
c0012c83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c85:	52                   	push   edx
c0012c86:	51                   	push   ecx
c0012c87:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012c8a:	83 c4 10             	add    esp,0x10
c0012c8d:	83 c4 0c             	add    esp,0xc
c0012c90:	c3                   	ret    
c0012c91:	90                   	nop

c0012c92 <File::rename(char const*)>:
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	b8 0b 00 00 00       	mov    eax,0xb
c0012c9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ca5:	80 f9 19             	cmp    cl,0x19
c0012ca8:	77 32                	ja     c0012cdc <File::rename(char const*)+0x4a>
c0012caa:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012cb1:	85 c9                	test   ecx,ecx
c0012cb3:	74 27                	je     c0012cdc <File::rename(char const*)+0x4a>
c0012cb5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012cbb:	85 c9                	test   ecx,ecx
c0012cbd:	74 1d                	je     c0012cdc <File::rename(char const*)+0x4a>
c0012cbf:	b8 06 00 00 00       	mov    eax,0x6
c0012cc4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cc8:	75 12                	jne    c0012cdc <File::rename(char const*)+0x4a>
c0012cca:	83 c2 0d             	add    edx,0xd
c0012ccd:	50                   	push   eax
c0012cce:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cd4:	52                   	push   edx
c0012cd5:	51                   	push   ecx
c0012cd6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	83 c4 0c             	add    esp,0xc
c0012cdf:	c3                   	ret    

c0012ce0 <File::chfatattr(unsigned char, unsigned char)>:
c0012ce0:	57                   	push   edi
c0012ce1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce6:	56                   	push   esi
c0012ce7:	53                   	push   ebx
c0012ce8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012cf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012cf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012cfb:	80 f9 19             	cmp    cl,0x19
c0012cfe:	77 37                	ja     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d00:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012d07:	85 c9                	test   ecx,ecx
c0012d09:	74 2c                	je     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d0b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d11:	85 c9                	test   ecx,ecx
c0012d13:	74 22                	je     c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d15:	b8 06 00 00 00       	mov    eax,0x6
c0012d1a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d1e:	75 17                	jne    c0012d37 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d20:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012d22:	89 f0                	mov    eax,esi
c0012d24:	83 c2 0d             	add    edx,0xd
c0012d27:	0f b6 f0             	movzx  esi,al
c0012d2a:	0f b6 db             	movzx  ebx,bl
c0012d2d:	56                   	push   esi
c0012d2e:	53                   	push   ebx
c0012d2f:	52                   	push   edx
c0012d30:	51                   	push   ecx
c0012d31:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	5b                   	pop    ebx
c0012d38:	5e                   	pop    esi
c0012d39:	5f                   	pop    edi
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <File::exists()>:
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	31 c0                	xor    eax,eax
c0012d41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d45:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d4c:	80 f9 19             	cmp    cl,0x19
c0012d4f:	77 24                	ja     c0012d75 <File::exists()+0x39>
c0012d51:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012d58:	85 c9                	test   ecx,ecx
c0012d5a:	74 19                	je     c0012d75 <File::exists()+0x39>
c0012d5c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d62:	85 c9                	test   ecx,ecx
c0012d64:	74 0f                	je     c0012d75 <File::exists()+0x39>
c0012d66:	83 c2 0d             	add    edx,0xd
c0012d69:	50                   	push   eax
c0012d6a:	50                   	push   eax
c0012d6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d6d:	52                   	push   edx
c0012d6e:	51                   	push   ecx
c0012d6f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012d72:	83 c4 10             	add    esp,0x10
c0012d75:	83 c4 0c             	add    esp,0xc
c0012d78:	c3                   	ret    
c0012d79:	90                   	nop

c0012d7a <File::stat(unsigned long long*, bool*)>:
c0012d7a:	56                   	push   esi
c0012d7b:	53                   	push   ebx
c0012d7c:	50                   	push   eax
c0012d7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d86:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d8a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d95:	80 f9 19             	cmp    cl,0x19
c0012d98:	77 3d                	ja     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012d9a:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0012da1:	85 c9                	test   ecx,ecx
c0012da3:	74 32                	je     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012da5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dab:	85 c9                	test   ecx,ecx
c0012dad:	74 28                	je     c0012dd7 <File::stat(unsigned long long*, bool*)+0x5d>
c0012daf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012db1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012db5:	74 13                	je     c0012dca <File::stat(unsigned long long*, bool*)+0x50>
c0012db7:	83 ec 04             	sub    esp,0x4
c0012dba:	56                   	push   esi
c0012dbb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012dc1:	51                   	push   ecx
c0012dc2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012dc5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012dc8:	eb 0a                	jmp    c0012dd4 <File::stat(unsigned long long*, bool*)+0x5a>
c0012dca:	53                   	push   ebx
c0012dcb:	83 c2 0d             	add    edx,0xd
c0012dce:	56                   	push   esi
c0012dcf:	52                   	push   edx
c0012dd0:	51                   	push   ecx
c0012dd1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	5a                   	pop    edx
c0012dd8:	5b                   	pop    ebx
c0012dd9:	5e                   	pop    esi
c0012dda:	c3                   	ret    

c0012ddb <Fs::setcwd(Process*, char*)>:
c0012ddb:	55                   	push   ebp
c0012ddc:	57                   	push   edi
c0012ddd:	56                   	push   esi
c0012dde:	53                   	push   ebx
c0012ddf:	81 ec 20 02 00 00    	sub    esp,0x220
c0012de5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012dec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012df2:	57                   	push   edi
c0012df3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012dfa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012dfe:	56                   	push   esi
c0012dff:	e8 bc fa ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e04:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e07:	e8 60 d9 fe ff       	call   c000076c <strlen>
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	83 f8 02             	cmp    eax,0x2
c0012e12:	77 17                	ja     c0012e2b <Fs::setcwd(Process*, char*)+0x50>
c0012e14:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012e19:	83 e8 41             	sub    eax,0x41
c0012e1c:	83 f8 19             	cmp    eax,0x19
c0012e1f:	76 24                	jbe    c0012e45 <Fs::setcwd(Process*, char*)+0x6a>
c0012e21:	b8 03 00 00 00       	mov    eax,0x3
c0012e26:	e9 e0 00 00 00       	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e2b:	83 ec 0c             	sub    esp,0xc
c0012e2e:	56                   	push   esi
c0012e2f:	e8 38 d9 fe ff       	call   c000076c <strlen>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	83 f8 03             	cmp    eax,0x3
c0012e3a:	75 34                	jne    c0012e70 <Fs::setcwd(Process*, char*)+0x95>
c0012e3c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012e41:	75 2d                	jne    c0012e70 <Fs::setcwd(Process*, char*)+0x95>
c0012e43:	eb cf                	jmp    c0012e14 <Fs::setcwd(Process*, char*)+0x39>
c0012e45:	8b 14 85 a0 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2460]
c0012e4c:	b8 05 00 00 00       	mov    eax,0x5
c0012e51:	85 d2                	test   edx,edx
c0012e53:	0f 84 b2 00 00 00    	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e59:	b8 06 00 00 00       	mov    eax,0x6
c0012e5e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e65:	0f 85 92 00 00 00    	jne    c0012efd <Fs::setcwd(Process*, char*)+0x122>
c0012e6b:	e9 9b 00 00 00       	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012e70:	83 ec 0c             	sub    esp,0xc
c0012e73:	68 14 01 00 00       	push   0x114
c0012e78:	e8 1f c7 ff ff       	call   c000f59c <malloc>
c0012e7d:	83 c4 0c             	add    esp,0xc
c0012e80:	89 c3                	mov    ebx,eax
c0012e82:	55                   	push   ebp
c0012e83:	56                   	push   esi
c0012e84:	50                   	push   eax
c0012e85:	e8 e0 fb ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0012e8a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012e8f:	83 c4 0c             	add    esp,0xc
c0012e92:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012e96:	50                   	push   eax
c0012e97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e9b:	50                   	push   eax
c0012e9c:	53                   	push   ebx
c0012e9d:	e8 d8 fe ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	83 f8 02             	cmp    eax,0x2
c0012ea8:	74 04                	je     c0012eae <Fs::setcwd(Process*, char*)+0xd3>
c0012eaa:	85 c0                	test   eax,eax
c0012eac:	74 1c                	je     c0012eca <Fs::setcwd(Process*, char*)+0xef>
c0012eae:	b8 01 00 00 00       	mov    eax,0x1
c0012eb3:	85 db                	test   ebx,ebx
c0012eb5:	74 54                	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eb7:	83 ec 0c             	sub    esp,0xc
c0012eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ebc:	53                   	push   ebx
c0012ebd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ec0:	83 c4 10             	add    esp,0x10
c0012ec3:	b8 01 00 00 00       	mov    eax,0x1
c0012ec8:	eb 41                	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eca:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ecf:	75 1c                	jne    c0012eed <Fs::setcwd(Process*, char*)+0x112>
c0012ed1:	b8 02 00 00 00       	mov    eax,0x2
c0012ed6:	85 db                	test   ebx,ebx
c0012ed8:	74 31                	je     c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eda:	83 ec 0c             	sub    esp,0xc
c0012edd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012edf:	53                   	push   ebx
c0012ee0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	b8 02 00 00 00       	mov    eax,0x2
c0012eeb:	eb 1e                	jmp    c0012f0b <Fs::setcwd(Process*, char*)+0x130>
c0012eed:	85 db                	test   ebx,ebx
c0012eef:	74 0c                	je     c0012efd <Fs::setcwd(Process*, char*)+0x122>
c0012ef1:	83 ec 0c             	sub    esp,0xc
c0012ef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ef6:	53                   	push   ebx
c0012ef7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012efa:	83 c4 10             	add    esp,0x10
c0012efd:	50                   	push   eax
c0012efe:	50                   	push   eax
c0012eff:	56                   	push   esi
c0012f00:	57                   	push   edi
c0012f01:	e8 06 d9 fe ff       	call   c000080c <strcpy>
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	31 c0                	xor    eax,eax
c0012f0b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012f11:	5b                   	pop    ebx
c0012f12:	5e                   	pop    esi
c0012f13:	5f                   	pop    edi
c0012f14:	5d                   	pop    ebp
c0012f15:	c3                   	ret    

c0012f16 <Directory::Directory(char const*, Process*)>:
c0012f16:	83 ec 0c             	sub    esp,0xc
c0012f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1d:	83 ec 08             	sub    esp,0x8
c0012f20:	6a 00                	push   0x0
c0012f22:	50                   	push   eax
c0012f23:	e8 36 de ff ff       	call   c0010d5e <UnixFile::UnixFile(int)>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	ba 38 a5 02 c0       	mov    edx,0xc002a538
c0012f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f34:	89 10                	mov    DWORD PTR [eax],edx
c0012f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f44:	83 c0 0d             	add    eax,0xd
c0012f47:	83 ec 04             	sub    esp,0x4
c0012f4a:	52                   	push   edx
c0012f4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4f:	50                   	push   eax
c0012f50:	e8 6b f9 ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f5f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f66:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f70:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f74:	90                   	nop
c0012f75:	83 c4 0c             	add    esp,0xc
c0012f78:	c3                   	ret    
c0012f79:	90                   	nop

c0012f7a <Directory::open()>:
c0012f7a:	53                   	push   ebx
c0012f7b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f80:	83 ec 08             	sub    esp,0x8
c0012f83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012f87:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012f8e:	80 fa 19             	cmp    dl,0x19
c0012f91:	77 3d                	ja     c0012fd0 <Directory::open()+0x56>
c0012f93:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c0012f9a:	85 d2                	test   edx,edx
c0012f9c:	74 32                	je     c0012fd0 <Directory::open()+0x56>
c0012f9e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fa4:	85 d2                	test   edx,edx
c0012fa6:	74 28                	je     c0012fd0 <Directory::open()+0x56>
c0012fa8:	b8 06 00 00 00       	mov    eax,0x6
c0012fad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fb1:	75 1d                	jne    c0012fd0 <Directory::open()+0x56>
c0012fb3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fb9:	50                   	push   eax
c0012fba:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fbc:	51                   	push   ecx
c0012fbd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fc0:	51                   	push   ecx
c0012fc1:	52                   	push   edx
c0012fc2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	85 c0                	test   eax,eax
c0012fca:	75 04                	jne    c0012fd0 <Directory::open()+0x56>
c0012fcc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012fd0:	83 c4 08             	add    esp,0x8
c0012fd3:	5b                   	pop    ebx
c0012fd4:	c3                   	ret    
c0012fd5:	90                   	nop

c0012fd6 <Directory::close()>:
c0012fd6:	53                   	push   ebx
c0012fd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fe3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fea:	80 fa 19             	cmp    dl,0x19
c0012fed:	77 41                	ja     c0013030 <Directory::close()+0x5a>
c0012fef:	8b 1c 95 a0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2460]
c0012ff6:	85 db                	test   ebx,ebx
c0012ff8:	74 36                	je     c0013030 <Directory::close()+0x5a>
c0012ffa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013001:	74 2d                	je     c0013030 <Directory::close()+0x5a>
c0013003:	b8 05 00 00 00       	mov    eax,0x5
c0013008:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001300c:	74 22                	je     c0013030 <Directory::close()+0x5a>
c001300e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013012:	8b 04 95 a0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2460]
c0013019:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001301f:	53                   	push   ebx
c0013020:	53                   	push   ebx
c0013021:	8b 10                	mov    edx,DWORD PTR [eax]
c0013023:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013029:	50                   	push   eax
c001302a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	83 c4 08             	add    esp,0x8
c0013033:	5b                   	pop    ebx
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <Directory::unlink()>:
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	b8 0b 00 00 00       	mov    eax,0xb
c001303e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013042:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013049:	80 f9 19             	cmp    cl,0x19
c001304c:	77 2f                	ja     c001307d <Directory::unlink()+0x47>
c001304e:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0013055:	85 c9                	test   ecx,ecx
c0013057:	74 24                	je     c001307d <Directory::unlink()+0x47>
c0013059:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001305f:	85 c9                	test   ecx,ecx
c0013061:	74 1a                	je     c001307d <Directory::unlink()+0x47>
c0013063:	b8 06 00 00 00       	mov    eax,0x6
c0013068:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001306c:	75 0f                	jne    c001307d <Directory::unlink()+0x47>
c001306e:	83 c2 0d             	add    edx,0xd
c0013071:	50                   	push   eax
c0013072:	50                   	push   eax
c0013073:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013075:	52                   	push   edx
c0013076:	51                   	push   ecx
c0013077:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001307a:	83 c4 10             	add    esp,0x10
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	c3                   	ret    
c0013081:	90                   	nop

c0013082 <Directory::rename(char const*)>:
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	b8 0b 00 00 00       	mov    eax,0xb
c001308a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001308e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013095:	80 f9 19             	cmp    cl,0x19
c0013098:	77 32                	ja     c00130cc <Directory::rename(char const*)+0x4a>
c001309a:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c00130a1:	85 c9                	test   ecx,ecx
c00130a3:	74 27                	je     c00130cc <Directory::rename(char const*)+0x4a>
c00130a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130ab:	85 c9                	test   ecx,ecx
c00130ad:	74 1d                	je     c00130cc <Directory::rename(char const*)+0x4a>
c00130af:	b8 06 00 00 00       	mov    eax,0x6
c00130b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b8:	75 12                	jne    c00130cc <Directory::rename(char const*)+0x4a>
c00130ba:	83 c2 0d             	add    edx,0xd
c00130bd:	50                   	push   eax
c00130be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130c4:	52                   	push   edx
c00130c5:	51                   	push   ecx
c00130c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130c9:	83 c4 10             	add    esp,0x10
c00130cc:	83 c4 0c             	add    esp,0xc
c00130cf:	c3                   	ret    

c00130d0 <Directory::exists()>:
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	31 c0                	xor    eax,eax
c00130d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130e0:	80 f9 19             	cmp    cl,0x19
c00130e3:	77 24                	ja     c0013109 <Directory::exists()+0x39>
c00130e5:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c00130ec:	85 c9                	test   ecx,ecx
c00130ee:	74 19                	je     c0013109 <Directory::exists()+0x39>
c00130f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130f6:	85 c9                	test   ecx,ecx
c00130f8:	74 0f                	je     c0013109 <Directory::exists()+0x39>
c00130fa:	83 c2 0d             	add    edx,0xd
c00130fd:	50                   	push   eax
c00130fe:	50                   	push   eax
c00130ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013101:	52                   	push   edx
c0013102:	51                   	push   ecx
c0013103:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013106:	83 c4 10             	add    esp,0x10
c0013109:	83 c4 0c             	add    esp,0xc
c001310c:	c3                   	ret    
c001310d:	90                   	nop

c001310e <Directory::read(dirent*)>:
c001310e:	83 ec 1c             	sub    esp,0x1c
c0013111:	b8 0b 00 00 00       	mov    eax,0xb
c0013116:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001311a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013121:	80 fa 19             	cmp    dl,0x19
c0013124:	77 30                	ja     c0013156 <Directory::read(dirent*)+0x48>
c0013126:	8b 14 95 a0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2460]
c001312d:	85 d2                	test   edx,edx
c001312f:	74 25                	je     c0013156 <Directory::read(dirent*)+0x48>
c0013131:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013138:	74 1c                	je     c0013156 <Directory::read(dirent*)+0x48>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001313f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013143:	52                   	push   edx
c0013144:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013148:	6a 00                	push   0x0
c001314a:	68 10 01 00 00       	push   0x110
c001314f:	51                   	push   ecx
c0013150:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013153:	83 c4 20             	add    esp,0x20
c0013156:	83 c4 1c             	add    esp,0x1c
c0013159:	c3                   	ret    

c001315a <Directory::create()>:
c001315a:	83 ec 0c             	sub    esp,0xc
c001315d:	b8 0b 00 00 00       	mov    eax,0xb
c0013162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013166:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001316d:	80 f9 19             	cmp    cl,0x19
c0013170:	77 2f                	ja     c00131a1 <Directory::create()+0x47>
c0013172:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c0013179:	85 c9                	test   ecx,ecx
c001317b:	74 24                	je     c00131a1 <Directory::create()+0x47>
c001317d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013183:	85 c9                	test   ecx,ecx
c0013185:	74 1a                	je     c00131a1 <Directory::create()+0x47>
c0013187:	b8 06 00 00 00       	mov    eax,0x6
c001318c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013190:	75 0f                	jne    c00131a1 <Directory::create()+0x47>
c0013192:	83 c2 0d             	add    edx,0xd
c0013195:	50                   	push   eax
c0013196:	50                   	push   eax
c0013197:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013199:	52                   	push   edx
c001319a:	51                   	push   ecx
c001319b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	83 c4 0c             	add    esp,0xc
c00131a4:	c3                   	ret    
c00131a5:	90                   	nop

c00131a6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00131a6:	b8 0a 00 00 00       	mov    eax,0xa
c00131ab:	c3                   	ret    

c00131ac <Bus::Bus(char const*)>:
c00131ac:	83 ec 0c             	sub    esp,0xc
c00131af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b3:	83 ec 08             	sub    esp,0x8
c00131b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ba:	50                   	push   eax
c00131bb:	e8 88 09 00 00       	call   c0013b48 <Device::Device(char const*)>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c00131c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cc:	89 10                	mov    DWORD PTR [eax],edx
c00131ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00131dc:	90                   	nop
c00131dd:	83 c4 0c             	add    esp,0xc
c00131e0:	c3                   	ret    
c00131e1:	90                   	nop

c00131e2 <Bus::~Bus()>:
c00131e2:	83 ec 0c             	sub    esp,0xc
c00131e5:	ba 54 a5 02 c0       	mov    edx,0xc002a554
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	89 10                	mov    DWORD PTR [eax],edx
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	50                   	push   eax
c00131f8:	e8 15 06 00 00       	call   c0013812 <Device::~Device()>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	90                   	nop
c0013201:	83 c4 0c             	add    esp,0xc
c0013204:	c3                   	ret    
c0013205:	90                   	nop

c0013206 <Bus::~Bus()>:
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	83 ec 0c             	sub    esp,0xc
c001320c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013210:	e8 cd ff ff ff       	call   c00131e2 <Bus::~Bus()>
c0013215:	83 c4 10             	add    esp,0x10
c0013218:	83 ec 08             	sub    esp,0x8
c001321b:	68 58 01 00 00       	push   0x158
c0013220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013224:	e8 0a f2 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013229:	83 c4 10             	add    esp,0x10
c001322c:	83 c4 0c             	add    esp,0xc
c001322f:	c3                   	ret    

c0013230 <Buzzer::Buzzer(char const*)>:
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013237:	83 ec 08             	sub    esp,0x8
c001323a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323e:	50                   	push   eax
c001323f:	e8 04 09 00 00       	call   c0013b48 <Device::Device(char const*)>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	ba 80 a5 02 c0       	mov    edx,0xc002a580
c001324c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013250:	89 10                	mov    DWORD PTR [eax],edx
c0013252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013256:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001326e:	90                   	nop
c001326f:	83 c4 0c             	add    esp,0xc
c0013272:	c3                   	ret    
c0013273:	90                   	nop

c0013274 <Buzzer::~Buzzer()>:
c0013274:	83 ec 0c             	sub    esp,0xc
c0013277:	ba 80 a5 02 c0       	mov    edx,0xc002a580
c001327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013280:	89 10                	mov    DWORD PTR [eax],edx
c0013282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	50                   	push   eax
c001328a:	e8 83 05 00 00       	call   c0013812 <Device::~Device()>
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	90                   	nop
c0013293:	83 c4 0c             	add    esp,0xc
c0013296:	c3                   	ret    
c0013297:	90                   	nop

c0013298 <Buzzer::~Buzzer()>:
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	83 ec 0c             	sub    esp,0xc
c001329e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a2:	e8 cd ff ff ff       	call   c0013274 <Buzzer::~Buzzer()>
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	83 ec 08             	sub    esp,0x8
c00132ad:	68 5c 01 00 00       	push   0x15c
c00132b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b6:	e8 78 f1 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	83 c4 0c             	add    esp,0xc
c00132c1:	c3                   	ret    

c00132c2 <Buzzer::stop()>:
c00132c2:	83 ec 14             	sub    esp,0x14
c00132c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132cb:	6a 00                	push   0x0
c00132cd:	50                   	push   eax
c00132ce:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132d1:	83 c4 1c             	add    esp,0x1c
c00132d4:	c3                   	ret    

c00132d5 <beepThread(void*)>:
c00132d5:	53                   	push   ebx
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00132de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132e2:	48                   	dec    eax
c00132e3:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00132e8:	75 01                	jne    c00132eb <beepThread(void*)+0x16>
c00132ea:	fb                   	sti    
c00132eb:	50                   	push   eax
c00132ec:	50                   	push   eax
c00132ed:	b8 40 42 0f 00       	mov    eax,0xf4240
c00132f2:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00132f8:	52                   	push   edx
c00132f9:	50                   	push   eax
c00132fa:	e8 d2 a7 00 00       	call   c001dad1 <nanoSleep(unsigned long long)>
c00132ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013302:	e8 bb ff ff ff       	call   c00132c2 <Buzzer::stop()>
c0013307:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001330f:	83 c4 18             	add    esp,0x18
c0013312:	5b                   	pop    ebx
c0013313:	e9 b5 a6 00 00       	jmp    c001d9cd <blockTask(TaskState)>

c0013318 <Buzzer::beep(int, int, bool)>:
c0013318:	57                   	push   edi
c0013319:	56                   	push   esi
c001331a:	53                   	push   ebx
c001331b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001331f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013323:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013327:	52                   	push   edx
c0013328:	52                   	push   edx
c0013329:	8b 06                	mov    eax,DWORD PTR [esi]
c001332b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001332f:	56                   	push   esi
c0013330:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013333:	83 c4 10             	add    esp,0x10
c0013336:	89 f8                	mov    eax,edi
c0013338:	84 c0                	test   al,al
c001333a:	74 1f                	je     c001335b <Buzzer::beep(int, int, bool)+0x43>
c001333c:	50                   	push   eax
c001333d:	50                   	push   eax
c001333e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013344:	99                   	cdq    
c0013345:	52                   	push   edx
c0013346:	50                   	push   eax
c0013347:	e8 85 a7 00 00       	call   c001dad1 <nanoSleep(unsigned long long)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013353:	5b                   	pop    ebx
c0013354:	5e                   	pop    esi
c0013355:	5f                   	pop    edi
c0013356:	e9 67 ff ff ff       	jmp    c00132c2 <Buzzer::stop()>
c001335b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013361:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0013366:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001336e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013372:	c7 44 24 14 d5 32 01 c0 	mov    DWORD PTR [esp+0x14],0xc00132d5
c001337a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001337e:	5b                   	pop    ebx
c001337f:	5e                   	pop    esi
c0013380:	5f                   	pop    edi
c0013381:	e9 4c a2 00 00       	jmp    c001d5d2 <Process::createThread(void (*)(void*), void*, int)>

c0013386 <User::loadClockSettings(int)>:
c0013386:	53                   	push   ebx
c0013387:	83 ec 14             	sub    esp,0x14
c001338a:	68 14 01 00 00       	push   0x114
c001338f:	e8 08 c2 ff ff       	call   c000f59c <malloc>
c0013394:	83 c4 0c             	add    esp,0xc
c0013397:	89 c3                	mov    ebx,eax
c0013399:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001339f:	68 a8 a5 02 c0       	push   0xc002a5a8
c00133a4:	50                   	push   eax
c00133a5:	e8 c0 f6 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c00133aa:	58                   	pop    eax
c00133ab:	5a                   	pop    edx
c00133ac:	6a 01                	push   0x1
c00133ae:	53                   	push   ebx
c00133af:	e8 1a f7 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c00133b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133b7:	e8 70 f7 ff ff       	call   c0012b2c <File::close()>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	85 db                	test   ebx,ebx
c00133c1:	74 0f                	je     c00133d2 <User::loadClockSettings(int)+0x4c>
c00133c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00133c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00133cc:	83 c4 08             	add    esp,0x8
c00133cf:	5b                   	pop    ebx
c00133d0:	ff e0                	jmp    eax
c00133d2:	83 c4 08             	add    esp,0x8
c00133d5:	5b                   	pop    ebx
c00133d6:	c3                   	ret    
c00133d7:	90                   	nop

c00133d8 <Clock::Clock(char const*)>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133df:	83 ec 08             	sub    esp,0x8
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	50                   	push   eax
c00133e7:	e8 5c 07 00 00       	call   c0013b48 <Device::Device(char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	89 10                	mov    DWORD PTR [eax],edx
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013408:	90                   	nop
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Clock::~Clock()>:
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	ba d0 a5 02 c0       	mov    edx,0xc002a5d0
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	89 10                	mov    DWORD PTR [eax],edx
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	50                   	push   eax
c0013424:	e8 e9 03 00 00       	call   c0013812 <Device::~Device()>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	90                   	nop
c001342d:	83 c4 0c             	add    esp,0xc
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <Clock::~Clock()>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	83 ec 0c             	sub    esp,0xc
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 cd ff ff ff       	call   c001340e <Clock::~Clock()>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 ec 08             	sub    esp,0x8
c0013447:	68 58 01 00 00       	push   0x158
c001344c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013450:	e8 de ef ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 c4 0c             	add    esp,0xc
c001345b:	c3                   	ret    

c001345c <Clock::timeInSecondsLocal()>:
c001345c:	53                   	push   ebx
c001345d:	83 ec 14             	sub    esp,0x14
c0013460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013464:	8b 10                	mov    edx,DWORD PTR [eax]
c0013466:	50                   	push   eax
c0013467:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001346a:	0f b6 0d 1c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d71c
c0013471:	03 0d 20 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d720
c0013477:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001347d:	89 cb                	mov    ebx,ecx
c001347f:	c1 fb 1f             	sar    ebx,0x1f
c0013482:	01 c8                	add    eax,ecx
c0013484:	11 da                	adc    edx,ebx
c0013486:	83 c4 10             	add    esp,0x10
c0013489:	31 c9                	xor    ecx,ecx
c001348b:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c0013492:	74 05                	je     c0013499 <Clock::timeInSecondsLocal()+0x3d>
c0013494:	b9 08 07 00 00       	mov    ecx,0x708
c0013499:	31 db                	xor    ebx,ebx
c001349b:	01 c8                	add    eax,ecx
c001349d:	11 da                	adc    edx,ebx
c001349f:	83 c4 08             	add    esp,0x8
c00134a2:	5b                   	pop    ebx
c00134a3:	c3                   	ret    

c00134a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00134a4:	57                   	push   edi
c00134a5:	56                   	push   esi
c00134a6:	53                   	push   ebx
c00134a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00134af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00134b5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00134b8:	0f b6 05 1c d7 02 c0 	movzx  eax,BYTE PTR ds:0xc002d71c
c00134bf:	03 05 20 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d720
c00134c5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00134cb:	99                   	cdq    
c00134cc:	29 c6                	sub    esi,eax
c00134ce:	19 d7                	sbb    edi,edx
c00134d0:	89 f0                	mov    eax,esi
c00134d2:	89 fa                	mov    edx,edi
c00134d4:	31 f6                	xor    esi,esi
c00134d6:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c00134dd:	74 05                	je     c00134e4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00134df:	be 08 07 00 00       	mov    esi,0x708
c00134e4:	31 ff                	xor    edi,edi
c00134e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00134ea:	29 f0                	sub    eax,esi
c00134ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134f0:	19 fa                	sbb    edx,edi
c00134f2:	89 d8                	mov    eax,ebx
c00134f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00134f8:	5b                   	pop    ebx
c00134f9:	5e                   	pop    esi
c00134fa:	5f                   	pop    edi
c00134fb:	ff e0                	jmp    eax

c00134fd <datetimeToSeconds(datetime_t)>:
c00134fd:	55                   	push   ebp
c00134fe:	57                   	push   edi
c00134ff:	56                   	push   esi
c0013500:	53                   	push   ebx
c0013501:	83 ec 14             	sub    esp,0x14
c0013504:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013508:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001350c:	89 d3                	mov    ebx,edx
c001350e:	0f b6 c6             	movzx  eax,dh
c0013511:	c1 eb 10             	shr    ebx,0x10
c0013514:	48                   	dec    eax
c0013515:	66 81 eb 6c 07       	sub    bx,0x76c
c001351a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001351e:	0f b6 f5             	movzx  esi,ch
c0013521:	89 cf                	mov    edi,ecx
c0013523:	6b f6 3c             	imul   esi,esi,0x3c
c0013526:	c1 ef 10             	shr    edi,0x10
c0013529:	0f b6 c9             	movzx  ecx,cl
c001352c:	89 f8                	mov    eax,edi
c001352e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013534:	0f b6 f8             	movzx  edi,al
c0013537:	0f b6 d2             	movzx  edx,dl
c001353a:	01 fe                	add    esi,edi
c001353c:	01 f1                	add    ecx,esi
c001353e:	0f b7 f3             	movzx  esi,bx
c0013541:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013545:	c1 f9 1f             	sar    ecx,0x1f
c0013548:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001354d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013551:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013556:	8b 0c 8d 20 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd59e0]
c001355d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013561:	76 29                	jbe    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c0013563:	f6 c3 03             	test   bl,0x3
c0013566:	75 24                	jne    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c0013568:	31 d2                	xor    edx,edx
c001356a:	bf 64 00 00 00       	mov    edi,0x64
c001356f:	89 d8                	mov    eax,ebx
c0013571:	66 f7 f7             	div    di
c0013574:	66 85 d2             	test   dx,dx
c0013577:	75 12                	jne    c001358b <datetimeToSeconds(datetime_t)+0x8e>
c0013579:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001357f:	bf 90 01 00 00       	mov    edi,0x190
c0013584:	99                   	cdq    
c0013585:	f7 ff                	idiv   edi
c0013587:	85 d2                	test   edx,edx
c0013589:	75 01                	jne    c001358c <datetimeToSeconds(datetime_t)+0x8f>
c001358b:	41                   	inc    ecx
c001358c:	66 83 fb 46          	cmp    bx,0x46
c0013590:	76 45                	jbe    c00135d7 <datetimeToSeconds(datetime_t)+0xda>
c0013592:	bb 46 00 00 00       	mov    ebx,0x46
c0013597:	bf 64 00 00 00       	mov    edi,0x64
c001359c:	bd 90 01 00 00       	mov    ebp,0x190
c00135a1:	b8 6d 01 00 00       	mov    eax,0x16d
c00135a6:	f6 c3 03             	test   bl,0x3
c00135a9:	75 23                	jne    c00135ce <datetimeToSeconds(datetime_t)+0xd1>
c00135ab:	89 d8                	mov    eax,ebx
c00135ad:	99                   	cdq    
c00135ae:	f7 ff                	idiv   edi
c00135b0:	b8 6e 01 00 00       	mov    eax,0x16e
c00135b5:	85 d2                	test   edx,edx
c00135b7:	75 15                	jne    c00135ce <datetimeToSeconds(datetime_t)+0xd1>
c00135b9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00135bf:	99                   	cdq    
c00135c0:	f7 fd                	idiv   ebp
c00135c2:	83 fa 01             	cmp    edx,0x1
c00135c5:	19 c0                	sbb    eax,eax
c00135c7:	f7 d0                	not    eax
c00135c9:	05 6e 01 00 00       	add    eax,0x16e
c00135ce:	01 c1                	add    ecx,eax
c00135d0:	43                   	inc    ebx
c00135d1:	39 f3                	cmp    ebx,esi
c00135d3:	7c cc                	jl     c00135a1 <datetimeToSeconds(datetime_t)+0xa4>
c00135d5:	eb 35                	jmp    c001360c <datetimeToSeconds(datetime_t)+0x10f>
c00135d7:	74 33                	je     c001360c <datetimeToSeconds(datetime_t)+0x10f>
c00135d9:	b8 45 00 00 00       	mov    eax,0x45
c00135de:	89 c2                	mov    edx,eax
c00135e0:	83 e2 03             	and    edx,0x3
c00135e3:	39 f0                	cmp    eax,esi
c00135e5:	7e 0f                	jle    c00135f6 <datetimeToSeconds(datetime_t)+0xf9>
c00135e7:	83 fa 01             	cmp    edx,0x1
c00135ea:	19 d2                	sbb    edx,edx
c00135ec:	48                   	dec    eax
c00135ed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00135f4:	eb e8                	jmp    c00135de <datetimeToSeconds(datetime_t)+0xe1>
c00135f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00135fb:	85 d2                	test   edx,edx
c00135fd:	75 0b                	jne    c001360a <datetimeToSeconds(datetime_t)+0x10d>
c00135ff:	66 83 fb 01          	cmp    bx,0x1
c0013603:	19 c0                	sbb    eax,eax
c0013605:	05 6e 01 00 00       	add    eax,0x16e
c001360a:	29 c1                	sub    ecx,eax
c001360c:	b8 80 51 01 00       	mov    eax,0x15180
c0013611:	f7 e9                	imul   ecx
c0013613:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013617:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001361b:	83 c4 14             	add    esp,0x14
c001361e:	5b                   	pop    ebx
c001361f:	5e                   	pop    esi
c0013620:	5f                   	pop    edi
c0013621:	5d                   	pop    ebp
c0013622:	c3                   	ret    
c0013623:	90                   	nop

c0013624 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013624:	57                   	push   edi
c0013625:	56                   	push   esi
c0013626:	53                   	push   ebx
c0013627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001362b:	8b 06                	mov    eax,DWORD PTR [esi]
c001362d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013630:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013638:	e8 c0 fe ff ff       	call   c00134fd <datetimeToSeconds(datetime_t)>
c001363d:	59                   	pop    ecx
c001363e:	0f b6 0d 1c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d71c
c0013645:	5b                   	pop    ebx
c0013646:	03 0d 20 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d720
c001364c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013652:	89 cb                	mov    ebx,ecx
c0013654:	c1 fb 1f             	sar    ebx,0x1f
c0013657:	29 c8                	sub    eax,ecx
c0013659:	19 da                	sbb    edx,ebx
c001365b:	31 c9                	xor    ecx,ecx
c001365d:	80 3d 1d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d71d,0x0
c0013664:	74 05                	je     c001366b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013666:	b9 08 07 00 00       	mov    ecx,0x708
c001366b:	31 db                	xor    ebx,ebx
c001366d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013671:	29 c8                	sub    eax,ecx
c0013673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013677:	19 da                	sbb    edx,ebx
c0013679:	89 f8                	mov    eax,edi
c001367b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001367f:	5b                   	pop    ebx
c0013680:	5e                   	pop    esi
c0013681:	5f                   	pop    edi
c0013682:	ff e0                	jmp    eax

c0013684 <secondsToDatetime(unsigned long long)>:
c0013684:	55                   	push   ebp
c0013685:	57                   	push   edi
c0013686:	56                   	push   esi
c0013687:	53                   	push   ebx
c0013688:	83 ec 1c             	sub    esp,0x1c
c001368b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001368f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013693:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013697:	6a 00                	push   0x0
c0013699:	68 80 51 01 00       	push   0x15180
c001369e:	55                   	push   ebp
c001369f:	57                   	push   edi
c00136a0:	e8 9f 2e 01 00       	call   c0026544 <__udivdi3>
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00136ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136b2:	6a 00                	push   0x0
c00136b4:	68 80 51 01 00       	push   0x15180
c00136b9:	55                   	push   ebp
c00136ba:	57                   	push   edi
c00136bb:	bf 10 0e 00 00       	mov    edi,0xe10
c00136c0:	e8 7f 2f 01 00       	call   c0026644 <__umoddi3>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	99                   	cdq    
c00136c9:	f7 ff                	idiv   edi
c00136cb:	bf 3c 00 00 00       	mov    edi,0x3c
c00136d0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00136d3:	89 d0                	mov    eax,edx
c00136d5:	99                   	cdq    
c00136d6:	f7 ff                	idiv   edi
c00136d8:	85 db                	test   ebx,ebx
c00136da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00136dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00136e0:	79 11                	jns    c00136f3 <secondsToDatetime(unsigned long long)+0x6f>
c00136e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00136e6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00136ec:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00136f1:	eb 07                	jmp    c00136fa <secondsToDatetime(unsigned long long)+0x76>
c00136f3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00136f8:	89 d8                	mov    eax,ebx
c00136fa:	bf b4 05 00 00       	mov    edi,0x5b4
c00136ff:	99                   	cdq    
c0013700:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013705:	f7 f9                	idiv   ecx
c0013707:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001370c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013710:	31 d2                	xor    edx,edx
c0013712:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001371a:	01 c3                	add    ebx,eax
c001371c:	89 d8                	mov    eax,ebx
c001371e:	f7 f1                	div    ecx
c0013720:	31 d2                	xor    edx,edx
c0013722:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013725:	89 d8                	mov    eax,ebx
c0013727:	f7 f7                	div    edi
c0013729:	31 d2                	xor    edx,edx
c001372b:	29 c1                	sub    ecx,eax
c001372d:	89 d8                	mov    eax,ebx
c001372f:	f7 f5                	div    ebp
c0013731:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013736:	29 c1                	sub    ecx,eax
c0013738:	31 d2                	xor    edx,edx
c001373a:	89 c8                	mov    eax,ecx
c001373c:	f7 f5                	div    ebp
c001373e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013747:	31 d2                	xor    edx,edx
c0013749:	89 c8                	mov    eax,ecx
c001374b:	f7 f5                	div    ebp
c001374d:	31 d2                	xor    edx,edx
c001374f:	01 c3                	add    ebx,eax
c0013751:	89 c8                	mov    eax,ecx
c0013753:	f7 f7                	div    edi
c0013755:	bf 99 00 00 00       	mov    edi,0x99
c001375a:	29 c3                	sub    ebx,eax
c001375c:	31 d2                	xor    edx,edx
c001375e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013766:	29 c3                	sub    ebx,eax
c0013768:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001376b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001376e:	bb 05 00 00 00       	mov    ebx,0x5
c0013773:	83 c1 02             	add    ecx,0x2
c0013776:	89 c8                	mov    eax,ecx
c0013778:	f7 f7                	div    edi
c001377a:	31 d2                	xor    edx,edx
c001377c:	89 c7                	mov    edi,eax
c001377e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013784:	83 c0 02             	add    eax,0x2
c0013787:	f7 f3                	div    ebx
c0013789:	89 eb                	mov    ebx,ebp
c001378b:	29 c3                	sub    ebx,eax
c001378d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013793:	88 1e                	mov    BYTE PTR [esi],bl
c0013795:	19 c0                	sbb    eax,eax
c0013797:	31 d2                	xor    edx,edx
c0013799:	83 e0 0c             	and    eax,0xc
c001379c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00137a0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00137a8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00137ac:	83 f9 01             	cmp    ecx,0x1
c00137af:	0f 96 c2             	setbe  dl
c00137b2:	41                   	inc    ecx
c00137b3:	01 d0                	add    eax,edx
c00137b5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00137b8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00137bc:	83 c4 1c             	add    esp,0x1c
c00137bf:	89 f0                	mov    eax,esi
c00137c1:	5b                   	pop    ebx
c00137c2:	5e                   	pop    esi
c00137c3:	5f                   	pop    edi
c00137c4:	5d                   	pop    ebp
c00137c5:	c2 04 00             	ret    0x4

c00137c8 <Clock::timeInDatetimeLocal()>:
c00137c8:	53                   	push   ebx
c00137c9:	83 ec 14             	sub    esp,0x14
c00137cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137d4:	e8 83 fc ff ff       	call   c001345c <Clock::timeInSecondsLocal()>
c00137d9:	83 c4 0c             	add    esp,0xc
c00137dc:	52                   	push   edx
c00137dd:	50                   	push   eax
c00137de:	53                   	push   ebx
c00137df:	e8 a0 fe ff ff       	call   c0013684 <secondsToDatetime(unsigned long long)>
c00137e4:	89 d8                	mov    eax,ebx
c00137e6:	83 c4 14             	add    esp,0x14
c00137e9:	5b                   	pop    ebx
c00137ea:	c2 04 00             	ret    0x4
c00137ed:	90                   	nop

c00137ee <Device::hibernate()>:
c00137ee:	c3                   	ret    
c00137ef:	90                   	nop

c00137f0 <Device::wake()>:
c00137f0:	c3                   	ret    
c00137f1:	90                   	nop

c00137f2 <Device::detect()>:
c00137f2:	c3                   	ret    
c00137f3:	90                   	nop

c00137f4 <Device::disableLegacy()>:
c00137f4:	c3                   	ret    
c00137f5:	90                   	nop

c00137f6 <Device::powerSaving(PowerSavingLevel)>:
c00137f6:	c3                   	ret    
c00137f7:	90                   	nop

c00137f8 <DriverlessDevice::close(int, int, void*)>:
c00137f8:	31 c0                	xor    eax,eax
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <DriverlessDevice::detect()>:
c00137fc:	c3                   	ret    
c00137fd:	90                   	nop

c00137fe <DriverlessDevice::open(int, int, void*)>:
c00137fe:	83 ec 18             	sub    esp,0x18
c0013801:	68 50 a6 02 c0       	push   0xc002a650
c0013806:	e8 60 64 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c001380b:	83 c8 ff             	or     eax,0xffffffff
c001380e:	83 c4 1c             	add    esp,0x1c
c0013811:	c3                   	ret    

c0013812 <Device::~Device()>:
c0013812:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0013817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381b:	89 10                	mov    DWORD PTR [eax],edx
c001381d:	90                   	nop
c001381e:	c3                   	ret    
c001381f:	90                   	nop

c0013820 <Device::~Device()>:
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013827:	e8 e6 ff ff ff       	call   c0013812 <Device::~Device()>
c001382c:	83 c4 04             	add    esp,0x4
c001382f:	83 ec 08             	sub    esp,0x8
c0013832:	68 58 01 00 00       	push   0x158
c0013837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383b:	e8 f3 eb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013840:	83 c4 10             	add    esp,0x10
c0013843:	83 c4 0c             	add    esp,0xc
c0013846:	c3                   	ret    
c0013847:	90                   	nop

c0013848 <Device::findAndLoadDriver()>:
c0013848:	c7 44 24 04 6e a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a66e
c0013850:	e9 b6 ec ff ff       	jmp    c001250b <Dbg::kprintf(char const*, ...)>
c0013855:	90                   	nop

c0013856 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013856:	57                   	push   edi
c0013857:	b9 09 00 00 00       	mov    ecx,0x9
c001385c:	56                   	push   esi
c001385d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013861:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013865:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001386f:	81 c7 18 01 00 00    	add    edi,0x118
c0013875:	fc                   	cld    
c0013876:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013878:	5e                   	pop    esi
c0013879:	5f                   	pop    edi
c001387a:	c3                   	ret    
c001387b:	90                   	nop

c001387c <Device::preOpenACPI(void*, char*, char*)>:
c001387c:	57                   	push   edi
c001387d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013882:	56                   	push   esi
c0013883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001388b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013895:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001389b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00138a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138a7:	b9 0e 00 00 00       	mov    ecx,0xe
c00138ac:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00138b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00138b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138b8:	5e                   	pop    esi
c00138b9:	5f                   	pop    edi
c00138ba:	c3                   	ret    
c00138bb:	90                   	nop

c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00138bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00138c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00138cc:	75 0b                	jne    c00138d9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00138ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00138d7:	eb 1e                	jmp    c00138f7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00138d9:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00138de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00138e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00138ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00138ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138f4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00138f7:	ff e0                	jmp    eax
c00138f9:	90                   	nop

c00138fa <Device::getParent()>:
c00138fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138fe:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013904:	c3                   	ret    
c0013905:	90                   	nop

c0013906 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001390a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001390f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013916:	75 0b                	jne    c0013923 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013918:	8b 00                	mov    eax,DWORD PTR [eax]
c001391a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001391e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013921:	eb 1e                	jmp    c0013941 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013923:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0013928:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001392e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013934:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013936:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001393a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001393e:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013941:	ff e0                	jmp    eax
c0013943:	90                   	nop

c0013944 <Device::addChild(Device*)>:
c0013944:	53                   	push   ebx
c0013945:	83 ec 08             	sub    esp,0x8
c0013948:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001394c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013950:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013956:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001395c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001395e:	85 d2                	test   edx,edx
c0013960:	74 04                	je     c0013966 <Device::addChild(Device*)+0x22>
c0013962:	89 d3                	mov    ebx,edx
c0013964:	eb f6                	jmp    c001395c <Device::addChild(Device*)+0x18>
c0013966:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013969:	83 ec 0c             	sub    esp,0xc
c001396c:	6a 08                	push   0x8
c001396e:	e8 29 bc ff ff       	call   c000f59c <malloc>
c0013973:	89 03                	mov    DWORD PTR [ebx],eax
c0013975:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001397b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013982:	83 c4 18             	add    esp,0x18
c0013985:	5b                   	pop    ebx
c0013986:	c3                   	ret    
c0013987:	90                   	nop

c0013988 <Device::removeAllChildren()>:
c0013988:	56                   	push   esi
c0013989:	53                   	push   ebx
c001398a:	52                   	push   edx
c001398b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001398f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013995:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013998:	74 17                	je     c00139b1 <Device::removeAllChildren()+0x29>
c001399a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001399d:	85 c0                	test   eax,eax
c001399f:	74 0c                	je     c00139ad <Device::removeAllChildren()+0x25>
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00139a6:	50                   	push   eax
c00139a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00139aa:	83 c4 10             	add    esp,0x10
c00139ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139af:	eb e4                	jmp    c0013995 <Device::removeAllChildren()+0xd>
c00139b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139bd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139ca:	58                   	pop    eax
c00139cb:	5b                   	pop    ebx
c00139cc:	5e                   	pop    esi
c00139cd:	c3                   	ret    

c00139ce <Device::hibernateAll()>:
c00139ce:	53                   	push   ebx
c00139cf:	83 ec 14             	sub    esp,0x14
c00139d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139d8:	53                   	push   ebx
c00139d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00139dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139e2:	83 c4 10             	add    esp,0x10
c00139e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139e8:	74 0f                	je     c00139f9 <Device::hibernateAll()+0x2b>
c00139ea:	83 ec 0c             	sub    esp,0xc
c00139ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139f0:	e8 d9 ff ff ff       	call   c00139ce <Device::hibernateAll()>
c00139f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139f7:	eb e9                	jmp    c00139e2 <Device::hibernateAll()+0x14>
c00139f9:	83 c4 08             	add    esp,0x8
c00139fc:	5b                   	pop    ebx
c00139fd:	c3                   	ret    

c00139fe <Device::wakeAll()>:
c00139fe:	53                   	push   ebx
c00139ff:	83 ec 14             	sub    esp,0x14
c0013a02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a08:	53                   	push   ebx
c0013a09:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013a0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a12:	83 c4 10             	add    esp,0x10
c0013a15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a18:	74 0f                	je     c0013a29 <Device::wakeAll()+0x2b>
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a20:	e8 d9 ff ff ff       	call   c00139fe <Device::wakeAll()>
c0013a25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a27:	eb e9                	jmp    c0013a12 <Device::wakeAll()+0x14>
c0013a29:	83 c4 08             	add    esp,0x8
c0013a2c:	5b                   	pop    ebx
c0013a2d:	c3                   	ret    

c0013a2e <Device::detectAll()>:
c0013a2e:	53                   	push   ebx
c0013a2f:	83 ec 14             	sub    esp,0x14
c0013a32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a38:	53                   	push   ebx
c0013a39:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013a3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a48:	74 0f                	je     c0013a59 <Device::detectAll()+0x2b>
c0013a4a:	83 ec 0c             	sub    esp,0xc
c0013a4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a50:	e8 d9 ff ff ff       	call   c0013a2e <Device::detectAll()>
c0013a55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a57:	eb e9                	jmp    c0013a42 <Device::detectAll()+0x14>
c0013a59:	83 c4 08             	add    esp,0x8
c0013a5c:	5b                   	pop    ebx
c0013a5d:	c3                   	ret    

c0013a5e <Device::disableLegacyAll()>:
c0013a5e:	53                   	push   ebx
c0013a5f:	83 ec 14             	sub    esp,0x14
c0013a62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a68:	53                   	push   ebx
c0013a69:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013a6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a72:	83 c4 10             	add    esp,0x10
c0013a75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a78:	74 0f                	je     c0013a89 <Device::disableLegacyAll()+0x2b>
c0013a7a:	83 ec 0c             	sub    esp,0xc
c0013a7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a80:	e8 d9 ff ff ff       	call   c0013a5e <Device::disableLegacyAll()>
c0013a85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a87:	eb e9                	jmp    c0013a72 <Device::disableLegacyAll()+0x14>
c0013a89:	83 c4 08             	add    esp,0x8
c0013a8c:	5b                   	pop    ebx
c0013a8d:	c3                   	ret    

c0013a8e <Device::loadDriversForAll()>:
c0013a8e:	53                   	push   ebx
c0013a8f:	83 ec 08             	sub    esp,0x8
c0013a92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a96:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013a9d:	75 0c                	jne    c0013aab <Device::loadDriversForAll()+0x1d>
c0013a9f:	83 ec 0c             	sub    esp,0xc
c0013aa2:	53                   	push   ebx
c0013aa3:	e8 a0 fd ff ff       	call   c0013848 <Device::findAndLoadDriver()>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ab1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ab4:	74 12                	je     c0013ac8 <Device::loadDriversForAll()+0x3a>
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013abc:	e8 cd ff ff ff       	call   c0013a8e <Device::loadDriversForAll()>
c0013ac1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	eb e9                	jmp    c0013ab1 <Device::loadDriversForAll()+0x23>
c0013ac8:	83 c4 08             	add    esp,0x8
c0013acb:	5b                   	pop    ebx
c0013acc:	c3                   	ret    
c0013acd:	90                   	nop

c0013ace <Device::closeAll()>:
c0013ace:	53                   	push   ebx
c0013acf:	83 ec 08             	sub    esp,0x8
c0013ad2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ad8:	6a 00                	push   0x0
c0013ada:	6a 00                	push   0x0
c0013adc:	6a 00                	push   0x0
c0013ade:	53                   	push   ebx
c0013adf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ae2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aee:	74 0f                	je     c0013aff <Device::closeAll()+0x31>
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013af6:	e8 d3 ff ff ff       	call   c0013ace <Device::closeAll()>
c0013afb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013afd:	eb e9                	jmp    c0013ae8 <Device::closeAll()+0x1a>
c0013aff:	83 c4 08             	add    esp,0x8
c0013b02:	5b                   	pop    ebx
c0013b03:	c3                   	ret    

c0013b04 <Device::powerSavingAll(PowerSavingLevel)>:
c0013b04:	56                   	push   esi
c0013b05:	53                   	push   ebx
c0013b06:	83 ec 0c             	sub    esp,0xc
c0013b09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b0d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b13:	56                   	push   esi
c0013b14:	53                   	push   ebx
c0013b15:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013b18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b24:	74 0f                	je     c0013b35 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013b26:	52                   	push   edx
c0013b27:	52                   	push   edx
c0013b28:	56                   	push   esi
c0013b29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b2c:	e8 d3 ff ff ff       	call   c0013b04 <Device::powerSavingAll(PowerSavingLevel)>
c0013b31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b33:	eb e9                	jmp    c0013b1e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013b35:	58                   	pop    eax
c0013b36:	5b                   	pop    ebx
c0013b37:	5e                   	pop    esi
c0013b38:	c3                   	ret    
c0013b39:	90                   	nop

c0013b3a <Device::setName(char const*)>:
c0013b3a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013b42:	e9 c5 cc fe ff       	jmp    c000080c <strcpy>
c0013b47:	90                   	nop

c0013b48 <Device::Device(char const*)>:
c0013b48:	83 ec 1c             	sub    esp,0x1c
c0013b4b:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0013b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b54:	89 10                	mov    DWORD PTR [eax],edx
c0013b56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b5a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b68:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b76:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b84:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013b8e:	83 ec 08             	sub    esp,0x8
c0013b91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b99:	e8 9c ff ff ff       	call   c0013b3a <Device::setName(char const*)>
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ba9:	83 ec 0c             	sub    esp,0xc
c0013bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bb0:	e8 e7 b9 ff ff       	call   c000f59c <malloc>
c0013bb5:	83 c4 10             	add    esp,0x10
c0013bb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bc5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bc9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bd3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013be9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c18:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c26:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c34:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013c3e:	90                   	nop
c0013c3f:	83 c4 1c             	add    esp,0x1c
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop

c0013c44 <Device::getName()>:
c0013c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c48:	05 d0 00 00 00       	add    eax,0xd0
c0013c4d:	c3                   	ret    

c0013c4e <DriverlessDevice::DriverlessDevice(char const*)>:
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c55:	83 ec 08             	sub    esp,0x8
c0013c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c5c:	50                   	push   eax
c0013c5d:	e8 e6 fe ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	ba dc a6 02 c0       	mov    edx,0xc002a6dc
c0013c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c6e:	89 10                	mov    DWORD PTR [eax],edx
c0013c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c74:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013c7e:	90                   	nop
c0013c7f:	83 c4 0c             	add    esp,0xc
c0013c82:	c3                   	ret    
c0013c83:	90                   	nop

c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	53                   	push   ebx
c0013c87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c93:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013c99:	75 0c                	jne    c0013ca7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013c9b:	52                   	push   edx
c0013c9c:	52                   	push   edx
c0013c9d:	53                   	push   ebx
c0013c9e:	56                   	push   esi
c0013c9f:	e8 dc 47 01 00       	call   c0028480 <LinkedList<Device>::addElement(Device*)>
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb0:	74 12                	je     c0013cc4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013cb2:	50                   	push   eax
c0013cb3:	57                   	push   edi
c0013cb4:	56                   	push   esi
c0013cb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cb8:	e8 c7 ff ff ff       	call   c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013cbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	eb e9                	jmp    c0013cad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013cc4:	5b                   	pop    ebx
c0013cc5:	5e                   	pop    esi
c0013cc6:	5f                   	pop    edi
c0013cc7:	c3                   	ret    

c0013cc8 <getDevicesOfType(DeviceType)>:
c0013cc8:	53                   	push   ebx
c0013cc9:	83 ec 14             	sub    esp,0x14
c0013ccc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cd0:	53                   	push   ebx
c0013cd1:	e8 86 48 01 00       	call   c002855c <LinkedList<Device>::LinkedList()>
c0013cd6:	83 c4 0c             	add    esp,0xc
c0013cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cdd:	53                   	push   ebx
c0013cde:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c0013ce4:	e8 9b ff ff ff       	call   c0013c84 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ce9:	89 d8                	mov    eax,ebx
c0013ceb:	83 c4 18             	add    esp,0x18
c0013cee:	5b                   	pop    ebx
c0013cef:	c2 04 00             	ret    0x4

c0013cf2 <HardDiskController::HardDiskController(char const*)>:
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d00:	50                   	push   eax
c0013d01:	e8 42 fe ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0013d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d12:	89 10                	mov    DWORD PTR [eax],edx
c0013d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d18:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013d22:	90                   	nop
c0013d23:	83 c4 0c             	add    esp,0xc
c0013d26:	c3                   	ret    
c0013d27:	90                   	nop

c0013d28 <HardDiskController::~HardDiskController()>:
c0013d28:	83 ec 0c             	sub    esp,0xc
c0013d2b:	ba 08 a7 02 c0       	mov    edx,0xc002a708
c0013d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d34:	89 10                	mov    DWORD PTR [eax],edx
c0013d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	50                   	push   eax
c0013d3e:	e8 cf fa ff ff       	call   c0013812 <Device::~Device()>
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	90                   	nop
c0013d47:	83 c4 0c             	add    esp,0xc
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <HardDiskController::~HardDiskController()>:
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	83 ec 0c             	sub    esp,0xc
c0013d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d56:	e8 cd ff ff ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c0013d5b:	83 c4 10             	add    esp,0x10
c0013d5e:	83 ec 08             	sub    esp,0x8
c0013d61:	68 58 01 00 00       	push   0x158
c0013d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6a:	e8 c4 e6 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013d6f:	83 c4 10             	add    esp,0x10
c0013d72:	83 c4 0c             	add    esp,0xc
c0013d75:	c3                   	ret    

c0013d76 <PhysicalDisk::eject()>:
c0013d76:	83 c8 ff             	or     eax,0xffffffff
c0013d79:	c3                   	ret    

c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013d7a:	83 ec 0c             	sub    esp,0xc
c0013d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d81:	83 ec 08             	sub    esp,0x8
c0013d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d88:	50                   	push   eax
c0013d89:	e8 ba fd ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c0013d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9a:	89 10                	mov    DWORD PTR [eax],edx
c0013d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dc8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ddc:	90                   	nop
c0013ddd:	83 c4 0c             	add    esp,0xc
c0013de0:	c3                   	ret    
c0013de1:	90                   	nop

c0013de2 <PhysicalDisk::startCache()>:
c0013de2:	56                   	push   esi
c0013de3:	53                   	push   ebx
c0013de4:	83 ec 10             	sub    esp,0x10
c0013de7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013deb:	6a 44                	push   0x44
c0013ded:	e8 aa b7 ff ff       	call   c000f59c <malloc>
c0013df2:	89 c6                	mov    esi,eax
c0013df4:	58                   	pop    eax
c0013df5:	5a                   	pop    edx
c0013df6:	53                   	push   ebx
c0013df7:	56                   	push   esi
c0013df8:	e8 65 28 00 00       	call   c0016662 <VCache::VCache(PhysicalDisk*)>
c0013dfd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013e03:	83 c4 14             	add    esp,0x14
c0013e06:	5b                   	pop    ebx
c0013e07:	5e                   	pop    esi
c0013e08:	c3                   	ret    
c0013e09:	90                   	nop

c0013e0a <PhysicalDisk::~PhysicalDisk()>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	ba 34 a7 02 c0       	mov    edx,0xc002a734
c0013e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e16:	89 10                	mov    DWORD PTR [eax],edx
c0013e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	50                   	push   eax
c0013e20:	e8 ed f9 ff ff       	call   c0013812 <Device::~Device()>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	90                   	nop
c0013e29:	83 c4 0c             	add    esp,0xc
c0013e2c:	c3                   	ret    
c0013e2d:	90                   	nop

c0013e2e <PhysicalDisk::~PhysicalDisk()>:
c0013e2e:	83 ec 0c             	sub    esp,0xc
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e38:	e8 cd ff ff ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	83 ec 08             	sub    esp,0x8
c0013e43:	68 6c 01 00 00       	push   0x16c
c0013e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4c:	e8 e2 e5 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	83 c4 0c             	add    esp,0xc
c0013e57:	c3                   	ret    

c0013e58 <FPU::FPU(char const*)>:
c0013e58:	83 ec 0c             	sub    esp,0xc
c0013e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5f:	83 ec 08             	sub    esp,0x8
c0013e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e66:	50                   	push   eax
c0013e67:	e8 dc fc ff ff       	call   c0013b48 <Device::Device(char const*)>
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	ba 78 a7 02 c0       	mov    edx,0xc002a778
c0013e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e78:	89 10                	mov    DWORD PTR [eax],edx
c0013e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013e88:	90                   	nop
c0013e89:	83 c4 0c             	add    esp,0xc
c0013e8c:	c3                   	ret    
c0013e8d:	90                   	nop

c0013e8e <FPU::~FPU()>:
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	ba 78 a7 02 c0       	mov    edx,0xc002a778
c0013e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9a:	89 10                	mov    DWORD PTR [eax],edx
c0013e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	50                   	push   eax
c0013ea4:	e8 69 f9 ff ff       	call   c0013812 <Device::~Device()>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	90                   	nop
c0013ead:	83 c4 0c             	add    esp,0xc
c0013eb0:	c3                   	ret    
c0013eb1:	90                   	nop

c0013eb2 <FPU::~FPU()>:
c0013eb2:	83 ec 0c             	sub    esp,0xc
c0013eb5:	83 ec 0c             	sub    esp,0xc
c0013eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ebc:	e8 cd ff ff ff       	call   c0013e8e <FPU::~FPU()>
c0013ec1:	83 c4 10             	add    esp,0x10
c0013ec4:	83 ec 08             	sub    esp,0x8
c0013ec7:	68 58 01 00 00       	push   0x158
c0013ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ed0:	e8 5e e5 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	83 c4 0c             	add    esp,0xc
c0013edb:	c3                   	ret    

c0013edc <setupFPU()>:
c0013edc:	53                   	push   ebx
c0013edd:	83 ec 08             	sub    esp,0x8
c0013ee0:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0013ee6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013eed:	74 19                	je     c0013f08 <setupFPU()+0x2c>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 58 01 00 00       	push   0x158
c0013ef7:	e8 a0 b6 ff ff       	call   c000f59c <malloc>
c0013efc:	89 c3                	mov    ebx,eax
c0013efe:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f01:	e8 bc 11 01 00       	call   c00250c2 <AVX::AVX()>
c0013f06:	eb 5b                	jmp    c0013f63 <setupFPU()+0x87>
c0013f08:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013f0e:	84 c0                	test   al,al
c0013f10:	79 19                	jns    c0013f2b <setupFPU()+0x4f>
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	68 58 01 00 00       	push   0x158
c0013f1a:	e8 7d b6 ff ff       	call   c000f59c <malloc>
c0013f1f:	89 c3                	mov    ebx,eax
c0013f21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f24:	e8 bf 12 01 00       	call   c00251e8 <SSE::SSE()>
c0013f29:	eb 38                	jmp    c0013f63 <setupFPU()+0x87>
c0013f2b:	a8 20                	test   al,0x20
c0013f2d:	74 19                	je     c0013f48 <setupFPU()+0x6c>
c0013f2f:	83 ec 0c             	sub    esp,0xc
c0013f32:	68 58 01 00 00       	push   0x158
c0013f37:	e8 60 b6 ff ff       	call   c000f59c <malloc>
c0013f3c:	89 c3                	mov    ebx,eax
c0013f3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f41:	e8 0c 12 01 00       	call   c0025152 <MMX::MMX()>
c0013f46:	eb 1b                	jmp    c0013f63 <setupFPU()+0x87>
c0013f48:	a8 10                	test   al,0x10
c0013f4a:	74 1c                	je     c0013f68 <setupFPU()+0x8c>
c0013f4c:	83 ec 0c             	sub    esp,0xc
c0013f4f:	68 58 01 00 00       	push   0x158
c0013f54:	e8 43 b6 ff ff       	call   c000f59c <malloc>
c0013f59:	89 c3                	mov    ebx,eax
c0013f5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f5e:	e8 13 13 01 00       	call   c0025276 <x87::x87()>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	eb 24                	jmp    c0013f8c <setupFPU()+0xb0>
c0013f68:	83 e0 ef             	and    eax,0xffffffef
c0013f6b:	83 ec 0c             	sub    esp,0xc
c0013f6e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013f74:	68 64 a7 02 c0       	push   0xc002a764
c0013f79:	e8 8d e5 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0013f7e:	0f 20 c0             	mov    eax,cr0
c0013f81:	83 c8 04             	or     eax,0x4
c0013f84:	0f 22 c0             	mov    cr0,eax
c0013f87:	31 db                	xor    ebx,ebx
c0013f89:	83 c4 10             	add    esp,0x10
c0013f8c:	89 d8                	mov    eax,ebx
c0013f8e:	83 c4 08             	add    esp,0x8
c0013f91:	5b                   	pop    ebx
c0013f92:	c3                   	ret    
c0013f93:	90                   	nop

c0013f94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f9c:	c1 e0 04             	shl    eax,0x4
c0013f9f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013fa3:	8d 50 10             	lea    edx,[eax+0x10]
c0013fa6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013fac:	74 08                	je     c0013fb6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013fae:	83 c0 04             	add    eax,0x4
c0013fb1:	39 d0                	cmp    eax,edx
c0013fb3:	75 f1                	jne    c0013fa6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013fb5:	c3                   	ret    
c0013fb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fc0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fca:	eb e2                	jmp    c0013fae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013fcc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013fcc:	57                   	push   edi
c0013fcd:	31 c0                	xor    eax,eax
c0013fcf:	56                   	push   esi
c0013fd0:	53                   	push   ebx
c0013fd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013fd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013fdd:	89 da                	mov    edx,ebx
c0013fdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013fe3:	c1 e2 04             	shl    edx,0x4
c0013fe6:	01 ca                	add    edx,ecx
c0013fe8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013ff0:	74 16                	je     c0014008 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ff2:	40                   	inc    eax
c0013ff3:	83 f8 04             	cmp    eax,0x4
c0013ff6:	75 f0                	jne    c0013fe8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ff8:	c7 44 24 10 a8 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a7a8
c0014000:	5b                   	pop    ebx
c0014001:	5e                   	pop    esi
c0014002:	5f                   	pop    edi
c0014003:	e9 63 5c 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c0014008:	8d 04 98             	lea    eax,[eax+ebx*4]
c001400b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001400e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014014:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001401a:	5b                   	pop    ebx
c001401b:	5e                   	pop    esi
c001401c:	5f                   	pop    edi
c001401d:	c3                   	ret    

c001401e <doubleFault(regs*, void*)>:
c001401e:	55                   	push   ebp
c001401f:	89 e5                	mov    ebp,esp
c0014021:	83 ec 08             	sub    esp,0x8
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	68 b5 a7 02 c0       	push   0xc002a7b5
c001402c:	e8 3a 5c 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	90                   	nop
c0014035:	c9                   	leave  
c0014036:	c3                   	ret    
c0014037:	90                   	nop

c0014038 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014038:	56                   	push   esi
c0014039:	53                   	push   ebx
c001403a:	50                   	push   eax
c001403b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001403f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014043:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014048:	75 35                	jne    c001407f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001404a:	8d 43 20             	lea    eax,[ebx+0x20]
c001404d:	31 d2                	xor    edx,edx
c001404f:	89 c1                	mov    ecx,eax
c0014051:	c1 e1 04             	shl    ecx,0x4
c0014054:	01 f1                	add    ecx,esi
c0014056:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001405e:	74 3e                	je     c001409e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014060:	42                   	inc    edx
c0014061:	83 fa 04             	cmp    edx,0x4
c0014064:	75 f0                	jne    c0014056 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014066:	83 ec 0c             	sub    esp,0xc
c0014069:	68 cf a7 02 c0       	push   0xc002a7cf
c001406e:	e8 f8 5b 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001407b:	5a                   	pop    edx
c001407c:	5b                   	pop    ebx
c001407d:	5e                   	pop    esi
c001407e:	c3                   	ret    
c001407f:	83 ec 0c             	sub    esp,0xc
c0014082:	56                   	push   esi
c0014083:	e8 bc fb ff ff       	call   c0013c44 <Device::getName()>
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001408e:	75 ba                	jne    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014090:	83 fb 0f             	cmp    ebx,0xf
c0014093:	7f 29                	jg     c00140be <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014095:	0f b6 9b 00 c8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3800]
c001409c:	eb ac                	jmp    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001409e:	8d 04 82             	lea    eax,[edx+eax*4]
c00140a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140a5:	8d 04 86             	lea    eax,[esi+eax*4]
c00140a8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00140ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140b2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00140b8:	89 d8                	mov    eax,ebx
c00140ba:	5a                   	pop    edx
c00140bb:	5b                   	pop    ebx
c00140bc:	5e                   	pop    esi
c00140bd:	c3                   	ret    
c00140be:	83 ec 0c             	sub    esp,0xc
c00140c1:	68 c2 a7 02 c0       	push   0xc002a7c2
c00140c6:	e8 a0 5b 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00140cb:	83 c4 10             	add    esp,0x10
c00140ce:	e9 77 ff ff ff       	jmp    c001404a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140d3:	90                   	nop

c00140d4 <InterruptController::clearAllHandlers(int, bool)>:
c00140d4:	56                   	push   esi
c00140d5:	53                   	push   ebx
c00140d6:	52                   	push   edx
c00140d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140df:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00140e4:	75 61                	jne    c0014147 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00140e6:	8d 46 20             	lea    eax,[esi+0x20]
c00140e9:	c1 e6 04             	shl    esi,0x4
c00140ec:	c1 e0 04             	shl    eax,0x4
c00140ef:	01 de                	add    esi,ebx
c00140f1:	01 d8                	add    eax,ebx
c00140f3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00140fd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014107:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014111:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001411b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014125:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001412f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014139:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014143:	58                   	pop    eax
c0014144:	5b                   	pop    ebx
c0014145:	5e                   	pop    esi
c0014146:	c3                   	ret    
c0014147:	83 ec 0c             	sub    esp,0xc
c001414a:	53                   	push   ebx
c001414b:	e8 f4 fa ff ff       	call   c0013c44 <Device::getName()>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014156:	75 8e                	jne    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014158:	83 fe 0f             	cmp    esi,0xf
c001415b:	7f 09                	jg     c0014166 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001415d:	0f b6 b6 00 c8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3800]
c0014164:	eb 80                	jmp    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	68 dc a7 02 c0       	push   0xc002a7dc
c001416e:	e8 f8 5a 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0014173:	83 c4 10             	add    esp,0x10
c0014176:	e9 6b ff ff ff       	jmp    c00140e6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001417b:	90                   	nop

c001417c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001417c:	56                   	push   esi
c001417d:	53                   	push   ebx
c001417e:	52                   	push   edx
c001417f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014187:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001418c:	75 3a                	jne    c00141c8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001418e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014192:	8d 50 20             	lea    edx,[eax+0x20]
c0014195:	c1 e2 04             	shl    edx,0x4
c0014198:	8d 04 16             	lea    eax,[esi+edx*1]
c001419b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001419f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00141a5:	74 0b                	je     c00141b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00141a7:	83 c0 04             	add    eax,0x4
c00141aa:	39 d0                	cmp    eax,edx
c00141ac:	75 f1                	jne    c001419f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00141ae:	58                   	pop    eax
c00141af:	5b                   	pop    ebx
c00141b0:	5e                   	pop    esi
c00141b1:	c3                   	ret    
c00141b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141c6:	eb df                	jmp    c00141a7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00141c8:	83 ec 0c             	sub    esp,0xc
c00141cb:	56                   	push   esi
c00141cc:	e8 73 fa ff ff       	call   c0013c44 <Device::getName()>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141d7:	75 b5                	jne    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00141d9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00141de:	7f 11                	jg     c00141f1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00141e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141e4:	0f b6 80 00 c8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3800]
c00141eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141ef:	eb 9d                	jmp    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00141f1:	83 ec 0c             	sub    esp,0xc
c00141f4:	68 e9 a7 02 c0       	push   0xc002a7e9
c00141f9:	e8 6d 5a 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	eb 8b                	jmp    c001418e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014203 <nmiHandler(regs*, void*)>:
c0014203:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014208:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001420c:	e9 ef aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014211 <int_handler>:
c0014211:	55                   	push   ebp
c0014212:	57                   	push   edi
c0014213:	56                   	push   esi
c0014214:	53                   	push   ebx
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001421c:	80 3d e4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300e4,0x0
c0014223:	74 0b                	je     c0014230 <int_handler+0x1f>
c0014225:	fa                   	cli    
c0014226:	f4                   	hlt    
c0014227:	80 3d e4 00 03 c0 00 	cmp    BYTE PTR ds:0xc00300e4,0x0
c001422e:	75 f5                	jne    c0014225 <int_handler+0x14>
c0014230:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014235:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014238:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001423e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014244:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014247:	83 f8 17             	cmp    eax,0x17
c001424a:	77 13                	ja     c001425f <int_handler+0x4e>
c001424c:	83 ec 08             	sub    esp,0x8
c001424f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014251:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014254:	0f b6 c0             	movzx  eax,al
c0014257:	50                   	push   eax
c0014258:	57                   	push   edi
c0014259:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001425c:	83 c4 10             	add    esp,0x10
c001425f:	83 c3 15             	add    ebx,0x15
c0014262:	c1 e3 04             	shl    ebx,0x4
c0014265:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014269:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014270:	31 db                	xor    ebx,ebx
c0014272:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014276:	85 c0                	test   eax,eax
c0014278:	74 13                	je     c001428d <int_handler+0x7c>
c001427a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001427d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014281:	74 1c                	je     c001429f <int_handler+0x8e>
c0014283:	83 ec 08             	sub    esp,0x8
c0014286:	52                   	push   edx
c0014287:	56                   	push   esi
c0014288:	ff d0                	call   eax
c001428a:	83 c4 10             	add    esp,0x10
c001428d:	43                   	inc    ebx
c001428e:	83 fb 04             	cmp    ebx,0x4
c0014291:	75 df                	jne    c0014272 <int_handler+0x61>
c0014293:	83 c4 0c             	add    esp,0xc
c0014296:	31 c0                	xor    eax,eax
c0014298:	5b                   	pop    ebx
c0014299:	31 d2                	xor    edx,edx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	5d                   	pop    ebp
c001429e:	c3                   	ret    
c001429f:	83 ec 08             	sub    esp,0x8
c00142a2:	52                   	push   edx
c00142a3:	56                   	push   esi
c00142a4:	ff d0                	call   eax
c00142a6:	83 c4 10             	add    esp,0x10
c00142a9:	83 c4 0c             	add    esp,0xc
c00142ac:	5b                   	pop    ebx
c00142ad:	5e                   	pop    esi
c00142ae:	5f                   	pop    edi
c00142af:	5d                   	pop    ebp
c00142b0:	c3                   	ret    
c00142b1:	90                   	nop

c00142b2 <InterruptController::InterruptController(char const*)>:
c00142b2:	83 ec 1c             	sub    esp,0x1c
c00142b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b9:	83 ec 08             	sub    esp,0x8
c00142bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142c0:	50                   	push   eax
c00142c1:	e8 82 f8 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00142c6:	83 c4 10             	add    esp,0x10
c00142c9:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00142ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d2:	89 10                	mov    DWORD PTR [eax],edx
c00142d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00142e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142ea:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00142f2:	7f 5e                	jg     c0014352 <InterruptController::InterruptController(char const*)+0xa0>
c00142f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00142fc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014301:	7f 49                	jg     c001434c <InterruptController::InterruptController(char const*)+0x9a>
c0014303:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014307:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001430b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014312:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014316:	01 ca                	add    edx,ecx
c0014318:	83 c2 54             	add    edx,0x54
c001431b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014323:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014327:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001432b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014336:	01 ca                	add    edx,ecx
c0014338:	81 c2 54 04 00 00    	add    edx,0x454
c001433e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014346:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001434a:	eb b0                	jmp    c00142fc <InterruptController::InterruptController(char const*)+0x4a>
c001434c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014350:	eb 98                	jmp    c00142ea <InterruptController::InterruptController(char const*)+0x38>
c0014352:	90                   	nop
c0014353:	83 c4 1c             	add    esp,0x1c
c0014356:	c3                   	ret    
c0014357:	90                   	nop

c0014358 <InterruptController::~InterruptController()>:
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c0014360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014364:	89 10                	mov    DWORD PTR [eax],edx
c0014366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001436a:	83 ec 0c             	sub    esp,0xc
c001436d:	50                   	push   eax
c001436e:	e8 9f f4 ff ff       	call   c0013812 <Device::~Device()>
c0014373:	83 c4 10             	add    esp,0x10
c0014376:	90                   	nop
c0014377:	83 c4 0c             	add    esp,0xc
c001437a:	c3                   	ret    
c001437b:	90                   	nop

c001437c <InterruptController::~InterruptController()>:
c001437c:	83 ec 0c             	sub    esp,0xc
c001437f:	83 ec 0c             	sub    esp,0xc
c0014382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014386:	e8 cd ff ff ff       	call   c0014358 <InterruptController::~InterruptController()>
c001438b:	83 c4 10             	add    esp,0x10
c001438e:	83 ec 08             	sub    esp,0x8
c0014391:	68 58 21 00 00       	push   0x2158
c0014396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001439a:	e8 94 e0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001439f:	83 c4 10             	add    esp,0x10
c00143a2:	83 c4 0c             	add    esp,0xc
c00143a5:	c3                   	ret    

c00143a6 <displayDebugInfo(regs*)>:
c00143a6:	55                   	push   ebp
c00143a7:	57                   	push   edi
c00143a8:	56                   	push   esi
c00143a9:	53                   	push   ebx
c00143aa:	83 ec 24             	sub    esp,0x24
c00143ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00143b1:	0f 20 c2             	mov    edx,cr0
c00143b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00143b8:	0f 20 d7             	mov    edi,cr2
c00143bb:	0f 20 de             	mov    esi,cr3
c00143be:	0f 20 e5             	mov    ebp,cr4
c00143c1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00143c4:	68 f6 a7 02 c0       	push   0xc002a7f6
c00143c9:	e8 3d e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143ce:	59                   	pop    ecx
c00143cf:	58                   	pop    eax
c00143d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143d3:	68 01 a8 02 c0       	push   0xc002a801
c00143d8:	e8 2e e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143dd:	58                   	pop    eax
c00143de:	5a                   	pop    edx
c00143df:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143e2:	68 0c a8 02 c0       	push   0xc002a80c
c00143e7:	e8 1f e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143ec:	59                   	pop    ecx
c00143ed:	58                   	pop    eax
c00143ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143f1:	68 17 a8 02 c0       	push   0xc002a817
c00143f6:	e8 10 e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00143fb:	58                   	pop    eax
c00143fc:	5a                   	pop    edx
c00143fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014400:	68 22 a8 02 c0       	push   0xc002a822
c0014405:	e8 01 e1 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001440a:	59                   	pop    ecx
c001440b:	58                   	pop    eax
c001440c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001440f:	68 2d a8 02 c0       	push   0xc002a82d
c0014414:	e8 f2 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014419:	58                   	pop    eax
c001441a:	5a                   	pop    edx
c001441b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001441e:	68 38 a8 02 c0       	push   0xc002a838
c0014423:	e8 e3 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014428:	59                   	pop    ecx
c0014429:	58                   	pop    eax
c001442a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001442d:	68 43 a8 02 c0       	push   0xc002a843
c0014432:	e8 d4 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014437:	58                   	pop    eax
c0014438:	5a                   	pop    edx
c0014439:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001443c:	68 4e a8 02 c0       	push   0xc002a84e
c0014441:	e8 c5 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014446:	59                   	pop    ecx
c0014447:	58                   	pop    eax
c0014448:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001444b:	68 5d a8 02 c0       	push   0xc002a85d
c0014450:	e8 b6 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014455:	58                   	pop    eax
c0014456:	5a                   	pop    edx
c0014457:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001445a:	68 68 a8 02 c0       	push   0xc002a868
c001445f:	e8 a7 e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014464:	59                   	pop    ecx
c0014465:	58                   	pop    eax
c0014466:	57                   	push   edi
c0014467:	68 73 a8 02 c0       	push   0xc002a873
c001446c:	e8 9a e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014471:	58                   	pop    eax
c0014472:	5a                   	pop    edx
c0014473:	56                   	push   esi
c0014474:	68 7e a8 02 c0       	push   0xc002a87e
c0014479:	e8 8d e0 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001447e:	59                   	pop    ecx
c001447f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014484:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001448a:	e8 48 be ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001448f:	58                   	pop    eax
c0014490:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014493:	5a                   	pop    edx
c0014494:	c1 e0 05             	shl    eax,0x5
c0014497:	05 60 c5 02 c0       	add    eax,0xc002c560
c001449c:	50                   	push   eax
c001449d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144a8:	e8 37 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144ad:	59                   	pop    ecx
c00144ae:	58                   	pop    eax
c00144af:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144b4:	68 89 a8 02 c0       	push   0xc002a889
c00144b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144bf:	e8 20 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144c4:	58                   	pop    eax
c00144c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ca:	5a                   	pop    edx
c00144cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00144ce:	83 c0 0c             	add    eax,0xc
c00144d1:	50                   	push   eax
c00144d2:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144dd:	e8 02 c3 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144e2:	59                   	pop    ecx
c00144e3:	58                   	pop    eax
c00144e4:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144e9:	68 92 a8 02 c0       	push   0xc002a892
c00144ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f4:	e8 eb c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00144f9:	58                   	pop    eax
c00144fa:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00144ff:	5a                   	pop    edx
c0014500:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014503:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014509:	e8 90 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001450e:	59                   	pop    ecx
c001450f:	58                   	pop    eax
c0014510:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014515:	68 9a a8 02 c0       	push   0xc002a89a
c001451a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014520:	e8 bf c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014525:	58                   	pop    eax
c0014526:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001452b:	5a                   	pop    edx
c001452c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001452f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014535:	e8 64 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001453a:	59                   	pop    ecx
c001453b:	58                   	pop    eax
c001453c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014541:	68 a2 a8 02 c0       	push   0xc002a8a2
c0014546:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454c:	e8 93 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014551:	58                   	pop    eax
c0014552:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014557:	5a                   	pop    edx
c0014558:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001455b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014561:	e8 38 c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014566:	59                   	pop    ecx
c0014567:	58                   	pop    eax
c0014568:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001456d:	68 aa a8 02 c0       	push   0xc002a8aa
c0014572:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014578:	e8 67 c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001457d:	58                   	pop    eax
c001457e:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014583:	5a                   	pop    edx
c0014584:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014587:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458d:	e8 0c c2 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014592:	59                   	pop    ecx
c0014593:	58                   	pop    eax
c0014594:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014599:	68 b2 a8 02 c0       	push   0xc002a8b2
c001459e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a4:	e8 3b c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145a9:	58                   	pop    eax
c00145aa:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145af:	5a                   	pop    edx
c00145b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b9:	e8 e0 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145be:	59                   	pop    ecx
c00145bf:	58                   	pop    eax
c00145c0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145c5:	68 ba a8 02 c0       	push   0xc002a8ba
c00145ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d0:	e8 0f c2 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00145d5:	58                   	pop    eax
c00145d6:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145db:	5a                   	pop    edx
c00145dc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00145df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e5:	e8 b4 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00145ea:	59                   	pop    ecx
c00145eb:	58                   	pop    eax
c00145ec:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00145f1:	68 c2 a8 02 c0       	push   0xc002a8c2
c00145f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fc:	e8 e3 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014601:	58                   	pop    eax
c0014602:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014607:	5a                   	pop    edx
c0014608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001460c:	52                   	push   edx
c001460d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014613:	e8 86 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014618:	59                   	pop    ecx
c0014619:	58                   	pop    eax
c001461a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001461f:	68 cb a8 02 c0       	push   0xc002a8cb
c0014624:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462a:	e8 b5 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001462f:	58                   	pop    eax
c0014630:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014635:	5a                   	pop    edx
c0014636:	57                   	push   edi
c0014637:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463d:	e8 5c c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014642:	59                   	pop    ecx
c0014643:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014648:	5f                   	pop    edi
c0014649:	68 d3 a8 02 c0       	push   0xc002a8d3
c001464e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014654:	e8 8b c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014659:	58                   	pop    eax
c001465a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001465f:	5a                   	pop    edx
c0014660:	56                   	push   esi
c0014661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014667:	e8 32 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001466c:	59                   	pop    ecx
c001466d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014672:	5e                   	pop    esi
c0014673:	68 db a8 02 c0       	push   0xc002a8db
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 61 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014683:	5f                   	pop    edi
c0014684:	58                   	pop    eax
c0014685:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001468a:	55                   	push   ebp
c001468b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014691:	e8 08 c1 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014696:	58                   	pop    eax
c0014697:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001469c:	5a                   	pop    edx
c001469d:	68 e3 a8 02 c0       	push   0xc002a8e3
c00146a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a8:	e8 37 c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146ad:	0f 21 c0             	mov    eax,db0
c00146b0:	59                   	pop    ecx
c00146b1:	5e                   	pop    esi
c00146b2:	50                   	push   eax
c00146b3:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146be:	e8 db c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146c3:	5f                   	pop    edi
c00146c4:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146c9:	5d                   	pop    ebp
c00146ca:	68 ec a8 02 c0       	push   0xc002a8ec
c00146cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d5:	e8 0a c1 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00146da:	0f 21 c8             	mov    eax,db1
c00146dd:	5a                   	pop    edx
c00146de:	59                   	pop    ecx
c00146df:	50                   	push   eax
c00146e0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146eb:	e8 ae c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00146f0:	5e                   	pop    esi
c00146f1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00146f6:	5f                   	pop    edi
c00146f7:	68 f4 a8 02 c0       	push   0xc002a8f4
c00146fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014702:	e8 dd c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014707:	0f 21 d0             	mov    eax,db2
c001470a:	5d                   	pop    ebp
c001470b:	5a                   	pop    edx
c001470c:	50                   	push   eax
c001470d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014712:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014718:	e8 81 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001471d:	59                   	pop    ecx
c001471e:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014723:	5e                   	pop    esi
c0014724:	68 fc a8 02 c0       	push   0xc002a8fc
c0014729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472f:	e8 b0 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014734:	0f 21 d8             	mov    eax,db3
c0014737:	5f                   	pop    edi
c0014738:	5d                   	pop    ebp
c0014739:	50                   	push   eax
c001473a:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001473f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014745:	e8 54 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c001474a:	58                   	pop    eax
c001474b:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014750:	5a                   	pop    edx
c0014751:	68 04 a9 02 c0       	push   0xc002a904
c0014756:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475c:	e8 83 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014761:	0f 21 f0             	mov    eax,db6
c0014764:	59                   	pop    ecx
c0014765:	5e                   	pop    esi
c0014766:	50                   	push   eax
c0014767:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001476c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014772:	e8 27 c0 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014777:	5f                   	pop    edi
c0014778:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001477d:	5d                   	pop    ebp
c001477e:	68 0c a9 02 c0       	push   0xc002a90c
c0014783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014789:	e8 56 c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c001478e:	0f 21 f8             	mov    eax,db7
c0014791:	5a                   	pop    edx
c0014792:	59                   	pop    ecx
c0014793:	50                   	push   eax
c0014794:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0014799:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479f:	e8 fa bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c00147a4:	5e                   	pop    esi
c00147a5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147a8:	e8 37 86 00 00       	call   c001cde4 <Thr::getDriverNameFromAddress(unsigned long)>
c00147ad:	83 c4 10             	add    esp,0x10
c00147b0:	85 c0                	test   eax,eax
c00147b2:	74 7d                	je     c0014831 <displayDebugInfo(regs*)+0x48b>
c00147b4:	89 c6                	mov    esi,eax
c00147b6:	50                   	push   eax
c00147b7:	50                   	push   eax
c00147b8:	56                   	push   esi
c00147b9:	68 14 a9 02 c0       	push   0xc002a914
c00147be:	e8 48 dd ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00147c3:	5a                   	pop    edx
c00147c4:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147c9:	59                   	pop    ecx
c00147ca:	68 22 a9 02 c0       	push   0xc002a922
c00147cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d5:	e8 0a c0 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147da:	5f                   	pop    edi
c00147db:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147e0:	5d                   	pop    ebp
c00147e1:	56                   	push   esi
c00147e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e8:	e8 f7 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c00147ed:	58                   	pop    eax
c00147ee:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c00147f3:	5a                   	pop    edx
c00147f4:	68 2e a9 02 c0       	push   0xc002a92e
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 e0 bf ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0014804:	59                   	pop    ecx
c0014805:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001480a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014810:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014813:	e8 03 86 00 00       	call   c001ce1b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014818:	5b                   	pop    ebx
c0014819:	5d                   	pop    ebp
c001481a:	50                   	push   eax
c001481b:	57                   	push   edi
c001481c:	e8 7d bf ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0014821:	58                   	pop    eax
c0014822:	5a                   	pop    edx
c0014823:	56                   	push   esi
c0014824:	68 3a a9 02 c0       	push   0xc002a93a
c0014829:	e8 dd dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001482e:	83 c4 10             	add    esp,0x10
c0014831:	fa                   	cli    
c0014832:	f4                   	hlt    
c0014833:	eb fe                	jmp    c0014833 <displayDebugInfo(regs*)+0x48d>

c0014835 <x87EmulHandler(regs*, void*)>:
c0014835:	83 ec 0c             	sub    esp,0xc
c0014838:	0f 20 c2             	mov    edx,cr0
c001483b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014840:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014844:	75 4b                	jne    c0014891 <x87EmulHandler(regs*, void*)+0x5c>
c0014846:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001484b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014851:	85 c0                	test   eax,eax
c0014853:	74 05                	je     c001485a <x87EmulHandler(regs*, void*)+0x25>
c0014855:	83 e2 08             	and    edx,0x8
c0014858:	75 17                	jne    c0014871 <x87EmulHandler(regs*, void*)+0x3c>
c001485a:	83 ec 0c             	sub    esp,0xc
c001485d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014861:	e8 51 a9 00 00       	call   c001f1b7 <Vm::x87Handler(regs*)>
c0014866:	83 c4 10             	add    esp,0x10
c0014869:	84 c0                	test   al,al
c001486b:	74 24                	je     c0014891 <x87EmulHandler(regs*, void*)+0x5c>
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	c3                   	ret    
c0014871:	83 ec 0c             	sub    esp,0xc
c0014874:	68 60 a9 02 c0       	push   0xc002a960
c0014879:	e8 8d dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001487e:	0f 06                	clts   
c0014880:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	a3 28 d7 02 c0       	mov    ds:0xc002d728,eax
c001488d:	83 c4 0c             	add    esp,0xc
c0014890:	c3                   	ret    
c0014891:	83 ec 0c             	sub    esp,0xc
c0014894:	68 4a a9 02 c0       	push   0xc002a94a
c0014899:	e8 6d dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001489e:	5a                   	pop    edx
c001489f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a3:	e8 fe fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c00148a8 <gpFault(regs*, void*)>:
c00148a8:	53                   	push   ebx
c00148a9:	83 ec 14             	sub    esp,0x14
c00148ac:	c7 05 24 d7 02 c0 90 e6 01 c0 	mov    DWORD PTR ds:0xc002d724,0xc001e690
c00148b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148ba:	53                   	push   ebx
c00148bb:	e8 d0 9d 00 00       	call   c001e690 <Vm::faultHandler(regs*)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	84 c0                	test   al,al
c00148c5:	74 05                	je     c00148cc <gpFault(regs*, void*)+0x24>
c00148c7:	83 c4 08             	add    esp,0x8
c00148ca:	5b                   	pop    ebx
c00148cb:	c3                   	ret    
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	68 6d a9 02 c0       	push   0xc002a96d
c00148d4:	e8 32 dc ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00148d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148dc:	e8 c5 fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c00148e1 <pgFault(regs*, void*)>:
c00148e1:	83 ec 14             	sub    esp,0x14
c00148e4:	0f 20 d0             	mov    eax,cr2
c00148e7:	50                   	push   eax
c00148e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148f0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00148f6:	e8 4f d8 ff ff       	call   c001214a <VAS::tryLoadBackOffDisk(unsigned long)>
c00148fb:	83 c4 10             	add    esp,0x10
c00148fe:	84 c0                	test   al,al
c0014900:	74 04                	je     c0014906 <pgFault(regs*, void*)+0x25>
c0014902:	83 c4 0c             	add    esp,0xc
c0014905:	c3                   	ret    
c0014906:	83 ec 0c             	sub    esp,0xc
c0014909:	68 88 a9 02 c0       	push   0xc002a988
c001490e:	e8 f8 db ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014913:	58                   	pop    eax
c0014914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014918:	e8 89 fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c001491d <otherISRHandler(regs*, void*)>:
c001491d:	53                   	push   ebx
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014925:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014928:	50                   	push   eax
c0014929:	50                   	push   eax
c001492a:	68 95 a9 02 c0       	push   0xc002a995
c001492f:	e8 d7 db ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014934:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014937:	e8 6a fa ff ff       	call   c00143a6 <displayDebugInfo(regs*)>

c001493c <opcodeFault(regs*, void*)>:
c001493c:	55                   	push   ebp
c001493d:	89 e5                	mov    ebp,esp
c001493f:	56                   	push   esi
c0014940:	53                   	push   ebx
c0014941:	83 ec 40             	sub    esp,0x40
c0014944:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014949:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001494f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014955:	84 c0                	test   al,al
c0014957:	74 24                	je     c001497d <opcodeFault(regs*, void*)+0x41>
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	68 b4 a9 02 c0       	push   0xc002a9b4
c0014961:	e8 a5 db ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014966:	83 c4 10             	add    esp,0x10
c0014969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001496c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001496f:	8d 50 19             	lea    edx,[eax+0x19]
c0014972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014975:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014978:	e9 d5 05 00 00       	jmp    c0014f52 <opcodeFault(regs*, void*)+0x616>
c001497d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014980:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014983:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014986:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001498a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001498e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014991:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014994:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014997:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001499a:	8a 00                	mov    al,BYTE PTR [eax]
c001499c:	3c f0                	cmp    al,0xf0
c001499e:	75 17                	jne    c00149b7 <opcodeFault(regs*, void*)+0x7b>
c00149a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149a9:	8d 50 01             	lea    edx,[eax+0x1]
c00149ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149af:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149b2:	e9 da 00 00 00       	jmp    c0014a91 <opcodeFault(regs*, void*)+0x155>
c00149b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ba:	8a 00                	mov    al,BYTE PTR [eax]
c00149bc:	3c f2                	cmp    al,0xf2
c00149be:	74 09                	je     c00149c9 <opcodeFault(regs*, void*)+0x8d>
c00149c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149c3:	8a 00                	mov    al,BYTE PTR [eax]
c00149c5:	3c f3                	cmp    al,0xf3
c00149c7:	75 1b                	jne    c00149e4 <opcodeFault(regs*, void*)+0xa8>
c00149c9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149cd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d6:	8d 50 01             	lea    edx,[eax+0x1]
c00149d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149df:	e9 ad 00 00 00       	jmp    c0014a91 <opcodeFault(regs*, void*)+0x155>
c00149e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e7:	8a 00                	mov    al,BYTE PTR [eax]
c00149e9:	3c 66                	cmp    al,0x66
c00149eb:	75 1f                	jne    c0014a0c <opcodeFault(regs*, void*)+0xd0>
c00149ed:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149f1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00149f5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149fe:	8d 50 01             	lea    edx,[eax+0x1]
c0014a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a07:	e9 85 00 00 00       	jmp    c0014a91 <opcodeFault(regs*, void*)+0x155>
c0014a0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a0f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a11:	3c 67                	cmp    al,0x67
c0014a13:	75 18                	jne    c0014a2d <opcodeFault(regs*, void*)+0xf1>
c0014a15:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a19:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a22:	8d 50 01             	lea    edx,[eax+0x1]
c0014a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a2b:	eb 64                	jmp    c0014a91 <opcodeFault(regs*, void*)+0x155>
c0014a2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a30:	8a 00                	mov    al,BYTE PTR [eax]
c0014a32:	3c 2e                	cmp    al,0x2e
c0014a34:	74 09                	je     c0014a3f <opcodeFault(regs*, void*)+0x103>
c0014a36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a39:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3b:	3c 3e                	cmp    al,0x3e
c0014a3d:	75 18                	jne    c0014a57 <opcodeFault(regs*, void*)+0x11b>
c0014a3f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a43:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a55:	eb 3a                	jmp    c0014a91 <opcodeFault(regs*, void*)+0x155>
c0014a57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a5a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5c:	3c 36                	cmp    al,0x36
c0014a5e:	74 1b                	je     c0014a7b <opcodeFault(regs*, void*)+0x13f>
c0014a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a63:	8a 00                	mov    al,BYTE PTR [eax]
c0014a65:	3c 26                	cmp    al,0x26
c0014a67:	74 12                	je     c0014a7b <opcodeFault(regs*, void*)+0x13f>
c0014a69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a6c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a6e:	3c 64                	cmp    al,0x64
c0014a70:	74 09                	je     c0014a7b <opcodeFault(regs*, void*)+0x13f>
c0014a72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a75:	8a 00                	mov    al,BYTE PTR [eax]
c0014a77:	3c 65                	cmp    al,0x65
c0014a79:	75 16                	jne    c0014a91 <opcodeFault(regs*, void*)+0x155>
c0014a7b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a7f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a88:	8d 50 01             	lea    edx,[eax+0x1]
c0014a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a94:	8a 00                	mov    al,BYTE PTR [eax]
c0014a96:	3c 0f                	cmp    al,0xf
c0014a98:	0f 85 ad 00 00 00    	jne    c0014b4b <opcodeFault(regs*, void*)+0x20f>
c0014a9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aa1:	40                   	inc    eax
c0014aa2:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa4:	3c c2                	cmp    al,0xc2
c0014aa6:	74 0e                	je     c0014ab6 <opcodeFault(regs*, void*)+0x17a>
c0014aa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aab:	40                   	inc    eax
c0014aac:	8a 00                	mov    al,BYTE PTR [eax]
c0014aae:	3c c3                	cmp    al,0xc3
c0014ab0:	0f 85 95 00 00 00    	jne    c0014b4b <opcodeFault(regs*, void*)+0x20f>
c0014ab6:	83 ec 0c             	sub    esp,0xc
c0014ab9:	68 d7 a9 02 c0       	push   0xc002a9d7
c0014abe:	e8 48 da ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014ac3:	83 c4 10             	add    esp,0x10
c0014ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014acc:	8d 50 01             	lea    edx,[eax+0x1]
c0014acf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ad5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014adb:	8a 00                	mov    al,BYTE PTR [eax]
c0014add:	8d 50 fe             	lea    edx,[eax-0x2]
c0014ae0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae3:	88 10                	mov    BYTE PTR [eax],dl
c0014ae5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ae8:	50                   	push   eax
c0014ae9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014aec:	50                   	push   eax
c0014aed:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014af0:	50                   	push   eax
c0014af1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014af4:	e8 8b 48 00 00       	call   c0019384 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014af9:	83 c4 10             	add    esp,0x10
c0014afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b02:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b05:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b08:	01 d0                	add    eax,edx
c0014b0a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b13:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b16:	48                   	dec    eax
c0014b17:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b20:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b26:	83 ec 04             	sub    esp,0x4
c0014b29:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b2c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b2f:	50                   	push   eax
c0014b30:	e8 7f b6 fe ff       	call   c00001b4 <voodooXADD>
c0014b35:	83 c4 10             	add    esp,0x10
c0014b38:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b3b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b3e:	01 c2                	add    edx,eax
c0014b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b43:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b46:	e9 07 04 00 00       	jmp    c0014f52 <opcodeFault(regs*, void*)+0x616>
c0014b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b50:	3c 0f                	cmp    al,0xf
c0014b52:	0f 85 8b 01 00 00    	jne    c0014ce3 <opcodeFault(regs*, void*)+0x3a7>
c0014b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b5b:	40                   	inc    eax
c0014b5c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5e:	3c c7                	cmp    al,0xc7
c0014b60:	0f 86 7d 01 00 00    	jbe    c0014ce3 <opcodeFault(regs*, void*)+0x3a7>
c0014b66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b69:	40                   	inc    eax
c0014b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6c:	3c cf                	cmp    al,0xcf
c0014b6e:	0f 87 6f 01 00 00    	ja     c0014ce3 <opcodeFault(regs*, void*)+0x3a7>
c0014b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b77:	40                   	inc    eax
c0014b78:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7a:	83 c0 38             	add    eax,0x38
c0014b7d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b80:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014b84:	75 0b                	jne    c0014b91 <opcodeFault(regs*, void*)+0x255>
c0014b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b89:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014b8c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014b8f:	eb 75                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014b91:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014b95:	75 0b                	jne    c0014ba2 <opcodeFault(regs*, void*)+0x266>
c0014b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014b9d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ba0:	eb 64                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014ba2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ba6:	75 0b                	jne    c0014bb3 <opcodeFault(regs*, void*)+0x277>
c0014ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb1:	eb 53                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014bb3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bb7:	75 0b                	jne    c0014bc4 <opcodeFault(regs*, void*)+0x288>
c0014bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bbf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bc2:	eb 42                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014bc4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bc8:	75 0b                	jne    c0014bd5 <opcodeFault(regs*, void*)+0x299>
c0014bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcd:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bd0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd3:	eb 31                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014bd5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bd9:	75 0b                	jne    c0014be6 <opcodeFault(regs*, void*)+0x2aa>
c0014bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bde:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014be1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be4:	eb 20                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014be6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014bea:	75 0b                	jne    c0014bf7 <opcodeFault(regs*, void*)+0x2bb>
c0014bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bef:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014bf2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf5:	eb 0f                	jmp    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014bf7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014bfb:	75 09                	jne    c0014c06 <opcodeFault(regs*, void*)+0x2ca>
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c03:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c06:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c0a:	74 10                	je     c0014c1c <opcodeFault(regs*, void*)+0x2e0>
c0014c0c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c13:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c1a:	eb 2d                	jmp    c0014c49 <opcodeFault(regs*, void*)+0x30d>
c0014c1c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c1f:	c1 e0 18             	shl    eax,0x18
c0014c22:	89 c2                	mov    edx,eax
c0014c24:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c27:	c1 e0 08             	shl    eax,0x8
c0014c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0014c2f:	09 c2                	or     edx,eax
c0014c31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c34:	c1 e8 08             	shr    eax,0x8
c0014c37:	25 00 ff 00 00       	and    eax,0xff00
c0014c3c:	09 c2                	or     edx,eax
c0014c3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c41:	c1 e8 18             	shr    eax,0x18
c0014c44:	09 d0                	or     eax,edx
c0014c46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c49:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c4d:	75 0b                	jne    c0014c5a <opcodeFault(regs*, void*)+0x31e>
c0014c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c52:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c55:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c58:	eb 75                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014c5a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c5e:	75 0b                	jne    c0014c6b <opcodeFault(regs*, void*)+0x32f>
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c66:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c69:	eb 64                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014c6b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c6f:	75 0b                	jne    c0014c7c <opcodeFault(regs*, void*)+0x340>
c0014c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c74:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c77:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c7a:	eb 53                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014c7c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c80:	75 0b                	jne    c0014c8d <opcodeFault(regs*, void*)+0x351>
c0014c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c85:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c88:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014c8b:	eb 42                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014c8d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014c91:	75 0b                	jne    c0014c9e <opcodeFault(regs*, void*)+0x362>
c0014c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c96:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c99:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014c9c:	eb 31                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014c9e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ca2:	75 0b                	jne    c0014caf <opcodeFault(regs*, void*)+0x373>
c0014ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014caa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014cad:	eb 20                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014caf:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cb3:	75 0b                	jne    c0014cc0 <opcodeFault(regs*, void*)+0x384>
c0014cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cbb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cbe:	eb 0f                	jmp    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014cc0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cc4:	75 09                	jne    c0014ccf <opcodeFault(regs*, void*)+0x393>
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ccc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014ccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cd5:	8d 50 02             	lea    edx,[eax+0x2]
c0014cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cde:	e9 6f 02 00 00       	jmp    c0014f52 <opcodeFault(regs*, void*)+0x616>
c0014ce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ce8:	3c 0f                	cmp    al,0xf
c0014cea:	0f 85 8d 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x541>
c0014cf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf3:	40                   	inc    eax
c0014cf4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf6:	3c c7                	cmp    al,0xc7
c0014cf8:	0f 85 7f 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x541>
c0014cfe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d07:	8d 50 01             	lea    edx,[eax+0x1]
c0014d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d10:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d13:	50                   	push   eax
c0014d14:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d17:	50                   	push   eax
c0014d18:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d1b:	50                   	push   eax
c0014d1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d1f:	e8 60 46 00 00       	call   c0019384 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d2a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d2d:	83 f0 01             	xor    eax,0x1
c0014d30:	84 c0                	test   al,al
c0014d32:	0f 84 45 01 00 00    	je     c0014e7d <opcodeFault(regs*, void*)+0x541>
c0014d38:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d3b:	3c 01                	cmp    al,0x1
c0014d3d:	0f 85 3a 01 00 00    	jne    c0014e7d <opcodeFault(regs*, void*)+0x541>
c0014d43:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d46:	83 f0 01             	xor    eax,0x1
c0014d49:	84 c0                	test   al,al
c0014d4b:	0f 84 2c 01 00 00    	je     c0014e7d <opcodeFault(regs*, void*)+0x541>
c0014d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d57:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d5a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d61:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d64:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d67:	89 c2                	mov    edx,eax
c0014d69:	b8 00 00 00 00       	mov    eax,0x0
c0014d6e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d71:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d77:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d7a:	ba 00 00 00 00       	mov    edx,0x0
c0014d7f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014d82:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d88:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d8b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014d8e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014d95:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014d98:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014d9b:	89 c2                	mov    edx,eax
c0014d9d:	b8 00 00 00 00       	mov    eax,0x0
c0014da2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014da5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dae:	ba 00 00 00 00       	mov    edx,0x0
c0014db3:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014db6:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014db9:	fa                   	cli    
c0014dba:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014dbf:	40                   	inc    eax
c0014dc0:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0014dc5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014dc8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dcd:	89 c1                	mov    ecx,eax
c0014dcf:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dd2:	89 cb                	mov    ebx,ecx
c0014dd4:	89 d0                	mov    eax,edx
c0014dd6:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014dd9:	89 c6                	mov    esi,eax
c0014ddb:	89 f0                	mov    eax,esi
c0014ddd:	09 d8                	or     eax,ebx
c0014ddf:	85 c0                	test   eax,eax
c0014de1:	75 21                	jne    c0014e04 <opcodeFault(regs*, void*)+0x4c8>
c0014de3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014de6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014de9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dec:	89 01                	mov    DWORD PTR [ecx],eax
c0014dee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df7:	83 c8 40             	or     eax,0x40
c0014dfa:	89 c2                	mov    edx,eax
c0014dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dff:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e02:	eb 3e                	jmp    c0014e42 <opcodeFault(regs*, void*)+0x506>
c0014e04:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e0f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e12:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e18:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e1b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e1e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e21:	89 d0                	mov    eax,edx
c0014e23:	31 d2                	xor    edx,edx
c0014e25:	89 c3                	mov    ebx,eax
c0014e27:	89 d6                	mov    esi,edx
c0014e29:	89 da                	mov    edx,ebx
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e37:	83 e0 bf             	and    eax,0xffffffbf
c0014e3a:	89 c2                	mov    edx,eax
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e42:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014e47:	48                   	dec    eax
c0014e48:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0014e4d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0014e52:	85 c0                	test   eax,eax
c0014e54:	75 01                	jne    c0014e57 <opcodeFault(regs*, void*)+0x51b>
c0014e56:	fb                   	sti    
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e60:	01 c2                	add    edx,eax
c0014e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	68 e6 a9 02 c0       	push   0xc002a9e6
c0014e70:	e8 96 d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	e9 d5 00 00 00       	jmp    c0014f52 <opcodeFault(regs*, void*)+0x616>
c0014e7d:	83 ec 0c             	sub    esp,0xc
c0014e80:	68 f9 a9 02 c0       	push   0xc002a9f9
c0014e85:	e8 81 d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e90:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e99:	c1 e0 04             	shl    eax,0x4
c0014e9c:	01 d0                	add    eax,edx
c0014e9e:	83 c0 03             	add    eax,0x3
c0014ea1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ea3:	0f b6 d8             	movzx  ebx,al
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eb2:	c1 e0 04             	shl    eax,0x4
c0014eb5:	01 d0                	add    eax,edx
c0014eb7:	83 c0 02             	add    eax,0x2
c0014eba:	8a 00                	mov    al,BYTE PTR [eax]
c0014ebc:	0f b6 c8             	movzx  ecx,al
c0014ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ecb:	c1 e0 04             	shl    eax,0x4
c0014ece:	01 d0                	add    eax,edx
c0014ed0:	40                   	inc    eax
c0014ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed3:	0f b6 d0             	movzx  edx,al
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ee2:	c1 e0 04             	shl    eax,0x4
c0014ee5:	01 f0                	add    eax,esi
c0014ee7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee9:	0f b6 c0             	movzx  eax,al
c0014eec:	83 ec 0c             	sub    esp,0xc
c0014eef:	53                   	push   ebx
c0014ef0:	51                   	push   ecx
c0014ef1:	52                   	push   edx
c0014ef2:	50                   	push   eax
c0014ef3:	68 0c aa 02 c0       	push   0xc002aa0c
c0014ef8:	e8 0e d6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014efd:	83 c4 20             	add    esp,0x20
c0014f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f06:	83 c0 03             	add    eax,0x3
c0014f09:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0b:	0f b6 d8             	movzx  ebx,al
c0014f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f14:	83 c0 02             	add    eax,0x2
c0014f17:	8a 00                	mov    al,BYTE PTR [eax]
c0014f19:	0f b6 c8             	movzx  ecx,al
c0014f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f22:	40                   	inc    eax
c0014f23:	8a 00                	mov    al,BYTE PTR [eax]
c0014f25:	0f b6 d0             	movzx  edx,al
c0014f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f30:	0f b6 c0             	movzx  eax,al
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	53                   	push   ebx
c0014f37:	51                   	push   ecx
c0014f38:	52                   	push   edx
c0014f39:	50                   	push   eax
c0014f3a:	68 34 aa 02 c0       	push   0xc002aa34
c0014f3f:	e8 c7 d5 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0014f44:	83 c4 20             	add    esp,0x20
c0014f47:	83 ec 0c             	sub    esp,0xc
c0014f4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f4d:	e8 54 f4 ff ff       	call   c00143a6 <displayDebugInfo(regs*)>
c0014f52:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f55:	5b                   	pop    ebx
c0014f56:	5e                   	pop    esi
c0014f57:	5d                   	pop    ebp
c0014f58:	c3                   	ret    

c0014f59 <displayProgramFault(char const*)>:
c0014f59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f67:	85 c0                	test   eax,eax
c0014f69:	74 15                	je     c0014f80 <displayProgramFault(char const*)+0x27>
c0014f6b:	83 ec 0c             	sub    esp,0xc
c0014f6e:	6a 04                	push   0x4
c0014f70:	6a 0f                	push   0xf
c0014f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f76:	50                   	push   eax
c0014f77:	e8 64 b5 ff ff       	call   c00104e0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f7c:	83 c4 1c             	add    esp,0x1c
c0014f7f:	c3                   	ret    
c0014f80:	c3                   	ret    

c0014f81 <setupInterruptController()>:
c0014f81:	55                   	push   ebp
c0014f82:	89 e5                	mov    ebp,esp
c0014f84:	53                   	push   ebx
c0014f85:	83 ec 24             	sub    esp,0x24
c0014f88:	b8 00 00 00 00       	mov    eax,0x0
c0014f8d:	85 c0                	test   eax,eax
c0014f8f:	0f 95 c0             	setne  al
c0014f92:	84 c0                	test   al,al
c0014f94:	74 5b                	je     c0014ff1 <setupInterruptController()+0x70>
c0014f96:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f9d:	83 ec 0c             	sub    esp,0xc
c0014fa0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014fa3:	e8 f4 a5 ff ff       	call   c000f59c <malloc>
c0014fa8:	83 c4 10             	add    esp,0x10
c0014fab:	89 c3                	mov    ebx,eax
c0014fad:	83 ec 0c             	sub    esp,0xc
c0014fb0:	53                   	push   ebx
c0014fb1:	e8 fe 04 01 00       	call   c00254b4 <APIC::APIC()>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014fbc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014fbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc4:	83 c0 08             	add    eax,0x8
c0014fc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc9:	6a 00                	push   0x0
c0014fcb:	6a 00                	push   0x0
c0014fcd:	6a 00                	push   0x0
c0014fcf:	52                   	push   edx
c0014fd0:	ff d0                	call   eax
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014fda:	83 ec 08             	sub    esp,0x8
c0014fdd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fe0:	50                   	push   eax
c0014fe1:	e8 5e e9 ff ff       	call   c0013944 <Device::addChild(Device*)>
c0014fe6:	83 c4 10             	add    esp,0x10
c0014fe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fec:	e9 79 03 00 00       	jmp    c001536a <setupInterruptController()+0x3e9>
c0014ff1:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c0014ff6:	84 c0                	test   al,al
c0014ff8:	75 14                	jne    c001500e <setupInterruptController()+0x8d>
c0014ffa:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0014fff:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015005:	83 e2 fe             	and    edx,0xfffffffe
c0015008:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001500e:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0015013:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015019:	83 e0 01             	and    eax,0x1
c001501c:	84 c0                	test   al,al
c001501e:	0f 95 c0             	setne  al
c0015021:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015024:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001502b:	83 ec 0c             	sub    esp,0xc
c001502e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015031:	e8 66 a5 ff ff       	call   c000f59c <malloc>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	89 c3                	mov    ebx,eax
c001503b:	83 ec 0c             	sub    esp,0xc
c001503e:	53                   	push   ebx
c001503f:	e8 c8 09 01 00       	call   c0025a0c <PIC::PIC()>
c0015044:	83 c4 10             	add    esp,0x10
c0015047:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001504a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001504d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015050:	8b 00                	mov    eax,DWORD PTR [eax]
c0015052:	83 c0 08             	add    eax,0x8
c0015055:	8b 00                	mov    eax,DWORD PTR [eax]
c0015057:	6a 00                	push   0x0
c0015059:	6a 00                	push   0x0
c001505b:	6a 00                	push   0x0
c001505d:	52                   	push   edx
c001505e:	ff d0                	call   eax
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015067:	74 73                	je     c00150dc <setupInterruptController()+0x15b>
c0015069:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001506c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015071:	83 c0 0c             	add    eax,0xc
c0015074:	8b 00                	mov    eax,DWORD PTR [eax]
c0015076:	6a 00                	push   0x0
c0015078:	6a 00                	push   0x0
c001507a:	6a 00                	push   0x0
c001507c:	52                   	push   edx
c001507d:	ff d0                	call   eax
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015086:	74 15                	je     c001509d <setupInterruptController()+0x11c>
c0015088:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001508b:	8b 00                	mov    eax,DWORD PTR [eax]
c001508d:	83 c0 04             	add    eax,0x4
c0015090:	8b 00                	mov    eax,DWORD PTR [eax]
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015098:	ff d0                	call   eax
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150aa:	e8 ed a4 ff ff       	call   c000f59c <malloc>
c00150af:	83 c4 10             	add    esp,0x10
c00150b2:	89 c3                	mov    ebx,eax
c00150b4:	83 ec 0c             	sub    esp,0xc
c00150b7:	53                   	push   ebx
c00150b8:	e8 f7 03 01 00       	call   c00254b4 <APIC::APIC()>
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150c3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cb:	83 c0 08             	add    eax,0x8
c00150ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d0:	6a 00                	push   0x0
c00150d2:	6a 00                	push   0x0
c00150d4:	6a 00                	push   0x0
c00150d6:	52                   	push   edx
c00150d7:	ff d0                	call   eax
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00150e1:	83 ec 08             	sub    esp,0x8
c00150e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150e7:	50                   	push   eax
c00150e8:	e8 57 e8 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	c7 05 28 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d728,0x0
c00150fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ff:	83 c0 24             	add    eax,0x24
c0015102:	8b 00                	mov    eax,DWORD PTR [eax]
c0015104:	6a 00                	push   0x0
c0015106:	68 1d 49 01 c0       	push   0xc001491d
c001510b:	6a 00                	push   0x0
c001510d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015110:	ff d0                	call   eax
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015118:	8b 00                	mov    eax,DWORD PTR [eax]
c001511a:	83 c0 24             	add    eax,0x24
c001511d:	8b 00                	mov    eax,DWORD PTR [eax]
c001511f:	6a 00                	push   0x0
c0015121:	68 1d 49 01 c0       	push   0xc001491d
c0015126:	6a 01                	push   0x1
c0015128:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001512b:	ff d0                	call   eax
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015133:	8b 00                	mov    eax,DWORD PTR [eax]
c0015135:	83 c0 24             	add    eax,0x24
c0015138:	8b 00                	mov    eax,DWORD PTR [eax]
c001513a:	6a 00                	push   0x0
c001513c:	68 03 42 01 c0       	push   0xc0014203
c0015141:	6a 02                	push   0x2
c0015143:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015146:	ff d0                	call   eax
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015150:	83 c0 24             	add    eax,0x24
c0015153:	8b 00                	mov    eax,DWORD PTR [eax]
c0015155:	6a 00                	push   0x0
c0015157:	68 1d 49 01 c0       	push   0xc001491d
c001515c:	6a 03                	push   0x3
c001515e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015161:	ff d0                	call   eax
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015169:	8b 00                	mov    eax,DWORD PTR [eax]
c001516b:	83 c0 24             	add    eax,0x24
c001516e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015170:	6a 00                	push   0x0
c0015172:	68 1d 49 01 c0       	push   0xc001491d
c0015177:	6a 04                	push   0x4
c0015179:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517c:	ff d0                	call   eax
c001517e:	83 c4 10             	add    esp,0x10
c0015181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015184:	8b 00                	mov    eax,DWORD PTR [eax]
c0015186:	83 c0 24             	add    eax,0x24
c0015189:	8b 00                	mov    eax,DWORD PTR [eax]
c001518b:	6a 00                	push   0x0
c001518d:	68 1d 49 01 c0       	push   0xc001491d
c0015192:	6a 05                	push   0x5
c0015194:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015197:	ff d0                	call   eax
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519f:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a1:	83 c0 24             	add    eax,0x24
c00151a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a6:	6a 00                	push   0x0
c00151a8:	68 3c 49 01 c0       	push   0xc001493c
c00151ad:	6a 06                	push   0x6
c00151af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b2:	ff d0                	call   eax
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bc:	83 c0 24             	add    eax,0x24
c00151bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c1:	6a 00                	push   0x0
c00151c3:	68 35 48 01 c0       	push   0xc0014835
c00151c8:	6a 07                	push   0x7
c00151ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151cd:	ff d0                	call   eax
c00151cf:	83 c4 10             	add    esp,0x10
c00151d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d7:	83 c0 24             	add    eax,0x24
c00151da:	8b 00                	mov    eax,DWORD PTR [eax]
c00151dc:	6a 00                	push   0x0
c00151de:	68 1e 40 01 c0       	push   0xc001401e
c00151e3:	6a 08                	push   0x8
c00151e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e8:	ff d0                	call   eax
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f2:	83 c0 24             	add    eax,0x24
c00151f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f7:	6a 00                	push   0x0
c00151f9:	68 1d 49 01 c0       	push   0xc001491d
c00151fe:	6a 09                	push   0x9
c0015200:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015203:	ff d0                	call   eax
c0015205:	83 c4 10             	add    esp,0x10
c0015208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520b:	8b 00                	mov    eax,DWORD PTR [eax]
c001520d:	83 c0 24             	add    eax,0x24
c0015210:	8b 00                	mov    eax,DWORD PTR [eax]
c0015212:	6a 00                	push   0x0
c0015214:	68 1d 49 01 c0       	push   0xc001491d
c0015219:	6a 0a                	push   0xa
c001521b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001521e:	ff d0                	call   eax
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015226:	8b 00                	mov    eax,DWORD PTR [eax]
c0015228:	83 c0 24             	add    eax,0x24
c001522b:	8b 00                	mov    eax,DWORD PTR [eax]
c001522d:	6a 00                	push   0x0
c001522f:	68 1d 49 01 c0       	push   0xc001491d
c0015234:	6a 0b                	push   0xb
c0015236:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015239:	ff d0                	call   eax
c001523b:	83 c4 10             	add    esp,0x10
c001523e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015241:	8b 00                	mov    eax,DWORD PTR [eax]
c0015243:	83 c0 24             	add    eax,0x24
c0015246:	8b 00                	mov    eax,DWORD PTR [eax]
c0015248:	6a 00                	push   0x0
c001524a:	68 1d 49 01 c0       	push   0xc001491d
c001524f:	6a 0c                	push   0xc
c0015251:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015254:	ff d0                	call   eax
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525c:	8b 00                	mov    eax,DWORD PTR [eax]
c001525e:	83 c0 24             	add    eax,0x24
c0015261:	8b 00                	mov    eax,DWORD PTR [eax]
c0015263:	6a 00                	push   0x0
c0015265:	68 a8 48 01 c0       	push   0xc00148a8
c001526a:	6a 0d                	push   0xd
c001526c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001526f:	ff d0                	call   eax
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015277:	8b 00                	mov    eax,DWORD PTR [eax]
c0015279:	83 c0 24             	add    eax,0x24
c001527c:	8b 00                	mov    eax,DWORD PTR [eax]
c001527e:	6a 00                	push   0x0
c0015280:	68 e1 48 01 c0       	push   0xc00148e1
c0015285:	6a 0e                	push   0xe
c0015287:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001528a:	ff d0                	call   eax
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015292:	8b 00                	mov    eax,DWORD PTR [eax]
c0015294:	83 c0 24             	add    eax,0x24
c0015297:	8b 00                	mov    eax,DWORD PTR [eax]
c0015299:	6a 00                	push   0x0
c001529b:	68 1d 49 01 c0       	push   0xc001491d
c00152a0:	6a 0f                	push   0xf
c00152a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a5:	ff d0                	call   eax
c00152a7:	83 c4 10             	add    esp,0x10
c00152aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00152af:	83 c0 24             	add    eax,0x24
c00152b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b4:	6a 00                	push   0x0
c00152b6:	68 1d 49 01 c0       	push   0xc001491d
c00152bb:	6a 10                	push   0x10
c00152bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c0:	ff d0                	call   eax
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ca:	83 c0 24             	add    eax,0x24
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	6a 00                	push   0x0
c00152d1:	68 1d 49 01 c0       	push   0xc001491d
c00152d6:	6a 11                	push   0x11
c00152d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152db:	ff d0                	call   eax
c00152dd:	83 c4 10             	add    esp,0x10
c00152e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e5:	83 c0 24             	add    eax,0x24
c00152e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ea:	6a 00                	push   0x0
c00152ec:	68 1d 49 01 c0       	push   0xc001491d
c00152f1:	6a 12                	push   0x12
c00152f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f6:	ff d0                	call   eax
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015300:	83 c0 24             	add    eax,0x24
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	6a 00                	push   0x0
c0015307:	68 1d 49 01 c0       	push   0xc001491d
c001530c:	6a 13                	push   0x13
c001530e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015311:	ff d0                	call   eax
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015319:	8b 00                	mov    eax,DWORD PTR [eax]
c001531b:	83 c0 24             	add    eax,0x24
c001531e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015320:	6a 00                	push   0x0
c0015322:	68 1d 49 01 c0       	push   0xc001491d
c0015327:	6a 14                	push   0x14
c0015329:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532c:	ff d0                	call   eax
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015334:	8b 00                	mov    eax,DWORD PTR [eax]
c0015336:	83 c0 24             	add    eax,0x24
c0015339:	8b 00                	mov    eax,DWORD PTR [eax]
c001533b:	6a 00                	push   0x0
c001533d:	68 1d 49 01 c0       	push   0xc001491d
c0015342:	6a 1e                	push   0x1e
c0015344:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015347:	ff d0                	call   eax
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015351:	83 c0 24             	add    eax,0x24
c0015354:	8b 00                	mov    eax,DWORD PTR [eax]
c0015356:	6a 00                	push   0x0
c0015358:	68 5a be 01 c0       	push   0xc001be5a
c001535d:	6a 60                	push   0x60
c001535f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015362:	ff d0                	call   eax
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001536d:	c9                   	leave  
c001536e:	c3                   	ret    
c001536f:	90                   	nop

c0015370 <InterruptController::convertLegacyIRQNumber(int)>:
c0015370:	55                   	push   ebp
c0015371:	89 e5                	mov    ebp,esp
c0015373:	83 ec 08             	sub    esp,0x8
c0015376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	50                   	push   eax
c001537d:	e8 c2 e8 ff ff       	call   c0013c44 <Device::getName()>
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	8a 00                	mov    al,BYTE PTR [eax]
c0015387:	3c 41                	cmp    al,0x41
c0015389:	0f 94 c0             	sete   al
c001538c:	84 c0                	test   al,al
c001538e:	74 28                	je     c00153b8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015390:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015394:	7f 12                	jg     c00153a8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015396:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015399:	05 00 c8 02 c0       	add    eax,0xc002c800
c001539e:	8a 00                	mov    al,BYTE PTR [eax]
c00153a0:	0f b6 c0             	movzx  eax,al
c00153a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00153a6:	eb 10                	jmp    c00153b8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00153a8:	83 ec 0c             	sub    esp,0xc
c00153ab:	68 5c aa 02 c0       	push   0xc002aa5c
c00153b0:	e8 b6 48 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153bb:	c9                   	leave  
c00153bc:	c3                   	ret    
c00153bd:	90                   	nop

c00153be <startGUI(void*)>:
c00153be:	55                   	push   ebp
c00153bf:	89 e5                	mov    ebp,esp
c00153c1:	53                   	push   ebx
c00153c2:	83 ec 04             	sub    esp,0x4
c00153c5:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00153ca:	48                   	dec    eax
c00153cb:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00153d0:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00153d5:	85 c0                	test   eax,eax
c00153d7:	75 01                	jne    c00153da <startGUI(void*)+0x1c>
c00153d9:	fb                   	sti    
c00153da:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c00153e0:	83 ec 08             	sub    esp,0x8
c00153e3:	6a 01                	push   0x1
c00153e5:	68 dc aa 02 c0       	push   0xc002aadc
c00153ea:	e8 46 7a 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	83 ec 08             	sub    esp,0x8
c00153f5:	53                   	push   ebx
c00153f6:	50                   	push   eax
c00153f7:	e8 67 7c 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0015405:	83 ec 08             	sub    esp,0x8
c0015408:	6a 01                	push   0x1
c001540a:	68 f6 aa 02 c0       	push   0xc002aaf6
c001540f:	e8 21 7a 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	83 ec 08             	sub    esp,0x8
c001541a:	53                   	push   ebx
c001541b:	50                   	push   eax
c001541c:	e8 42 7c 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	90                   	nop
c0015425:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015428:	c9                   	leave  
c0015429:	c3                   	ret    

c001542a <startGUIVESA(void*)>:
c001542a:	55                   	push   ebp
c001542b:	89 e5                	mov    ebp,esp
c001542d:	53                   	push   ebx
c001542e:	83 ec 04             	sub    esp,0x4
c0015431:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015436:	48                   	dec    eax
c0015437:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001543c:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015441:	85 c0                	test   eax,eax
c0015443:	75 01                	jne    c0015446 <startGUIVESA(void*)+0x1c>
c0015445:	fb                   	sti    
c0015446:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c001544c:	83 ec 08             	sub    esp,0x8
c001544f:	6a 01                	push   0x1
c0015451:	68 10 ab 02 c0       	push   0xc002ab10
c0015456:	e8 da 79 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	83 ec 08             	sub    esp,0x8
c0015461:	53                   	push   ebx
c0015462:	50                   	push   eax
c0015463:	e8 fb 7b 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0015471:	83 ec 08             	sub    esp,0x8
c0015474:	6a 01                	push   0x1
c0015476:	68 f6 aa 02 c0       	push   0xc002aaf6
c001547b:	e8 b5 79 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	83 ec 08             	sub    esp,0x8
c0015486:	53                   	push   ebx
c0015487:	50                   	push   eax
c0015488:	e8 d6 7b 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	90                   	nop
c0015491:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015494:	c9                   	leave  
c0015495:	c3                   	ret    

c0015496 <sendKeyToTerminal(unsigned char)>:
c0015496:	55                   	push   ebp
c0015497:	89 e5                	mov    ebp,esp
c0015499:	83 ec 28             	sub    esp,0x28
c001549c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00154a2:	a1 64 d6 02 c0       	mov    eax,ds:0xc002d664
c00154a7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00154ab:	83 ec 08             	sub    esp,0x8
c00154ae:	52                   	push   edx
c00154af:	50                   	push   eax
c00154b0:	e8 d1 b4 ff ff       	call   c0010986 <VgaText::receiveKey(unsigned char)>
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00154bc:	0f 85 8f 00 00 00    	jne    c0015551 <sendKeyToTerminal(unsigned char)+0xbb>
c00154c2:	fa                   	cli    
c00154c3:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c00154c8:	40                   	inc    eax
c00154c9:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c00154ce:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c00154d3:	40                   	inc    eax
c00154d4:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c00154d9:	a1 40 d7 02 c0       	mov    eax,ds:0xc002d740
c00154de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00154e1:	c7 05 40 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d740,0x0
c00154eb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00154ef:	74 1f                	je     c0015510 <sendKeyToTerminal(unsigned char)+0x7a>
c00154f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00154f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015506:	e8 6f 87 00 00       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	eb db                	jmp    c00154eb <sendKeyToTerminal(unsigned char)+0x55>
c0015510:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0015515:	48                   	dec    eax
c0015516:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001551b:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0015520:	85 c0                	test   eax,eax
c0015522:	75 18                	jne    c001553c <sendKeyToTerminal(unsigned char)+0xa6>
c0015524:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c0015529:	85 c0                	test   eax,eax
c001552b:	74 0f                	je     c001553c <sendKeyToTerminal(unsigned char)+0xa6>
c001552d:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c0015537:	e8 bb 82 00 00       	call   c001d7f7 <schedule()>
c001553c:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015541:	48                   	dec    eax
c0015542:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015547:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001554c:	85 c0                	test   eax,eax
c001554e:	75 01                	jne    c0015551 <sendKeyToTerminal(unsigned char)+0xbb>
c0015550:	fb                   	sti    
c0015551:	90                   	nop
c0015552:	c9                   	leave  
c0015553:	c3                   	ret    

c0015554 <sendKeyboardToken(KeyboardToken)>:
c0015554:	55                   	push   ebp
c0015555:	89 e5                	mov    ebp,esp
c0015557:	83 ec 18             	sub    esp,0x18
c001555a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001555d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015560:	0f b7 c0             	movzx  eax,ax
c0015563:	83 f2 01             	xor    edx,0x1
c0015566:	88 90 60 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28a0],dl
c001556c:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0015571:	85 c0                	test   eax,eax
c0015573:	74 24                	je     c0015599 <sendKeyboardToken(KeyboardToken)+0x45>
c0015575:	8b 0d 48 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d748
c001557b:	83 ec 04             	sub    esp,0x4
c001557e:	68 60 d7 02 c0       	push   0xc002d760
c0015583:	83 ec 08             	sub    esp,0x8
c0015586:	89 e2                	mov    edx,esp
c0015588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558b:	89 02                	mov    DWORD PTR [edx],eax
c001558d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015590:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015594:	ff d1                	call   ecx
c0015596:	83 c4 10             	add    esp,0x10
c0015599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559c:	66 3d 03 02          	cmp    ax,0x203
c00155a0:	75 07                	jne    c00155a9 <sendKeyboardToken(KeyboardToken)+0x55>
c00155a2:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c00155a7:	84 c0                	test   al,al
c00155a9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155ad:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155b0:	a0 68 db 02 c0       	mov    al,ds:0xc002db68
c00155b5:	38 c2                	cmp    dl,al
c00155b7:	74 1c                	je     c00155d5 <sendKeyboardToken(KeyboardToken)+0x81>
c00155b9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155bc:	a2 68 db 02 c0       	mov    ds:0xc002db68,al
c00155c1:	a0 68 db 02 c0       	mov    al,ds:0xc002db68
c00155c6:	0f b6 c0             	movzx  eax,al
c00155c9:	83 ec 0c             	sub    esp,0xc
c00155cc:	50                   	push   eax
c00155cd:	e8 f6 a9 ff ff       	call   c000ffc8 <setTerminalScrollLock(bool)>
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155d8:	84 c0                	test   al,al
c00155da:	0f 84 ae 00 00 00    	je     c001568e <sendKeyboardToken(KeyboardToken)+0x13a>
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	66 3d 10 03          	cmp    ax,0x310
c00155e7:	75 06                	jne    c00155ef <sendKeyboardToken(KeyboardToken)+0x9b>
c00155e9:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f2:	66 3d 11 03          	cmp    ax,0x311
c00155f6:	75 06                	jne    c00155fe <sendKeyboardToken(KeyboardToken)+0xaa>
c00155f8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015601:	66 3d 12 03          	cmp    ax,0x312
c0015605:	75 06                	jne    c001560d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015607:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001560d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015610:	66 3d 13 03          	cmp    ax,0x313
c0015614:	75 06                	jne    c001561c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015616:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001561c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561f:	66 3d 14 03          	cmp    ax,0x314
c0015623:	75 06                	jne    c001562b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015625:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562e:	66 3d 15 03          	cmp    ax,0x315
c0015632:	75 06                	jne    c001563a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015634:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001563a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563d:	66 3d 16 03          	cmp    ax,0x316
c0015641:	75 06                	jne    c0015649 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015643:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564c:	66 3d 17 03          	cmp    ax,0x317
c0015650:	75 06                	jne    c0015658 <sendKeyboardToken(KeyboardToken)+0x104>
c0015652:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565b:	66 3d 18 03          	cmp    ax,0x318
c001565f:	75 06                	jne    c0015667 <sendKeyboardToken(KeyboardToken)+0x113>
c0015661:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566a:	66 3d 19 03          	cmp    ax,0x319
c001566e:	75 06                	jne    c0015676 <sendKeyboardToken(KeyboardToken)+0x122>
c0015670:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015679:	66 3d 1a 03          	cmp    ax,0x31a
c001567d:	0f 85 c9 00 00 00    	jne    c001574c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015683:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015689:	e9 be 00 00 00       	jmp    c001574c <sendKeyboardToken(KeyboardToken)+0x1f8>
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	66 3d 10 03          	cmp    ax,0x310
c0015695:	75 0a                	jne    c00156a1 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015697:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001569d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	66 3d 11 03          	cmp    ax,0x311
c00156a8:	75 0a                	jne    c00156b4 <sendKeyboardToken(KeyboardToken)+0x160>
c00156aa:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b7:	66 3d 12 03          	cmp    ax,0x312
c00156bb:	75 0a                	jne    c00156c7 <sendKeyboardToken(KeyboardToken)+0x173>
c00156bd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	66 3d 13 03          	cmp    ax,0x313
c00156ce:	75 0a                	jne    c00156da <sendKeyboardToken(KeyboardToken)+0x186>
c00156d0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	66 3d 14 03          	cmp    ax,0x314
c00156e1:	75 0a                	jne    c00156ed <sendKeyboardToken(KeyboardToken)+0x199>
c00156e3:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f0:	66 3d 15 03          	cmp    ax,0x315
c00156f4:	75 0a                	jne    c0015700 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00156f6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015703:	66 3d 16 03          	cmp    ax,0x316
c0015707:	75 0a                	jne    c0015713 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015709:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001570f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	66 3d 17 03          	cmp    ax,0x317
c001571a:	75 0a                	jne    c0015726 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001571c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015722:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015729:	66 3d 18 03          	cmp    ax,0x318
c001572d:	75 0a                	jne    c0015739 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001572f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015735:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573c:	66 3d 19 03          	cmp    ax,0x319
c0015740:	75 0a                	jne    c001574c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015742:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015748:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001574c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574f:	66 3d 00 02          	cmp    ax,0x200
c0015753:	75 2c                	jne    c0015781 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015755:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c001575a:	83 f0 01             	xor    eax,0x1
c001575d:	84 c0                	test   al,al
c001575f:	74 20                	je     c0015781 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015761:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0015766:	6a 01                	push   0x1
c0015768:	6a 00                	push   0x0
c001576a:	68 be 53 01 c0       	push   0xc00153be
c001576f:	50                   	push   eax
c0015770:	e8 5d 7e 00 00       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c001577f:	eb 33                	jmp    c00157b4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015784:	66 3d 01 02          	cmp    ax,0x201
c0015788:	75 2a                	jne    c00157b4 <sendKeyboardToken(KeyboardToken)+0x260>
c001578a:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c001578f:	83 f0 01             	xor    eax,0x1
c0015792:	84 c0                	test   al,al
c0015794:	74 1e                	je     c00157b4 <sendKeyboardToken(KeyboardToken)+0x260>
c0015796:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001579b:	6a 01                	push   0x1
c001579d:	6a 00                	push   0x0
c001579f:	68 2a 54 01 c0       	push   0xc001542a
c00157a4:	50                   	push   eax
c00157a5:	e8 28 7e 00 00       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c00157b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b7:	66 3d 1d 03          	cmp    ax,0x31d
c00157bb:	75 06                	jne    c00157c3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00157bd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	66 3d 1c 03          	cmp    ax,0x31c
c00157ca:	75 06                	jne    c00157d2 <sendKeyboardToken(KeyboardToken)+0x27e>
c00157cc:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d5:	66 3d 1b 03          	cmp    ax,0x31b
c00157d9:	75 06                	jne    c00157e1 <sendKeyboardToken(KeyboardToken)+0x28d>
c00157db:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e4:	66 3d 1e 03          	cmp    ax,0x31e
c00157e8:	75 06                	jne    c00157f0 <sendKeyboardToken(KeyboardToken)+0x29c>
c00157ea:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	66 3d 1f 03          	cmp    ax,0x31f
c00157f7:	75 06                	jne    c00157ff <sendKeyboardToken(KeyboardToken)+0x2ab>
c00157f9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	66 3d 1a 03          	cmp    ax,0x31a
c0015806:	75 06                	jne    c001580e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015808:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001580e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015812:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015815:	83 f0 01             	xor    eax,0x1
c0015818:	84 c0                	test   al,al
c001581a:	74 77                	je     c0015893 <sendKeyboardToken(KeyboardToken)+0x33f>
c001581c:	a0 61 d8 02 c0       	mov    al,ds:0xc002d861
c0015821:	84 c0                	test   al,al
c0015823:	74 41                	je     c0015866 <sendKeyboardToken(KeyboardToken)+0x312>
c0015825:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015829:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001582d:	74 2b                	je     c001585a <sendKeyboardToken(KeyboardToken)+0x306>
c001582f:	8b 15 64 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db64
c0015835:	89 d0                	mov    eax,edx
c0015837:	c1 e0 02             	shl    eax,0x2
c001583a:	01 d0                	add    eax,edx
c001583c:	01 c0                	add    eax,eax
c001583e:	a3 64 db 02 c0       	mov    ds:0xc002db64,eax
c0015843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015846:	0f b7 c0             	movzx  eax,ax
c0015849:	8d 50 d0             	lea    edx,[eax-0x30]
c001584c:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015851:	01 d0                	add    eax,edx
c0015853:	a3 64 db 02 c0       	mov    ds:0xc002db64,eax
c0015858:	eb 6d                	jmp    c00158c7 <sendKeyboardToken(KeyboardToken)+0x373>
c001585a:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c0015864:	eb 61                	jmp    c00158c7 <sendKeyboardToken(KeyboardToken)+0x373>
c0015866:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c001586b:	85 c0                	test   eax,eax
c001586d:	74 18                	je     c0015887 <sendKeyboardToken(KeyboardToken)+0x333>
c001586f:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c0015874:	0f b6 c0             	movzx  eax,al
c0015877:	83 ec 0c             	sub    esp,0xc
c001587a:	50                   	push   eax
c001587b:	e8 16 fc ff ff       	call   c0015496 <sendKeyToTerminal(unsigned char)>
c0015880:	83 c4 10             	add    esp,0x10
c0015883:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015887:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c0015891:	eb 34                	jmp    c00158c7 <sendKeyboardToken(KeyboardToken)+0x373>
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	66 3d 01 01          	cmp    ax,0x101
c001589a:	75 2b                	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x373>
c001589c:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c00158a1:	85 c0                	test   eax,eax
c00158a3:	74 18                	je     c00158bd <sendKeyboardToken(KeyboardToken)+0x369>
c00158a5:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c00158aa:	0f b6 c0             	movzx  eax,al
c00158ad:	83 ec 0c             	sub    esp,0xc
c00158b0:	50                   	push   eax
c00158b1:	e8 e0 fb ff ff       	call   c0015496 <sendKeyToTerminal(unsigned char)>
c00158b6:	83 c4 10             	add    esp,0x10
c00158b9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158bd:	c7 05 64 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db64,0x0
c00158c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158ca:	83 f0 01             	xor    eax,0x1
c00158cd:	84 c0                	test   al,al
c00158cf:	74 4c                	je     c001591d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158d4:	83 f0 01             	xor    eax,0x1
c00158d7:	84 c0                	test   al,al
c00158d9:	74 42                	je     c001591d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158db:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c00158e0:	83 f0 01             	xor    eax,0x1
c00158e3:	84 c0                	test   al,al
c00158e5:	74 36                	je     c001591d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ea:	66 83 f8 1f          	cmp    ax,0x1f
c00158ee:	76 09                	jbe    c00158f9 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00158f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f3:	66 83 f8 7e          	cmp    ax,0x7e
c00158f7:	76 12                	jbe    c001590b <sendKeyboardToken(KeyboardToken)+0x3b7>
c00158f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fc:	66 83 f8 0a          	cmp    ax,0xa
c0015900:	74 09                	je     c001590b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015905:	66 83 f8 08          	cmp    ax,0x8
c0015909:	75 12                	jne    c001591d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590e:	0f b6 c0             	movzx  eax,al
c0015911:	83 ec 0c             	sub    esp,0xc
c0015914:	50                   	push   eax
c0015915:	e8 7c fb ff ff       	call   c0015496 <sendKeyToTerminal(unsigned char)>
c001591a:	83 c4 10             	add    esp,0x10
c001591d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015920:	83 f0 01             	xor    eax,0x1
c0015923:	84 c0                	test   al,al
c0015925:	74 4f                	je     c0015976 <sendKeyboardToken(KeyboardToken)+0x422>
c0015927:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001592a:	83 f0 01             	xor    eax,0x1
c001592d:	84 c0                	test   al,al
c001592f:	74 45                	je     c0015976 <sendKeyboardToken(KeyboardToken)+0x422>
c0015931:	a0 60 d8 02 c0       	mov    al,ds:0xc002d860
c0015936:	84 c0                	test   al,al
c0015938:	74 3c                	je     c0015976 <sendKeyboardToken(KeyboardToken)+0x422>
c001593a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593d:	66 83 f8 3f          	cmp    ax,0x3f
c0015941:	76 33                	jbe    c0015976 <sendKeyboardToken(KeyboardToken)+0x422>
c0015943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015946:	66 83 f8 7f          	cmp    ax,0x7f
c001594a:	77 2a                	ja     c0015976 <sendKeyboardToken(KeyboardToken)+0x422>
c001594c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594f:	88 c2                	mov    dl,al
c0015951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015954:	66 83 f8 5f          	cmp    ax,0x5f
c0015958:	76 04                	jbe    c001595e <sendKeyboardToken(KeyboardToken)+0x40a>
c001595a:	b0 20                	mov    al,0x20
c001595c:	eb 02                	jmp    c0015960 <sendKeyboardToken(KeyboardToken)+0x40c>
c001595e:	b0 00                	mov    al,0x0
c0015960:	29 c2                	sub    edx,eax
c0015962:	88 d0                	mov    al,dl
c0015964:	83 e8 40             	sub    eax,0x40
c0015967:	0f b6 c0             	movzx  eax,al
c001596a:	83 ec 0c             	sub    esp,0xc
c001596d:	50                   	push   eax
c001596e:	e8 23 fb ff ff       	call   c0015496 <sendKeyToTerminal(unsigned char)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015979:	66 3d 00 03          	cmp    ax,0x300
c001597d:	75 0f                	jne    c001598e <sendKeyboardToken(KeyboardToken)+0x43a>
c001597f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015982:	83 f0 01             	xor    eax,0x1
c0015985:	84 c0                	test   al,al
c0015987:	74 05                	je     c001598e <sendKeyboardToken(KeyboardToken)+0x43a>
c0015989:	e8 ab a9 ff ff       	call   c0010339 <doTerminalCycle()>
c001598e:	90                   	nop
c001598f:	c9                   	leave  
c0015990:	c3                   	ret    

c0015991 <clearInternalKeybuffer(VgaText*)>:
c0015991:	55                   	push   ebp
c0015992:	89 e5                	mov    ebp,esp
c0015994:	83 ec 08             	sub    esp,0x8
c0015997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599a:	05 98 01 00 00       	add    eax,0x198
c001599f:	83 ec 0c             	sub    esp,0xc
c00159a2:	50                   	push   eax
c00159a3:	e8 c4 ad fe ff       	call   c000076c <strlen>
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159ae:	81 c2 98 01 00 00    	add    edx,0x198
c00159b4:	83 ec 04             	sub    esp,0x4
c00159b7:	50                   	push   eax
c00159b8:	6a 00                	push   0x0
c00159ba:	52                   	push   edx
c00159bb:	e8 90 ad fe ff       	call   c0000750 <memset>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	90                   	nop
c00159c4:	c9                   	leave  
c00159c5:	c3                   	ret    

c00159c6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159c6:	55                   	push   ebp
c00159c7:	89 e5                	mov    ebp,esp
c00159c9:	83 ec 18             	sub    esp,0x18
c00159cc:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00159d1:	85 c0                	test   eax,eax
c00159d3:	74 2a                	je     c00159ff <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00159d5:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00159db:	8b 0d 48 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d748
c00159e1:	83 ec 04             	sub    esp,0x4
c00159e4:	68 60 d7 02 c0       	push   0xc002d760
c00159e9:	83 ec 08             	sub    esp,0x8
c00159ec:	89 e2                	mov    edx,esp
c00159ee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00159f1:	89 02                	mov    DWORD PTR [edx],eax
c00159f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159f6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00159fa:	ff d1                	call   ecx
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	fb                   	sti    
c0015a00:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015a07:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015a0b:	0f 84 a1 00 00 00    	je     c0015ab2 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a14:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a1a:	84 c0                	test   al,al
c0015a1c:	75 28                	jne    c0015a46 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015a1e:	fa                   	cli    
c0015a1f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a24:	40                   	inc    eax
c0015a25:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015a2a:	e8 c8 7d 00 00       	call   c001d7f7 <schedule()>
c0015a2f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a34:	48                   	dec    eax
c0015a35:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0015a3a:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0015a3f:	85 c0                	test   eax,eax
c0015a41:	75 ce                	jne    c0015a11 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a43:	fb                   	sti    
c0015a44:	eb cb                	jmp    c0015a11 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a49:	8d 50 01             	lea    edx,[eax+0x1]
c0015a4c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a52:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015a58:	88 10                	mov    BYTE PTR [eax],dl
c0015a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5d:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a63:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a69:	05 98 01 00 00       	add    eax,0x198
c0015a6e:	83 ec 0c             	sub    esp,0xc
c0015a71:	50                   	push   eax
c0015a72:	e8 f5 ac fe ff       	call   c000076c <strlen>
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a7d:	81 c2 98 01 00 00    	add    edx,0x198
c0015a83:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a89:	81 c2 98 01 00 00    	add    edx,0x198
c0015a8f:	83 ec 04             	sub    esp,0x4
c0015a92:	50                   	push   eax
c0015a93:	51                   	push   ecx
c0015a94:	52                   	push   edx
c0015a95:	e8 ee ab fe ff       	call   c0000688 <memmove>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015aa0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015aa3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015aa7:	0f 85 5a ff ff ff    	jne    c0015a07 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015aad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab0:	eb 03                	jmp    c0015ab5 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015ab2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab5:	c9                   	leave  
c0015ab6:	c3                   	ret    
c0015ab7:	90                   	nop

c0015ab8 <Keyboard::Keyboard(char const*)>:
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015abf:	83 ec 08             	sub    esp,0x8
c0015ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ac6:	50                   	push   eax
c0015ac7:	e8 7c e0 ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015acc:	83 c4 10             	add    esp,0x10
c0015acf:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0015ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad8:	89 10                	mov    DWORD PTR [eax],edx
c0015ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ade:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ae8:	c6 05 44 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d744,0x1
c0015aef:	90                   	nop
c0015af0:	83 c4 0c             	add    esp,0xc
c0015af3:	c3                   	ret    

c0015af4 <Keyboard::~Keyboard()>:
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	ba 34 ab 02 c0       	mov    edx,0xc002ab34
c0015afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b00:	89 10                	mov    DWORD PTR [eax],edx
c0015b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	50                   	push   eax
c0015b0a:	e8 03 dd ff ff       	call   c0013812 <Device::~Device()>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	90                   	nop
c0015b13:	83 c4 0c             	add    esp,0xc
c0015b16:	c3                   	ret    
c0015b17:	90                   	nop

c0015b18 <Keyboard::~Keyboard()>:
c0015b18:	83 ec 0c             	sub    esp,0xc
c0015b1b:	83 ec 0c             	sub    esp,0xc
c0015b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b22:	e8 cd ff ff ff       	call   c0015af4 <Keyboard::~Keyboard()>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	83 ec 08             	sub    esp,0x8
c0015b2d:	68 5c 01 00 00       	push   0x15c
c0015b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b36:	e8 f8 c8 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	83 c4 0c             	add    esp,0xc
c0015b41:	c3                   	ret    

c0015b42 <LogicalDisk::close(int, int, void*)>:
c0015b42:	83 c8 ff             	or     eax,0xffffffff
c0015b45:	c3                   	ret    

c0015b46 <LogicalDisk::~LogicalDisk()>:
c0015b46:	83 ec 0c             	sub    esp,0xc
c0015b49:	ba ac ab 02 c0       	mov    edx,0xc002abac
c0015b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b52:	89 10                	mov    DWORD PTR [eax],edx
c0015b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b58:	83 ec 0c             	sub    esp,0xc
c0015b5b:	50                   	push   eax
c0015b5c:	e8 b1 dc ff ff       	call   c0013812 <Device::~Device()>
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	90                   	nop
c0015b65:	83 c4 0c             	add    esp,0xc
c0015b68:	c3                   	ret    
c0015b69:	90                   	nop

c0015b6a <LogicalDisk::~LogicalDisk()>:
c0015b6a:	83 ec 0c             	sub    esp,0xc
c0015b6d:	83 ec 0c             	sub    esp,0xc
c0015b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b74:	e8 cd ff ff ff       	call   c0015b46 <LogicalDisk::~LogicalDisk()>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	83 ec 08             	sub    esp,0x8
c0015b7f:	68 74 01 00 00       	push   0x174
c0015b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b88:	e8 a6 c8 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 c4 0c             	add    esp,0xc
c0015b93:	c3                   	ret    

c0015b94 <LogicalDisk::open(int, int, void*)>:
c0015b94:	83 ec 18             	sub    esp,0x18
c0015b97:	68 60 ab 02 c0       	push   0xc002ab60
c0015b9c:	e8 ca 40 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0015ba1:	83 c8 ff             	or     eax,0xffffffff
c0015ba4:	83 c4 1c             	add    esp,0x1c
c0015ba7:	c3                   	ret    

c0015ba8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ba8:	53                   	push   ebx
c0015ba9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015bad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bb5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015bbb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015bc1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015bc7:	77 10                	ja     c0015bd9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015bc9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015bcf:	89 d3                	mov    ebx,edx
c0015bd1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015bd7:	72 05                	jb     c0015bde <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015bd9:	83 c8 ff             	or     eax,0xffffffff
c0015bdc:	89 c2                	mov    edx,eax
c0015bde:	5b                   	pop    ebx
c0015bdf:	c3                   	ret    

c0015be0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015be0:	56                   	push   esi
c0015be1:	83 c8 ff             	or     eax,0xffffffff
c0015be4:	53                   	push   ebx
c0015be5:	89 c2                	mov    edx,eax
c0015be7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015beb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015bef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bf3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bf9:	77 27                	ja     c0015c22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bfb:	89 d8                	mov    eax,ebx
c0015bfd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015c03:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015c09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c0e:	89 c2                	mov    edx,eax
c0015c10:	73 10                	jae    c0015c22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c12:	89 c8                	mov    eax,ecx
c0015c14:	89 da                	mov    edx,ebx
c0015c16:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c1c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c22:	5b                   	pop    ebx
c0015c23:	5e                   	pop    esi
c0015c24:	c3                   	ret    
c0015c25:	90                   	nop

c0015c26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c26:	83 ec 1c             	sub    esp,0x1c
c0015c29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c4c:	83 ec 08             	sub    esp,0x8
c0015c4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c53:	50                   	push   eax
c0015c54:	e8 ef de ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015c59:	83 c4 10             	add    esp,0x10
c0015c5c:	ba ac ab 02 c0       	mov    edx,0xc002abac
c0015c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c65:	89 10                	mov    DWORD PTR [eax],edx
c0015c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c76:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c81:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c8b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c97:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c9d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ca3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ca7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015caa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cae:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015cb4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015cc2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ccc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cd6:	90                   	nop
c0015cd7:	83 c4 1c             	add    esp,0x1c
c0015cda:	c3                   	ret    
c0015cdb:	90                   	nop

c0015cdc <LogicalDisk::assignDriveLetter()>:
c0015cdc:	55                   	push   ebp
c0015cdd:	57                   	push   edi
c0015cde:	56                   	push   esi
c0015cdf:	53                   	push   ebx
c0015ce0:	83 ec 14             	sub    esp,0x14
c0015ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ce7:	8b 3d 80 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db80
c0015ced:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015cf3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015cf7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015cfd:	8b 3d 84 db 02 c0    	mov    edi,DWORD PTR ds:0xc002db84
c0015d03:	3c 01                	cmp    al,0x1
c0015d05:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015d09:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015d0d:	19 c0                	sbb    eax,eax
c0015d0f:	83 e0 02             	and    eax,0x2
c0015d12:	83 c0 41             	add    eax,0x41
c0015d15:	0f be e8             	movsx  ebp,al
c0015d18:	3c 43                	cmp    al,0x43
c0015d1a:	75 10                	jne    c0015d2c <LogicalDisk::assignDriveLetter()+0x50>
c0015d1c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d23:	75 5d                	jne    c0015d82 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d25:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d2a:	75 56                	jne    c0015d82 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d2c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d2f:	ba 01 00 00 00       	mov    edx,0x1
c0015d34:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d38:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d3c:	d3 e2                	shl    edx,cl
c0015d3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d42:	89 d7                	mov    edi,edx
c0015d44:	89 d6                	mov    esi,edx
c0015d46:	c1 ff 1f             	sar    edi,0x1f
c0015d49:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d4d:	21 f9                	and    ecx,edi
c0015d4f:	09 d1                	or     ecx,edx
c0015d51:	75 2f                	jne    c0015d82 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d53:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d5b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d61:	09 f2                	or     edx,esi
c0015d63:	89 15 80 db 02 c0    	mov    DWORD PTR ds:0xc002db80,edx
c0015d69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d6d:	09 fa                	or     edx,edi
c0015d6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d73:	89 15 84 db 02 c0    	mov    DWORD PTR ds:0xc002db84,edx
c0015d79:	89 1c bd a0 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2460],ebx
c0015d80:	eb 08                	jmp    c0015d8a <LogicalDisk::assignDriveLetter()+0xae>
c0015d82:	45                   	inc    ebp
c0015d83:	40                   	inc    eax
c0015d84:	3c 5b                	cmp    al,0x5b
c0015d86:	75 90                	jne    c0015d18 <LogicalDisk::assignDriveLetter()+0x3c>
c0015d88:	31 c0                	xor    eax,eax
c0015d8a:	83 c4 14             	add    esp,0x14
c0015d8d:	5b                   	pop    ebx
c0015d8e:	5e                   	pop    esi
c0015d8f:	5f                   	pop    edi
c0015d90:	5d                   	pop    ebp
c0015d91:	c3                   	ret    

c0015d92 <LogicalDisk::mount()>:
c0015d92:	56                   	push   esi
c0015d93:	53                   	push   ebx
c0015d94:	53                   	push   ebx
c0015d95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d99:	8b 1d 14 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d714
c0015d9f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015da9:	85 db                	test   ebx,ebx
c0015dab:	74 27                	je     c0015dd4 <LogicalDisk::mount()+0x42>
c0015dad:	51                   	push   ecx
c0015dae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015db5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015db7:	83 e8 41             	sub    eax,0x41
c0015dba:	50                   	push   eax
c0015dbb:	56                   	push   esi
c0015dbc:	53                   	push   ebx
c0015dbd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	84 c0                	test   al,al
c0015dc5:	74 08                	je     c0015dcf <LogicalDisk::mount()+0x3d>
c0015dc7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015dcd:	eb 07                	jmp    c0015dd6 <LogicalDisk::mount()+0x44>
c0015dcf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015dd2:	eb d5                	jmp    c0015da9 <LogicalDisk::mount()+0x17>
c0015dd4:	31 c0                	xor    eax,eax
c0015dd6:	5a                   	pop    edx
c0015dd7:	5b                   	pop    ebx
c0015dd8:	5e                   	pop    esi
c0015dd9:	c3                   	ret    

c0015dda <LogicalDisk::unmount()>:
c0015dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dde:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015de8:	c3                   	ret    
c0015de9:	90                   	nop

c0015dea <LogicalDisk::eject()>:
c0015dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015df4:	8b 10                	mov    edx,DWORD PTR [eax]
c0015df6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dfa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015dfd:	90                   	nop

c0015dfe <LogicalDisk::unassignDriveLetter()>:
c0015dfe:	57                   	push   edi
c0015dff:	56                   	push   esi
c0015e00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e04:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015e0b:	84 c9                	test   cl,cl
c0015e0d:	75 0f                	jne    c0015e1e <LogicalDisk::unassignDriveLetter()+0x20>
c0015e0f:	c7 44 24 0c 84 ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ab84
c0015e17:	5e                   	pop    esi
c0015e18:	5f                   	pop    edi
c0015e19:	e9 4d 3e 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c0015e1e:	83 e9 41             	sub    ecx,0x41
c0015e21:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e28:	b8 01 00 00 00       	mov    eax,0x1
c0015e2d:	c7 04 8d a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2460],0x0
c0015e38:	d3 e0                	shl    eax,cl
c0015e3a:	89 c7                	mov    edi,eax
c0015e3c:	f7 d0                	not    eax
c0015e3e:	c1 ff 1f             	sar    edi,0x1f
c0015e41:	21 05 80 db 02 c0    	and    DWORD PTR ds:0xc002db80,eax
c0015e47:	89 fe                	mov    esi,edi
c0015e49:	f7 d6                	not    esi
c0015e4b:	21 35 84 db 02 c0    	and    DWORD PTR ds:0xc002db84,esi
c0015e51:	5e                   	pop    esi
c0015e52:	5f                   	pop    edi
c0015e53:	c3                   	ret    

c0015e54 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e54:	57                   	push   edi
c0015e55:	56                   	push   esi
c0015e56:	53                   	push   ebx
c0015e57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e67:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e6d:	77 41                	ja     c0015eb0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e6f:	99                   	cdq    
c0015e70:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e76:	01 c8                	add    eax,ecx
c0015e78:	11 da                	adc    edx,ebx
c0015e7a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e80:	19 d7                	sbb    edi,edx
c0015e82:	72 33                	jb     c0015eb7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e84:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e8a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e90:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e94:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e98:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ea8:	5b                   	pop    ebx
c0015ea9:	5e                   	pop    esi
c0015eaa:	5f                   	pop    edi
c0015eab:	e9 cc 0a 00 00       	jmp    c001697c <VCache::read(unsigned long long, int, void*)>
c0015eb0:	b8 05 00 00 00       	mov    eax,0x5
c0015eb5:	eb 05                	jmp    c0015ebc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015eb7:	b8 07 00 00 00       	mov    eax,0x7
c0015ebc:	5b                   	pop    ebx
c0015ebd:	5e                   	pop    esi
c0015ebe:	5f                   	pop    edi
c0015ebf:	c3                   	ret    

c0015ec0 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015ec0:	57                   	push   edi
c0015ec1:	56                   	push   esi
c0015ec2:	53                   	push   ebx
c0015ec3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ec7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ecb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ecf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ed3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ed9:	77 41                	ja     c0015f1c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015edb:	99                   	cdq    
c0015edc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ee2:	01 c8                	add    eax,ecx
c0015ee4:	11 da                	adc    edx,ebx
c0015ee6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015eec:	19 d7                	sbb    edi,edx
c0015eee:	72 33                	jb     c0015f23 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015ef0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ef6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015efc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f00:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f04:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f14:	5b                   	pop    ebx
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	e9 76 09 00 00       	jmp    c0016892 <VCache::write(unsigned long long, int, void*)>
c0015f1c:	b8 05 00 00 00       	mov    eax,0x5
c0015f21:	eb 05                	jmp    c0015f28 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f23:	b8 07 00 00 00       	mov    eax,0x7
c0015f28:	5b                   	pop    ebx
c0015f29:	5e                   	pop    esi
c0015f2a:	5f                   	pop    edi
c0015f2b:	c3                   	ret    

c0015f2c <Mouse::Mouse(char const*)>:
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f33:	83 ec 08             	sub    esp,0x8
c0015f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f3a:	50                   	push   eax
c0015f3b:	e8 08 dc ff ff       	call   c0013b48 <Device::Device(char const*)>
c0015f40:	83 c4 10             	add    esp,0x10
c0015f43:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0015f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4c:	89 10                	mov    DWORD PTR [eax],edx
c0015f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f52:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f5c:	90                   	nop
c0015f5d:	83 c4 0c             	add    esp,0xc
c0015f60:	c3                   	ret    
c0015f61:	90                   	nop

c0015f62 <Mouse::~Mouse()>:
c0015f62:	83 ec 0c             	sub    esp,0xc
c0015f65:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0015f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f6e:	89 10                	mov    DWORD PTR [eax],edx
c0015f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	50                   	push   eax
c0015f78:	e8 95 d8 ff ff       	call   c0013812 <Device::~Device()>
c0015f7d:	83 c4 10             	add    esp,0x10
c0015f80:	90                   	nop
c0015f81:	83 c4 0c             	add    esp,0xc
c0015f84:	c3                   	ret    
c0015f85:	90                   	nop

c0015f86 <Mouse::~Mouse()>:
c0015f86:	83 ec 0c             	sub    esp,0xc
c0015f89:	83 ec 0c             	sub    esp,0xc
c0015f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f90:	e8 cd ff ff ff       	call   c0015f62 <Mouse::~Mouse()>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	83 ec 08             	sub    esp,0x8
c0015f9b:	68 58 01 00 00       	push   0x158
c0015fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fa4:	e8 8a c4 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0015fa9:	83 c4 10             	add    esp,0x10
c0015fac:	83 c4 0c             	add    esp,0xc
c0015faf:	c3                   	ret    

c0015fb0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fb0:	55                   	push   ebp
c0015fb1:	57                   	push   edi
c0015fb2:	56                   	push   esi
c0015fb3:	53                   	push   ebx
c0015fb4:	81 ec 28 01 00 00    	sub    esp,0x128
c0015fba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015fc1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015fc8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015fcf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fda:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fde:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fe5:	e8 5a dc ff ff       	call   c0013c44 <Device::getName()>
c0015fea:	5a                   	pop    edx
c0015feb:	59                   	pop    ecx
c0015fec:	50                   	push   eax
c0015fed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015ff1:	55                   	push   ebp
c0015ff2:	e8 15 a8 fe ff       	call   c000080c <strcpy>
c0015ff7:	5b                   	pop    ebx
c0015ff8:	58                   	pop    eax
c0015ff9:	68 fc ab 02 c0       	push   0xc002abfc
c0015ffe:	55                   	push   ebp
c0015fff:	e8 48 a9 fe ff       	call   c000094c <strcat>
c0016004:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001600b:	e8 8c 95 ff ff       	call   c000f59c <malloc>
c0016010:	83 c4 0c             	add    esp,0xc
c0016013:	89 c3                	mov    ebx,eax
c0016015:	57                   	push   edi
c0016016:	56                   	push   esi
c0016017:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001601b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001601f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016026:	55                   	push   ebp
c0016027:	50                   	push   eax
c0016028:	e8 f9 fb ff ff       	call   c0015c26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001602d:	83 c4 14             	add    esp,0x14
c0016030:	53                   	push   ebx
c0016031:	e8 a6 fc ff ff       	call   c0015cdc <LogicalDisk::assignDriveLetter()>
c0016036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016039:	e8 54 fd ff ff       	call   c0015d92 <LogicalDisk::mount()>
c001603e:	58                   	pop    eax
c001603f:	5a                   	pop    edx
c0016040:	53                   	push   ebx
c0016041:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016048:	e8 f7 d8 ff ff       	call   c0013944 <Device::addChild(Device*)>
c001604d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016053:	5b                   	pop    ebx
c0016054:	5e                   	pop    esi
c0016055:	5f                   	pop    edi
c0016056:	5d                   	pop    ebp
c0016057:	c3                   	ret    

c0016058 <createPartitionsForDisk(PhysicalDisk*)>:
c0016058:	55                   	push   ebp
c0016059:	57                   	push   edi
c001605a:	56                   	push   esi
c001605b:	53                   	push   ebx
c001605c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016062:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016069:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001606f:	3d 00 02 00 00       	cmp    eax,0x200
c0016074:	74 27                	je     c001609d <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016076:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001607c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016082:	83 ec 10             	sub    esp,0x10
c0016085:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016089:	99                   	cdq    
c001608a:	c1 e6 0a             	shl    esi,0xa
c001608d:	52                   	push   edx
c001608e:	89 fd                	mov    ebp,edi
c0016090:	50                   	push   eax
c0016091:	55                   	push   ebp
c0016092:	56                   	push   esi
c0016093:	e8 ac 04 01 00       	call   c0026544 <__udivdi3>
c0016098:	e9 b1 00 00 00       	jmp    c001614e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001609d:	83 ec 0c             	sub    esp,0xc
c00160a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160a2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00160a6:	56                   	push   esi
c00160a7:	6a 01                	push   0x1
c00160a9:	6a 00                	push   0x0
c00160ab:	6a 00                	push   0x0
c00160ad:	53                   	push   ebx
c00160ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00160b1:	83 c4 20             	add    esp,0x20
c00160b4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00160bc:	75 0a                	jne    c00160c8 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00160be:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160c6:	74 2c                	je     c00160f4 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160ce:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160da:	83 ec 10             	sub    esp,0x10
c00160dd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160e1:	89 f7                	mov    edi,esi
c00160e3:	c1 e0 0a             	shl    eax,0xa
c00160e6:	c1 ff 1f             	sar    edi,0x1f
c00160e9:	57                   	push   edi
c00160ea:	56                   	push   esi
c00160eb:	52                   	push   edx
c00160ec:	50                   	push   eax
c00160ed:	e8 52 04 01 00       	call   c0026544 <__udivdi3>
c00160f2:	eb 5a                	jmp    c001614e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160f4:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160fb:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016102:	83 e1 7f             	and    ecx,0x7f
c0016105:	83 e0 7f             	and    eax,0x7f
c0016108:	01 c1                	add    ecx,eax
c001610a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016111:	83 e0 7f             	and    eax,0x7f
c0016114:	01 c1                	add    ecx,eax
c0016116:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001611d:	83 e0 7f             	and    eax,0x7f
c0016120:	00 c1                	add    cl,al
c0016122:	74 41                	je     c0016165 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016124:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001612a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016130:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016136:	83 ec 10             	sub    esp,0x10
c0016139:	0f a4 c2 0a          	shld   edx,eax,0xa
c001613d:	89 f7                	mov    edi,esi
c001613f:	c1 e0 0a             	shl    eax,0xa
c0016142:	c1 ff 1f             	sar    edi,0x1f
c0016145:	57                   	push   edi
c0016146:	56                   	push   esi
c0016147:	52                   	push   edx
c0016148:	50                   	push   eax
c0016149:	e8 f6 03 01 00       	call   c0026544 <__udivdi3>
c001614e:	83 c4 14             	add    esp,0x14
c0016151:	52                   	push   edx
c0016152:	50                   	push   eax
c0016153:	6a 00                	push   0x0
c0016155:	6a 00                	push   0x0
c0016157:	53                   	push   ebx
c0016158:	e8 53 fe ff ff       	call   c0015fb0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001615d:	83 c4 20             	add    esp,0x20
c0016160:	e9 79 01 00 00       	jmp    c00162de <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016165:	89 f0                	mov    eax,esi
c0016167:	31 f6                	xor    esi,esi
c0016169:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016170:	75 02                	jne    c0016174 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016172:	89 f1                	mov    ecx,esi
c0016174:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001617b:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016182:	c1 e2 08             	shl    edx,0x8
c0016185:	c1 e7 10             	shl    edi,0x10
c0016188:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016190:	09 fa                	or     edx,edi
c0016192:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001619a:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00161a1:	83 c0 10             	add    eax,0x10
c00161a4:	09 fa                	or     edx,edi
c00161a6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00161ad:	c1 e7 18             	shl    edi,0x18
c00161b0:	09 fa                	or     edx,edi
c00161b2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00161b9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00161bd:	c1 e7 10             	shl    edi,0x10
c00161c0:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161c7:	c1 e2 08             	shl    edx,0x8
c00161ca:	09 fa                	or     edx,edi
c00161cc:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161d3:	09 fa                	or     edx,edi
c00161d5:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161dc:	c1 e7 18             	shl    edi,0x18
c00161df:	09 fa                	or     edx,edi
c00161e1:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161e5:	46                   	inc    esi
c00161e6:	83 fe 04             	cmp    esi,0x4
c00161e9:	0f 85 7a ff ff ff    	jne    c0016169 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161f3:	83 f0 01             	xor    eax,0x1
c00161f6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161fa:	75 57                	jne    c0016253 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016200:	83 f0 01             	xor    eax,0x1
c0016203:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016207:	75 4a                	jne    c0016253 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016209:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001620d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016215:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001621d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016223:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016229:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001622f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016233:	89 f7                	mov    edi,esi
c0016235:	c1 e0 0a             	shl    eax,0xa
c0016238:	c1 ff 1f             	sar    edi,0x1f
c001623b:	57                   	push   edi
c001623c:	56                   	push   esi
c001623d:	52                   	push   edx
c001623e:	50                   	push   eax
c001623f:	e8 00 03 01 00       	call   c0026544 <__udivdi3>
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001624b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001624f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016253:	84 c9                	test   cl,cl
c0016255:	74 53                	je     c00162aa <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016257:	0f b6 c9             	movzx  ecx,cl
c001625a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001625e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016262:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016266:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001626a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001626e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016272:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016276:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001627a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001627e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016286:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001628a:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001628e:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016292:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016296:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001629a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001629e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00162a2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00162a6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00162aa:	31 ed                	xor    ebp,ebp
c00162ac:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00162b0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00162b4:	89 f8                	mov    eax,edi
c00162b6:	09 f0                	or     eax,esi
c00162b8:	74 1e                	je     c00162d8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162ba:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00162be:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00162c2:	89 d1                	mov    ecx,edx
c00162c4:	09 c1                	or     ecx,eax
c00162c6:	74 10                	je     c00162d8 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	57                   	push   edi
c00162cc:	56                   	push   esi
c00162cd:	52                   	push   edx
c00162ce:	50                   	push   eax
c00162cf:	53                   	push   ebx
c00162d0:	e8 db fc ff ff       	call   c0015fb0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162d5:	83 c4 20             	add    esp,0x20
c00162d8:	45                   	inc    ebp
c00162d9:	83 fd 04             	cmp    ebp,0x4
c00162dc:	75 ce                	jne    c00162ac <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162de:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162e4:	5b                   	pop    ebx
c00162e5:	5e                   	pop    esi
c00162e6:	5f                   	pop    edi
c00162e7:	5d                   	pop    ebp
c00162e8:	c3                   	ret    
c00162e9:	90                   	nop

c00162ea <Serial::Serial(char const*)>:
c00162ea:	83 ec 0c             	sub    esp,0xc
c00162ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f1:	83 ec 08             	sub    esp,0x8
c00162f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f8:	50                   	push   eax
c00162f9:	e8 4a d8 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00162fe:	83 c4 10             	add    esp,0x10
c0016301:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c0016306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001630a:	89 10                	mov    DWORD PTR [eax],edx
c001630c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016310:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001631a:	90                   	nop
c001631b:	83 c4 0c             	add    esp,0xc
c001631e:	c3                   	ret    
c001631f:	90                   	nop

c0016320 <Serial::~Serial()>:
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c0016328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632c:	89 10                	mov    DWORD PTR [eax],edx
c001632e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016332:	83 ec 0c             	sub    esp,0xc
c0016335:	50                   	push   eax
c0016336:	e8 d7 d4 ff ff       	call   c0013812 <Device::~Device()>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	90                   	nop
c001633f:	83 c4 0c             	add    esp,0xc
c0016342:	c3                   	ret    
c0016343:	90                   	nop

c0016344 <Serial::~Serial()>:
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	83 ec 0c             	sub    esp,0xc
c001634a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001634e:	e8 cd ff ff ff       	call   c0016320 <Serial::~Serial()>
c0016353:	83 c4 10             	add    esp,0x10
c0016356:	83 ec 08             	sub    esp,0x8
c0016359:	68 58 01 00 00       	push   0x158
c001635e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016362:	e8 cc c0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	83 c4 0c             	add    esp,0xc
c001636d:	c3                   	ret    

c001636e <Timer::Timer(char const*)>:
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016375:	83 ec 08             	sub    esp,0x8
c0016378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001637c:	50                   	push   eax
c001637d:	e8 c6 d7 ff ff       	call   c0013b48 <Device::Device(char const*)>
c0016382:	83 c4 10             	add    esp,0x10
c0016385:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c001638a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638e:	89 10                	mov    DWORD PTR [eax],edx
c0016390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016394:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001639e:	90                   	nop
c001639f:	83 c4 0c             	add    esp,0xc
c00163a2:	c3                   	ret    
c00163a3:	90                   	nop

c00163a4 <Timer::~Timer()>:
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c00163ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b0:	89 10                	mov    DWORD PTR [eax],edx
c00163b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b6:	83 ec 0c             	sub    esp,0xc
c00163b9:	50                   	push   eax
c00163ba:	e8 53 d4 ff ff       	call   c0013812 <Device::~Device()>
c00163bf:	83 c4 10             	add    esp,0x10
c00163c2:	90                   	nop
c00163c3:	83 c4 0c             	add    esp,0xc
c00163c6:	c3                   	ret    
c00163c7:	90                   	nop

c00163c8 <Timer::~Timer()>:
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	83 ec 0c             	sub    esp,0xc
c00163ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d2:	e8 cd ff ff ff       	call   c00163a4 <Timer::~Timer()>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	83 ec 08             	sub    esp,0x8
c00163dd:	68 5c 01 00 00       	push   0x15c
c00163e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e6:	e8 48 c0 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	83 c4 0c             	add    esp,0xc
c00163f1:	c3                   	ret    

c00163f2 <Timer::read()>:
c00163f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163fc:	c3                   	ret    

c00163fd <timerHandler(unsigned long long)>:
c00163fd:	55                   	push   ebp
c00163fe:	57                   	push   edi
c00163ff:	56                   	push   esi
c0016400:	53                   	push   ebx
c0016401:	83 ec 0c             	sub    esp,0xc
c0016404:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016408:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001640c:	01 35 10 dc 02 c0    	add    DWORD PTR ds:0xc002dc10,esi
c0016412:	11 3d 14 dc 02 c0    	adc    DWORD PTR ds:0xc002dc14,edi
c0016418:	80 3d ad d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ad,0x0
c001641f:	0f 84 42 01 00 00    	je     c0016567 <timerHandler(unsigned long long)+0x16a>
c0016425:	fa                   	cli    
c0016426:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c0016435:	68 d8 0a 03 c0       	push   0xc0030ad8
c001643a:	e8 5f 21 01 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	84 c0                	test   al,al
c0016444:	0f 85 a2 00 00 00    	jne    c00164ec <timerHandler(unsigned long long)+0xef>
c001644a:	83 ec 0c             	sub    esp,0xc
c001644d:	68 d8 0a 03 c0       	push   0xc0030ad8
c0016452:	e8 63 21 01 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	89 c3                	mov    ebx,eax
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	68 d8 0a 03 c0       	push   0xc0030ad8
c0016464:	e8 51 21 01 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016469:	c7 04 24 d8 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ad8
c0016470:	89 c5                	mov    ebp,eax
c0016472:	e8 4b 21 01 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016477:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001647a:	83 c4 10             	add    esp,0x10
c001647d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016480:	39 15 10 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc10,edx
c0016486:	a1 14 dc 02 c0       	mov    eax,ds:0xc002dc14
c001648b:	19 c8                	sbb    eax,ecx
c001648d:	72 21                	jb     c00164b0 <timerHandler(unsigned long long)+0xb3>
c001648f:	83 ec 0c             	sub    esp,0xc
c0016492:	55                   	push   ebp
c0016493:	e8 e2 77 00 00       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	39 eb                	cmp    ebx,ebp
c001649d:	75 21                	jne    c00164c0 <timerHandler(unsigned long long)+0xc3>
c001649f:	83 ec 0c             	sub    esp,0xc
c00164a2:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164a7:	e8 0e 21 01 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164ac:	89 c3                	mov    ebx,eax
c00164ae:	eb 0d                	jmp    c00164bd <timerHandler(unsigned long long)+0xc0>
c00164b0:	50                   	push   eax
c00164b1:	50                   	push   eax
c00164b2:	55                   	push   ebp
c00164b3:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164b8:	e8 b3 21 01 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164c8:	e8 d1 20 01 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	84 c0                	test   al,al
c00164d2:	75 18                	jne    c00164ec <timerHandler(unsigned long long)+0xef>
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	68 d8 0a 03 c0       	push   0xc0030ad8
c00164dc:	e8 d9 20 01 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164e1:	83 c4 10             	add    esp,0x10
c00164e4:	39 d8                	cmp    eax,ebx
c00164e6:	0f 85 70 ff ff ff    	jne    c001645c <timerHandler(unsigned long long)+0x5f>
c00164ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f1:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00164f5:	74 3d                	je     c0016534 <timerHandler(unsigned long long)+0x137>
c00164f7:	80 3d ac d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ac,0x0
c00164fe:	74 34                	je     c0016534 <timerHandler(unsigned long long)+0x137>
c0016500:	fa                   	cli    
c0016501:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c0016507:	31 d2                	xor    edx,edx
c0016509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650e:	89 f9                	mov    ecx,edi
c0016510:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016518:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001651b:	39 c6                	cmp    esi,eax
c001651d:	19 d1                	sbb    ecx,edx
c001651f:	72 05                	jb     c0016526 <timerHandler(unsigned long long)+0x129>
c0016521:	e8 d1 72 00 00       	call   c001d7f7 <schedule()>
c0016526:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001652b:	48                   	dec    eax
c001652c:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0016531:	75 01                	jne    c0016534 <timerHandler(unsigned long long)+0x137>
c0016533:	fb                   	sti    
c0016534:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c0016539:	48                   	dec    eax
c001653a:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001653f:	75 18                	jne    c0016559 <timerHandler(unsigned long long)+0x15c>
c0016541:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c0016548:	74 0f                	je     c0016559 <timerHandler(unsigned long long)+0x15c>
c001654a:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c0016554:	e8 9e 72 00 00       	call   c001d7f7 <schedule()>
c0016559:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001655e:	48                   	dec    eax
c001655f:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c0016564:	75 01                	jne    c0016567 <timerHandler(unsigned long long)+0x16a>
c0016566:	fb                   	sti    
c0016567:	83 c4 0c             	add    esp,0xc
c001656a:	5b                   	pop    ebx
c001656b:	5e                   	pop    esi
c001656c:	5f                   	pop    edi
c001656d:	5d                   	pop    ebp
c001656e:	c3                   	ret    

c001656f <setupTimer(int)>:
c001656f:	57                   	push   edi
c0016570:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016575:	56                   	push   esi
c0016576:	53                   	push   ebx
c0016577:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001657b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016581:	83 ec 0c             	sub    esp,0xc
c0016584:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001658a:	e8 b5 d6 ff ff       	call   c0013c44 <Device::getName()>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016595:	0f 85 8d 00 00 00    	jne    c0016628 <setupTimer(int)+0xb9>
c001659b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00165a0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00165a7:	74 7f                	je     c0016628 <setupTimer(int)+0xb9>
c00165a9:	83 ec 0c             	sub    esp,0xc
c00165ac:	68 5c 01 00 00       	push   0x15c
c00165b1:	e8 e6 8f ff ff       	call   c000f59c <malloc>
c00165b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00165b9:	89 c3                	mov    ebx,eax
c00165bb:	e8 56 fb 00 00       	call   c0026116 <PIT::PIT()>
c00165c0:	59                   	pop    ecx
c00165c1:	5f                   	pop    edi
c00165c2:	53                   	push   ebx
c00165c3:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c00165c9:	e8 76 d3 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00165ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165d0:	6a 00                	push   0x0
c00165d2:	6a 00                	push   0x0
c00165d4:	56                   	push   esi
c00165d5:	53                   	push   ebx
c00165d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165d9:	83 c4 14             	add    esp,0x14
c00165dc:	68 60 01 00 00       	push   0x160
c00165e1:	e8 b6 8f ff ff       	call   c000f59c <malloc>
c00165e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00165e9:	89 c7                	mov    edi,eax
c00165eb:	e8 d6 f9 00 00       	call   c0025fc6 <APICTimer::APICTimer()>
c00165f0:	6a 00                	push   0x0
c00165f2:	6a 00                	push   0x0
c00165f4:	56                   	push   esi
c00165f5:	57                   	push   edi
c00165f6:	e8 cd f8 00 00       	call   c0025ec8 <APICTimer::open(int, int, void*)>
c00165fb:	83 c4 20             	add    esp,0x20
c00165fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016600:	6a 00                	push   0x0
c0016602:	6a 00                	push   0x0
c0016604:	6a 00                	push   0x0
c0016606:	53                   	push   ebx
c0016607:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001660a:	58                   	pop    eax
c001660b:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016610:	5a                   	pop    edx
c0016611:	57                   	push   edi
c0016612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016618:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001661e:	e8 21 d3 ff ff       	call   c0013944 <Device::addChild(Device*)>
c0016623:	83 c4 10             	add    esp,0x10
c0016626:	eb 33                	jmp    c001665b <setupTimer(int)+0xec>
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	68 5c 01 00 00       	push   0x15c
c0016630:	e8 67 8f ff ff       	call   c000f59c <malloc>
c0016635:	89 04 24             	mov    DWORD PTR [esp],eax
c0016638:	89 c3                	mov    ebx,eax
c001663a:	e8 d7 fa 00 00       	call   c0026116 <PIT::PIT()>
c001663f:	58                   	pop    eax
c0016640:	5a                   	pop    edx
c0016641:	53                   	push   ebx
c0016642:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c0016648:	e8 f7 d2 ff ff       	call   c0013944 <Device::addChild(Device*)>
c001664d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001664f:	6a 00                	push   0x0
c0016651:	6a 00                	push   0x0
c0016653:	56                   	push   esi
c0016654:	53                   	push   ebx
c0016655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016658:	83 c4 20             	add    esp,0x20
c001665b:	89 d8                	mov    eax,ebx
c001665d:	5b                   	pop    ebx
c001665e:	5e                   	pop    esi
c001665f:	5f                   	pop    edi
c0016660:	c3                   	ret    
c0016661:	90                   	nop

c0016662 <VCache::VCache(PhysicalDisk*)>:
c0016662:	53                   	push   ebx
c0016663:	83 ec 18             	sub    esp,0x18
c0016666:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001666b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666f:	89 10                	mov    DWORD PTR [eax],edx
c0016671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016675:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001667c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016680:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016692:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00166a4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00166ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166af:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00166b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ba:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c2:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00166c9:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00166d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00166d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166dc:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00166e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00166e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ec:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00166f3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00166fb:	83 ec 0c             	sub    esp,0xc
c00166fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016702:	e8 95 8e ff ff       	call   c000f59c <malloc>
c0016707:	83 c4 10             	add    esp,0x10
c001670a:	89 c3                	mov    ebx,eax
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	53                   	push   ebx
c0016710:	e8 ab 6e 00 00       	call   c001d5c0 <Mutex::Mutex()>
c0016715:	83 c4 10             	add    esp,0x10
c0016718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001671c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001671f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016723:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016727:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001672a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001672e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016735:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016739:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001673f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016743:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016746:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001674a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016750:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016756:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001675a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001675d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016764:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016768:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001676c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016772:	05 00 01 00 00       	add    eax,0x100
c0016777:	c1 e0 04             	shl    eax,0x4
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	50                   	push   eax
c001677e:	e8 19 8e ff ff       	call   c000f59c <malloc>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	89 c2                	mov    edx,eax
c0016788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001678f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016793:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001679a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167ac:	c1 e0 07             	shl    eax,0x7
c00167af:	83 ec 0c             	sub    esp,0xc
c00167b2:	50                   	push   eax
c00167b3:	e8 e4 8d ff ff       	call   c000f59c <malloc>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	89 c2                	mov    edx,eax
c00167bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00167c4:	90                   	nop
c00167c5:	83 c4 18             	add    esp,0x18
c00167c8:	5b                   	pop    ebx
c00167c9:	c3                   	ret    

c00167ca <VCache::invalidateReadBuffer()>:
c00167ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ce:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00167d4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167d8:	c3                   	ret    
c00167d9:	90                   	nop

c00167da <VCache::writeWriteBuffer()>:
c00167da:	53                   	push   ebx
c00167db:	83 ec 14             	sub    esp,0x14
c00167de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00167e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00167e7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00167ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167ed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00167f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00167f3:	50                   	push   eax
c00167f4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00167f7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00167fe:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016805:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016809:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016810:	83 c4 28             	add    esp,0x28
c0016813:	5b                   	pop    ebx
c0016814:	c3                   	ret    
c0016815:	90                   	nop

c0016816 <VCache::~VCache()>:
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001681e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016822:	89 10                	mov    DWORD PTR [eax],edx
c0016824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016828:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001682b:	84 c0                	test   al,al
c001682d:	74 0f                	je     c001683e <VCache::~VCache()+0x28>
c001682f:	83 ec 0c             	sub    esp,0xc
c0016832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016836:	e8 9f ff ff ff       	call   c00167da <VCache::writeWriteBuffer()>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	50                   	push   eax
c0016849:	e8 5e 8d ff ff       	call   c000f5ac <free>
c001684e:	83 c4 10             	add    esp,0x10
c0016851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016855:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016858:	83 ec 0c             	sub    esp,0xc
c001685b:	50                   	push   eax
c001685c:	e8 4b 8d ff ff       	call   c000f5ac <free>
c0016861:	83 c4 10             	add    esp,0x10
c0016864:	90                   	nop
c0016865:	83 c4 0c             	add    esp,0xc
c0016868:	c3                   	ret    
c0016869:	90                   	nop

c001686a <VCache::~VCache()>:
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	83 ec 0c             	sub    esp,0xc
c0016870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016874:	e8 9d ff ff ff       	call   c0016816 <VCache::~VCache()>
c0016879:	83 c4 10             	add    esp,0x10
c001687c:	83 ec 08             	sub    esp,0x8
c001687f:	6a 44                	push   0x44
c0016881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016885:	e8 a9 bb ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	83 c4 0c             	add    esp,0xc
c0016890:	c3                   	ret    
c0016891:	90                   	nop

c0016892 <VCache::write(unsigned long long, int, void*)>:
c0016892:	55                   	push   ebp
c0016893:	57                   	push   edi
c0016894:	56                   	push   esi
c0016895:	53                   	push   ebx
c0016896:	83 ec 18             	sub    esp,0x18
c0016899:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001689d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00168a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168a8:	e8 59 72 00 00       	call   c001db06 <Semaphore::acquire()>
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00168b4:	74 0c                	je     c00168c2 <VCache::write(unsigned long long, int, void*)+0x30>
c00168b6:	83 ec 0c             	sub    esp,0xc
c00168b9:	53                   	push   ebx
c00168ba:	e8 0b ff ff ff       	call   c00167ca <VCache::invalidateReadBuffer()>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168c6:	74 5c                	je     c0016924 <VCache::write(unsigned long long, int, void*)+0x92>
c00168c8:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00168cb:	89 e8                	mov    eax,ebp
c00168cd:	99                   	cdq    
c00168ce:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00168d1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00168d4:	89 c1                	mov    ecx,eax
c00168d6:	89 d0                	mov    eax,edx
c00168d8:	31 f1                	xor    ecx,esi
c00168da:	31 f8                	xor    eax,edi
c00168dc:	09 c1                	or     ecx,eax
c00168de:	75 38                	jne    c0016918 <VCache::write(unsigned long long, int, void*)+0x86>
c00168e0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00168e5:	75 31                	jne    c0016918 <VCache::write(unsigned long long, int, void*)+0x86>
c00168e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168ea:	89 ef                	mov    edi,ebp
c00168ec:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00168f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168f6:	0f af f9             	imul   edi,ecx
c00168f9:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00168fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016901:	40                   	inc    eax
c0016902:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016905:	83 c0 80             	add    eax,0xffffff80
c0016908:	75 5c                	jne    c0016966 <VCache::write(unsigned long long, int, void*)+0xd4>
c001690a:	83 ec 0c             	sub    esp,0xc
c001690d:	53                   	push   ebx
c001690e:	e8 c7 fe ff ff       	call   c00167da <VCache::writeWriteBuffer()>
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	eb 4e                	jmp    c0016966 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	53                   	push   ebx
c001691c:	e8 b9 fe ff ff       	call   c00167da <VCache::writeWriteBuffer()>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016927:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c001692c:	7f 22                	jg     c0016950 <VCache::write(unsigned long long, int, void*)+0xbe>
c001692e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016931:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016934:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016938:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001693c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001693f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016942:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016948:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001694c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001694e:	eb 16                	jmp    c0016966 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	8b 10                	mov    edx,DWORD PTR [eax]
c0016955:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016959:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001695d:	57                   	push   edi
c001695e:	56                   	push   esi
c001695f:	50                   	push   eax
c0016960:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016963:	83 c4 20             	add    esp,0x20
c0016966:	83 ec 0c             	sub    esp,0xc
c0016969:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001696c:	e8 f1 77 00 00       	call   c001e162 <Semaphore::release()>
c0016971:	83 c4 1c             	add    esp,0x1c
c0016974:	31 c0                	xor    eax,eax
c0016976:	5b                   	pop    ebx
c0016977:	5e                   	pop    esi
c0016978:	5f                   	pop    edi
c0016979:	5d                   	pop    ebp
c001697a:	c3                   	ret    
c001697b:	90                   	nop

c001697c <VCache::read(unsigned long long, int, void*)>:
c001697c:	55                   	push   ebp
c001697d:	57                   	push   edi
c001697e:	56                   	push   esi
c001697f:	53                   	push   ebx
c0016980:	83 ec 28             	sub    esp,0x28
c0016983:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016987:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001698b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001698f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016993:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016996:	e8 6b 71 00 00       	call   c001db06 <Semaphore::acquire()>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169a2:	74 0c                	je     c00169b0 <VCache::read(unsigned long long, int, void*)+0x34>
c00169a4:	83 ec 0c             	sub    esp,0xc
c00169a7:	53                   	push   ebx
c00169a8:	e8 2d fe ff ff       	call   c00167da <VCache::writeWriteBuffer()>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	83 fd 01             	cmp    ebp,0x1
c00169b3:	0f 85 80 00 00 00    	jne    c0016a39 <VCache::read(unsigned long long, int, void*)+0xbd>
c00169b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169c0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00169c7:	75 70                	jne    c0016a39 <VCache::read(unsigned long long, int, void*)+0xbd>
c00169c9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00169cc:	89 e9                	mov    ecx,ebp
c00169ce:	f7 d9                	neg    ecx
c00169d0:	89 c8                	mov    eax,ecx
c00169d2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00169d6:	c1 f8 1f             	sar    eax,0x1f
c00169d9:	21 f1                	and    ecx,esi
c00169db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169df:	89 c8                	mov    eax,ecx
c00169e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169e5:	21 f9                	and    ecx,edi
c00169e7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00169eb:	89 ca                	mov    edx,ecx
c00169ed:	74 0a                	je     c00169f9 <VCache::read(unsigned long long, int, void*)+0x7d>
c00169ef:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00169f2:	75 05                	jne    c00169f9 <VCache::read(unsigned long long, int, void*)+0x7d>
c00169f4:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00169f7:	74 23                	je     c0016a1c <VCache::read(unsigned long long, int, void*)+0xa0>
c00169f9:	83 ec 0c             	sub    esp,0xc
c00169fc:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016a00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a04:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016a07:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016a0a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016a0c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016a0f:	55                   	push   ebp
c0016a10:	52                   	push   edx
c0016a11:	50                   	push   eax
c0016a12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a16:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016a19:	83 c4 20             	add    esp,0x20
c0016a1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a1f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a23:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a29:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a2c:	48                   	dec    eax
c0016a2d:	21 c6                	and    esi,eax
c0016a2f:	0f af f1             	imul   esi,ecx
c0016a32:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016a35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a37:	eb 1d                	jmp    c0016a56 <VCache::read(unsigned long long, int, void*)+0xda>
c0016a39:	83 ec 0c             	sub    esp,0xc
c0016a3c:	53                   	push   ebx
c0016a3d:	e8 88 fd ff ff       	call   c00167ca <VCache::invalidateReadBuffer()>
c0016a42:	5a                   	pop    edx
c0016a43:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a4c:	55                   	push   ebp
c0016a4d:	57                   	push   edi
c0016a4e:	56                   	push   esi
c0016a4f:	50                   	push   eax
c0016a50:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a53:	83 c4 20             	add    esp,0x20
c0016a56:	83 ec 0c             	sub    esp,0xc
c0016a59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a5c:	e8 01 77 00 00       	call   c001e162 <Semaphore::release()>
c0016a61:	83 c4 2c             	add    esp,0x2c
c0016a64:	31 c0                	xor    eax,eax
c0016a66:	5b                   	pop    ebx
c0016a67:	5e                   	pop    esi
c0016a68:	5f                   	pop    edi
c0016a69:	5d                   	pop    ebp
c0016a6a:	c3                   	ret    
c0016a6b:	90                   	nop

c0016a6c <Video::putrect(int, int, int, int, unsigned int)>:
c0016a6c:	55                   	push   ebp
c0016a6d:	57                   	push   edi
c0016a6e:	56                   	push   esi
c0016a6f:	53                   	push   ebx
c0016a70:	83 ec 1c             	sub    esp,0x1c
c0016a73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a7b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a7f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a8b:	01 df                	add    edi,ebx
c0016a8d:	39 fb                	cmp    ebx,edi
c0016a8f:	7d 1f                	jge    c0016ab0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a91:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a95:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a99:	7d 12                	jge    c0016aad <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a9b:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016aa1:	53                   	push   ebx
c0016aa2:	55                   	push   ebp
c0016aa3:	45                   	inc    ebp
c0016aa4:	56                   	push   esi
c0016aa5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	eb e8                	jmp    c0016a95 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016aad:	43                   	inc    ebx
c0016aae:	eb dd                	jmp    c0016a8d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ab0:	83 c4 1c             	add    esp,0x1c
c0016ab3:	5b                   	pop    ebx
c0016ab4:	5e                   	pop    esi
c0016ab5:	5f                   	pop    edi
c0016ab6:	5d                   	pop    ebp
c0016ab7:	c3                   	ret    

c0016ab8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ab8:	55                   	push   ebp
c0016ab9:	57                   	push   edi
c0016aba:	31 ff                	xor    edi,edi
c0016abc:	56                   	push   esi
c0016abd:	53                   	push   ebx
c0016abe:	83 ec 1c             	sub    esp,0x1c
c0016ac1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ac5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ac9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ad0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ad5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ad9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016add:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ae1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ae4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ae8:	01 f9                	add    ecx,edi
c0016aea:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016aee:	7d 2f                	jge    c0016b1f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016af0:	31 f6                	xor    esi,esi
c0016af2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016af6:	01 f2                	add    edx,esi
c0016af8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016afc:	7d 1a                	jge    c0016b18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016afe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b01:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016b04:	46                   	inc    esi
c0016b05:	51                   	push   ecx
c0016b06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016b0a:	52                   	push   edx
c0016b0b:	55                   	push   ebp
c0016b0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b16:	eb da                	jmp    c0016af2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016b18:	47                   	inc    edi
c0016b19:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016b1d:	eb c5                	jmp    c0016ae4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b1f:	83 c4 1c             	add    esp,0x1c
c0016b22:	5b                   	pop    ebx
c0016b23:	5e                   	pop    esi
c0016b24:	5f                   	pop    edi
c0016b25:	5d                   	pop    ebp
c0016b26:	c3                   	ret    
c0016b27:	90                   	nop

c0016b28 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b28:	55                   	push   ebp
c0016b29:	57                   	push   edi
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	83 ec 1c             	sub    esp,0x1c
c0016b2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b37:	85 c0                	test   eax,eax
c0016b39:	79 02                	jns    c0016b3d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b3b:	31 c0                	xor    eax,eax
c0016b3d:	c1 e0 02             	shl    eax,0x2
c0016b40:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b4c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b50:	39 d8                	cmp    eax,ebx
c0016b52:	7e 49                	jle    c0016b9d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b54:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b5a:	7c 41                	jl     c0016b9d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b60:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b64:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b68:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b6c:	39 f9                	cmp    ecx,edi
c0016b6e:	7e 22                	jle    c0016b92 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b70:	83 c5 04             	add    ebp,0x4
c0016b73:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b79:	7c 14                	jl     c0016b8f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b7b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b7d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b88:	56                   	push   esi
c0016b89:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b8c:	83 c4 10             	add    esp,0x10
c0016b8f:	47                   	inc    edi
c0016b90:	eb d2                	jmp    c0016b64 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b96:	43                   	inc    ebx
c0016b97:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b9b:	eb ab                	jmp    c0016b48 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b9d:	83 c4 1c             	add    esp,0x1c
c0016ba0:	5b                   	pop    ebx
c0016ba1:	5e                   	pop    esi
c0016ba2:	5f                   	pop    edi
c0016ba3:	5d                   	pop    ebp
c0016ba4:	c3                   	ret    
c0016ba5:	90                   	nop

c0016ba6 <Video::clearScreen(unsigned int)>:
c0016ba6:	57                   	push   edi
c0016ba7:	56                   	push   esi
c0016ba8:	53                   	push   ebx
c0016ba9:	31 db                	xor    ebx,ebx
c0016bab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016baf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016bb5:	7e 1f                	jle    c0016bd6 <Video::clearScreen(unsigned int)+0x30>
c0016bb7:	31 ff                	xor    edi,edi
c0016bb9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016bbf:	7e 12                	jle    c0016bd3 <Video::clearScreen(unsigned int)+0x2d>
c0016bc1:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bc7:	53                   	push   ebx
c0016bc8:	57                   	push   edi
c0016bc9:	47                   	inc    edi
c0016bca:	56                   	push   esi
c0016bcb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bce:	83 c4 10             	add    esp,0x10
c0016bd1:	eb e6                	jmp    c0016bb9 <Video::clearScreen(unsigned int)+0x13>
c0016bd3:	43                   	inc    ebx
c0016bd4:	eb d9                	jmp    c0016baf <Video::clearScreen(unsigned int)+0x9>
c0016bd6:	5b                   	pop    ebx
c0016bd7:	5e                   	pop    esi
c0016bd8:	5f                   	pop    edi
c0016bd9:	c3                   	ret    

c0016bda <Video::putpixel(int, int, unsigned int)>:
c0016bda:	c7 44 24 04 8c ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ac8c
c0016be2:	e9 84 30 00 00       	jmp    c0019c6b <Krnl::panic(char const*)>
c0016be7:	90                   	nop

c0016be8 <Video::Video(char const*)>:
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bef:	83 ec 08             	sub    esp,0x8
c0016bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf6:	50                   	push   eax
c0016bf7:	e8 4c cf ff ff       	call   c0013b48 <Device::Device(char const*)>
c0016bfc:	83 c4 10             	add    esp,0x10
c0016bff:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0016c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c08:	89 10                	mov    DWORD PTR [eax],edx
c0016c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016c18:	90                   	nop
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <Video::~Video()>:
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	ba fc ac 02 c0       	mov    edx,0xc002acfc
c0016c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2a:	89 10                	mov    DWORD PTR [eax],edx
c0016c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c30:	83 ec 0c             	sub    esp,0xc
c0016c33:	50                   	push   eax
c0016c34:	e8 d9 cb ff ff       	call   c0013812 <Device::~Device()>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	90                   	nop
c0016c3d:	83 c4 0c             	add    esp,0xc
c0016c40:	c3                   	ret    
c0016c41:	90                   	nop

c0016c42 <Video::~Video()>:
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	83 ec 0c             	sub    esp,0xc
c0016c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4c:	e8 cd ff ff ff       	call   c0016c1e <Video::~Video()>
c0016c51:	83 c4 10             	add    esp,0x10
c0016c54:	83 ec 08             	sub    esp,0x8
c0016c57:	68 64 01 00 00       	push   0x164
c0016c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c60:	e8 ce b7 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	83 c4 0c             	add    esp,0xc
c0016c6b:	c3                   	ret    

c0016c6c <Video::isMonochrome()>:
c0016c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c70:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c76:	c3                   	ret    
c0016c77:	90                   	nop

c0016c78 <Video::getWidth()>:
c0016c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c7c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c82:	c3                   	ret    
c0016c83:	90                   	nop

c0016c84 <Video::getHeight()>:
c0016c84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c88:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c8e:	c3                   	ret    
c0016c8f:	90                   	nop

c0016c90 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c90:	55                   	push   ebp
c0016c91:	57                   	push   edi
c0016c92:	56                   	push   esi
c0016c93:	53                   	push   ebx
c0016c94:	83 ec 2c             	sub    esp,0x2c
c0016c97:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c9b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c9f:	83 f8 01             	cmp    eax,0x1
c0016ca2:	19 c9                	sbb    ecx,ecx
c0016ca4:	31 db                	xor    ebx,ebx
c0016ca6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016caa:	89 cd                	mov    ebp,ecx
c0016cac:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016cb4:	f7 d5                	not    ebp
c0016cb6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016cbc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016cc0:	01 d8                	add    eax,ebx
c0016cc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cc6:	56                   	push   esi
c0016cc7:	e8 b8 ff ff ff       	call   c0016c84 <Video::getHeight()>
c0016ccc:	59                   	pop    ecx
c0016ccd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cd1:	7e 70                	jle    c0016d43 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016cd3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cd7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cdb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ce2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016ce6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ced:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cf1:	89 f8                	mov    eax,edi
c0016cf3:	83 c0 20             	add    eax,0x20
c0016cf6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cfa:	56                   	push   esi
c0016cfb:	e8 78 ff ff ff       	call   c0016c78 <Video::getWidth()>
c0016d00:	5a                   	pop    edx
c0016d01:	39 c7                	cmp    edi,eax
c0016d03:	7d 34                	jge    c0016d39 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016d05:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016d0a:	74 05                	je     c0016d11 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016d0c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d0e:	55                   	push   ebp
c0016d0f:	eb 0d                	jmp    c0016d1e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016d11:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016d16:	74 12                	je     c0016d2a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016d18:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d22:	57                   	push   edi
c0016d23:	56                   	push   esi
c0016d24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d2e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d32:	47                   	inc    edi
c0016d33:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d37:	75 c1                	jne    c0016cfa <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d39:	43                   	inc    ebx
c0016d3a:	83 fb 20             	cmp    ebx,0x20
c0016d3d:	0f 85 79 ff ff ff    	jne    c0016cbc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d43:	83 c4 2c             	add    esp,0x2c
c0016d46:	5b                   	pop    ebx
c0016d47:	5e                   	pop    esi
c0016d48:	5f                   	pop    edi
c0016d49:	5d                   	pop    ebp
c0016d4a:	c3                   	ret    
c0016d4b:	90                   	nop

c0016d4c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d4c:	55                   	push   ebp
c0016d4d:	57                   	push   edi
c0016d4e:	56                   	push   esi
c0016d4f:	53                   	push   ebx
c0016d50:	83 ec 28             	sub    esp,0x28
c0016d53:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d57:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d5b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016d5f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d63:	c1 e6 08             	shl    esi,0x8
c0016d66:	01 c6                	add    esi,eax
c0016d68:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d6c:	c1 e0 08             	shl    eax,0x8
c0016d6f:	01 d0                	add    eax,edx
c0016d71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d79:	0f af c6             	imul   eax,esi
c0016d7c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d83:	50                   	push   eax
c0016d84:	e8 13 88 ff ff       	call   c000f59c <malloc>
c0016d89:	83 c4 10             	add    esp,0x10
c0016d8c:	89 c7                	mov    edi,eax
c0016d8e:	85 c0                	test   eax,eax
c0016d90:	75 10                	jne    c0016da2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016d92:	83 ec 0c             	sub    esp,0xc
c0016d95:	68 ad ac 02 c0       	push   0xc002acad
c0016d9a:	e8 cc 2e 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016da5:	ba 12 00 00 00       	mov    edx,0x12
c0016daa:	84 c0                	test   al,al
c0016dac:	74 11                	je     c0016dbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016dae:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016db2:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016db6:	c1 fa 03             	sar    edx,0x3
c0016db9:	0f af d1             	imul   edx,ecx
c0016dbc:	83 c2 12             	add    edx,0x12
c0016dbf:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016dc3:	74 04                	je     c0016dc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016dc5:	85 f6                	test   esi,esi
c0016dc7:	75 12                	jne    c0016ddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016dc9:	83 ec 0c             	sub    esp,0xc
c0016dcc:	68 bd ac 02 c0       	push   0xc002acbd
c0016dd1:	e8 35 b7 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0016dd6:	e9 b8 00 00 00       	jmp    c0016e93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016ddb:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016ddf:	80 f9 02             	cmp    cl,0x2
c0016de2:	0f 85 96 00 00 00    	jne    c0016e7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016de8:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ded:	75 0e                	jne    c0016dfd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016def:	84 c0                	test   al,al
c0016df1:	75 0a                	jne    c0016dfd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016df3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016df6:	83 e8 18             	sub    eax,0x18
c0016df9:	a8 f7                	test   al,0xf7
c0016dfb:	74 0a                	je     c0016e07 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	68 d2 ac 02 c0       	push   0xc002acd2
c0016e05:	eb 7f                	jmp    c0016e86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016e07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e0f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e17:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016e1b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e23:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e27:	75 0c                	jne    c0016e35 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e29:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016e2e:	c1 e0 18             	shl    eax,0x18
c0016e31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e35:	45                   	inc    ebp
c0016e36:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016e3b:	c1 e1 10             	shl    ecx,0x10
c0016e3e:	89 c8                	mov    eax,ecx
c0016e40:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016e45:	c1 e1 08             	shl    ecx,0x8
c0016e48:	09 c1                	or     ecx,eax
c0016e4a:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016e4e:	09 c1                	or     ecx,eax
c0016e50:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016e54:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016e58:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e5c:	c1 f8 03             	sar    eax,0x3
c0016e5f:	01 c2                	add    edx,eax
c0016e61:	89 e8                	mov    eax,ebp
c0016e63:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e67:	39 c6                	cmp    esi,eax
c0016e69:	7f b0                	jg     c0016e1b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016e6b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e73:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016e76:	7e 22                	jle    c0016e9a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016e78:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016e7c:	eb 99                	jmp    c0016e17 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016e7e:	50                   	push   eax
c0016e7f:	50                   	push   eax
c0016e80:	51                   	push   ecx
c0016e81:	68 e0 ac 02 c0       	push   0xc002ace0
c0016e86:	e8 80 b6 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0016e8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e8e:	e8 19 87 ff ff       	call   c000f5ac <free>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	31 ff                	xor    edi,edi
c0016e98:	eb 0f                	jmp    c0016ea9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016e9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e9e:	89 30                	mov    DWORD PTR [eax],esi
c0016ea0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ea4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016ea7:	89 30                	mov    DWORD PTR [eax],esi
c0016ea9:	83 c4 1c             	add    esp,0x1c
c0016eac:	89 f8                	mov    eax,edi
c0016eae:	5b                   	pop    ebx
c0016eaf:	5e                   	pop    esi
c0016eb0:	5f                   	pop    edi
c0016eb1:	5d                   	pop    ebp
c0016eb2:	c3                   	ret    
c0016eb3:	90                   	nop

c0016eb4 <Video::putTGA(int, int, unsigned char*, int)>:
c0016eb4:	55                   	push   ebp
c0016eb5:	57                   	push   edi
c0016eb6:	56                   	push   esi
c0016eb7:	53                   	push   ebx
c0016eb8:	83 ec 28             	sub    esp,0x28
c0016ebb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ebf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ec3:	50                   	push   eax
c0016ec4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ec8:	50                   	push   eax
c0016ec9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ecd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ed1:	56                   	push   esi
c0016ed2:	e8 75 fe ff ff       	call   c0016d4c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ed7:	83 c4 20             	add    esp,0x20
c0016eda:	85 c0                	test   eax,eax
c0016edc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ee0:	74 35                	je     c0016f17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ee2:	89 c7                	mov    edi,eax
c0016ee4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ee8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016eec:	39 d8                	cmp    eax,ebx
c0016eee:	7e 27                	jle    c0016f17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ef0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ef4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ef8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016efc:	39 e8                	cmp    eax,ebp
c0016efe:	7e 14                	jle    c0016f14 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016f00:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f02:	83 c7 04             	add    edi,0x4
c0016f05:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016f08:	53                   	push   ebx
c0016f09:	55                   	push   ebp
c0016f0a:	45                   	inc    ebp
c0016f0b:	56                   	push   esi
c0016f0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f0f:	83 c4 10             	add    esp,0x10
c0016f12:	eb e0                	jmp    c0016ef4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f14:	43                   	inc    ebx
c0016f15:	eb cd                	jmp    c0016ee4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f17:	83 c4 1c             	add    esp,0x1c
c0016f1a:	5b                   	pop    ebx
c0016f1b:	5e                   	pop    esi
c0016f1c:	5f                   	pop    edi
c0016f1d:	5d                   	pop    ebp
c0016f1e:	c3                   	ret    
c0016f1f:	90                   	nop

c0016f20 <ACPI::close(int, int, void*)>:
c0016f20:	83 ec 1c             	sub    esp,0x1c
c0016f23:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f2b:	74 0a                	je     c0016f37 <ACPI::close(int, int, void*)+0x17>
c0016f2d:	b8 00 00 00 00       	mov    eax,0x0
c0016f32:	e9 8a 00 00 00       	jmp    c0016fc1 <ACPI::close(int, int, void*)+0xa1>
c0016f37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f3c:	75 27                	jne    c0016f65 <ACPI::close(int, int, void*)+0x45>
c0016f3e:	a1 48 fc 02 c0       	mov    eax,ds:0xc002fc48
c0016f43:	85 c0                	test   eax,eax
c0016f45:	74 07                	je     c0016f4e <ACPI::close(int, int, void*)+0x2e>
c0016f47:	a1 48 fc 02 c0       	mov    eax,ds:0xc002fc48
c0016f4c:	ff d0                	call   eax
c0016f4e:	83 ec 0c             	sub    esp,0xc
c0016f51:	68 3c ad 02 c0       	push   0xc002ad3c
c0016f56:	e8 10 2d 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f63:	eb 5c                	jmp    c0016fc1 <ACPI::close(int, int, void*)+0xa1>
c0016f65:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f6a:	75 50                	jne    c0016fbc <ACPI::close(int, int, void*)+0x9c>
c0016f6c:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c0016f71:	85 c0                	test   eax,eax
c0016f73:	74 07                	je     c0016f7c <ACPI::close(int, int, void*)+0x5c>
c0016f75:	a1 44 fc 02 c0       	mov    eax,ds:0xc002fc44
c0016f7a:	ff d0                	call   eax
c0016f7c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f81:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f86:	83 e0 02             	and    eax,0x2
c0016f89:	74 1c                	je     c0016fa7 <ACPI::close(int, int, void*)+0x87>
c0016f8b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f96:	89 c2                	mov    edx,eax
c0016f98:	ec                   	in     al,dx
c0016f99:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016f9d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016fa1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fa5:	eb da                	jmp    c0016f81 <ACPI::close(int, int, void*)+0x61>
c0016fa7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fae:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fb3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fbb:	ee                   	out    dx,al
c0016fbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fc1:	83 c4 1c             	add    esp,0x1c
c0016fc4:	c3                   	ret    

c0016fc5 <findRSDP()>:
c0016fc5:	83 ec 1c             	sub    esp,0x1c
c0016fc8:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016fcd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fd3:	83 e0 04             	and    eax,0x4
c0016fd6:	84 c0                	test   al,al
c0016fd8:	75 07                	jne    c0016fe1 <findRSDP()+0x1c>
c0016fda:	b8 00 00 00 00       	mov    eax,0x0
c0016fdf:	eb 6a                	jmp    c001704b <findRSDP()+0x86>
c0016fe1:	a1 f4 d5 02 c0       	mov    eax,ds:0xc002d5f4
c0016fe6:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016feb:	7f 1b                	jg     c0017008 <findRSDP()+0x43>
c0016fed:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016ff2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ff8:	83 e2 fb             	and    edx,0xfffffffb
c0016ffb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017001:	b8 00 00 00 00       	mov    eax,0x0
c0017006:	eb 43                	jmp    c001704b <findRSDP()+0x86>
c0017008:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017010:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017018:	77 2c                	ja     c0017046 <findRSDP()+0x81>
c001701a:	83 ec 04             	sub    esp,0x4
c001701d:	6a 08                	push   0x8
c001701f:	68 d7 ad 02 c0       	push   0xc002add7
c0017024:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017028:	e8 1f 96 fe ff       	call   c000064c <memcmp>
c001702d:	83 c4 10             	add    esp,0x10
c0017030:	85 c0                	test   eax,eax
c0017032:	0f 94 c0             	sete   al
c0017035:	84 c0                	test   al,al
c0017037:	74 06                	je     c001703f <findRSDP()+0x7a>
c0017039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001703d:	eb 0c                	jmp    c001704b <findRSDP()+0x86>
c001703f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017044:	eb ca                	jmp    c0017010 <findRSDP()+0x4b>
c0017046:	b8 00 00 00 00       	mov    eax,0x0
c001704b:	83 c4 1c             	add    esp,0x1c
c001704e:	c3                   	ret    

c001704f <loadACPITables(unsigned char*)>:
c001704f:	57                   	push   edi
c0017050:	56                   	push   esi
c0017051:	53                   	push   ebx
c0017052:	83 ec 60             	sub    esp,0x60
c0017055:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001705a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017060:	83 e0 04             	and    eax,0x4
c0017063:	84 c0                	test   al,al
c0017065:	0f 84 33 02 00 00    	je     c001729e <loadACPITables(unsigned char*)+0x24f>
c001706b:	a0 60 fe 02 c0       	mov    al,ds:0xc002fe60
c0017070:	84 c0                	test   al,al
c0017072:	74 75                	je     c00170e9 <loadACPITables(unsigned char*)+0x9a>
c0017074:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017078:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001707c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017080:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017083:	83 e8 24             	sub    eax,0x24
c0017086:	c1 e8 03             	shr    eax,0x3
c0017089:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001708d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017095:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017099:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001709d:	0f 8d b2 00 00 00    	jge    c0017155 <loadACPITables(unsigned char*)+0x106>
c00170a3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170a7:	83 c0 24             	add    eax,0x24
c00170aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00170ae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170b6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00170ba:	c1 e0 03             	shl    eax,0x3
c00170bd:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00170c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00170c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00170ca:	89 c1                	mov    ecx,eax
c00170cc:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c00170d1:	8d 50 01             	lea    edx,[eax+0x1]
c00170d4:	89 15 4c fc 02 c0    	mov    DWORD PTR ds:0xc002fc4c,edx
c00170da:	89 ca                	mov    edx,ecx
c00170dc:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c00170e3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00170e7:	eb ac                	jmp    c0017095 <loadACPITables(unsigned char*)+0x46>
c00170e9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170ed:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00170f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170f8:	83 e8 24             	sub    eax,0x24
c00170fb:	c1 e8 02             	shr    eax,0x2
c00170fe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017102:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001710a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001710e:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017112:	7d 41                	jge    c0017155 <loadACPITables(unsigned char*)+0x106>
c0017114:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017118:	83 c0 24             	add    eax,0x24
c001711b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001711f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017123:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017127:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001712b:	c1 e0 02             	shl    eax,0x2
c001712e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017132:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017136:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017138:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c001713d:	8d 50 01             	lea    edx,[eax+0x1]
c0017140:	89 15 4c fc 02 c0    	mov    DWORD PTR ds:0xc002fc4c,edx
c0017146:	89 ca                	mov    edx,ecx
c0017148:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c001714f:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017153:	eb b5                	jmp    c001710a <loadACPITables(unsigned char*)+0xbb>
c0017155:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001715d:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c0017162:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017166:	0f 8d 33 01 00 00    	jge    c001729f <loadACPITables(unsigned char*)+0x250>
c001716c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017170:	8b 04 c5 64 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd039c]
c0017177:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001717b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001717f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017183:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017187:	25 ff 0f 00 00       	and    eax,0xfff
c001718c:	89 c6                	mov    esi,eax
c001718e:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017194:	83 ec 0c             	sub    esp,0xc
c0017197:	6a 01                	push   0x1
c0017199:	e8 03 a0 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00171a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171ab:	83 ec 0c             	sub    esp,0xc
c00171ae:	6a 01                	push   0x1
c00171b0:	6a 01                	push   0x1
c00171b2:	50                   	push   eax
c00171b3:	52                   	push   edx
c00171b4:	53                   	push   ebx
c00171b5:	e8 9a aa ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171ba:	83 c4 20             	add    esp,0x20
c00171bd:	09 f0                	or     eax,esi
c00171bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00171c7:	c1 e0 03             	shl    eax,0x3
c00171ca:	05 60 fc 02 c0       	add    eax,0xc002fc60
c00171cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171db:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00171e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00171f7:	89 c6                	mov    esi,eax
c00171f9:	89 d7                	mov    edi,edx
c00171fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00171fd:	89 c8                	mov    eax,ecx
c00171ff:	89 fa                	mov    edx,edi
c0017201:	89 f3                	mov    ebx,esi
c0017203:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017207:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001720b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001720f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017213:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017216:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001721a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001721e:	05 00 10 00 00       	add    eax,0x1000
c0017223:	c1 e8 0c             	shr    eax,0xc
c0017226:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001722a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001722e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017236:	25 ff 0f 00 00       	and    eax,0xfff
c001723b:	89 c6                	mov    esi,eax
c001723d:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c0017243:	83 ec 0c             	sub    esp,0xc
c0017246:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001724a:	e8 52 9f ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017256:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001725c:	83 ec 0c             	sub    esp,0xc
c001725f:	6a 01                	push   0x1
c0017261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017265:	50                   	push   eax
c0017266:	52                   	push   edx
c0017267:	53                   	push   ebx
c0017268:	e8 e7 a9 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001726d:	83 c4 20             	add    esp,0x20
c0017270:	09 f0                	or     eax,esi
c0017272:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001727a:	83 ec 0c             	sub    esp,0xc
c001727d:	50                   	push   eax
c001727e:	e8 64 a3 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001728a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001728e:	89 14 c5 64 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd039c],edx
c0017295:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017299:	e9 bf fe ff ff       	jmp    c001715d <loadACPITables(unsigned char*)+0x10e>
c001729e:	90                   	nop
c001729f:	83 c4 60             	add    esp,0x60
c00172a2:	5b                   	pop    ebx
c00172a3:	5e                   	pop    esi
c00172a4:	5f                   	pop    edi
c00172a5:	c3                   	ret    

c00172a6 <findRSDT(unsigned char*)>:
c00172a6:	57                   	push   edi
c00172a7:	56                   	push   esi
c00172a8:	53                   	push   ebx
c00172a9:	83 ec 50             	sub    esp,0x50
c00172ac:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00172b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172b7:	83 e0 04             	and    eax,0x4
c00172ba:	84 c0                	test   al,al
c00172bc:	75 0a                	jne    c00172c8 <findRSDT(unsigned char*)+0x22>
c00172be:	b8 00 00 00 00       	mov    eax,0x0
c00172c3:	e9 21 01 00 00       	jmp    c00173e9 <findRSDT(unsigned char*)+0x143>
c00172c8:	89 e0                	mov    eax,esp
c00172ca:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172d6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00172de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172ee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00172f2:	89 c6                	mov    esi,eax
c00172f4:	89 d7                	mov    edi,edx
c00172f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172f8:	89 c8                	mov    eax,ecx
c00172fa:	89 fa                	mov    edx,edi
c00172fc:	89 f3                	mov    ebx,esi
c00172fe:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017302:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017306:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001730a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001730e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017312:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001731a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001731e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017322:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001732a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001732e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017332:	25 ff 0f 00 00       	and    eax,0xfff
c0017337:	89 c6                	mov    esi,eax
c0017339:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	6a 02                	push   0x2
c0017344:	e8 58 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017350:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	6a 01                	push   0x1
c001735b:	6a 02                	push   0x2
c001735d:	50                   	push   eax
c001735e:	52                   	push   edx
c001735f:	53                   	push   ebx
c0017360:	e8 ef a8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017365:	83 c4 20             	add    esp,0x20
c0017368:	09 f0                	or     eax,esi
c001736a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001736e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017372:	25 ff 0f 00 00       	and    eax,0xfff
c0017377:	89 c6                	mov    esi,eax
c0017379:	8b 1d 10 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d710
c001737f:	83 ec 0c             	sub    esp,0xc
c0017382:	6a 02                	push   0x2
c0017384:	e8 18 9e ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0017389:	83 c4 10             	add    esp,0x10
c001738c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017390:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017396:	83 ec 0c             	sub    esp,0xc
c0017399:	6a 01                	push   0x1
c001739b:	6a 02                	push   0x2
c001739d:	50                   	push   eax
c001739e:	52                   	push   edx
c001739f:	53                   	push   ebx
c00173a0:	e8 af a8 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173a5:	83 c4 20             	add    esp,0x20
c00173a8:	09 f0                	or     eax,esi
c00173aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173ae:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00173b3:	75 11                	jne    c00173c6 <findRSDT(unsigned char*)+0x120>
c00173b5:	c6 05 60 fe 02 c0 00 	mov    BYTE PTR ds:0xc002fe60,0x0
c00173bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173c4:	eb 1f                	jmp    c00173e5 <findRSDT(unsigned char*)+0x13f>
c00173c6:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00173cb:	75 11                	jne    c00173de <findRSDT(unsigned char*)+0x138>
c00173cd:	c6 05 60 fe 02 c0 01 	mov    BYTE PTR ds:0xc002fe60,0x1
c00173d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00173d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173dc:	eb 07                	jmp    c00173e5 <findRSDT(unsigned char*)+0x13f>
c00173de:	b8 00 00 00 00       	mov    eax,0x0
c00173e3:	eb 04                	jmp    c00173e9 <findRSDT(unsigned char*)+0x143>
c00173e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00173e9:	83 c4 50             	add    esp,0x50
c00173ec:	5b                   	pop    ebx
c00173ed:	5e                   	pop    esi
c00173ee:	5f                   	pop    edi
c00173ef:	c3                   	ret    

c00173f0 <findDataTable(unsigned char*, char*)>:
c00173f0:	83 ec 1c             	sub    esp,0x1c
c00173f3:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00173f8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173fe:	83 e0 04             	and    eax,0x4
c0017401:	84 c0                	test   al,al
c0017403:	75 07                	jne    c001740c <findDataTable(unsigned char*, char*)+0x1c>
c0017405:	b8 00 00 00 00       	mov    eax,0x0
c001740a:	eb 52                	jmp    c001745e <findDataTable(unsigned char*, char*)+0x6e>
c001740c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017414:	a1 4c fc 02 c0       	mov    eax,ds:0xc002fc4c
c0017419:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001741d:	7d 3a                	jge    c0017459 <findDataTable(unsigned char*, char*)+0x69>
c001741f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017423:	c1 e0 03             	shl    eax,0x3
c0017426:	05 60 fc 02 c0       	add    eax,0xc002fc60
c001742b:	83 ec 04             	sub    esp,0x4
c001742e:	6a 04                	push   0x4
c0017430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017434:	50                   	push   eax
c0017435:	e8 12 92 fe ff       	call   c000064c <memcmp>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	85 c0                	test   eax,eax
c001743f:	0f 94 c0             	sete   al
c0017442:	84 c0                	test   al,al
c0017444:	74 0d                	je     c0017453 <findDataTable(unsigned char*, char*)+0x63>
c0017446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001744a:	8b 04 c5 64 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd039c]
c0017451:	eb 0b                	jmp    c001745e <findDataTable(unsigned char*, char*)+0x6e>
c0017453:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017457:	eb bb                	jmp    c0017414 <findDataTable(unsigned char*, char*)+0x24>
c0017459:	b8 00 00 00 00       	mov    eax,0x0
c001745e:	83 c4 1c             	add    esp,0x1c
c0017461:	c3                   	ret    

c0017462 <scanMADT()>:
c0017462:	53                   	push   ebx
c0017463:	83 ec 38             	sub    esp,0x38
c0017466:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001746b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017471:	83 e0 04             	and    eax,0x4
c0017474:	84 c0                	test   al,al
c0017476:	0f 84 4a 04 00 00    	je     c00178c6 <scanMADT()+0x464>
c001747c:	e8 44 fb ff ff       	call   c0016fc5 <findRSDP()>
c0017481:	a3 6c fe 02 c0       	mov    ds:0xc002fe6c,eax
c0017486:	a1 6c fe 02 c0       	mov    eax,ds:0xc002fe6c
c001748b:	85 c0                	test   eax,eax
c001748d:	75 19                	jne    c00174a8 <scanMADT()+0x46>
c001748f:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017494:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001749a:	83 e2 fb             	and    edx,0xfffffffb
c001749d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174a3:	e9 22 04 00 00       	jmp    c00178ca <scanMADT()+0x468>
c00174a8:	a1 6c fe 02 c0       	mov    eax,ds:0xc002fe6c
c00174ad:	83 ec 0c             	sub    esp,0xc
c00174b0:	50                   	push   eax
c00174b1:	e8 f0 fd ff ff       	call   c00172a6 <findRSDT(unsigned char*)>
c00174b6:	83 c4 10             	add    esp,0x10
c00174b9:	a3 68 fe 02 c0       	mov    ds:0xc002fe68,eax
c00174be:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174c3:	85 c0                	test   eax,eax
c00174c5:	75 19                	jne    c00174e0 <scanMADT()+0x7e>
c00174c7:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00174cc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174d2:	83 e2 fb             	and    edx,0xfffffffb
c00174d5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174db:	e9 ea 03 00 00       	jmp    c00178ca <scanMADT()+0x468>
c00174e0:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174e5:	83 ec 0c             	sub    esp,0xc
c00174e8:	50                   	push   eax
c00174e9:	e8 61 fb ff ff       	call   c001704f <loadACPITables(unsigned char*)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c00174f6:	83 ec 08             	sub    esp,0x8
c00174f9:	68 e0 ad 02 c0       	push   0xc002ade0
c00174fe:	50                   	push   eax
c00174ff:	e8 ec fe ff ff       	call   c00173f0 <findDataTable(unsigned char*, char*)>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001750b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017510:	75 19                	jne    c001752b <scanMADT()+0xc9>
c0017512:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017517:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001751d:	83 e2 fe             	and    edx,0xfffffffe
c0017520:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017526:	e9 9f 03 00 00       	jmp    c00178ca <scanMADT()+0x468>
c001752b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017533:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017537:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001753a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001753e:	0f 87 86 03 00 00    	ja     c00178ca <scanMADT()+0x468>
c0017544:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001754c:	0f 87 78 03 00 00    	ja     c00178ca <scanMADT()+0x468>
c0017552:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017556:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001755a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001755e:	8d 50 01             	lea    edx,[eax+0x1]
c0017561:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017565:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017569:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001756d:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017571:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017575:	8d 50 01             	lea    edx,[eax+0x1]
c0017578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001757c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017580:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017584:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017588:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001758d:	0f 86 36 03 00 00    	jbe    c00178c9 <scanMADT()+0x467>
c0017593:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017598:	75 57                	jne    c00175f1 <scanMADT()+0x18f>
c001759a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759e:	8d 50 01             	lea    edx,[eax+0x1]
c00175a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a5:	8a 15 60 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030060
c00175ab:	0f b6 d2             	movzx  edx,dl
c00175ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175b6:	88 82 a0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff60],al
c00175bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c0:	8d 50 01             	lea    edx,[eax+0x1]
c00175c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175c7:	8a 15 60 00 03 c0    	mov    dl,BYTE PTR ds:0xc0030060
c00175cd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175d0:	88 0d 60 00 03 c0    	mov    BYTE PTR ds:0xc0030060,cl
c00175d6:	0f b6 d2             	movzx  edx,dl
c00175d9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175dd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175e1:	88 82 80 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff80],al
c00175e7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175ec:	e9 c1 02 00 00       	jmp    c00178b2 <scanMADT()+0x450>
c00175f1:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175f6:	0f 85 14 01 00 00    	jne    c0017710 <scanMADT()+0x2ae>
c00175fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017600:	8d 50 01             	lea    edx,[eax+0x1]
c0017603:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017607:	8a 15 20 ff 02 c0    	mov    dl,BYTE PTR ds:0xc002ff20
c001760d:	0f b6 d2             	movzx  edx,dl
c0017610:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017614:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017618:	88 82 40 ff 02 c0    	mov    BYTE PTR [edx-0x3ffd00c0],al
c001761e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017622:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762a:	01 d0                	add    eax,edx
c001762c:	83 c0 2c             	add    eax,0x2c
c001762f:	8a 00                	mov    al,BYTE PTR [eax]
c0017631:	0f b6 d0             	movzx  edx,al
c0017634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017638:	8d 48 01             	lea    ecx,[eax+0x1]
c001763b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001763f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017643:	0f b6 c0             	movzx  eax,al
c0017646:	c1 e0 08             	shl    eax,0x8
c0017649:	89 d1                	mov    ecx,edx
c001764b:	09 c1                	or     ecx,eax
c001764d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017651:	8d 50 02             	lea    edx,[eax+0x2]
c0017654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017658:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001765c:	0f b6 c0             	movzx  eax,al
c001765f:	c1 e0 10             	shl    eax,0x10
c0017662:	09 c1                	or     ecx,eax
c0017664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017668:	8d 50 03             	lea    edx,[eax+0x3]
c001766b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001766f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017673:	0f b6 c0             	movzx  eax,al
c0017676:	c1 e0 18             	shl    eax,0x18
c0017679:	09 c1                	or     ecx,eax
c001767b:	89 ca                	mov    edx,ecx
c001767d:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c0017682:	0f b6 c0             	movzx  eax,al
c0017685:	89 14 85 60 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd00a0],edx
c001768c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017691:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017695:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017699:	01 d0                	add    eax,edx
c001769b:	83 c0 2c             	add    eax,0x2c
c001769e:	8a 00                	mov    al,BYTE PTR [eax]
c00176a0:	0f b6 d0             	movzx  edx,al
c00176a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00176aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176b2:	0f b6 c0             	movzx  eax,al
c00176b5:	c1 e0 08             	shl    eax,0x8
c00176b8:	89 d1                	mov    ecx,edx
c00176ba:	09 c1                	or     ecx,eax
c00176bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c0:	8d 50 02             	lea    edx,[eax+0x2]
c00176c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176cb:	0f b6 c0             	movzx  eax,al
c00176ce:	c1 e0 10             	shl    eax,0x10
c00176d1:	09 c1                	or     ecx,eax
c00176d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176d7:	8d 50 03             	lea    edx,[eax+0x3]
c00176da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176e2:	0f b6 c0             	movzx  eax,al
c00176e5:	c1 e0 18             	shl    eax,0x18
c00176e8:	09 c1                	or     ecx,eax
c00176ea:	89 ca                	mov    edx,ecx
c00176ec:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00176f1:	0f b6 c0             	movzx  eax,al
c00176f4:	89 14 85 e0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0020],edx
c00176fb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017700:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c0017705:	40                   	inc    eax
c0017706:	a2 20 ff 02 c0       	mov    ds:0xc002ff20,al
c001770b:	e9 a2 01 00 00       	jmp    c00178b2 <scanMADT()+0x450>
c0017710:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017715:	0f 85 e9 00 00 00    	jne    c0017804 <scanMADT()+0x3a2>
c001771b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001771f:	8d 50 01             	lea    edx,[eax+0x1]
c0017722:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017726:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001772a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001772e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017736:	8d 50 01             	lea    edx,[eax+0x1]
c0017739:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001773d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017741:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017745:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001774d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017751:	01 d0                	add    eax,edx
c0017753:	83 c0 2c             	add    eax,0x2c
c0017756:	8a 00                	mov    al,BYTE PTR [eax]
c0017758:	0f b6 d0             	movzx  edx,al
c001775b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001775f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017762:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017766:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001776a:	0f b6 c0             	movzx  eax,al
c001776d:	c1 e0 08             	shl    eax,0x8
c0017770:	89 d1                	mov    ecx,edx
c0017772:	09 c1                	or     ecx,eax
c0017774:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017778:	8d 50 02             	lea    edx,[eax+0x2]
c001777b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001777f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017783:	0f b6 c0             	movzx  eax,al
c0017786:	c1 e0 10             	shl    eax,0x10
c0017789:	09 c1                	or     ecx,eax
c001778b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001778f:	8d 50 03             	lea    edx,[eax+0x3]
c0017792:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017796:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001779a:	0f b6 c0             	movzx  eax,al
c001779d:	c1 e0 18             	shl    eax,0x18
c00177a0:	09 c8                	or     eax,ecx
c00177a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177a6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b3:	01 d0                	add    eax,edx
c00177b5:	83 c0 2c             	add    eax,0x2c
c00177b8:	8a 00                	mov    al,BYTE PTR [eax]
c00177ba:	0f b6 c0             	movzx  eax,al
c00177bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177c1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177c8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177cc:	0f b6 d2             	movzx  edx,dl
c00177cf:	c1 e2 08             	shl    edx,0x8
c00177d2:	09 d0                	or     eax,edx
c00177d4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177d9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177de:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177e7:	88 90 00 c8 02 c0    	mov    BYTE PTR [eax-0x3ffd3800],dl
c00177ed:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177f2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177f7:	66 89 84 12 00 ff 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd0100],ax
c00177ff:	e9 ae 00 00 00       	jmp    c00178b2 <scanMADT()+0x450>
c0017804:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017809:	0f 85 97 00 00 00    	jne    c00178a6 <scanMADT()+0x444>
c001780f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017813:	8d 50 01             	lea    edx,[eax+0x1]
c0017816:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001781a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001781e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017822:	0f b6 c0             	movzx  eax,al
c0017825:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017829:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001782d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017831:	01 d0                	add    eax,edx
c0017833:	83 c0 2c             	add    eax,0x2c
c0017836:	8a 00                	mov    al,BYTE PTR [eax]
c0017838:	0f b6 d0             	movzx  edx,al
c001783b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017842:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017846:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001784a:	0f b6 c0             	movzx  eax,al
c001784d:	c1 e0 08             	shl    eax,0x8
c0017850:	09 d0                	or     eax,edx
c0017852:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017856:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001785b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785f:	8d 50 01             	lea    edx,[eax+0x1]
c0017862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017866:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001786a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001786e:	0f b6 c0             	movzx  eax,al
c0017871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017879:	c1 e0 08             	shl    eax,0x8
c001787c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017880:	89 c1                	mov    ecx,eax
c0017882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017886:	c1 e0 18             	shl    eax,0x18
c0017889:	89 c3                	mov    ebx,eax
c001788b:	a1 70 fe 02 c0       	mov    eax,ds:0xc002fe70
c0017890:	8d 50 01             	lea    edx,[eax+0x1]
c0017893:	89 15 70 fe 02 c0    	mov    DWORD PTR ds:0xc002fe70,edx
c0017899:	09 d9                	or     ecx,ebx
c001789b:	89 ca                	mov    edx,ecx
c001789d:	89 14 85 80 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0180],edx
c00178a4:	eb 0c                	jmp    c00178b2 <scanMADT()+0x450>
c00178a6:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00178ab:	75 05                	jne    c00178b2 <scanMADT()+0x450>
c00178ad:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00178b2:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178bb:	01 d0                	add    eax,edx
c00178bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178c1:	e9 6d fc ff ff       	jmp    c0017533 <scanMADT()+0xd1>
c00178c6:	90                   	nop
c00178c7:	eb 01                	jmp    c00178ca <scanMADT()+0x468>
c00178c9:	90                   	nop
c00178ca:	83 c4 38             	add    esp,0x38
c00178cd:	5b                   	pop    ebx
c00178ce:	c3                   	ret    
c00178cf:	90                   	nop

c00178d0 <ACPI::ACPI()>:
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d7:	83 ec 08             	sub    esp,0x8
c00178da:	68 e5 ad 02 c0       	push   0xc002ade5
c00178df:	50                   	push   eax
c00178e0:	e8 63 c2 ff ff       	call   c0013b48 <Device::Device(char const*)>
c00178e5:	83 c4 10             	add    esp,0x10
c00178e8:	ba 40 af 02 c0       	mov    edx,0xc002af40
c00178ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f1:	89 10                	mov    DWORD PTR [eax],edx
c00178f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017902:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001790c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017910:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001791a:	e8 43 fb ff ff       	call   c0017462 <scanMADT()>
c001791f:	90                   	nop
c0017920:	83 c4 0c             	add    esp,0xc
c0017923:	c3                   	ret    

c0017924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017924:	83 ec 2c             	sub    esp,0x2c
c0017927:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001792b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001792f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017933:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017937:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001793c:	88 d0                	mov    al,dl
c001793e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017942:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017947:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001794f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017953:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017959:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001795d:	0f 8d 97 00 00 00    	jge    c00179fa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017963:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017967:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001796b:	83 c2 2a             	add    edx,0x2a
c001796e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017972:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017977:	75 78                	jne    c00179f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017981:	83 c2 2a             	add    edx,0x2a
c0017984:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017988:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001798c:	75 63                	jne    c00179f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001798e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017993:	74 3a                	je     c00179cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017995:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017999:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001799d:	83 c2 2a             	add    edx,0x2a
c00179a0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ab:	39 c2                	cmp    edx,eax
c00179ad:	74 10                	je     c00179bf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179af:	83 ec 0c             	sub    esp,0xc
c00179b2:	68 60 ad 02 c0       	push   0xc002ad60
c00179b7:	e8 af 22 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	83 ec 0c             	sub    esp,0xc
c00179c2:	68 ea ad 02 c0       	push   0xc002adea
c00179c7:	e8 9f 22 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c00179cc:	83 c4 10             	add    esp,0x10
c00179cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179db:	83 c2 2a             	add    edx,0x2a
c00179de:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00179e4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179e7:	89 01                	mov    DWORD PTR [ecx],eax
c00179e9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179ec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179f1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179f5:	e9 55 ff ff ff       	jmp    c001794f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179fa:	90                   	nop
c00179fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179ff:	83 c4 2c             	add    esp,0x2c
c0017a02:	c2 04 00             	ret    0x4
c0017a05:	90                   	nop

c0017a06 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a06:	83 ec 1c             	sub    esp,0x1c
c0017a09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a0d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a11:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a15:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a1a:	88 c8                	mov    al,cl
c0017a1c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a20:	88 d0                	mov    al,dl
c0017a22:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a34:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a37:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a3b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a43:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a4d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a54:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a63:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017a67:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6e:	83 c2 2a             	add    edx,0x2a
c0017a71:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a79:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a83:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017a8a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a92:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a98:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017aaf:	3d 00 02 00 00       	cmp    eax,0x200
c0017ab4:	75 10                	jne    c0017ac6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017ab6:	83 ec 0c             	sub    esp,0xc
c0017ab9:	68 f9 ad 02 c0       	push   0xc002adf9
c0017abe:	e8 a8 21 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	90                   	nop
c0017ac7:	83 c4 1c             	add    esp,0x1c
c0017aca:	c3                   	ret    
c0017acb:	90                   	nop

c0017acc <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017acc:	b8 00 00 00 00       	mov    eax,0x0
c0017ad1:	c3                   	ret    

c0017ad2 <ACPI::detectPCI()>:
c0017ad2:	53                   	push   ebx
c0017ad3:	83 ec 28             	sub    esp,0x28
c0017ad6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017adb:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017ae0:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017ae5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aeb:	83 e0 04             	and    eax,0x4
c0017aee:	84 c0                	test   al,al
c0017af0:	74 2b                	je     c0017b1d <ACPI::detectPCI()+0x4b>
c0017af2:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c0017af7:	83 ec 08             	sub    esp,0x8
c0017afa:	68 16 ae 02 c0       	push   0xc002ae16
c0017aff:	50                   	push   eax
c0017b00:	e8 eb f8 ff ff       	call   c00173f0 <findDataTable(unsigned char*, char*)>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b0c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b11:	74 0a                	je     c0017b1d <ACPI::detectPCI()+0x4b>
c0017b13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b18:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b1d:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b29:	8a 00                	mov    al,BYTE PTR [eax]
c0017b2b:	3c 01                	cmp    al,0x1
c0017b2d:	75 0c                	jne    c0017b3b <ACPI::detectPCI()+0x69>
c0017b2f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b34:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b39:	eb 26                	jmp    c0017b61 <ACPI::detectPCI()+0x8f>
c0017b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b3f:	8a 00                	mov    al,BYTE PTR [eax]
c0017b41:	3c 02                	cmp    al,0x2
c0017b43:	75 1c                	jne    c0017b61 <ACPI::detectPCI()+0x8f>
c0017b45:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b4a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b4f:	74 10                	je     c0017b61 <ACPI::detectPCI()+0x8f>
c0017b51:	83 ec 0c             	sub    esp,0xc
c0017b54:	68 90 ad 02 c0       	push   0xc002ad90
c0017b59:	e8 0d 21 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017b65:	83 f0 01             	xor    eax,0x1
c0017b68:	84 c0                	test   al,al
c0017b6a:	74 3f                	je     c0017bab <ACPI::detectPCI()+0xd9>
c0017b6c:	e8 df 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017b71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b75:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017b7a:	75 0c                	jne    c0017b88 <ACPI::detectPCI()+0xb6>
c0017b7c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b81:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b86:	eb 23                	jmp    c0017bab <ACPI::detectPCI()+0xd9>
c0017b88:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017b8d:	75 1c                	jne    c0017bab <ACPI::detectPCI()+0xd9>
c0017b8f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b94:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b99:	74 10                	je     c0017bab <ACPI::detectPCI()+0xd9>
c0017b9b:	83 ec 0c             	sub    esp,0xc
c0017b9e:	68 90 ad 02 c0       	push   0xc002ad90
c0017ba3:	e8 c3 20 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bb0:	74 7e                	je     c0017c30 <ACPI::detectPCI()+0x15e>
c0017bb2:	83 ec 0c             	sub    esp,0xc
c0017bb5:	68 1b ae 02 c0       	push   0xc002ae1b
c0017bba:	e8 37 7a ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017bbf:	83 c4 10             	add    esp,0x10
c0017bc2:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017bca:	83 ec 0c             	sub    esp,0xc
c0017bcd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bd1:	e8 c6 79 ff ff       	call   c000f59c <malloc>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	89 c3                	mov    ebx,eax
c0017bdb:	83 ec 0c             	sub    esp,0xc
c0017bde:	53                   	push   ebx
c0017bdf:	e8 ac a5 00 00       	call   c0022190 <PCI::PCI()>
c0017be4:	83 c4 10             	add    esp,0x10
c0017be7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017beb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bef:	83 ec 08             	sub    esp,0x8
c0017bf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bf6:	50                   	push   eax
c0017bf7:	e8 48 bd ff ff       	call   c0013944 <Device::addChild(Device*)>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c05:	83 c0 08             	add    eax,0x8
c0017c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c0a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c0f:	74 07                	je     c0017c18 <ACPI::detectPCI()+0x146>
c0017c11:	ba 01 00 00 00       	mov    edx,0x1
c0017c16:	eb 05                	jmp    c0017c1d <ACPI::detectPCI()+0x14b>
c0017c18:	ba 02 00 00 00       	mov    edx,0x2
c0017c1d:	6a 00                	push   0x0
c0017c1f:	6a 00                	push   0x0
c0017c21:	52                   	push   edx
c0017c22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c26:	ff d0                	call   eax
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	e9 9e 00 00 00       	jmp    c0017cce <ACPI::detectPCI()+0x1fc>
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	68 33 ae 02 c0       	push   0xc002ae33
c0017c38:	e8 ce a8 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0017c3d:	83 c4 10             	add    esp,0x10
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	68 3e ae 02 c0       	push   0xc002ae3e
c0017c48:	e8 a9 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017c4d:	83 c4 10             	add    esp,0x10
c0017c50:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017c57:	83 ec 0c             	sub    esp,0xc
c0017c5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c5e:	e8 39 79 ff ff       	call   c000f59c <malloc>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	89 c3                	mov    ebx,eax
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	53                   	push   ebx
c0017c6c:	e8 89 b0 00 00       	call   c0022cfa <IDE::IDE()>
c0017c71:	83 c4 10             	add    esp,0x10
c0017c74:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017c78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c7c:	83 ec 08             	sub    esp,0x8
c0017c7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c83:	50                   	push   eax
c0017c84:	e8 bb bc ff ff       	call   c0013944 <Device::addChild(Device*)>
c0017c89:	83 c4 10             	add    esp,0x10
c0017c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c90:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c9e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cab:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017cb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cba:	83 c0 08             	add    eax,0x8
c0017cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cbf:	6a 00                	push   0x0
c0017cc1:	6a 00                	push   0x0
c0017cc3:	6a 00                	push   0x0
c0017cc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cc9:	ff d0                	call   eax
c0017ccb:	83 c4 10             	add    esp,0x10
c0017cce:	90                   	nop
c0017ccf:	83 c4 28             	add    esp,0x28
c0017cd2:	5b                   	pop    ebx
c0017cd3:	c3                   	ret    

c0017cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017cd4:	83 ec 1c             	sub    esp,0x1c
c0017cd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cdb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017cde:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017ce2:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017ce7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017cec:	83 ec 08             	sub    esp,0x8
c0017cef:	52                   	push   edx
c0017cf0:	50                   	push   eax
c0017cf1:	e8 ba 6e ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017cf6:	83 c4 10             	add    esp,0x10
c0017cf9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017cfd:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017d02:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017d07:	83 ec 04             	sub    esp,0x4
c0017d0a:	6a 01                	push   0x1
c0017d0c:	52                   	push   edx
c0017d0d:	50                   	push   eax
c0017d0e:	e8 cf 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	90                   	nop
c0017d17:	83 c4 1c             	add    esp,0x1c
c0017d1a:	c3                   	ret    
c0017d1b:	90                   	nop

c0017d1c <ACPI::sleep()>:
c0017d1c:	83 ec 0c             	sub    esp,0xc
c0017d1f:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c0017d24:	85 c0                	test   eax,eax
c0017d26:	74 07                	je     c0017d2f <ACPI::sleep()+0x13>
c0017d28:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c0017d2d:	ff d0                	call   eax
c0017d2f:	90                   	nop
c0017d30:	83 c4 0c             	add    esp,0xc
c0017d33:	c3                   	ret    

c0017d34 <ACPI::open(int, int, void*)>:
c0017d34:	57                   	push   edi
c0017d35:	56                   	push   esi
c0017d36:	53                   	push   ebx
c0017d37:	81 ec 60 01 00 00    	sub    esp,0x160
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017d47:	e8 86 fd ff ff       	call   c0017ad2 <ACPI::detectPCI()>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	68 b8 ad 02 c0       	push   0xc002adb8
c0017d57:	e8 9a 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	68 53 ae 02 c0       	push   0xc002ae53
c0017d67:	e8 52 46 00 00       	call   c001c3be <Thr::loadKernelSymbolTable(char const*)>
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	83 ec 0c             	sub    esp,0xc
c0017d72:	68 71 ae 02 c0       	push   0xc002ae71
c0017d77:	e8 7a 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d7c:	83 c4 10             	add    esp,0x10
c0017d7f:	83 ec 04             	sub    esp,0x4
c0017d82:	6a 0c                	push   0xc
c0017d84:	68 8c ae 02 c0       	push   0xc002ae8c
c0017d89:	68 9d ae 02 c0       	push   0xc002ae9d
c0017d8e:	e8 94 2c 00 00       	call   c001aa27 <Reg::readIntWithDefault(char*, char*, int)>
c0017d93:	83 c4 10             	add    esp,0x10
c0017d96:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017d9d:	83 ec 0c             	sub    esp,0xc
c0017da0:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017da7:	e8 ff 95 ff ff       	call   c00113ab <Virt::setupPageSwapping(int)>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	68 35 9c 02 c0       	push   0xc0029c35
c0017db7:	e8 3a 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017dbc:	83 c4 10             	add    esp,0x10
c0017dbf:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017dc5:	83 ec 08             	sub    esp,0x8
c0017dc8:	6a 01                	push   0x1
c0017dca:	68 a4 ae 02 c0       	push   0xc002aea4
c0017dcf:	e8 61 50 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0017dd4:	83 c4 10             	add    esp,0x10
c0017dd7:	83 ec 08             	sub    esp,0x8
c0017dda:	53                   	push   ebx
c0017ddb:	50                   	push   eax
c0017ddc:	e8 82 52 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017deb:	83 ec 08             	sub    esp,0x8
c0017dee:	6a 12                	push   0x12
c0017df0:	50                   	push   eax
c0017df1:	e8 d2 be ff ff       	call   c0013cc8 <getDevicesOfType(DeviceType)>
c0017df6:	83 c4 0c             	add    esp,0xc
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e03:	50                   	push   eax
c0017e04:	e8 8b 09 01 00       	call   c0028794 <LinkedList<Device>::isEmpty()>
c0017e09:	83 c4 10             	add    esp,0x10
c0017e0c:	83 f0 01             	xor    eax,0x1
c0017e0f:	84 c0                	test   al,al
c0017e11:	0f 84 43 01 00 00    	je     c0017f5a <ACPI::open(int, int, void*)+0x226>
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e21:	50                   	push   eax
c0017e22:	e8 89 09 01 00       	call   c00287b0 <LinkedList<Device>::getFirstElement()>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017e31:	83 ec 0c             	sub    esp,0xc
c0017e34:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e3b:	50                   	push   eax
c0017e3c:	e8 77 09 01 00       	call   c00287b8 <LinkedList<Device>::removeFirst()>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017e4b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017e52:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017e59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017e5d:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017e63:	ba 09 00 00 00       	mov    edx,0x9
c0017e68:	fc                   	cld    
c0017e69:	89 c7                	mov    edi,eax
c0017e6b:	89 de                	mov    esi,ebx
c0017e6d:	89 d1                	mov    ecx,edx
c0017e6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e71:	83 ec 08             	sub    esp,0x8
c0017e74:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017e78:	50                   	push   eax
c0017e79:	83 ec 24             	sub    esp,0x24
c0017e7c:	89 e0                	mov    eax,esp
c0017e7e:	89 c3                	mov    ebx,eax
c0017e80:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017e84:	ba 09 00 00 00       	mov    edx,0x9
c0017e89:	89 df                	mov    edi,ebx
c0017e8b:	89 c6                	mov    esi,eax
c0017e8d:	89 d1                	mov    ecx,edx
c0017e8f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e91:	e8 d8 a7 00 00       	call   c002266e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017e96:	83 c4 30             	add    esp,0x30
c0017e99:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017ea0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017ea8:	0f 84 4b ff ff ff    	je     c0017df9 <ACPI::open(int, int, void*)+0xc5>
c0017eae:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017ec3:	e8 d4 76 ff ff       	call   c000f59c <malloc>
c0017ec8:	83 c4 10             	add    esp,0x10
c0017ecb:	89 c3                	mov    ebx,eax
c0017ecd:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0017ed2:	83 ec 04             	sub    esp,0x4
c0017ed5:	50                   	push   eax
c0017ed6:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017edd:	53                   	push   ebx
c0017ede:	e8 87 ab ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017eed:	83 ec 0c             	sub    esp,0xc
c0017ef0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017ef7:	e8 40 ae ff ff       	call   c0012d3c <File::exists()>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	84 c0                	test   al,al
c0017f01:	74 27                	je     c0017f2a <ACPI::open(int, int, void*)+0x1f6>
c0017f03:	83 ec 08             	sub    esp,0x8
c0017f06:	6a 01                	push   0x1
c0017f08:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f0f:	e8 21 4f 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0017f14:	83 c4 10             	add    esp,0x10
c0017f17:	83 ec 08             	sub    esp,0x8
c0017f1a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f21:	50                   	push   eax
c0017f22:	e8 3c 51 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017f32:	0f 84 c1 fe ff ff    	je     c0017df9 <ACPI::open(int, int, void*)+0xc5>
c0017f38:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0017f3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f41:	83 c0 08             	add    eax,0x8
c0017f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f46:	83 ec 0c             	sub    esp,0xc
c0017f49:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f50:	ff d0                	call   eax
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	e9 9f fe ff ff       	jmp    c0017df9 <ACPI::open(int, int, void*)+0xc5>
c0017f5a:	83 ec 0c             	sub    esp,0xc
c0017f5d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f64:	50                   	push   eax
c0017f65:	e8 28 08 01 00       	call   c0028792 <LinkedList<Device>::~LinkedList()>
c0017f6a:	83 c4 10             	add    esp,0x10
c0017f6d:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017f73:	83 ec 08             	sub    esp,0x8
c0017f76:	6a 01                	push   0x1
c0017f78:	68 bf ae 02 c0       	push   0xc002aebf
c0017f7d:	e8 b3 4e 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0017f82:	83 c4 10             	add    esp,0x10
c0017f85:	83 ec 08             	sub    esp,0x8
c0017f88:	53                   	push   ebx
c0017f89:	50                   	push   eax
c0017f8a:	e8 d4 50 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	8b 1d a8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a8
c0017f98:	83 ec 08             	sub    esp,0x8
c0017f9b:	6a 01                	push   0x1
c0017f9d:	68 dc ae 02 c0       	push   0xc002aedc
c0017fa2:	e8 8e 4e 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0017fa7:	83 c4 10             	add    esp,0x10
c0017faa:	83 ec 08             	sub    esp,0x8
c0017fad:	53                   	push   ebx
c0017fae:	50                   	push   eax
c0017faf:	e8 af 50 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0017fb4:	83 c4 10             	add    esp,0x10
c0017fb7:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0017fbc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fc2:	83 e0 04             	and    eax,0x4
c0017fc5:	84 c0                	test   al,al
c0017fc7:	0f 84 0d 01 00 00    	je     c00180da <ACPI::open(int, int, void*)+0x3a6>
c0017fcd:	83 ec 0c             	sub    esp,0xc
c0017fd0:	68 f9 ae 02 c0       	push   0xc002aef9
c0017fd5:	e8 1c 76 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017fda:	83 c4 10             	add    esp,0x10
c0017fdd:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0017fe8:	83 ec 0c             	sub    esp,0xc
c0017feb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0017ff2:	e8 a5 75 ff ff       	call   c000f59c <malloc>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	89 c3                	mov    ebx,eax
c0017ffc:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0018001:	83 ec 04             	sub    esp,0x4
c0018004:	50                   	push   eax
c0018005:	68 16 af 02 c0       	push   0xc002af16
c001800a:	53                   	push   ebx
c001800b:	e8 5a aa ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001801a:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018022:	74 1a                	je     c001803e <ACPI::open(int, int, void*)+0x30a>
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001802e:	e8 09 ad ff ff       	call   c0012d3c <File::exists()>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	84 c0                	test   al,al
c0018038:	74 04                	je     c001803e <ACPI::open(int, int, void*)+0x30a>
c001803a:	b0 01                	mov    al,0x1
c001803c:	eb 02                	jmp    c0018040 <ACPI::open(int, int, void*)+0x30c>
c001803e:	b0 00                	mov    al,0x0
c0018040:	84 c0                	test   al,al
c0018042:	74 25                	je     c0018069 <ACPI::open(int, int, void*)+0x335>
c0018044:	83 ec 08             	sub    esp,0x8
c0018047:	6a 01                	push   0x1
c0018049:	68 16 af 02 c0       	push   0xc002af16
c001804e:	e8 e2 4d 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	83 ec 08             	sub    esp,0x8
c0018059:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018060:	50                   	push   eax
c0018061:	e8 fd 4f 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c0018066:	83 c4 10             	add    esp,0x10
c0018069:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018071:	74 27                	je     c001809a <ACPI::open(int, int, void*)+0x366>
c0018073:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001807b:	74 1d                	je     c001809a <ACPI::open(int, int, void*)+0x366>
c001807d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018084:	8b 00                	mov    eax,DWORD PTR [eax]
c0018086:	83 c0 08             	add    eax,0x8
c0018089:	8b 00                	mov    eax,DWORD PTR [eax]
c001808b:	83 ec 0c             	sub    esp,0xc
c001808e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018095:	ff d0                	call   eax
c0018097:	83 c4 10             	add    esp,0x10
c001809a:	a1 68 fe 02 c0       	mov    eax,ds:0xc002fe68
c001809f:	83 ec 08             	sub    esp,0x8
c00180a2:	68 33 af 02 c0       	push   0xc002af33
c00180a7:	50                   	push   eax
c00180a8:	e8 43 f3 ff ff       	call   c00173f0 <findDataTable(unsigned char*, char*)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00180b7:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00180bf:	74 19                	je     c00180da <ACPI::open(int, int, void*)+0x3a6>
c00180c1:	83 ec 08             	sub    esp,0x8
c00180c4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180cb:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180d2:	e8 fd fb ff ff       	call   c0017cd4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	b8 00 00 00 00       	mov    eax,0x0
c00180df:	81 c4 60 01 00 00    	add    esp,0x160
c00180e5:	5b                   	pop    ebx
c00180e6:	5e                   	pop    esi
c00180e7:	5f                   	pop    edi
c00180e8:	c3                   	ret    
c00180e9:	90                   	nop

c00180ea <CPU::close(int, int, void*)>:
c00180ea:	31 c0                	xor    eax,eax
c00180ec:	c3                   	ret    
c00180ed:	90                   	nop

c00180ee <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00180ee:	55                   	push   ebp
c00180ef:	57                   	push   edi
c00180f0:	56                   	push   esi
c00180f1:	53                   	push   ebx
c00180f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180fa:	89 ce                	mov    esi,ecx
c00180fc:	89 d5                	mov    ebp,edx
c00180fe:	80 f9 04             	cmp    cl,0x4
c0018101:	75 28                	jne    c001812b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018103:	8d 42 f9             	lea    eax,[edx-0x7]
c0018106:	3c 03                	cmp    al,0x3
c0018108:	0f 86 63 01 00 00    	jbe    c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001810e:	80 fa 03             	cmp    dl,0x3
c0018111:	0f 84 5a 01 00 00    	je     c0018271 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018117:	8d 7a f2             	lea    edi,[edx-0xe]
c001811a:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c001811f:	89 fb                	mov    ebx,edi
c0018121:	80 fb 01             	cmp    bl,0x1
c0018124:	77 4e                	ja     c0018174 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018126:	e9 52 01 00 00       	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001812b:	80 f9 05             	cmp    cl,0x5
c001812e:	75 4d                	jne    c001817d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018130:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c0018135:	80 fa 03             	cmp    dl,0x3
c0018138:	0f 86 3f 01 00 00    	jbe    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001813e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018141:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018146:	89 fb                	mov    ebx,edi
c0018148:	80 fb 01             	cmp    bl,0x1
c001814b:	0f 86 2c 01 00 00    	jbe    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018151:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018156:	80 fa 08             	cmp    dl,0x8
c0018159:	0f 84 1e 01 00 00    	je     c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001815f:	89 d7                	mov    edi,edx
c0018161:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018166:	83 e7 fb             	and    edi,0xfffffffb
c0018169:	89 fb                	mov    ebx,edi
c001816b:	80 fb 09             	cmp    bl,0x9
c001816e:	0f 84 09 01 00 00    	je     c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018174:	31 c0                	xor    eax,eax
c0018176:	89 eb                	mov    ebx,ebp
c0018178:	0f b6 fb             	movzx  edi,bl
c001817b:	eb 30                	jmp    c00181ad <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001817d:	31 c0                	xor    eax,eax
c001817f:	80 f9 06             	cmp    cl,0x6
c0018182:	75 f2                	jne    c0018176 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018184:	80 fa 0a             	cmp    dl,0xa
c0018187:	77 ed                	ja     c0018176 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018189:	bf de 05 00 00       	mov    edi,0x5de
c001818e:	0f a3 d7             	bt     edi,edx
c0018191:	73 e3                	jae    c0018176 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018193:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c0018198:	e9 e0 00 00 00       	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001819d:	39 c7                	cmp    edi,eax
c001819f:	0f 84 d3 00 00 00    	je     c0018278 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00181a5:	40                   	inc    eax
c00181a6:	3d d0 00 00 00       	cmp    eax,0xd0
c00181ab:	74 09                	je     c00181b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00181ad:	89 f3                	mov    ebx,esi
c00181af:	80 fb 0f             	cmp    bl,0xf
c00181b2:	75 f1                	jne    c00181a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00181b4:	eb e7                	jmp    c001819d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00181b6:	80 f9 10             	cmp    cl,0x10
c00181b9:	75 14                	jne    c00181cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00181bb:	8d 42 fc             	lea    eax,[edx-0x4]
c00181be:	83 e0 fb             	and    eax,0xfffffffb
c00181c1:	3c 02                	cmp    al,0x2
c00181c3:	76 34                	jbe    c00181f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00181c5:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181ca:	80 fa 02             	cmp    dl,0x2
c00181cd:	eb 24                	jmp    c00181f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00181cf:	80 f9 11             	cmp    cl,0x11
c00181d2:	75 13                	jne    c00181e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00181d4:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181d9:	80 fa 03             	cmp    dl,0x3
c00181dc:	0f 85 9b 00 00 00    	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181e2:	e9 91 00 00 00       	jmp    c0018278 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00181e7:	80 f9 12             	cmp    cl,0x12
c00181ea:	75 14                	jne    c0018200 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00181ec:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00181f1:	fe ca                	dec    dl
c00181f3:	0f 85 84 00 00 00    	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181f9:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00181fe:	eb 7d                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018200:	80 f9 14             	cmp    cl,0x14
c0018203:	75 12                	jne    c0018217 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018205:	4a                   	dec    edx
c0018206:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c001820b:	80 fa 01             	cmp    dl,0x1
c001820e:	77 6d                	ja     c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018210:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018215:	eb 66                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018217:	80 f9 15             	cmp    cl,0x15
c001821a:	75 31                	jne    c001824d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001821c:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018221:	80 fa 01             	cmp    dl,0x1
c0018224:	74 57                	je     c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018226:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c001822b:	80 fa 13             	cmp    dl,0x13
c001822e:	76 0c                	jbe    c001823c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018230:	80 fa 30             	cmp    dl,0x30
c0018233:	75 48                	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018235:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c001823a:	eb 41                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018241:	0f a3 d1             	bt     ecx,edx
c0018244:	73 37                	jae    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018246:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c001824b:	eb 30                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001824d:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018252:	80 f9 16             	cmp    cl,0x16
c0018255:	75 26                	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018257:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c001825c:	84 d2                	test   dl,dl
c001825e:	74 1d                	je     c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018260:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018265:	80 fa 30             	cmp    dl,0x30
c0018268:	75 13                	jne    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001826a:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c001826f:	eb 0c                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018271:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c0018276:	eb 05                	jmp    c001827d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018278:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c001827d:	5b                   	pop    ebx
c001827e:	5e                   	pop    esi
c001827f:	5f                   	pop    edi
c0018280:	5d                   	pop    ebp
c0018281:	c3                   	ret    

c0018282 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018282:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001828a:	80 f9 04             	cmp    cl,0x4
c001828d:	75 6b                	jne    c00182fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001828f:	b8 20 c8 02 c0       	mov    eax,0xc002c820
c0018294:	80 fa 01             	cmp    dl,0x1
c0018297:	0f 86 92 02 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001829d:	b8 30 c8 02 c0       	mov    eax,0xc002c830
c00182a2:	80 fa 02             	cmp    dl,0x2
c00182a5:	0f 84 84 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ab:	b8 40 c8 02 c0       	mov    eax,0xc002c840
c00182b0:	80 fa 03             	cmp    dl,0x3
c00182b3:	0f 84 76 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182b9:	b8 50 c8 02 c0       	mov    eax,0xc002c850
c00182be:	80 fa 04             	cmp    dl,0x4
c00182c1:	0f 84 68 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c7:	b8 60 c8 02 c0       	mov    eax,0xc002c860
c00182cc:	80 fa 05             	cmp    dl,0x5
c00182cf:	0f 84 5a 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d5:	b8 40 c8 02 c0       	mov    eax,0xc002c840
c00182da:	80 fa 07             	cmp    dl,0x7
c00182dd:	0f 84 4c 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e3:	83 ea 08             	sub    edx,0x8
c00182e6:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00182eb:	80 fa 01             	cmp    dl,0x1
c00182ee:	0f 87 3b 02 00 00    	ja     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182f4:	b8 70 c8 02 c0       	mov    eax,0xc002c870
c00182f9:	c3                   	ret    
c00182fa:	80 f9 05             	cmp    cl,0x5
c00182fd:	75 45                	jne    c0018344 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00182ff:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018302:	b8 80 c8 02 c0       	mov    eax,0xc002c880
c0018307:	80 f9 02             	cmp    cl,0x2
c001830a:	0f 86 1f 02 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018310:	80 fa 04             	cmp    dl,0x4
c0018313:	0f 84 f3 01 00 00    	je     c001850c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018319:	80 fa 07             	cmp    dl,0x7
c001831c:	0f 84 0d 02 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018322:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c0018327:	80 fa 08             	cmp    dl,0x8
c001832a:	0f 84 ff 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018330:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018335:	80 fa 09             	cmp    dl,0x9
c0018338:	0f 85 f1 01 00 00    	jne    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001833e:	b8 a0 c8 02 c0       	mov    eax,0xc002c8a0
c0018343:	c3                   	ret    
c0018344:	80 f9 06             	cmp    cl,0x6
c0018347:	0f 85 85 01 00 00    	jne    c00184d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001834d:	b8 b0 c8 02 c0       	mov    eax,0xc002c8b0
c0018352:	80 fa 01             	cmp    dl,0x1
c0018355:	0f 84 d4 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835b:	8d 42 fb             	lea    eax,[edx-0x5]
c001835e:	3c 01                	cmp    al,0x1
c0018360:	0f 86 ac 01 00 00    	jbe    c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018366:	80 fa 03             	cmp    dl,0x3
c0018369:	0f 84 a3 01 00 00    	je     c0018512 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001836f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018372:	b8 d0 c8 02 c0       	mov    eax,0xc002c8d0
c0018377:	80 f9 01             	cmp    cl,0x1
c001837a:	0f 86 af 01 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018380:	80 fa 09             	cmp    dl,0x9
c0018383:	0f 84 8f 01 00 00    	je     c0018518 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018389:	8d 4a f6             	lea    ecx,[edx-0xa]
c001838c:	80 f9 01             	cmp    cl,0x1
c001838f:	0f 86 9a 01 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018395:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c001839a:	80 fa 0d             	cmp    dl,0xd
c001839d:	0f 84 8c 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a3:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c00183a8:	80 fa 0e             	cmp    dl,0xe
c00183ab:	0f 84 7e 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b1:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c00183b6:	80 fa 0f             	cmp    dl,0xf
c00183b9:	0f 84 70 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183bf:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c00183c4:	80 fa 15             	cmp    dl,0x15
c00183c7:	0f 84 62 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183cd:	8d 4a ea             	lea    ecx,[edx-0x16]
c00183d0:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c00183d5:	80 f9 01             	cmp    cl,0x1
c00183d8:	0f 86 51 01 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183de:	80 fa 1a             	cmp    dl,0x1a
c00183e1:	0f 84 37 01 00 00    	je     c001851e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00183e7:	80 fa 1c             	cmp    dl,0x1c
c00183ea:	0f 84 34 01 00 00    	je     c0018524 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00183f0:	80 fa 1d             	cmp    dl,0x1d
c00183f3:	0f 84 36 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f9:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c00183fe:	80 fa 25             	cmp    dl,0x25
c0018401:	0f 84 28 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018407:	8d 4a da             	lea    ecx,[edx-0x26]
c001840a:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c001840f:	80 f9 01             	cmp    cl,0x1
c0018412:	0f 86 17 01 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018418:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c001841d:	80 fa 2a             	cmp    dl,0x2a
c0018420:	0f 84 09 01 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018426:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c001842b:	80 fa 2c             	cmp    dl,0x2c
c001842e:	0f 84 fb 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018434:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c0018439:	80 fa 2d             	cmp    dl,0x2d
c001843c:	0f 84 ed 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018442:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c0018447:	80 fa 2e             	cmp    dl,0x2e
c001844a:	0f 84 df 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018450:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c0018455:	80 fa 2f             	cmp    dl,0x2f
c0018458:	0f 84 d1 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018461:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018466:	80 f9 01             	cmp    cl,0x1
c0018469:	0f 86 c0 00 00 00    	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846f:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018474:	80 fa 37             	cmp    dl,0x37
c0018477:	0f 84 b2 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847d:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018482:	80 fa 3a             	cmp    dl,0x3a
c0018485:	0f 84 a4 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848b:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c0018490:	80 fa 3c             	cmp    dl,0x3c
c0018493:	0f 84 96 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018499:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c001849e:	80 fa 3d             	cmp    dl,0x3d
c00184a1:	0f 84 88 00 00 00    	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a7:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c00184ac:	80 fa 3e             	cmp    dl,0x3e
c00184af:	74 7e                	je     c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b1:	8d 42 bb             	lea    eax,[edx-0x45]
c00184b4:	3c 01                	cmp    al,0x1
c00184b6:	76 72                	jbe    c001852a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184b8:	80 fa 3f             	cmp    dl,0x3f
c00184bb:	74 6d                	je     c001852a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184bd:	80 fa 4a             	cmp    dl,0x4a
c00184c0:	74 0a                	je     c00184cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00184c2:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00184c7:	80 fa 4d             	cmp    dl,0x4d
c00184ca:	75 63                	jne    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cc:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c00184d1:	c3                   	ret    
c00184d2:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c00184d7:	80 f9 0b             	cmp    cl,0xb
c00184da:	75 0a                	jne    c00184e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00184dc:	fe ca                	dec    dl
c00184de:	75 4f                	jne    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e0:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c00184e5:	c3                   	ret    
c00184e6:	80 f9 0f             	cmp    cl,0xf
c00184e9:	75 44                	jne    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184eb:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c00184f0:	80 fa 02             	cmp    dl,0x2
c00184f3:	76 3a                	jbe    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f5:	8d 42 fd             	lea    eax,[edx-0x3]
c00184f8:	3c 01                	cmp    al,0x1
c00184fa:	76 0a                	jbe    c0018506 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00184fc:	b8 b9 b0 02 c0       	mov    eax,0xc002b0b9
c0018501:	80 fa 06             	cmp    dl,0x6
c0018504:	75 29                	jne    c001852f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018506:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c001850b:	c3                   	ret    
c001850c:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c0018511:	c3                   	ret    
c0018512:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0018517:	c3                   	ret    
c0018518:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c001851d:	c3                   	ret    
c001851e:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c0018523:	c3                   	ret    
c0018524:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018529:	c3                   	ret    
c001852a:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c001852f:	c3                   	ret    

c0018530 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018530:	60                   	pusha  
c0018531:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018539:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001853d:	9c                   	pushf  
c001853e:	fa                   	cli    
c001853f:	0f 09                	wbinvd 
c0018541:	0f 30                	wrmsr  
c0018543:	9d                   	popf   
c0018544:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018548:	89 02                	mov    DWORD PTR [edx],eax
c001854a:	61                   	popa   
c001854b:	c3                   	ret    

c001854c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001854c:	60                   	pusha  
c001854d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018551:	9c                   	pushf  
c0018552:	fa                   	cli    
c0018553:	0f 09                	wbinvd 
c0018555:	31 c0                	xor    eax,eax
c0018557:	31 d2                	xor    edx,edx
c0018559:	0f 32                	rdmsr  
c001855b:	9d                   	popf   
c001855c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018560:	89 02                	mov    DWORD PTR [edx],eax
c0018562:	61                   	popa   
c0018563:	c3                   	ret    

c0018564 <CPU::AMD_K6_writeback(int, int, int)>:
c0018564:	56                   	push   esi
c0018565:	53                   	push   ebx
c0018566:	83 ec 10             	sub    esp,0x10
c0018569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001856d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018572:	75 5d                	jne    c00185d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018574:	83 f8 08             	cmp    eax,0x8
c0018577:	75 09                	jne    c0018582 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018579:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001857e:	7e 13                	jle    c0018593 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018580:	eb 30                	jmp    c00185b2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018582:	83 f8 06             	cmp    eax,0x6
c0018585:	7c 4a                	jl     c00185d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018587:	83 f8 07             	cmp    eax,0x7
c001858a:	7e 07                	jle    c0018593 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001858c:	83 f8 09             	cmp    eax,0x9
c001858f:	74 21                	je     c00185b2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018591:	eb 3e                	jmp    c00185d1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018593:	89 e6                	mov    esi,esp
c0018595:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c001859b:	56                   	push   esi
c001859c:	c1 eb 15             	shr    ebx,0x15
c001859f:	68 82 00 00 c0       	push   0xc0000082
c00185a4:	83 e3 7e             	and    ebx,0x7e
c00185a7:	e8 a0 ff ff ff       	call   c001854c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185ac:	56                   	push   esi
c00185ad:	6a 00                	push   0x0
c00185af:	53                   	push   ebx
c00185b0:	eb 12                	jmp    c00185c4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00185b2:	89 e3                	mov    ebx,esp
c00185b4:	53                   	push   ebx
c00185b5:	68 82 00 00 c0       	push   0xc0000082
c00185ba:	e8 8d ff ff ff       	call   c001854c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185bf:	53                   	push   ebx
c00185c0:	6a 00                	push   0x0
c00185c2:	6a 00                	push   0x0
c00185c4:	68 82 00 00 c0       	push   0xc0000082
c00185c9:	e8 62 ff ff ff       	call   c0018530 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00185ce:	83 c4 18             	add    esp,0x18
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	5b                   	pop    ebx
c00185d5:	5e                   	pop    esi
c00185d6:	c3                   	ret    
c00185d7:	90                   	nop

c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00185d8:	55                   	push   ebp
c00185d9:	57                   	push   edi
c00185da:	56                   	push   esi
c00185db:	53                   	push   ebx
c00185dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185e4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00185e8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00185ec:	39 05 c0 ca 02 c0    	cmp    DWORD PTR ds:0xc002cac0,eax
c00185f2:	75 23                	jne    c0018617 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00185f4:	a1 cc 00 03 c0       	mov    eax,ds:0xc00300cc
c00185f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185fd:	89 06                	mov    DWORD PTR [esi],eax
c00185ff:	a1 c8 00 03 c0       	mov    eax,ds:0xc00300c8
c0018604:	89 07                	mov    DWORD PTR [edi],eax
c0018606:	a1 c4 00 03 c0       	mov    eax,ds:0xc00300c4
c001860b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001860e:	a1 c0 00 03 c0       	mov    eax,ds:0xc00300c0
c0018613:	89 02                	mov    DWORD PTR [edx],eax
c0018615:	eb 3f                	jmp    c0018656 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018617:	31 c9                	xor    ecx,ecx
c0018619:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001861d:	0f a2                	cpuid  
c001861f:	89 06                	mov    DWORD PTR [esi],eax
c0018621:	89 1f                	mov    DWORD PTR [edi],ebx
c0018623:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018627:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001862a:	89 10                	mov    DWORD PTR [eax],edx
c001862c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018630:	a3 c0 ca 02 c0       	mov    ds:0xc002cac0,eax
c0018635:	8b 06                	mov    eax,DWORD PTR [esi]
c0018637:	a3 cc 00 03 c0       	mov    ds:0xc00300cc,eax
c001863c:	8b 07                	mov    eax,DWORD PTR [edi]
c001863e:	a3 c8 00 03 c0       	mov    ds:0xc00300c8,eax
c0018643:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018646:	a3 c4 00 03 c0       	mov    ds:0xc00300c4,eax
c001864b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001864f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018651:	a3 c0 00 03 c0       	mov    ds:0xc00300c0,eax
c0018656:	5b                   	pop    ebx
c0018657:	5e                   	pop    esi
c0018658:	5f                   	pop    edi
c0018659:	5d                   	pop    ebp
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <CPU::cpuidCheckEDX(unsigned int)>:
c001865c:	83 ec 10             	sub    esp,0x10
c001865f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018663:	50                   	push   eax
c0018664:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018668:	50                   	push   eax
c0018669:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001866d:	50                   	push   eax
c001866e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018672:	50                   	push   eax
c0018673:	6a 01                	push   0x1
c0018675:	e8 5e ff ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001867a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001867e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018682:	0f 95 c0             	setne  al
c0018685:	83 c4 24             	add    esp,0x24
c0018688:	c3                   	ret    
c0018689:	90                   	nop

c001868a <CPU::cpuidCheckECX(unsigned int)>:
c001868a:	83 ec 10             	sub    esp,0x10
c001868d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018691:	50                   	push   eax
c0018692:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018696:	50                   	push   eax
c0018697:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001869b:	50                   	push   eax
c001869c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186a0:	50                   	push   eax
c00186a1:	6a 01                	push   0x1
c00186a3:	e8 30 ff ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186ac:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00186b0:	0f 95 c0             	setne  al
c00186b3:	83 c4 24             	add    esp,0x24
c00186b6:	c3                   	ret    
c00186b7:	90                   	nop

c00186b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00186b8:	83 ec 10             	sub    esp,0x10
c00186bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186bf:	50                   	push   eax
c00186c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c4:	50                   	push   eax
c00186c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c9:	50                   	push   eax
c00186ca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ce:	50                   	push   eax
c00186cf:	6a 07                	push   0x7
c00186d1:	e8 02 ff ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186da:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00186de:	0f 95 c0             	setne  al
c00186e1:	83 c4 24             	add    esp,0x24
c00186e4:	c3                   	ret    
c00186e5:	90                   	nop

c00186e6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00186e6:	83 ec 10             	sub    esp,0x10
c00186e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ed:	50                   	push   eax
c00186ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f2:	50                   	push   eax
c00186f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f7:	50                   	push   eax
c00186f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186fc:	50                   	push   eax
c00186fd:	6a 07                	push   0x7
c00186ff:	e8 d4 fe ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018708:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001870c:	0f 95 c0             	setne  al
c001870f:	83 c4 24             	add    esp,0x24
c0018712:	c3                   	ret    
c0018713:	90                   	nop

c0018714 <CPU::CPU()>:
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001871b:	83 ec 08             	sub    esp,0x8
c001871e:	68 b9 b0 02 c0       	push   0xc002b0b9
c0018723:	50                   	push   eax
c0018724:	e8 1f b4 ff ff       	call   c0013b48 <Device::Device(char const*)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c0018731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018735:	89 10                	mov    DWORD PTR [eax],edx
c0018737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001873b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018749:	05 78 01 00 00       	add    eax,0x178
c001874e:	83 ec 0c             	sub    esp,0xc
c0018751:	50                   	push   eax
c0018752:	e8 75 66 ff ff       	call   c000edcc <GDT::GDT()>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875e:	05 7c 09 00 00       	add    eax,0x97c
c0018763:	83 ec 0c             	sub    esp,0xc
c0018766:	50                   	push   eax
c0018767:	e8 b0 68 ff ff       	call   c000f01c <IDT::IDT()>
c001876c:	83 c4 10             	add    esp,0x10
c001876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018773:	05 7c 11 00 00       	add    eax,0x117c
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	50                   	push   eax
c001877c:	e8 67 83 ff ff       	call   c0010ae8 <TSS::TSS()>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018788:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001878f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018793:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001879d:	90                   	nop
c001879e:	83 c4 0c             	add    esp,0xc
c00187a1:	c3                   	ret    

c00187a2 <CPU::displayFeatures()>:
c00187a2:	c3                   	ret    
c00187a3:	90                   	nop

c00187a4 <CPU::detectFeatures()>:
c00187a4:	55                   	push   ebp
c00187a5:	57                   	push   edi
c00187a6:	56                   	push   esi
c00187a7:	53                   	push   ebx
c00187a8:	83 ec 50             	sub    esp,0x50
c00187ab:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00187af:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00187b9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00187c0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00187c6:	6a 0d                	push   0xd
c00187c8:	6a 00                	push   0x0
c00187ca:	55                   	push   ebp
c00187cb:	e8 80 7f fe ff       	call   c0000750 <memset>
c00187d0:	83 c4 10             	add    esp,0x10
c00187d3:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00187d8:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00187df:	0f 84 22 09 00 00    	je     c0019107 <CPU::detectFeatures()+0x963>
c00187e5:	83 ec 0c             	sub    esp,0xc
c00187e8:	89 ef                	mov    edi,ebp
c00187ea:	6a 10                	push   0x10
c00187ec:	e8 6b fe ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c00187f1:	83 e0 01             	and    eax,0x1
c00187f4:	8d 14 00             	lea    edx,[eax+eax*1]
c00187f7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187fd:	83 e0 fd             	and    eax,0xfffffffd
c0018800:	09 d0                	or     eax,edx
c0018802:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018808:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001880f:	e8 48 fe ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c0018814:	83 e0 01             	and    eax,0x1
c0018817:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001881e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018824:	83 e0 fb             	and    eax,0xfffffffb
c0018827:	09 d0                	or     eax,edx
c0018829:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001882f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018836:	e8 21 fe ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c001883b:	83 e0 01             	and    eax,0x1
c001883e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018845:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001884b:	83 e0 f7             	and    eax,0xfffffff7
c001884e:	09 d0                	or     eax,edx
c0018850:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018856:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001885d:	e8 fa fd ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c0018862:	83 e0 01             	and    eax,0x1
c0018865:	c1 e0 04             	shl    eax,0x4
c0018868:	88 c2                	mov    dl,al
c001886a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018870:	83 e0 ef             	and    eax,0xffffffef
c0018873:	09 d0                	or     eax,edx
c0018875:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001887b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018882:	e8 d5 fd ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c0018887:	83 e0 01             	and    eax,0x1
c001888a:	c1 e0 05             	shl    eax,0x5
c001888d:	88 c2                	mov    dl,al
c001888f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018895:	83 e0 df             	and    eax,0xffffffdf
c0018898:	09 d0                	or     eax,edx
c001889a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188a0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00188a7:	e8 b0 fd ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c00188ac:	83 e0 01             	and    eax,0x1
c00188af:	8d 14 00             	lea    edx,[eax+eax*1]
c00188b2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00188b8:	83 e0 fd             	and    eax,0xfffffffd
c00188bb:	09 d0                	or     eax,edx
c00188bd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188c3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00188ca:	e8 8d fd ff ff       	call   c001865c <CPU::cpuidCheckEDX(unsigned int)>
c00188cf:	83 e0 01             	and    eax,0x1
c00188d2:	c1 e0 06             	shl    eax,0x6
c00188d5:	88 c2                	mov    dl,al
c00188d7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188dd:	83 e0 bf             	and    eax,0xffffffbf
c00188e0:	09 d0                	or     eax,edx
c00188e2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00188e8:	58                   	pop    eax
c00188e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188ed:	50                   	push   eax
c00188ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188f2:	50                   	push   eax
c00188f3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00188f7:	56                   	push   esi
c00188f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188fc:	50                   	push   eax
c00188fd:	6a 00                	push   0x0
c00188ff:	e8 d4 fc ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018904:	b8 04 00 00 00       	mov    eax,0x4
c0018909:	89 c1                	mov    ecx,eax
c001890b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001890d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018913:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018917:	89 c1                	mov    ecx,eax
c0018919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001891b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018921:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018925:	89 c1                	mov    ecx,eax
c0018927:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018929:	83 c4 18             	add    esp,0x18
c001892c:	68 64 af 02 c0       	push   0xc002af64
c0018931:	55                   	push   ebp
c0018932:	e8 61 7f fe ff       	call   c0000898 <strcmp>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	85 c0                	test   eax,eax
c001893c:	75 0f                	jne    c001894d <CPU::detectFeatures()+0x1a9>
c001893e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018948:	e9 22 02 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c001894d:	50                   	push   eax
c001894e:	50                   	push   eax
c001894f:	68 71 af 02 c0       	push   0xc002af71
c0018954:	55                   	push   ebp
c0018955:	e8 3e 7f fe ff       	call   c0000898 <strcmp>
c001895a:	83 c4 10             	add    esp,0x10
c001895d:	85 c0                	test   eax,eax
c001895f:	74 dd                	je     c001893e <CPU::detectFeatures()+0x19a>
c0018961:	50                   	push   eax
c0018962:	50                   	push   eax
c0018963:	68 7e af 02 c0       	push   0xc002af7e
c0018968:	55                   	push   ebp
c0018969:	e8 2a 7f fe ff       	call   c0000898 <strcmp>
c001896e:	83 c4 10             	add    esp,0x10
c0018971:	85 c0                	test   eax,eax
c0018973:	74 2a                	je     c001899f <CPU::detectFeatures()+0x1fb>
c0018975:	50                   	push   eax
c0018976:	50                   	push   eax
c0018977:	68 8b af 02 c0       	push   0xc002af8b
c001897c:	55                   	push   ebp
c001897d:	e8 16 7f fe ff       	call   c0000898 <strcmp>
c0018982:	83 c4 10             	add    esp,0x10
c0018985:	85 c0                	test   eax,eax
c0018987:	74 16                	je     c001899f <CPU::detectFeatures()+0x1fb>
c0018989:	50                   	push   eax
c001898a:	50                   	push   eax
c001898b:	68 98 af 02 c0       	push   0xc002af98
c0018990:	55                   	push   ebp
c0018991:	e8 02 7f fe ff       	call   c0000898 <strcmp>
c0018996:	83 c4 10             	add    esp,0x10
c0018999:	85 c0                	test   eax,eax
c001899b:	74 48                	je     c00189e5 <CPU::detectFeatures()+0x241>
c001899d:	eb 0f                	jmp    c00189ae <CPU::detectFeatures()+0x20a>
c001899f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00189a9:	e9 c1 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c00189ae:	50                   	push   eax
c00189af:	50                   	push   eax
c00189b0:	68 a5 af 02 c0       	push   0xc002afa5
c00189b5:	55                   	push   ebp
c00189b6:	e8 dd 7e fe ff       	call   c0000898 <strcmp>
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	85 c0                	test   eax,eax
c00189c0:	74 23                	je     c00189e5 <CPU::detectFeatures()+0x241>
c00189c2:	57                   	push   edi
c00189c3:	57                   	push   edi
c00189c4:	68 b2 af 02 c0       	push   0xc002afb2
c00189c9:	55                   	push   ebp
c00189ca:	e8 c9 7e fe ff       	call   c0000898 <strcmp>
c00189cf:	83 c4 10             	add    esp,0x10
c00189d2:	85 c0                	test   eax,eax
c00189d4:	75 1e                	jne    c00189f4 <CPU::detectFeatures()+0x250>
c00189d6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00189e0:	e9 8a 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c00189e5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00189ef:	e9 7b 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c00189f4:	56                   	push   esi
c00189f5:	56                   	push   esi
c00189f6:	68 bf af 02 c0       	push   0xc002afbf
c00189fb:	55                   	push   ebp
c00189fc:	e8 97 7e fe ff       	call   c0000898 <strcmp>
c0018a01:	83 c4 10             	add    esp,0x10
c0018a04:	85 c0                	test   eax,eax
c0018a06:	75 0f                	jne    c0018a17 <CPU::detectFeatures()+0x273>
c0018a08:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a12:	e9 58 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018a17:	51                   	push   ecx
c0018a18:	51                   	push   ecx
c0018a19:	68 7e af 02 c0       	push   0xc002af7e
c0018a1e:	55                   	push   ebp
c0018a1f:	e8 74 7e fe ff       	call   c0000898 <strcmp>
c0018a24:	83 c4 10             	add    esp,0x10
c0018a27:	85 c0                	test   eax,eax
c0018a29:	75 0f                	jne    c0018a3a <CPU::detectFeatures()+0x296>
c0018a2b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a35:	e9 35 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018a3a:	52                   	push   edx
c0018a3b:	52                   	push   edx
c0018a3c:	68 cc af 02 c0       	push   0xc002afcc
c0018a41:	55                   	push   ebp
c0018a42:	e8 51 7e fe ff       	call   c0000898 <strcmp>
c0018a47:	83 c4 10             	add    esp,0x10
c0018a4a:	85 c0                	test   eax,eax
c0018a4c:	75 0f                	jne    c0018a5d <CPU::detectFeatures()+0x2b9>
c0018a4e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018a58:	e9 12 01 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018a5d:	50                   	push   eax
c0018a5e:	50                   	push   eax
c0018a5f:	68 d9 af 02 c0       	push   0xc002afd9
c0018a64:	55                   	push   ebp
c0018a65:	e8 2e 7e fe ff       	call   c0000898 <strcmp>
c0018a6a:	83 c4 10             	add    esp,0x10
c0018a6d:	85 c0                	test   eax,eax
c0018a6f:	75 0f                	jne    c0018a80 <CPU::detectFeatures()+0x2dc>
c0018a71:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018a7b:	e9 ef 00 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018a80:	50                   	push   eax
c0018a81:	50                   	push   eax
c0018a82:	68 e6 af 02 c0       	push   0xc002afe6
c0018a87:	55                   	push   ebp
c0018a88:	e8 0b 7e fe ff       	call   c0000898 <strcmp>
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	85 c0                	test   eax,eax
c0018a92:	75 0f                	jne    c0018aa3 <CPU::detectFeatures()+0x2ff>
c0018a94:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018a9e:	e9 cc 00 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018aa3:	50                   	push   eax
c0018aa4:	50                   	push   eax
c0018aa5:	68 f3 af 02 c0       	push   0xc002aff3
c0018aaa:	55                   	push   ebp
c0018aab:	e8 e8 7d fe ff       	call   c0000898 <strcmp>
c0018ab0:	83 c4 10             	add    esp,0x10
c0018ab3:	85 c0                	test   eax,eax
c0018ab5:	75 0f                	jne    c0018ac6 <CPU::detectFeatures()+0x322>
c0018ab7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ac1:	e9 a9 00 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018ac6:	50                   	push   eax
c0018ac7:	50                   	push   eax
c0018ac8:	68 00 b0 02 c0       	push   0xc002b000
c0018acd:	55                   	push   ebp
c0018ace:	e8 c5 7d fe ff       	call   c0000898 <strcmp>
c0018ad3:	83 c4 10             	add    esp,0x10
c0018ad6:	85 c0                	test   eax,eax
c0018ad8:	75 0f                	jne    c0018ae9 <CPU::detectFeatures()+0x345>
c0018ada:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018ae4:	e9 86 00 00 00       	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018ae9:	50                   	push   eax
c0018aea:	50                   	push   eax
c0018aeb:	68 0d b0 02 c0       	push   0xc002b00d
c0018af0:	55                   	push   ebp
c0018af1:	e8 a2 7d fe ff       	call   c0000898 <strcmp>
c0018af6:	83 c4 10             	add    esp,0x10
c0018af9:	85 c0                	test   eax,eax
c0018afb:	75 0c                	jne    c0018b09 <CPU::detectFeatures()+0x365>
c0018afd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018b07:	eb 66                	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018b09:	50                   	push   eax
c0018b0a:	50                   	push   eax
c0018b0b:	68 1a b0 02 c0       	push   0xc002b01a
c0018b10:	55                   	push   ebp
c0018b11:	e8 82 7d fe ff       	call   c0000898 <strcmp>
c0018b16:	83 c4 10             	add    esp,0x10
c0018b19:	85 c0                	test   eax,eax
c0018b1b:	75 0c                	jne    c0018b29 <CPU::detectFeatures()+0x385>
c0018b1d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b27:	eb 46                	jmp    c0018b6f <CPU::detectFeatures()+0x3cb>
c0018b29:	57                   	push   edi
c0018b2a:	57                   	push   edi
c0018b2b:	68 27 b0 02 c0       	push   0xc002b027
c0018b30:	55                   	push   ebp
c0018b31:	e8 62 7d fe ff       	call   c0000898 <strcmp>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	85 c0                	test   eax,eax
c0018b3b:	74 e0                	je     c0018b1d <CPU::detectFeatures()+0x379>
c0018b3d:	56                   	push   esi
c0018b3e:	56                   	push   esi
c0018b3f:	68 34 b0 02 c0       	push   0xc002b034
c0018b44:	55                   	push   ebp
c0018b45:	e8 4e 7d fe ff       	call   c0000898 <strcmp>
c0018b4a:	83 c4 10             	add    esp,0x10
c0018b4d:	85 c0                	test   eax,eax
c0018b4f:	74 cc                	je     c0018b1d <CPU::detectFeatures()+0x379>
c0018b51:	51                   	push   ecx
c0018b52:	51                   	push   ecx
c0018b53:	68 41 b0 02 c0       	push   0xc002b041
c0018b58:	55                   	push   ebp
c0018b59:	e8 3a 7d fe ff       	call   c0000898 <strcmp>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	85 c0                	test   eax,eax
c0018b63:	74 b8                	je     c0018b1d <CPU::detectFeatures()+0x379>
c0018b65:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018b6f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018b74:	0f 86 be 00 00 00    	jbe    c0018c38 <CPU::detectFeatures()+0x494>
c0018b7a:	83 ec 0c             	sub    esp,0xc
c0018b7d:	68 80 00 00 00       	push   0x80
c0018b82:	e8 31 fb ff ff       	call   c00186b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018b87:	83 e0 01             	and    eax,0x1
c0018b8a:	c1 e0 06             	shl    eax,0x6
c0018b8d:	88 c2                	mov    dl,al
c0018b8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b95:	83 e0 bf             	and    eax,0xffffffbf
c0018b98:	09 d0                	or     eax,edx
c0018b9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ba0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ba7:	e8 0c fb ff ff       	call   c00186b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bac:	83 e0 01             	and    eax,0x1
c0018baf:	c1 e0 04             	shl    eax,0x4
c0018bb2:	88 c2                	mov    dl,al
c0018bb4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018bba:	83 e0 ef             	and    eax,0xffffffef
c0018bbd:	09 d0                	or     eax,edx
c0018bbf:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bc5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018bcc:	e8 e7 fa ff ff       	call   c00186b8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bd1:	c1 e0 07             	shl    eax,0x7
c0018bd4:	88 c2                	mov    dl,al
c0018bd6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bdc:	83 e0 7f             	and    eax,0x7f
c0018bdf:	09 d0                	or     eax,edx
c0018be1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018be7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018bee:	e8 f3 fa ff ff       	call   c00186e6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018bf3:	83 e0 01             	and    eax,0x1
c0018bf6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018bfd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c03:	83 e0 f7             	and    eax,0xfffffff7
c0018c06:	09 d0                	or     eax,edx
c0018c08:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c0e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c15:	e8 cc fa ff ff       	call   c00186e6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c1a:	83 c4 10             	add    esp,0x10
c0018c1d:	83 e0 01             	and    eax,0x1
c0018c20:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c27:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c2d:	83 e0 fb             	and    eax,0xfffffffb
c0018c30:	09 d0                	or     eax,edx
c0018c32:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c3f:	50                   	push   eax
c0018c40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c44:	50                   	push   eax
c0018c45:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c49:	56                   	push   esi
c0018c4a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c4e:	50                   	push   eax
c0018c4f:	6a 01                	push   0x1
c0018c51:	e8 82 f9 ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c56:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018c5a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c60:	88 ca                	mov    dl,cl
c0018c62:	83 e0 f0             	and    eax,0xfffffff0
c0018c65:	83 e2 0f             	and    edx,0xf
c0018c68:	09 d0                	or     eax,edx
c0018c6a:	88 ca                	mov    dl,cl
c0018c6c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018c72:	c0 ea 04             	shr    dl,0x4
c0018c75:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018c79:	0f b6 c2             	movzx  eax,dl
c0018c7c:	83 c4 20             	add    esp,0x20
c0018c7f:	c1 e0 06             	shl    eax,0x6
c0018c82:	89 c7                	mov    edi,eax
c0018c84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c8a:	66 25 3f c0          	and    ax,0xc03f
c0018c8e:	09 f8                	or     eax,edi
c0018c90:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018c97:	89 c8                	mov    eax,ecx
c0018c99:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018ca0:	c1 e8 08             	shr    eax,0x8
c0018ca3:	83 e5 3f             	and    ebp,0x3f
c0018ca6:	83 e0 0f             	and    eax,0xf
c0018ca9:	89 c7                	mov    edi,eax
c0018cab:	c1 e7 06             	shl    edi,0x6
c0018cae:	09 ef                	or     edi,ebp
c0018cb0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018cb7:	89 fa                	mov    edx,edi
c0018cb9:	83 e5 c0             	and    ebp,0xffffffc0
c0018cbc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018cc2:	88 c2                	mov    dl,al
c0018cc4:	c0 ea 02             	shr    dl,0x2
c0018cc7:	89 d7                	mov    edi,edx
c0018cc9:	09 ef                	or     edi,ebp
c0018ccb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018cd1:	89 fa                	mov    edx,edi
c0018cd3:	83 e5 cf             	and    ebp,0xffffffcf
c0018cd6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018cdc:	89 cf                	mov    edi,ecx
c0018cde:	c1 ef 0c             	shr    edi,0xc
c0018ce1:	83 e7 03             	and    edi,0x3
c0018ce4:	c1 e7 04             	shl    edi,0x4
c0018ce7:	09 ef                	or     edi,ebp
c0018ce9:	3c 06                	cmp    al,0x6
c0018ceb:	89 fa                	mov    edx,edi
c0018ced:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018cf3:	74 04                	je     c0018cf9 <CPU::detectFeatures()+0x555>
c0018cf5:	3c 0f                	cmp    al,0xf
c0018cf7:	75 5c                	jne    c0018d55 <CPU::detectFeatures()+0x5b1>
c0018cf9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018cfd:	89 cf                	mov    edi,ecx
c0018cff:	c1 ef 10             	shr    edi,0x10
c0018d02:	c1 e7 04             	shl    edi,0x4
c0018d05:	09 fa                	or     edx,edi
c0018d07:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018d0d:	0f b6 d2             	movzx  edx,dl
c0018d10:	66 81 e7 3f c0       	and    di,0xc03f
c0018d15:	c1 e2 06             	shl    edx,0x6
c0018d18:	09 fa                	or     edx,edi
c0018d1a:	3c 0f                	cmp    al,0xf
c0018d1c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d23:	75 30                	jne    c0018d55 <CPU::detectFeatures()+0x5b1>
c0018d25:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d2b:	c1 e9 14             	shr    ecx,0x14
c0018d2e:	83 e0 3f             	and    eax,0x3f
c0018d31:	83 c1 0f             	add    ecx,0xf
c0018d34:	88 ca                	mov    dl,cl
c0018d36:	c0 e9 02             	shr    cl,0x2
c0018d39:	c1 e2 06             	shl    edx,0x6
c0018d3c:	09 d0                	or     eax,edx
c0018d3e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018d44:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018d4a:	83 e0 c0             	and    eax,0xffffffc0
c0018d4d:	09 c1                	or     ecx,eax
c0018d4f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018d55:	83 ec 0c             	sub    esp,0xc
c0018d58:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d5f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d63:	50                   	push   eax
c0018d64:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d68:	55                   	push   ebp
c0018d69:	56                   	push   esi
c0018d6a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d6e:	57                   	push   edi
c0018d6f:	68 00 00 00 80       	push   0x80000000
c0018d74:	e8 5f f8 ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d79:	83 c4 20             	add    esp,0x20
c0018d7c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018d84:	76 22                	jbe    c0018da8 <CPU::detectFeatures()+0x604>
c0018d86:	83 ec 0c             	sub    esp,0xc
c0018d89:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d8d:	50                   	push   eax
c0018d8e:	55                   	push   ebp
c0018d8f:	56                   	push   esi
c0018d90:	57                   	push   edi
c0018d91:	68 01 00 00 80       	push   0x80000001
c0018d96:	e8 3d f8 ff ff       	call   c00185d8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d9b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018da5:	83 c4 20             	add    esp,0x20
c0018da8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018dae:	83 f8 01             	cmp    eax,0x1
c0018db1:	75 6f                	jne    c0018e22 <CPU::detectFeatures()+0x67e>
c0018db3:	51                   	push   ecx
c0018db4:	51                   	push   ecx
c0018db5:	68 4d b0 02 c0       	push   0xc002b04d
c0018dba:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018dbe:	56                   	push   esi
c0018dbf:	e8 48 7a fe ff       	call   c000080c <strcpy>
c0018dc4:	5f                   	pop    edi
c0018dc5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dcb:	5d                   	pop    ebp
c0018dcc:	66 c1 e8 06          	shr    ax,0x6
c0018dd0:	0f b6 c0             	movzx  eax,al
c0018dd3:	50                   	push   eax
c0018dd4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018dda:	c1 e8 0e             	shr    eax,0xe
c0018ddd:	0f b6 c0             	movzx  eax,al
c0018de0:	50                   	push   eax
c0018de1:	e8 9c f4 ff ff       	call   c0018282 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018de6:	5a                   	pop    edx
c0018de7:	59                   	pop    ecx
c0018de8:	50                   	push   eax
c0018de9:	56                   	push   esi
c0018dea:	e8 5d 7b fe ff       	call   c000094c <strcat>
c0018def:	5f                   	pop    edi
c0018df0:	5d                   	pop    ebp
c0018df1:	56                   	push   esi
c0018df2:	53                   	push   ebx
c0018df3:	e8 42 ad ff ff       	call   c0013b3a <Device::setName(char const*)>
c0018df8:	58                   	pop    eax
c0018df9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018dff:	5a                   	pop    edx
c0018e00:	68 54 b0 02 c0       	push   0xc002b054
c0018e05:	50                   	push   eax
c0018e06:	e8 8d 7a fe ff       	call   c0000898 <strcmp>
c0018e0b:	83 c4 10             	add    esp,0x10
c0018e0e:	85 c0                	test   eax,eax
c0018e10:	0f 85 71 03 00 00    	jne    c0019187 <CPU::detectFeatures()+0x9e3>
c0018e16:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e1d:	e9 65 03 00 00       	jmp    c0019187 <CPU::detectFeatures()+0x9e3>
c0018e22:	83 f8 02             	cmp    eax,0x2
c0018e25:	0f 85 b5 00 00 00    	jne    c0018ee0 <CPU::detectFeatures()+0x73c>
c0018e2b:	57                   	push   edi
c0018e2c:	57                   	push   edi
c0018e2d:	68 66 b0 02 c0       	push   0xc002b066
c0018e32:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e36:	56                   	push   esi
c0018e37:	e8 d0 79 fe ff       	call   c000080c <strcpy>
c0018e3c:	5d                   	pop    ebp
c0018e3d:	58                   	pop    eax
c0018e3e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e44:	66 c1 e8 06          	shr    ax,0x6
c0018e48:	0f b6 c0             	movzx  eax,al
c0018e4b:	50                   	push   eax
c0018e4c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e52:	c1 e8 0e             	shr    eax,0xe
c0018e55:	0f b6 c0             	movzx  eax,al
c0018e58:	50                   	push   eax
c0018e59:	e8 90 f2 ff ff       	call   c00180ee <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018e5e:	5a                   	pop    edx
c0018e5f:	59                   	pop    ecx
c0018e60:	50                   	push   eax
c0018e61:	56                   	push   esi
c0018e62:	e8 e5 7a fe ff       	call   c000094c <strcat>
c0018e67:	5f                   	pop    edi
c0018e68:	5d                   	pop    ebp
c0018e69:	56                   	push   esi
c0018e6a:	53                   	push   ebx
c0018e6b:	e8 ca ac ff ff       	call   c0013b3a <Device::setName(char const*)>
c0018e70:	58                   	pop    eax
c0018e71:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e77:	5a                   	pop    edx
c0018e78:	68 6b b0 02 c0       	push   0xc002b06b
c0018e7d:	50                   	push   eax
c0018e7e:	e8 15 7a fe ff       	call   c0000898 <strcmp>
c0018e83:	83 c4 10             	add    esp,0x10
c0018e86:	85 c0                	test   eax,eax
c0018e88:	75 20                	jne    c0018eaa <CPU::detectFeatures()+0x706>
c0018e8a:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0018e90:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018e96:	a8 01                	test   al,0x1
c0018e98:	74 10                	je     c0018eaa <CPU::detectFeatures()+0x706>
c0018e9a:	83 e0 fe             	and    eax,0xfffffffe
c0018e9d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018ea3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018eaa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb0:	c1 e8 0e             	shr    eax,0xe
c0018eb3:	3c 05                	cmp    al,0x5
c0018eb5:	0f 85 cc 02 00 00    	jne    c0019187 <CPU::detectFeatures()+0x9e3>
c0018ebb:	56                   	push   esi
c0018ebc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018ec2:	83 e0 0f             	and    eax,0xf
c0018ec5:	50                   	push   eax
c0018ec6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ecc:	66 c1 e8 06          	shr    ax,0x6
c0018ed0:	0f b6 c0             	movzx  eax,al
c0018ed3:	50                   	push   eax
c0018ed4:	6a 05                	push   0x5
c0018ed6:	e8 89 f6 ff ff       	call   c0018564 <CPU::AMD_K6_writeback(int, int, int)>
c0018edb:	e9 1f 02 00 00       	jmp    c00190ff <CPU::detectFeatures()+0x95b>
c0018ee0:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ee3:	83 fa 01             	cmp    edx,0x1
c0018ee6:	76 09                	jbe    c0018ef1 <CPU::detectFeatures()+0x74d>
c0018ee8:	83 f8 06             	cmp    eax,0x6
c0018eeb:	0f 85 91 01 00 00    	jne    c0019082 <CPU::detectFeatures()+0x8de>
c0018ef1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ef7:	c1 ea 0e             	shr    edx,0xe
c0018efa:	80 fa 05             	cmp    dl,0x5
c0018efd:	75 7b                	jne    c0018f7a <CPU::detectFeatures()+0x7d6>
c0018eff:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f05:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f0a:	66 81 fa 00 01       	cmp    dx,0x100
c0018f0f:	75 0c                	jne    c0018f1d <CPU::detectFeatures()+0x779>
c0018f11:	51                   	push   ecx
c0018f12:	51                   	push   ecx
c0018f13:	68 72 b0 02 c0       	push   0xc002b072
c0018f18:	e9 dc 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f1d:	66 81 fa 00 02       	cmp    dx,0x200
c0018f22:	75 0c                	jne    c0018f30 <CPU::detectFeatures()+0x78c>
c0018f24:	52                   	push   edx
c0018f25:	52                   	push   edx
c0018f26:	68 85 b0 02 c0       	push   0xc002b085
c0018f2b:	e9 c9 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f30:	66 81 fa 40 02       	cmp    dx,0x240
c0018f35:	75 0c                	jne    c0018f43 <CPU::detectFeatures()+0x79f>
c0018f37:	50                   	push   eax
c0018f38:	50                   	push   eax
c0018f39:	68 97 b0 02 c0       	push   0xc002b097
c0018f3e:	e9 b6 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f43:	83 f8 06             	cmp    eax,0x6
c0018f46:	75 0c                	jne    c0018f54 <CPU::detectFeatures()+0x7b0>
c0018f48:	50                   	push   eax
c0018f49:	50                   	push   eax
c0018f4a:	68 a9 b0 02 c0       	push   0xc002b0a9
c0018f4f:	e9 a5 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f54:	83 f8 04             	cmp    eax,0x4
c0018f57:	75 0c                	jne    c0018f65 <CPU::detectFeatures()+0x7c1>
c0018f59:	50                   	push   eax
c0018f5a:	50                   	push   eax
c0018f5b:	68 b5 b0 02 c0       	push   0xc002b0b5
c0018f60:	e9 94 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f65:	83 f8 03             	cmp    eax,0x3
c0018f68:	0f 85 19 02 00 00    	jne    c0019187 <CPU::detectFeatures()+0x9e3>
c0018f6e:	50                   	push   eax
c0018f6f:	50                   	push   eax
c0018f70:	68 bd b0 02 c0       	push   0xc002b0bd
c0018f75:	e9 7f 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018f7a:	80 fa 06             	cmp    dl,0x6
c0018f7d:	0f 85 db 00 00 00    	jne    c001905e <CPU::detectFeatures()+0x8ba>
c0018f83:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f89:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f8e:	66 81 fa 80 01       	cmp    dx,0x180
c0018f93:	75 0c                	jne    c0018fa1 <CPU::detectFeatures()+0x7fd>
c0018f95:	50                   	push   eax
c0018f96:	50                   	push   eax
c0018f97:	68 c8 b0 02 c0       	push   0xc002b0c8
c0018f9c:	e9 58 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018fa1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018fa7:	66 f7 c1 80 ff       	test   cx,0xff80
c0018fac:	75 0c                	jne    c0018fba <CPU::detectFeatures()+0x816>
c0018fae:	50                   	push   eax
c0018faf:	50                   	push   eax
c0018fb0:	68 d8 b0 02 c0       	push   0xc002b0d8
c0018fb5:	e9 3f 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018fba:	66 81 fa 40 02       	cmp    dx,0x240
c0018fbf:	75 0c                	jne    c0018fcd <CPU::detectFeatures()+0x829>
c0018fc1:	55                   	push   ebp
c0018fc2:	55                   	push   ebp
c0018fc3:	68 df b0 02 c0       	push   0xc002b0df
c0018fc8:	e9 2c 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018fcd:	66 81 fa 80 02       	cmp    dx,0x280
c0018fd2:	75 0c                	jne    c0018fe0 <CPU::detectFeatures()+0x83c>
c0018fd4:	57                   	push   edi
c0018fd5:	57                   	push   edi
c0018fd6:	68 e8 b0 02 c0       	push   0xc002b0e8
c0018fdb:	e9 19 01 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018fe0:	66 81 fa 40 03       	cmp    dx,0x340
c0018fe5:	74 ed                	je     c0018fd4 <CPU::detectFeatures()+0x830>
c0018fe7:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018fec:	75 0c                	jne    c0018ffa <CPU::detectFeatures()+0x856>
c0018fee:	56                   	push   esi
c0018fef:	56                   	push   esi
c0018ff0:	68 ef b0 02 c0       	push   0xc002b0ef
c0018ff5:	e9 ff 00 00 00       	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0018ffa:	83 f8 06             	cmp    eax,0x6
c0018ffd:	0f 84 45 ff ff ff    	je     c0018f48 <CPU::detectFeatures()+0x7a4>
c0019003:	83 f8 04             	cmp    eax,0x4
c0019006:	0f 84 4d ff ff ff    	je     c0018f59 <CPU::detectFeatures()+0x7b5>
c001900c:	83 f8 03             	cmp    eax,0x3
c001900f:	0f 85 72 01 00 00    	jne    c0019187 <CPU::detectFeatures()+0x9e3>
c0019015:	51                   	push   ecx
c0019016:	51                   	push   ecx
c0019017:	68 f8 b0 02 c0       	push   0xc002b0f8
c001901c:	53                   	push   ebx
c001901d:	e8 18 ab ff ff       	call   c0013b3a <Device::setName(char const*)>
c0019022:	b1 c1                	mov    cl,0xc1
c0019024:	88 c8                	mov    al,cl
c0019026:	e6 22                	out    0x22,al
c0019028:	e4 23                	in     al,0x23
c001902a:	88 c2                	mov    dl,al
c001902c:	88 c8                	mov    al,cl
c001902e:	e6 22                	out    0x22,al
c0019030:	88 d0                	mov    al,dl
c0019032:	83 c8 10             	or     eax,0x10
c0019035:	e6 23                	out    0x23,al
c0019037:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001903e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019041:	89 d0                	mov    eax,edx
c0019043:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019049:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001904d:	40                   	inc    eax
c001904e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019054:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019059:	e9 a1 00 00 00       	jmp    c00190ff <CPU::detectFeatures()+0x95b>
c001905e:	83 f8 06             	cmp    eax,0x6
c0019061:	0f 84 e1 fe ff ff    	je     c0018f48 <CPU::detectFeatures()+0x7a4>
c0019067:	83 f8 04             	cmp    eax,0x4
c001906a:	0f 84 e9 fe ff ff    	je     c0018f59 <CPU::detectFeatures()+0x7b5>
c0019070:	83 f8 03             	cmp    eax,0x3
c0019073:	0f 85 0e 01 00 00    	jne    c0019187 <CPU::detectFeatures()+0x9e3>
c0019079:	52                   	push   edx
c001907a:	52                   	push   edx
c001907b:	68 03 b1 02 c0       	push   0xc002b103
c0019080:	eb 77                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0019082:	83 f8 07             	cmp    eax,0x7
c0019085:	75 09                	jne    c0019090 <CPU::detectFeatures()+0x8ec>
c0019087:	50                   	push   eax
c0019088:	50                   	push   eax
c0019089:	68 0d b1 02 c0       	push   0xc002b10d
c001908e:	eb 69                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c0019090:	83 f8 0a             	cmp    eax,0xa
c0019093:	75 09                	jne    c001909e <CPU::detectFeatures()+0x8fa>
c0019095:	50                   	push   eax
c0019096:	50                   	push   eax
c0019097:	68 18 b1 02 c0       	push   0xc002b118
c001909c:	eb 5b                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c001909e:	83 f8 0b             	cmp    eax,0xb
c00190a1:	75 09                	jne    c00190ac <CPU::detectFeatures()+0x908>
c00190a3:	50                   	push   eax
c00190a4:	50                   	push   eax
c00190a5:	68 20 b1 02 c0       	push   0xc002b120
c00190aa:	eb 4d                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190ac:	83 f8 08             	cmp    eax,0x8
c00190af:	75 09                	jne    c00190ba <CPU::detectFeatures()+0x916>
c00190b1:	50                   	push   eax
c00190b2:	50                   	push   eax
c00190b3:	68 29 b1 02 c0       	push   0xc002b129
c00190b8:	eb 3f                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190ba:	83 f8 09             	cmp    eax,0x9
c00190bd:	75 09                	jne    c00190c8 <CPU::detectFeatures()+0x924>
c00190bf:	50                   	push   eax
c00190c0:	50                   	push   eax
c00190c1:	68 31 b1 02 c0       	push   0xc002b131
c00190c6:	eb 31                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190c8:	83 f8 05             	cmp    eax,0x5
c00190cb:	75 09                	jne    c00190d6 <CPU::detectFeatures()+0x932>
c00190cd:	50                   	push   eax
c00190ce:	50                   	push   eax
c00190cf:	68 39 b1 02 c0       	push   0xc002b139
c00190d4:	eb 23                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190d6:	83 f8 0c             	cmp    eax,0xc
c00190d9:	75 09                	jne    c00190e4 <CPU::detectFeatures()+0x940>
c00190db:	55                   	push   ebp
c00190dc:	55                   	push   ebp
c00190dd:	68 47 b1 02 c0       	push   0xc002b147
c00190e2:	eb 15                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190e4:	83 f8 0d             	cmp    eax,0xd
c00190e7:	75 09                	jne    c00190f2 <CPU::detectFeatures()+0x94e>
c00190e9:	57                   	push   edi
c00190ea:	57                   	push   edi
c00190eb:	68 52 b1 02 c0       	push   0xc002b152
c00190f0:	eb 07                	jmp    c00190f9 <CPU::detectFeatures()+0x955>
c00190f2:	56                   	push   esi
c00190f3:	56                   	push   esi
c00190f4:	68 66 b1 02 c0       	push   0xc002b166
c00190f9:	53                   	push   ebx
c00190fa:	e8 3b aa ff ff       	call   c0013b3a <Device::setName(char const*)>
c00190ff:	83 c4 10             	add    esp,0x10
c0019102:	e9 80 00 00 00       	jmp    c0019187 <CPU::detectFeatures()+0x9e3>
c0019107:	51                   	push   ecx
c0019108:	51                   	push   ecx
c0019109:	68 b2 af 02 c0       	push   0xc002afb2
c001910e:	55                   	push   ebp
c001910f:	e8 f8 76 fe ff       	call   c000080c <strcpy>
c0019114:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001911e:	e8 8b 71 fe ff       	call   c00002ae <is486>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	85 c0                	test   eax,eax
c0019128:	74 2b                	je     c0019155 <CPU::detectFeatures()+0x9b1>
c001912a:	52                   	push   edx
c001912b:	52                   	push   edx
c001912c:	68 72 b1 02 c0       	push   0xc002b172
c0019131:	53                   	push   ebx
c0019132:	e8 03 aa ff ff       	call   c0013b3a <Device::setName(char const*)>
c0019137:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001913e:	0f 20 c0             	mov    eax,cr0
c0019141:	83 e0 14             	and    eax,0x14
c0019144:	83 c4 10             	add    esp,0x10
c0019147:	83 f8 04             	cmp    eax,0x4
c001914a:	75 1f                	jne    c001916b <CPU::detectFeatures()+0x9c7>
c001914c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019153:	eb 32                	jmp    c0019187 <CPU::detectFeatures()+0x9e3>
c0019155:	50                   	push   eax
c0019156:	50                   	push   eax
c0019157:	68 7d b1 02 c0       	push   0xc002b17d
c001915c:	53                   	push   ebx
c001915d:	e8 d8 a9 ff ff       	call   c0013b3a <Device::setName(char const*)>
c0019162:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019169:	eb d3                	jmp    c001913e <CPU::detectFeatures()+0x99a>
c001916b:	e8 19 71 fe ff       	call   c0000289 <hasLegacyFPU>
c0019170:	83 e0 01             	and    eax,0x1
c0019173:	8d 14 00             	lea    edx,[eax+eax*1]
c0019176:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001917c:	83 e0 fd             	and    eax,0xfffffffd
c001917f:	09 d0                	or     eax,edx
c0019181:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019187:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001918e:	83 c4 4c             	add    esp,0x4c
c0019191:	5b                   	pop    ebx
c0019192:	5e                   	pop    esi
c0019193:	5f                   	pop    edi
c0019194:	5d                   	pop    ebp
c0019195:	c3                   	ret    

c0019196 <CPU::setupSMEP()>:
c0019196:	0f 20 e0             	mov    eax,cr4
c0019199:	0d 00 00 10 00       	or     eax,0x100000
c001919e:	0f 22 e0             	mov    cr4,eax
c00191a1:	c3                   	ret    

c00191a2 <CPU::setupUMIP()>:
c00191a2:	0f 20 e0             	mov    eax,cr4
c00191a5:	80 cc 08             	or     ah,0x8
c00191a8:	0f 22 e0             	mov    cr4,eax
c00191ab:	c3                   	ret    

c00191ac <CPU::setupTSC()>:
c00191ac:	0f 20 e0             	mov    eax,cr4
c00191af:	83 c8 04             	or     eax,0x4
c00191b2:	0f 22 e0             	mov    cr4,eax
c00191b5:	c3                   	ret    

c00191b6 <CPU::setupLargePages()>:
c00191b6:	0f 20 e0             	mov    eax,cr4
c00191b9:	83 c8 10             	or     eax,0x10
c00191bc:	0f 22 e0             	mov    cr4,eax
c00191bf:	c3                   	ret    

c00191c0 <CPU::setupPAT()>:
c00191c0:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00191c5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00191cc:	74 2c                	je     c00191fa <CPU::setupPAT()+0x3a>
c00191ce:	53                   	push   ebx
c00191cf:	83 ec 10             	sub    esp,0x10
c00191d2:	68 77 02 00 00       	push   0x277
c00191d7:	50                   	push   eax
c00191d8:	e8 63 59 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00191dd:	83 e2 f8             	and    edx,0xfffffff8
c00191e0:	83 ca 01             	or     edx,0x1
c00191e3:	52                   	push   edx
c00191e4:	50                   	push   eax
c00191e5:	68 77 02 00 00       	push   0x277
c00191ea:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c00191f0:	e8 77 59 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00191f5:	83 c4 28             	add    esp,0x28
c00191f8:	5b                   	pop    ebx
c00191f9:	c3                   	ret    
c00191fa:	c3                   	ret    
c00191fb:	90                   	nop

c00191fc <CPU::setupMTRR()>:
c00191fc:	c3                   	ret    
c00191fd:	90                   	nop

c00191fe <CPU::setupGlobalPages()>:
c00191fe:	0f 20 e0             	mov    eax,cr4
c0019201:	0c 80                	or     al,0x80
c0019203:	0f 22 e0             	mov    cr4,eax
c0019206:	c3                   	ret    
c0019207:	90                   	nop

c0019208 <CPU::allowUsermodeDataAccess()>:
c0019208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001920c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019213:	74 03                	je     c0019218 <CPU::allowUsermodeDataAccess()+0x10>
c0019215:	0f 01 cb             	stac   
c0019218:	c3                   	ret    
c0019219:	90                   	nop

c001921a <CPU::prohibitUsermodeDataAccess()>:
c001921a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001921e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019225:	74 03                	je     c001922a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019227:	0f 01 ca             	clac   
c001922a:	c3                   	ret    
c001922b:	90                   	nop

c001922c <CPU::setupSMAP()>:
c001922c:	0f 20 e0             	mov    eax,cr4
c001922f:	0d 00 00 20 00       	or     eax,0x200000
c0019234:	0f 22 e0             	mov    cr4,eax
c0019237:	eb e1                	jmp    c001921a <CPU::prohibitUsermodeDataAccess()>
c0019239:	90                   	nop

c001923a <CPU::setupFeatures()>:
c001923a:	83 ec 0c             	sub    esp,0xc
c001923d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019241:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019248:	74 07                	je     c0019251 <CPU::setupFeatures()+0x17>
c001924a:	52                   	push   edx
c001924b:	e8 46 ff ff ff       	call   c0019196 <CPU::setupSMEP()>
c0019250:	58                   	pop    eax
c0019251:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019258:	74 07                	je     c0019261 <CPU::setupFeatures()+0x27>
c001925a:	52                   	push   edx
c001925b:	e8 cc ff ff ff       	call   c001922c <CPU::setupSMAP()>
c0019260:	58                   	pop    eax
c0019261:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019268:	74 07                	je     c0019271 <CPU::setupFeatures()+0x37>
c001926a:	52                   	push   edx
c001926b:	e8 32 ff ff ff       	call   c00191a2 <CPU::setupUMIP()>
c0019270:	58                   	pop    eax
c0019271:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019278:	74 07                	je     c0019281 <CPU::setupFeatures()+0x47>
c001927a:	52                   	push   edx
c001927b:	e8 2c ff ff ff       	call   c00191ac <CPU::setupTSC()>
c0019280:	58                   	pop    eax
c0019281:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019288:	74 07                	je     c0019291 <CPU::setupFeatures()+0x57>
c001928a:	52                   	push   edx
c001928b:	e8 26 ff ff ff       	call   c00191b6 <CPU::setupLargePages()>
c0019290:	59                   	pop    ecx
c0019291:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019298:	74 07                	je     c00192a1 <CPU::setupFeatures()+0x67>
c001929a:	52                   	push   edx
c001929b:	e8 5e ff ff ff       	call   c00191fe <CPU::setupGlobalPages()>
c00192a0:	58                   	pop    eax
c00192a1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00192a8:	74 0c                	je     c00192b6 <CPU::setupFeatures()+0x7c>
c00192aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192ae:	83 c4 0c             	add    esp,0xc
c00192b1:	e9 0a ff ff ff       	jmp    c00191c0 <CPU::setupPAT()>
c00192b6:	83 c4 0c             	add    esp,0xc
c00192b9:	c3                   	ret    

c00192ba <CPU::open(int, int, void*)>:
c00192ba:	57                   	push   edi
c00192bb:	56                   	push   esi
c00192bc:	53                   	push   ebx
c00192bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00192c5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00192d4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00192da:	50                   	push   eax
c00192db:	e8 4e 5b ff ff       	call   c000ee2e <GDT::setup()>
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	6a 00                	push   0x0
c00192e5:	68 ef be ad de       	push   0xdeadbeef
c00192ea:	57                   	push   edi
c00192eb:	e8 38 78 ff ff       	call   c0010b28 <TSS::setup(unsigned long, unsigned long)>
c00192f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00192f3:	e8 10 78 ff ff       	call   c0010b08 <TSS::flush()>
c00192f8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00192fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0019301:	e8 8c 5d ff ff       	call   c000f092 <IDT::setup()>
c0019306:	b8 00 04 00 00       	mov    eax,0x400
c001930b:	0f 23 f8             	mov    db7,eax
c001930e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019318:	e8 23 66 ff ff       	call   c000f940 <Phys::allocatePage()>
c001931d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019323:	89 30                	mov    DWORD PTR [eax],esi
c0019325:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001932b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001932e:	58                   	pop    eax
c001932f:	5a                   	pop    edx
c0019330:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001933a:	e8 f9 88 ff ff       	call   c0011c38 <VAS::setCPUSpecific(unsigned long)>
c001933f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019342:	e8 5d f4 ff ff       	call   c00187a4 <CPU::detectFeatures()>
c0019347:	e8 35 bc ff ff       	call   c0014f81 <setupInterruptController()>
c001934c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019352:	a1 c0 d5 02 c0       	mov    eax,ds:0xc002d5c0
c0019357:	83 e0 10             	and    eax,0x10
c001935a:	83 f8 01             	cmp    eax,0x1
c001935d:	19 c0                	sbb    eax,eax
c001935f:	83 e0 46             	and    eax,0x46
c0019362:	83 c0 1e             	add    eax,0x1e
c0019365:	89 04 24             	mov    DWORD PTR [esp],eax
c0019368:	e8 02 d2 ff ff       	call   c001656f <setupTimer(int)>
c001936d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019373:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019376:	e8 bf fe ff ff       	call   c001923a <CPU::setupFeatures()>
c001937b:	83 c4 10             	add    esp,0x10
c001937e:	31 c0                	xor    eax,eax
c0019380:	5b                   	pop    ebx
c0019381:	5e                   	pop    esi
c0019382:	5f                   	pop    edi
c0019383:	c3                   	ret    

c0019384 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019384:	57                   	push   edi
c0019385:	56                   	push   esi
c0019386:	53                   	push   ebx
c0019387:	51                   	push   ecx
c0019388:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001938c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001938f:	0f 02 c0             	lar    eax,ax
c0019392:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019395:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019399:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001939c:	88 ca                	mov    dl,cl
c001939e:	c0 ea 06             	shr    dl,0x6
c00193a1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00193a5:	89 ca                	mov    edx,ecx
c00193a7:	66 c1 ea 03          	shr    dx,0x3
c00193ab:	83 e2 07             	and    edx,0x7
c00193ae:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00193b3:	88 17                	mov    BYTE PTR [edi],dl
c00193b5:	0f 84 a6 01 00 00    	je     c0019561 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00193bb:	83 e1 07             	and    ecx,0x7
c00193be:	80 f9 04             	cmp    cl,0x4
c00193c1:	0f 84 98 00 00 00    	je     c001945f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00193c7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193cc:	0f 95 c0             	setne  al
c00193cf:	80 f9 05             	cmp    cl,0x5
c00193d2:	0f 95 c2             	setne  dl
c00193d5:	08 c2                	or     dl,al
c00193d7:	74 79                	je     c0019452 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00193d9:	84 c9                	test   cl,cl
c00193db:	75 05                	jne    c00193e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00193dd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00193e0:	eb 3c                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193e2:	80 f9 01             	cmp    cl,0x1
c00193e5:	75 05                	jne    c00193ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00193e7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00193ea:	eb 32                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193ec:	80 f9 02             	cmp    cl,0x2
c00193ef:	75 05                	jne    c00193f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00193f1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00193f4:	eb 28                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00193f6:	31 c0                	xor    eax,eax
c00193f8:	80 f9 03             	cmp    cl,0x3
c00193fb:	75 05                	jne    c0019402 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00193fd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019400:	eb 1c                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019402:	80 f9 05             	cmp    cl,0x5
c0019405:	75 05                	jne    c001940c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019407:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001940a:	eb 12                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001940c:	80 f9 06             	cmp    cl,0x6
c001940f:	75 05                	jne    c0019416 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019411:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019414:	eb 08                	jmp    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019416:	80 f9 07             	cmp    cl,0x7
c0019419:	75 03                	jne    c001941e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001941b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001941e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019423:	75 10                	jne    c0019435 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019425:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019429:	b9 03 00 00 00       	mov    ecx,0x3
c001942e:	01 d0                	add    eax,edx
c0019430:	e9 37 01 00 00       	jmp    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019435:	b9 02 00 00 00       	mov    ecx,0x2
c001943a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001943f:	0f 85 27 01 00 00    	jne    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019445:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019448:	b9 06 00 00 00       	mov    ecx,0x6
c001944d:	e9 1a 01 00 00       	jmp    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019452:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019455:	b9 06 00 00 00       	mov    ecx,0x6
c001945a:	e9 0f 01 00 00       	jmp    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001945f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019462:	88 ca                	mov    dl,cl
c0019464:	c0 ea 06             	shr    dl,0x6
c0019467:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001946b:	89 ca                	mov    edx,ecx
c001946d:	66 c1 ea 03          	shr    dx,0x3
c0019471:	83 e2 07             	and    edx,0x7
c0019474:	80 e1 07             	and    cl,0x7
c0019477:	75 05                	jne    c001947e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019479:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001947c:	eb 4c                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001947e:	80 f9 01             	cmp    cl,0x1
c0019481:	75 05                	jne    c0019488 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019483:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019486:	eb 42                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019488:	80 f9 02             	cmp    cl,0x2
c001948b:	75 05                	jne    c0019492 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001948d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019490:	eb 38                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019492:	80 f9 03             	cmp    cl,0x3
c0019495:	75 05                	jne    c001949c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019497:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001949a:	eb 2e                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001949c:	80 f9 04             	cmp    cl,0x4
c001949f:	75 12                	jne    c00194b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00194a1:	f6 c4 60             	test   ah,0x60
c00194a4:	75 08                	jne    c00194ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00194a6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00194a9:	8d 78 14             	lea    edi,[eax+0x14]
c00194ac:	eb 1c                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194ae:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00194b1:	eb 17                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194b3:	80 f9 05             	cmp    cl,0x5
c00194b6:	75 05                	jne    c00194bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00194b8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00194bb:	eb 0d                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194bd:	80 f9 06             	cmp    cl,0x6
c00194c0:	75 05                	jne    c00194c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00194c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00194c5:	eb 03                	jmp    c00194ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194c7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00194ca:	84 d2                	test   dl,dl
c00194cc:	75 05                	jne    c00194d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00194ce:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194d1:	eb 3c                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194d3:	80 fa 01             	cmp    dl,0x1
c00194d6:	75 05                	jne    c00194dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00194d8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194db:	eb 32                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194dd:	80 fa 02             	cmp    dl,0x2
c00194e0:	75 05                	jne    c00194e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00194e2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194e5:	eb 28                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194e7:	80 fa 03             	cmp    dl,0x3
c00194ea:	75 05                	jne    c00194f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00194ec:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194ef:	eb 1e                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194f1:	31 c0                	xor    eax,eax
c00194f3:	80 fa 04             	cmp    dl,0x4
c00194f6:	74 17                	je     c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194f8:	80 fa 05             	cmp    dl,0x5
c00194fb:	75 05                	jne    c0019502 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00194fd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019500:	eb 0d                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019502:	80 fa 06             	cmp    dl,0x6
c0019505:	75 05                	jne    c001950c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019507:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001950a:	eb 03                	jmp    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001950c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001950f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019514:	0f 94 c2             	sete   dl
c0019517:	80 f9 05             	cmp    cl,0x5
c001951a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001951e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019523:	d3 e0                	shl    eax,cl
c0019525:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019529:	74 0a                	je     c0019535 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001952b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001952e:	b9 07 00 00 00       	mov    ecx,0x7
c0019533:	eb 37                	jmp    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019535:	01 f8                	add    eax,edi
c0019537:	b9 03 00 00 00       	mov    ecx,0x3
c001953c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019541:	74 2b                	je     c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019543:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019548:	75 0d                	jne    c0019557 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001954a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001954e:	01 c8                	add    eax,ecx
c0019550:	b9 04 00 00 00       	mov    ecx,0x4
c0019555:	eb 17                	jmp    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019557:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001955a:	b9 07 00 00 00       	mov    ecx,0x7
c001955f:	eb 0d                	jmp    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019561:	b9 02 00 00 00       	mov    ecx,0x2
c0019566:	b2 01                	mov    dl,0x1
c0019568:	31 c0                	xor    eax,eax
c001956a:	eb 02                	jmp    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001956c:	31 d2                	xor    edx,edx
c001956e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019572:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019574:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019578:	88 11                	mov    BYTE PTR [ecx],dl
c001957a:	5a                   	pop    edx
c001957b:	5b                   	pop    ebx
c001957c:	5e                   	pop    esi
c001957d:	5f                   	pop    edi
c001957e:	c3                   	ret    

c001957f <Krnl::smpEntry()>:
c001957f:	eb fe                	jmp    c001957f <Krnl::smpEntry()>

c0019581 <Krnl::startCPU(int)>:
c0019581:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0019586:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001958d:	0f 84 36 01 00 00    	je     c00196c9 <Krnl::startCPU(int)+0x148>
c0019593:	53                   	push   ebx
c0019594:	83 ec 10             	sub    esp,0x10
c0019597:	fa                   	cli    
c0019598:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001959e:	6a 1b                	push   0x1b
c00195a0:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c00195a6:	e8 95 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00195ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00195b0:	89 c3                	mov    ebx,eax
c00195b2:	58                   	pop    eax
c00195b3:	5a                   	pop    edx
c00195b4:	53                   	push   ebx
c00195b5:	68 b4 b1 02 c0       	push   0xc002b1b4
c00195ba:	e8 4c 8f ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00195bf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195cd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195d7:	c1 e0 18             	shl    eax,0x18
c00195da:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00195e0:	83 c4 10             	add    esp,0x10
c00195e3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00195e9:	09 c2                	or     edx,eax
c00195eb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00195f1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00195f7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00195fd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019603:	80 cd c5             	or     ch,0xc5
c0019606:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001960c:	f3 90                	pause  
c001960e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019610:	0f ba e1 0c          	bt     ecx,0xc
c0019614:	72 f6                	jb     c001960c <Krnl::startCPU(int)+0x8b>
c0019616:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001961c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019622:	09 c1                	or     ecx,eax
c0019624:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001962a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019630:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019636:	80 cd 85             	or     ch,0x85
c0019639:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001963f:	f3 90                	pause  
c0019641:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019643:	0f ba e1 0c          	bt     ecx,0xc
c0019647:	72 f6                	jb     c001963f <Krnl::startCPU(int)+0xbe>
c0019649:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019653:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019659:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001965f:	09 c1                	or     ecx,eax
c0019661:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019667:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001966d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019673:	81 c9 02 06 00 00    	or     ecx,0x602
c0019679:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001967f:	f3 90                	pause  
c0019681:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019683:	0f ba e1 0c          	bt     ecx,0xc
c0019687:	72 f6                	jb     c001967f <Krnl::startCPU(int)+0xfe>
c0019689:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019693:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019699:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001969f:	09 c8                	or     eax,ecx
c00196a1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00196a7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00196ad:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00196b2:	0d 02 06 00 00       	or     eax,0x602
c00196b7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00196bd:	f3 90                	pause  
c00196bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00196c1:	0f ba e0 0c          	bt     eax,0xc
c00196c5:	72 f6                	jb     c00196bd <Krnl::startCPU(int)+0x13c>
c00196c7:	eb fe                	jmp    c00196c7 <Krnl::startCPU(int)+0x146>
c00196c9:	c3                   	ret    

c00196ca <Krnl::startCPUs()>:
c00196ca:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00196cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00196d5:	88 c2                	mov    dl,al
c00196d7:	83 e2 0a             	and    edx,0xa
c00196da:	80 fa 0a             	cmp    dl,0xa
c00196dd:	75 09                	jne    c00196e8 <Krnl::startCPUs()+0x1e>
c00196df:	a8 01                	test   al,0x1
c00196e1:	74 05                	je     c00196e8 <Krnl::startCPUs()+0x1e>
c00196e3:	e9 b3 6a fe ff       	jmp    c000019b <prepareTramp>
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop

c00196ea <EnvVarContainer::getEnv(char const*)>:
c00196ea:	57                   	push   edi
c00196eb:	56                   	push   esi
c00196ec:	53                   	push   ebx
c00196ed:	31 db                	xor    ebx,ebx
c00196ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196f3:	39 1e                	cmp    DWORD PTR [esi],ebx
c00196f5:	7e 2b                	jle    c0019722 <EnvVarContainer::getEnv(char const*)+0x38>
c00196f7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00196fe:	50                   	push   eax
c00196ff:	50                   	push   eax
c0019700:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019703:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019706:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001970a:	e8 89 71 fe ff       	call   c0000898 <strcmp>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	85 c0                	test   eax,eax
c0019714:	75 09                	jne    c001971f <EnvVarContainer::getEnv(char const*)+0x35>
c0019716:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019719:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001971d:	eb 05                	jmp    c0019724 <EnvVarContainer::getEnv(char const*)+0x3a>
c001971f:	43                   	inc    ebx
c0019720:	eb d1                	jmp    c00196f3 <EnvVarContainer::getEnv(char const*)+0x9>
c0019722:	31 c0                	xor    eax,eax
c0019724:	5b                   	pop    ebx
c0019725:	5e                   	pop    esi
c0019726:	5f                   	pop    edi
c0019727:	c3                   	ret    

c0019728 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019728:	55                   	push   ebp
c0019729:	57                   	push   edi
c001972a:	56                   	push   esi
c001972b:	53                   	push   ebx
c001972c:	83 ec 28             	sub    esp,0x28
c001972f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019733:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019737:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001973b:	56                   	push   esi
c001973c:	e8 2b 70 fe ff       	call   c000076c <strlen>
c0019741:	40                   	inc    eax
c0019742:	89 04 24             	mov    DWORD PTR [esp],eax
c0019745:	e8 52 5e ff ff       	call   c000f59c <malloc>
c001974a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001974d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019751:	e8 16 70 fe ff       	call   c000076c <strlen>
c0019756:	40                   	inc    eax
c0019757:	89 04 24             	mov    DWORD PTR [esp],eax
c001975a:	e8 3d 5e ff ff       	call   c000f59c <malloc>
c001975f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019762:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019766:	e8 01 70 fe ff       	call   c000076c <strlen>
c001976b:	83 c4 0c             	add    esp,0xc
c001976e:	40                   	inc    eax
c001976f:	50                   	push   eax
c0019770:	6a 00                	push   0x0
c0019772:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019776:	e8 d5 6f fe ff       	call   c0000750 <memset>
c001977b:	89 34 24             	mov    DWORD PTR [esp],esi
c001977e:	e8 e9 6f fe ff       	call   c000076c <strlen>
c0019783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019787:	8d 48 01             	lea    ecx,[eax+0x1]
c001978a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001978c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001978f:	89 de                	mov    esi,ebx
c0019791:	e8 d6 6f fe ff       	call   c000076c <strlen>
c0019796:	83 c4 0c             	add    esp,0xc
c0019799:	40                   	inc    eax
c001979a:	50                   	push   eax
c001979b:	6a 00                	push   0x0
c001979d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197a1:	e8 aa 6f fe ff       	call   c0000750 <memset>
c00197a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197a9:	e8 be 6f fe ff       	call   c000076c <strlen>
c00197ae:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00197b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00197ba:	40                   	inc    eax
c00197bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00197be:	c1 e0 03             	shl    eax,0x3
c00197c1:	5a                   	pop    edx
c00197c2:	59                   	pop    ecx
c00197c3:	50                   	push   eax
c00197c4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00197c7:	e8 bc 5d ff ff       	call   c000f588 <realloc>
c00197cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c00197d0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00197d3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00197d6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00197da:	b9 08 00 00 00       	mov    ecx,0x8
c00197df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197e1:	83 c4 2c             	add    esp,0x2c
c00197e4:	5b                   	pop    ebx
c00197e5:	5e                   	pop    esi
c00197e6:	5f                   	pop    edi
c00197e7:	5d                   	pop    ebp
c00197e8:	c3                   	ret    
c00197e9:	90                   	nop

c00197ea <EnvVarContainer::deleteEnv(char const*)>:
c00197ea:	c3                   	ret    
c00197eb:	90                   	nop

c00197ec <EnvVarContainer::loadFrom(char const*, char const*)>:
c00197ec:	55                   	push   ebp
c00197ed:	57                   	push   edi
c00197ee:	56                   	push   esi
c00197ef:	53                   	push   ebx
c00197f0:	81 ec 38 01 00 00    	sub    esp,0x138
c00197f6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00197fd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019804:	68 14 01 00 00       	push   0x114
c0019809:	e8 8e 5d ff ff       	call   c000f59c <malloc>
c001980e:	83 c4 0c             	add    esp,0xc
c0019811:	89 c3                	mov    ebx,eax
c0019813:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019816:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001981d:	50                   	push   eax
c001981e:	e8 47 92 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0019823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019826:	e8 11 95 ff ff       	call   c0012d3c <File::exists()>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	84 c0                	test   al,al
c0019830:	75 31                	jne    c0019863 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019832:	50                   	push   eax
c0019833:	50                   	push   eax
c0019834:	6a 12                	push   0x12
c0019836:	53                   	push   ebx
c0019837:	e8 92 92 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001983c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001983e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019841:	89 34 24             	mov    DWORD PTR [esp],esi
c0019844:	e8 23 6f fe ff       	call   c000076c <strlen>
c0019849:	5a                   	pop    edx
c001984a:	31 d2                	xor    edx,edx
c001984c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019850:	51                   	push   ecx
c0019851:	56                   	push   esi
c0019852:	52                   	push   edx
c0019853:	50                   	push   eax
c0019854:	53                   	push   ebx
c0019855:	ff d7                	call   edi
c0019857:	83 c4 14             	add    esp,0x14
c001985a:	53                   	push   ebx
c001985b:	e8 cc 92 ff ff       	call   c0012b2c <File::close()>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	56                   	push   esi
c0019864:	31 f6                	xor    esi,esi
c0019866:	68 00 01 00 00       	push   0x100
c001986b:	6a 00                	push   0x0
c001986d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019871:	50                   	push   eax
c0019872:	e8 d9 6e fe ff       	call   c0000750 <memset>
c0019877:	5f                   	pop    edi
c0019878:	58                   	pop    eax
c0019879:	6a 01                	push   0x1
c001987b:	53                   	push   ebx
c001987c:	e8 4d 92 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c0019881:	83 c4 10             	add    esp,0x10
c0019884:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001988c:	83 ec 0c             	sub    esp,0xc
c001988f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019891:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019895:	51                   	push   ecx
c0019896:	8d 54 24 23          	lea    edx,[esp+0x23]
c001989a:	52                   	push   edx
c001989b:	6a 00                	push   0x0
c001989d:	6a 01                	push   0x1
c001989f:	53                   	push   ebx
c00198a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00198a3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00198a7:	83 c4 20             	add    esp,0x20
c00198aa:	3c 0d                	cmp    al,0xd
c00198ac:	0f 84 09 01 00 00    	je     c00199bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00198b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00198b7:	0f 84 ef 00 00 00    	je     c00199ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198bd:	3c 0a                	cmp    al,0xa
c00198bf:	74 13                	je     c00198d4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198c6:	74 0c                	je     c00198d4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198c8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00198ce:	0f 8e d8 00 00 00    	jle    c00199ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198d8:	83 ec 0c             	sub    esp,0xc
c00198db:	8d 78 01             	lea    edi,[eax+0x1]
c00198de:	57                   	push   edi
c00198df:	e8 b8 5c ff ff       	call   c000f59c <malloc>
c00198e4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00198e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00198ec:	8d 56 04             	lea    edx,[esi+0x4]
c00198ef:	89 14 24             	mov    DWORD PTR [esp],edx
c00198f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00198f6:	e8 a1 5c ff ff       	call   c000f59c <malloc>
c00198fb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00198ff:	83 c4 0c             	add    esp,0xc
c0019902:	57                   	push   edi
c0019903:	6a 00                	push   0x0
c0019905:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019909:	e8 42 6e fe ff       	call   c0000750 <memset>
c001990e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019912:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019916:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001991a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001991c:	83 c4 0c             	add    esp,0xc
c001991f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019923:	52                   	push   edx
c0019924:	6a 00                	push   0x0
c0019926:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001992a:	e8 21 6e fe ff       	call   c0000750 <memset>
c001992f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019933:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019937:	89 34 24             	mov    DWORD PTR [esp],esi
c001993a:	e8 2d 6e fe ff       	call   c000076c <strlen>
c001993f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019943:	89 c1                	mov    ecx,eax
c0019945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019947:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001994a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001994d:	40                   	inc    eax
c001994e:	83 c4 10             	add    esp,0x10
c0019951:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019954:	85 d2                	test   edx,edx
c0019956:	75 0c                	jne    c0019964 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019958:	83 ec 0c             	sub    esp,0xc
c001995b:	6a 08                	push   0x8
c001995d:	e8 3a 5c ff ff       	call   c000f59c <malloc>
c0019962:	eb 0c                	jmp    c0019970 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019964:	c1 e0 03             	shl    eax,0x3
c0019967:	51                   	push   ecx
c0019968:	51                   	push   ecx
c0019969:	50                   	push   eax
c001996a:	52                   	push   edx
c001996b:	e8 18 5c ff ff       	call   c000f588 <realloc>
c0019970:	83 c4 10             	add    esp,0x10
c0019973:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019976:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019979:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001997c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019980:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019984:	b9 08 00 00 00       	mov    ecx,0x8
c0019989:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001998b:	31 f6                	xor    esi,esi
c001998d:	50                   	push   eax
c001998e:	68 00 01 00 00       	push   0x100
c0019993:	6a 00                	push   0x0
c0019995:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019999:	50                   	push   eax
c001999a:	e8 b1 6d fe ff       	call   c0000750 <memset>
c001999f:	83 c4 10             	add    esp,0x10
c00199a2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199aa:	eb 0f                	jmp    c00199bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199ac:	3c 3d                	cmp    al,0x3d
c00199ae:	74 07                	je     c00199b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00199b0:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00199b4:	46                   	inc    esi
c00199b5:	eb 04                	jmp    c00199bb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00199bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199c0:	0f 85 c6 fe ff ff    	jne    c001988c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00199c6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00199cc:	5b                   	pop    ebx
c00199cd:	5e                   	pop    esi
c00199ce:	5f                   	pop    edi
c00199cf:	5d                   	pop    ebp
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <EnvVarContainer::__loadSystem()>:
c00199d2:	83 ec 10             	sub    esp,0x10
c00199d5:	68 e0 ca 02 c0       	push   0xc002cae0
c00199da:	68 c5 b1 02 c0       	push   0xc002b1c5
c00199df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199e3:	e8 04 fe ff ff       	call   c00197ec <EnvVarContainer::loadFrom(char const*, char const*)>
c00199e8:	83 c4 1c             	add    esp,0x1c
c00199eb:	c3                   	ret    

c00199ec <EnvVarContainer::__loadUser()>:
c00199ec:	c3                   	ret    
c00199ed:	90                   	nop

c00199ee <EnvVarContainer::EnvVarContainer(Process*)>:
c00199ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a0e:	90                   	nop
c0019a0f:	c3                   	ret    

c0019a10 <EnvVarContainer::~EnvVarContainer()>:
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a1a:	85 c0                	test   eax,eax
c0019a1c:	74 1d                	je     c0019a3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a24:	85 c0                	test   eax,eax
c0019a26:	74 13                	je     c0019a3b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	50                   	push   eax
c0019a33:	e8 74 5b ff ff       	call   c000f5ac <free>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	90                   	nop
c0019a3c:	83 c4 0c             	add    esp,0xc
c0019a3f:	c3                   	ret    

c0019a40 <Krnl::getEnv(Process*, char const*)>:
c0019a40:	53                   	push   ebx
c0019a41:	83 ec 08             	sub    esp,0x8
c0019a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a4c:	39 05 f0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030af0,eax
c0019a52:	74 04                	je     c0019a58 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a54:	85 c0                	test   eax,eax
c0019a56:	75 0b                	jne    c0019a63 <Krnl::getEnv(Process*, char const*)+0x23>
c0019a58:	a1 d4 00 03 c0       	mov    eax,ds:0xc00300d4
c0019a5d:	85 c0                	test   eax,eax
c0019a5f:	75 19                	jne    c0019a7a <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a61:	eb 27                	jmp    c0019a8a <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a63:	52                   	push   edx
c0019a64:	52                   	push   edx
c0019a65:	53                   	push   ebx
c0019a66:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a6c:	e8 79 fc ff ff       	call   c00196ea <EnvVarContainer::getEnv(char const*)>
c0019a71:	83 c4 10             	add    esp,0x10
c0019a74:	85 c0                	test   eax,eax
c0019a76:	75 28                	jne    c0019aa0 <Krnl::getEnv(Process*, char const*)+0x60>
c0019a78:	eb de                	jmp    c0019a58 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a7a:	52                   	push   edx
c0019a7b:	52                   	push   edx
c0019a7c:	53                   	push   ebx
c0019a7d:	50                   	push   eax
c0019a7e:	e8 67 fc ff ff       	call   c00196ea <EnvVarContainer::getEnv(char const*)>
c0019a83:	83 c4 10             	add    esp,0x10
c0019a86:	85 c0                	test   eax,eax
c0019a88:	75 16                	jne    c0019aa0 <Krnl::getEnv(Process*, char const*)+0x60>
c0019a8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a8e:	a1 d8 00 03 c0       	mov    eax,ds:0xc00300d8
c0019a93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a97:	83 c4 08             	add    esp,0x8
c0019a9a:	5b                   	pop    ebx
c0019a9b:	e9 4a fc ff ff       	jmp    c00196ea <EnvVarContainer::getEnv(char const*)>
c0019aa0:	83 c4 08             	add    esp,0x8
c0019aa3:	5b                   	pop    ebx
c0019aa4:	c3                   	ret    

c0019aa5 <Krnl::setEnvSystem(char const*, char const*)>:
c0019aa5:	83 ec 10             	sub    esp,0x10
c0019aa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ab0:	ff 35 d8 00 03 c0    	push   DWORD PTR ds:0xc00300d8
c0019ab6:	e8 6d fc ff ff       	call   c0019728 <EnvVarContainer::setEnv(char const*, char const*)>
c0019abb:	83 c4 1c             	add    esp,0x1c
c0019abe:	c3                   	ret    

c0019abf <Krnl::setEnvUser(char const*, char const*)>:
c0019abf:	a1 d4 00 03 c0       	mov    eax,ds:0xc00300d4
c0019ac4:	85 c0                	test   eax,eax
c0019ac6:	74 15                	je     c0019add <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019ac8:	83 ec 10             	sub    esp,0x10
c0019acb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019acf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ad3:	50                   	push   eax
c0019ad4:	e8 4f fc ff ff       	call   c0019728 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ad9:	83 c4 1c             	add    esp,0x1c
c0019adc:	c3                   	ret    
c0019add:	c3                   	ret    

c0019ade <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae2:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019aec:	e9 37 fc ff ff       	jmp    c0019728 <EnvVarContainer::setEnv(char const*, char const*)>

c0019af1 <Krnl::deleteEnvSystem(char const*)>:
c0019af1:	c3                   	ret    

c0019af2 <Krnl::deleteEnvUser(char const*)>:
c0019af2:	c3                   	ret    

c0019af3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019af3:	c3                   	ret    

c0019af4 <Krnl::newProcessEnv(Process*)>:
c0019af4:	83 ec 28             	sub    esp,0x28
c0019af7:	6a 0c                	push   0xc
c0019af9:	e8 9e 5a ff ff       	call   c000f59c <malloc>
c0019afe:	5a                   	pop    edx
c0019aff:	59                   	pop    ecx
c0019b00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b04:	50                   	push   eax
c0019b05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b09:	e8 e0 fe ff ff       	call   c00199ee <EnvVarContainer::EnvVarContainer(Process*)>
c0019b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b12:	83 c4 2c             	add    esp,0x2c
c0019b15:	c3                   	ret    

c0019b16 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019b16:	57                   	push   edi
c0019b17:	56                   	push   esi
c0019b18:	53                   	push   ebx
c0019b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b1d:	83 ec 0c             	sub    esp,0xc
c0019b20:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019b26:	6a 0c                	push   0xc
c0019b28:	e8 6f 5a ff ff       	call   c000f59c <malloc>
c0019b2d:	89 c3                	mov    ebx,eax
c0019b2f:	58                   	pop    eax
c0019b30:	5a                   	pop    edx
c0019b31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b35:	53                   	push   ebx
c0019b36:	e8 b3 fe ff ff       	call   c00199ee <EnvVarContainer::EnvVarContainer(Process*)>
c0019b3b:	8b 07                	mov    eax,DWORD PTR [edi]
c0019b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0019b3f:	c1 e0 03             	shl    eax,0x3
c0019b42:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b45:	e8 52 5a ff ff       	call   c000f59c <malloc>
c0019b4a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019b4f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019b52:	c1 e1 03             	shl    ecx,0x3
c0019b55:	89 c7                	mov    edi,eax
c0019b57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b59:	83 c4 10             	add    esp,0x10
c0019b5c:	89 d8                	mov    eax,ebx
c0019b5e:	5b                   	pop    ebx
c0019b5f:	5e                   	pop    esi
c0019b60:	5f                   	pop    edi
c0019b61:	c3                   	ret    

c0019b62 <Krnl::loadSystemEnv()>:
c0019b62:	53                   	push   ebx
c0019b63:	83 ec 14             	sub    esp,0x14
c0019b66:	6a 0c                	push   0xc
c0019b68:	e8 2f 5a ff ff       	call   c000f59c <malloc>
c0019b6d:	89 c3                	mov    ebx,eax
c0019b6f:	58                   	pop    eax
c0019b70:	5a                   	pop    edx
c0019b71:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c0019b77:	53                   	push   ebx
c0019b78:	e8 71 fe ff ff       	call   c00199ee <EnvVarContainer::EnvVarContainer(Process*)>
c0019b7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b80:	89 1d d8 00 03 c0    	mov    DWORD PTR ds:0xc00300d8,ebx
c0019b86:	e8 47 fe ff ff       	call   c00199d2 <EnvVarContainer::__loadSystem()>
c0019b8b:	83 c4 18             	add    esp,0x18
c0019b8e:	5b                   	pop    ebx
c0019b8f:	c3                   	ret    

c0019b90 <Krnl::loadUserEnv()>:
c0019b90:	53                   	push   ebx
c0019b91:	83 ec 14             	sub    esp,0x14
c0019b94:	6a 0c                	push   0xc
c0019b96:	e8 01 5a ff ff       	call   c000f59c <malloc>
c0019b9b:	89 c3                	mov    ebx,eax
c0019b9d:	58                   	pop    eax
c0019b9e:	5a                   	pop    edx
c0019b9f:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c0019ba5:	53                   	push   ebx
c0019ba6:	e8 43 fe ff ff       	call   c00199ee <EnvVarContainer::EnvVarContainer(Process*)>
c0019bab:	89 1d d4 00 03 c0    	mov    DWORD PTR ds:0xc00300d4,ebx
c0019bb1:	83 c4 18             	add    esp,0x18
c0019bb4:	5b                   	pop    ebx
c0019bb5:	c3                   	ret    

c0019bb6 <Krnl::flushEnv()>:
c0019bb6:	c3                   	ret    

c0019bb7 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbb:	8b 15 d4 00 03 c0    	mov    edx,DWORD PTR ds:0xc00300d4
c0019bc1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bc7:	a1 d8 00 03 c0       	mov    eax,ds:0xc00300d8
c0019bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bce:	03 01                	add    eax,DWORD PTR [ecx]
c0019bd0:	85 d2                	test   edx,edx
c0019bd2:	74 02                	je     c0019bd6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019bd4:	03 02                	add    eax,DWORD PTR [edx]
c0019bd6:	c3                   	ret    

c0019bd7 <Krnl::getProcessEnvPair(Process*, int)>:
c0019bd7:	57                   	push   edi
c0019bd8:	56                   	push   esi
c0019bd9:	8b 35 d4 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300d4
c0019bdf:	53                   	push   ebx
c0019be0:	85 f6                	test   esi,esi
c0019be2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019be6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bea:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019bf4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019bf6:	75 16                	jne    c0019c0e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019bf8:	39 c2                	cmp    edx,eax
c0019bfa:	7c 16                	jl     c0019c12 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019bfc:	8b 0d d8 00 03 c0    	mov    ecx,DWORD PTR ds:0xc00300d8
c0019c02:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019c04:	01 c6                	add    esi,eax
c0019c06:	39 d6                	cmp    esi,edx
c0019c08:	7e 3c                	jle    c0019c46 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c0a:	29 c2                	sub    edx,eax
c0019c0c:	eb 04                	jmp    c0019c12 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c0e:	39 c2                	cmp    edx,eax
c0019c10:	7d 05                	jge    c0019c17 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019c12:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c15:	eb 20                	jmp    c0019c37 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019c17:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019c19:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019c1c:	39 d1                	cmp    ecx,edx
c0019c1e:	7e 04                	jle    c0019c24 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019c20:	29 c2                	sub    edx,eax
c0019c22:	eb 10                	jmp    c0019c34 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019c24:	8b 35 d8 00 03 c0    	mov    esi,DWORD PTR ds:0xc00300d8
c0019c2a:	03 0e                	add    ecx,DWORD PTR [esi]
c0019c2c:	39 d1                	cmp    ecx,edx
c0019c2e:	7e 16                	jle    c0019c46 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c30:	29 c2                	sub    edx,eax
c0019c32:	29 fa                	sub    edx,edi
c0019c34:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c37:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019c3a:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c3c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019c3f:	89 03                	mov    DWORD PTR [ebx],eax
c0019c41:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019c44:	eb 1d                	jmp    c0019c63 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019c46:	83 ec 0c             	sub    esp,0xc
c0019c49:	68 e7 b1 02 c0       	push   0xc002b1e7
c0019c4e:	e8 18 00 00 00       	call   c0019c6b <Krnl::panic(char const*)>
c0019c53:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c60:	83 c4 10             	add    esp,0x10
c0019c63:	89 d8                	mov    eax,ebx
c0019c65:	5b                   	pop    ebx
c0019c66:	5e                   	pop    esi
c0019c67:	5f                   	pop    edi
c0019c68:	c2 04 00             	ret    0x4

c0019c6b <Krnl::panic(char const*)>:
c0019c6b:	55                   	push   ebp
c0019c6c:	89 e5                	mov    ebp,esp
c0019c6e:	53                   	push   ebx
c0019c6f:	83 ec 10             	sub    esp,0x10
c0019c72:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c75:	fa                   	cli    
c0019c76:	c6 05 e4 00 03 c0 01 	mov    BYTE PTR ds:0xc00300e4,0x1
c0019c7d:	53                   	push   ebx
c0019c7e:	e8 73 59 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019c83:	58                   	pop    eax
c0019c84:	c6 05 e0 c4 02 c0 00 	mov    BYTE PTR ds:0xc002c4e0,0x0
c0019c8b:	5a                   	pop    edx
c0019c8c:	53                   	push   ebx
c0019c8d:	68 01 b2 02 c0       	push   0xc002b201
c0019c92:	e8 74 88 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019c97:	59                   	pop    ecx
c0019c98:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019c9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ca3:	e8 2f 66 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c0019ca8:	83 c4 0c             	add    esp,0xc
c0019cab:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cb0:	6a 01                	push   0x1
c0019cb2:	6a 0f                	push   0xf
c0019cb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cba:	e8 77 64 ff ff       	call   c0010136 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019cbf:	58                   	pop    eax
c0019cc0:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ccb:	e8 88 69 ff ff       	call   c0010658 <VgaText::clearScreen()>
c0019cd0:	58                   	pop    eax
c0019cd1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cd6:	5a                   	pop    edx
c0019cd7:	68 1a b2 02 c0       	push   0xc002b21a
c0019cdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ce2:	e8 fd 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ce7:	59                   	pop    ecx
c0019ce8:	58                   	pop    eax
c0019ce9:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019cee:	68 c0 b2 02 c0       	push   0xc002b2c0
c0019cf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cf9:	e8 e6 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019cfe:	58                   	pop    eax
c0019cff:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d04:	5a                   	pop    edx
c0019d05:	68 36 b2 02 c0       	push   0xc002b236
c0019d0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d10:	e8 cf 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d15:	59                   	pop    ecx
c0019d16:	58                   	pop    eax
c0019d17:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d1c:	53                   	push   ebx
c0019d1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d23:	e8 bc 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d28:	58                   	pop    eax
c0019d29:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d2e:	5a                   	pop    edx
c0019d2f:	68 56 b2 02 c0       	push   0xc002b256
c0019d34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d3a:	e8 a5 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d3f:	a1 e0 00 03 c0       	mov    eax,ds:0xc00300e0
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	85 c0                	test   eax,eax
c0019d49:	74 02                	je     c0019d4d <Krnl::panic(char const*)+0xe2>
c0019d4b:	ff d0                	call   eax
c0019d4d:	83 ec 0c             	sub    esp,0xc
c0019d50:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d53:	e8 8c 30 00 00       	call   c001cde4 <Thr::getDriverNameFromAddress(unsigned long)>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	89 c3                	mov    ebx,eax
c0019d5d:	85 c0                	test   eax,eax
c0019d5f:	0f 84 4e 02 00 00    	je     c0019fb3 <Krnl::panic(char const*)+0x348>
c0019d65:	83 ec 08             	sub    esp,0x8
c0019d68:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d6d:	68 fc b2 02 c0       	push   0xc002b2fc
c0019d72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d78:	e8 67 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d7d:	58                   	pop    eax
c0019d7e:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d83:	5a                   	pop    edx
c0019d84:	68 36 b2 02 c0       	push   0xc002b236
c0019d89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d8f:	e8 50 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019d94:	59                   	pop    ecx
c0019d95:	58                   	pop    eax
c0019d96:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019d9b:	53                   	push   ebx
c0019d9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da2:	e8 3d 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	83 ec 08             	sub    esp,0x8
c0019dad:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019db2:	68 55 b2 02 c0       	push   0xc002b255
c0019db7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dbd:	e8 22 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019dc2:	58                   	pop    eax
c0019dc3:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019dc8:	5a                   	pop    edx
c0019dc9:	68 54 b3 02 c0       	push   0xc002b354
c0019dce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dd4:	e8 0b 6a ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019dd9:	59                   	pop    ecx
c0019dda:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ddf:	5b                   	pop    ebx
c0019de0:	68 94 b3 02 c0       	push   0xc002b394
c0019de5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019deb:	e8 f4 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019df0:	58                   	pop    eax
c0019df1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019df6:	5a                   	pop    edx
c0019df7:	68 41 b2 02 c0       	push   0xc002b241
c0019dfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e02:	e8 dd 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e07:	59                   	pop    ecx
c0019e08:	5b                   	pop    ebx
c0019e09:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e0c:	68 59 b2 02 c0       	push   0xc002b259
c0019e11:	e8 f5 86 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019e16:	58                   	pop    eax
c0019e17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e1a:	5a                   	pop    edx
c0019e1b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e1e:	68 62 b2 02 c0       	push   0xc002b262
c0019e23:	e8 e3 86 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019e28:	59                   	pop    ecx
c0019e29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e2c:	5b                   	pop    ebx
c0019e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e2f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e32:	68 6b b2 02 c0       	push   0xc002b26b
c0019e37:	e8 cf 86 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0019e3c:	58                   	pop    eax
c0019e3d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e42:	5a                   	pop    edx
c0019e43:	68 d8 b3 02 c0       	push   0xc002b3d8
c0019e48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e4e:	e8 91 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e53:	59                   	pop    ecx
c0019e54:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e59:	5b                   	pop    ebx
c0019e5a:	68 74 b2 02 c0       	push   0xc002b274
c0019e5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e65:	e8 7a 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e6a:	0f 20 c0             	mov    eax,cr0
c0019e6d:	5a                   	pop    edx
c0019e6e:	59                   	pop    ecx
c0019e6f:	50                   	push   eax
c0019e70:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e7b:	e8 1e 69 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019e80:	5b                   	pop    ebx
c0019e81:	58                   	pop    eax
c0019e82:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019e87:	68 7e b2 02 c0       	push   0xc002b27e
c0019e8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e92:	e8 4d 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019e97:	0f 20 d0             	mov    eax,cr2
c0019e9a:	5a                   	pop    edx
c0019e9b:	59                   	pop    ecx
c0019e9c:	50                   	push   eax
c0019e9d:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ea2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea8:	e8 f1 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019ead:	5b                   	pop    ebx
c0019eae:	58                   	pop    eax
c0019eaf:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019eb4:	68 88 b2 02 c0       	push   0xc002b288
c0019eb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebf:	e8 20 69 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ec4:	0f 20 d8             	mov    eax,cr3
c0019ec7:	5a                   	pop    edx
c0019ec8:	59                   	pop    ecx
c0019ec9:	50                   	push   eax
c0019eca:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ecf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed5:	e8 c4 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019eda:	5b                   	pop    ebx
c0019edb:	58                   	pop    eax
c0019edc:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ee1:	68 9b b2 02 c0       	push   0xc002b29b
c0019ee6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eec:	e8 f3 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019ef1:	0f 20 e0             	mov    eax,cr4
c0019ef4:	5a                   	pop    edx
c0019ef5:	59                   	pop    ecx
c0019ef6:	50                   	push   eax
c0019ef7:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019efc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f02:	e8 97 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f07:	5b                   	pop    ebx
c0019f08:	58                   	pop    eax
c0019f09:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f0e:	68 a5 b2 02 c0       	push   0xc002b2a5
c0019f13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f19:	e8 c6 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f1e:	5a                   	pop    edx
c0019f1f:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f24:	59                   	pop    ecx
c0019f25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f2b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f2e:	50                   	push   eax
c0019f2f:	e8 6a 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f34:	5b                   	pop    ebx
c0019f35:	58                   	pop    eax
c0019f36:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f3b:	68 bc b2 02 c0       	push   0xc002b2bc
c0019f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f46:	e8 99 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f4b:	5a                   	pop    edx
c0019f4c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f51:	59                   	pop    ecx
c0019f52:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f58:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f5b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f5e:	50                   	push   eax
c0019f5f:	e8 3a 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f64:	5b                   	pop    ebx
c0019f65:	58                   	pop    eax
c0019f66:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f6b:	68 bc b2 02 c0       	push   0xc002b2bc
c0019f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f76:	e8 69 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019f7b:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019f80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f83:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f89:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f8b:	59                   	pop    ecx
c0019f8c:	5b                   	pop    ebx
c0019f8d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f90:	50                   	push   eax
c0019f91:	e8 08 68 ff ff       	call   c001079e <VgaText::putx(unsigned int)>
c0019f96:	83 c4 10             	add    esp,0x10
c0019f99:	b2 fe                	mov    dl,0xfe
c0019f9b:	e4 60                	in     al,0x60
c0019f9d:	3c 1c                	cmp    al,0x1c
c0019f9f:	74 04                	je     c0019fa5 <Krnl::panic(char const*)+0x33a>
c0019fa1:	3c 5a                	cmp    al,0x5a
c0019fa3:	75 f6                	jne    c0019f9b <Krnl::panic(char const*)+0x330>
c0019fa5:	e4 64                	in     al,0x64
c0019fa7:	a8 02                	test   al,0x2
c0019fa9:	75 fa                	jne    c0019fa5 <Krnl::panic(char const*)+0x33a>
c0019fab:	88 d0                	mov    al,dl
c0019fad:	e6 64                	out    0x64,al
c0019faf:	fa                   	cli    
c0019fb0:	f4                   	hlt    
c0019fb1:	eb e8                	jmp    c0019f9b <Krnl::panic(char const*)+0x330>
c0019fb3:	50                   	push   eax
c0019fb4:	50                   	push   eax
c0019fb5:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019fba:	68 28 b3 02 c0       	push   0xc002b328
c0019fbf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc5:	e8 1a 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fca:	58                   	pop    eax
c0019fcb:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019fd0:	5a                   	pop    edx
c0019fd1:	68 36 b2 02 c0       	push   0xc002b236
c0019fd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fdc:	e8 03 68 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fe1:	59                   	pop    ecx
c0019fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019fe7:	5b                   	pop    ebx
c0019fe8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019feb:	83 c0 0c             	add    eax,0xc
c0019fee:	50                   	push   eax
c0019fef:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0019ff4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ffa:	e8 e5 67 ff ff       	call   c00107e4 <VgaText::puts(char const*)>
c0019fff:	83 c4 10             	add    esp,0x10
c001a002:	e9 a3 fd ff ff       	jmp    c0019daa <Krnl::panic(char const*)+0x13f>

c001a007 <Net::switchEndian16(unsigned short)>:
c001a007:	83 ec 04             	sub    esp,0x4
c001a00a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a00e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a012:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a016:	c1 f8 08             	sar    eax,0x8
c001a019:	89 c2                	mov    edx,eax
c001a01b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a01f:	c1 e0 08             	shl    eax,0x8
c001a022:	09 d0                	or     eax,edx
c001a024:	83 c4 04             	add    esp,0x4
c001a027:	c3                   	ret    

c001a028 <Net::switchEndian32(unsigned int)>:
c001a028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02c:	c1 e8 18             	shr    eax,0x18
c001a02f:	89 c2                	mov    edx,eax
c001a031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a035:	c1 e0 08             	shl    eax,0x8
c001a038:	25 00 00 ff 00       	and    eax,0xff0000
c001a03d:	09 c2                	or     edx,eax
c001a03f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a043:	c1 e8 08             	shr    eax,0x8
c001a046:	25 00 ff 00 00       	and    eax,0xff00
c001a04b:	09 c2                	or     edx,eax
c001a04d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a051:	c1 e0 18             	shl    eax,0x18
c001a054:	09 d0                	or     eax,edx
c001a056:	c3                   	ret    

c001a057 <Net::crc32Calc(unsigned char*, int)>:
c001a057:	83 ec 10             	sub    esp,0x10
c001a05a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a05f:	75 07                	jne    c001a068 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a061:	b8 00 00 00 00       	mov    eax,0x0
c001a066:	eb 7c                	jmp    c001a0e4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a068:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a06d:	7f 07                	jg     c001a076 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a06f:	b8 00 00 00 00       	mov    eax,0x0
c001a074:	eb 6e                	jmp    c001a0e4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a076:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a07e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a08a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a08e:	7d 4e                	jge    c001a0de <Net::crc32Calc(unsigned char*, int)+0x87>
c001a090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a098:	01 d0                	add    eax,edx
c001a09a:	8a 00                	mov    al,BYTE PTR [eax]
c001a09c:	0f b6 c0             	movzx  eax,al
c001a09f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a0a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a0ab:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a0b0:	7f 26                	jg     c001a0d8 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b6:	83 e0 01             	and    eax,0x1
c001a0b9:	74 0d                	je     c001a0c8 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a0bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0bf:	d1 e8                	shr    eax,1
c001a0c1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a0c6:	eb 06                	jmp    c001a0ce <Net::crc32Calc(unsigned char*, int)+0x77>
c001a0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0cc:	d1 e8                	shr    eax,1
c001a0ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0d6:	eb d3                	jmp    c001a0ab <Net::crc32Calc(unsigned char*, int)+0x54>
c001a0d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a0dc:	eb a8                	jmp    c001a086 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e2:	f7 d0                	not    eax
c001a0e4:	83 c4 10             	add    esp,0x10
c001a0e7:	c3                   	ret    

c001a0e8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a0e8:	57                   	push   edi
c001a0e9:	56                   	push   esi
c001a0ea:	53                   	push   ebx
c001a0eb:	83 ec 60             	sub    esp,0x60
c001a0ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a0f5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a0f9:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a101:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a106:	7f 1a                	jg     c001a122 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a108:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a10f:	8d 50 01             	lea    edx,[eax+0x1]
c001a112:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a119:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a11c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a120:	eb df                	jmp    c001a101 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a122:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a129:	8d 50 01             	lea    edx,[eax+0x1]
c001a12c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a133:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a136:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a13d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a141:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a145:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a149:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a155:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a15d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a161:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a165:	89 c6                	mov    esi,eax
c001a167:	89 d7                	mov    edi,edx
c001a169:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a16b:	89 c8                	mov    eax,ecx
c001a16d:	89 fa                	mov    edx,edi
c001a16f:	89 f3                	mov    ebx,esi
c001a171:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a175:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a179:	89 04 24             	mov    DWORD PTR [esp],eax
c001a17c:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a184:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a18b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a18f:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a193:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a197:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a19f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1ab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a1af:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a1b3:	89 c6                	mov    esi,eax
c001a1b5:	89 d7                	mov    edi,edx
c001a1b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1b9:	89 c8                	mov    eax,ecx
c001a1bb:	89 fa                	mov    edx,edi
c001a1bd:	89 f3                	mov    ebx,esi
c001a1bf:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a1c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a1c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1cb:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a1da:	0f b7 c0             	movzx  eax,ax
c001a1dd:	c1 f8 08             	sar    eax,0x8
c001a1e0:	89 c1                	mov    ecx,eax
c001a1e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a1ec:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1f3:	88 ca                	mov    dl,cl
c001a1f5:	88 10                	mov    BYTE PTR [eax],dl
c001a1f7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a1fe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a205:	8d 48 01             	lea    ecx,[eax+0x1]
c001a208:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a20f:	88 10                	mov    BYTE PTR [eax],dl
c001a211:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a215:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a219:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a220:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a224:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a228:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a22c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a230:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a234:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a238:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a23c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a240:	89 c6                	mov    esi,eax
c001a242:	89 d7                	mov    edi,edx
c001a244:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a246:	89 c8                	mov    eax,ecx
c001a248:	89 fa                	mov    edx,edi
c001a24a:	89 f3                	mov    ebx,esi
c001a24c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a250:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a254:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a258:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a25c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a263:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a26a:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a26e:	50                   	push   eax
c001a26f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a273:	e8 df fd ff ff       	call   c001a057 <Net::crc32Calc(unsigned char*, int)>
c001a278:	83 c4 08             	add    esp,0x8
c001a27b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a27f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a283:	c1 e8 18             	shr    eax,0x18
c001a286:	89 c1                	mov    ecx,eax
c001a288:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a28f:	8d 50 01             	lea    edx,[eax+0x1]
c001a292:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a299:	88 ca                	mov    dl,cl
c001a29b:	88 10                	mov    BYTE PTR [eax],dl
c001a29d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2a1:	c1 e8 10             	shr    eax,0x10
c001a2a4:	89 c1                	mov    ecx,eax
c001a2a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2ad:	8d 50 01             	lea    edx,[eax+0x1]
c001a2b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2b7:	88 ca                	mov    dl,cl
c001a2b9:	88 10                	mov    BYTE PTR [eax],dl
c001a2bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2bf:	c1 e8 08             	shr    eax,0x8
c001a2c2:	89 c1                	mov    ecx,eax
c001a2c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2cb:	8d 50 01             	lea    edx,[eax+0x1]
c001a2ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2d5:	88 ca                	mov    dl,cl
c001a2d7:	88 10                	mov    BYTE PTR [eax],dl
c001a2d9:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e3:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2ea:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a2ee:	88 10                	mov    BYTE PTR [eax],dl
c001a2f0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2f4:	83 c4 60             	add    esp,0x60
c001a2f7:	5b                   	pop    ebx
c001a2f8:	5e                   	pop    esi
c001a2f9:	5f                   	pop    edi
c001a2fa:	c3                   	ret    

c001a2fb <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a2fb:	57                   	push   edi
c001a2fc:	56                   	push   esi
c001a2fd:	53                   	push   ebx
c001a2fe:	83 ec 70             	sub    esp,0x70
c001a301:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a308:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a30c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a314:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a31b:	83 c0 0e             	add    eax,0xe
c001a31e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a322:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a329:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a32d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a33d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a341:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a345:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a349:	89 c6                	mov    esi,eax
c001a34b:	89 d7                	mov    edi,edx
c001a34d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a34f:	89 c8                	mov    eax,ecx
c001a351:	89 fa                	mov    edx,edi
c001a353:	89 f3                	mov    ebx,esi
c001a355:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a359:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a35d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a361:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a369:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a370:	83 c0 08             	add    eax,0x8
c001a373:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a377:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a37e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a382:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a38a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a38e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a392:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a396:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a39a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a39e:	89 c6                	mov    esi,eax
c001a3a0:	89 d7                	mov    edi,edx
c001a3a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3a4:	89 c8                	mov    eax,ecx
c001a3a6:	89 fa                	mov    edx,edi
c001a3a8:	89 f3                	mov    ebx,esi
c001a3aa:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3ae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a3b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a3b6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a3be:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3c5:	8d 50 01             	lea    edx,[eax+0x1]
c001a3c8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3cf:	8a 00                	mov    al,BYTE PTR [eax]
c001a3d1:	0f b6 c0             	movzx  eax,al
c001a3d4:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a3d9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3e0:	8d 50 01             	lea    edx,[eax+0x1]
c001a3e3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3ea:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ec:	0f b6 c0             	movzx  eax,al
c001a3ef:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a3f4:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a3f9:	c1 e0 08             	shl    eax,0x8
c001a3fc:	89 c2                	mov    edx,eax
c001a3fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a402:	09 d0                	or     eax,edx
c001a404:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a40b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a40f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a417:	75 46                	jne    c001a45f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a419:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a420:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a423:	66 3d dc 05          	cmp    ax,0x5dc
c001a427:	77 16                	ja     c001a43f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a429:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a430:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a433:	0f b7 c0             	movzx  eax,ax
c001a436:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a43d:	eb 20                	jmp    c001a45f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a43f:	83 ec 0c             	sub    esp,0xc
c001a442:	68 00 b4 02 c0       	push   0xc002b400
c001a447:	e8 bf 80 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a456:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a45a:	e9 17 01 00 00       	jmp    c001a576 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a45f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a466:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a46d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a46f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a473:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a47a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a47e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a482:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a486:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a48a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a48e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a492:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a496:	89 c6                	mov    esi,eax
c001a498:	89 d7                	mov    edi,edx
c001a49a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a49c:	89 c8                	mov    eax,ecx
c001a49e:	89 fa                	mov    edx,edi
c001a4a0:	89 f3                	mov    ebx,esi
c001a4a2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a4a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a4aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4ad:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4b4:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a4bb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4c2:	8d 50 01             	lea    edx,[eax+0x1]
c001a4c5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4cc:	8a 00                	mov    al,BYTE PTR [eax]
c001a4ce:	0f b6 c0             	movzx  eax,al
c001a4d1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a4d5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4dc:	8d 50 01             	lea    edx,[eax+0x1]
c001a4df:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4e6:	8a 00                	mov    al,BYTE PTR [eax]
c001a4e8:	0f b6 c0             	movzx  eax,al
c001a4eb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a4ef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4f6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4f9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a500:	8a 00                	mov    al,BYTE PTR [eax]
c001a502:	0f b6 c0             	movzx  eax,al
c001a505:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a509:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a510:	8d 50 01             	lea    edx,[eax+0x1]
c001a513:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a51a:	8a 00                	mov    al,BYTE PTR [eax]
c001a51c:	0f b6 c0             	movzx  eax,al
c001a51f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a523:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a527:	c1 e0 18             	shl    eax,0x18
c001a52a:	89 c2                	mov    edx,eax
c001a52c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a530:	c1 e0 10             	shl    eax,0x10
c001a533:	09 c2                	or     edx,eax
c001a535:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a539:	c1 e0 08             	shl    eax,0x8
c001a53c:	09 d0                	or     eax,edx
c001a53e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a542:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a546:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a54d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a551:	83 e8 04             	sub    eax,0x4
c001a554:	83 ec 08             	sub    esp,0x8
c001a557:	50                   	push   eax
c001a558:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a55c:	e8 f6 fa ff ff       	call   c001a057 <Net::crc32Calc(unsigned char*, int)>
c001a561:	83 c4 10             	add    esp,0x10
c001a564:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a568:	0f 94 c2             	sete   dl
c001a56b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a572:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a575:	90                   	nop
c001a576:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a57d:	83 c4 70             	add    esp,0x70
c001a580:	5b                   	pop    ebx
c001a581:	5e                   	pop    esi
c001a582:	5f                   	pop    edi
c001a583:	c2 04 00             	ret    0x4

c001a586 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a586:	55                   	push   ebp
c001a587:	57                   	push   edi
c001a588:	56                   	push   esi
c001a589:	53                   	push   ebx
c001a58a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a590:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a597:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a599:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a59c:	80 fb 40             	cmp    bl,0x40
c001a59f:	75 1b                	jne    c001a5bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a5a1:	8a 16                	mov    dl,BYTE PTR [esi]
c001a5a3:	84 d2                	test   dl,dl
c001a5a5:	0f 84 f1 00 00 00    	je     c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5ab:	8d 46 01             	lea    eax,[esi+0x1]
c001a5ae:	80 fa 3a             	cmp    dl,0x3a
c001a5b1:	74 04                	je     c001a5b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5b3:	89 c6                	mov    esi,eax
c001a5b5:	eb ea                	jmp    c001a5a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5b7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5ba:	89 c6                	mov    esi,eax
c001a5bc:	50                   	push   eax
c001a5bd:	6a 40                	push   0x40
c001a5bf:	6a 00                	push   0x0
c001a5c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5c5:	50                   	push   eax
c001a5c6:	e8 85 61 fe ff       	call   c0000750 <memset>
c001a5cb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5d2:	31 c0                	xor    eax,eax
c001a5d4:	83 c4 10             	add    esp,0x10
c001a5d7:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a5d9:	84 c9                	test   cl,cl
c001a5db:	0f 84 bb 00 00 00    	je     c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5e1:	3d c7 00 00 00       	cmp    eax,0xc7
c001a5e6:	0f 8f b0 00 00 00    	jg     c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5ec:	80 f9 0a             	cmp    cl,0xa
c001a5ef:	0f 85 98 00 00 00    	jne    c001a68d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a5f5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a5fa:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a5fe:	a8 df                	test   al,0xdf
c001a600:	0f 94 c1             	sete   cl
c001a603:	3c 23                	cmp    al,0x23
c001a605:	0f 94 c2             	sete   dl
c001a608:	08 d1                	or     cl,dl
c001a60a:	75 4a                	jne    c001a656 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a60c:	8d 50 f7             	lea    edx,[eax-0x9]
c001a60f:	80 fa 01             	cmp    dl,0x1
c001a612:	76 42                	jbe    c001a656 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a614:	3c 5b                	cmp    al,0x5b
c001a616:	75 42                	jne    c001a65a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a618:	80 fb 40             	cmp    bl,0x40
c001a61b:	75 39                	jne    c001a656 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a61d:	83 ec 0c             	sub    esp,0xc
c001a620:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a624:	52                   	push   edx
c001a625:	e8 42 61 fe ff       	call   c000076c <strlen>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	83 f8 3f             	cmp    eax,0x3f
c001a630:	77 6a                	ja     c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a632:	50                   	push   eax
c001a633:	50                   	push   eax
c001a634:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a638:	52                   	push   edx
c001a639:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a63d:	52                   	push   edx
c001a63e:	e8 c9 61 fe ff       	call   c000080c <strcpy>
c001a643:	58                   	pop    eax
c001a644:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a648:	52                   	push   edx
c001a649:	e8 1e 61 fe ff       	call   c000076c <strlen>
c001a64e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a653:	83 c4 10             	add    esp,0x10
c001a656:	31 d2                	xor    edx,edx
c001a658:	eb 3a                	jmp    c001a694 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a65a:	80 fb 40             	cmp    bl,0x40
c001a65d:	74 06                	je     c001a665 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a65f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a663:	eb 20                	jmp    c001a685 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a665:	50                   	push   eax
c001a666:	50                   	push   eax
c001a667:	55                   	push   ebp
c001a668:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a66c:	50                   	push   eax
c001a66d:	e8 26 62 fe ff       	call   c0000898 <strcmp>
c001a672:	83 c4 10             	add    esp,0x10
c001a675:	85 c0                	test   eax,eax
c001a677:	75 dd                	jne    c001a656 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a679:	eb e4                	jmp    c001a65f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a67b:	8d 50 01             	lea    edx,[eax+0x1]
c001a67e:	80 f9 3d             	cmp    cl,0x3d
c001a681:	74 1d                	je     c001a6a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a683:	89 d0                	mov    eax,edx
c001a685:	8a 08                	mov    cl,BYTE PTR [eax]
c001a687:	84 c9                	test   cl,cl
c001a689:	75 f0                	jne    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a68b:	eb 0f                	jmp    c001a69c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a68d:	8d 50 01             	lea    edx,[eax+0x1]
c001a690:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a694:	47                   	inc    edi
c001a695:	89 d0                	mov    eax,edx
c001a697:	e9 3b ff ff ff       	jmp    c001a5d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a69c:	31 c0                	xor    eax,eax
c001a69e:	eb 33                	jmp    c001a6d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a6a7:	50                   	push   eax
c001a6a8:	50                   	push   eax
c001a6a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6ad:	50                   	push   eax
c001a6ae:	56                   	push   esi
c001a6af:	e8 e4 61 fe ff       	call   c0000898 <strcmp>
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6bd:	75 97                	jne    c001a656 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6bf:	51                   	push   ecx
c001a6c0:	51                   	push   ecx
c001a6c1:	52                   	push   edx
c001a6c2:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6c9:	e8 3e 61 fe ff       	call   c000080c <strcpy>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	b0 01                	mov    al,0x1
c001a6d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a6d9:	5b                   	pop    ebx
c001a6da:	5e                   	pop    esi
c001a6db:	5f                   	pop    edi
c001a6dc:	5d                   	pop    ebp
c001a6dd:	c3                   	ret    

c001a6de <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a6de:	57                   	push   edi
c001a6df:	56                   	push   esi
c001a6e0:	53                   	push   ebx
c001a6e1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a6e7:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a6ee:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6f5:	53                   	push   ebx
c001a6f6:	e8 71 60 fe ff       	call   c000076c <strlen>
c001a6fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a6fe:	89 c7                	mov    edi,eax
c001a700:	e8 67 60 fe ff       	call   c000076c <strlen>
c001a705:	83 c4 10             	add    esp,0x10
c001a708:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a70c:	3d ff 00 00 00       	cmp    eax,0xff
c001a711:	0f 87 d3 00 00 00    	ja     c001a7ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a717:	57                   	push   edi
c001a718:	57                   	push   edi
c001a719:	56                   	push   esi
c001a71a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a71e:	56                   	push   esi
c001a71f:	e8 e8 60 fe ff       	call   c000080c <strcpy>
c001a724:	58                   	pop    eax
c001a725:	5a                   	pop    edx
c001a726:	68 a2 b7 02 c0       	push   0xc002b7a2
c001a72b:	56                   	push   esi
c001a72c:	e8 1b 62 fe ff       	call   c000094c <strcat>
c001a731:	59                   	pop    ecx
c001a732:	5f                   	pop    edi
c001a733:	53                   	push   ebx
c001a734:	56                   	push   esi
c001a735:	e8 12 62 fe ff       	call   c000094c <strcat>
c001a73a:	58                   	pop    eax
c001a73b:	5a                   	pop    edx
c001a73c:	68 4c b4 02 c0       	push   0xc002b44c
c001a741:	56                   	push   esi
c001a742:	e8 05 62 fe ff       	call   c000094c <strcat>
c001a747:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a74e:	e8 49 4e ff ff       	call   c000f59c <malloc>
c001a753:	83 c4 0c             	add    esp,0xc
c001a756:	89 c3                	mov    ebx,eax
c001a758:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001a75e:	56                   	push   esi
c001a75f:	50                   	push   eax
c001a760:	e8 05 83 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	85 db                	test   ebx,ebx
c001a76a:	74 7e                	je     c001a7ea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a76c:	51                   	push   ecx
c001a76d:	51                   	push   ecx
c001a76e:	6a 01                	push   0x1
c001a770:	53                   	push   ebx
c001a771:	e8 58 83 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001a776:	83 c4 10             	add    esp,0x10
c001a779:	85 c0                	test   eax,eax
c001a77b:	74 08                	je     c001a785 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a77d:	83 ec 0c             	sub    esp,0xc
c001a780:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a782:	53                   	push   ebx
c001a783:	eb 5f                	jmp    c001a7e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a785:	52                   	push   edx
c001a786:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a78a:	50                   	push   eax
c001a78b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a78f:	50                   	push   eax
c001a790:	53                   	push   ebx
c001a791:	e8 e4 85 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001a796:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a79a:	83 c4 10             	add    esp,0x10
c001a79d:	89 c1                	mov    ecx,eax
c001a79f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a7a3:	74 31                	je     c001a7d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7a5:	83 ec 0c             	sub    esp,0xc
c001a7a8:	50                   	push   eax
c001a7a9:	e8 ee 4d ff ff       	call   c000f59c <malloc>
c001a7ae:	89 c6                	mov    esi,eax
c001a7b0:	58                   	pop    eax
c001a7b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7b3:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7b7:	52                   	push   edx
c001a7b8:	56                   	push   esi
c001a7b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7c1:	53                   	push   ebx
c001a7c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7c5:	83 c4 20             	add    esp,0x20
c001a7c8:	85 c0                	test   eax,eax
c001a7ca:	75 0a                	jne    c001a7d6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7d0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7d4:	74 18                	je     c001a7ee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	53                   	push   ebx
c001a7da:	e8 4d 83 ff ff       	call   c0012b2c <File::close()>
c001a7df:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7e7:	83 c4 10             	add    esp,0x10
c001a7ea:	31 c0                	xor    eax,eax
c001a7ec:	eb 3b                	jmp    c001a829 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a7ee:	83 ec 0c             	sub    esp,0xc
c001a7f1:	53                   	push   ebx
c001a7f2:	e8 35 83 ff ff       	call   c0012b2c <File::close()>
c001a7f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a7ff:	83 c4 0c             	add    esp,0xc
c001a802:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a809:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a810:	56                   	push   esi
c001a811:	e8 70 fd ff ff       	call   c001a586 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a816:	89 34 24             	mov    DWORD PTR [esp],esi
c001a819:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a81d:	e8 8a 4d ff ff       	call   c000f5ac <free>
c001a822:	83 c4 10             	add    esp,0x10
c001a825:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a829:	81 c4 20 01 00 00    	add    esp,0x120
c001a82f:	5b                   	pop    ebx
c001a830:	5e                   	pop    esi
c001a831:	5f                   	pop    edi
c001a832:	c3                   	ret    

c001a833 <Reg::getLine(char*, char*, char*)>:
c001a833:	57                   	push   edi
c001a834:	56                   	push   esi
c001a835:	53                   	push   ebx
c001a836:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a83a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a83e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a842:	57                   	push   edi
c001a843:	56                   	push   esi
c001a844:	53                   	push   ebx
c001a845:	68 51 b4 02 c0       	push   0xc002b451
c001a84a:	e8 8f fe ff ff       	call   c001a6de <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a84f:	83 c4 10             	add    esp,0x10
c001a852:	84 c0                	test   al,al
c001a854:	75 10                	jne    c001a866 <Reg::getLine(char*, char*, char*)+0x33>
c001a856:	57                   	push   edi
c001a857:	56                   	push   esi
c001a858:	53                   	push   ebx
c001a859:	68 76 b4 02 c0       	push   0xc002b476
c001a85e:	e8 7b fe ff ff       	call   c001a6de <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	5b                   	pop    ebx
c001a867:	5e                   	pop    esi
c001a868:	5f                   	pop    edi
c001a869:	c3                   	ret    

c001a86a <Reg::readInt(char*, char*, int*)>:
c001a86a:	55                   	push   ebp
c001a86b:	57                   	push   edi
c001a86c:	56                   	push   esi
c001a86d:	53                   	push   ebx
c001a86e:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a874:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a878:	57                   	push   edi
c001a879:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a880:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a887:	e8 a7 ff ff ff       	call   c001a833 <Reg::getLine(char*, char*, char*)>
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	84 c0                	test   al,al
c001a891:	0f 84 b3 00 00 00    	je     c001a94a <Reg::readInt(char*, char*, int*)+0xe0>
c001a897:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a89b:	80 fa 2b             	cmp    dl,0x2b
c001a89e:	74 0c                	je     c001a8ac <Reg::readInt(char*, char*, int*)+0x42>
c001a8a0:	80 fa 2d             	cmp    dl,0x2d
c001a8a3:	75 0e                	jne    c001a8b3 <Reg::readInt(char*, char*, int*)+0x49>
c001a8a5:	ba 01 00 00 00       	mov    edx,0x1
c001a8aa:	eb 0b                	jmp    c001a8b7 <Reg::readInt(char*, char*, int*)+0x4d>
c001a8ac:	ba 01 00 00 00       	mov    edx,0x1
c001a8b1:	eb 02                	jmp    c001a8b5 <Reg::readInt(char*, char*, int*)+0x4b>
c001a8b3:	31 d2                	xor    edx,edx
c001a8b5:	31 c0                	xor    eax,eax
c001a8b7:	be 0a 00 00 00       	mov    esi,0xa
c001a8bc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8c1:	75 20                	jne    c001a8e3 <Reg::readInt(char*, char*, int*)+0x79>
c001a8c3:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8c7:	80 f9 78             	cmp    cl,0x78
c001a8ca:	75 0a                	jne    c001a8d6 <Reg::readInt(char*, char*, int*)+0x6c>
c001a8cc:	83 c2 02             	add    edx,0x2
c001a8cf:	be 10 00 00 00       	mov    esi,0x10
c001a8d4:	eb 0d                	jmp    c001a8e3 <Reg::readInt(char*, char*, int*)+0x79>
c001a8d6:	80 f9 62             	cmp    cl,0x62
c001a8d9:	75 08                	jne    c001a8e3 <Reg::readInt(char*, char*, int*)+0x79>
c001a8db:	83 c2 02             	add    edx,0x2
c001a8de:	be 02 00 00 00       	mov    esi,0x2
c001a8e3:	01 d7                	add    edi,edx
c001a8e5:	31 d2                	xor    edx,edx
c001a8e7:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a8e9:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a8ed:	80 fb 0d             	cmp    bl,0xd
c001a8f0:	0f 94 c3             	sete   bl
c001a8f3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a8f8:	0f 94 c1             	sete   cl
c001a8fb:	08 cb                	or     bl,cl
c001a8fd:	75 3a                	jne    c001a939 <Reg::readInt(char*, char*, int*)+0xcf>
c001a8ff:	0f af d6             	imul   edx,esi
c001a902:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a907:	83 fe 10             	cmp    esi,0x10
c001a90a:	75 26                	jne    c001a932 <Reg::readInt(char*, char*, int*)+0xc8>
c001a90c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a910:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a913:	89 e9                	mov    ecx,ebp
c001a915:	80 f9 05             	cmp    cl,0x5
c001a918:	77 06                	ja     c001a920 <Reg::readInt(char*, char*, int*)+0xb6>
c001a91a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a91e:	eb 16                	jmp    c001a936 <Reg::readInt(char*, char*, int*)+0xcc>
c001a920:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a924:	83 e9 61             	sub    ecx,0x61
c001a927:	80 f9 05             	cmp    cl,0x5
c001a92a:	77 06                	ja     c001a932 <Reg::readInt(char*, char*, int*)+0xc8>
c001a92c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a930:	eb 04                	jmp    c001a936 <Reg::readInt(char*, char*, int*)+0xcc>
c001a932:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a936:	47                   	inc    edi
c001a937:	eb ae                	jmp    c001a8e7 <Reg::readInt(char*, char*, int*)+0x7d>
c001a939:	84 c0                	test   al,al
c001a93b:	74 02                	je     c001a93f <Reg::readInt(char*, char*, int*)+0xd5>
c001a93d:	f7 da                	neg    edx
c001a93f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a946:	89 10                	mov    DWORD PTR [eax],edx
c001a948:	88 d8                	mov    al,bl
c001a94a:	81 c4 ec 00 00 00    	add    esp,0xec
c001a950:	5b                   	pop    ebx
c001a951:	5e                   	pop    esi
c001a952:	5f                   	pop    edi
c001a953:	5d                   	pop    ebp
c001a954:	c3                   	ret    

c001a955 <Reg::readString(char*, char*, char*, int)>:
c001a955:	57                   	push   edi
c001a956:	56                   	push   esi
c001a957:	53                   	push   ebx
c001a958:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a95e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a965:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a969:	57                   	push   edi
c001a96a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a971:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a978:	e8 b6 fe ff ff       	call   c001a833 <Reg::getLine(char*, char*, char*)>
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	89 c6                	mov    esi,eax
c001a982:	84 c0                	test   al,al
c001a984:	74 44                	je     c001a9ca <Reg::readString(char*, char*, char*, int)+0x75>
c001a986:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a98d:	31 c0                	xor    eax,eax
c001a98f:	4a                   	dec    edx
c001a990:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a993:	84 c9                	test   cl,cl
c001a995:	74 0f                	je     c001a9a6 <Reg::readString(char*, char*, char*, int)+0x51>
c001a997:	39 c2                	cmp    edx,eax
c001a999:	7e 0b                	jle    c001a9a6 <Reg::readString(char*, char*, char*, int)+0x51>
c001a99b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a99e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a9a3:	40                   	inc    eax
c001a9a4:	eb ea                	jmp    c001a990 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a9a6:	83 ec 0c             	sub    esp,0xc
c001a9a9:	53                   	push   ebx
c001a9aa:	e8 bd 5d fe ff       	call   c000076c <strlen>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9b7:	75 11                	jne    c001a9ca <Reg::readString(char*, char*, char*, int)+0x75>
c001a9b9:	83 ec 0c             	sub    esp,0xc
c001a9bc:	53                   	push   ebx
c001a9bd:	e8 aa 5d fe ff       	call   c000076c <strlen>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9ca:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9d0:	89 f0                	mov    eax,esi
c001a9d2:	5b                   	pop    ebx
c001a9d3:	5e                   	pop    esi
c001a9d4:	5f                   	pop    edi
c001a9d5:	c3                   	ret    

c001a9d6 <Reg::readBool(char*, char*, bool*)>:
c001a9d6:	83 ec 20             	sub    esp,0x20
c001a9d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9dd:	50                   	push   eax
c001a9de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a9e6:	e8 7f fe ff ff       	call   c001a86a <Reg::readInt(char*, char*, int*)>
c001a9eb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a9f0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a9f4:	0f 95 02             	setne  BYTE PTR [edx]
c001a9f7:	83 c4 2c             	add    esp,0x2c
c001a9fa:	c3                   	ret    

c001a9fb <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a9fb:	53                   	push   ebx
c001a9fc:	83 ec 1c             	sub    esp,0x1c
c001a9ff:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa03:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa07:	50                   	push   eax
c001aa08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa10:	e8 c1 ff ff ff       	call   c001a9d6 <Reg::readBool(char*, char*, bool*)>
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	84 c0                	test   al,al
c001aa1a:	74 04                	je     c001aa20 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa1c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa20:	88 d8                	mov    al,bl
c001aa22:	83 c4 18             	add    esp,0x18
c001aa25:	5b                   	pop    ebx
c001aa26:	c3                   	ret    

c001aa27 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa27:	53                   	push   ebx
c001aa28:	83 ec 1c             	sub    esp,0x1c
c001aa2b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa33:	50                   	push   eax
c001aa34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa3c:	e8 29 fe ff ff       	call   c001a86a <Reg::readInt(char*, char*, int*)>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	84 c0                	test   al,al
c001aa46:	74 04                	je     c001aa4c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa4c:	89 d8                	mov    eax,ebx
c001aa4e:	83 c4 18             	add    esp,0x18
c001aa51:	5b                   	pop    ebx
c001aa52:	c3                   	ret    

c001aa53 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa53:	57                   	push   edi
c001aa54:	56                   	push   esi
c001aa55:	56                   	push   esi
c001aa56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa5a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa5e:	56                   	push   esi
c001aa5f:	57                   	push   edi
c001aa60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa68:	e8 e8 fe ff ff       	call   c001a955 <Reg::readString(char*, char*, char*, int)>
c001aa6d:	83 c4 10             	add    esp,0x10
c001aa70:	84 c0                	test   al,al
c001aa72:	75 1a                	jne    c001aa8e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aa74:	51                   	push   ecx
c001aa75:	56                   	push   esi
c001aa76:	6a 00                	push   0x0
c001aa78:	57                   	push   edi
c001aa79:	e8 d2 5c fe ff       	call   c0000750 <memset>
c001aa7e:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aa81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aa85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa87:	83 c4 10             	add    esp,0x10
c001aa8a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa8e:	89 f8                	mov    eax,edi
c001aa90:	5a                   	pop    edx
c001aa91:	5e                   	pop    esi
c001aa92:	5f                   	pop    edi
c001aa93:	c3                   	ret    

c001aa94 <Sys::eject(regs*)>:
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	83 ca ff             	or     edx,0xffffffff
c001aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa9e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aaa1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aaa6:	83 e9 41             	sub    ecx,0x41
c001aaa9:	83 f9 19             	cmp    ecx,0x19
c001aaac:	77 18                	ja     c001aac6 <Sys::eject(regs*)+0x32>
c001aaae:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c001aab5:	85 c9                	test   ecx,ecx
c001aab7:	74 0d                	je     c001aac6 <Sys::eject(regs*)+0x32>
c001aab9:	83 ec 0c             	sub    esp,0xc
c001aabc:	51                   	push   ecx
c001aabd:	e8 28 b3 ff ff       	call   c0015dea <LogicalDisk::eject()>
c001aac2:	83 c4 10             	add    esp,0x10
c001aac5:	99                   	cdq    
c001aac6:	83 c4 0c             	add    esp,0xc
c001aac9:	c3                   	ret    

c001aaca <Sys::exit(regs*)>:
c001aaca:	83 ec 18             	sub    esp,0x18
c001aacd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aad1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aad4:	e8 be 35 00 00       	call   c001e097 <terminateTask(int)>
c001aad9:	83 c8 ff             	or     eax,0xffffffff
c001aadc:	83 c4 1c             	add    esp,0x1c
c001aadf:	89 c2                	mov    edx,eax
c001aae1:	c3                   	ret    

c001aae2 <Sys::getCwd(regs*)>:
c001aae2:	83 ec 10             	sub    esp,0x10
c001aae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aae9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aaec:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aaef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaf4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aaf7:	e8 70 7d ff ff       	call   c001286c <Fs::getcwd(Process*, char*, int)>
c001aafc:	83 c4 1c             	add    esp,0x1c
c001aaff:	99                   	cdq    
c001ab00:	c3                   	ret    

c001ab01 <Sys::getPID(regs*)>:
c001ab01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab09:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab0b:	99                   	cdq    
c001ab0c:	c3                   	ret    

c001ab0d <Sys::getRAMData(regs*)>:
c001ab0d:	8b 0d f4 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5f4
c001ab13:	6b 05 f0 d5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d5f0,0x64
c001ab1a:	99                   	cdq    
c001ab1b:	f7 f9                	idiv   ecx
c001ab1d:	c1 e0 18             	shl    eax,0x18
c001ab20:	09 c8                	or     eax,ecx
c001ab22:	99                   	cdq    
c001ab23:	c3                   	ret    

c001ab24 <Sys::getVGAPtr(regs*)>:
c001ab24:	55                   	push   ebp
c001ab25:	57                   	push   edi
c001ab26:	56                   	push   esi
c001ab27:	53                   	push   ebx
c001ab28:	83 ec 18             	sub    esp,0x18
c001ab2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab2f:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ab32:	e8 ac 30 00 00       	call   c001dbe3 <Thr::processFromPID(int)>
c001ab37:	83 c4 10             	add    esp,0x10
c001ab3a:	89 c1                	mov    ecx,eax
c001ab3c:	b8 01 00 00 00       	mov    eax,0x1
c001ab41:	85 c9                	test   ecx,ecx
c001ab43:	74 59                	je     c001ab9e <Sys::getVGAPtr(regs*)+0x7a>
c001ab45:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ab4b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ab4f:	74 0c                	je     c001ab5d <Sys::getVGAPtr(regs*)+0x39>
c001ab51:	83 ec 0c             	sub    esp,0xc
c001ab54:	53                   	push   ebx
c001ab55:	e8 7d 57 ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ab60:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ab63:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ab68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab6a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ab6d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab70:	81 c3 82 00 00 00    	add    ebx,0x82
c001ab76:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ab7c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab7f:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ab82:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ab88:	50                   	push   eax
c001ab89:	50                   	push   eax
c001ab8a:	53                   	push   ebx
c001ab8b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab8e:	05 a8 0f 00 00       	add    eax,0xfa8
c001ab93:	50                   	push   eax
c001ab94:	e8 73 5c fe ff       	call   c000080c <strcpy>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	31 c0                	xor    eax,eax
c001ab9e:	83 c4 0c             	add    esp,0xc
c001aba1:	31 d2                	xor    edx,edx
c001aba3:	5b                   	pop    ebx
c001aba4:	5e                   	pop    esi
c001aba5:	5f                   	pop    edi
c001aba6:	5d                   	pop    ebp
c001aba7:	c3                   	ret    

c001aba8 <Sys::loadDLL(regs*)>:
c001aba8:	56                   	push   esi
c001aba9:	53                   	push   ebx
c001abaa:	31 d2                	xor    edx,edx
c001abac:	51                   	push   ecx
c001abad:	b8 01 00 00 00       	mov    eax,0x1
c001abb2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abb6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001abba:	0f 84 8c 00 00 00    	je     c001ac4c <Sys::loadDLL(regs*)+0xa4>
c001abc0:	83 ec 0c             	sub    esp,0xc
c001abc3:	68 14 01 00 00       	push   0x114
c001abc8:	e8 cf 49 ff ff       	call   c000f59c <malloc>
c001abcd:	83 c4 0c             	add    esp,0xc
c001abd0:	89 c3                	mov    ebx,eax
c001abd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abd7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abda:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001abdd:	53                   	push   ebx
c001abde:	e8 87 7e ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	31 d2                	xor    edx,edx
c001abe8:	b8 02 00 00 00       	mov    eax,0x2
c001abed:	85 db                	test   ebx,ebx
c001abef:	74 5b                	je     c001ac4c <Sys::loadDLL(regs*)+0xa4>
c001abf1:	83 ec 0c             	sub    esp,0xc
c001abf4:	53                   	push   ebx
c001abf5:	e8 42 81 ff ff       	call   c0012d3c <File::exists()>
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	84 c0                	test   al,al
c001abff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac01:	75 11                	jne    c001ac14 <Sys::loadDLL(regs*)+0x6c>
c001ac03:	83 ec 0c             	sub    esp,0xc
c001ac06:	53                   	push   ebx
c001ac07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac0a:	83 c4 10             	add    esp,0x10
c001ac0d:	b8 03 00 00 00       	mov    eax,0x3
c001ac12:	eb 36                	jmp    c001ac4a <Sys::loadDLL(regs*)+0xa2>
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	53                   	push   ebx
c001ac18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac1b:	58                   	pop    eax
c001ac1c:	5a                   	pop    edx
c001ac1d:	6a 00                	push   0x0
c001ac1f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac22:	e8 0e 22 00 00       	call   c001ce35 <Thr::loadDLL(char const*, bool)>
c001ac27:	83 c4 10             	add    esp,0x10
c001ac2a:	89 c1                	mov    ecx,eax
c001ac2c:	31 d2                	xor    edx,edx
c001ac2e:	b8 04 00 00 00       	mov    eax,0x4
c001ac33:	85 c9                	test   ecx,ecx
c001ac35:	74 15                	je     c001ac4c <Sys::loadDLL(regs*)+0xa4>
c001ac37:	53                   	push   ebx
c001ac38:	53                   	push   ebx
c001ac39:	ff 35 a8 d5 02 c0    	push   DWORD PTR ds:0xc002d5a8
c001ac3f:	51                   	push   ecx
c001ac40:	e8 1e 24 00 00       	call   c001d063 <Thr::executeDLL(unsigned long, void*)>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	31 c0                	xor    eax,eax
c001ac4a:	31 d2                	xor    edx,edx
c001ac4c:	59                   	pop    ecx
c001ac4d:	5b                   	pop    ebx
c001ac4e:	5e                   	pop    esi
c001ac4f:	c3                   	ret    

c001ac50 <Sys::read(regs*)>:
c001ac50:	57                   	push   edi
c001ac51:	56                   	push   esi
c001ac52:	53                   	push   ebx
c001ac53:	83 ec 10             	sub    esp,0x10
c001ac56:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac5a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac5d:	83 f8 02             	cmp    eax,0x2
c001ac60:	77 10                	ja     c001ac72 <Sys::read(regs*)+0x22>
c001ac62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac6a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac70:	eb 0e                	jmp    c001ac80 <Sys::read(regs*)+0x30>
c001ac72:	83 ec 0c             	sub    esp,0xc
c001ac75:	50                   	push   eax
c001ac76:	e8 d0 63 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	89 c1                	mov    ecx,eax
c001ac80:	83 c8 ff             	or     eax,0xffffffff
c001ac83:	85 c9                	test   ecx,ecx
c001ac85:	89 c2                	mov    edx,eax
c001ac87:	74 28                	je     c001acb1 <Sys::read(regs*)+0x61>
c001ac89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac91:	31 ff                	xor    edi,edi
c001ac93:	83 ec 0c             	sub    esp,0xc
c001ac96:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac98:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ac9c:	52                   	push   edx
c001ac9d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aca0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001aca3:	57                   	push   edi
c001aca4:	56                   	push   esi
c001aca5:	51                   	push   ecx
c001aca6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aca9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001acad:	83 c4 20             	add    esp,0x20
c001acb0:	99                   	cdq    
c001acb1:	83 c4 10             	add    esp,0x10
c001acb4:	5b                   	pop    ebx
c001acb5:	5e                   	pop    esi
c001acb6:	5f                   	pop    edi
c001acb7:	c3                   	ret    

c001acb8 <Sys::sbrk(regs*)>:
c001acb8:	56                   	push   esi
c001acb9:	53                   	push   ebx
c001acba:	50                   	push   eax
c001acbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acc4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acc7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001acca:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001acd0:	85 db                	test   ebx,ebx
c001acd2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001acd5:	74 02                	je     c001acd9 <Sys::sbrk(regs*)+0x21>
c001acd7:	79 06                	jns    c001acdf <Sys::sbrk(regs*)+0x27>
c001acd9:	89 f0                	mov    eax,esi
c001acdb:	31 d2                	xor    edx,edx
c001acdd:	eb 2a                	jmp    c001ad09 <Sys::sbrk(regs*)+0x51>
c001acdf:	83 c8 ff             	or     eax,0xffffffff
c001ace2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ace8:	89 c2                	mov    edx,eax
c001acea:	77 1d                	ja     c001ad09 <Sys::sbrk(regs*)+0x51>
c001acec:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001acf2:	50                   	push   eax
c001acf3:	c1 ea 0c             	shr    edx,0xc
c001acf6:	68 07 0c 00 00       	push   0xc07
c001acfb:	52                   	push   edx
c001acfc:	51                   	push   ecx
c001acfd:	e8 5e 6d ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001ad02:	89 f0                	mov    eax,esi
c001ad04:	31 d2                	xor    edx,edx
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	59                   	pop    ecx
c001ad0a:	5b                   	pop    ebx
c001ad0b:	5e                   	pop    esi
c001ad0c:	c3                   	ret    

c001ad0d <Sys::setCwd(regs*)>:
c001ad0d:	83 ec 14             	sub    esp,0x14
c001ad10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad14:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad1f:	e8 b7 80 ff ff       	call   c0012ddb <Fs::setcwd(Process*, char*)>
c001ad24:	83 c4 1c             	add    esp,0x1c
c001ad27:	99                   	cdq    
c001ad28:	c3                   	ret    

c001ad29 <Sys::setTime(regs*)>:
c001ad29:	55                   	push   ebp
c001ad2a:	31 c9                	xor    ecx,ecx
c001ad2c:	57                   	push   edi
c001ad2d:	bd 0c 00 00 00       	mov    ebp,0xc
c001ad32:	56                   	push   esi
c001ad33:	53                   	push   ebx
c001ad34:	31 db                	xor    ebx,ebx
c001ad36:	83 ec 10             	sub    esp,0x10
c001ad39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad3d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ad40:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ad43:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ad46:	89 c2                	mov    edx,eax
c001ad48:	66 81 ef 6c 07       	sub    di,0x76c
c001ad4d:	83 e2 1f             	and    edx,0x1f
c001ad50:	c1 e7 10             	shl    edi,0x10
c001ad53:	42                   	inc    edx
c001ad54:	c1 e8 05             	shr    eax,0x5
c001ad57:	88 d1                	mov    cl,dl
c001ad59:	31 d2                	xor    edx,edx
c001ad5b:	f7 f5                	div    ebp
c001ad5d:	89 dd                	mov    ebp,ebx
c001ad5f:	88 d5                	mov    ch,dl
c001ad61:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ad67:	0f b7 c1             	movzx  eax,cx
c001ad6a:	31 d2                	xor    edx,edx
c001ad6c:	09 f8                	or     eax,edi
c001ad6e:	bf 3c 00 00 00       	mov    edi,0x3c
c001ad73:	89 c1                	mov    ecx,eax
c001ad75:	89 f0                	mov    eax,esi
c001ad77:	f7 f7                	div    edi
c001ad79:	c1 e2 10             	shl    edx,0x10
c001ad7c:	09 d5                	or     ebp,edx
c001ad7e:	31 d2                	xor    edx,edx
c001ad80:	89 eb                	mov    ebx,ebp
c001ad82:	f7 f7                	div    edi
c001ad84:	bf 10 0e 00 00       	mov    edi,0xe10
c001ad89:	88 d7                	mov    bh,dl
c001ad8b:	89 f0                	mov    eax,esi
c001ad8d:	31 d2                	xor    edx,edx
c001ad8f:	f7 f7                	div    edi
c001ad91:	bf 18 00 00 00       	mov    edi,0x18
c001ad96:	31 d2                	xor    edx,edx
c001ad98:	f7 f7                	div    edi
c001ad9a:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001ad9f:	88 d3                	mov    bl,dl
c001ada1:	53                   	push   ebx
c001ada2:	51                   	push   ecx
c001ada3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ada9:	e8 76 88 ff ff       	call   c0013624 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001adae:	83 c4 1c             	add    esp,0x1c
c001adb1:	83 f0 01             	xor    eax,0x1
c001adb4:	5b                   	pop    ebx
c001adb5:	0f b6 c0             	movzx  eax,al
c001adb8:	5e                   	pop    esi
c001adb9:	31 d2                	xor    edx,edx
c001adbb:	5f                   	pop    edi
c001adbc:	5d                   	pop    ebp
c001adbd:	c3                   	ret    

c001adbe <Sys::timezone(regs*)>:
c001adbe:	53                   	push   ebx
c001adbf:	83 ec 08             	sub    esp,0x8
c001adc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adc6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001adca:	75 17                	jne    c001ade3 <Sys::timezone(regs*)+0x25>
c001adcc:	83 ec 0c             	sub    esp,0xc
c001adcf:	68 91 b4 02 c0       	push   0xc002b491
c001add4:	e8 32 77 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001add9:	83 c8 ff             	or     eax,0xffffffff
c001addc:	83 c4 10             	add    esp,0x10
c001addf:	89 c2                	mov    edx,eax
c001ade1:	eb 20                	jmp    c001ae03 <Sys::timezone(regs*)+0x45>
c001ade3:	83 ec 0c             	sub    esp,0xc
c001ade6:	68 a6 b4 02 c0       	push   0xc002b4a6
c001adeb:	e8 1b 77 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001adf0:	58                   	pop    eax
c001adf1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001adf4:	e8 8d 85 ff ff       	call   c0013386 <User::loadClockSettings(int)>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	b8 01 00 00 00       	mov    eax,0x1
c001ae01:	31 d2                	xor    edx,edx
c001ae03:	83 c4 08             	add    esp,0x8
c001ae06:	5b                   	pop    ebx
c001ae07:	c3                   	ret    

c001ae08 <Sys::write(regs*)>:
c001ae08:	57                   	push   edi
c001ae09:	56                   	push   esi
c001ae0a:	53                   	push   ebx
c001ae0b:	83 ec 10             	sub    esp,0x10
c001ae0e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae15:	83 f8 02             	cmp    eax,0x2
c001ae18:	77 10                	ja     c001ae2a <Sys::write(regs*)+0x22>
c001ae1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae22:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae28:	eb 0e                	jmp    c001ae38 <Sys::write(regs*)+0x30>
c001ae2a:	83 ec 0c             	sub    esp,0xc
c001ae2d:	50                   	push   eax
c001ae2e:	e8 18 62 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001ae33:	83 c4 10             	add    esp,0x10
c001ae36:	89 c1                	mov    ecx,eax
c001ae38:	83 c8 ff             	or     eax,0xffffffff
c001ae3b:	85 c9                	test   ecx,ecx
c001ae3d:	89 c2                	mov    edx,eax
c001ae3f:	74 28                	je     c001ae69 <Sys::write(regs*)+0x61>
c001ae41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae49:	31 ff                	xor    edi,edi
c001ae4b:	83 ec 0c             	sub    esp,0xc
c001ae4e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae50:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae54:	52                   	push   edx
c001ae55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae58:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae5b:	57                   	push   edi
c001ae5c:	56                   	push   esi
c001ae5d:	51                   	push   ecx
c001ae5e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae65:	83 c4 20             	add    esp,0x20
c001ae68:	99                   	cdq    
c001ae69:	83 c4 10             	add    esp,0x10
c001ae6c:	5b                   	pop    ebx
c001ae6d:	5e                   	pop    esi
c001ae6e:	5f                   	pop    edi
c001ae6f:	c3                   	ret    

c001ae70 <Sys::wsbe(regs*)>:
c001ae70:	57                   	push   edi
c001ae71:	b9 0b 00 00 00       	mov    ecx,0xb
c001ae76:	56                   	push   esi
c001ae77:	be e5 b4 02 c0       	mov    esi,0xc002b4e5
c001ae7c:	53                   	push   ebx
c001ae7d:	83 ec 30             	sub    esp,0x30
c001ae80:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ae84:	fc                   	cld    
c001ae85:	83 ec 0c             	sub    esp,0xc
c001ae88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ae8a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ae8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae93:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae96:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001ae9c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae9e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001aea1:	57                   	push   edi
c001aea2:	e8 c5 58 fe ff       	call   c000076c <strlen>
c001aea7:	5a                   	pop    edx
c001aea8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001aeac:	52                   	push   edx
c001aead:	31 d2                	xor    edx,edx
c001aeaf:	57                   	push   edi
c001aeb0:	52                   	push   edx
c001aeb1:	50                   	push   eax
c001aeb2:	56                   	push   esi
c001aeb3:	ff d3                	call   ebx
c001aeb5:	83 c4 14             	add    esp,0x14
c001aeb8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aebc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aebf:	e8 d3 31 00 00       	call   c001e097 <terminateTask(int)>
c001aec4:	83 c4 40             	add    esp,0x40
c001aec7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aecc:	5b                   	pop    ebx
c001aecd:	31 d2                	xor    edx,edx
c001aecf:	5e                   	pop    esi
c001aed0:	5f                   	pop    edi
c001aed1:	c3                   	ret    

c001aed2 <Sys::yield(regs*)>:
c001aed2:	57                   	push   edi
c001aed3:	56                   	push   esi
c001aed4:	53                   	push   ebx
c001aed5:	fa                   	cli    
c001aed6:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001aedc:	e8 16 29 00 00       	call   c001d7f7 <schedule()>
c001aee1:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001aee6:	48                   	dec    eax
c001aee7:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001aeec:	75 01                	jne    c001aeef <Sys::yield(regs*)+0x1d>
c001aeee:	fb                   	sti    
c001aeef:	8b 35 10 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc10
c001aef5:	8b 3d 14 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc14
c001aefb:	89 f0                	mov    eax,esi
c001aefd:	89 fb                	mov    ebx,edi
c001aeff:	89 f1                	mov    ecx,esi
c001af01:	c1 e0 07             	shl    eax,0x7
c001af04:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001af08:	25 80 30 0f 00       	and    eax,0xf3080
c001af0d:	c1 eb 17             	shr    ebx,0x17
c001af10:	31 c8                	xor    eax,ecx
c001af12:	89 da                	mov    edx,ebx
c001af14:	5b                   	pop    ebx
c001af15:	5e                   	pop    esi
c001af16:	5f                   	pop    edi
c001af17:	c3                   	ret    

c001af18 <sysCallSeekDir(regs*)>:
c001af18:	31 c0                	xor    eax,eax
c001af1a:	31 d2                	xor    edx,edx
c001af1c:	c3                   	ret    

c001af1d <sysCallTellDir(regs*)>:
c001af1d:	31 c0                	xor    eax,eax
c001af1f:	31 d2                	xor    edx,edx
c001af21:	c3                   	ret    

c001af22 <sysCallVerify(regs*)>:
c001af22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af26:	31 d2                	xor    edx,edx
c001af28:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af2b:	c3                   	ret    

c001af2c <sysCallGetArgc(regs*)>:
c001af2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af34:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001af3a:	99                   	cdq    
c001af3b:	c3                   	ret    

c001af3c <sysFormatDisk(regs*)>:
c001af3c:	56                   	push   esi
c001af3d:	53                   	push   ebx
c001af3e:	53                   	push   ebx
c001af3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af43:	8b 1d 14 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d714
c001af49:	eb 25                	jmp    c001af70 <sysFormatDisk(regs*)+0x34>
c001af4b:	83 ec 0c             	sub    esp,0xc
c001af4e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af51:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af53:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af56:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af59:	50                   	push   eax
c001af5a:	ff 34 85 a0 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2460]
c001af61:	53                   	push   ebx
c001af62:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af65:	83 c4 20             	add    esp,0x20
c001af68:	83 f8 08             	cmp    eax,0x8
c001af6b:	75 12                	jne    c001af7f <sysFormatDisk(regs*)+0x43>
c001af6d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af70:	85 db                	test   ebx,ebx
c001af72:	75 d7                	jne    c001af4b <sysFormatDisk(regs*)+0xf>
c001af74:	59                   	pop    ecx
c001af75:	b8 03 00 00 00       	mov    eax,0x3
c001af7a:	31 d2                	xor    edx,edx
c001af7c:	5b                   	pop    ebx
c001af7d:	5e                   	pop    esi
c001af7e:	c3                   	ret    
c001af7f:	85 c0                	test   eax,eax
c001af81:	74 1b                	je     c001af9e <sysFormatDisk(regs*)+0x62>
c001af83:	83 f8 09             	cmp    eax,0x9
c001af86:	74 0b                	je     c001af93 <sysFormatDisk(regs*)+0x57>
c001af88:	59                   	pop    ecx
c001af89:	b8 02 00 00 00       	mov    eax,0x2
c001af8e:	31 d2                	xor    edx,edx
c001af90:	5b                   	pop    ebx
c001af91:	5e                   	pop    esi
c001af92:	c3                   	ret    
c001af93:	59                   	pop    ecx
c001af94:	b8 01 00 00 00       	mov    eax,0x1
c001af99:	31 d2                	xor    edx,edx
c001af9b:	5b                   	pop    ebx
c001af9c:	5e                   	pop    esi
c001af9d:	c3                   	ret    
c001af9e:	59                   	pop    ecx
c001af9f:	31 c0                	xor    eax,eax
c001afa1:	31 d2                	xor    edx,edx
c001afa3:	5b                   	pop    ebx
c001afa4:	5e                   	pop    esi
c001afa5:	c3                   	ret    

c001afa6 <sysSetDiskVolumeLabel(regs*)>:
c001afa6:	56                   	push   esi
c001afa7:	53                   	push   ebx
c001afa8:	53                   	push   ebx
c001afa9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afad:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001afb0:	83 f8 19             	cmp    eax,0x19
c001afb3:	77 29                	ja     c001afde <sysSetDiskVolumeLabel(regs*)+0x38>
c001afb5:	8b 0c 85 a0 db 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2460]
c001afbc:	85 c9                	test   ecx,ecx
c001afbe:	74 1e                	je     c001afde <sysSetDiskVolumeLabel(regs*)+0x38>
c001afc0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001afc3:	85 d2                	test   edx,edx
c001afc5:	74 17                	je     c001afde <sysSetDiskVolumeLabel(regs*)+0x38>
c001afc7:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001afcd:	8b 33                	mov    esi,DWORD PTR [ebx]
c001afcf:	52                   	push   edx
c001afd0:	50                   	push   eax
c001afd1:	51                   	push   ecx
c001afd2:	53                   	push   ebx
c001afd3:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	99                   	cdq    
c001afda:	59                   	pop    ecx
c001afdb:	5b                   	pop    ebx
c001afdc:	5e                   	pop    esi
c001afdd:	c3                   	ret    
c001afde:	59                   	pop    ecx
c001afdf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001afe4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afe9:	5b                   	pop    ebx
c001afea:	5e                   	pop    esi
c001afeb:	c3                   	ret    

c001afec <sysGetDiskVolumeLabel(regs*)>:
c001afec:	57                   	push   edi
c001afed:	56                   	push   esi
c001afee:	53                   	push   ebx
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001aff6:	83 fa 19             	cmp    edx,0x19
c001aff9:	77 34                	ja     c001b02f <sysGetDiskVolumeLabel(regs*)+0x43>
c001affb:	8b 0c 95 a0 db 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2460]
c001b002:	85 c9                	test   ecx,ecx
c001b004:	74 29                	je     c001b02f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b006:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b009:	85 db                	test   ebx,ebx
c001b00b:	74 22                	je     c001b02f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b00d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b010:	85 c0                	test   eax,eax
c001b012:	74 1b                	je     c001b02f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b014:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b01a:	83 ec 0c             	sub    esp,0xc
c001b01d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b01f:	50                   	push   eax
c001b020:	53                   	push   ebx
c001b021:	52                   	push   edx
c001b022:	51                   	push   ecx
c001b023:	56                   	push   esi
c001b024:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b027:	83 c4 20             	add    esp,0x20
c001b02a:	99                   	cdq    
c001b02b:	5b                   	pop    ebx
c001b02c:	5e                   	pop    esi
c001b02d:	5f                   	pop    edi
c001b02e:	c3                   	ret    
c001b02f:	5b                   	pop    ebx
c001b030:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b035:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b03a:	5e                   	pop    esi
c001b03b:	5f                   	pop    edi
c001b03c:	c3                   	ret    

c001b03d <sysShutdown(regs*)>:
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b044:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b047:	85 c0                	test   eax,eax
c001b049:	74 18                	je     c001b063 <sysShutdown(regs*)+0x26>
c001b04b:	83 f8 01             	cmp    eax,0x1
c001b04e:	74 38                	je     c001b088 <sysShutdown(regs*)+0x4b>
c001b050:	83 f8 02             	cmp    eax,0x2
c001b053:	74 24                	je     c001b079 <sysShutdown(regs*)+0x3c>
c001b055:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b05a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b05f:	83 c4 0c             	add    esp,0xc
c001b062:	c3                   	ret    
c001b063:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001b068:	8b 10                	mov    edx,DWORD PTR [eax]
c001b06a:	6a 00                	push   0x0
c001b06c:	6a 00                	push   0x0
c001b06e:	6a 00                	push   0x0
c001b070:	50                   	push   eax
c001b071:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b074:	83 c4 10             	add    esp,0x10
c001b077:	eb dc                	jmp    c001b055 <sysShutdown(regs*)+0x18>
c001b079:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001b07e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b080:	6a 00                	push   0x0
c001b082:	6a 00                	push   0x0
c001b084:	6a 01                	push   0x1
c001b086:	eb e8                	jmp    c001b070 <sysShutdown(regs*)+0x33>
c001b088:	a1 40 fc 02 c0       	mov    eax,ds:0xc002fc40
c001b08d:	85 c0                	test   eax,eax
c001b08f:	74 02                	je     c001b093 <sysShutdown(regs*)+0x56>
c001b091:	ff d0                	call   eax
c001b093:	31 c0                	xor    eax,eax
c001b095:	31 d2                	xor    edx,edx
c001b097:	83 c4 0c             	add    esp,0xc
c001b09a:	c3                   	ret    

c001b09b <sysCallRealpath(regs*)>:
c001b09b:	83 ec 0c             	sub    esp,0xc
c001b09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b0a5:	85 d2                	test   edx,edx
c001b0a7:	74 07                	je     c001b0b0 <sysCallRealpath(regs*)+0x15>
c001b0a9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b0ac:	85 c0                	test   eax,eax
c001b0ae:	75 0b                	jne    c001b0bb <sysCallRealpath(regs*)+0x20>
c001b0b0:	b8 01 00 00 00       	mov    eax,0x1
c001b0b5:	31 d2                	xor    edx,edx
c001b0b7:	83 c4 0c             	add    esp,0xc
c001b0ba:	c3                   	ret    
c001b0bb:	51                   	push   ecx
c001b0bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b0c2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b0c5:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b0cb:	51                   	push   ecx
c001b0cc:	52                   	push   edx
c001b0cd:	50                   	push   eax
c001b0ce:	e8 ed 77 ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	31 c0                	xor    eax,eax
c001b0d8:	31 d2                	xor    edx,edx
c001b0da:	83 c4 0c             	add    esp,0xc
c001b0dd:	c3                   	ret    

c001b0de <sysCallReadDir(regs*)>:
c001b0de:	53                   	push   ebx
c001b0df:	83 ec 18             	sub    esp,0x18
c001b0e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b0e9:	83 f8 02             	cmp    eax,0x2
c001b0ec:	76 60                	jbe    c001b14e <sysCallReadDir(regs*)+0x70>
c001b0ee:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b0f5:	77 48                	ja     c001b13f <sysCallReadDir(regs*)+0x61>
c001b0f7:	83 ec 0c             	sub    esp,0xc
c001b0fa:	50                   	push   eax
c001b0fb:	e8 4b 5f ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	85 c0                	test   eax,eax
c001b105:	74 38                	je     c001b13f <sysCallReadDir(regs*)+0x61>
c001b107:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b10f:	83 ec 0c             	sub    esp,0xc
c001b112:	8b 10                	mov    edx,DWORD PTR [eax]
c001b114:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b118:	51                   	push   ecx
c001b119:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b11c:	6a 00                	push   0x0
c001b11e:	68 10 01 00 00       	push   0x110
c001b123:	50                   	push   eax
c001b124:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b127:	83 c4 20             	add    esp,0x20
c001b12a:	85 c0                	test   eax,eax
c001b12c:	74 29                	je     c001b157 <sysCallReadDir(regs*)+0x79>
c001b12e:	83 f8 07             	cmp    eax,0x7
c001b131:	74 1b                	je     c001b14e <sysCallReadDir(regs*)+0x70>
c001b133:	b8 02 00 00 00       	mov    eax,0x2
c001b138:	31 d2                	xor    edx,edx
c001b13a:	83 c4 18             	add    esp,0x18
c001b13d:	5b                   	pop    ebx
c001b13e:	c3                   	ret    
c001b13f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b144:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b149:	83 c4 18             	add    esp,0x18
c001b14c:	5b                   	pop    ebx
c001b14d:	c3                   	ret    
c001b14e:	b8 01 00 00 00       	mov    eax,0x1
c001b153:	31 d2                	xor    edx,edx
c001b155:	eb e3                	jmp    c001b13a <sysCallReadDir(regs*)+0x5c>
c001b157:	31 c0                	xor    eax,eax
c001b159:	31 d2                	xor    edx,edx
c001b15b:	eb dd                	jmp    c001b13a <sysCallReadDir(regs*)+0x5c>

c001b15d <sysCallIsATTY(regs*)>:
c001b15d:	83 ec 0c             	sub    esp,0xc
c001b160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b164:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b167:	83 f8 02             	cmp    eax,0x2
c001b16a:	76 07                	jbe    c001b173 <sysCallIsATTY(regs*)+0x16>
c001b16c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b171:	75 26                	jne    c001b199 <sysCallIsATTY(regs*)+0x3c>
c001b173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b178:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b17b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b181:	85 c0                	test   eax,eax
c001b183:	74 24                	je     c001b1a9 <sysCallIsATTY(regs*)+0x4c>
c001b185:	83 ec 0c             	sub    esp,0xc
c001b188:	8b 10                	mov    edx,DWORD PTR [eax]
c001b18a:	50                   	push   eax
c001b18b:	ff 12                	call   DWORD PTR [edx]
c001b18d:	31 d2                	xor    edx,edx
c001b18f:	0f b6 c0             	movzx  eax,al
c001b192:	83 c4 10             	add    esp,0x10
c001b195:	83 c4 0c             	add    esp,0xc
c001b198:	c3                   	ret    
c001b199:	83 ec 0c             	sub    esp,0xc
c001b19c:	50                   	push   eax
c001b19d:	e8 a9 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	85 c0                	test   eax,eax
c001b1a7:	75 dc                	jne    c001b185 <sysCallIsATTY(regs*)+0x28>
c001b1a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b3:	83 c4 0c             	add    esp,0xc
c001b1b6:	c3                   	ret    

c001b1b7 <sysCallSeek(regs*)>:
c001b1b7:	53                   	push   ebx
c001b1b8:	83 ec 08             	sub    esp,0x8
c001b1bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1c2:	8d 50 fd             	lea    edx,[eax-0x3]
c001b1c5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b1cb:	77 32                	ja     c001b1ff <sysCallSeek(regs*)+0x48>
c001b1cd:	83 ec 0c             	sub    esp,0xc
c001b1d0:	50                   	push   eax
c001b1d1:	e8 75 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b1d6:	83 c4 0c             	add    esp,0xc
c001b1d9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b1dc:	31 db                	xor    ebx,ebx
c001b1de:	53                   	push   ebx
c001b1df:	51                   	push   ecx
c001b1e0:	50                   	push   eax
c001b1e1:	e8 a6 79 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001b1e6:	83 c4 10             	add    esp,0x10
c001b1e9:	85 c0                	test   eax,eax
c001b1eb:	0f 95 c0             	setne  al
c001b1ee:	31 d2                	xor    edx,edx
c001b1f0:	0f b6 c0             	movzx  eax,al
c001b1f3:	f7 d8                	neg    eax
c001b1f5:	83 d2 00             	adc    edx,0x0
c001b1f8:	83 c4 08             	add    esp,0x8
c001b1fb:	f7 da                	neg    edx
c001b1fd:	5b                   	pop    ebx
c001b1fe:	c3                   	ret    
c001b1ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b204:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b209:	83 c4 08             	add    esp,0x8
c001b20c:	5b                   	pop    ebx
c001b20d:	c3                   	ret    

c001b20e <sysCallTell(regs*)>:
c001b20e:	53                   	push   ebx
c001b20f:	83 ec 08             	sub    esp,0x8
c001b212:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b216:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b219:	83 f8 02             	cmp    eax,0x2
c001b21c:	76 4d                	jbe    c001b26b <sysCallTell(regs*)+0x5d>
c001b21e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b223:	76 19                	jbe    c001b23e <sysCallTell(regs*)+0x30>
c001b225:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b228:	31 d2                	xor    edx,edx
c001b22a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b230:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b237:	31 c0                	xor    eax,eax
c001b239:	83 c4 08             	add    esp,0x8
c001b23c:	5b                   	pop    ebx
c001b23d:	c3                   	ret    
c001b23e:	83 ec 0c             	sub    esp,0xc
c001b241:	50                   	push   eax
c001b242:	e8 04 5e ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b247:	5a                   	pop    edx
c001b248:	59                   	pop    ecx
c001b249:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b24c:	50                   	push   eax
c001b24d:	e8 90 79 ff ff       	call   c0012be2 <File::tell(unsigned long long*)>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	85 c0                	test   eax,eax
c001b257:	0f 95 c0             	setne  al
c001b25a:	31 d2                	xor    edx,edx
c001b25c:	0f b6 c0             	movzx  eax,al
c001b25f:	f7 d8                	neg    eax
c001b261:	83 d2 00             	adc    edx,0x0
c001b264:	83 c4 08             	add    esp,0x8
c001b267:	f7 da                	neg    edx
c001b269:	5b                   	pop    ebx
c001b26a:	c3                   	ret    
c001b26b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b270:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b275:	83 c4 08             	add    esp,0x8
c001b278:	5b                   	pop    ebx
c001b279:	c3                   	ret    

c001b27a <sysCallSize(regs*)>:
c001b27a:	53                   	push   ebx
c001b27b:	83 ec 18             	sub    esp,0x18
c001b27e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b282:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b285:	83 f8 02             	cmp    eax,0x2
c001b288:	76 53                	jbe    c001b2dd <sysCallSize(regs*)+0x63>
c001b28a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b28f:	76 19                	jbe    c001b2aa <sysCallSize(regs*)+0x30>
c001b291:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b294:	31 d2                	xor    edx,edx
c001b296:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b29c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2a3:	31 c0                	xor    eax,eax
c001b2a5:	83 c4 18             	add    esp,0x18
c001b2a8:	5b                   	pop    ebx
c001b2a9:	c3                   	ret    
c001b2aa:	83 ec 0c             	sub    esp,0xc
c001b2ad:	50                   	push   eax
c001b2ae:	e8 98 5d ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b2b3:	83 c4 0c             	add    esp,0xc
c001b2b6:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b2ba:	52                   	push   edx
c001b2bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b2be:	50                   	push   eax
c001b2bf:	e8 b6 7a ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001b2c4:	83 c4 10             	add    esp,0x10
c001b2c7:	85 c0                	test   eax,eax
c001b2c9:	0f 95 c0             	setne  al
c001b2cc:	31 d2                	xor    edx,edx
c001b2ce:	0f b6 c0             	movzx  eax,al
c001b2d1:	f7 d8                	neg    eax
c001b2d3:	83 d2 00             	adc    edx,0x0
c001b2d6:	83 c4 18             	add    esp,0x18
c001b2d9:	f7 da                	neg    edx
c001b2db:	5b                   	pop    ebx
c001b2dc:	c3                   	ret    
c001b2dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2e7:	83 c4 18             	add    esp,0x18
c001b2ea:	5b                   	pop    ebx
c001b2eb:	c3                   	ret    

c001b2ec <sysCallSizeFromFilename(regs*)>:
c001b2ec:	57                   	push   edi
c001b2ed:	56                   	push   esi
c001b2ee:	53                   	push   ebx
c001b2ef:	83 ec 20             	sub    esp,0x20
c001b2f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2f6:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b2f9:	83 fb 02             	cmp    ebx,0x2
c001b2fc:	0f 86 88 00 00 00    	jbe    c001b38a <sysCallSizeFromFilename(regs*)+0x9e>
c001b302:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b308:	76 1b                	jbe    c001b325 <sysCallSizeFromFilename(regs*)+0x39>
c001b30a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b30d:	31 d2                	xor    edx,edx
c001b30f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b315:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b31c:	83 c4 20             	add    esp,0x20
c001b31f:	31 c0                	xor    eax,eax
c001b321:	5b                   	pop    ebx
c001b322:	5e                   	pop    esi
c001b323:	5f                   	pop    edi
c001b324:	c3                   	ret    
c001b325:	83 ec 0c             	sub    esp,0xc
c001b328:	68 14 01 00 00       	push   0x114
c001b32d:	e8 6a 42 ff ff       	call   c000f59c <malloc>
c001b332:	83 c4 0c             	add    esp,0xc
c001b335:	89 c7                	mov    edi,eax
c001b337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b33c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b33f:	53                   	push   ebx
c001b340:	57                   	push   edi
c001b341:	e8 24 77 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b346:	83 c4 0c             	add    esp,0xc
c001b349:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b34d:	50                   	push   eax
c001b34e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b351:	57                   	push   edi
c001b352:	e8 23 7a ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001b357:	83 c4 10             	add    esp,0x10
c001b35a:	85 ff                	test   edi,edi
c001b35c:	74 14                	je     c001b372 <sysCallSizeFromFilename(regs*)+0x86>
c001b35e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b362:	8b 17                	mov    edx,DWORD PTR [edi]
c001b364:	83 ec 0c             	sub    esp,0xc
c001b367:	57                   	push   edi
c001b368:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b372:	85 c0                	test   eax,eax
c001b374:	0f 95 c0             	setne  al
c001b377:	31 d2                	xor    edx,edx
c001b379:	0f b6 c0             	movzx  eax,al
c001b37c:	f7 d8                	neg    eax
c001b37e:	83 d2 00             	adc    edx,0x0
c001b381:	83 c4 20             	add    esp,0x20
c001b384:	f7 da                	neg    edx
c001b386:	5b                   	pop    ebx
c001b387:	5e                   	pop    esi
c001b388:	5f                   	pop    edi
c001b389:	c3                   	ret    
c001b38a:	83 c4 20             	add    esp,0x20
c001b38d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b392:	5b                   	pop    ebx
c001b393:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b398:	5e                   	pop    esi
c001b399:	5f                   	pop    edi
c001b39a:	c3                   	ret    

c001b39b <sysCallClose(regs*)>:
c001b39b:	53                   	push   ebx
c001b39c:	83 ec 08             	sub    esp,0x8
c001b39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3a6:	83 f8 02             	cmp    eax,0x2
c001b3a9:	76 41                	jbe    c001b3ec <sysCallClose(regs*)+0x51>
c001b3ab:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b3b1:	83 fa 01             	cmp    edx,0x1
c001b3b4:	76 2d                	jbe    c001b3e3 <sysCallClose(regs*)+0x48>
c001b3b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3bb:	77 2f                	ja     c001b3ec <sysCallClose(regs*)+0x51>
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	50                   	push   eax
c001b3c1:	e8 85 5c ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b3c6:	89 c3                	mov    ebx,eax
c001b3c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3cb:	e8 5c 77 ff ff       	call   c0012b2c <File::close()>
c001b3d0:	83 c4 10             	add    esp,0x10
c001b3d3:	85 db                	test   ebx,ebx
c001b3d5:	74 0c                	je     c001b3e3 <sysCallClose(regs*)+0x48>
c001b3d7:	83 ec 0c             	sub    esp,0xc
c001b3da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3dc:	53                   	push   ebx
c001b3dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3e0:	83 c4 10             	add    esp,0x10
c001b3e3:	31 c0                	xor    eax,eax
c001b3e5:	31 d2                	xor    edx,edx
c001b3e7:	83 c4 08             	add    esp,0x8
c001b3ea:	5b                   	pop    ebx
c001b3eb:	c3                   	ret    
c001b3ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3f6:	83 c4 08             	add    esp,0x8
c001b3f9:	5b                   	pop    ebx
c001b3fa:	c3                   	ret    

c001b3fb <sysCallOpenDir(regs*)>:
c001b3fb:	56                   	push   esi
c001b3fc:	53                   	push   ebx
c001b3fd:	53                   	push   ebx
c001b3fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b402:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b405:	85 f6                	test   esi,esi
c001b407:	74 59                	je     c001b462 <sysCallOpenDir(regs*)+0x67>
c001b409:	83 ec 0c             	sub    esp,0xc
c001b40c:	68 14 01 00 00       	push   0x114
c001b411:	e8 86 41 ff ff       	call   c000f59c <malloc>
c001b416:	83 c4 0c             	add    esp,0xc
c001b419:	89 c6                	mov    esi,eax
c001b41b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b420:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b423:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b426:	56                   	push   esi
c001b427:	e8 ea 7a ff ff       	call   c0012f16 <Directory::Directory(char const*, Process*)>
c001b42c:	83 c4 10             	add    esp,0x10
c001b42f:	85 f6                	test   esi,esi
c001b431:	74 2f                	je     c001b462 <sysCallOpenDir(regs*)+0x67>
c001b433:	83 ec 0c             	sub    esp,0xc
c001b436:	56                   	push   esi
c001b437:	e8 3e 7b ff ff       	call   c0012f7a <Directory::open()>
c001b43c:	83 c4 10             	add    esp,0x10
c001b43f:	85 c0                	test   eax,eax
c001b441:	75 1f                	jne    c001b462 <sysCallOpenDir(regs*)+0x67>
c001b443:	83 ec 0c             	sub    esp,0xc
c001b446:	56                   	push   esi
c001b447:	e8 0a 59 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001b44c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	89 02                	mov    DWORD PTR [edx],eax
c001b454:	c1 f8 1f             	sar    eax,0x1f
c001b457:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b45a:	31 c0                	xor    eax,eax
c001b45c:	59                   	pop    ecx
c001b45d:	31 d2                	xor    edx,edx
c001b45f:	5b                   	pop    ebx
c001b460:	5e                   	pop    esi
c001b461:	c3                   	ret    
c001b462:	59                   	pop    ecx
c001b463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b468:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b46d:	5b                   	pop    ebx
c001b46e:	5e                   	pop    esi
c001b46f:	c3                   	ret    

c001b470 <sysCallCloseDir(regs*)>:
c001b470:	53                   	push   ebx
c001b471:	83 ec 08             	sub    esp,0x8
c001b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b478:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b47b:	8d 50 fd             	lea    edx,[eax-0x3]
c001b47e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b484:	77 2f                	ja     c001b4b5 <sysCallCloseDir(regs*)+0x45>
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	50                   	push   eax
c001b48a:	e8 bc 5b ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b48f:	89 c3                	mov    ebx,eax
c001b491:	89 04 24             	mov    DWORD PTR [esp],eax
c001b494:	e8 3d 7b ff ff       	call   c0012fd6 <Directory::close()>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	85 db                	test   ebx,ebx
c001b49e:	74 0c                	je     c001b4ac <sysCallCloseDir(regs*)+0x3c>
c001b4a0:	83 ec 0c             	sub    esp,0xc
c001b4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4a5:	53                   	push   ebx
c001b4a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	31 c0                	xor    eax,eax
c001b4ae:	31 d2                	xor    edx,edx
c001b4b0:	83 c4 08             	add    esp,0x8
c001b4b3:	5b                   	pop    ebx
c001b4b4:	c3                   	ret    
c001b4b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4bf:	83 c4 08             	add    esp,0x8
c001b4c2:	5b                   	pop    ebx
c001b4c3:	c3                   	ret    

c001b4c4 <sysCallMakeDir(regs*)>:
c001b4c4:	56                   	push   esi
c001b4c5:	53                   	push   ebx
c001b4c6:	83 ec 10             	sub    esp,0x10
c001b4c9:	68 14 01 00 00       	push   0x114
c001b4ce:	e8 c9 40 ff ff       	call   c000f59c <malloc>
c001b4d3:	83 c4 0c             	add    esp,0xc
c001b4d6:	89 c3                	mov    ebx,eax
c001b4d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4dd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4e4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b4e7:	53                   	push   ebx
c001b4e8:	e8 29 7a ff ff       	call   c0012f16 <Directory::Directory(char const*, Process*)>
c001b4ed:	83 c4 10             	add    esp,0x10
c001b4f0:	85 db                	test   ebx,ebx
c001b4f2:	74 32                	je     c001b526 <sysCallMakeDir(regs*)+0x62>
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	53                   	push   ebx
c001b4f8:	e8 5d 7c ff ff       	call   c001315a <Directory::create()>
c001b4fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b500:	89 c6                	mov    esi,eax
c001b502:	e8 cf 7a ff ff       	call   c0012fd6 <Directory::close()>
c001b507:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	31 c0                	xor    eax,eax
c001b514:	59                   	pop    ecx
c001b515:	85 f6                	test   esi,esi
c001b517:	5b                   	pop    ebx
c001b518:	0f 95 c0             	setne  al
c001b51b:	5e                   	pop    esi
c001b51c:	31 d2                	xor    edx,edx
c001b51e:	f7 d8                	neg    eax
c001b520:	83 d2 00             	adc    edx,0x0
c001b523:	f7 da                	neg    edx
c001b525:	c3                   	ret    
c001b526:	59                   	pop    ecx
c001b527:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b52c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b531:	5b                   	pop    ebx
c001b532:	5e                   	pop    esi
c001b533:	c3                   	ret    

c001b534 <sysCallWait(regs*)>:
c001b534:	83 ec 10             	sub    esp,0x10
c001b537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b53b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b53e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b541:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b544:	e8 b1 24 00 00       	call   c001d9fa <waitTask(int, int*, int)>
c001b549:	83 c4 1c             	add    esp,0x1c
c001b54c:	99                   	cdq    
c001b54d:	c3                   	ret    

c001b54e <sysCallNotImpl(regs*)>:
c001b54e:	83 ec 18             	sub    esp,0x18
c001b551:	68 11 b5 02 c0       	push   0xc002b511
c001b556:	e8 10 e7 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001b55b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b560:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b565:	83 c4 1c             	add    esp,0x1c
c001b568:	c3                   	ret    

c001b569 <sysPanic(regs*)>:
c001b569:	83 ec 18             	sub    esp,0x18
c001b56c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b570:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b573:	e8 f3 e6 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001b578:	b8 01 00 00 00       	mov    eax,0x1
c001b57d:	31 d2                	xor    edx,edx
c001b57f:	83 c4 1c             	add    esp,0x1c
c001b582:	c3                   	ret    

c001b583 <sysCallRmdir(regs*)>:
c001b583:	56                   	push   esi
c001b584:	53                   	push   ebx
c001b585:	83 ec 20             	sub    esp,0x20
c001b588:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b58c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b58f:	68 14 01 00 00       	push   0x114
c001b594:	e8 03 40 ff ff       	call   c000f59c <malloc>
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	89 c3                	mov    ebx,eax
c001b59e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5a6:	56                   	push   esi
c001b5a7:	53                   	push   ebx
c001b5a8:	e8 bd 74 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b5ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5b0:	e8 91 76 ff ff       	call   c0012c46 <File::unlink()>
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	85 db                	test   ebx,ebx
c001b5ba:	74 14                	je     c001b5d0 <sysCallRmdir(regs*)+0x4d>
c001b5bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	53                   	push   ebx
c001b5c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5c9:	83 c4 10             	add    esp,0x10
c001b5cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5d0:	85 c0                	test   eax,eax
c001b5d2:	0f 95 c0             	setne  al
c001b5d5:	31 d2                	xor    edx,edx
c001b5d7:	0f b6 c0             	movzx  eax,al
c001b5da:	f7 d8                	neg    eax
c001b5dc:	83 d2 00             	adc    edx,0x0
c001b5df:	83 c4 14             	add    esp,0x14
c001b5e2:	f7 da                	neg    edx
c001b5e4:	5b                   	pop    ebx
c001b5e5:	5e                   	pop    esi
c001b5e6:	c3                   	ret    

c001b5e7 <sysCallUnlink(regs*)>:
c001b5e7:	56                   	push   esi
c001b5e8:	53                   	push   ebx
c001b5e9:	83 ec 20             	sub    esp,0x20
c001b5ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5f0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5f3:	68 14 01 00 00       	push   0x114
c001b5f8:	e8 9f 3f ff ff       	call   c000f59c <malloc>
c001b5fd:	83 c4 0c             	add    esp,0xc
c001b600:	89 c3                	mov    ebx,eax
c001b602:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b607:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b60a:	56                   	push   esi
c001b60b:	53                   	push   ebx
c001b60c:	e8 59 74 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b611:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b614:	e8 2d 76 ff ff       	call   c0012c46 <File::unlink()>
c001b619:	83 c4 10             	add    esp,0x10
c001b61c:	85 db                	test   ebx,ebx
c001b61e:	74 14                	je     c001b634 <sysCallUnlink(regs*)+0x4d>
c001b620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b624:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b626:	83 ec 0c             	sub    esp,0xc
c001b629:	53                   	push   ebx
c001b62a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b62d:	83 c4 10             	add    esp,0x10
c001b630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b634:	85 c0                	test   eax,eax
c001b636:	0f 95 c0             	setne  al
c001b639:	31 d2                	xor    edx,edx
c001b63b:	0f b6 c0             	movzx  eax,al
c001b63e:	f7 d8                	neg    eax
c001b640:	83 d2 00             	adc    edx,0x0
c001b643:	83 c4 14             	add    esp,0x14
c001b646:	f7 da                	neg    edx
c001b648:	5b                   	pop    ebx
c001b649:	5e                   	pop    esi
c001b64a:	c3                   	ret    

c001b64b <sysCallGetArgv(regs*)>:
c001b64b:	83 ec 0c             	sub    esp,0xc
c001b64e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b652:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b655:	85 c0                	test   eax,eax
c001b657:	78 2b                	js     c001b684 <sysCallGetArgv(regs*)+0x39>
c001b659:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b65f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b662:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b668:	7d 1a                	jge    c001b684 <sysCallGetArgv(regs*)+0x39>
c001b66a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b671:	85 c0                	test   eax,eax
c001b673:	74 17                	je     c001b68c <sysCallGetArgv(regs*)+0x41>
c001b675:	83 ec 08             	sub    esp,0x8
c001b678:	50                   	push   eax
c001b679:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b67c:	e8 8b 51 fe ff       	call   c000080c <strcpy>
c001b681:	83 c4 10             	add    esp,0x10
c001b684:	31 c0                	xor    eax,eax
c001b686:	31 d2                	xor    edx,edx
c001b688:	83 c4 0c             	add    esp,0xc
c001b68b:	c3                   	ret    
c001b68c:	b8 01 00 00 00       	mov    eax,0x1
c001b691:	31 d2                	xor    edx,edx
c001b693:	83 c4 0c             	add    esp,0xc
c001b696:	c3                   	ret    

c001b697 <sysCallTTYName(regs*)>:
c001b697:	56                   	push   esi
c001b698:	53                   	push   ebx
c001b699:	53                   	push   ebx
c001b69a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b69e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b6a1:	85 c0                	test   eax,eax
c001b6a3:	74 5f                	je     c001b704 <sysCallTTYName(regs*)+0x6d>
c001b6a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6a8:	83 f8 02             	cmp    eax,0x2
c001b6ab:	77 3e                	ja     c001b6eb <sysCallTTYName(regs*)+0x54>
c001b6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6b5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b6bb:	85 db                	test   ebx,ebx
c001b6bd:	74 45                	je     c001b704 <sysCallTTYName(regs*)+0x6d>
c001b6bf:	83 ec 0c             	sub    esp,0xc
c001b6c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6c4:	53                   	push   ebx
c001b6c5:	ff 10                	call   DWORD PTR [eax]
c001b6c7:	83 c4 10             	add    esp,0x10
c001b6ca:	84 c0                	test   al,al
c001b6cc:	74 41                	je     c001b70f <sysCallTTYName(regs*)+0x78>
c001b6ce:	83 ec 08             	sub    esp,0x8
c001b6d1:	81 c3 82 00 00 00    	add    ebx,0x82
c001b6d7:	53                   	push   ebx
c001b6d8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6db:	e8 2c 51 fe ff       	call   c000080c <strcpy>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	31 c0                	xor    eax,eax
c001b6e5:	59                   	pop    ecx
c001b6e6:	31 d2                	xor    edx,edx
c001b6e8:	5b                   	pop    ebx
c001b6e9:	5e                   	pop    esi
c001b6ea:	c3                   	ret    
c001b6eb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b6f0:	74 bb                	je     c001b6ad <sysCallTTYName(regs*)+0x16>
c001b6f2:	83 ec 0c             	sub    esp,0xc
c001b6f5:	50                   	push   eax
c001b6f6:	e8 50 59 ff ff       	call   c001104b <getFromFileDescriptor(int)>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	89 c3                	mov    ebx,eax
c001b700:	85 db                	test   ebx,ebx
c001b702:	75 bb                	jne    c001b6bf <sysCallTTYName(regs*)+0x28>
c001b704:	59                   	pop    ecx
c001b705:	b8 01 00 00 00       	mov    eax,0x1
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	5b                   	pop    ebx
c001b70d:	5e                   	pop    esi
c001b70e:	c3                   	ret    
c001b70f:	59                   	pop    ecx
c001b710:	b8 02 00 00 00       	mov    eax,0x2
c001b715:	31 d2                	xor    edx,edx
c001b717:	5b                   	pop    ebx
c001b718:	5e                   	pop    esi
c001b719:	c3                   	ret    

c001b71a <sysCallUSleep(regs*)>:
c001b71a:	83 ec 14             	sub    esp,0x14
c001b71d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b726:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b72d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b730:	01 ca                	add    edx,ecx
c001b732:	52                   	push   edx
c001b733:	50                   	push   eax
c001b734:	e8 98 23 00 00       	call   c001dad1 <nanoSleep(unsigned long long)>
c001b739:	31 c0                	xor    eax,eax
c001b73b:	31 d2                	xor    edx,edx
c001b73d:	83 c4 1c             	add    esp,0x1c
c001b740:	c3                   	ret    

c001b741 <sysCallSpawn(regs*)>:
c001b741:	56                   	push   esi
c001b742:	53                   	push   ebx
c001b743:	50                   	push   eax
c001b744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b748:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b74b:	85 c0                	test   eax,eax
c001b74d:	75 08                	jne    c001b757 <sysCallSpawn(regs*)+0x16>
c001b74f:	59                   	pop    ecx
c001b750:	31 c0                	xor    eax,eax
c001b752:	31 d2                	xor    edx,edx
c001b754:	5b                   	pop    ebx
c001b755:	5e                   	pop    esi
c001b756:	c3                   	ret    
c001b757:	83 ec 0c             	sub    esp,0xc
c001b75a:	68 3f 07 00 00       	push   0x73f
c001b75f:	e8 38 3e ff ff       	call   c000f59c <malloc>
c001b764:	83 c4 10             	add    esp,0x10
c001b767:	89 c6                	mov    esi,eax
c001b769:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b76c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b76f:	85 c0                	test   eax,eax
c001b771:	75 32                	jne    c001b7a5 <sysCallSpawn(regs*)+0x64>
c001b773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b778:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b77b:	52                   	push   edx
c001b77c:	50                   	push   eax
c001b77d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b780:	56                   	push   esi
c001b781:	e8 70 1a 00 00       	call   c001d1f6 <Process::Process(char const*, Process*, char**)>
c001b786:	83 c4 10             	add    esp,0x10
c001b789:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b790:	75 bd                	jne    c001b74f <sysCallSpawn(regs*)+0xe>
c001b792:	83 ec 0c             	sub    esp,0xc
c001b795:	56                   	push   esi
c001b796:	e8 3d 1f 00 00       	call   c001d6d8 <Process::createUserThread()>
c001b79b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	99                   	cdq    
c001b7a1:	59                   	pop    ecx
c001b7a2:	5b                   	pop    ebx
c001b7a3:	5e                   	pop    esi
c001b7a4:	c3                   	ret    
c001b7a5:	31 c0                	xor    eax,eax
c001b7a7:	eb d2                	jmp    c001b77b <sysCallSpawn(regs*)+0x3a>

c001b7a9 <sysCallGetEnv(regs*)>:
c001b7a9:	57                   	push   edi
c001b7aa:	56                   	push   esi
c001b7ab:	53                   	push   ebx
c001b7ac:	83 ec 1c             	sub    esp,0x1c
c001b7af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b7bb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7c1:	e8 f1 e3 ff ff       	call   c0019bb7 <Krnl::getProcessTotalEnvCount(Process*)>
c001b7c6:	83 c4 10             	add    esp,0x10
c001b7c9:	39 c7                	cmp    edi,eax
c001b7cb:	7c 14                	jl     c001b7e1 <sysCallGetEnv(regs*)+0x38>
c001b7cd:	85 f6                	test   esi,esi
c001b7cf:	75 0b                	jne    c001b7dc <sysCallGetEnv(regs*)+0x33>
c001b7d1:	83 c4 10             	add    esp,0x10
c001b7d4:	31 c0                	xor    eax,eax
c001b7d6:	5b                   	pop    ebx
c001b7d7:	31 d2                	xor    edx,edx
c001b7d9:	5e                   	pop    esi
c001b7da:	5f                   	pop    edi
c001b7db:	c3                   	ret    
c001b7dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b7df:	eb f0                	jmp    c001b7d1 <sysCallGetEnv(regs*)+0x28>
c001b7e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7e5:	52                   	push   edx
c001b7e6:	57                   	push   edi
c001b7e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b7ed:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b7f0:	50                   	push   eax
c001b7f1:	e8 e1 e3 ff ff       	call   c0019bd7 <Krnl::getProcessEnvPair(Process*, int)>
c001b7f6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b7f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b801:	83 c4 0c             	add    esp,0xc
c001b804:	85 c9                	test   ecx,ecx
c001b806:	75 23                	jne    c001b82b <sysCallGetEnv(regs*)+0x82>
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	50                   	push   eax
c001b80c:	e8 5b 4f fe ff       	call   c000076c <strlen>
c001b811:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b814:	89 c3                	mov    ebx,eax
c001b816:	e8 51 4f fe ff       	call   c000076c <strlen>
c001b81b:	83 c4 10             	add    esp,0x10
c001b81e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b822:	83 c4 10             	add    esp,0x10
c001b825:	31 d2                	xor    edx,edx
c001b827:	5b                   	pop    ebx
c001b828:	5e                   	pop    esi
c001b829:	5f                   	pop    edi
c001b82a:	c3                   	ret    
c001b82b:	83 ec 08             	sub    esp,0x8
c001b82e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b831:	50                   	push   eax
c001b832:	56                   	push   esi
c001b833:	e8 d4 4f fe ff       	call   c000080c <strcpy>
c001b838:	58                   	pop    eax
c001b839:	5a                   	pop    edx
c001b83a:	68 2b b5 02 c0       	push   0xc002b52b
c001b83f:	56                   	push   esi
c001b840:	e8 07 51 fe ff       	call   c000094c <strcat>
c001b845:	59                   	pop    ecx
c001b846:	5b                   	pop    ebx
c001b847:	57                   	push   edi
c001b848:	56                   	push   esi
c001b849:	e8 fe 50 fe ff       	call   c000094c <strcat>
c001b84e:	83 c4 10             	add    esp,0x10
c001b851:	e9 7b ff ff ff       	jmp    c001b7d1 <sysCallGetEnv(regs*)+0x28>

c001b856 <sysAppSettings(regs*)>:
c001b856:	57                   	push   edi
c001b857:	56                   	push   esi
c001b858:	56                   	push   esi
c001b859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b860:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b866:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b86b:	66 3d c0 09          	cmp    ax,0x9c0
c001b86f:	75 2e                	jne    c001b89f <sysAppSettings(regs*)+0x49>
c001b871:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b877:	83 e0 1f             	and    eax,0x1f
c001b87a:	3c 01                	cmp    al,0x1
c001b87c:	74 2c                	je     c001b8aa <sysAppSettings(regs*)+0x54>
c001b87e:	3c 07                	cmp    al,0x7
c001b880:	0f 84 b3 00 00 00    	je     c001b939 <sysAppSettings(regs*)+0xe3>
c001b886:	84 c0                	test   al,al
c001b888:	0f 84 d2 00 00 00    	je     c001b960 <sysAppSettings(regs*)+0x10a>
c001b88e:	3c 08                	cmp    al,0x8
c001b890:	74 63                	je     c001b8f5 <sysAppSettings(regs*)+0x9f>
c001b892:	59                   	pop    ecx
c001b893:	0f b6 c0             	movzx  eax,al
c001b896:	5e                   	pop    esi
c001b897:	05 e8 03 00 00       	add    eax,0x3e8
c001b89c:	5f                   	pop    edi
c001b89d:	99                   	cdq    
c001b89e:	c3                   	ret    
c001b89f:	b8 01 00 00 00       	mov    eax,0x1
c001b8a4:	59                   	pop    ecx
c001b8a5:	31 d2                	xor    edx,edx
c001b8a7:	5e                   	pop    esi
c001b8a8:	5f                   	pop    edi
c001b8a9:	c3                   	ret    
c001b8aa:	50                   	push   eax
c001b8ab:	68 00 01 00 00       	push   0x100
c001b8b0:	6a 00                	push   0x0
c001b8b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8ba:	83 c0 0c             	add    eax,0xc
c001b8bd:	50                   	push   eax
c001b8be:	e8 8d 4e fe ff       	call   c0000750 <memset>
c001b8c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c8:	b9 ff 00 00 00       	mov    ecx,0xff
c001b8cd:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b8d0:	83 c7 0c             	add    edi,0xc
c001b8d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8da:	5a                   	pop    edx
c001b8db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8de:	59                   	pop    ecx
c001b8df:	8d 50 0c             	lea    edx,[eax+0xc]
c001b8e2:	52                   	push   edx
c001b8e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b8e9:	e8 88 48 ff ff       	call   c0010176 <VgaText::setTitle(char*)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	31 c0                	xor    eax,eax
c001b8f3:	eb af                	jmp    c001b8a4 <sysAppSettings(regs*)+0x4e>
c001b8f5:	83 ec 08             	sub    esp,0x8
c001b8f8:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b8fe:	83 e0 0f             	and    eax,0xf
c001b901:	50                   	push   eax
c001b902:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b907:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b90a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b910:	e8 51 48 ff ff       	call   c0010166 <VgaText::setTitleColour(VgaColour)>
c001b915:	5f                   	pop    edi
c001b916:	58                   	pop    eax
c001b917:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b91d:	c1 e8 04             	shr    eax,0x4
c001b920:	83 e0 0f             	and    eax,0xf
c001b923:	50                   	push   eax
c001b924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b929:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b932:	e8 1f 48 ff ff       	call   c0010156 <VgaText::setTitleTextColour(VgaColour)>
c001b937:	eb b5                	jmp    c001b8ee <sysAppSettings(regs*)+0x98>
c001b939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b93e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b941:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b947:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001b94d:	c0 e8 06             	shr    al,0x6
c001b950:	83 e0 01             	and    eax,0x1
c001b953:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001b959:	31 c0                	xor    eax,eax
c001b95b:	e9 44 ff ff ff       	jmp    c001b8a4 <sysAppSettings(regs*)+0x4e>
c001b960:	b8 02 00 00 00       	mov    eax,0x2
c001b965:	e9 3a ff ff ff       	jmp    c001b8a4 <sysAppSettings(regs*)+0x4e>

c001b96a <sysSetFatAttrib(regs*)>:
c001b96a:	57                   	push   edi
c001b96b:	56                   	push   esi
c001b96c:	53                   	push   ebx
c001b96d:	83 ec 1c             	sub    esp,0x1c
c001b970:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b974:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b977:	68 14 01 00 00       	push   0x114
c001b97c:	e8 1b 3c ff ff       	call   c000f59c <malloc>
c001b981:	83 c4 0c             	add    esp,0xc
c001b984:	89 c3                	mov    ebx,eax
c001b986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b98e:	57                   	push   edi
c001b98f:	53                   	push   ebx
c001b990:	e8 d5 70 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001b995:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b998:	83 c4 0c             	add    esp,0xc
c001b99b:	0f b6 d4             	movzx  edx,ah
c001b99e:	0f b6 c0             	movzx  eax,al
c001b9a1:	52                   	push   edx
c001b9a2:	50                   	push   eax
c001b9a3:	53                   	push   ebx
c001b9a4:	e8 37 73 ff ff       	call   c0012ce0 <File::chfatattr(unsigned char, unsigned char)>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	85 db                	test   ebx,ebx
c001b9ae:	74 14                	je     c001b9c4 <sysSetFatAttrib(regs*)+0x5a>
c001b9b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	53                   	push   ebx
c001b9ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9bd:	83 c4 10             	add    esp,0x10
c001b9c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c4:	85 c0                	test   eax,eax
c001b9c6:	0f 95 c0             	setne  al
c001b9c9:	31 d2                	xor    edx,edx
c001b9cb:	0f b6 c0             	movzx  eax,al
c001b9ce:	f7 d8                	neg    eax
c001b9d0:	83 d2 00             	adc    edx,0x0
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	f7 da                	neg    edx
c001b9d8:	5b                   	pop    ebx
c001b9d9:	5e                   	pop    esi
c001b9da:	5f                   	pop    edi
c001b9db:	c3                   	ret    

c001b9dc <sysPipe(regs*)>:
c001b9dc:	57                   	push   edi
c001b9dd:	56                   	push   esi
c001b9de:	53                   	push   ebx
c001b9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e3:	83 ec 0c             	sub    esp,0xc
c001b9e6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b9e9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b9ec:	6a 20                	push   0x20
c001b9ee:	e8 a9 3b ff ff       	call   c000f59c <malloc>
c001b9f3:	89 c3                	mov    ebx,eax
c001b9f5:	58                   	pop    eax
c001b9f6:	5a                   	pop    edx
c001b9f7:	68 00 50 00 00       	push   0x5000
c001b9fc:	53                   	push   ebx
c001b9fd:	e8 ec 44 ff ff       	call   c000feee <Pipe::Pipe(int)>
c001ba02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba05:	e8 4c 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001ba0a:	89 07                	mov    DWORD PTR [edi],eax
c001ba0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba0f:	e8 42 53 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001ba14:	83 c4 10             	add    esp,0x10
c001ba17:	89 06                	mov    DWORD PTR [esi],eax
c001ba19:	31 d2                	xor    edx,edx
c001ba1b:	5b                   	pop    ebx
c001ba1c:	31 c0                	xor    eax,eax
c001ba1e:	5e                   	pop    esi
c001ba1f:	5f                   	pop    edi
c001ba20:	c3                   	ret    

c001ba21 <sysGetUnixTime(regs*)>:
c001ba21:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001ba26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba30:	e9 27 7a ff ff       	jmp    c001345c <Clock::timeInSecondsLocal()>

c001ba35 <string_ends_with(char const*, char const*)>:
c001ba35:	57                   	push   edi
c001ba36:	56                   	push   esi
c001ba37:	53                   	push   ebx
c001ba38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba40:	83 ec 0c             	sub    esp,0xc
c001ba43:	53                   	push   ebx
c001ba44:	e8 23 4d fe ff       	call   c000076c <strlen>
c001ba49:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba4c:	89 c6                	mov    esi,eax
c001ba4e:	e8 19 4d fe ff       	call   c000076c <strlen>
c001ba53:	83 c4 10             	add    esp,0x10
c001ba56:	39 c6                	cmp    esi,eax
c001ba58:	7d 06                	jge    c001ba60 <string_ends_with(char const*, char const*)+0x2b>
c001ba5a:	5b                   	pop    ebx
c001ba5b:	31 c0                	xor    eax,eax
c001ba5d:	5e                   	pop    esi
c001ba5e:	5f                   	pop    edi
c001ba5f:	c3                   	ret    
c001ba60:	83 ec 08             	sub    esp,0x8
c001ba63:	29 c6                	sub    esi,eax
c001ba65:	57                   	push   edi
c001ba66:	01 f3                	add    ebx,esi
c001ba68:	53                   	push   ebx
c001ba69:	e8 2a 4e fe ff       	call   c0000898 <strcmp>
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	85 c0                	test   eax,eax
c001ba73:	5b                   	pop    ebx
c001ba74:	0f 94 c0             	sete   al
c001ba77:	5e                   	pop    esi
c001ba78:	0f b6 c0             	movzx  eax,al
c001ba7b:	5f                   	pop    edi
c001ba7c:	c3                   	ret    

c001ba7d <sysCallOpen(regs*)>:
c001ba7d:	56                   	push   esi
c001ba7e:	53                   	push   ebx
c001ba7f:	81 ec 04 01 00 00    	sub    esp,0x104
c001ba85:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001ba8c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001ba8f:	85 c9                	test   ecx,ecx
c001ba91:	0f 84 ad 01 00 00    	je     c001bc44 <sysCallOpen(regs*)+0x1c7>
c001ba97:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001ba9a:	85 c0                	test   eax,eax
c001ba9c:	0f 84 a2 01 00 00    	je     c001bc44 <sysCallOpen(regs*)+0x1c7>
c001baa2:	52                   	push   edx
c001baa3:	68 2d b5 02 c0       	push   0xc002b52d
c001baa8:	50                   	push   eax
c001baa9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001baad:	56                   	push   esi
c001baae:	e8 0d 6e ff ff       	call   c00128c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bab3:	89 34 24             	mov    DWORD PTR [esp],esi
c001bab6:	e8 b1 4c fe ff       	call   c000076c <strlen>
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	48                   	dec    eax
c001babf:	74 1d                	je     c001bade <sysCallOpen(regs*)+0x61>
c001bac1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bac4:	eb 0f                	jmp    c001bad5 <sysCallOpen(regs*)+0x58>
c001bac6:	80 fa 3a             	cmp    dl,0x3a
c001bac9:	74 0f                	je     c001bada <sysCallOpen(regs*)+0x5d>
c001bacb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bacf:	48                   	dec    eax
c001bad0:	74 0c                	je     c001bade <sysCallOpen(regs*)+0x61>
c001bad2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bad5:	80 fa 2e             	cmp    dl,0x2e
c001bad8:	75 ec                	jne    c001bac6 <sysCallOpen(regs*)+0x49>
c001bada:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bade:	83 ec 08             	sub    esp,0x8
c001bae1:	68 31 b5 02 c0       	push   0xc002b531
c001bae6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bae9:	e8 47 ff ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	85 c0                	test   eax,eax
c001baf3:	74 1d                	je     c001bb12 <sysCallOpen(regs*)+0x95>
c001baf5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baf8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bafe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb05:	81 c4 04 01 00 00    	add    esp,0x104
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	31 d2                	xor    edx,edx
c001bb0f:	5b                   	pop    ebx
c001bb10:	5e                   	pop    esi
c001bb11:	c3                   	ret    
c001bb12:	83 ec 08             	sub    esp,0x8
c001bb15:	68 36 b5 02 c0       	push   0xc002b536
c001bb1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb1d:	e8 13 ff ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	85 c0                	test   eax,eax
c001bb27:	75 cc                	jne    c001baf5 <sysCallOpen(regs*)+0x78>
c001bb29:	83 ec 08             	sub    esp,0x8
c001bb2c:	68 32 b5 02 c0       	push   0xc002b532
c001bb31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb34:	e8 5f 4d fe ff       	call   c0000898 <strcmp>
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	85 c0                	test   eax,eax
c001bb3e:	74 b5                	je     c001baf5 <sysCallOpen(regs*)+0x78>
c001bb40:	83 ec 08             	sub    esp,0x8
c001bb43:	68 31 b5 02 c0       	push   0xc002b531
c001bb48:	56                   	push   esi
c001bb49:	e8 e7 fe ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	85 c0                	test   eax,eax
c001bb53:	75 a0                	jne    c001baf5 <sysCallOpen(regs*)+0x78>
c001bb55:	83 ec 08             	sub    esp,0x8
c001bb58:	68 3b b5 02 c0       	push   0xc002b53b
c001bb5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb60:	e8 d0 fe ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001bb65:	83 c4 10             	add    esp,0x10
c001bb68:	85 c0                	test   eax,eax
c001bb6a:	0f 85 e7 00 00 00    	jne    c001bc57 <sysCallOpen(regs*)+0x1da>
c001bb70:	83 ec 08             	sub    esp,0x8
c001bb73:	68 40 b5 02 c0       	push   0xc002b540
c001bb78:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb7b:	e8 b5 fe ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	85 c0                	test   eax,eax
c001bb85:	0f 85 cc 00 00 00    	jne    c001bc57 <sysCallOpen(regs*)+0x1da>
c001bb8b:	83 ec 08             	sub    esp,0x8
c001bb8e:	68 3c b5 02 c0       	push   0xc002b53c
c001bb93:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb96:	e8 fd 4c fe ff       	call   c0000898 <strcmp>
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	85 c0                	test   eax,eax
c001bba0:	0f 84 b1 00 00 00    	je     c001bc57 <sysCallOpen(regs*)+0x1da>
c001bba6:	83 ec 08             	sub    esp,0x8
c001bba9:	68 3b b5 02 c0       	push   0xc002b53b
c001bbae:	56                   	push   esi
c001bbaf:	e8 81 fe ff ff       	call   c001ba35 <string_ends_with(char const*, char const*)>
c001bbb4:	83 c4 10             	add    esp,0x10
c001bbb7:	85 c0                	test   eax,eax
c001bbb9:	0f 85 98 00 00 00    	jne    c001bc57 <sysCallOpen(regs*)+0x1da>
c001bbbf:	83 ec 0c             	sub    esp,0xc
c001bbc2:	68 14 01 00 00       	push   0x114
c001bbc7:	e8 d0 39 ff ff       	call   c000f59c <malloc>
c001bbcc:	83 c4 0c             	add    esp,0xc
c001bbcf:	89 c6                	mov    esi,eax
c001bbd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbd9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbdc:	56                   	push   esi
c001bbdd:	e8 88 6e ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	85 f6                	test   esi,esi
c001bbe7:	74 5b                	je     c001bc44 <sysCallOpen(regs*)+0x1c7>
c001bbe9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bbec:	0f b6 c2             	movzx  eax,dl
c001bbef:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bbf2:	89 d0                	mov    eax,edx
c001bbf4:	83 e0 01             	and    eax,0x1
c001bbf7:	f6 c2 02             	test   dl,0x2
c001bbfa:	74 03                	je     c001bbff <sysCallOpen(regs*)+0x182>
c001bbfc:	83 c8 02             	or     eax,0x2
c001bbff:	f6 c2 04             	test   dl,0x4
c001bc02:	74 03                	je     c001bc07 <sysCallOpen(regs*)+0x18a>
c001bc04:	83 c8 04             	or     eax,0x4
c001bc07:	f6 c2 08             	test   dl,0x8
c001bc0a:	74 03                	je     c001bc0f <sysCallOpen(regs*)+0x192>
c001bc0c:	83 c8 0a             	or     eax,0xa
c001bc0f:	83 e2 10             	and    edx,0x10
c001bc12:	74 03                	je     c001bc17 <sysCallOpen(regs*)+0x19a>
c001bc14:	83 c8 12             	or     eax,0x12
c001bc17:	83 ec 08             	sub    esp,0x8
c001bc1a:	50                   	push   eax
c001bc1b:	56                   	push   esi
c001bc1c:	e8 ad 6e ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	85 c0                	test   eax,eax
c001bc26:	75 1c                	jne    c001bc44 <sysCallOpen(regs*)+0x1c7>
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	56                   	push   esi
c001bc2c:	e8 25 51 ff ff       	call   c0010d56 <UnixFile::getFileDescriptor()>
c001bc31:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	89 02                	mov    DWORD PTR [edx],eax
c001bc39:	c1 f8 1f             	sar    eax,0x1f
c001bc3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc3f:	e9 c1 fe ff ff       	jmp    c001bb05 <sysCallOpen(regs*)+0x88>
c001bc44:	81 c4 04 01 00 00    	add    esp,0x104
c001bc4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc54:	5b                   	pop    ebx
c001bc55:	5e                   	pop    esi
c001bc56:	c3                   	ret    
c001bc57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc5a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bc60:	e9 99 fe ff ff       	jmp    c001bafe <sysCallOpen(regs*)+0x81>

c001bc65 <Sys::loadSyscalls()>:
c001bc65:	c7 05 00 01 03 c0 d2 ae 01 c0 	mov    DWORD PTR ds:0xc0030100,0xc001aed2
c001bc6f:	c7 05 04 01 03 c0 ca aa 01 c0 	mov    DWORD PTR ds:0xc0030104,0xc001aaca
c001bc79:	c7 05 08 01 03 c0 b8 ac 01 c0 	mov    DWORD PTR ds:0xc0030108,0xc001acb8
c001bc83:	c7 05 0c 01 03 c0 08 ae 01 c0 	mov    DWORD PTR ds:0xc003010c,0xc001ae08
c001bc8d:	c7 05 10 01 03 c0 50 ac 01 c0 	mov    DWORD PTR ds:0xc0030110,0xc001ac50
c001bc97:	c7 05 14 01 03 c0 01 ab 01 c0 	mov    DWORD PTR ds:0xc0030114,0xc001ab01
c001bca1:	c7 05 18 01 03 c0 e2 aa 01 c0 	mov    DWORD PTR ds:0xc0030118,0xc001aae2
c001bcab:	c7 05 1c 01 03 c0 0d ad 01 c0 	mov    DWORD PTR ds:0xc003011c,0xc001ad0d
c001bcb5:	c7 05 24 01 03 c0 9b b3 01 c0 	mov    DWORD PTR ds:0xc0030124,0xc001b39b
c001bcbf:	c7 05 20 01 03 c0 7d ba 01 c0 	mov    DWORD PTR ds:0xc0030120,0xc001ba7d
c001bcc9:	c7 05 28 01 03 c0 fb b3 01 c0 	mov    DWORD PTR ds:0xc0030128,0xc001b3fb
c001bcd3:	c7 05 2c 01 03 c0 de b0 01 c0 	mov    DWORD PTR ds:0xc003012c,0xc001b0de
c001bcdd:	c7 05 30 01 03 c0 18 af 01 c0 	mov    DWORD PTR ds:0xc0030130,0xc001af18
c001bce7:	c7 05 34 01 03 c0 1d af 01 c0 	mov    DWORD PTR ds:0xc0030134,0xc001af1d
c001bcf1:	c7 05 38 01 03 c0 c4 b4 01 c0 	mov    DWORD PTR ds:0xc0030138,0xc001b4c4
c001bcfb:	c7 05 3c 01 03 c0 70 b4 01 c0 	mov    DWORD PTR ds:0xc003013c,0xc001b470
c001bd05:	c7 05 40 01 03 c0 b7 b1 01 c0 	mov    DWORD PTR ds:0xc0030140,0xc001b1b7
c001bd0f:	c7 05 44 01 03 c0 0e b2 01 c0 	mov    DWORD PTR ds:0xc0030144,0xc001b20e
c001bd19:	c7 05 48 01 03 c0 7a b2 01 c0 	mov    DWORD PTR ds:0xc0030148,0xc001b27a
c001bd23:	c7 05 4c 01 03 c0 22 af 01 c0 	mov    DWORD PTR ds:0xc003014c,0xc001af22
c001bd2d:	c7 05 50 01 03 c0 34 b5 01 c0 	mov    DWORD PTR ds:0xc0030150,0xc001b534
c001bd37:	c7 05 54 01 03 c0 4e b5 01 c0 	mov    DWORD PTR ds:0xc0030154,0xc001b54e
c001bd41:	c7 05 58 01 03 c0 4e b5 01 c0 	mov    DWORD PTR ds:0xc0030158,0xc001b54e
c001bd4b:	c7 05 5c 01 03 c0 83 b5 01 c0 	mov    DWORD PTR ds:0xc003015c,0xc001b583
c001bd55:	c7 05 60 01 03 c0 e7 b5 01 c0 	mov    DWORD PTR ds:0xc0030160,0xc001b5e7
c001bd5f:	c7 05 64 01 03 c0 2c af 01 c0 	mov    DWORD PTR ds:0xc0030164,0xc001af2c
c001bd69:	c7 05 68 01 03 c0 4b b6 01 c0 	mov    DWORD PTR ds:0xc0030168,0xc001b64b
c001bd73:	c7 05 6c 01 03 c0 9b b0 01 c0 	mov    DWORD PTR ds:0xc003016c,0xc001b09b
c001bd7d:	c7 05 70 01 03 c0 97 b6 01 c0 	mov    DWORD PTR ds:0xc0030170,0xc001b697
c001bd87:	c7 05 74 01 03 c0 5d b1 01 c0 	mov    DWORD PTR ds:0xc0030174,0xc001b15d
c001bd91:	c7 05 78 01 03 c0 1a b7 01 c0 	mov    DWORD PTR ds:0xc0030178,0xc001b71a
c001bd9b:	c7 05 7c 01 03 c0 ec b2 01 c0 	mov    DWORD PTR ds:0xc003017c,0xc001b2ec
c001bda5:	c7 05 80 01 03 c0 41 b7 01 c0 	mov    DWORD PTR ds:0xc0030180,0xc001b741
c001bdaf:	c7 05 84 01 03 c0 a9 b7 01 c0 	mov    DWORD PTR ds:0xc0030184,0xc001b7a9
c001bdb9:	c7 05 88 01 03 c0 56 b8 01 c0 	mov    DWORD PTR ds:0xc0030188,0xc001b856
c001bdc3:	c7 05 8c 01 03 c0 3c af 01 c0 	mov    DWORD PTR ds:0xc003018c,0xc001af3c
c001bdcd:	c7 05 90 01 03 c0 a6 af 01 c0 	mov    DWORD PTR ds:0xc0030190,0xc001afa6
c001bdd7:	c7 05 94 01 03 c0 ec af 01 c0 	mov    DWORD PTR ds:0xc0030194,0xc001afec
c001bde1:	c7 05 98 01 03 c0 6a b9 01 c0 	mov    DWORD PTR ds:0xc0030198,0xc001b96a
c001bdeb:	c7 05 9c 01 03 c0 69 b5 01 c0 	mov    DWORD PTR ds:0xc003019c,0xc001b569
c001bdf5:	c7 05 a0 01 03 c0 3d b0 01 c0 	mov    DWORD PTR ds:0xc00301a0,0xc001b03d
c001bdff:	c7 05 a4 01 03 c0 dc b9 01 c0 	mov    DWORD PTR ds:0xc00301a4,0xc001b9dc
c001be09:	c7 05 a8 01 03 c0 21 ba 01 c0 	mov    DWORD PTR ds:0xc00301a8,0xc001ba21
c001be13:	c7 05 ac 01 03 c0 a8 ab 01 c0 	mov    DWORD PTR ds:0xc00301ac,0xc001aba8
c001be1d:	c7 05 b0 01 03 c0 29 ad 01 c0 	mov    DWORD PTR ds:0xc00301b0,0xc001ad29
c001be27:	c7 05 b4 01 03 c0 be ad 01 c0 	mov    DWORD PTR ds:0xc00301b4,0xc001adbe
c001be31:	c7 05 b8 01 03 c0 94 aa 01 c0 	mov    DWORD PTR ds:0xc00301b8,0xc001aa94
c001be3b:	c7 05 bc 01 03 c0 70 ae 01 c0 	mov    DWORD PTR ds:0xc00301bc,0xc001ae70
c001be45:	c7 05 c0 01 03 c0 0d ab 01 c0 	mov    DWORD PTR ds:0xc00301c0,0xc001ab0d
c001be4f:	c7 05 c4 01 03 c0 24 ab 01 c0 	mov    DWORD PTR ds:0xc00301c4,0xc001ab24
c001be59:	c3                   	ret    

c001be5a <Sys::systemCall(regs*, void*)>:
c001be5a:	53                   	push   ebx
c001be5b:	83 ec 08             	sub    esp,0x8
c001be5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be62:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001be65:	83 f8 7f             	cmp    eax,0x7f
c001be68:	77 16                	ja     c001be80 <Sys::systemCall(regs*, void*)+0x26>
c001be6a:	8b 14 85 00 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff00]
c001be71:	85 d2                	test   edx,edx
c001be73:	74 0b                	je     c001be80 <Sys::systemCall(regs*, void*)+0x26>
c001be75:	83 ec 0c             	sub    esp,0xc
c001be78:	53                   	push   ebx
c001be79:	ff d2                	call   edx
c001be7b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001be7e:	eb 0d                	jmp    c001be8d <Sys::systemCall(regs*, void*)+0x33>
c001be80:	52                   	push   edx
c001be81:	52                   	push   edx
c001be82:	50                   	push   eax
c001be83:	68 45 b5 02 c0       	push   0xc002b545
c001be88:	e8 7e 66 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001be95:	31 d2                	xor    edx,edx
c001be97:	83 c4 08             	add    esp,0x8
c001be9a:	5b                   	pop    ebx
c001be9b:	c3                   	ret    

c001be9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001be9c:	55                   	push   ebp
c001be9d:	57                   	push   edi
c001be9e:	56                   	push   esi
c001be9f:	53                   	push   ebx
c001bea0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bea6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bead:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001beb4:	85 c0                	test   eax,eax
c001beb6:	0f 95 c1             	setne  cl
c001beb9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bec1:	0f 94 c2             	sete   dl
c001bec4:	84 d1                	test   cl,dl
c001bec6:	74 23                	je     c001beeb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bec8:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bece:	74 1b                	je     c001beeb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bed0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bed6:	89 da                	mov    edx,ebx
c001bed8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bede:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bee4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001beeb:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bef2:	05 ff 0f 00 00       	add    eax,0xfff
c001bef7:	83 ec 0c             	sub    esp,0xc
c001befa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001befe:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bf04:	c1 e8 0c             	shr    eax,0xc
c001bf07:	89 fe                	mov    esi,edi
c001bf09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf0d:	c1 ee 0c             	shr    esi,0xc
c001bf10:	6a 01                	push   0x1
c001bf12:	e8 8a 52 ff ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c001bf17:	89 c5                	mov    ebp,eax
c001bf19:	58                   	pop    eax
c001bf1a:	5a                   	pop    edx
c001bf1b:	56                   	push   esi
c001bf1c:	68 59 b5 02 c0       	push   0xc002b559
c001bf21:	e8 e5 65 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bf26:	59                   	pop    ecx
c001bf27:	58                   	pop    eax
c001bf28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf2c:	68 6b b5 02 c0       	push   0xc002b56b
c001bf31:	e8 d5 65 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bf36:	83 c4 10             	add    esp,0x10
c001bf39:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001bf3f:	0f 86 31 01 00 00    	jbe    c001c076 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001bf45:	c1 e6 0c             	shl    esi,0xc
c001bf48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf4b:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001bf4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf52:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001bf59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf5c:	01 df                	add    edi,ebx
c001bf5e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001bf61:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001bf65:	0f 84 08 01 00 00    	je     c001c073 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001bf6b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001bf71:	76 05                	jbe    c001bf78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001bf73:	bf 00 10 00 00       	mov    edi,0x1000
c001bf78:	83 ec 0c             	sub    esp,0xc
c001bf7b:	31 d2                	xor    edx,edx
c001bf7d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf84:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf86:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bf8a:	50                   	push   eax
c001bf8b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001bf8f:	56                   	push   esi
c001bf90:	52                   	push   edx
c001bf91:	57                   	push   edi
c001bf92:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001bf99:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf9c:	83 c4 20             	add    esp,0x20
c001bf9f:	85 c0                	test   eax,eax
c001bfa1:	74 0a                	je     c001bfad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001bfa3:	53                   	push   ebx
c001bfa4:	53                   	push   ebx
c001bfa5:	50                   	push   eax
c001bfa6:	68 7d b5 02 c0       	push   0xc002b57d
c001bfab:	eb 0f                	jmp    c001bfbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001bfad:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001bfb1:	74 20                	je     c001bfd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001bfb3:	51                   	push   ecx
c001bfb4:	51                   	push   ecx
c001bfb5:	6a 00                	push   0x0
c001bfb7:	68 a8 b5 02 c0       	push   0xc002b5a8
c001bfbc:	e8 4a 65 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001bfc1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfc4:	e8 1e 56 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001bfc9:	83 c4 10             	add    esp,0x10
c001bfcc:	31 c0                	xor    eax,eax
c001bfce:	e9 68 01 00 00       	jmp    c001c13b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001bfd3:	fa                   	cli    
c001bfd4:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001bfda:	e8 61 39 ff ff       	call   c000f940 <Phys::allocatePage()>
c001bfdf:	6a 07                	push   0x7
c001bfe1:	89 c7                	mov    edi,eax
c001bfe3:	55                   	push   ebp
c001bfe4:	50                   	push   eax
c001bfe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfed:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bff3:	e8 66 59 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001bff8:	83 c4 0c             	add    esp,0xc
c001bffb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c002:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c008:	6a 00                	push   0x0
c001c00a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c00f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c012:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c018:	e8 9b 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c01d:	58                   	pop    eax
c001c01e:	5a                   	pop    edx
c001c01f:	68 07 0c 00 00       	push   0xc07
c001c024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c028:	57                   	push   edi
c001c029:	89 ef                	mov    edi,ebp
c001c02b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c032:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c038:	6a 00                	push   0x0
c001c03a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c042:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c048:	e8 cd 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c04d:	b9 00 10 00 00       	mov    ecx,0x1000
c001c052:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c054:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001c059:	83 c4 20             	add    esp,0x20
c001c05c:	48                   	dec    eax
c001c05d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001c062:	85 c0                	test   eax,eax
c001c064:	75 01                	jne    c001c067 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c066:	fb                   	sti    
c001c067:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c06e:	e9 df fe ff ff       	jmp    c001bf52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c073:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c076:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c07e:	0f 86 a9 00 00 00    	jbe    c001c12d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c084:	fa                   	cli    
c001c085:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001c08b:	51                   	push   ecx
c001c08c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c093:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c099:	6a 00                	push   0x0
c001c09b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0a9:	e8 0a 57 ff ff       	call   c00117b8 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c0b2:	c1 e6 0c             	shl    esi,0xc
c001c0b5:	01 de                	add    esi,ebx
c001c0b7:	83 c4 10             	add    esp,0x10
c001c0ba:	39 de                	cmp    esi,ebx
c001c0bc:	74 61                	je     c001c11f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c0be:	e8 7d 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c0c3:	6a 07                	push   0x7
c001c0c5:	89 c7                	mov    edi,eax
c001c0c7:	55                   	push   ebp
c001c0c8:	50                   	push   eax
c001c0c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0d1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0d7:	e8 82 58 ff ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0dc:	58                   	pop    eax
c001c0dd:	5a                   	pop    edx
c001c0de:	68 07 0c 00 00       	push   0xc07
c001c0e3:	53                   	push   ebx
c001c0e4:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c0ea:	57                   	push   edi
c001c0eb:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c0f2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0f8:	6a 00                	push   0x0
c001c0fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c102:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c108:	e8 0d 5c ff ff       	call   c0011d1a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c10d:	83 c4 1c             	add    esp,0x1c
c001c110:	68 00 10 00 00       	push   0x1000
c001c115:	6a 00                	push   0x0
c001c117:	55                   	push   ebp
c001c118:	e8 33 46 fe ff       	call   c0000750 <memset>
c001c11d:	eb 98                	jmp    c001c0b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c11f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001c124:	48                   	dec    eax
c001c125:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001c12a:	75 01                	jne    c001c12d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c12c:	fb                   	sti    
c001c12d:	83 ec 0c             	sub    esp,0xc
c001c130:	55                   	push   ebp
c001c131:	e8 b1 54 ff ff       	call   c00115e7 <Virt::freeKernelVirtualPages(unsigned long)>
c001c136:	83 c4 10             	add    esp,0x10
c001c139:	b0 01                	mov    al,0x1
c001c13b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c141:	5b                   	pop    ebx
c001c142:	5e                   	pop    esi
c001c143:	5f                   	pop    edi
c001c144:	5d                   	pop    ebp
c001c145:	c3                   	ret    

c001c146 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c146:	55                   	push   ebp
c001c147:	57                   	push   edi
c001c148:	56                   	push   esi
c001c149:	53                   	push   ebx
c001c14a:	83 ec 48             	sub    esp,0x48
c001c14d:	68 14 01 00 00       	push   0x114
c001c152:	e8 45 34 ff ff       	call   c000f59c <malloc>
c001c157:	83 c4 0c             	add    esp,0xc
c001c15a:	89 c6                	mov    esi,eax
c001c15c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c160:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c164:	50                   	push   eax
c001c165:	e8 00 69 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c16a:	58                   	pop    eax
c001c16b:	5a                   	pop    edx
c001c16c:	6a 01                	push   0x1
c001c16e:	56                   	push   esi
c001c16f:	e8 5a 69 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c174:	83 c4 10             	add    esp,0x10
c001c177:	85 c0                	test   eax,eax
c001c179:	0f 85 47 01 00 00    	jne    c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c17f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	6a 34                	push   0x34
c001c18c:	e8 0b 34 ff ff       	call   c000f59c <malloc>
c001c191:	89 c3                	mov    ebx,eax
c001c193:	58                   	pop    eax
c001c194:	8b 06                	mov    eax,DWORD PTR [esi]
c001c196:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c19a:	57                   	push   edi
c001c19b:	53                   	push   ebx
c001c19c:	6a 00                	push   0x0
c001c19e:	6a 34                	push   0x34
c001c1a0:	56                   	push   esi
c001c1a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1a4:	83 c4 20             	add    esp,0x20
c001c1a7:	85 c0                	test   eax,eax
c001c1a9:	0f 85 17 01 00 00    	jne    c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1af:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1b5:	0f 85 0b 01 00 00    	jne    c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1be:	85 c0                	test   eax,eax
c001c1c0:	0f 84 00 01 00 00    	je     c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1c6:	31 d2                	xor    edx,edx
c001c1c8:	55                   	push   ebp
c001c1c9:	52                   	push   edx
c001c1ca:	50                   	push   eax
c001c1cb:	56                   	push   esi
c001c1cc:	e8 bb 69 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	85 c0                	test   eax,eax
c001c1d6:	0f 85 ea 00 00 00    	jne    c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c1e2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c1e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c1ea:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c1ee:	0f af c2             	imul   eax,edx
c001c1f1:	50                   	push   eax
c001c1f2:	e8 a5 33 ff ff       	call   c000f59c <malloc>
c001c1f7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c1fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c200:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c204:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c208:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c20c:	0f af c2             	imul   eax,edx
c001c20f:	99                   	cdq    
c001c210:	52                   	push   edx
c001c211:	50                   	push   eax
c001c212:	56                   	push   esi
c001c213:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c216:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c219:	83 c4 20             	add    esp,0x20
c001c21c:	85 c0                	test   eax,eax
c001c21e:	0f 84 a2 00 00 00    	je     c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c224:	31 d2                	xor    edx,edx
c001c226:	51                   	push   ecx
c001c227:	52                   	push   edx
c001c228:	50                   	push   eax
c001c229:	56                   	push   esi
c001c22a:	e8 5d 69 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c22f:	83 c4 10             	add    esp,0x10
c001c232:	85 c0                	test   eax,eax
c001c234:	0f 85 8c 00 00 00    	jne    c001c2c6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c23a:	83 ec 0c             	sub    esp,0xc
c001c23d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c241:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c245:	31 ed                	xor    ebp,ebp
c001c247:	0f af c2             	imul   eax,edx
c001c24a:	50                   	push   eax
c001c24b:	e8 4c 33 ff ff       	call   c000f59c <malloc>
c001c250:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c256:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c25d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c261:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c265:	0f af c2             	imul   eax,edx
c001c268:	99                   	cdq    
c001c269:	52                   	push   edx
c001c26a:	50                   	push   eax
c001c26b:	56                   	push   esi
c001c26c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c26f:	83 c4 20             	add    esp,0x20
c001c272:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c27a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c27e:	0f 86 80 00 00 00    	jbe    c001c304 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c284:	0f b7 fd             	movzx  edi,bp
c001c287:	c1 e7 05             	shl    edi,0x5
c001c28a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c28e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c291:	75 6b                	jne    c001c2fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c293:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c296:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c29a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c29d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2a1:	52                   	push   edx
c001c2a2:	31 d2                	xor    edx,edx
c001c2a4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c2a7:	52                   	push   edx
c001c2a8:	50                   	push   eax
c001c2a9:	56                   	push   esi
c001c2aa:	e8 dd 68 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	85 c0                	test   eax,eax
c001c2b4:	74 17                	je     c001c2cd <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	68 d4 b5 02 c0       	push   0xc002b5d4
c001c2be:	e8 48 62 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001c2c3:	83 c4 10             	add    esp,0x10
c001c2c6:	31 c0                	xor    eax,eax
c001c2c8:	e9 87 00 00 00       	jmp    c001c354 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2cd:	83 ec 0c             	sub    esp,0xc
c001c2d0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2d3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c2d6:	50                   	push   eax
c001c2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c2df:	56                   	push   esi
c001c2e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c2e4:	e8 b3 fb ff ff       	call   c001be9c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c2e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2ed:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c2f1:	83 c4 20             	add    esp,0x20
c001c2f4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c2f8:	73 04                	jae    c001c2fe <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2fe:	45                   	inc    ebp
c001c2ff:	e9 76 ff ff ff       	jmp    c001c27a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c304:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c308:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c30c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c310:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c31f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c324:	05 00 10 00 00       	add    eax,0x1000
c001c329:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c32c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c330:	e8 77 32 ff ff       	call   c000f5ac <free>
c001c335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c338:	e8 6f 32 ff ff       	call   c000f5ac <free>
c001c33d:	58                   	pop    eax
c001c33e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c342:	e8 65 32 ff ff       	call   c000f5ac <free>
c001c347:	89 34 24             	mov    DWORD PTR [esp],esi
c001c34a:	e8 dd 67 ff ff       	call   c0012b2c <File::close()>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	b0 01                	mov    al,0x1
c001c354:	83 c4 3c             	add    esp,0x3c
c001c357:	5b                   	pop    ebx
c001c358:	5e                   	pop    esi
c001c359:	5f                   	pop    edi
c001c35a:	5d                   	pop    ebp
c001c35b:	c3                   	ret    

c001c35c <Thr::runtimeReferenceHelper()>:
c001c35c:	83 ec 18             	sub    esp,0x18
c001c35f:	68 dc b5 02 c0       	push   0xc002b5dc
c001c364:	e8 a2 61 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001c369:	fa                   	cli    
c001c36a:	83 c4 10             	add    esp,0x10
c001c36d:	eb fe                	jmp    c001c36d <Thr::runtimeReferenceHelper()+0x11>

c001c36f <Thr::getAddressOfKernelSymbol(char const*)>:
c001c36f:	57                   	push   edi
c001c370:	56                   	push   esi
c001c371:	53                   	push   ebx
c001c372:	31 db                	xor    ebx,ebx
c001c374:	39 1d a0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030aa0,ebx
c001c37a:	7e 3c                	jle    c001c3b8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c37c:	8b 34 9d 20 0a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf5e0]
c001c383:	31 ff                	xor    edi,edi
c001c385:	39 3c 9d 20 09 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf6e0],edi
c001c38c:	7e 27                	jle    c001c3b5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c38e:	50                   	push   eax
c001c38f:	50                   	push   eax
c001c390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c394:	8b 06                	mov    eax,DWORD PTR [esi]
c001c396:	03 04 9d a0 09 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf660]
c001c39d:	50                   	push   eax
c001c39e:	e8 f5 44 fe ff       	call   c0000898 <strcmp>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	85 c0                	test   eax,eax
c001c3a8:	75 05                	jne    c001c3af <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c3aa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3ad:	eb 0b                	jmp    c001c3ba <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3af:	83 c6 10             	add    esi,0x10
c001c3b2:	47                   	inc    edi
c001c3b3:	eb d0                	jmp    c001c385 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3b5:	43                   	inc    ebx
c001c3b6:	eb bc                	jmp    c001c374 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3b8:	31 c0                	xor    eax,eax
c001c3ba:	5b                   	pop    ebx
c001c3bb:	5e                   	pop    esi
c001c3bc:	5f                   	pop    edi
c001c3bd:	c3                   	ret    

c001c3be <Thr::loadKernelSymbolTable(char const*)>:
c001c3be:	55                   	push   ebp
c001c3bf:	57                   	push   edi
c001c3c0:	56                   	push   esi
c001c3c1:	53                   	push   ebx
c001c3c2:	83 ec 68             	sub    esp,0x68
c001c3c5:	8b 35 f0 0a 03 c0    	mov    esi,DWORD PTR ds:0xc0030af0
c001c3cb:	68 14 01 00 00       	push   0x114
c001c3d0:	e8 c7 31 ff ff       	call   c000f59c <malloc>
c001c3d5:	83 c4 0c             	add    esp,0xc
c001c3d8:	89 c3                	mov    ebx,eax
c001c3da:	56                   	push   esi
c001c3db:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c3df:	50                   	push   eax
c001c3e0:	e8 85 66 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c3e5:	5e                   	pop    esi
c001c3e6:	5f                   	pop    edi
c001c3e7:	6a 01                	push   0x1
c001c3e9:	53                   	push   ebx
c001c3ea:	e8 df 66 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	85 c0                	test   eax,eax
c001c3f4:	74 0a                	je     c001c400 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	68 fe b5 02 c0       	push   0xc002b5fe
c001c3fe:	eb 34                	jmp    c001c434 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c400:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	6a 34                	push   0x34
c001c40d:	e8 8a 31 ff ff       	call   c000f59c <malloc>
c001c412:	59                   	pop    ecx
c001c413:	89 c7                	mov    edi,eax
c001c415:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c419:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c41b:	56                   	push   esi
c001c41c:	57                   	push   edi
c001c41d:	6a 00                	push   0x0
c001c41f:	6a 34                	push   0x34
c001c421:	53                   	push   ebx
c001c422:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c425:	83 c4 20             	add    esp,0x20
c001c428:	85 c0                	test   eax,eax
c001c42a:	74 17                	je     c001c443 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	68 15 b6 02 c0       	push   0xc002b615
c001c434:	e8 32 d8 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	31 c0                	xor    eax,eax
c001c43e:	e9 31 02 00 00       	jmp    c001c674 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c443:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c449:	75 e1                	jne    c001c42c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c44b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c44e:	85 c0                	test   eax,eax
c001c450:	74 da                	je     c001c42c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c452:	52                   	push   edx
c001c453:	31 d2                	xor    edx,edx
c001c455:	52                   	push   edx
c001c456:	50                   	push   eax
c001c457:	53                   	push   ebx
c001c458:	e8 2f 67 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	85 c0                	test   eax,eax
c001c462:	75 c8                	jne    c001c42c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c46b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c46f:	31 ed                	xor    ebp,ebp
c001c471:	0f af c2             	imul   eax,edx
c001c474:	50                   	push   eax
c001c475:	e8 22 31 ff ff       	call   c000f59c <malloc>
c001c47a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c47c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c480:	89 34 24             	mov    DWORD PTR [esp],esi
c001c483:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c487:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c48b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c48f:	0f af c2             	imul   eax,edx
c001c492:	99                   	cdq    
c001c493:	52                   	push   edx
c001c494:	50                   	push   eax
c001c495:	53                   	push   ebx
c001c496:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c499:	83 c4 20             	add    esp,0x20
c001c49c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c4a4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4bc:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4c0:	0f 86 aa 00 00 00    	jbe    c001c570 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4c6:	0f b7 f5             	movzx  esi,bp
c001c4c9:	6b f6 28             	imul   esi,esi,0x28
c001c4cc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4d7:	50                   	push   eax
c001c4d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c4dc:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c4e0:	8b 16                	mov    edx,DWORD PTR [esi]
c001c4e2:	6b c0 28             	imul   eax,eax,0x28
c001c4e5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c4e9:	89 d0                	mov    eax,edx
c001c4eb:	31 d2                	xor    edx,edx
c001c4ed:	52                   	push   edx
c001c4ee:	50                   	push   eax
c001c4ef:	53                   	push   ebx
c001c4f0:	e8 97 66 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c4f5:	83 c4 0c             	add    esp,0xc
c001c4f8:	6a 20                	push   0x20
c001c4fa:	6a 00                	push   0x0
c001c4fc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c500:	52                   	push   edx
c001c501:	e8 4a 42 fe ff       	call   c0000750 <memset>
c001c506:	58                   	pop    eax
c001c507:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c509:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c50d:	51                   	push   ecx
c001c50e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c512:	52                   	push   edx
c001c513:	6a 00                	push   0x0
c001c515:	6a 1f                	push   0x1f
c001c517:	53                   	push   ebx
c001c518:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c51b:	83 c4 18             	add    esp,0x18
c001c51e:	68 2c b6 02 c0       	push   0xc002b62c
c001c523:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c527:	52                   	push   edx
c001c528:	e8 6b 43 fe ff       	call   c0000898 <strcmp>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	85 c0                	test   eax,eax
c001c532:	75 0f                	jne    c001c543 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c534:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c53b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c53f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c543:	50                   	push   eax
c001c544:	50                   	push   eax
c001c545:	68 34 b6 02 c0       	push   0xc002b634
c001c54a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c54e:	50                   	push   eax
c001c54f:	e8 44 43 fe ff       	call   c0000898 <strcmp>
c001c554:	83 c4 10             	add    esp,0x10
c001c557:	85 c0                	test   eax,eax
c001c559:	75 0f                	jne    c001c56a <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c55b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c55e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c56a:	45                   	inc    ebp
c001c56b:	e9 4c ff ff ff       	jmp    c001c4bc <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c570:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c575:	75 10                	jne    c001c587 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c577:	83 ec 0c             	sub    esp,0xc
c001c57a:	68 3c b6 02 c0       	push   0xc002b63c
c001c57f:	e8 e7 d6 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c58c:	75 10                	jne    c001c59e <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c58e:	83 ec 0c             	sub    esp,0xc
c001c591:	68 3c b6 02 c0       	push   0xc002b63c
c001c596:	e8 d0 d6 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	31 d2                	xor    edx,edx
c001c5a0:	50                   	push   eax
c001c5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a5:	52                   	push   edx
c001c5a6:	50                   	push   eax
c001c5a7:	53                   	push   ebx
c001c5a8:	e8 df 65 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c5ad:	5a                   	pop    edx
c001c5ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5b2:	e8 e5 2f ff ff       	call   c000f59c <malloc>
c001c5b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5bf:	31 c9                	xor    ecx,ecx
c001c5c1:	5e                   	pop    esi
c001c5c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5c4:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5c8:	55                   	push   ebp
c001c5c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5cd:	51                   	push   ecx
c001c5ce:	52                   	push   edx
c001c5cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5d3:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c5d7:	53                   	push   ebx
c001c5d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5db:	83 c4 14             	add    esp,0x14
c001c5de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5e2:	e8 b5 2f ff ff       	call   c000f59c <malloc>
c001c5e7:	89 c6                	mov    esi,eax
c001c5e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5ee:	56                   	push   esi
c001c5ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c5f7:	51                   	push   ecx
c001c5f8:	52                   	push   edx
c001c5f9:	53                   	push   ebx
c001c5fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c601:	8b 15 a0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa0
c001c607:	83 c4 1c             	add    esp,0x1c
c001c60a:	c1 e8 04             	shr    eax,0x4
c001c60d:	89 04 95 20 09 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf6e0],eax
c001c614:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c618:	31 d2                	xor    edx,edx
c001c61a:	52                   	push   edx
c001c61b:	50                   	push   eax
c001c61c:	53                   	push   ebx
c001c61d:	e8 6a 65 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c622:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c624:	31 d2                	xor    edx,edx
c001c626:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c629:	56                   	push   esi
c001c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c62e:	52                   	push   edx
c001c62f:	50                   	push   eax
c001c630:	53                   	push   ebx
c001c631:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c634:	83 c4 14             	add    esp,0x14
c001c637:	53                   	push   ebx
c001c638:	e8 ef 64 ff ff       	call   c0012b2c <File::close()>
c001c63d:	5d                   	pop    ebp
c001c63e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c642:	e8 65 2f ff ff       	call   c000f5ac <free>
c001c647:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c64a:	e8 5d 2f ff ff       	call   c000f5ac <free>
c001c64f:	a1 a0 0a 03 c0       	mov    eax,ds:0xc0030aa0
c001c654:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c658:	8d 50 01             	lea    edx,[eax+0x1]
c001c65b:	89 0c 85 20 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5e0],ecx
c001c662:	89 34 85 a0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf660],esi
c001c669:	89 15 a0 0a 03 c0    	mov    DWORD PTR ds:0xc0030aa0,edx
c001c66f:	83 c4 10             	add    esp,0x10
c001c672:	b0 01                	mov    al,0x1
c001c674:	83 c4 5c             	add    esp,0x5c
c001c677:	5b                   	pop    ebx
c001c678:	5e                   	pop    esi
c001c679:	5f                   	pop    edi
c001c67a:	5d                   	pop    ebp
c001c67b:	c3                   	ret    

c001c67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c67c:	55                   	push   ebp
c001c67d:	57                   	push   edi
c001c67e:	56                   	push   esi
c001c67f:	53                   	push   ebx
c001c680:	81 ec 68 03 00 00    	sub    esp,0x368
c001c686:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c68d:	8b 1d f0 0a 03 c0    	mov    ebx,DWORD PTR ds:0xc0030af0
c001c693:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c697:	68 14 01 00 00       	push   0x114
c001c69c:	e8 fb 2e ff ff       	call   c000f59c <malloc>
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	89 c5                	mov    ebp,eax
c001c6a6:	53                   	push   ebx
c001c6a7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6ae:	50                   	push   eax
c001c6af:	e8 b6 63 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001c6b4:	5e                   	pop    esi
c001c6b5:	5f                   	pop    edi
c001c6b6:	6a 01                	push   0x1
c001c6b8:	55                   	push   ebp
c001c6b9:	e8 10 64 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	85 c0                	test   eax,eax
c001c6c3:	0f 85 a7 06 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6c9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6d1:	83 ec 0c             	sub    esp,0xc
c001c6d4:	6a 34                	push   0x34
c001c6d6:	e8 c1 2e ff ff       	call   c000f59c <malloc>
c001c6db:	5b                   	pop    ebx
c001c6dc:	89 c7                	mov    edi,eax
c001c6de:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c6e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6e5:	53                   	push   ebx
c001c6e6:	57                   	push   edi
c001c6e7:	6a 00                	push   0x0
c001c6e9:	6a 34                	push   0x34
c001c6eb:	55                   	push   ebp
c001c6ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6ef:	83 c4 20             	add    esp,0x20
c001c6f2:	85 c0                	test   eax,eax
c001c6f4:	0f 85 76 06 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6fa:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c700:	0f 85 6a 06 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c706:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c709:	85 c0                	test   eax,eax
c001c70b:	0f 84 5f 06 00 00    	je     c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c711:	31 d2                	xor    edx,edx
c001c713:	51                   	push   ecx
c001c714:	52                   	push   edx
c001c715:	50                   	push   eax
c001c716:	55                   	push   ebp
c001c717:	e8 70 64 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	85 c0                	test   eax,eax
c001c721:	0f 85 49 06 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c727:	83 ec 0c             	sub    esp,0xc
c001c72a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c72d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c731:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c735:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c739:	0f af c2             	imul   eax,edx
c001c73c:	50                   	push   eax
c001c73d:	e8 5a 2e ff ff       	call   c000f59c <malloc>
c001c742:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c745:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c749:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c74c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c750:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c754:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c758:	0f af c2             	imul   eax,edx
c001c75b:	99                   	cdq    
c001c75c:	52                   	push   edx
c001c75d:	50                   	push   eax
c001c75e:	55                   	push   ebp
c001c75f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c762:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c765:	83 c4 20             	add    esp,0x20
c001c768:	85 c0                	test   eax,eax
c001c76a:	0f 84 00 06 00 00    	je     c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c770:	52                   	push   edx
c001c771:	31 d2                	xor    edx,edx
c001c773:	52                   	push   edx
c001c774:	50                   	push   eax
c001c775:	55                   	push   ebp
c001c776:	e8 11 64 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c77b:	83 c4 10             	add    esp,0x10
c001c77e:	85 c0                	test   eax,eax
c001c780:	0f 85 ea 05 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c786:	83 ec 0c             	sub    esp,0xc
c001c789:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c78d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c791:	31 f6                	xor    esi,esi
c001c793:	0f af c2             	imul   eax,edx
c001c796:	50                   	push   eax
c001c797:	e8 00 2e ff ff       	call   c000f59c <malloc>
c001c79c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c79f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7aa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7ae:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7b2:	0f af c2             	imul   eax,edx
c001c7b5:	99                   	cdq    
c001c7b6:	52                   	push   edx
c001c7b7:	50                   	push   eax
c001c7b8:	55                   	push   ebp
c001c7b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7bc:	83 c4 20             	add    esp,0x20
c001c7bf:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7c3:	0f 86 8a 00 00 00    	jbe    c001c853 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7c9:	0f b7 de             	movzx  ebx,si
c001c7cc:	c1 e3 05             	shl    ebx,0x5
c001c7cf:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7d3:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c7d6:	75 75                	jne    c001c84d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c7d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c7db:	31 d2                	xor    edx,edx
c001c7dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c7e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7e8:	50                   	push   eax
c001c7e9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c7ec:	52                   	push   edx
c001c7ed:	50                   	push   eax
c001c7ee:	55                   	push   ebp
c001c7ef:	e8 98 63 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c7f4:	83 c4 10             	add    esp,0x10
c001c7f7:	85 c0                	test   eax,eax
c001c7f9:	0f 85 71 05 00 00    	jne    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7ff:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c806:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c809:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c80d:	31 d2                	xor    edx,edx
c001c80f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c813:	83 ec 0c             	sub    esp,0xc
c001c816:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c81a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c821:	50                   	push   eax
c001c822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c82a:	52                   	push   edx
c001c82b:	50                   	push   eax
c001c82c:	55                   	push   ebp
c001c82d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c830:	83 c4 1c             	add    esp,0x1c
c001c833:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c836:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c839:	50                   	push   eax
c001c83a:	6a 00                	push   0x0
c001c83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c840:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c844:	50                   	push   eax
c001c845:	e8 06 3f fe ff       	call   c0000750 <memset>
c001c84a:	83 c4 10             	add    esp,0x10
c001c84d:	46                   	inc    esi
c001c84e:	e9 6c ff ff ff       	jmp    c001c7bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c853:	53                   	push   ebx
c001c854:	31 db                	xor    ebx,ebx
c001c856:	68 00 01 00 00       	push   0x100
c001c85b:	6a 00                	push   0x0
c001c85d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c861:	50                   	push   eax
c001c862:	e8 e9 3e fe ff       	call   c0000750 <memset>
c001c867:	83 c4 0c             	add    esp,0xc
c001c86a:	68 00 01 00 00       	push   0x100
c001c86f:	6a 00                	push   0x0
c001c871:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c878:	50                   	push   eax
c001c879:	e8 d2 3e fe ff       	call   c0000750 <memset>
c001c87e:	83 c4 10             	add    esp,0x10
c001c881:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c889:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c891:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c899:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c8a9:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8ad:	0f 86 30 01 00 00    	jbe    c001c9e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8b3:	0f b7 f3             	movzx  esi,bx
c001c8b6:	6b f6 28             	imul   esi,esi,0x28
c001c8b9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8bd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c4:	52                   	push   edx
c001c8c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8c9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8cd:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8cf:	6b d2 28             	imul   edx,edx,0x28
c001c8d2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c8d6:	31 d2                	xor    edx,edx
c001c8d8:	52                   	push   edx
c001c8d9:	50                   	push   eax
c001c8da:	55                   	push   ebp
c001c8db:	e8 ac 62 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c8e0:	83 c4 0c             	add    esp,0xc
c001c8e3:	6a 20                	push   0x20
c001c8e5:	6a 00                	push   0x0
c001c8e7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c8ee:	51                   	push   ecx
c001c8ef:	e8 5c 3e fe ff       	call   c0000750 <memset>
c001c8f4:	59                   	pop    ecx
c001c8f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8f8:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c8fc:	52                   	push   edx
c001c8fd:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c904:	51                   	push   ecx
c001c905:	6a 00                	push   0x0
c001c907:	6a 1f                	push   0x1f
c001c909:	55                   	push   ebp
c001c90a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c90d:	83 c4 1c             	add    esp,0x1c
c001c910:	6a 09                	push   0x9
c001c912:	68 56 b6 02 c0       	push   0xc002b656
c001c917:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c91e:	51                   	push   ecx
c001c91f:	e8 28 3d fe ff       	call   c000064c <memcmp>
c001c924:	83 c4 10             	add    esp,0x10
c001c927:	85 c0                	test   eax,eax
c001c929:	75 21                	jne    c001c94c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c92f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c933:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c937:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c93b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c93e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c945:	89 d0                	mov    eax,edx
c001c947:	40                   	inc    eax
c001c948:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c94c:	50                   	push   eax
c001c94d:	6a 09                	push   0x9
c001c94f:	68 60 b6 02 c0       	push   0xc002b660
c001c954:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c95b:	50                   	push   eax
c001c95c:	e8 eb 3c fe ff       	call   c000064c <memcmp>
c001c961:	83 c4 10             	add    esp,0x10
c001c964:	85 c0                	test   eax,eax
c001c966:	75 21                	jne    c001c989 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c96c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c970:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c974:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c978:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c97b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c982:	89 d0                	mov    eax,edx
c001c984:	40                   	inc    eax
c001c985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c989:	50                   	push   eax
c001c98a:	50                   	push   eax
c001c98b:	68 2c b6 02 c0       	push   0xc002b62c
c001c990:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c997:	50                   	push   eax
c001c998:	e8 fb 3e fe ff       	call   c0000898 <strcmp>
c001c99d:	83 c4 10             	add    esp,0x10
c001c9a0:	85 c0                	test   eax,eax
c001c9a2:	75 0f                	jne    c001c9b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c9a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9b3:	50                   	push   eax
c001c9b4:	50                   	push   eax
c001c9b5:	68 34 b6 02 c0       	push   0xc002b634
c001c9ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c1:	50                   	push   eax
c001c9c2:	e8 d1 3e fe ff       	call   c0000898 <strcmp>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	75 0f                	jne    c001c9dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c9dd:	43                   	inc    ebx
c001c9de:	e9 c6 fe ff ff       	jmp    c001c8a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c9e3:	31 d2                	xor    edx,edx
c001c9e5:	50                   	push   eax
c001c9e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9ea:	52                   	push   edx
c001c9eb:	50                   	push   eax
c001c9ec:	55                   	push   ebp
c001c9ed:	e8 9a 61 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001c9f2:	58                   	pop    eax
c001c9f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9f7:	e8 a0 2b ff ff       	call   c000f59c <malloc>
c001c9fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca03:	31 d2                	xor    edx,edx
c001ca05:	58                   	pop    eax
c001ca06:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca0a:	53                   	push   ebx
c001ca0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca13:	52                   	push   edx
c001ca14:	50                   	push   eax
c001ca15:	55                   	push   ebp
c001ca16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca19:	83 c4 14             	add    esp,0x14
c001ca1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca20:	e8 77 2b ff ff       	call   c000f59c <malloc>
c001ca25:	31 d2                	xor    edx,edx
c001ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca2b:	83 c4 0c             	add    esp,0xc
c001ca2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca32:	52                   	push   edx
c001ca33:	50                   	push   eax
c001ca34:	55                   	push   ebp
c001ca35:	e8 52 61 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001ca3a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca3d:	31 d2                	xor    edx,edx
c001ca3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca42:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca46:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca4a:	52                   	push   edx
c001ca4b:	50                   	push   eax
c001ca4c:	55                   	push   ebp
c001ca4d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca50:	83 c4 20             	add    esp,0x20
c001ca53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca5b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca5f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca63:	0f 84 0b 03 00 00    	je     c001cd74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ca69:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca70:	31 d2                	xor    edx,edx
c001ca72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca76:	c1 e8 03             	shr    eax,0x3
c001ca79:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ca7d:	51                   	push   ecx
c001ca7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca82:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001ca86:	52                   	push   edx
c001ca87:	50                   	push   eax
c001ca88:	55                   	push   ebp
c001ca89:	e8 fe 60 ff ff       	call   c0012b8c <File::seek(unsigned long long)>
c001ca8e:	5b                   	pop    ebx
c001ca8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca93:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ca9a:	e8 fd 2a ff ff       	call   c000f59c <malloc>
c001ca9f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001caa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caa6:	31 d2                	xor    edx,edx
c001caa8:	5e                   	pop    esi
c001caa9:	8d 44 24 58          	lea    eax,[esp+0x58]
c001caad:	50                   	push   eax
c001caae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cab6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cabd:	52                   	push   edx
c001cabe:	50                   	push   eax
c001cabf:	55                   	push   ebp
c001cac0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cac3:	83 c4 20             	add    esp,0x20
c001cac6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cace:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cad2:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cad6:	0f 8d 7c 02 00 00    	jge    c001cd58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cadc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cae4:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cae9:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001caec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001caf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caf4:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001caf8:	89 d8                	mov    eax,ebx
c001cafa:	c1 e8 08             	shr    eax,0x8
c001cafd:	89 c6                	mov    esi,eax
c001caff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb03:	c1 e6 04             	shl    esi,0x4
c001cb06:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb0a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb0d:	85 d2                	test   edx,edx
c001cb0f:	0f 85 bf 00 00 00    	jne    c001cbd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb1c:	03 06                	add    eax,DWORD PTR [esi]
c001cb1e:	50                   	push   eax
c001cb1f:	e8 4b f8 ff ff       	call   c001c36f <Thr::getAddressOfKernelSymbol(char const*)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	89 c2                	mov    edx,eax
c001cb29:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb2e:	85 c0                	test   eax,eax
c001cb30:	0f 85 9e 00 00 00    	jne    c001cbd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb36:	83 ec 0c             	sub    esp,0xc
c001cb39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb3d:	03 06                	add    eax,DWORD PTR [esi]
c001cb3f:	50                   	push   eax
c001cb40:	e8 fa 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cb45:	83 c4 10             	add    esp,0x10
c001cb48:	89 c2                	mov    edx,eax
c001cb4a:	85 c0                	test   eax,eax
c001cb4c:	0f 85 82 00 00 00    	jne    c001cbd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb56:	50                   	push   eax
c001cb57:	50                   	push   eax
c001cb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb5c:	03 06                	add    eax,DWORD PTR [esi]
c001cb5e:	50                   	push   eax
c001cb5f:	68 6a b6 02 c0       	push   0xc002b66a
c001cb64:	e8 a2 59 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001cb69:	58                   	pop    eax
c001cb6a:	5a                   	pop    edx
c001cb6b:	68 84 b6 02 c0       	push   0xc002b684
c001cb70:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb77:	50                   	push   eax
c001cb78:	e8 8f 3c fe ff       	call   c000080c <strcpy>
c001cb7d:	59                   	pop    ecx
c001cb7e:	58                   	pop    eax
c001cb7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb83:	03 06                	add    eax,DWORD PTR [esi]
c001cb85:	50                   	push   eax
c001cb86:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb8d:	50                   	push   eax
c001cb8e:	e8 b9 3d fe ff       	call   c000094c <strcat>
c001cb93:	58                   	pop    eax
c001cb94:	5a                   	pop    edx
c001cb95:	68 1a b7 02 c0       	push   0xc002b71a
c001cb9a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba1:	50                   	push   eax
c001cba2:	e8 a5 3d fe ff       	call   c000094c <strcat>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cbaf:	0f 84 5d 01 00 00    	je     c001cd12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cbb5:	83 ec 0c             	sub    esp,0xc
c001cbb8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbbf:	50                   	push   eax
c001cbc0:	e8 a6 d0 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001cbc5:	83 c4 10             	add    esp,0x10
c001cbc8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbcc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbd0:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cbd4:	80 fb 01             	cmp    bl,0x1
c001cbd7:	0f 85 88 00 00 00    	jne    c001cc65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cbdd:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cbe4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbe8:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cbec:	01 ce                	add    esi,ecx
c001cbee:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cbf4:	0f 94 c0             	sete   al
c001cbf7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cbfd:	0f 94 c3             	sete   bl
c001cc00:	09 c3                	or     ebx,eax
c001cc02:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc04:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc09:	74 41                	je     c001cc4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cc0b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc0e:	84 db                	test   bl,bl
c001cc10:	75 15                	jne    c001cc27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cc12:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc16:	66 83 f8 0c          	cmp    ax,0xc
c001cc1a:	76 05                	jbe    c001cc21 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cc1c:	b8 0c 00 00 00       	mov    eax,0xc
c001cc21:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc25:	76 37                	jbe    c001cc5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc27:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc2b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc30:	0f 84 dc 00 00 00    	je     c001cd12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc36:	83 ec 0c             	sub    esp,0xc
c001cc39:	68 9b b6 02 c0       	push   0xc002b69b
c001cc3e:	e8 28 d0 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc4a:	eb 12                	jmp    c001cc5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc4c:	01 c1                	add    ecx,eax
c001cc4e:	84 db                	test   bl,bl
c001cc50:	75 0c                	jne    c001cc5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc56:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc5a:	77 02                	ja     c001cc5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc5c:	01 d1                	add    ecx,edx
c001cc5e:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc60:	e9 ea 00 00 00       	jmp    c001cd4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cc65:	80 fb 02             	cmp    bl,0x2
c001cc68:	75 7c                	jne    c001cce6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cc6a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc71:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc75:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cc79:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc7f:	74 20                	je     c001cca1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc81:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc87:	74 18                	je     c001cca1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cc89:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc8d:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc92:	66 83 f8 0e          	cmp    ax,0xe
c001cc96:	77 03                	ja     c001cc9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cc98:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cc9b:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cc9f:	76 1f                	jbe    c001ccc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cca1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cca5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccaa:	74 66                	je     c001cd12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	68 b7 b6 02 c0       	push   0xc002b6b7
c001ccb4:	e8 b2 cf ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccc0:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccc2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccc7:	74 13                	je     c001ccdc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ccc9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cccd:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ccd4:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ccd8:	01 c8                	add    eax,ecx
c001ccda:	eb 04                	jmp    c001cce0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ccdc:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cce0:	01 c2                	add    edx,eax
c001cce2:	89 16                	mov    DWORD PTR [esi],edx
c001cce4:	eb 69                	jmp    c001cd4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cce6:	0f b6 db             	movzx  ebx,bl
c001cce9:	50                   	push   eax
c001ccea:	50                   	push   eax
c001cceb:	53                   	push   ebx
c001ccec:	68 d3 b6 02 c0       	push   0xc002b6d3
c001ccf1:	e8 15 58 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ccf6:	83 c4 10             	add    esp,0x10
c001ccf9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccfe:	74 12                	je     c001cd12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	68 de b6 02 c0       	push   0xc002b6de
c001cd08:	e8 5e cf ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	eb 3d                	jmp    c001cd4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd12:	83 ec 0c             	sub    esp,0xc
c001cd15:	55                   	push   ebp
c001cd16:	e8 11 5e ff ff       	call   c0012b2c <File::close()>
c001cd1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd1e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd24:	59                   	pop    ecx
c001cd25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd29:	e8 7e 28 ff ff       	call   c000f5ac <free>
c001cd2e:	5b                   	pop    ebx
c001cd2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd33:	e8 74 28 ff ff       	call   c000f5ac <free>
c001cd38:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd3b:	e8 6c 28 ff ff       	call   c000f5ac <free>
c001cd40:	5e                   	pop    esi
c001cd41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd45:	e8 62 28 ff ff       	call   c000f5ac <free>
c001cd4a:	83 c4 10             	add    esp,0x10
c001cd4d:	eb 21                	jmp    c001cd70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd4f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd53:	e9 76 fd ff ff       	jmp    c001cace <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd5f:	e8 48 28 ff ff       	call   c000f5ac <free>
c001cd64:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd68:	83 c4 10             	add    esp,0x10
c001cd6b:	e9 eb fc ff ff       	jmp    c001ca5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd70:	31 c0                	xor    eax,eax
c001cd72:	eb 33                	jmp    c001cda7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cd74:	83 ec 0c             	sub    esp,0xc
c001cd77:	55                   	push   ebp
c001cd78:	e8 af 5d ff ff       	call   c0012b2c <File::close()>
c001cd7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd86:	58                   	pop    eax
c001cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd8b:	e8 1c 28 ff ff       	call   c000f5ac <free>
c001cd90:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd93:	e8 14 28 ff ff       	call   c000f5ac <free>
c001cd98:	5a                   	pop    edx
c001cd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd9d:	e8 0a 28 ff ff       	call   c000f5ac <free>
c001cda2:	83 c4 10             	add    esp,0x10
c001cda5:	b0 01                	mov    al,0x1
c001cda7:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdad:	5b                   	pop    ebx
c001cdae:	5e                   	pop    esi
c001cdaf:	5f                   	pop    edi
c001cdb0:	5d                   	pop    ebp
c001cdb1:	c3                   	ret    

c001cdb2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cdb2:	56                   	push   esi
c001cdb3:	31 d2                	xor    edx,edx
c001cdb5:	53                   	push   ebx
c001cdb6:	8b 1d 00 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030300
c001cdbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdc0:	39 d3                	cmp    ebx,edx
c001cdc2:	7e 1b                	jle    c001cddf <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cdc4:	8b 04 95 20 05 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcfae0]
c001cdcb:	39 c8                	cmp    eax,ecx
c001cdcd:	77 0d                	ja     c001cddc <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cdcf:	8b 34 95 20 03 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfce0]
c001cdd6:	01 c6                	add    esi,eax
c001cdd8:	39 ce                	cmp    esi,ecx
c001cdda:	77 05                	ja     c001cde1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cddc:	42                   	inc    edx
c001cddd:	eb e1                	jmp    c001cdc0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cddf:	31 c0                	xor    eax,eax
c001cde1:	5b                   	pop    ebx
c001cde2:	5e                   	pop    esi
c001cde3:	c3                   	ret    

c001cde4 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cde4:	53                   	push   ebx
c001cde5:	31 c0                	xor    eax,eax
c001cde7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdeb:	8b 1d 00 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030300
c001cdf1:	39 c3                	cmp    ebx,eax
c001cdf3:	7e 22                	jle    c001ce17 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cdf5:	8b 14 85 20 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfae0]
c001cdfc:	39 ca                	cmp    edx,ecx
c001cdfe:	77 14                	ja     c001ce14 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce00:	03 14 85 20 03 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfce0]
c001ce07:	39 ca                	cmp    edx,ecx
c001ce09:	76 09                	jbe    c001ce14 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce0b:	8b 04 85 20 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8e0]
c001ce12:	eb 05                	jmp    c001ce19 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce14:	40                   	inc    eax
c001ce15:	eb da                	jmp    c001cdf1 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce17:	31 c0                	xor    eax,eax
c001ce19:	5b                   	pop    ebx
c001ce1a:	c3                   	ret    

c001ce1b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce1b:	53                   	push   ebx
c001ce1c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce20:	53                   	push   ebx
c001ce21:	e8 8c ff ff ff       	call   c001cdb2 <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce26:	5a                   	pop    edx
c001ce27:	31 d2                	xor    edx,edx
c001ce29:	85 c0                	test   eax,eax
c001ce2b:	74 04                	je     c001ce31 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce2d:	89 da                	mov    edx,ebx
c001ce2f:	29 c2                	sub    edx,eax
c001ce31:	89 d0                	mov    eax,edx
c001ce33:	5b                   	pop    ebx
c001ce34:	c3                   	ret    

c001ce35 <Thr::loadDLL(char const*, bool)>:
c001ce35:	55                   	push   ebp
c001ce36:	57                   	push   edi
c001ce37:	56                   	push   esi
c001ce38:	53                   	push   ebx
c001ce39:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce3f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce46:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001ce4d:	56                   	push   esi
c001ce4e:	68 f6 b6 02 c0       	push   0xc002b6f6
c001ce53:	e8 b3 56 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ce58:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce5f:	e8 38 27 ff ff       	call   c000f59c <malloc>
c001ce64:	83 c4 0c             	add    esp,0xc
c001ce67:	89 c3                	mov    ebx,eax
c001ce69:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001ce6f:	56                   	push   esi
c001ce70:	50                   	push   eax
c001ce71:	e8 f4 5b ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001ce76:	83 c4 10             	add    esp,0x10
c001ce79:	85 db                	test   ebx,ebx
c001ce7b:	75 3c                	jne    c001ceb9 <Thr::loadDLL(char const*, bool)+0x84>
c001ce7d:	89 f8                	mov    eax,edi
c001ce7f:	84 c0                	test   al,al
c001ce81:	0f 84 cf 01 00 00    	je     c001d056 <Thr::loadDLL(char const*, bool)+0x221>
c001ce87:	55                   	push   ebp
c001ce88:	55                   	push   ebp
c001ce89:	68 07 b7 02 c0       	push   0xc002b707
c001ce8e:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001ce92:	55                   	push   ebp
c001ce93:	e8 74 39 fe ff       	call   c000080c <strcpy>
c001ce98:	58                   	pop    eax
c001ce99:	5a                   	pop    edx
c001ce9a:	56                   	push   esi
c001ce9b:	55                   	push   ebp
c001ce9c:	e8 ab 3a fe ff       	call   c000094c <strcat>
c001cea1:	59                   	pop    ecx
c001cea2:	58                   	pop    eax
c001cea3:	68 1a b7 02 c0       	push   0xc002b71a
c001cea8:	55                   	push   ebp
c001cea9:	e8 9e 3a fe ff       	call   c000094c <strcat>
c001ceae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceb1:	e8 b5 cd ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ceb6:	83 c4 10             	add    esp,0x10
c001ceb9:	51                   	push   ecx
c001ceba:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cebe:	50                   	push   eax
c001cebf:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cec3:	50                   	push   eax
c001cec4:	53                   	push   ebx
c001cec5:	e8 b0 5e ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001ceca:	83 c4 10             	add    esp,0x10
c001cecd:	85 db                	test   ebx,ebx
c001cecf:	74 0c                	je     c001cedd <Thr::loadDLL(char const*, bool)+0xa8>
c001ced1:	83 ec 0c             	sub    esp,0xc
c001ced4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ced6:	53                   	push   ebx
c001ced7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ceda:	83 c4 10             	add    esp,0x10
c001cedd:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cee2:	75 0a                	jne    c001ceee <Thr::loadDLL(char const*, bool)+0xb9>
c001cee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cee8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001ceec:	75 3c                	jne    c001cf2a <Thr::loadDLL(char const*, bool)+0xf5>
c001ceee:	89 f8                	mov    eax,edi
c001cef0:	84 c0                	test   al,al
c001cef2:	0f 84 46 01 00 00    	je     c001d03e <Thr::loadDLL(char const*, bool)+0x209>
c001cef8:	51                   	push   ecx
c001cef9:	51                   	push   ecx
c001cefa:	68 07 b7 02 c0       	push   0xc002b707
c001ceff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf03:	53                   	push   ebx
c001cf04:	e8 03 39 fe ff       	call   c000080c <strcpy>
c001cf09:	5d                   	pop    ebp
c001cf0a:	58                   	pop    eax
c001cf0b:	56                   	push   esi
c001cf0c:	53                   	push   ebx
c001cf0d:	e8 3a 3a fe ff       	call   c000094c <strcat>
c001cf12:	58                   	pop    eax
c001cf13:	5a                   	pop    edx
c001cf14:	68 1a b7 02 c0       	push   0xc002b71a
c001cf19:	53                   	push   ebx
c001cf1a:	e8 2d 3a fe ff       	call   c000094c <strcat>
c001cf1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf22:	e8 44 cd ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001cf27:	83 c4 10             	add    esp,0x10
c001cf2a:	52                   	push   edx
c001cf2b:	68 03 08 00 00       	push   0x803
c001cf30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf38:	05 ff 0f 00 00       	add    eax,0xfff
c001cf3d:	83 d2 00             	adc    edx,0x0
c001cf40:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cf44:	50                   	push   eax
c001cf45:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c001cf4b:	e8 10 4b ff ff       	call   c0011a60 <VAS::allocatePages(int, int)>
c001cf50:	59                   	pop    ecx
c001cf51:	89 c3                	mov    ebx,eax
c001cf53:	5d                   	pop    ebp
c001cf54:	50                   	push   eax
c001cf55:	68 42 9e 02 c0       	push   0xc0029e42
c001cf5a:	e8 ac 55 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001cf5f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf62:	e8 05 38 fe ff       	call   c000076c <strlen>
c001cf67:	8b 2d 00 03 03 c0    	mov    ebp,DWORD PTR ds:0xc0030300
c001cf6d:	40                   	inc    eax
c001cf6e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf71:	e8 26 26 ff ff       	call   c000f59c <malloc>
c001cf76:	89 04 ad 20 07 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf8e0],eax
c001cf7d:	58                   	pop    eax
c001cf7e:	a1 00 03 03 c0       	mov    eax,ds:0xc0030300
c001cf83:	5a                   	pop    edx
c001cf84:	56                   	push   esi
c001cf85:	ff 34 85 20 07 03 c0 	push   DWORD PTR [eax*4-0x3ffcf8e0]
c001cf8c:	e8 7b 38 fe ff       	call   c000080c <strcpy>
c001cf91:	a1 00 03 03 c0       	mov    eax,ds:0xc0030300
c001cf96:	8d 50 01             	lea    edx,[eax+0x1]
c001cf99:	89 1c 85 20 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfae0],ebx
c001cfa0:	89 15 00 03 03 c0    	mov    DWORD PTR ds:0xc0030300,edx
c001cfa6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfaa:	83 c4 0c             	add    esp,0xc
c001cfad:	89 14 85 20 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfce0],edx
c001cfb4:	6a 01                	push   0x1
c001cfb6:	53                   	push   ebx
c001cfb7:	56                   	push   esi
c001cfb8:	e8 bf f6 ff ff       	call   c001c67c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfbd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cfc1:	83 c4 10             	add    esp,0x10
c001cfc4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cfc9:	0f 85 83 00 00 00    	jne    c001d052 <Thr::loadDLL(char const*, bool)+0x21d>
c001cfcf:	89 f8                	mov    eax,edi
c001cfd1:	84 c0                	test   al,al
c001cfd3:	74 6d                	je     c001d042 <Thr::loadDLL(char const*, bool)+0x20d>
c001cfd5:	83 ec 0c             	sub    esp,0xc
c001cfd8:	68 1c b7 02 c0       	push   0xc002b71c
c001cfdd:	e8 89 cc ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001cfe2:	83 c4 10             	add    esp,0x10
c001cfe5:	eb 5b                	jmp    c001d042 <Thr::loadDLL(char const*, bool)+0x20d>
c001cfe7:	89 ee                	mov    esi,ebp
c001cfe9:	50                   	push   eax
c001cfea:	c1 e6 0c             	shl    esi,0xc
c001cfed:	50                   	push   eax
c001cfee:	01 de                	add    esi,ebx
c001cff0:	56                   	push   esi
c001cff1:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c001cff7:	e8 cc 45 ff ff       	call   c00115c8 <VAS::getPageTableEntry(unsigned long)>
c001cffc:	83 c4 10             	add    esp,0x10
c001cfff:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d002:	75 0c                	jne    c001d010 <Thr::loadDLL(char const*, bool)+0x1db>
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	56                   	push   esi
c001d008:	e8 d8 28 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	45                   	inc    ebp
c001d011:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d015:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d019:	05 ff 0f 00 00       	add    eax,0xfff
c001d01e:	bf 00 00 00 00       	mov    edi,0x0
c001d023:	83 d2 00             	adc    edx,0x0
c001d026:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d02a:	c1 ea 0c             	shr    edx,0xc
c001d02d:	39 c5                	cmp    ebp,eax
c001d02f:	89 d1                	mov    ecx,edx
c001d031:	89 f8                	mov    eax,edi
c001d033:	19 c8                	sbb    eax,ecx
c001d035:	72 b0                	jb     c001cfe7 <Thr::loadDLL(char const*, bool)+0x1b2>
c001d037:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d03c:	75 18                	jne    c001d056 <Thr::loadDLL(char const*, bool)+0x221>
c001d03e:	31 db                	xor    ebx,ebx
c001d040:	eb 14                	jmp    c001d056 <Thr::loadDLL(char const*, bool)+0x221>
c001d042:	83 ec 0c             	sub    esp,0xc
c001d045:	68 3b b7 02 c0       	push   0xc002b73b
c001d04a:	e8 1c cc ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001d04f:	83 c4 10             	add    esp,0x10
c001d052:	31 ed                	xor    ebp,ebp
c001d054:	eb bb                	jmp    c001d011 <Thr::loadDLL(char const*, bool)+0x1dc>
c001d056:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d05c:	89 d8                	mov    eax,ebx
c001d05e:	5b                   	pop    ebx
c001d05f:	5e                   	pop    esi
c001d060:	5f                   	pop    edi
c001d061:	5d                   	pop    ebp
c001d062:	c3                   	ret    

c001d063 <Thr::executeDLL(unsigned long, void*)>:
c001d063:	56                   	push   esi
c001d064:	53                   	push   ebx
c001d065:	52                   	push   edx
c001d066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d06a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d06e:	85 db                	test   ebx,ebx
c001d070:	75 10                	jne    c001d082 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d072:	83 ec 0c             	sub    esp,0xc
c001d075:	68 57 b7 02 c0       	push   0xc002b757
c001d07a:	e8 ec cb ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001d07f:	83 c4 10             	add    esp,0x10
c001d082:	50                   	push   eax
c001d083:	50                   	push   eax
c001d084:	53                   	push   ebx
c001d085:	68 81 b7 02 c0       	push   0xc002b781
c001d08a:	e8 7c 54 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001d08f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d093:	89 d8                	mov    eax,ebx
c001d095:	83 c4 14             	add    esp,0x14
c001d098:	5b                   	pop    ebx
c001d099:	5e                   	pop    esi
c001d09a:	ff e0                	jmp    eax

c001d09c <userModeEntryPoint(void*)>:
c001d09c:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d0a1:	48                   	dec    eax
c001d0a2:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d0a7:	75 01                	jne    c001d0aa <userModeEntryPoint(void*)+0xe>
c001d0a9:	fb                   	sti    
c001d0aa:	fb                   	sti    
c001d0ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d0b3:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d0b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0bd:	e9 68 32 fe ff       	jmp    c000032a <goToUsermode>

c001d0c2 <changeTSS>:
c001d0c2:	83 ec 14             	sub    esp,0x14
c001d0c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0ca:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d0cd:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d0d2:	c1 e2 15             	shl    edx,0x15
c001d0d5:	29 d0                	sub    eax,edx
c001d0d7:	50                   	push   eax
c001d0d8:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001d0dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0e3:	05 7c 11 00 00       	add    eax,0x117c
c001d0e8:	50                   	push   eax
c001d0e9:	e8 08 3a ff ff       	call   c0010af6 <TSS::setESP(unsigned long)>
c001d0ee:	83 c4 1c             	add    esp,0x1c
c001d0f1:	c3                   	ret    

c001d0f2 <switchToThread(ThreadControlBlock*)>:
c001d0f2:	57                   	push   edi
c001d0f3:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d0f8:	56                   	push   esi
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	53                   	push   ebx
c001d0fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d100:	0f 85 88 00 00 00    	jne    c001d18e <switchToThread(ThreadControlBlock*)+0x9c>
c001d106:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d109:	3c ff                	cmp    al,0xff
c001d10b:	74 7d                	je     c001d18a <switchToThread(ThreadControlBlock*)+0x98>
c001d10d:	0f b6 d0             	movzx  edx,al
c001d110:	b8 84 03 00 00       	mov    eax,0x384
c001d115:	29 d0                	sub    eax,edx
c001d117:	c1 e0 10             	shl    eax,0x10
c001d11a:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d11d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d120:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c001d125:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d12b:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d132:	74 4a                	je     c001d17e <switchToThread(ThreadControlBlock*)+0x8c>
c001d134:	0f 31                	rdtsc  
c001d136:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d13b:	89 c6                	mov    esi,eax
c001d13d:	89 d7                	mov    edi,edx
c001d13f:	2b 35 f8 0a 03 c0    	sub    esi,DWORD PTR ds:0xc0030af8
c001d145:	89 15 0c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b0c,edx
c001d14b:	1b 3d fc 0a 03 c0    	sbb    edi,DWORD PTR ds:0xc0030afc
c001d151:	89 35 00 0b 03 c0    	mov    DWORD PTR ds:0xc0030b00,esi
c001d157:	a3 f8 0a 03 c0       	mov    ds:0xc0030af8,eax
c001d15c:	89 3d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,edi
c001d162:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d168:	89 15 fc 0a 03 c0    	mov    DWORD PTR ds:0xc0030afc,edx
c001d16e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d171:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d174:	01 c6                	add    esi,eax
c001d176:	11 d7                	adc    edi,edx
c001d178:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d17b:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d17e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d182:	5b                   	pop    ebx
c001d183:	5e                   	pop    esi
c001d184:	5f                   	pop    edi
c001d185:	e9 d8 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d18a:	31 c0                	xor    eax,eax
c001d18c:	eb 8f                	jmp    c001d11d <switchToThread(ThreadControlBlock*)+0x2b>
c001d18e:	5b                   	pop    ebx
c001d18f:	c7 05 c0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x1
c001d199:	5e                   	pop    esi
c001d19a:	5f                   	pop    edi
c001d19b:	c3                   	ret    

c001d19c <Process::addArgs(char**)>:
c001d19c:	57                   	push   edi
c001d19d:	56                   	push   esi
c001d19e:	53                   	push   ebx
c001d19f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1a7:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d1b1:	85 ff                	test   edi,edi
c001d1b3:	74 3d                	je     c001d1f2 <Process::addArgs(char**)+0x56>
c001d1b5:	8b 07                	mov    eax,DWORD PTR [edi]
c001d1b7:	85 c0                	test   eax,eax
c001d1b9:	74 37                	je     c001d1f2 <Process::addArgs(char**)+0x56>
c001d1bb:	31 db                	xor    ebx,ebx
c001d1bd:	83 ec 0c             	sub    esp,0xc
c001d1c0:	50                   	push   eax
c001d1c1:	e8 a6 35 fe ff       	call   c000076c <strlen>
c001d1c6:	40                   	inc    eax
c001d1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1ca:	e8 cd 23 ff ff       	call   c000f59c <malloc>
c001d1cf:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d1d6:	5a                   	pop    edx
c001d1d7:	59                   	pop    ecx
c001d1d8:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d1db:	43                   	inc    ebx
c001d1dc:	50                   	push   eax
c001d1dd:	e8 2a 36 fe ff       	call   c000080c <strcpy>
c001d1e2:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d1e8:	83 c4 10             	add    esp,0x10
c001d1eb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1ee:	85 c0                	test   eax,eax
c001d1f0:	75 cb                	jne    c001d1bd <Process::addArgs(char**)+0x21>
c001d1f2:	5b                   	pop    ebx
c001d1f3:	5e                   	pop    esi
c001d1f4:	5f                   	pop    edi
c001d1f5:	c3                   	ret    

c001d1f6 <Process::Process(char const*, Process*, char**)>:
c001d1f6:	56                   	push   esi
c001d1f7:	53                   	push   ebx
c001d1f8:	83 ec 14             	sub    esp,0x14
c001d1fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ff:	05 0c 02 00 00       	add    eax,0x20c
c001d204:	bb 07 00 00 00       	mov    ebx,0x7
c001d209:	89 c6                	mov    esi,eax
c001d20b:	85 db                	test   ebx,ebx
c001d20d:	78 12                	js     c001d221 <Process::Process(char const*, Process*, char**)+0x2b>
c001d20f:	83 ec 0c             	sub    esp,0xc
c001d212:	56                   	push   esi
c001d213:	e8 9e b6 00 00       	call   c00288b6 <ThreadControlBlock::ThreadControlBlock()>
c001d218:	83 c4 10             	add    esp,0x10
c001d21b:	83 c6 63             	add    esi,0x63
c001d21e:	4b                   	dec    ebx
c001d21f:	eb ea                	jmp    c001d20b <Process::Process(char const*, Process*, char**)+0x15>
c001d221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d225:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d22c:	83 ec 0c             	sub    esp,0xc
c001d22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d233:	e8 bc c8 ff ff       	call   c0019af4 <Krnl::newProcessEnv(Process*)>
c001d238:	83 c4 10             	add    esp,0x10
c001d23b:	89 c2                	mov    edx,eax
c001d23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d241:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d254:	a1 30 cb 02 c0       	mov    eax,ds:0xc002cb30
c001d259:	8d 50 01             	lea    edx,[eax+0x1]
c001d25c:	89 15 30 cb 02 c0    	mov    DWORD PTR ds:0xc002cb30,edx
c001d262:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d266:	89 02                	mov    DWORD PTR [edx],eax
c001d268:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d270:	83 ec 0c             	sub    esp,0xc
c001d273:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d277:	e8 20 23 ff ff       	call   c000f59c <malloc>
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	89 c3                	mov    ebx,eax
c001d281:	83 ec 08             	sub    esp,0x8
c001d284:	6a 00                	push   0x0
c001d286:	53                   	push   ebx
c001d287:	e8 7c 4b ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d293:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d29d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2af:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2bf:	85 c0                	test   eax,eax
c001d2c1:	74 42                	je     c001d305 <Process::Process(char const*, Process*, char**)+0x10f>
c001d2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2cd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d2d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d2dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2e7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f1:	05 0c 01 00 00       	add    eax,0x10c
c001d2f6:	83 ec 08             	sub    esp,0x8
c001d2f9:	52                   	push   edx
c001d2fa:	50                   	push   eax
c001d2fb:	e8 0c 35 fe ff       	call   c000080c <strcpy>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	eb 63                	jmp    c001d368 <Process::Process(char const*, Process*, char**)+0x172>
c001d305:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d30d:	83 ec 0c             	sub    esp,0xc
c001d310:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d314:	e8 83 22 ff ff       	call   c000f59c <malloc>
c001d319:	83 c4 10             	add    esp,0x10
c001d31c:	89 c3                	mov    ebx,eax
c001d31e:	83 ec 08             	sub    esp,0x8
c001d321:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d325:	53                   	push   ebx
c001d326:	e8 df 34 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d332:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d342:	83 ec 0c             	sub    esp,0xc
c001d345:	50                   	push   eax
c001d346:	e8 7e 2c ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d34b:	83 c4 10             	add    esp,0x10
c001d34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d352:	05 0c 01 00 00       	add    eax,0x10c
c001d357:	83 ec 08             	sub    esp,0x8
c001d35a:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d35f:	50                   	push   eax
c001d360:	e8 a7 34 fe ff       	call   c000080c <strcpy>
c001d365:	83 c4 10             	add    esp,0x10
c001d368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36c:	83 c0 0c             	add    eax,0xc
c001d36f:	83 ec 08             	sub    esp,0x8
c001d372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d376:	50                   	push   eax
c001d377:	e8 90 34 fe ff       	call   c000080c <strcpy>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	83 ec 08             	sub    esp,0x8
c001d382:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d386:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d38a:	e8 0d fe ff ff       	call   c001d19c <Process::addArgs(char**)>
c001d38f:	83 c4 10             	add    esp,0x10
c001d392:	83 ec 08             	sub    esp,0x8
c001d395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d399:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d39d:	e8 a4 ed ff ff       	call   c001c146 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d3a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d3ad:	83 f0 01             	xor    eax,0x1
c001d3b0:	88 c2                	mov    dl,al
c001d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b6:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d3bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d3c1:	83 ec 08             	sub    esp,0x8
c001d3c4:	50                   	push   eax
c001d3c5:	68 f8 b7 02 c0       	push   0xc002b7f8
c001d3ca:	e8 3c 51 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001d3cf:	83 c4 10             	add    esp,0x10
c001d3d2:	90                   	nop
c001d3d3:	83 c4 14             	add    esp,0x14
c001d3d6:	5b                   	pop    ebx
c001d3d7:	5e                   	pop    esi
c001d3d8:	c3                   	ret    
c001d3d9:	90                   	nop

c001d3da <Process::Process(bool, char const*, Process*, char**)>:
c001d3da:	56                   	push   esi
c001d3db:	53                   	push   ebx
c001d3dc:	83 ec 24             	sub    esp,0x24
c001d3df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d3e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d3eb:	05 0c 02 00 00       	add    eax,0x20c
c001d3f0:	bb 07 00 00 00       	mov    ebx,0x7
c001d3f5:	89 c6                	mov    esi,eax
c001d3f7:	85 db                	test   ebx,ebx
c001d3f9:	78 12                	js     c001d40d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d3fb:	83 ec 0c             	sub    esp,0xc
c001d3fe:	56                   	push   esi
c001d3ff:	e8 b2 b4 00 00       	call   c00288b6 <ThreadControlBlock::ThreadControlBlock()>
c001d404:	83 c4 10             	add    esp,0x10
c001d407:	83 c6 63             	add    esi,0x63
c001d40a:	4b                   	dec    ebx
c001d40b:	eb ea                	jmp    c001d3f7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d40d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d411:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d418:	83 ec 0c             	sub    esp,0xc
c001d41b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d41f:	e8 d0 c6 ff ff       	call   c0019af4 <Krnl::newProcessEnv(Process*)>
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	89 c2                	mov    edx,eax
c001d429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d42d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d437:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d440:	a1 30 cb 02 c0       	mov    eax,ds:0xc002cb30
c001d445:	8d 50 01             	lea    edx,[eax+0x1]
c001d448:	89 15 30 cb 02 c0    	mov    DWORD PTR ds:0xc002cb30,edx
c001d44e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d452:	89 02                	mov    DWORD PTR [edx],eax
c001d454:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d45c:	83 ec 0c             	sub    esp,0xc
c001d45f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d463:	e8 34 21 ff ff       	call   c000f59c <malloc>
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	89 c3                	mov    ebx,eax
c001d46d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d472:	83 ec 08             	sub    esp,0x8
c001d475:	50                   	push   eax
c001d476:	53                   	push   ebx
c001d477:	e8 8c 49 ff ff       	call   c0011e08 <VAS::VAS(bool)>
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d483:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d489:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d48d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d49b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d49f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d4a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4a9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4af:	85 c0                	test   eax,eax
c001d4b1:	74 42                	je     c001d4f5 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d4b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4b7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4bd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4c7:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4d7:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d4dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4e1:	05 0c 01 00 00       	add    eax,0x10c
c001d4e6:	83 ec 08             	sub    esp,0x8
c001d4e9:	52                   	push   edx
c001d4ea:	50                   	push   eax
c001d4eb:	e8 1c 33 fe ff       	call   c000080c <strcpy>
c001d4f0:	83 c4 10             	add    esp,0x10
c001d4f3:	eb 63                	jmp    c001d558 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d4f5:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d504:	e8 93 20 ff ff       	call   c000f59c <malloc>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	89 c3                	mov    ebx,eax
c001d50e:	83 ec 08             	sub    esp,0x8
c001d511:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d515:	53                   	push   ebx
c001d516:	e8 ef 32 ff ff       	call   c001080a <VgaText::VgaText(char const*)>
c001d51b:	83 c4 10             	add    esp,0x10
c001d51e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d522:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d52c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d532:	83 ec 0c             	sub    esp,0xc
c001d535:	50                   	push   eax
c001d536:	e8 8e 2a ff ff       	call   c000ffc9 <addToTerminalCycle(VgaText*)>
c001d53b:	83 c4 10             	add    esp,0x10
c001d53e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d542:	05 0c 01 00 00       	add    eax,0x10c
c001d547:	83 ec 08             	sub    esp,0x8
c001d54a:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d54f:	50                   	push   eax
c001d550:	e8 b7 32 fe ff       	call   c000080c <strcpy>
c001d555:	83 c4 10             	add    esp,0x10
c001d558:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d55c:	83 c0 0c             	add    eax,0xc
c001d55f:	83 ec 08             	sub    esp,0x8
c001d562:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d566:	50                   	push   eax
c001d567:	e8 a0 32 fe ff       	call   c000080c <strcpy>
c001d56c:	83 c4 10             	add    esp,0x10
c001d56f:	83 ec 08             	sub    esp,0x8
c001d572:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d576:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d57a:	e8 1d fc ff ff       	call   c001d19c <Process::addArgs(char**)>
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	90                   	nop
c001d583:	83 c4 24             	add    esp,0x24
c001d586:	5b                   	pop    ebx
c001d587:	5e                   	pop    esi
c001d588:	c3                   	ret    

c001d589 <taskStartupFunction>:
c001d589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d58e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d591:	c3                   	ret    

c001d592 <Semaphore::Semaphore(int)>:
c001d592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d59a:	89 10                	mov    DWORD PTR [eax],edx
c001d59c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5bd:	90                   	nop
c001d5be:	c3                   	ret    
c001d5bf:	90                   	nop

c001d5c0 <Mutex::Mutex()>:
c001d5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c4:	6a 01                	push   0x1
c001d5c6:	50                   	push   eax
c001d5c7:	e8 c6 ff ff ff       	call   c001d592 <Semaphore::Semaphore(int)>
c001d5cc:	83 c4 08             	add    esp,0x8
c001d5cf:	90                   	nop
c001d5d0:	c3                   	ret    
c001d5d1:	90                   	nop

c001d5d2 <Process::createThread(void (*)(void*), void*, int)>:
c001d5d2:	55                   	push   ebp
c001d5d3:	31 c9                	xor    ecx,ecx
c001d5d5:	57                   	push   edi
c001d5d6:	56                   	push   esi
c001d5d7:	53                   	push   ebx
c001d5d8:	83 ec 1c             	sub    esp,0x1c
c001d5db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5df:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d5e6:	89 f2                	mov    edx,esi
c001d5e8:	0f b7 c2             	movzx  eax,dx
c001d5eb:	83 e2 01             	and    edx,0x1
c001d5ee:	74 16                	je     c001d606 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d5f0:	d1 f8                	sar    eax,1
c001d5f2:	41                   	inc    ecx
c001d5f3:	89 c2                	mov    edx,eax
c001d5f5:	83 f9 10             	cmp    ecx,0x10
c001d5f8:	75 ee                	jne    c001d5e8 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d5fa:	83 c4 1c             	add    esp,0x1c
c001d5fd:	31 db                	xor    ebx,ebx
c001d5ff:	89 d8                	mov    eax,ebx
c001d601:	5b                   	pop    ebx
c001d602:	5e                   	pop    esi
c001d603:	5f                   	pop    edi
c001d604:	5d                   	pop    ebp
c001d605:	c3                   	ret    
c001d606:	b8 01 00 00 00       	mov    eax,0x1
c001d60b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d60e:	d3 e0                	shl    eax,cl
c001d610:	09 c6                	or     esi,eax
c001d612:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d615:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d61c:	89 c6                	mov    esi,eax
c001d61e:	c1 e6 05             	shl    esi,0x5
c001d621:	01 f0                	add    eax,esi
c001d623:	01 d8                	add    eax,ebx
c001d625:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d62c:	75 0a                	jne    c001d638 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d62e:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d638:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d63e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d642:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d645:	01 ca                	add    edx,ecx
c001d647:	83 ec 08             	sub    esp,0x8
c001d64a:	89 d0                	mov    eax,edx
c001d64c:	c1 e0 05             	shl    eax,0x5
c001d64f:	01 d0                	add    eax,edx
c001d651:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d655:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d659:	01 d8                	add    eax,ebx
c001d65b:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d661:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d667:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d66d:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d673:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d679:	89 cd                	mov    ebp,ecx
c001d67b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d67f:	f7 dd                	neg    ebp
c001d681:	c1 e5 15             	shl    ebp,0x15
c001d684:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d68a:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d690:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d69a:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d6a0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d6aa:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6b8:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d6bf:	53                   	push   ebx
c001d6c0:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d6c5:	e8 a6 af 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6ca:	89 d8                	mov    eax,ebx
c001d6cc:	83 c4 10             	add    esp,0x10
c001d6cf:	83 c4 1c             	add    esp,0x1c
c001d6d2:	5b                   	pop    ebx
c001d6d3:	5e                   	pop    esi
c001d6d4:	5f                   	pop    edi
c001d6d5:	5d                   	pop    ebp
c001d6d6:	c3                   	ret    
c001d6d7:	90                   	nop

c001d6d8 <Process::createUserThread()>:
c001d6d8:	83 ec 0c             	sub    esp,0xc
c001d6db:	68 80 00 00 00       	push   0x80
c001d6e0:	6a 00                	push   0x0
c001d6e2:	68 9c d0 01 c0       	push   0xc001d09c
c001d6e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6eb:	e8 e2 fe ff ff       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c001d6f0:	83 c4 1c             	add    esp,0x1c
c001d6f3:	c3                   	ret    

c001d6f4 <setupMultitasking(void (*)())>:
c001d6f4:	56                   	push   esi
c001d6f5:	53                   	push   ebx
c001d6f6:	51                   	push   ecx
c001d6f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6fb:	eb 10                	jmp    c001d70d <setupMultitasking(void (*)())+0x19>
c001d6fd:	83 ec 0c             	sub    esp,0xc
c001d700:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d705:	e8 b8 ae 00 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d70a:	83 c4 10             	add    esp,0x10
c001d70d:	83 ec 0c             	sub    esp,0xc
c001d710:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d715:	e8 84 ae 00 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	84 c0                	test   al,al
c001d71f:	74 dc                	je     c001d6fd <setupMultitasking(void (*)())+0x9>
c001d721:	83 ec 0c             	sub    esp,0xc
c001d724:	68 3f 07 00 00       	push   0x73f
c001d729:	e8 6e 1e ff ff       	call   c000f59c <malloc>
c001d72e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d735:	89 c3                	mov    ebx,eax
c001d737:	6a 00                	push   0x0
c001d739:	68 a4 b7 02 c0       	push   0xc002b7a4
c001d73e:	6a 01                	push   0x1
c001d740:	50                   	push   eax
c001d741:	e8 94 fc ff ff       	call   c001d3da <Process::Process(bool, char const*, Process*, char**)>
c001d746:	83 c4 14             	add    esp,0x14
c001d749:	89 1d f0 0a 03 c0    	mov    DWORD PTR ds:0xc0030af0,ebx
c001d74f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d755:	e8 7d 2b ff ff       	call   c00102d7 <setActiveTerminal(VgaText*)>
c001d75a:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d762:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d76c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d772:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d775:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d77f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d785:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d78b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d795:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d79f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7a9:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7af:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7b9:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7bf:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7c9:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7cf:	58                   	pop    eax
c001d7d0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7d6:	5a                   	pop    edx
c001d7d7:	68 a0 b7 02 c0       	push   0xc002b7a0
c001d7dc:	50                   	push   eax
c001d7dd:	e8 2a 30 fe ff       	call   c000080c <strcpy>
c001d7e2:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d7e9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d7ed:	83 c4 14             	add    esp,0x14
c001d7f0:	5b                   	pop    ebx
c001d7f1:	5e                   	pop    esi
c001d7f2:	e9 5d 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d7f7 <schedule()>:
c001d7f7:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d7fc:	85 c0                	test   eax,eax
c001d7fe:	74 0b                	je     c001d80b <schedule()+0x14>
c001d800:	c7 05 c0 0a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x1
c001d80a:	c3                   	ret    
c001d80b:	53                   	push   ebx
c001d80c:	83 ec 14             	sub    esp,0x14
c001d80f:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d814:	e8 85 ad 00 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	84 c0                	test   al,al
c001d81e:	75 38                	jne    c001d858 <schedule()+0x61>
c001d820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d825:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d828:	4a                   	dec    edx
c001d829:	74 32                	je     c001d85d <schedule()+0x66>
c001d82b:	83 ec 0c             	sub    esp,0xc
c001d82e:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d833:	e8 82 ad 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d838:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001d83f:	89 c3                	mov    ebx,eax
c001d841:	e8 7c ad 00 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d846:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d84d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d850:	e8 9d f8 ff ff       	call   c001d0f2 <switchToThread(ThreadControlBlock*)>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	83 c4 08             	add    esp,0x8
c001d85b:	5b                   	pop    ebx
c001d85c:	c3                   	ret    
c001d85d:	83 ec 08             	sub    esp,0x8
c001d860:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d867:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d86d:	68 e4 0a 03 c0       	push   0xc0030ae4
c001d872:	e8 f9 ad 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d877:	83 c4 10             	add    esp,0x10
c001d87a:	eb af                	jmp    c001d82b <schedule()+0x34>

c001d87c <Semaphore::tryAcquire()>:
c001d87c:	53                   	push   ebx
c001d87d:	83 ec 08             	sub    esp,0x8
c001d880:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d884:	fa                   	cli    
c001d885:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d88a:	8d 50 01             	lea    edx,[eax+0x1]
c001d88d:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001d893:	8b 15 c4 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030ac4
c001d899:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d89c:	89 1d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ebx
c001d8a2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d8a5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d8a7:	7c 2a                	jl     c001d8d3 <Semaphore::tryAcquire()+0x57>
c001d8a9:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c001d8af:	85 d2                	test   edx,edx
c001d8b1:	75 0a                	jne    c001d8bd <Semaphore::tryAcquire()+0x41>
c001d8b3:	8b 15 c0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030ac0
c001d8b9:	85 d2                	test   edx,edx
c001d8bb:	75 5b                	jne    c001d918 <Semaphore::tryAcquire()+0x9c>
c001d8bd:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d8c2:	85 c0                	test   eax,eax
c001d8c4:	74 07                	je     c001d8cd <Semaphore::tryAcquire()+0x51>
c001d8c6:	31 c0                	xor    eax,eax
c001d8c8:	83 c4 08             	add    esp,0x8
c001d8cb:	5b                   	pop    ebx
c001d8cc:	c3                   	ret    
c001d8cd:	fb                   	sti    
c001d8ce:	83 c4 08             	add    esp,0x8
c001d8d1:	5b                   	pop    ebx
c001d8d2:	c3                   	ret    
c001d8d3:	43                   	inc    ebx
c001d8d4:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c001d8da:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d8dd:	85 d2                	test   edx,edx
c001d8df:	75 1f                	jne    c001d900 <Semaphore::tryAcquire()+0x84>
c001d8e1:	8b 0d c0 0a 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ac0
c001d8e7:	85 c9                	test   ecx,ecx
c001d8e9:	74 15                	je     c001d900 <Semaphore::tryAcquire()+0x84>
c001d8eb:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d8f5:	e8 fd fe ff ff       	call   c001d7f7 <schedule()>
c001d8fa:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d8ff:	48                   	dec    eax
c001d900:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d905:	85 c0                	test   eax,eax
c001d907:	75 08                	jne    c001d911 <Semaphore::tryAcquire()+0x95>
c001d909:	fb                   	sti    
c001d90a:	b0 01                	mov    al,0x1
c001d90c:	83 c4 08             	add    esp,0x8
c001d90f:	5b                   	pop    ebx
c001d910:	c3                   	ret    
c001d911:	b0 01                	mov    al,0x1
c001d913:	83 c4 08             	add    esp,0x8
c001d916:	5b                   	pop    ebx
c001d917:	c3                   	ret    
c001d918:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d922:	e8 d0 fe ff ff       	call   c001d7f7 <schedule()>
c001d927:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d92c:	48                   	dec    eax
c001d92d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d932:	85 c0                	test   eax,eax
c001d934:	75 90                	jne    c001d8c6 <Semaphore::tryAcquire()+0x4a>
c001d936:	eb 95                	jmp    c001d8cd <Semaphore::tryAcquire()+0x51>

c001d938 <Semaphore::assertLocked(char const*)>:
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d93f:	fa                   	cli    
c001d940:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001d946:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d94b:	8d 48 01             	lea    ecx,[eax+0x1]
c001d94e:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001d954:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001d956:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001d959:	7c 24                	jl     c001d97f <Semaphore::assertLocked(char const*)+0x47>
c001d95b:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001d960:	85 c0                	test   eax,eax
c001d962:	75 09                	jne    c001d96d <Semaphore::assertLocked(char const*)+0x35>
c001d964:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001d969:	85 c0                	test   eax,eax
c001d96b:	75 29                	jne    c001d996 <Semaphore::assertLocked(char const*)+0x5e>
c001d96d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d972:	48                   	dec    eax
c001d973:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d978:	75 01                	jne    c001d97b <Semaphore::assertLocked(char const*)+0x43>
c001d97a:	fb                   	sti    
c001d97b:	83 c4 0c             	add    esp,0xc
c001d97e:	c3                   	ret    
c001d97f:	83 ec 0c             	sub    esp,0xc
c001d982:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d986:	e8 e0 c2 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001d98b:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001d990:	83 c4 10             	add    esp,0x10
c001d993:	48                   	dec    eax
c001d994:	eb c5                	jmp    c001d95b <Semaphore::assertLocked(char const*)+0x23>
c001d996:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001d9a0:	e8 52 fe ff ff       	call   c001d7f7 <schedule()>
c001d9a5:	eb c6                	jmp    c001d96d <Semaphore::assertLocked(char const*)+0x35>

c001d9a7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d9a7:	83 ec 0c             	sub    esp,0xc
c001d9aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9b6:	e8 3c fe ff ff       	call   c001d7f7 <schedule()>
c001d9bb:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d9c0:	48                   	dec    eax
c001d9c1:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d9c6:	75 01                	jne    c001d9c9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001d9c8:	fb                   	sti    
c001d9c9:	83 c4 0c             	add    esp,0xc
c001d9cc:	c3                   	ret    

c001d9cd <blockTask(TaskState)>:
c001d9cd:	83 ec 0c             	sub    esp,0xc
c001d9d0:	fa                   	cli    
c001d9d1:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001d9d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9e3:	e8 0f fe ff ff       	call   c001d7f7 <schedule()>
c001d9e8:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001d9ed:	48                   	dec    eax
c001d9ee:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001d9f3:	75 01                	jne    c001d9f6 <blockTask(TaskState)+0x29>
c001d9f5:	fb                   	sti    
c001d9f6:	83 c4 0c             	add    esp,0xc
c001d9f9:	c3                   	ret    

c001d9fa <waitTask(int, int*, int)>:
c001d9fa:	83 ec 18             	sub    esp,0x18
c001d9fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da06:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001da09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da12:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001da15:	6a 07                	push   0x7
c001da17:	e8 b1 ff ff ff       	call   c001d9cd <blockTask(TaskState)>
c001da1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001da27:	85 d2                	test   edx,edx
c001da29:	74 0a                	je     c001da35 <waitTask(int, int*, int)+0x3b>
c001da2b:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001da2e:	89 02                	mov    DWORD PTR [edx],eax
c001da30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da35:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001da38:	83 c4 0c             	add    esp,0xc
c001da3b:	c3                   	ret    

c001da3c <nanoSleepUntil(unsigned long long)>:
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da47:	3b 05 10 dc 02 c0    	cmp    eax,DWORD PTR ds:0xc002dc10
c001da4d:	89 d1                	mov    ecx,edx
c001da4f:	1b 0d 14 dc 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dc14
c001da55:	73 04                	jae    c001da5b <nanoSleepUntil(unsigned long long)+0x1f>
c001da57:	83 c4 0c             	add    esp,0xc
c001da5a:	c3                   	ret    
c001da5b:	fa                   	cli    
c001da5c:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001da62:	83 ec 08             	sub    esp,0x8
c001da65:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001da6b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da71:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001da74:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001da77:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da7d:	68 d8 0a 03 c0       	push   0xc0030ad8
c001da82:	e8 e9 ab 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da87:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001da8e:	e8 3a ff ff ff       	call   c001d9cd <blockTask(TaskState)>
c001da93:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001da98:	83 c4 10             	add    esp,0x10
c001da9b:	48                   	dec    eax
c001da9c:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001daa1:	85 c0                	test   eax,eax
c001daa3:	75 09                	jne    c001daae <nanoSleepUntil(unsigned long long)+0x72>
c001daa5:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001daaa:	85 c0                	test   eax,eax
c001daac:	75 12                	jne    c001dac0 <nanoSleepUntil(unsigned long long)+0x84>
c001daae:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dab3:	48                   	dec    eax
c001dab4:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dab9:	75 9c                	jne    c001da57 <nanoSleepUntil(unsigned long long)+0x1b>
c001dabb:	fb                   	sti    
c001dabc:	83 c4 0c             	add    esp,0xc
c001dabf:	c3                   	ret    
c001dac0:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001daca:	e8 28 fd ff ff       	call   c001d7f7 <schedule()>
c001dacf:	eb dd                	jmp    c001daae <nanoSleepUntil(unsigned long long)+0x72>

c001dad1 <nanoSleep(unsigned long long)>:
c001dad1:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c001dad6:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c001dadc:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dae0:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dae4:	e9 53 ff ff ff       	jmp    c001da3c <nanoSleepUntil(unsigned long long)>

c001dae9 <sleep(unsigned long long)>:
c001dae9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001daf1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001daf6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dafa:	01 ca                	add    edx,ecx
c001dafc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db04:	eb cb                	jmp    c001dad1 <nanoSleep(unsigned long long)>

c001db06 <Semaphore::acquire()>:
c001db06:	83 ec 0c             	sub    esp,0xc
c001db09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db0d:	fa                   	cli    
c001db0e:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001db13:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001db19:	8d 48 01             	lea    ecx,[eax+0x1]
c001db1c:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001db22:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001db25:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001db27:	7d 28                	jge    c001db51 <Semaphore::acquire()+0x4b>
c001db29:	41                   	inc    ecx
c001db2a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001db2d:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001db32:	85 c0                	test   eax,eax
c001db34:	75 09                	jne    c001db3f <Semaphore::acquire()+0x39>
c001db36:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001db3b:	85 c0                	test   eax,eax
c001db3d:	75 4e                	jne    c001db8d <Semaphore::acquire()+0x87>
c001db3f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001db44:	48                   	dec    eax
c001db45:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001db4a:	75 01                	jne    c001db4d <Semaphore::acquire()+0x47>
c001db4c:	fb                   	sti    
c001db4d:	83 c4 0c             	add    esp,0xc
c001db50:	c3                   	ret    
c001db51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001db5d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001db60:	85 c9                	test   ecx,ecx
c001db62:	74 3a                	je     c001db9e <Semaphore::acquire()+0x98>
c001db64:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001db67:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db6d:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001db70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001db7b:	6a 05                	push   0x5
c001db7d:	e8 4b fe ff ff       	call   c001d9cd <blockTask(TaskState)>
c001db82:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001db87:	83 c4 10             	add    esp,0x10
c001db8a:	48                   	dec    eax
c001db8b:	eb a0                	jmp    c001db2d <Semaphore::acquire()+0x27>
c001db8d:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001db97:	e8 5b fc ff ff       	call   c001d7f7 <schedule()>
c001db9c:	eb a1                	jmp    c001db3f <Semaphore::acquire()+0x39>
c001db9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dba3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dba6:	eb c8                	jmp    c001db70 <Semaphore::acquire()+0x6a>

c001dba8 <taskReturned>:
c001dba8:	83 ec 18             	sub    esp,0x18
c001dbab:	68 20 b8 02 c0       	push   0xc002b820
c001dbb0:	e8 b6 c0 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001dbb5:	83 c4 10             	add    esp,0x10
c001dbb8:	83 ec 0c             	sub    esp,0xc
c001dbbb:	6a 02                	push   0x2
c001dbbd:	e8 0b fe ff ff       	call   c001d9cd <blockTask(TaskState)>
c001dbc2:	fa                   	cli    
c001dbc3:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dbc9:	e8 29 fc ff ff       	call   c001d7f7 <schedule()>
c001dbce:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dbd3:	83 c4 10             	add    esp,0x10
c001dbd6:	48                   	dec    eax
c001dbd7:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dbdc:	85 c0                	test   eax,eax
c001dbde:	75 d8                	jne    c001dbb8 <taskReturned+0x10>
c001dbe0:	fb                   	sti    
c001dbe1:	eb d5                	jmp    c001dbb8 <taskReturned+0x10>

c001dbe3 <Thr::processFromPID(int)>:
c001dbe3:	57                   	push   edi
c001dbe4:	56                   	push   esi
c001dbe5:	53                   	push   ebx
c001dbe6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbea:	fa                   	cli    
c001dbeb:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dbf1:	83 ec 0c             	sub    esp,0xc
c001dbf4:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dbf9:	e8 bc a9 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dbfe:	83 c4 10             	add    esp,0x10
c001dc01:	89 c7                	mov    edi,eax
c001dc03:	eb 14                	jmp    c001dc19 <Thr::processFromPID(int)+0x36>
c001dc05:	83 ec 0c             	sub    esp,0xc
c001dc08:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc0d:	e8 a8 a9 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	39 f8                	cmp    eax,edi
c001dc17:	74 49                	je     c001dc62 <Thr::processFromPID(int)+0x7f>
c001dc19:	83 ec 0c             	sub    esp,0xc
c001dc1c:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc21:	e8 94 a9 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc26:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001dc2d:	89 c3                	mov    ebx,eax
c001dc2f:	e8 8e a9 00 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc34:	58                   	pop    eax
c001dc35:	5a                   	pop    edx
c001dc36:	53                   	push   ebx
c001dc37:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc3c:	e8 2f aa 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	39 30                	cmp    DWORD PTR [eax],esi
c001dc49:	75 ba                	jne    c001dc05 <Thr::processFromPID(int)+0x22>
c001dc4b:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dc50:	48                   	dec    eax
c001dc51:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dc56:	74 07                	je     c001dc5f <Thr::processFromPID(int)+0x7c>
c001dc58:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc5b:	5b                   	pop    ebx
c001dc5c:	5e                   	pop    esi
c001dc5d:	5f                   	pop    edi
c001dc5e:	c3                   	ret    
c001dc5f:	fb                   	sti    
c001dc60:	eb f6                	jmp    c001dc58 <Thr::processFromPID(int)+0x75>
c001dc62:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dc67:	48                   	dec    eax
c001dc68:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dc6d:	75 05                	jne    c001dc74 <Thr::processFromPID(int)+0x91>
c001dc6f:	fb                   	sti    
c001dc70:	5b                   	pop    ebx
c001dc71:	5e                   	pop    esi
c001dc72:	5f                   	pop    edi
c001dc73:	c3                   	ret    
c001dc74:	5b                   	pop    ebx
c001dc75:	31 c0                	xor    eax,eax
c001dc77:	5e                   	pop    esi
c001dc78:	5f                   	pop    edi
c001dc79:	c3                   	ret    

c001dc7a <unblockTask(ThreadControlBlock*)>:
c001dc7a:	53                   	push   ebx
c001dc7b:	83 ec 08             	sub    esp,0x8
c001dc7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc82:	fa                   	cli    
c001dc83:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dc89:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc8c:	85 c0                	test   eax,eax
c001dc8e:	74 5a                	je     c001dcea <unblockTask(ThreadControlBlock*)+0x70>
c001dc90:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dc93:	48                   	dec    eax
c001dc94:	74 31                	je     c001dcc7 <unblockTask(ThreadControlBlock*)+0x4d>
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dc9e:	e8 17 a9 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dca3:	83 c4 10             	add    esp,0x10
c001dca6:	85 c0                	test   eax,eax
c001dca8:	75 17                	jne    c001dcc1 <unblockTask(ThreadControlBlock*)+0x47>
c001dcaa:	eb 50                	jmp    c001dcfc <unblockTask(ThreadControlBlock*)+0x82>
c001dcac:	83 ec 08             	sub    esp,0x8
c001dcaf:	50                   	push   eax
c001dcb0:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dcb5:	e8 88 ac 00 00       	call   c0028942 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dcba:	83 c4 10             	add    esp,0x10
c001dcbd:	85 c0                	test   eax,eax
c001dcbf:	74 3b                	je     c001dcfc <unblockTask(ThreadControlBlock*)+0x82>
c001dcc1:	39 c3                	cmp    ebx,eax
c001dcc3:	75 e7                	jne    c001dcac <unblockTask(ThreadControlBlock*)+0x32>
c001dcc5:	eb 10                	jmp    c001dcd7 <unblockTask(ThreadControlBlock*)+0x5d>
c001dcc7:	83 ec 0c             	sub    esp,0xc
c001dcca:	68 c2 b7 02 c0       	push   0xc002b7c2
c001dccf:	e8 37 48 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001dcd4:	83 c4 10             	add    esp,0x10
c001dcd7:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dcdc:	48                   	dec    eax
c001dcdd:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dce2:	75 01                	jne    c001dce5 <unblockTask(ThreadControlBlock*)+0x6b>
c001dce4:	fb                   	sti    
c001dce5:	83 c4 08             	add    esp,0x8
c001dce8:	5b                   	pop    ebx
c001dce9:	c3                   	ret    
c001dcea:	83 ec 0c             	sub    esp,0xc
c001dced:	68 ab b7 02 c0       	push   0xc002b7ab
c001dcf2:	e8 14 48 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001dcf7:	83 c4 10             	add    esp,0x10
c001dcfa:	eb db                	jmp    c001dcd7 <unblockTask(ThreadControlBlock*)+0x5d>
c001dcfc:	83 ec 08             	sub    esp,0x8
c001dcff:	53                   	push   ebx
c001dd00:	68 e4 0a 03 c0       	push   0xc0030ae4
c001dd05:	e8 66 a9 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd0a:	83 c4 10             	add    esp,0x10
c001dd0d:	eb c8                	jmp    c001dcd7 <unblockTask(ThreadControlBlock*)+0x5d>

c001dd0f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd0f:	55                   	push   ebp
c001dd10:	57                   	push   edi
c001dd11:	56                   	push   esi
c001dd12:	53                   	push   ebx
c001dd13:	83 ec 1c             	sub    esp,0x1c
c001dd16:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd1a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd1d:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd23:	85 ff                	test   edi,edi
c001dd25:	7e 20                	jle    c001dd47 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd27:	31 f6                	xor    esi,esi
c001dd29:	83 ec 0c             	sub    esp,0xc
c001dd2c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd33:	46                   	inc    esi
c001dd34:	e8 73 18 ff ff       	call   c000f5ac <free>
c001dd39:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dd45:	7f e2                	jg     c001dd29 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dd47:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd51:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dd56:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dd59:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dd5c:	d3 c0                	rol    eax,cl
c001dd5e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dd65:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd68:	89 f7                	mov    edi,esi
c001dd6a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dd72:	0f 85 64 01 00 00    	jne    c001dedc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dd78:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dd7e:	85 ed                	test   ebp,ebp
c001dd80:	74 1b                	je     c001dd9d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	55                   	push   ebp
c001dd86:	e8 85 bc ff ff       	call   c0019a10 <EnvVarContainer::~EnvVarContainer()>
c001dd8b:	59                   	pop    ecx
c001dd8c:	5e                   	pop    esi
c001dd8d:	6a 0c                	push   0xc
c001dd8f:	55                   	push   ebp
c001dd90:	e8 9e 46 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001dd95:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd98:	83 c4 10             	add    esp,0x10
c001dd9b:	89 f7                	mov    edi,esi
c001dd9d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dda3:	85 c0                	test   eax,eax
c001dda5:	0f 84 aa 00 00 00    	je     c001de55 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddab:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ddae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ddb2:	31 c9                	xor    ecx,ecx
c001ddb4:	eb 10                	jmp    c001ddc6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ddb6:	41                   	inc    ecx
c001ddb7:	83 f9 10             	cmp    ecx,0x10
c001ddba:	0f 84 95 00 00 00    	je     c001de55 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddc0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddc6:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ddcd:	d3 fa                	sar    edx,cl
c001ddcf:	83 e2 01             	and    edx,0x1
c001ddd2:	74 e2                	je     c001ddb6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddd4:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ddd7:	01 ca                	add    edx,ecx
c001ddd9:	89 d5                	mov    ebp,edx
c001dddb:	c1 e5 05             	shl    ebp,0x5
c001ddde:	01 ea                	add    edx,ebp
c001dde0:	01 d0                	add    eax,edx
c001dde2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dde8:	83 fd 07             	cmp    ebp,0x7
c001ddeb:	75 c9                	jne    c001ddb6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dded:	05 40 02 00 00       	add    eax,0x240
c001ddf2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ddf5:	83 fd ff             	cmp    ebp,0xffffffff
c001ddf8:	0f 8c e6 00 00 00    	jl     c001dee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001ddfe:	0f 84 97 01 00 00    	je     c001df9b <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001de04:	85 ed                	test   ebp,ebp
c001de06:	0f 84 7e 01 00 00    	je     c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001de0c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de0e:	75 a6                	jne    c001ddb6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de10:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de1a:	01 d0                	add    eax,edx
c001de1c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de20:	83 ec 0c             	sub    esp,0xc
c001de23:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de29:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de2c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de32:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de39:	50                   	push   eax
c001de3a:	e8 3b fe ff ff       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001de3f:	83 c4 10             	add    esp,0x10
c001de42:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de45:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de49:	89 f7                	mov    edi,esi
c001de4b:	41                   	inc    ecx
c001de4c:	83 f9 10             	cmp    ecx,0x10
c001de4f:	0f 85 6b ff ff ff    	jne    c001ddc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001de55:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001de5b:	85 c0                	test   eax,eax
c001de5d:	74 5d                	je     c001debc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de5f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001de65:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001de6b:	74 4f                	je     c001debc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de6d:	83 ec 0c             	sub    esp,0xc
c001de70:	68 e4 0a 03 c0       	push   0xc0030ae4
c001de75:	e8 40 a7 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de7a:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001de81:	89 c7                	mov    edi,eax
c001de83:	e8 16 a7 00 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	84 c0                	test   al,al
c001de8d:	0f 84 c2 00 00 00    	je     c001df55 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001de93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de96:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de9c:	85 d2                	test   edx,edx
c001de9e:	74 0f                	je     c001deaf <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	8b 02                	mov    eax,DWORD PTR [edx]
c001dea5:	52                   	push   edx
c001dea6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dea9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deac:	83 c4 10             	add    esp,0x10
c001deaf:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001deb9:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001debc:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dec2:	85 db                	test   ebx,ebx
c001dec4:	74 16                	je     c001dedc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dec6:	83 ec 0c             	sub    esp,0xc
c001dec9:	53                   	push   ebx
c001deca:	e8 13 39 ff ff       	call   c00117e2 <VAS::~VAS()>
c001decf:	58                   	pop    eax
c001ded0:	5a                   	pop    edx
c001ded1:	6a 14                	push   0x14
c001ded3:	53                   	push   ebx
c001ded4:	e8 5a 45 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001ded9:	83 c4 10             	add    esp,0x10
c001dedc:	83 c4 1c             	add    esp,0x1c
c001dedf:	5b                   	pop    ebx
c001dee0:	5e                   	pop    esi
c001dee1:	5f                   	pop    edi
c001dee2:	5d                   	pop    ebp
c001dee3:	c3                   	ret    
c001dee4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dee8:	83 ec 0c             	sub    esp,0xc
c001deeb:	68 54 b8 02 c0       	push   0xc002b854
c001def0:	e8 76 bd ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001def5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001def8:	83 c4 10             	add    esp,0x10
c001defb:	89 f7                	mov    edi,esi
c001defd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df01:	e9 b0 fe ff ff       	jmp    c001ddb6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df0c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001df12:	75 1c                	jne    c001df30 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	68 bc b8 02 c0       	push   0xc002b8bc
c001df1c:	e8 ea 45 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001df21:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df28:	e8 a0 fa ff ff       	call   c001d9cd <blockTask(TaskState)>
c001df2d:	83 c4 10             	add    esp,0x10
c001df30:	83 ec 08             	sub    esp,0x8
c001df33:	56                   	push   esi
c001df34:	68 e4 0a 03 c0       	push   0xc0030ae4
c001df39:	e8 32 a7 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df3e:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001df45:	e8 70 a6 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	39 f8                	cmp    eax,edi
c001df4f:	0f 84 3e ff ff ff    	je     c001de93 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001df55:	83 ec 0c             	sub    esp,0xc
c001df58:	68 e4 0a 03 c0       	push   0xc0030ae4
c001df5d:	e8 58 a6 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df62:	c7 04 24 e4 0a 03 c0 	mov    DWORD PTR [esp],0xc0030ae4
c001df69:	89 c6                	mov    esi,eax
c001df6b:	e8 52 a6 00 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df70:	83 c4 10             	add    esp,0x10
c001df73:	39 f3                	cmp    ebx,esi
c001df75:	74 b9                	je     c001df30 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df77:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001df7a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df7d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001df83:	75 ab                	jne    c001df30 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df85:	e9 7c ff ff ff       	jmp    c001df06 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001df8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	68 88 b8 02 c0       	push   0xc002b888
c001df96:	e9 55 ff ff ff       	jmp    c001def0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001df9b:	8b 36                	mov    esi,DWORD PTR [esi]
c001df9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfa1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dfa4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfa7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dfad:	01 d7                	add    edi,edx
c001dfaf:	89 f8                	mov    eax,edi
c001dfb1:	e9 66 fe ff ff       	jmp    c001de1c <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dfb6 <cleanerTaskFunction(void*)>:
c001dfb6:	53                   	push   ebx
c001dfb7:	83 ec 08             	sub    esp,0x8
c001dfba:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dfbf:	48                   	dec    eax
c001dfc0:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dfc5:	75 01                	jne    c001dfc8 <cleanerTaskFunction(void*)+0x12>
c001dfc7:	fb                   	sti    
c001dfc8:	fa                   	cli    
c001dfc9:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001dfce:	80 3d ac 0a 03 c0 00 	cmp    BYTE PTR ds:0xc0030aac,0x0
c001dfd5:	8d 50 01             	lea    edx,[eax+0x1]
c001dfd8:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001dfde:	0f 84 a1 00 00 00    	je     c001e085 <cleanerTaskFunction(void*)+0xcf>
c001dfe4:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001dfe9:	85 c0                	test   eax,eax
c001dfeb:	75 01                	jne    c001dfee <cleanerTaskFunction(void*)+0x38>
c001dfed:	fb                   	sti    
c001dfee:	c6 05 ac 0a 03 c0 00 	mov    BYTE PTR ds:0xc0030aac,0x0
c001dff5:	fa                   	cli    
c001dff6:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001dffc:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001e002:	fa                   	cli    
c001e003:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e009:	eb 26                	jmp    c001e031 <cleanerTaskFunction(void*)+0x7b>
c001e00b:	83 ec 0c             	sub    esp,0xc
c001e00e:	68 cc 0a 03 c0       	push   0xc0030acc
c001e013:	e8 a2 a5 00 00       	call   c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e018:	c7 04 24 cc 0a 03 c0 	mov    DWORD PTR [esp],0xc0030acc
c001e01f:	89 c3                	mov    ebx,eax
c001e021:	e8 9c a5 00 00       	call   c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e029:	e8 e1 fc ff ff       	call   c001dd0f <cleanupTerminatedTask(ThreadControlBlock*)>
c001e02e:	83 c4 10             	add    esp,0x10
c001e031:	83 ec 0c             	sub    esp,0xc
c001e034:	68 cc 0a 03 c0       	push   0xc0030acc
c001e039:	e8 60 a5 00 00       	call   c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e03e:	83 c4 10             	add    esp,0x10
c001e041:	84 c0                	test   al,al
c001e043:	74 c6                	je     c001e00b <cleanerTaskFunction(void*)+0x55>
c001e045:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e04a:	48                   	dec    eax
c001e04b:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e050:	75 01                	jne    c001e053 <cleanerTaskFunction(void*)+0x9d>
c001e052:	fb                   	sti    
c001e053:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e058:	48                   	dec    eax
c001e059:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e05e:	0f 85 56 ff ff ff    	jne    c001dfba <cleanerTaskFunction(void*)+0x4>
c001e064:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001e069:	85 c0                	test   eax,eax
c001e06b:	0f 84 49 ff ff ff    	je     c001dfba <cleanerTaskFunction(void*)+0x4>
c001e071:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e07b:	e8 77 f7 ff ff       	call   c001d7f7 <schedule()>
c001e080:	e9 35 ff ff ff       	jmp    c001dfba <cleanerTaskFunction(void*)+0x4>
c001e085:	83 ec 0c             	sub    esp,0xc
c001e088:	6a 02                	push   0x2
c001e08a:	e8 18 f9 ff ff       	call   c001d9a7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e08f:	83 c4 10             	add    esp,0x10
c001e092:	e9 57 ff ff ff       	jmp    c001dfee <cleanerTaskFunction(void*)+0x38>

c001e097 <terminateTask(int)>:
c001e097:	83 ec 14             	sub    esp,0x14
c001e09a:	fa                   	cli    
c001e09b:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e0a1:	ff 05 c4 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac4
c001e0a7:	fa                   	cli    
c001e0a8:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e0ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0b7:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e0ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0bf:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e0c2:	50                   	push   eax
c001e0c3:	68 cc 0a 03 c0       	push   0xc0030acc
c001e0c8:	e8 a3 a5 00 00       	call   c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0d2:	83 c4 10             	add    esp,0x10
c001e0d5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e0dc:	a1 a8 0a 03 c0       	mov    eax,ds:0xc0030aa8
c001e0e1:	85 c0                	test   eax,eax
c001e0e3:	74 53                	je     c001e138 <terminateTask(int)+0xa1>
c001e0e5:	83 ec 0c             	sub    esp,0xc
c001e0e8:	c6 05 ac 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aac,0x1
c001e0ef:	50                   	push   eax
c001e0f0:	e8 85 fb ff ff       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001e0f5:	83 c4 10             	add    esp,0x10
c001e0f8:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e0fd:	48                   	dec    eax
c001e0fe:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e103:	75 01                	jne    c001e106 <terminateTask(int)+0x6f>
c001e105:	fb                   	sti    
c001e106:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e10b:	48                   	dec    eax
c001e10c:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e111:	75 09                	jne    c001e11c <terminateTask(int)+0x85>
c001e113:	83 3d c0 0a 03 c0 00 	cmp    DWORD PTR ds:0xc0030ac0,0x0
c001e11a:	75 2e                	jne    c001e14a <terminateTask(int)+0xb3>
c001e11c:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e121:	48                   	dec    eax
c001e122:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e127:	75 01                	jne    c001e12a <terminateTask(int)+0x93>
c001e129:	fb                   	sti    
c001e12a:	fa                   	cli    
c001e12b:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e131:	e8 c1 f6 ff ff       	call   c001d7f7 <schedule()>
c001e136:	eb e4                	jmp    c001e11c <terminateTask(int)+0x85>
c001e138:	83 ec 0c             	sub    esp,0xc
c001e13b:	68 d9 b7 02 c0       	push   0xc002b7d9
c001e140:	e8 c6 43 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001e145:	83 c4 10             	add    esp,0x10
c001e148:	eb ae                	jmp    c001e0f8 <terminateTask(int)+0x61>
c001e14a:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e154:	eb db                	jmp    c001e131 <terminateTask(int)+0x9a>

c001e156 <Thr::terminateFromIRQ(int)>:
c001e156:	83 ec 18             	sub    esp,0x18
c001e159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e15d:	e8 35 ff ff ff       	call   c001e097 <terminateTask(int)>

c001e162 <Semaphore::release()>:
c001e162:	83 ec 0c             	sub    esp,0xc
c001e165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e169:	fa                   	cli    
c001e16a:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e16f:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e175:	8d 48 01             	lea    ecx,[eax+0x1]
c001e178:	89 0d c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,ecx
c001e17e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e181:	85 c9                	test   ecx,ecx
c001e183:	74 3c                	je     c001e1c1 <Semaphore::release()+0x5f>
c001e185:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e18e:	51                   	push   ecx
c001e18f:	e8 e6 fa ff ff       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001e194:	a1 c4 0a 03 c0       	mov    eax,ds:0xc0030ac4
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	48                   	dec    eax
c001e19d:	a3 c4 0a 03 c0       	mov    ds:0xc0030ac4,eax
c001e1a2:	85 c0                	test   eax,eax
c001e1a4:	75 09                	jne    c001e1af <Semaphore::release()+0x4d>
c001e1a6:	a1 c0 0a 03 c0       	mov    eax,ds:0xc0030ac0
c001e1ab:	85 c0                	test   eax,eax
c001e1ad:	75 17                	jne    c001e1c6 <Semaphore::release()+0x64>
c001e1af:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e1b4:	48                   	dec    eax
c001e1b5:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e1ba:	75 01                	jne    c001e1bd <Semaphore::release()+0x5b>
c001e1bc:	fb                   	sti    
c001e1bd:	83 c4 0c             	add    esp,0xc
c001e1c0:	c3                   	ret    
c001e1c1:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e1c4:	eb d7                	jmp    c001e19d <Semaphore::release()+0x3b>
c001e1c6:	c7 05 c0 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ac0,0x0
c001e1d0:	e8 22 f6 ff ff       	call   c001d7f7 <schedule()>
c001e1d5:	eb d8                	jmp    c001e1af <Semaphore::release()+0x4d>

c001e1d7 <__static_initialization_and_destruction_0(int, int)>:
c001e1d7:	83 ec 0c             	sub    esp,0xc
c001e1da:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e1df:	0f 85 88 00 00 00    	jne    c001e26d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1e5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e1ed:	75 7e                	jne    c001e26d <__static_initialization_and_destruction_0(int, int)+0x96>
c001e1ef:	83 ec 0c             	sub    esp,0xc
c001e1f2:	68 e4 0a 03 c0       	push   0xc0030ae4
c001e1f7:	e8 04 a7 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e1fc:	83 c4 10             	add    esp,0x10
c001e1ff:	83 ec 04             	sub    esp,0x4
c001e202:	68 70 c3 02 c0       	push   0xc002c370
c001e207:	68 e4 0a 03 c0       	push   0xc0030ae4
c001e20c:	68 b4 88 02 c0       	push   0xc00288b4
c001e211:	e8 97 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	83 ec 0c             	sub    esp,0xc
c001e21c:	68 d8 0a 03 c0       	push   0xc0030ad8
c001e221:	e8 da a6 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e226:	83 c4 10             	add    esp,0x10
c001e229:	83 ec 04             	sub    esp,0x4
c001e22c:	68 70 c3 02 c0       	push   0xc002c370
c001e231:	68 d8 0a 03 c0       	push   0xc0030ad8
c001e236:	68 b4 88 02 c0       	push   0xc00288b4
c001e23b:	e8 6d 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e240:	83 c4 10             	add    esp,0x10
c001e243:	83 ec 0c             	sub    esp,0xc
c001e246:	68 cc 0a 03 c0       	push   0xc0030acc
c001e24b:	e8 b0 a6 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e250:	83 c4 10             	add    esp,0x10
c001e253:	83 ec 04             	sub    esp,0x4
c001e256:	68 70 c3 02 c0       	push   0xc002c370
c001e25b:	68 cc 0a 03 c0       	push   0xc0030acc
c001e260:	68 b4 88 02 c0       	push   0xc00288b4
c001e265:	e8 43 41 ff ff       	call   c00123ad <__cxa_atexit>
c001e26a:	83 c4 10             	add    esp,0x10
c001e26d:	90                   	nop
c001e26e:	83 c4 0c             	add    esp,0xc
c001e271:	c3                   	ret    

c001e272 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e272:	83 ec 0c             	sub    esp,0xc
c001e275:	83 ec 08             	sub    esp,0x8
c001e278:	68 ff ff 00 00       	push   0xffff
c001e27d:	6a 01                	push   0x1
c001e27f:	e8 53 ff ff ff       	call   c001e1d7 <__static_initialization_and_destruction_0(int, int)>
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	83 c4 0c             	add    esp,0xc
c001e28a:	c3                   	ret    

c001e28b <Vm::inbv(unsigned short)>:
c001e28b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e28f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e294:	75 06                	jne    c001e29c <Vm::inbv(unsigned short)+0x11>
c001e296:	a0 2c 0b 03 c0       	mov    al,ds:0xc0030b2c
c001e29b:	c3                   	ret    
c001e29c:	ec                   	in     al,dx
c001e29d:	c3                   	ret    

c001e29e <Vm::outbv(unsigned short, unsigned char)>:
c001e29e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2a6:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2ab:	75 25                	jne    c001e2d2 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e2ad:	8b 0d 2c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b2c
c001e2b3:	8d 51 01             	lea    edx,[ecx+0x1]
c001e2b6:	88 81 40 0b 03 c0    	mov    BYTE PTR [ecx-0x3ffcf4c0],al
c001e2bc:	89 15 2c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b2c,edx
c001e2c2:	83 fa 20             	cmp    edx,0x20
c001e2c5:	75 0c                	jne    c001e2d3 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e2c7:	c7 05 2c 0b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x1f
c001e2d1:	c3                   	ret    
c001e2d2:	ee                   	out    dx,al
c001e2d3:	c3                   	ret    

c001e2d4 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e2d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e2d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e2de:	c1 e0 04             	shl    eax,0x4
c001e2e1:	01 d0                	add    eax,edx
c001e2e3:	c3                   	ret    

c001e2e4 <Vm::getSegment(unsigned int)>:
c001e2e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2e8:	c1 e8 10             	shr    eax,0x10
c001e2eb:	c3                   	ret    

c001e2ec <Vm::getOffset(unsigned int)>:
c001e2ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2f0:	c3                   	ret    

c001e2f1 <Vm::mainloop2()>:
c001e2f1:	83 ec 18             	sub    esp,0x18
c001e2f4:	fa                   	cli    
c001e2f5:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e2fb:	6a 02                	push   0x2
c001e2fd:	c6 05 25 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b25,0x1
c001e304:	e8 9e f6 ff ff       	call   c001d9a7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e309:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e30e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e312:	52                   	push   edx
c001e313:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e317:	52                   	push   edx
c001e318:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e31c:	52                   	push   edx
c001e31d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e321:	50                   	push   eax
c001e322:	e8 d3 1f fe ff       	call   c00002fa <goToVM86>
c001e327:	83 c4 2c             	add    esp,0x2c
c001e32a:	c3                   	ret    

c001e32b <Vm::mainVm8086Loop(void*)>:
c001e32b:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e330:	48                   	dec    eax
c001e331:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e336:	75 01                	jne    c001e339 <Vm::mainVm8086Loop(void*)+0xe>
c001e338:	fb                   	sti    
c001e339:	eb b6                	jmp    c001e2f1 <Vm::mainloop2()>

c001e33b <Vm::mainloop3(unsigned long)>:
c001e33b:	83 ec 18             	sub    esp,0x18
c001e33e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e342:	fa                   	cli    
c001e343:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e349:	6a 02                	push   0x2
c001e34b:	c6 05 24 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b24,0x1
c001e352:	a3 20 0b 03 c0       	mov    ds:0xc0030b20,eax
c001e357:	e8 4b f6 ff ff       	call   c001d9a7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e35c:	83 c4 1c             	add    esp,0x1c
c001e35f:	eb 90                	jmp    c001e2f1 <Vm::mainloop2()>

c001e361 <Vm::initialise8086()>:
c001e361:	83 ec 0c             	sub    esp,0xc
c001e364:	68 80 00 00 00       	push   0x80
c001e369:	6a 00                	push   0x0
c001e36b:	68 2b e3 01 c0       	push   0xc001e32b
c001e370:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001e376:	e8 57 f2 ff ff       	call   c001d5d2 <Process::createThread(void (*)(void*), void*, int)>
c001e37b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e382:	a3 28 0b 03 c0       	mov    ds:0xc0030b28,eax
c001e387:	68 00 01 00 00       	push   0x100
c001e38c:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c001e391:	6a 00                	push   0x0
c001e393:	6a 00                	push   0x0
c001e395:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e39b:	e8 b4 38 ff ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e3a0:	83 c4 2c             	add    esp,0x2c
c001e3a3:	c3                   	ret    

c001e3a4 <Vm::finish8086()>:
c001e3a4:	53                   	push   ebx
c001e3a5:	83 ec 08             	sub    esp,0x8
c001e3a8:	fa                   	cli    
c001e3a9:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e3af:	80 3d 24 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b24,0x0
c001e3b6:	75 15                	jne    c001e3cd <Vm::finish8086()+0x29>
c001e3b8:	e8 3a f4 ff ff       	call   c001d7f7 <schedule()>
c001e3bd:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e3c2:	48                   	dec    eax
c001e3c3:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e3c8:	75 de                	jne    c001e3a8 <Vm::finish8086()+0x4>
c001e3ca:	fb                   	sti    
c001e3cb:	eb db                	jmp    c001e3a8 <Vm::finish8086()+0x4>
c001e3cd:	83 ec 0c             	sub    esp,0xc
c001e3d0:	8b 1d 20 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b20
c001e3d6:	ff 35 28 0b 03 c0    	push   DWORD PTR ds:0xc0030b28
c001e3dc:	c6 05 24 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b24,0x0
c001e3e3:	e8 92 f8 ff ff       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001e3e8:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e3ed:	83 c4 10             	add    esp,0x10
c001e3f0:	8d 50 ff             	lea    edx,[eax-0x1]
c001e3f3:	89 15 c8 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac8,edx
c001e3f9:	85 d2                	test   edx,edx
c001e3fb:	75 01                	jne    c001e3fe <Vm::finish8086()+0x5a>
c001e3fd:	fb                   	sti    
c001e3fe:	89 d8                	mov    eax,ebx
c001e400:	83 c4 08             	add    esp,0x8
c001e403:	5b                   	pop    ebx
c001e404:	c3                   	ret    

c001e405 <Vm::getOutput8086(unsigned char*)>:
c001e405:	57                   	push   edi
c001e406:	8b 0d 2c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b2c
c001e40c:	56                   	push   esi
c001e40d:	be 40 0b 03 c0       	mov    esi,0xc0030b40
c001e412:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e416:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e418:	a1 2c 0b 03 c0       	mov    eax,ds:0xc0030b2c
c001e41d:	5e                   	pop    esi
c001e41e:	c7 05 2c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x0
c001e428:	5f                   	pop    edi
c001e429:	c3                   	ret    

c001e42a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e42a:	55                   	push   ebp
c001e42b:	57                   	push   edi
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	83 ec 2c             	sub    esp,0x2c
c001e431:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e435:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e439:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e43d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e441:	fa                   	cli    
c001e442:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c001e448:	0f b6 35 25 0b 03 c0 	movzx  esi,BYTE PTR ds:0xc0030b25
c001e44f:	89 f0                	mov    eax,esi
c001e451:	84 c0                	test   al,al
c001e453:	75 1d                	jne    c001e472 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e459:	e8 99 f3 ff ff       	call   c001d7f7 <schedule()>
c001e45e:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e467:	48                   	dec    eax
c001e468:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e46d:	75 d2                	jne    c001e441 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e46f:	fb                   	sti    
c001e470:	eb cf                	jmp    c001e441 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e472:	a1 28 0b 03 c0       	mov    eax,ds:0xc0030b28
c001e477:	c7 05 2c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b2c,0x0
c001e481:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e485:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e489:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e48d:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e491:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e495:	50                   	push   eax
c001e496:	6a 20                	push   0x20
c001e498:	6a 00                	push   0x0
c001e49a:	68 40 0b 03 c0       	push   0xc0030b40
c001e49f:	e8 ac 22 fe ff       	call   c0000750 <memset>
c001e4a4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e4ab:	e8 ec 10 ff ff       	call   c000f59c <malloc>
c001e4b0:	83 c4 0c             	add    esp,0xc
c001e4b3:	89 c3                	mov    ebx,eax
c001e4b5:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c001e4bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4bf:	50                   	push   eax
c001e4c0:	e8 a5 45 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c001e4c5:	83 c4 10             	add    esp,0x10
c001e4c8:	85 db                	test   ebx,ebx
c001e4ca:	75 0a                	jne    c001e4d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e4cc:	83 ec 0c             	sub    esp,0xc
c001e4cf:	68 e4 b8 02 c0       	push   0xc002b8e4
c001e4d4:	eb 3e                	jmp    c001e514 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4d6:	50                   	push   eax
c001e4d7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e4db:	50                   	push   eax
c001e4dc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e4e0:	50                   	push   eax
c001e4e1:	53                   	push   ebx
c001e4e2:	e8 93 48 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c001e4e7:	83 c4 10             	add    esp,0x10
c001e4ea:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e4ef:	74 0a                	je     c001e4fb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e4f1:	83 ec 0c             	sub    esp,0xc
c001e4f4:	68 f8 b8 02 c0       	push   0xc002b8f8
c001e4f9:	eb 19                	jmp    c001e514 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4fb:	51                   	push   ecx
c001e4fc:	51                   	push   ecx
c001e4fd:	6a 01                	push   0x1
c001e4ff:	53                   	push   ebx
c001e500:	e8 c9 45 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c001e505:	83 c4 10             	add    esp,0x10
c001e508:	85 c0                	test   eax,eax
c001e50a:	74 24                	je     c001e530 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	68 11 b9 02 c0       	push   0xc002b911
c001e514:	e8 52 b7 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001e519:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	48                   	dec    eax
c001e522:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e527:	85 c0                	test   eax,eax
c001e529:	75 01                	jne    c001e52c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e52b:	fb                   	sti    
c001e52c:	31 f6                	xor    esi,esi
c001e52e:	eb 58                	jmp    c001e588 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e530:	0f b7 ed             	movzx  ebp,bp
c001e533:	50                   	push   eax
c001e534:	0f b7 ff             	movzx  edi,di
c001e537:	50                   	push   eax
c001e538:	55                   	push   ebp
c001e539:	57                   	push   edi
c001e53a:	e8 95 fd ff ff       	call   c001e2d4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e53f:	5a                   	pop    edx
c001e540:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e542:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e546:	51                   	push   ecx
c001e547:	50                   	push   eax
c001e548:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e54c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e550:	53                   	push   ebx
c001e551:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e554:	83 c4 14             	add    esp,0x14
c001e557:	53                   	push   ebx
c001e558:	e8 cf 45 ff ff       	call   c0012b2c <File::close()>
c001e55d:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c001e562:	83 c4 10             	add    esp,0x10
c001e565:	48                   	dec    eax
c001e566:	c6 05 25 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b25,0x0
c001e56d:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c001e572:	85 c0                	test   eax,eax
c001e574:	75 01                	jne    c001e577 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e576:	fb                   	sti    
c001e577:	83 ec 0c             	sub    esp,0xc
c001e57a:	ff 35 28 0b 03 c0    	push   DWORD PTR ds:0xc0030b28
c001e580:	e8 f5 f6 ff ff       	call   c001dc7a <unblockTask(ThreadControlBlock*)>
c001e585:	83 c4 10             	add    esp,0x10
c001e588:	83 c4 2c             	add    esp,0x2c
c001e58b:	89 f0                	mov    eax,esi
c001e58d:	5b                   	pop    ebx
c001e58e:	5e                   	pop    esi
c001e58f:	5f                   	pop    edi
c001e590:	5d                   	pop    ebp
c001e591:	c3                   	ret    

c001e592 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e592:	57                   	push   edi
c001e593:	56                   	push   esi
c001e594:	53                   	push   ebx
c001e595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e59d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5a1:	83 e8 06             	sub    eax,0x6
c001e5a4:	0f b7 c0             	movzx  eax,ax
c001e5a7:	50                   	push   eax
c001e5a8:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e5ad:	50                   	push   eax
c001e5ae:	e8 21 fd ff ff       	call   c001e2d4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e5b3:	5a                   	pop    edx
c001e5b4:	5e                   	pop    esi
c001e5b5:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e5b8:	8d 56 fa             	lea    edx,[esi-0x6]
c001e5bb:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e5c1:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e5c4:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e5c7:	83 c2 02             	add    edx,0x2
c001e5ca:	66 89 10             	mov    WORD PTR [eax],dx
c001e5cd:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e5d0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e5d4:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e5d7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e5db:	89 d6                	mov    esi,edx
c001e5dd:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e5e3:	66 81 e6 ff fd       	and    si,0xfdff
c001e5e8:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e5ec:	74 07                	je     c001e5f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e5ee:	89 d6                	mov    esi,edx
c001e5f0:	66 81 ce 00 02       	or     si,0x200
c001e5f5:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e5f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5fe:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e602:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e60a:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e60d:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e615:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e618:	5b                   	pop    ebx
c001e619:	5e                   	pop    esi
c001e61a:	5f                   	pop    edi
c001e61b:	c3                   	ret    

c001e61c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e61c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e621:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e626:	c1 e0 04             	shl    eax,0x4
c001e629:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e62c:	c3                   	ret    

c001e62d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e62d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e632:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e637:	c1 e0 04             	shl    eax,0x4
c001e63a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e63e:	c3                   	ret    

c001e63f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e63f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e644:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e649:	c1 e0 04             	shl    eax,0x4
c001e64c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e64f:	c3                   	ret    

c001e650 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e650:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e655:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e65a:	c1 e0 04             	shl    eax,0x4
c001e65d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e661:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e664:	c3                   	ret    

c001e665 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e665:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e66a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e66f:	c1 e0 04             	shl    eax,0x4
c001e672:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e676:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e67a:	c3                   	ret    

c001e67b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e67b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e680:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e685:	c1 e0 04             	shl    eax,0x4
c001e688:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e68c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e68f:	c3                   	ret    

c001e690 <Vm::faultHandler(regs*)>:
c001e690:	55                   	push   ebp
c001e691:	57                   	push   edi
c001e692:	56                   	push   esi
c001e693:	53                   	push   ebx
c001e694:	83 ec 1c             	sub    esp,0x1c
c001e697:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e69b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e69e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e6a2:	0f b7 f8             	movzx  edi,ax
c001e6a5:	52                   	push   edx
c001e6a6:	0f b7 c0             	movzx  eax,ax
c001e6a9:	50                   	push   eax
c001e6aa:	e8 25 fc ff ff       	call   c001e2d4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6af:	5a                   	pop    edx
c001e6b0:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e6b3:	59                   	pop    ecx
c001e6b4:	89 c1                	mov    ecx,eax
c001e6b6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e6b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6bd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e6c6:	0f b7 c5             	movzx  eax,bp
c001e6c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e6d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6d5:	e8 fa fb ff ff       	call   c001e2d4 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6da:	5e                   	pop    esi
c001e6db:	be 06 00 00 00       	mov    esi,0x6
c001e6e0:	5a                   	pop    edx
c001e6e1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e6e6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e6eb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e6ee:	80 fa 9d             	cmp    dl,0x9d
c001e6f1:	0f 84 2c 02 00 00    	je     c001e923 <Vm::faultHandler(regs*)+0x293>
c001e6f7:	0f 87 91 00 00 00    	ja     c001e78e <Vm::faultHandler(regs*)+0xfe>
c001e6fd:	80 fa 66             	cmp    dl,0x66
c001e700:	0f 84 98 01 00 00    	je     c001e89e <Vm::faultHandler(regs*)+0x20e>
c001e706:	77 47                	ja     c001e74f <Vm::faultHandler(regs*)+0xbf>
c001e708:	80 fa 36             	cmp    dl,0x36
c001e70b:	0f 84 80 01 00 00    	je     c001e891 <Vm::faultHandler(regs*)+0x201>
c001e711:	77 1a                	ja     c001e72d <Vm::faultHandler(regs*)+0x9d>
c001e713:	80 fa 26             	cmp    dl,0x26
c001e716:	0f 84 4e 01 00 00    	je     c001e86a <Vm::faultHandler(regs*)+0x1da>
c001e71c:	80 fa 2e             	cmp    dl,0x2e
c001e71f:	0f 85 e2 05 00 00    	jne    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e725:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e728:	31 f6                	xor    esi,esi
c001e72a:	41                   	inc    ecx
c001e72b:	eb be                	jmp    c001e6eb <Vm::faultHandler(regs*)+0x5b>
c001e72d:	80 fa 64             	cmp    dl,0x64
c001e730:	0f 84 41 01 00 00    	je     c001e877 <Vm::faultHandler(regs*)+0x1e7>
c001e736:	0f 87 48 01 00 00    	ja     c001e884 <Vm::faultHandler(regs*)+0x1f4>
c001e73c:	80 fa 3e             	cmp    dl,0x3e
c001e73f:	0f 85 c2 05 00 00    	jne    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e745:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e748:	be 01 00 00 00       	mov    esi,0x1
c001e74d:	eb db                	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e74f:	80 fa 6d             	cmp    dl,0x6d
c001e752:	0f 84 ec 02 00 00    	je     c001ea44 <Vm::faultHandler(regs*)+0x3b4>
c001e758:	77 17                	ja     c001e771 <Vm::faultHandler(regs*)+0xe1>
c001e75a:	80 fa 67             	cmp    dl,0x67
c001e75d:	0f 84 48 01 00 00    	je     c001e8ab <Vm::faultHandler(regs*)+0x21b>
c001e763:	80 fa 6c             	cmp    dl,0x6c
c001e766:	0f 84 69 02 00 00    	je     c001e9d5 <Vm::faultHandler(regs*)+0x345>
c001e76c:	e9 96 05 00 00       	jmp    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e771:	80 fa 6f             	cmp    dl,0x6f
c001e774:	0f 84 f4 03 00 00    	je     c001eb6e <Vm::faultHandler(regs*)+0x4de>
c001e77a:	0f 82 59 03 00 00    	jb     c001ead9 <Vm::faultHandler(regs*)+0x449>
c001e780:	80 fa 9c             	cmp    dl,0x9c
c001e783:	0f 84 2f 01 00 00    	je     c001e8b8 <Vm::faultHandler(regs*)+0x228>
c001e789:	e9 79 05 00 00       	jmp    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e78e:	80 fa ec             	cmp    dl,0xec
c001e791:	0f 84 14 05 00 00    	je     c001ecab <Vm::faultHandler(regs*)+0x61b>
c001e797:	77 7b                	ja     c001e814 <Vm::faultHandler(regs*)+0x184>
c001e799:	80 fa e4             	cmp    dl,0xe4
c001e79c:	0f 84 93 04 00 00    	je     c001ec35 <Vm::faultHandler(regs*)+0x5a5>
c001e7a2:	77 53                	ja     c001e7f7 <Vm::faultHandler(regs*)+0x167>
c001e7a4:	80 fa cd             	cmp    dl,0xcd
c001e7a7:	0f 84 d9 01 00 00    	je     c001e986 <Vm::faultHandler(regs*)+0x2f6>
c001e7ad:	80 fa cf             	cmp    dl,0xcf
c001e7b0:	0f 85 51 05 00 00    	jne    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e7b6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e7b9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e7bc:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e7c0:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e7c3:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e7c7:	81 ca 00 02 02 00    	or     edx,0x20200
c001e7cd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e7d0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e7d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e7da:	66 c1 e8 09          	shr    ax,0x9
c001e7de:	83 e0 01             	and    eax,0x1
c001e7e1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e7e4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e7e7:	83 c0 06             	add    eax,0x6
c001e7ea:	25 ff ff 00 00       	and    eax,0xffff
c001e7ef:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e7f2:	e9 0c 05 00 00       	jmp    c001ed03 <Vm::faultHandler(regs*)+0x673>
c001e7f7:	80 fa e6             	cmp    dl,0xe6
c001e7fa:	0f 84 7f 04 00 00    	je     c001ec7f <Vm::faultHandler(regs*)+0x5ef>
c001e800:	0f 82 4b 04 00 00    	jb     c001ec51 <Vm::faultHandler(regs*)+0x5c1>
c001e806:	80 fa e7             	cmp    dl,0xe7
c001e809:	0f 84 87 04 00 00    	je     c001ec96 <Vm::faultHandler(regs*)+0x606>
c001e80f:	e9 f3 04 00 00       	jmp    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e814:	80 fa ef             	cmp    dl,0xef
c001e817:	0f 84 d1 04 00 00    	je     c001ecee <Vm::faultHandler(regs*)+0x65e>
c001e81d:	77 28                	ja     c001e847 <Vm::faultHandler(regs*)+0x1b7>
c001e81f:	80 fa ed             	cmp    dl,0xed
c001e822:	0f 84 9f 04 00 00    	je     c001ecc7 <Vm::faultHandler(regs*)+0x637>
c001e828:	80 fa ee             	cmp    dl,0xee
c001e82b:	0f 85 d6 04 00 00    	jne    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e831:	50                   	push   eax
c001e832:	50                   	push   eax
c001e833:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e837:	50                   	push   eax
c001e838:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e83c:	50                   	push   eax
c001e83d:	e8 5c fa ff ff       	call   c001e29e <Vm::outbv(unsigned short, unsigned char)>
c001e842:	e9 9f 04 00 00       	jmp    c001ece6 <Vm::faultHandler(regs*)+0x656>
c001e847:	80 fa fa             	cmp    dl,0xfa
c001e84a:	0f 84 69 01 00 00    	je     c001e9b9 <Vm::faultHandler(regs*)+0x329>
c001e850:	80 fa fb             	cmp    dl,0xfb
c001e853:	0f 84 6e 01 00 00    	je     c001e9c7 <Vm::faultHandler(regs*)+0x337>
c001e859:	80 fa f3             	cmp    dl,0xf3
c001e85c:	0f 85 a5 04 00 00    	jne    c001ed07 <Vm::faultHandler(regs*)+0x677>
c001e862:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e865:	e9 c0 fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e86a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e86d:	be 02 00 00 00       	mov    esi,0x2
c001e872:	e9 b3 fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e877:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e87a:	be 03 00 00 00       	mov    esi,0x3
c001e87f:	e9 a6 fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e884:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e887:	be 04 00 00 00       	mov    esi,0x4
c001e88c:	e9 99 fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e891:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e894:	be 05 00 00 00       	mov    esi,0x5
c001e899:	e9 8c fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e89e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8a1:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e8a6:	e9 7f fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e8ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8ae:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e8b3:	e9 72 fe ff ff       	jmp    c001e72a <Vm::faultHandler(regs*)+0x9a>
c001e8b8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e8bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e8bf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e8c4:	74 30                	je     c001e8f6 <Vm::faultHandler(regs*)+0x266>
c001e8c6:	83 e9 04             	sub    ecx,0x4
c001e8c9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e8cf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8d5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e8d8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8db:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e8e1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e8e5:	0f 84 15 04 00 00    	je     c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e8eb:	80 ce 02             	or     dh,0x2
c001e8ee:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e8f1:	e9 0a 04 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e8f6:	83 e9 02             	sub    ecx,0x2
c001e8f9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8ff:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e902:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e906:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e90c:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e910:	74 05                	je     c001e917 <Vm::faultHandler(regs*)+0x287>
c001e912:	80 ce 02             	or     dh,0x2
c001e915:	eb 03                	jmp    c001e91a <Vm::faultHandler(regs*)+0x28a>
c001e917:	80 e6 fd             	and    dh,0xfd
c001e91a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e91e:	e9 dd 03 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e923:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e928:	74 2a                	je     c001e954 <Vm::faultHandler(regs*)+0x2c4>
c001e92a:	8b 10                	mov    edx,DWORD PTR [eax]
c001e92c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e932:	81 ca 00 02 02 00    	or     edx,0x20200
c001e938:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e93b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e93d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e943:	c1 e8 09             	shr    eax,0x9
c001e946:	83 e0 01             	and    eax,0x1
c001e949:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e94c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e94f:	83 c0 04             	add    eax,0x4
c001e952:	eb 25                	jmp    c001e979 <Vm::faultHandler(regs*)+0x2e9>
c001e954:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e957:	81 ca 00 02 02 00    	or     edx,0x20200
c001e95d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e960:	66 8b 00             	mov    ax,WORD PTR [eax]
c001e963:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e969:	66 c1 e8 09          	shr    ax,0x9
c001e96d:	83 e0 01             	and    eax,0x1
c001e970:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e973:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e976:	83 c0 02             	add    eax,0x2
c001e979:	25 ff ff 00 00       	and    eax,0xffff
c001e97e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e981:	e9 7a 03 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e986:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e98a:	3c ee                	cmp    al,0xee
c001e98c:	75 10                	jne    c001e99e <Vm::faultHandler(regs*)+0x30e>
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001e994:	e8 a2 f9 ff ff       	call   c001e33b <Vm::mainloop3(unsigned long)>
c001e999:	e9 4b 03 00 00       	jmp    c001ece9 <Vm::faultHandler(regs*)+0x659>
c001e99e:	83 ec 0c             	sub    esp,0xc
c001e9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a9:	51                   	push   ecx
c001e9aa:	50                   	push   eax
c001e9ab:	53                   	push   ebx
c001e9ac:	e8 e1 fb ff ff       	call   c001e592 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e9b1:	83 c4 20             	add    esp,0x20
c001e9b4:	e9 4a 03 00 00       	jmp    c001ed03 <Vm::faultHandler(regs*)+0x673>
c001e9b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9be:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9c2:	e9 39 03 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e9c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9cc:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e9d0:	e9 2b 03 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001e9d5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001e9d8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001e9dd:	74 2b                	je     c001ea0a <Vm::faultHandler(regs*)+0x37a>
c001e9df:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001e9e6:	76 22                	jbe    c001ea0a <Vm::faultHandler(regs*)+0x37a>
c001e9e8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001e9ec:	50                   	push   eax
c001e9ed:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001e9f1:	50                   	push   eax
c001e9f2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001e9f6:	50                   	push   eax
c001e9f7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001e9fb:	50                   	push   eax
c001e9fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea00:	50                   	push   eax
c001ea01:	6a 6c                	push   0x6c
c001ea03:	6a 6c                	push   0x6c
c001ea05:	e9 b9 01 00 00       	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x533>
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea11:	0f b7 f6             	movzx  esi,si
c001ea14:	50                   	push   eax
c001ea15:	e8 71 f8 ff ff       	call   c001e28b <Vm::inbv(unsigned short)>
c001ea1a:	83 c4 0c             	add    esp,0xc
c001ea1d:	0f b6 c0             	movzx  eax,al
c001ea20:	50                   	push   eax
c001ea21:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ea25:	50                   	push   eax
c001ea26:	56                   	push   esi
c001ea27:	e8 24 fc ff ff       	call   c001e650 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea32:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea36:	74 03                	je     c001ea3b <Vm::faultHandler(regs*)+0x3ab>
c001ea38:	48                   	dec    eax
c001ea39:	eb 01                	jmp    c001ea3c <Vm::faultHandler(regs*)+0x3ac>
c001ea3b:	40                   	inc    eax
c001ea3c:	0f b7 c0             	movzx  eax,ax
c001ea3f:	e9 8d 00 00 00       	jmp    c001ead1 <Vm::faultHandler(regs*)+0x441>
c001ea44:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea47:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea4a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea4f:	74 29                	je     c001ea7a <Vm::faultHandler(regs*)+0x3ea>
c001ea51:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea56:	76 22                	jbe    c001ea7a <Vm::faultHandler(regs*)+0x3ea>
c001ea58:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea5c:	50                   	push   eax
c001ea5d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea61:	50                   	push   eax
c001ea62:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea66:	50                   	push   eax
c001ea67:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea6b:	50                   	push   eax
c001ea6c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea70:	50                   	push   eax
c001ea71:	6a 6d                	push   0x6d
c001ea73:	6a 6d                	push   0x6d
c001ea75:	e9 49 01 00 00       	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x533>
c001ea7a:	0f b7 c8             	movzx  ecx,ax
c001ea7d:	0f b7 f6             	movzx  esi,si
c001ea80:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ea83:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea88:	74 20                	je     c001eaaa <Vm::faultHandler(regs*)+0x41a>
c001ea8a:	ed                   	in     eax,dx
c001ea8b:	55                   	push   ebp
c001ea8c:	50                   	push   eax
c001ea8d:	51                   	push   ecx
c001ea8e:	56                   	push   esi
c001ea8f:	e8 e7 fb ff ff       	call   c001e67b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ea94:	83 c4 10             	add    esp,0x10
c001ea97:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea9a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea9e:	74 05                	je     c001eaa5 <Vm::faultHandler(regs*)+0x415>
c001eaa0:	83 e8 04             	sub    eax,0x4
c001eaa3:	eb 27                	jmp    c001eacc <Vm::faultHandler(regs*)+0x43c>
c001eaa5:	83 c0 04             	add    eax,0x4
c001eaa8:	eb 22                	jmp    c001eacc <Vm::faultHandler(regs*)+0x43c>
c001eaaa:	66 ed                	in     ax,dx
c001eaac:	0f b7 c0             	movzx  eax,ax
c001eaaf:	57                   	push   edi
c001eab0:	50                   	push   eax
c001eab1:	51                   	push   ecx
c001eab2:	56                   	push   esi
c001eab3:	e8 ad fb ff ff       	call   c001e665 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eab8:	83 c4 10             	add    esp,0x10
c001eabb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eabe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eac2:	74 05                	je     c001eac9 <Vm::faultHandler(regs*)+0x439>
c001eac4:	83 e8 02             	sub    eax,0x2
c001eac7:	eb 03                	jmp    c001eacc <Vm::faultHandler(regs*)+0x43c>
c001eac9:	83 c0 02             	add    eax,0x2
c001eacc:	25 ff ff 00 00       	and    eax,0xffff
c001ead1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ead4:	e9 27 02 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001ead9:	8d 46 ff             	lea    eax,[esi-0x1]
c001eadc:	3c 05                	cmp    al,0x5
c001eade:	77 24                	ja     c001eb04 <Vm::faultHandler(regs*)+0x474>
c001eae0:	0f b6 c0             	movzx  eax,al
c001eae3:	ff 24 85 84 b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd467c]
c001eaea:	0f b7 fd             	movzx  edi,bp
c001eaed:	eb 15                	jmp    c001eb04 <Vm::faultHandler(regs*)+0x474>
c001eaef:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eaf3:	eb 0f                	jmp    c001eb04 <Vm::faultHandler(regs*)+0x474>
c001eaf5:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eaf9:	eb 09                	jmp    c001eb04 <Vm::faultHandler(regs*)+0x474>
c001eafb:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eaff:	eb 03                	jmp    c001eb04 <Vm::faultHandler(regs*)+0x474>
c001eb01:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eb04:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb07:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb0c:	74 29                	je     c001eb37 <Vm::faultHandler(regs*)+0x4a7>
c001eb0e:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb13:	76 22                	jbe    c001eb37 <Vm::faultHandler(regs*)+0x4a7>
c001eb15:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb19:	50                   	push   eax
c001eb1a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb1e:	50                   	push   eax
c001eb1f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb23:	50                   	push   eax
c001eb24:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb28:	50                   	push   eax
c001eb29:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb2d:	50                   	push   eax
c001eb2e:	6a 6e                	push   0x6e
c001eb30:	6a 6e                	push   0x6e
c001eb32:	e9 8c 00 00 00       	jmp    c001ebc3 <Vm::faultHandler(regs*)+0x533>
c001eb37:	0f b7 c0             	movzx  eax,ax
c001eb3a:	52                   	push   edx
c001eb3b:	52                   	push   edx
c001eb3c:	50                   	push   eax
c001eb3d:	57                   	push   edi
c001eb3e:	e8 d9 fa ff ff       	call   c001e61c <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eb43:	59                   	pop    ecx
c001eb44:	0f b6 c0             	movzx  eax,al
c001eb47:	5e                   	pop    esi
c001eb48:	50                   	push   eax
c001eb49:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb4d:	50                   	push   eax
c001eb4e:	e8 4b f7 ff ff       	call   c001e29e <Vm::outbv(unsigned short, unsigned char)>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb5d:	74 03                	je     c001eb62 <Vm::faultHandler(regs*)+0x4d2>
c001eb5f:	48                   	dec    eax
c001eb60:	eb 01                	jmp    c001eb63 <Vm::faultHandler(regs*)+0x4d3>
c001eb62:	40                   	inc    eax
c001eb63:	0f b7 c0             	movzx  eax,ax
c001eb66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001eb69:	e9 92 01 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001eb6e:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb71:	3c 05                	cmp    al,0x5
c001eb73:	77 1f                	ja     c001eb94 <Vm::faultHandler(regs*)+0x504>
c001eb75:	0f b6 c0             	movzx  eax,al
c001eb78:	ff 24 85 9c b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4664]
c001eb7f:	89 ef                	mov    edi,ebp
c001eb81:	eb 11                	jmp    c001eb94 <Vm::faultHandler(regs*)+0x504>
c001eb83:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001eb86:	eb 0c                	jmp    c001eb94 <Vm::faultHandler(regs*)+0x504>
c001eb88:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001eb8b:	eb 07                	jmp    c001eb94 <Vm::faultHandler(regs*)+0x504>
c001eb8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001eb90:	eb 02                	jmp    c001eb94 <Vm::faultHandler(regs*)+0x504>
c001eb92:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001eb94:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001eb97:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb9c:	74 37                	je     c001ebd5 <Vm::faultHandler(regs*)+0x545>
c001eb9e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eba4:	76 2f                	jbe    c001ebd5 <Vm::faultHandler(regs*)+0x545>
c001eba6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebaa:	50                   	push   eax
c001ebab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebaf:	50                   	push   eax
c001ebb0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebb4:	50                   	push   eax
c001ebb5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebb9:	50                   	push   eax
c001ebba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebbe:	50                   	push   eax
c001ebbf:	6a 6f                	push   0x6f
c001ebc1:	6a 6f                	push   0x6f
c001ebc3:	68 2a b9 02 c0       	push   0xc002b92a
c001ebc8:	e8 3e 39 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ebcd:	83 c4 20             	add    esp,0x20
c001ebd0:	e9 86 01 00 00       	jmp    c001ed5b <Vm::faultHandler(regs*)+0x6cb>
c001ebd5:	0f b7 d7             	movzx  edx,di
c001ebd8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ebdb:	0f b7 c6             	movzx  eax,si
c001ebde:	81 e1 00 04 00 00    	and    ecx,0x400
c001ebe4:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ebe7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebec:	74 1d                	je     c001ec0b <Vm::faultHandler(regs*)+0x57b>
c001ebee:	55                   	push   ebp
c001ebef:	55                   	push   ebp
c001ebf0:	50                   	push   eax
c001ebf1:	52                   	push   edx
c001ebf2:	e8 48 fa ff ff       	call   c001e63f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ebf7:	83 c4 10             	add    esp,0x10
c001ebfa:	89 fa                	mov    edx,edi
c001ebfc:	ef                   	out    dx,eax
c001ebfd:	85 c9                	test   ecx,ecx
c001ebff:	74 05                	je     c001ec06 <Vm::faultHandler(regs*)+0x576>
c001ec01:	83 ee 04             	sub    esi,0x4
c001ec04:	eb 21                	jmp    c001ec27 <Vm::faultHandler(regs*)+0x597>
c001ec06:	83 c6 04             	add    esi,0x4
c001ec09:	eb 1c                	jmp    c001ec27 <Vm::faultHandler(regs*)+0x597>
c001ec0b:	55                   	push   ebp
c001ec0c:	55                   	push   ebp
c001ec0d:	50                   	push   eax
c001ec0e:	52                   	push   edx
c001ec0f:	e8 19 fa ff ff       	call   c001e62d <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ec14:	83 c4 10             	add    esp,0x10
c001ec17:	89 fa                	mov    edx,edi
c001ec19:	66 ef                	out    dx,ax
c001ec1b:	85 c9                	test   ecx,ecx
c001ec1d:	74 05                	je     c001ec24 <Vm::faultHandler(regs*)+0x594>
c001ec1f:	83 ee 02             	sub    esi,0x2
c001ec22:	eb 03                	jmp    c001ec27 <Vm::faultHandler(regs*)+0x597>
c001ec24:	83 c6 02             	add    esi,0x2
c001ec27:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ec2d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ec30:	e9 cb 00 00 00       	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001ec35:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ec3c:	83 ec 0c             	sub    esp,0xc
c001ec3f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec43:	50                   	push   eax
c001ec44:	e8 42 f6 ff ff       	call   c001e28b <Vm::inbv(unsigned short)>
c001ec49:	0f b6 c0             	movzx  eax,al
c001ec4c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ec4f:	eb 3f                	jmp    c001ec90 <Vm::faultHandler(regs*)+0x600>
c001ec51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec56:	74 07                	je     c001ec5f <Vm::faultHandler(regs*)+0x5cf>
c001ec58:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec5c:	ed                   	in     eax,dx
c001ec5d:	eb 14                	jmp    c001ec73 <Vm::faultHandler(regs*)+0x5e3>
c001ec5f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ec62:	66 31 f6             	xor    si,si
c001ec65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ec68:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec6c:	66 ed                	in     ax,dx
c001ec6e:	0f b7 c0             	movzx  eax,ax
c001ec71:	09 f0                	or     eax,esi
c001ec73:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ec76:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec7a:	e9 84 00 00 00       	jmp    c001ed03 <Vm::faultHandler(regs*)+0x673>
c001ec7f:	52                   	push   edx
c001ec80:	52                   	push   edx
c001ec81:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ec85:	50                   	push   eax
c001ec86:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec8a:	50                   	push   eax
c001ec8b:	e8 0e f6 ff ff       	call   c001e29e <Vm::outbv(unsigned short, unsigned char)>
c001ec90:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ec94:	eb 53                	jmp    c001ece9 <Vm::faultHandler(regs*)+0x659>
c001ec96:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ec99:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec9d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eca2:	74 03                	je     c001eca7 <Vm::faultHandler(regs*)+0x617>
c001eca4:	ef                   	out    dx,eax
c001eca5:	eb cf                	jmp    c001ec76 <Vm::faultHandler(regs*)+0x5e6>
c001eca7:	66 ef                	out    dx,ax
c001eca9:	eb cb                	jmp    c001ec76 <Vm::faultHandler(regs*)+0x5e6>
c001ecab:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ecb2:	83 ec 0c             	sub    esp,0xc
c001ecb5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecb9:	50                   	push   eax
c001ecba:	e8 cc f5 ff ff       	call   c001e28b <Vm::inbv(unsigned short)>
c001ecbf:	0f b6 c0             	movzx  eax,al
c001ecc2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ecc5:	eb 1f                	jmp    c001ece6 <Vm::faultHandler(regs*)+0x656>
c001ecc7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ecca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eccf:	74 03                	je     c001ecd4 <Vm::faultHandler(regs*)+0x644>
c001ecd1:	ed                   	in     eax,dx
c001ecd2:	eb 0d                	jmp    c001ece1 <Vm::faultHandler(regs*)+0x651>
c001ecd4:	66 ed                	in     ax,dx
c001ecd6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ecd9:	0f b7 c0             	movzx  eax,ax
c001ecdc:	66 31 d2             	xor    dx,dx
c001ecdf:	09 d0                	or     eax,edx
c001ece1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ece4:	eb 1a                	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001ece6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	eb 15                	jmp    c001ed03 <Vm::faultHandler(regs*)+0x673>
c001ecee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ecf1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ecf4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecf9:	74 03                	je     c001ecfe <Vm::faultHandler(regs*)+0x66e>
c001ecfb:	ef                   	out    dx,eax
c001ecfc:	eb 02                	jmp    c001ed00 <Vm::faultHandler(regs*)+0x670>
c001ecfe:	66 ef                	out    dx,ax
c001ed00:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed03:	b0 01                	mov    al,0x1
c001ed05:	eb 56                	jmp    c001ed5d <Vm::faultHandler(regs*)+0x6cd>
c001ed07:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed0b:	50                   	push   eax
c001ed0c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed10:	50                   	push   eax
c001ed11:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed15:	50                   	push   eax
c001ed16:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed1a:	50                   	push   eax
c001ed1b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed1f:	50                   	push   eax
c001ed20:	52                   	push   edx
c001ed21:	52                   	push   edx
c001ed22:	68 57 b9 02 c0       	push   0xc002b957
c001ed27:	e8 df 37 ff ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c001ed2c:	83 c4 20             	add    esp,0x20
c001ed2f:	83 ec 0c             	sub    esp,0xc
c001ed32:	6a 60                	push   0x60
c001ed34:	e8 52 f5 ff ff       	call   c001e28b <Vm::inbv(unsigned short)>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	3c 1c                	cmp    al,0x1c
c001ed3e:	74 04                	je     c001ed44 <Vm::faultHandler(regs*)+0x6b4>
c001ed40:	3c 5a                	cmp    al,0x5a
c001ed42:	75 eb                	jne    c001ed2f <Vm::faultHandler(regs*)+0x69f>
c001ed44:	3c 5a                	cmp    al,0x5a
c001ed46:	74 04                	je     c001ed4c <Vm::faultHandler(regs*)+0x6bc>
c001ed48:	3c 1c                	cmp    al,0x1c
c001ed4a:	75 0f                	jne    c001ed5b <Vm::faultHandler(regs*)+0x6cb>
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	6a 60                	push   0x60
c001ed51:	e8 35 f5 ff ff       	call   c001e28b <Vm::inbv(unsigned short)>
c001ed56:	83 c4 10             	add    esp,0x10
c001ed59:	eb e9                	jmp    c001ed44 <Vm::faultHandler(regs*)+0x6b4>
c001ed5b:	31 c0                	xor    eax,eax
c001ed5d:	83 c4 1c             	add    esp,0x1c
c001ed60:	5b                   	pop    ebx
c001ed61:	5e                   	pop    esi
c001ed62:	5f                   	pop    edi
c001ed63:	5d                   	pop    ebp
c001ed64:	c3                   	ret    

c001ed65 <Vm::fpuInternalTo32(unsigned long long)>:
c001ed65:	57                   	push   edi
c001ed66:	56                   	push   esi
c001ed67:	53                   	push   ebx
c001ed68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed70:	89 d6                	mov    esi,edx
c001ed72:	89 d7                	mov    edi,edx
c001ed74:	89 c1                	mov    ecx,eax
c001ed76:	c1 ef 14             	shr    edi,0x14
c001ed79:	89 d3                	mov    ebx,edx
c001ed7b:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ed81:	31 d2                	xor    edx,edx
c001ed83:	89 f8                	mov    eax,edi
c001ed85:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ed8b:	bf ff 00 00 00       	mov    edi,0xff
c001ed90:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ed95:	83 d2 ff             	adc    edx,0xffffffff
c001ed98:	39 c7                	cmp    edi,eax
c001ed9a:	bf 00 00 00 00       	mov    edi,0x0
c001ed9f:	19 d7                	sbb    edi,edx
c001eda1:	72 15                	jb     c001edb8 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eda3:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eda7:	c1 e0 17             	shl    eax,0x17
c001edaa:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001edb0:	09 f1                	or     ecx,esi
c001edb2:	09 c1                	or     ecx,eax
c001edb4:	89 cf                	mov    edi,ecx
c001edb6:	eb 02                	jmp    c001edba <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001edb8:	31 ff                	xor    edi,edi
c001edba:	89 f8                	mov    eax,edi
c001edbc:	5b                   	pop    ebx
c001edbd:	5e                   	pop    esi
c001edbe:	5f                   	pop    edi
c001edbf:	c3                   	ret    

c001edc0 <Vm::fpuInternalTo64(unsigned long long)>:
c001edc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edc8:	c3                   	ret    

c001edc9 <Vm::fpu32ToInternal(unsigned int)>:
c001edc9:	57                   	push   edi
c001edca:	31 ff                	xor    edi,edi
c001edcc:	56                   	push   esi
c001edcd:	53                   	push   ebx
c001edce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edd2:	89 cb                	mov    ebx,ecx
c001edd4:	89 ce                	mov    esi,ecx
c001edd6:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eddc:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ede2:	c1 e9 17             	shr    ecx,0x17
c001ede5:	89 f0                	mov    eax,esi
c001ede7:	0f b6 d1             	movzx  edx,cl
c001edea:	81 c2 80 03 00 00    	add    edx,0x380
c001edf0:	89 d1                	mov    ecx,edx
c001edf2:	89 fa                	mov    edx,edi
c001edf4:	c1 e1 14             	shl    ecx,0x14
c001edf7:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001edfb:	c1 e0 1d             	shl    eax,0x1d
c001edfe:	89 d7                	mov    edi,edx
c001ee00:	89 c6                	mov    esi,eax
c001ee02:	89 ca                	mov    edx,ecx
c001ee04:	89 f0                	mov    eax,esi
c001ee06:	09 fa                	or     edx,edi
c001ee08:	09 da                	or     edx,ebx
c001ee0a:	5b                   	pop    ebx
c001ee0b:	5e                   	pop    esi
c001ee0c:	5f                   	pop    edi
c001ee0d:	c3                   	ret    

c001ee0e <Vm::fpu64ToInternal(unsigned long long)>:
c001ee0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee16:	c3                   	ret    

c001ee17 <Vm::fpuFloatToLong(unsigned long long)>:
c001ee17:	57                   	push   edi
c001ee18:	31 c0                	xor    eax,eax
c001ee1a:	56                   	push   esi
c001ee1b:	31 d2                	xor    edx,edx
c001ee1d:	53                   	push   ebx
c001ee1e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee22:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee26:	89 d9                	mov    ecx,ebx
c001ee28:	c1 e9 14             	shr    ecx,0x14
c001ee2b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ee31:	89 cf                	mov    edi,ecx
c001ee33:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee39:	78 33                	js     c001ee6e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee3b:	89 d9                	mov    ecx,ebx
c001ee3d:	89 f0                	mov    eax,esi
c001ee3f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee45:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ee4b:	89 ca                	mov    edx,ecx
c001ee4d:	b9 34 00 00 00       	mov    ecx,0x34
c001ee52:	29 f9                	sub    ecx,edi
c001ee54:	0f ad d0             	shrd   eax,edx,cl
c001ee57:	d3 fa                	sar    edx,cl
c001ee59:	f6 c1 20             	test   cl,0x20
c001ee5c:	74 05                	je     c001ee63 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ee5e:	89 d0                	mov    eax,edx
c001ee60:	c1 fa 1f             	sar    edx,0x1f
c001ee63:	85 db                	test   ebx,ebx
c001ee65:	79 07                	jns    c001ee6e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee67:	f7 d8                	neg    eax
c001ee69:	83 d2 00             	adc    edx,0x0
c001ee6c:	f7 da                	neg    edx
c001ee6e:	5b                   	pop    ebx
c001ee6f:	5e                   	pop    esi
c001ee70:	5f                   	pop    edi
c001ee71:	c3                   	ret    

c001ee72 <Vm::fpuULongToFloat(unsigned long long)>:
c001ee72:	57                   	push   edi
c001ee73:	31 c9                	xor    ecx,ecx
c001ee75:	56                   	push   esi
c001ee76:	53                   	push   ebx
c001ee77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ee7f:	0f ba e7 14          	bt     edi,0x14
c001ee83:	72 07                	jb     c001ee8c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ee85:	01 f6                	add    esi,esi
c001ee87:	11 ff                	adc    edi,edi
c001ee89:	41                   	inc    ecx
c001ee8a:	eb f3                	jmp    c001ee7f <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ee8c:	89 fa                	mov    edx,edi
c001ee8e:	89 f0                	mov    eax,esi
c001ee90:	bb 33 04 00 00       	mov    ebx,0x433
c001ee95:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ee9b:	29 cb                	sub    ebx,ecx
c001ee9d:	89 d9                	mov    ecx,ebx
c001ee9f:	5b                   	pop    ebx
c001eea0:	c1 e1 14             	shl    ecx,0x14
c001eea3:	5e                   	pop    esi
c001eea4:	09 ca                	or     edx,ecx
c001eea6:	5f                   	pop    edi
c001eea7:	c3                   	ret    

c001eea8 <Vm::fpuLongToFloat(long long)>:
c001eea8:	56                   	push   esi
c001eea9:	31 c0                	xor    eax,eax
c001eeab:	53                   	push   ebx
c001eeac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eeb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eeb4:	39 c8                	cmp    eax,ecx
c001eeb6:	19 d8                	sbb    eax,ebx
c001eeb8:	7d 04                	jge    c001eebe <Vm::fpuLongToFloat(long long)+0x16>
c001eeba:	31 f6                	xor    esi,esi
c001eebc:	eb 0c                	jmp    c001eeca <Vm::fpuLongToFloat(long long)+0x22>
c001eebe:	f7 d9                	neg    ecx
c001eec0:	be 01 00 00 00       	mov    esi,0x1
c001eec5:	83 d3 00             	adc    ebx,0x0
c001eec8:	f7 db                	neg    ebx
c001eeca:	31 c0                	xor    eax,eax
c001eecc:	0f ba e3 14          	bt     ebx,0x14
c001eed0:	72 07                	jb     c001eed9 <Vm::fpuLongToFloat(long long)+0x31>
c001eed2:	01 c9                	add    ecx,ecx
c001eed4:	11 db                	adc    ebx,ebx
c001eed6:	40                   	inc    eax
c001eed7:	eb f3                	jmp    c001eecc <Vm::fpuLongToFloat(long long)+0x24>
c001eed9:	ba 33 04 00 00       	mov    edx,0x433
c001eede:	29 c2                	sub    edx,eax
c001eee0:	89 c8                	mov    eax,ecx
c001eee2:	c1 e2 14             	shl    edx,0x14
c001eee5:	89 d9                	mov    ecx,ebx
c001eee7:	89 f3                	mov    ebx,esi
c001eee9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eeef:	09 ca                	or     edx,ecx
c001eef1:	84 db                	test   bl,bl
c001eef3:	74 06                	je     c001eefb <Vm::fpuLongToFloat(long long)+0x53>
c001eef5:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eefb:	5b                   	pop    ebx
c001eefc:	5e                   	pop    esi
c001eefd:	c3                   	ret    

c001eefe <Vm::fpuGet0()>:
c001eefe:	31 c0                	xor    eax,eax
c001ef00:	31 d2                	xor    edx,edx
c001ef02:	c3                   	ret    

c001ef03 <Vm::fpuGet1()>:
c001ef03:	b8 01 00 00 00       	mov    eax,0x1
c001ef08:	31 d2                	xor    edx,edx
c001ef0a:	c3                   	ret    

c001ef0b <Vm::fpuGetPi()>:
c001ef0b:	b8 03 00 00 00       	mov    eax,0x3
c001ef10:	31 d2                	xor    edx,edx
c001ef12:	c3                   	ret    

c001ef13 <Vm::fpuGetLog2E()>:
c001ef13:	83 ec 18             	sub    esp,0x18
c001ef16:	68 b4 b9 02 c0       	push   0xc002b9b4
c001ef1b:	e8 4b ad ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ef20:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef25:	31 d2                	xor    edx,edx
c001ef27:	83 c4 1c             	add    esp,0x1c
c001ef2a:	c3                   	ret    

c001ef2b <Vm::fpuGetLogE2()>:
c001ef2b:	83 ec 18             	sub    esp,0x18
c001ef2e:	68 c0 b9 02 c0       	push   0xc002b9c0
c001ef33:	e8 33 ad ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ef38:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef3d:	31 d2                	xor    edx,edx
c001ef3f:	83 c4 1c             	add    esp,0x1c
c001ef42:	c3                   	ret    

c001ef43 <Vm::fpuGetLog210()>:
c001ef43:	83 ec 18             	sub    esp,0x18
c001ef46:	68 cc b9 02 c0       	push   0xc002b9cc
c001ef4b:	e8 1b ad ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ef50:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef55:	31 d2                	xor    edx,edx
c001ef57:	83 c4 1c             	add    esp,0x1c
c001ef5a:	c3                   	ret    

c001ef5b <Vm::fpuGetLog102()>:
c001ef5b:	83 ec 18             	sub    esp,0x18
c001ef5e:	68 d9 b9 02 c0       	push   0xc002b9d9
c001ef63:	e8 03 ad ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001ef68:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef6d:	31 d2                	xor    edx,edx
c001ef6f:	83 c4 1c             	add    esp,0x1c
c001ef72:	c3                   	ret    

c001ef73 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef77:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ef7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef7f:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ef83:	0f 92 c0             	setb   al
c001ef86:	c3                   	ret    

c001ef87 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ef87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ef93:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ef97:	09 c2                	or     edx,eax
c001ef99:	0f 94 c0             	sete   al
c001ef9c:	c3                   	ret    

c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ef9d:	57                   	push   edi
c001ef9e:	56                   	push   esi
c001ef9f:	53                   	push   ebx
c001efa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efa4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efa8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001efac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001efb0:	57                   	push   edi
c001efb1:	56                   	push   esi
c001efb2:	53                   	push   ebx
c001efb3:	51                   	push   ecx
c001efb4:	e8 ce ff ff ff       	call   c001ef87 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	88 c2                	mov    dl,al
c001efbe:	31 c0                	xor    eax,eax
c001efc0:	84 d2                	test   dl,dl
c001efc2:	75 0c                	jne    c001efd0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001efc4:	57                   	push   edi
c001efc5:	56                   	push   esi
c001efc6:	53                   	push   ebx
c001efc7:	51                   	push   ecx
c001efc8:	e8 a6 ff ff ff       	call   c001ef73 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	83 e0 01             	and    eax,0x1
c001efd3:	5b                   	pop    ebx
c001efd4:	88 c1                	mov    cl,al
c001efd6:	83 e2 01             	and    edx,0x1
c001efd9:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001efde:	c1 e2 06             	shl    edx,0x6
c001efe1:	83 e0 ba             	and    eax,0xffffffba
c001efe4:	5e                   	pop    esi
c001efe5:	09 c8                	or     eax,ecx
c001efe7:	5f                   	pop    edi
c001efe8:	09 d0                	or     eax,edx
c001efea:	a2 61 0b 03 c0       	mov    ds:0xc0030b61,al
c001efef:	c3                   	ret    

c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001eff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eff4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eff8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001effc:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f000:	c3                   	ret    

c001f001 <Vm::fpuAbs(unsigned long long)>:
c001f001:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f009:	c3                   	ret    

c001f00a <Vm::fpuChs(unsigned long long)>:
c001f00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f00e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f012:	f7 d8                	neg    eax
c001f014:	83 d2 00             	adc    edx,0x0
c001f017:	f7 da                	neg    edx
c001f019:	c3                   	ret    

c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f01a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f01e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f023:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f027:	eb c7                	jmp    c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f029:	53                   	push   ebx
c001f02a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f02e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f032:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f036:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f03a:	0f af ca             	imul   ecx,edx
c001f03d:	0f af d8             	imul   ebx,eax
c001f040:	f7 e2                	mul    edx
c001f042:	01 d9                	add    ecx,ebx
c001f044:	5b                   	pop    ebx
c001f045:	01 ca                	add    edx,ecx
c001f047:	c3                   	ret    

c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f048:	83 ec 0c             	sub    esp,0xc
c001f04b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f05b:	e8 e4 74 00 00       	call   c0026544 <__udivdi3>
c001f060:	83 c4 1c             	add    esp,0x1c
c001f063:	c3                   	ret    

c001f064 <Vm::fpuSquare(unsigned long long)>:
c001f064:	50                   	push   eax
c001f065:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f069:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f06d:	52                   	push   edx
c001f06e:	50                   	push   eax
c001f06f:	52                   	push   edx
c001f070:	50                   	push   eax
c001f071:	e8 b3 ff ff ff       	call   c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f076:	83 c4 14             	add    esp,0x14
c001f079:	c3                   	ret    

c001f07a <Vm::fpuGetReg(int)>:
c001f07a:	83 ec 0c             	sub    esp,0xc
c001f07d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f082:	76 10                	jbe    c001f094 <Vm::fpuGetReg(int)+0x1a>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	68 e6 b9 02 c0       	push   0xc002b9e6
c001f08c:	e8 da ab ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001f091:	83 c4 10             	add    esp,0x10
c001f094:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f099:	b9 08 00 00 00       	mov    ecx,0x8
c001f09e:	c0 e8 03             	shr    al,0x3
c001f0a1:	83 e0 07             	and    eax,0x7
c001f0a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0a8:	99                   	cdq    
c001f0a9:	f7 f9                	idiv   ecx
c001f0ab:	8b 04 d5 64 0b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf49c]
c001f0b2:	8b 14 d5 68 0b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf498]
c001f0b9:	83 c4 0c             	add    esp,0xc
c001f0bc:	c3                   	ret    

c001f0bd <Vm::fpuSetReg(int, unsigned long long)>:
c001f0bd:	57                   	push   edi
c001f0be:	56                   	push   esi
c001f0bf:	52                   	push   edx
c001f0c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f0c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0c8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0cd:	76 10                	jbe    c001f0df <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f0cf:	83 ec 0c             	sub    esp,0xc
c001f0d2:	68 f9 b9 02 c0       	push   0xc002b9f9
c001f0d7:	e8 8f ab ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f0e4:	b9 08 00 00 00       	mov    ecx,0x8
c001f0e9:	c0 e8 03             	shr    al,0x3
c001f0ec:	83 e0 07             	and    eax,0x7
c001f0ef:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0f3:	99                   	cdq    
c001f0f4:	f7 f9                	idiv   ecx
c001f0f6:	89 34 d5 64 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf49c],esi
c001f0fd:	89 3c d5 68 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf498],edi
c001f104:	58                   	pop    eax
c001f105:	5e                   	pop    esi
c001f106:	5f                   	pop    edi
c001f107:	c3                   	ret    

c001f108 <Vm::fpuPush(unsigned long long)>:
c001f108:	a0 61 0b 03 c0       	mov    al,ds:0xc0030b61
c001f10d:	c0 e8 03             	shr    al,0x3
c001f110:	83 e0 07             	and    eax,0x7
c001f113:	83 c0 07             	add    eax,0x7
c001f116:	88 c2                	mov    dl,al
c001f118:	83 e0 07             	and    eax,0x7
c001f11b:	83 e2 07             	and    edx,0x7
c001f11e:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f125:	8a 15 61 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030b61
c001f12b:	83 e2 c7             	and    edx,0xffffffc7
c001f12e:	09 ca                	or     edx,ecx
c001f130:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f134:	88 15 61 0b 03 c0    	mov    BYTE PTR ds:0xc0030b61,dl
c001f13a:	89 0c c5 68 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf498],ecx
c001f141:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f145:	89 14 c5 64 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf49c],edx
c001f14c:	a1 a4 0b 03 c0       	mov    eax,ds:0xc0030ba4
c001f151:	83 f8 08             	cmp    eax,0x8
c001f154:	75 08                	jne    c001f15e <Vm::fpuPush(unsigned long long)+0x56>
c001f156:	80 0d 60 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b60,0x40
c001f15d:	c3                   	ret    
c001f15e:	40                   	inc    eax
c001f15f:	a3 a4 0b 03 c0       	mov    ds:0xc0030ba4,eax
c001f164:	c3                   	ret    

c001f165 <Vm::fpuPop()>:
c001f165:	8a 0d 61 0b 03 c0    	mov    cl,BYTE PTR ds:0xc0030b61
c001f16b:	53                   	push   ebx
c001f16c:	c0 e9 03             	shr    cl,0x3
c001f16f:	8a 1d 61 0b 03 c0    	mov    bl,BYTE PTR ds:0xc0030b61
c001f175:	83 e1 07             	and    ecx,0x7
c001f178:	83 e3 c7             	and    ebx,0xffffffc7
c001f17b:	8b 04 cd 64 0b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf49c]
c001f182:	8b 14 cd 68 0b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf498]
c001f189:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f190:	83 e1 38             	and    ecx,0x38
c001f193:	09 d9                	or     ecx,ebx
c001f195:	88 0d 61 0b 03 c0    	mov    BYTE PTR ds:0xc0030b61,cl
c001f19b:	8b 0d a4 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ba4
c001f1a1:	85 c9                	test   ecx,ecx
c001f1a3:	74 09                	je     c001f1ae <Vm::fpuPop()+0x49>
c001f1a5:	49                   	dec    ecx
c001f1a6:	89 0d a4 0b 03 c0    	mov    DWORD PTR ds:0xc0030ba4,ecx
c001f1ac:	eb 07                	jmp    c001f1b5 <Vm::fpuPop()+0x50>
c001f1ae:	80 0d 60 0b 03 c0 40 	or     BYTE PTR ds:0xc0030b60,0x40
c001f1b5:	5b                   	pop    ebx
c001f1b6:	c3                   	ret    

c001f1b7 <Vm::x87Handler(regs*)>:
c001f1b7:	55                   	push   ebp
c001f1b8:	57                   	push   edi
c001f1b9:	56                   	push   esi
c001f1ba:	53                   	push   ebx
c001f1bb:	83 ec 1c             	sub    esp,0x1c
c001f1be:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f1c2:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f1c7:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f1ca:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f1d2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f1d6:	50                   	push   eax
c001f1d7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f1db:	50                   	push   eax
c001f1dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f1e0:	50                   	push   eax
c001f1e1:	53                   	push   ebx
c001f1e2:	e8 9d a1 ff ff       	call   c0019384 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f1e7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f1ea:	83 c4 10             	add    esp,0x10
c001f1ed:	89 c6                	mov    esi,eax
c001f1ef:	80 fa d9             	cmp    dl,0xd9
c001f1f2:	0f 85 52 01 00 00    	jne    c001f34a <Vm::x87Handler(regs*)+0x193>
c001f1f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1fc:	8d 50 20             	lea    edx,[eax+0x20]
c001f1ff:	80 fa 0e             	cmp    dl,0xe
c001f202:	0f 87 86 00 00 00    	ja     c001f28e <Vm::x87Handler(regs*)+0xd7>
c001f208:	0f b6 d2             	movzx  edx,dl
c001f20b:	ff 24 95 0c ba 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd45f4]
c001f212:	e8 e7 fc ff ff       	call   c001eefe <Vm::fpuGet0()>
c001f217:	eb 05                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f219:	e8 e5 fc ff ff       	call   c001ef03 <Vm::fpuGet1()>
c001f21e:	57                   	push   edi
c001f21f:	57                   	push   edi
c001f220:	52                   	push   edx
c001f221:	50                   	push   eax
c001f222:	e8 e1 fe ff ff       	call   c001f108 <Vm::fpuPush(unsigned long long)>
c001f227:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	b0 01                	mov    al,0x1
c001f230:	e9 e3 09 00 00       	jmp    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001f235:	83 ec 0c             	sub    esp,0xc
c001f238:	6a 00                	push   0x0
c001f23a:	e8 3b fe ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f23f:	59                   	pop    ecx
c001f240:	5e                   	pop    esi
c001f241:	52                   	push   edx
c001f242:	50                   	push   eax
c001f243:	e8 c2 fd ff ff       	call   c001f00a <Vm::fpuChs(unsigned long long)>
c001f248:	eb 13                	jmp    c001f25d <Vm::x87Handler(regs*)+0xa6>
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	6a 00                	push   0x0
c001f24f:	e8 26 fe ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f254:	5f                   	pop    edi
c001f255:	5d                   	pop    ebp
c001f256:	52                   	push   edx
c001f257:	50                   	push   eax
c001f258:	e8 a4 fd ff ff       	call   c001f001 <Vm::fpuAbs(unsigned long long)>
c001f25d:	83 c4 0c             	add    esp,0xc
c001f260:	52                   	push   edx
c001f261:	50                   	push   eax
c001f262:	6a 00                	push   0x0
c001f264:	e8 54 fe ff ff       	call   c001f0bd <Vm::fpuSetReg(int, unsigned long long)>
c001f269:	eb bc                	jmp    c001f227 <Vm::x87Handler(regs*)+0x70>
c001f26b:	e8 d3 fc ff ff       	call   c001ef43 <Vm::fpuGetLog210()>
c001f270:	eb ac                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f272:	e8 9c fc ff ff       	call   c001ef13 <Vm::fpuGetLog2E()>
c001f277:	eb a5                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f279:	e8 8d fc ff ff       	call   c001ef0b <Vm::fpuGetPi()>
c001f27e:	eb 9e                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f280:	e8 d6 fc ff ff       	call   c001ef5b <Vm::fpuGetLog102()>
c001f285:	eb 97                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f287:	e8 9f fc ff ff       	call   c001ef2b <Vm::fpuGetLogE2()>
c001f28c:	eb 90                	jmp    c001f21e <Vm::x87Handler(regs*)+0x67>
c001f28e:	8d 50 40             	lea    edx,[eax+0x40]
c001f291:	80 fa 07             	cmp    dl,0x7
c001f294:	77 15                	ja     c001f2ab <Vm::x87Handler(regs*)+0xf4>
c001f296:	83 ec 0c             	sub    esp,0xc
c001f299:	2d c0 00 00 00       	sub    eax,0xc0
c001f29e:	50                   	push   eax
c001f29f:	e8 d6 fd ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f2a4:	59                   	pop    ecx
c001f2a5:	5e                   	pop    esi
c001f2a6:	e9 75 ff ff ff       	jmp    c001f220 <Vm::x87Handler(regs*)+0x69>
c001f2ab:	8d 50 38             	lea    edx,[eax+0x38]
c001f2ae:	80 fa 07             	cmp    dl,0x7
c001f2b1:	77 3c                	ja     c001f2ef <Vm::x87Handler(regs*)+0x138>
c001f2b3:	83 ec 0c             	sub    esp,0xc
c001f2b6:	2d c8 00 00 00       	sub    eax,0xc8
c001f2bb:	50                   	push   eax
c001f2bc:	e8 b9 fd ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f2c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2c8:	89 c6                	mov    esi,eax
c001f2ca:	89 d7                	mov    edi,edx
c001f2cc:	e8 a9 fd ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f2d1:	83 c4 0c             	add    esp,0xc
c001f2d4:	52                   	push   edx
c001f2d5:	50                   	push   eax
c001f2d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2da:	2d c8 00 00 00       	sub    eax,0xc8
c001f2df:	50                   	push   eax
c001f2e0:	e8 d8 fd ff ff       	call   c001f0bd <Vm::fpuSetReg(int, unsigned long long)>
c001f2e5:	83 c4 0c             	add    esp,0xc
c001f2e8:	57                   	push   edi
c001f2e9:	56                   	push   esi
c001f2ea:	e9 73 ff ff ff       	jmp    c001f262 <Vm::x87Handler(regs*)+0xab>
c001f2ef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f2f3:	84 d2                	test   dl,dl
c001f2f5:	75 0f                	jne    c001f306 <Vm::x87Handler(regs*)+0x14f>
c001f2f7:	83 ec 0c             	sub    esp,0xc
c001f2fa:	ff 36                	push   DWORD PTR [esi]
c001f2fc:	e8 c8 fa ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f301:	e9 bf 00 00 00       	jmp    c001f3c5 <Vm::x87Handler(regs*)+0x20e>
c001f306:	80 fa 03             	cmp    dl,0x3
c001f309:	75 13                	jne    c001f31e <Vm::x87Handler(regs*)+0x167>
c001f30b:	e8 55 fe ff ff       	call   c001f165 <Vm::fpuPop()>
c001f310:	55                   	push   ebp
c001f311:	55                   	push   ebp
c001f312:	52                   	push   edx
c001f313:	50                   	push   eax
c001f314:	e8 4c fa ff ff       	call   c001ed65 <Vm::fpuInternalTo32(unsigned long long)>
c001f319:	e9 88 00 00 00       	jmp    c001f3a6 <Vm::x87Handler(regs*)+0x1ef>
c001f31e:	80 fa 05             	cmp    dl,0x5
c001f321:	75 0e                	jne    c001f331 <Vm::x87Handler(regs*)+0x17a>
c001f323:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f326:	66 a3 62 0b 03 c0    	mov    ds:0xc0030b62,ax
c001f32c:	e9 df 00 00 00       	jmp    c001f410 <Vm::x87Handler(regs*)+0x259>
c001f331:	31 c0                	xor    eax,eax
c001f333:	80 fa 07             	cmp    dl,0x7
c001f336:	0f 85 dc 08 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001f33c:	66 a1 62 0b 03 c0    	mov    ax,ds:0xc0030b62
c001f342:	66 89 06             	mov    WORD PTR [esi],ax
c001f345:	e9 c6 00 00 00       	jmp    c001f410 <Vm::x87Handler(regs*)+0x259>
c001f34a:	80 fa d8             	cmp    dl,0xd8
c001f34d:	0f 84 c9 00 00 00    	je     c001f41c <Vm::x87Handler(regs*)+0x265>
c001f353:	80 fa dc             	cmp    dl,0xdc
c001f356:	0f 84 0d 02 00 00    	je     c001f569 <Vm::x87Handler(regs*)+0x3b2>
c001f35c:	80 fa de             	cmp    dl,0xde
c001f35f:	0f 84 cd 02 00 00    	je     c001f632 <Vm::x87Handler(regs*)+0x47b>
c001f365:	80 fa dd             	cmp    dl,0xdd
c001f368:	0f 84 5f 04 00 00    	je     c001f7cd <Vm::x87Handler(regs*)+0x616>
c001f36e:	80 fa da             	cmp    dl,0xda
c001f371:	0f 84 24 05 00 00    	je     c001f89b <Vm::x87Handler(regs*)+0x6e4>
c001f377:	80 fa df             	cmp    dl,0xdf
c001f37a:	0f 84 68 05 00 00    	je     c001f8e8 <Vm::x87Handler(regs*)+0x731>
c001f380:	31 c0                	xor    eax,eax
c001f382:	80 fa db             	cmp    dl,0xdb
c001f385:	0f 85 8d 08 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001f38b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f38f:	80 fa 03             	cmp    dl,0x3
c001f392:	0f 85 70 06 00 00    	jne    c001fa08 <Vm::x87Handler(regs*)+0x851>
c001f398:	e8 c8 fd ff ff       	call   c001f165 <Vm::fpuPop()>
c001f39d:	55                   	push   ebp
c001f39e:	55                   	push   ebp
c001f39f:	52                   	push   edx
c001f3a0:	50                   	push   eax
c001f3a1:	e8 71 fa ff ff       	call   c001ee17 <Vm::fpuFloatToLong(unsigned long long)>
c001f3a6:	83 c4 10             	add    esp,0x10
c001f3a9:	89 06                	mov    DWORD PTR [esi],eax
c001f3ab:	eb 63                	jmp    c001f410 <Vm::x87Handler(regs*)+0x259>
c001f3ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3b1:	84 d2                	test   dl,dl
c001f3b3:	0f 85 e6 05 00 00    	jne    c001f99f <Vm::x87Handler(regs*)+0x7e8>
c001f3b9:	57                   	push   edi
c001f3ba:	57                   	push   edi
c001f3bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3be:	ff 36                	push   DWORD PTR [esi]
c001f3c0:	e8 49 fa ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001f3c5:	5e                   	pop    esi
c001f3c6:	5f                   	pop    edi
c001f3c7:	52                   	push   edx
c001f3c8:	50                   	push   eax
c001f3c9:	e8 3a fd ff ff       	call   c001f108 <Vm::fpuPush(unsigned long long)>
c001f3ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3d2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3d5:	e9 51 fe ff ff       	jmp    c001f22b <Vm::x87Handler(regs*)+0x74>
c001f3da:	80 fa 03             	cmp    dl,0x3
c001f3dd:	0f 85 d7 06 00 00    	jne    c001faba <Vm::x87Handler(regs*)+0x903>
c001f3e3:	57                   	push   edi
c001f3e4:	57                   	push   edi
c001f3e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3e8:	ff 36                	push   DWORD PTR [esi]
c001f3ea:	e8 1f fa ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001f3ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3f6:	89 c6                	mov    esi,eax
c001f3f8:	89 d7                	mov    edi,edx
c001f3fa:	e8 7b fc ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f3ff:	57                   	push   edi
c001f400:	56                   	push   esi
c001f401:	52                   	push   edx
c001f402:	50                   	push   eax
c001f403:	e8 95 fb ff ff       	call   c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f408:	83 c4 20             	add    esp,0x20
c001f40b:	e8 55 fd ff ff       	call   c001f165 <Vm::fpuPop()>
c001f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f414:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f417:	e9 12 fe ff ff       	jmp    c001f22e <Vm::x87Handler(regs*)+0x77>
c001f41c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f420:	8d 50 40             	lea    edx,[eax+0x40]
c001f423:	80 fa 07             	cmp    dl,0x7
c001f426:	77 29                	ja     c001f451 <Vm::x87Handler(regs*)+0x29a>
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	2d c0 00 00 00       	sub    eax,0xc0
c001f430:	50                   	push   eax
c001f431:	e8 44 fc ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f436:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f43d:	89 c6                	mov    esi,eax
c001f43f:	89 d7                	mov    edi,edx
c001f441:	e8 34 fc ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f446:	57                   	push   edi
c001f447:	56                   	push   esi
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	e8 a1 fb ff ff       	call   c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f44f:	eb 2f                	jmp    c001f480 <Vm::x87Handler(regs*)+0x2c9>
c001f451:	8d 50 38             	lea    edx,[eax+0x38]
c001f454:	80 fa 07             	cmp    dl,0x7
c001f457:	77 2f                	ja     c001f488 <Vm::x87Handler(regs*)+0x2d1>
c001f459:	83 ec 0c             	sub    esp,0xc
c001f45c:	2d c8 00 00 00       	sub    eax,0xc8
c001f461:	50                   	push   eax
c001f462:	e8 13 fc ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f467:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f46e:	89 c6                	mov    esi,eax
c001f470:	89 d7                	mov    edi,edx
c001f472:	e8 03 fc ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f477:	57                   	push   edi
c001f478:	56                   	push   esi
c001f479:	52                   	push   edx
c001f47a:	50                   	push   eax
c001f47b:	e8 a9 fb ff ff       	call   c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f480:	83 c4 1c             	add    esp,0x1c
c001f483:	e9 d8 fd ff ff       	jmp    c001f260 <Vm::x87Handler(regs*)+0xa9>
c001f488:	8d 50 30             	lea    edx,[eax+0x30]
c001f48b:	80 fa 07             	cmp    dl,0x7
c001f48e:	77 0d                	ja     c001f49d <Vm::x87Handler(regs*)+0x2e6>
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	2d d0 00 00 00       	sub    eax,0xd0
c001f498:	e9 99 03 00 00       	jmp    c001f836 <Vm::x87Handler(regs*)+0x67f>
c001f49d:	8d 50 28             	lea    edx,[eax+0x28]
c001f4a0:	80 fa 07             	cmp    dl,0x7
c001f4a3:	77 0d                	ja     c001f4b2 <Vm::x87Handler(regs*)+0x2fb>
c001f4a5:	83 ec 0c             	sub    esp,0xc
c001f4a8:	2d d8 00 00 00       	sub    eax,0xd8
c001f4ad:	e9 c0 03 00 00       	jmp    c001f872 <Vm::x87Handler(regs*)+0x6bb>
c001f4b2:	8d 50 20             	lea    edx,[eax+0x20]
c001f4b5:	80 fa 07             	cmp    dl,0x7
c001f4b8:	77 1b                	ja     c001f4d5 <Vm::x87Handler(regs*)+0x31e>
c001f4ba:	83 ec 0c             	sub    esp,0xc
c001f4bd:	2d e0 00 00 00       	sub    eax,0xe0
c001f4c2:	50                   	push   eax
c001f4c3:	e8 b2 fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f4c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4cf:	89 c6                	mov    esi,eax
c001f4d1:	89 d7                	mov    edi,edx
c001f4d3:	eb 22                	jmp    c001f4f7 <Vm::x87Handler(regs*)+0x340>
c001f4d5:	8d 50 18             	lea    edx,[eax+0x18]
c001f4d8:	80 fa 07             	cmp    dl,0x7
c001f4db:	77 2d                	ja     c001f50a <Vm::x87Handler(regs*)+0x353>
c001f4dd:	83 ec 0c             	sub    esp,0xc
c001f4e0:	6a 00                	push   0x0
c001f4e2:	e8 93 fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f4e7:	89 c6                	mov    esi,eax
c001f4e9:	89 d7                	mov    edi,edx
c001f4eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4ef:	2d e8 00 00 00       	sub    eax,0xe8
c001f4f4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f7:	e8 7e fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f4fc:	57                   	push   edi
c001f4fd:	56                   	push   esi
c001f4fe:	52                   	push   edx
c001f4ff:	50                   	push   eax
c001f500:	e8 15 fb ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f505:	e9 76 ff ff ff       	jmp    c001f480 <Vm::x87Handler(regs*)+0x2c9>
c001f50a:	8d 50 10             	lea    edx,[eax+0x10]
c001f50d:	80 fa 07             	cmp    dl,0x7
c001f510:	77 1b                	ja     c001f52d <Vm::x87Handler(regs*)+0x376>
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	2d f0 00 00 00       	sub    eax,0xf0
c001f51a:	50                   	push   eax
c001f51b:	e8 5a fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f520:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f527:	89 c6                	mov    esi,eax
c001f529:	89 d7                	mov    edi,edx
c001f52b:	eb 22                	jmp    c001f54f <Vm::x87Handler(regs*)+0x398>
c001f52d:	3c f7                	cmp    al,0xf7
c001f52f:	0f 86 d1 03 00 00    	jbe    c001f906 <Vm::x87Handler(regs*)+0x74f>
c001f535:	83 ec 0c             	sub    esp,0xc
c001f538:	6a 00                	push   0x0
c001f53a:	e8 3b fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f53f:	89 c6                	mov    esi,eax
c001f541:	89 d7                	mov    edi,edx
c001f543:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f547:	2d f8 00 00 00       	sub    eax,0xf8
c001f54c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54f:	e8 26 fb ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f554:	57                   	push   edi
c001f555:	56                   	push   esi
c001f556:	52                   	push   edx
c001f557:	50                   	push   eax
c001f558:	e8 eb fa ff ff       	call   c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f55d:	83 c4 1c             	add    esp,0x1c
c001f560:	52                   	push   edx
c001f561:	50                   	push   eax
c001f562:	6a 00                	push   0x0
c001f564:	e9 51 02 00 00       	jmp    c001f7ba <Vm::x87Handler(regs*)+0x603>
c001f569:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f56d:	8d 50 40             	lea    edx,[eax+0x40]
c001f570:	80 fa 07             	cmp    dl,0x7
c001f573:	77 37                	ja     c001f5ac <Vm::x87Handler(regs*)+0x3f5>
c001f575:	83 ec 0c             	sub    esp,0xc
c001f578:	2d c0 00 00 00       	sub    eax,0xc0
c001f57d:	50                   	push   eax
c001f57e:	e8 f7 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f583:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f58a:	89 c6                	mov    esi,eax
c001f58c:	89 d7                	mov    edi,edx
c001f58e:	e8 e7 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f593:	57                   	push   edi
c001f594:	56                   	push   esi
c001f595:	52                   	push   edx
c001f596:	50                   	push   eax
c001f597:	e8 54 fa ff ff       	call   c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f59c:	83 c4 1c             	add    esp,0x1c
c001f59f:	52                   	push   edx
c001f5a0:	50                   	push   eax
c001f5a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5a5:	2d c0 00 00 00       	sub    eax,0xc0
c001f5aa:	eb 3d                	jmp    c001f5e9 <Vm::x87Handler(regs*)+0x432>
c001f5ac:	8d 50 38             	lea    edx,[eax+0x38]
c001f5af:	80 fa 07             	cmp    dl,0x7
c001f5b2:	77 3b                	ja     c001f5ef <Vm::x87Handler(regs*)+0x438>
c001f5b4:	83 ec 0c             	sub    esp,0xc
c001f5b7:	2d c8 00 00 00       	sub    eax,0xc8
c001f5bc:	50                   	push   eax
c001f5bd:	e8 b8 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f5c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5c9:	89 c6                	mov    esi,eax
c001f5cb:	89 d7                	mov    edi,edx
c001f5cd:	e8 a8 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f5d2:	57                   	push   edi
c001f5d3:	56                   	push   esi
c001f5d4:	52                   	push   edx
c001f5d5:	50                   	push   eax
c001f5d6:	e8 4e fa ff ff       	call   c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f5db:	83 c4 1c             	add    esp,0x1c
c001f5de:	52                   	push   edx
c001f5df:	50                   	push   eax
c001f5e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5e4:	2d c8 00 00 00       	sub    eax,0xc8
c001f5e9:	50                   	push   eax
c001f5ea:	e9 75 fc ff ff       	jmp    c001f264 <Vm::x87Handler(regs*)+0xad>
c001f5ef:	83 c0 18             	add    eax,0x18
c001f5f2:	3c 07                	cmp    al,0x7
c001f5f4:	0f 87 3b 04 00 00    	ja     c001fa35 <Vm::x87Handler(regs*)+0x87e>
c001f5fa:	83 ec 0c             	sub    esp,0xc
c001f5fd:	6a 00                	push   0x0
c001f5ff:	e8 76 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f604:	89 c6                	mov    esi,eax
c001f606:	89 d7                	mov    edi,edx
c001f608:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60c:	2d e8 00 00 00       	sub    eax,0xe8
c001f611:	89 04 24             	mov    DWORD PTR [esp],eax
c001f614:	e8 61 fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f619:	57                   	push   edi
c001f61a:	56                   	push   esi
c001f61b:	52                   	push   edx
c001f61c:	50                   	push   eax
c001f61d:	e8 f8 f9 ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f622:	83 c4 1c             	add    esp,0x1c
c001f625:	52                   	push   edx
c001f626:	50                   	push   eax
c001f627:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f62b:	2d e8 00 00 00       	sub    eax,0xe8
c001f630:	eb b7                	jmp    c001f5e9 <Vm::x87Handler(regs*)+0x432>
c001f632:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f636:	8d 50 40             	lea    edx,[eax+0x40]
c001f639:	80 fa 07             	cmp    dl,0x7
c001f63c:	77 3a                	ja     c001f678 <Vm::x87Handler(regs*)+0x4c1>
c001f63e:	83 ec 0c             	sub    esp,0xc
c001f641:	2d c0 00 00 00       	sub    eax,0xc0
c001f646:	50                   	push   eax
c001f647:	e8 2e fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f64c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f653:	89 c6                	mov    esi,eax
c001f655:	89 d7                	mov    edi,edx
c001f657:	e8 1e fa ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f65c:	57                   	push   edi
c001f65d:	56                   	push   esi
c001f65e:	52                   	push   edx
c001f65f:	50                   	push   eax
c001f660:	e8 8b f9 ff ff       	call   c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f665:	83 c4 1c             	add    esp,0x1c
c001f668:	52                   	push   edx
c001f669:	50                   	push   eax
c001f66a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f66e:	2d c0 00 00 00       	sub    eax,0xc0
c001f673:	e9 9e 01 00 00       	jmp    c001f816 <Vm::x87Handler(regs*)+0x65f>
c001f678:	8d 50 20             	lea    edx,[eax+0x20]
c001f67b:	80 fa 07             	cmp    dl,0x7
c001f67e:	77 3a                	ja     c001f6ba <Vm::x87Handler(regs*)+0x503>
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	2d e0 00 00 00       	sub    eax,0xe0
c001f688:	50                   	push   eax
c001f689:	e8 ec f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f68e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f695:	89 c6                	mov    esi,eax
c001f697:	89 d7                	mov    edi,edx
c001f699:	e8 dc f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f69e:	57                   	push   edi
c001f69f:	56                   	push   esi
c001f6a0:	52                   	push   edx
c001f6a1:	50                   	push   eax
c001f6a2:	e8 73 f9 ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6a7:	83 c4 1c             	add    esp,0x1c
c001f6aa:	52                   	push   edx
c001f6ab:	50                   	push   eax
c001f6ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6b0:	2d e0 00 00 00       	sub    eax,0xe0
c001f6b5:	e9 5c 01 00 00       	jmp    c001f816 <Vm::x87Handler(regs*)+0x65f>
c001f6ba:	8d 50 18             	lea    edx,[eax+0x18]
c001f6bd:	80 fa 07             	cmp    dl,0x7
c001f6c0:	77 3b                	ja     c001f6fd <Vm::x87Handler(regs*)+0x546>
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	6a 00                	push   0x0
c001f6c7:	e8 ae f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f6cc:	89 c6                	mov    esi,eax
c001f6ce:	89 d7                	mov    edi,edx
c001f6d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d4:	2d e8 00 00 00       	sub    eax,0xe8
c001f6d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6dc:	e8 99 f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f6e1:	57                   	push   edi
c001f6e2:	56                   	push   esi
c001f6e3:	52                   	push   edx
c001f6e4:	50                   	push   eax
c001f6e5:	e8 30 f9 ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6ea:	83 c4 1c             	add    esp,0x1c
c001f6ed:	52                   	push   edx
c001f6ee:	50                   	push   eax
c001f6ef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f3:	2d e8 00 00 00       	sub    eax,0xe8
c001f6f8:	e9 19 01 00 00       	jmp    c001f816 <Vm::x87Handler(regs*)+0x65f>
c001f6fd:	8d 50 38             	lea    edx,[eax+0x38]
c001f700:	80 fa 07             	cmp    dl,0x7
c001f703:	77 37                	ja     c001f73c <Vm::x87Handler(regs*)+0x585>
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	2d c8 00 00 00       	sub    eax,0xc8
c001f70d:	50                   	push   eax
c001f70e:	e8 67 f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f713:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f71a:	89 c6                	mov    esi,eax
c001f71c:	89 d7                	mov    edi,edx
c001f71e:	e8 57 f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f723:	57                   	push   edi
c001f724:	56                   	push   esi
c001f725:	52                   	push   edx
c001f726:	50                   	push   eax
c001f727:	e8 fd f8 ff ff       	call   c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f72c:	83 c4 1c             	add    esp,0x1c
c001f72f:	52                   	push   edx
c001f730:	50                   	push   eax
c001f731:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f735:	2d c8 00 00 00       	sub    eax,0xc8
c001f73a:	eb 7d                	jmp    c001f7b9 <Vm::x87Handler(regs*)+0x602>
c001f73c:	3c f7                	cmp    al,0xf7
c001f73e:	76 38                	jbe    c001f778 <Vm::x87Handler(regs*)+0x5c1>
c001f740:	83 ec 0c             	sub    esp,0xc
c001f743:	6a 00                	push   0x0
c001f745:	e8 30 f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f74a:	89 c6                	mov    esi,eax
c001f74c:	89 d7                	mov    edi,edx
c001f74e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f752:	2d f8 00 00 00       	sub    eax,0xf8
c001f757:	89 04 24             	mov    DWORD PTR [esp],eax
c001f75a:	e8 1b f9 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f75f:	57                   	push   edi
c001f760:	56                   	push   esi
c001f761:	52                   	push   edx
c001f762:	50                   	push   eax
c001f763:	e8 e0 f8 ff ff       	call   c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f768:	83 c4 1c             	add    esp,0x1c
c001f76b:	52                   	push   edx
c001f76c:	50                   	push   eax
c001f76d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f771:	2d f8 00 00 00       	sub    eax,0xf8
c001f776:	eb 41                	jmp    c001f7b9 <Vm::x87Handler(regs*)+0x602>
c001f778:	8d 50 10             	lea    edx,[eax+0x10]
c001f77b:	80 fa 07             	cmp    dl,0x7
c001f77e:	0f 87 5a 01 00 00    	ja     c001f8de <Vm::x87Handler(regs*)+0x727>
c001f784:	83 ec 0c             	sub    esp,0xc
c001f787:	2d f0 00 00 00       	sub    eax,0xf0
c001f78c:	50                   	push   eax
c001f78d:	e8 e8 f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f792:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f799:	89 c6                	mov    esi,eax
c001f79b:	89 d7                	mov    edi,edx
c001f79d:	e8 d8 f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f7a2:	57                   	push   edi
c001f7a3:	56                   	push   esi
c001f7a4:	52                   	push   edx
c001f7a5:	50                   	push   eax
c001f7a6:	e8 9d f8 ff ff       	call   c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7ab:	83 c4 1c             	add    esp,0x1c
c001f7ae:	52                   	push   edx
c001f7af:	50                   	push   eax
c001f7b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b4:	2d f0 00 00 00       	sub    eax,0xf0
c001f7b9:	50                   	push   eax
c001f7ba:	e8 fe f8 ff ff       	call   c001f0bd <Vm::fpuSetReg(int, unsigned long long)>
c001f7bf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7c3:	e8 9d f9 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f7c8:	e9 5e fa ff ff       	jmp    c001f22b <Vm::x87Handler(regs*)+0x74>
c001f7cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d1:	8d 50 30             	lea    edx,[eax+0x30]
c001f7d4:	80 fa 07             	cmp    dl,0x7
c001f7d7:	77 1d                	ja     c001f7f6 <Vm::x87Handler(regs*)+0x63f>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	6a 00                	push   0x0
c001f7de:	e8 97 f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f7e3:	83 c4 0c             	add    esp,0xc
c001f7e6:	52                   	push   edx
c001f7e7:	50                   	push   eax
c001f7e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ec:	2d d0 00 00 00       	sub    eax,0xd0
c001f7f1:	e9 f3 fd ff ff       	jmp    c001f5e9 <Vm::x87Handler(regs*)+0x432>
c001f7f6:	8d 50 28             	lea    edx,[eax+0x28]
c001f7f9:	80 fa 07             	cmp    dl,0x7
c001f7fc:	77 28                	ja     c001f826 <Vm::x87Handler(regs*)+0x66f>
c001f7fe:	83 ec 0c             	sub    esp,0xc
c001f801:	6a 00                	push   0x0
c001f803:	e8 72 f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f808:	83 c4 0c             	add    esp,0xc
c001f80b:	52                   	push   edx
c001f80c:	50                   	push   eax
c001f80d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f811:	2d d8 00 00 00       	sub    eax,0xd8
c001f816:	50                   	push   eax
c001f817:	e8 a1 f8 ff ff       	call   c001f0bd <Vm::fpuSetReg(int, unsigned long long)>
c001f81c:	e8 44 f9 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f821:	e9 01 fa ff ff       	jmp    c001f227 <Vm::x87Handler(regs*)+0x70>
c001f826:	8d 50 20             	lea    edx,[eax+0x20]
c001f829:	80 fa 07             	cmp    dl,0x7
c001f82c:	77 30                	ja     c001f85e <Vm::x87Handler(regs*)+0x6a7>
c001f82e:	83 ec 0c             	sub    esp,0xc
c001f831:	2d e0 00 00 00       	sub    eax,0xe0
c001f836:	50                   	push   eax
c001f837:	e8 3e f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f83c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f843:	89 c6                	mov    esi,eax
c001f845:	89 d7                	mov    edi,edx
c001f847:	e8 2e f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f84c:	57                   	push   edi
c001f84d:	56                   	push   esi
c001f84e:	52                   	push   edx
c001f84f:	50                   	push   eax
c001f850:	e8 48 f7 ff ff       	call   c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f855:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f859:	e9 54 02 00 00       	jmp    c001fab2 <Vm::x87Handler(regs*)+0x8fb>
c001f85e:	8d 50 18             	lea    edx,[eax+0x18]
c001f861:	80 fa 07             	cmp    dl,0x7
c001f864:	0f 87 43 fb ff ff    	ja     c001f3ad <Vm::x87Handler(regs*)+0x1f6>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	2d e8 00 00 00       	sub    eax,0xe8
c001f872:	50                   	push   eax
c001f873:	e8 02 f8 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f87f:	89 c6                	mov    esi,eax
c001f881:	89 d7                	mov    edi,edx
c001f883:	e8 f2 f7 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f888:	57                   	push   edi
c001f889:	56                   	push   esi
c001f88a:	52                   	push   edx
c001f88b:	50                   	push   eax
c001f88c:	e8 0c f7 ff ff       	call   c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f891:	83 c4 20             	add    esp,0x20
c001f894:	e8 cc f8 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f899:	eb 62                	jmp    c001f8fd <Vm::x87Handler(regs*)+0x746>
c001f89b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f89f:	0f 85 0f 01 00 00    	jne    c001f9b4 <Vm::x87Handler(regs*)+0x7fd>
c001f8a5:	83 ec 0c             	sub    esp,0xc
c001f8a8:	6a 01                	push   0x1
c001f8aa:	e8 cb f7 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f8af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8b6:	89 c6                	mov    esi,eax
c001f8b8:	89 d7                	mov    edi,edx
c001f8ba:	e8 bb f7 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f8bf:	57                   	push   edi
c001f8c0:	56                   	push   esi
c001f8c1:	52                   	push   edx
c001f8c2:	50                   	push   eax
c001f8c3:	e8 d5 f6 ff ff       	call   c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8c8:	83 c4 20             	add    esp,0x20
c001f8cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8cf:	e8 91 f8 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f8d4:	e8 8c f8 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f8d9:	e9 50 f9 ff ff       	jmp    c001f22e <Vm::x87Handler(regs*)+0x77>
c001f8de:	3c d9                	cmp    al,0xd9
c001f8e0:	0f 85 b5 02 00 00    	jne    c001fb9b <Vm::x87Handler(regs*)+0x9e4>
c001f8e6:	eb bd                	jmp    c001f8a5 <Vm::x87Handler(regs*)+0x6ee>
c001f8e8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f8ec:	0f 85 ea 02 00 00    	jne    c001fbdc <Vm::x87Handler(regs*)+0xa25>
c001f8f2:	0f b7 05 60 0b 03 c0 	movzx  eax,WORD PTR ds:0xc0030b60
c001f8f9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f8fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f901:	e9 28 f9 ff ff       	jmp    c001f22e <Vm::x87Handler(regs*)+0x77>
c001f906:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f90a:	84 d2                	test   dl,dl
c001f90c:	75 0f                	jne    c001f91d <Vm::x87Handler(regs*)+0x766>
c001f90e:	83 ec 0c             	sub    esp,0xc
c001f911:	ff 36                	push   DWORD PTR [esi]
c001f913:	e8 b1 f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f918:	e9 2c 01 00 00       	jmp    c001fa49 <Vm::x87Handler(regs*)+0x892>
c001f91d:	80 fa 01             	cmp    dl,0x1
c001f920:	75 0f                	jne    c001f931 <Vm::x87Handler(regs*)+0x77a>
c001f922:	83 ec 0c             	sub    esp,0xc
c001f925:	ff 36                	push   DWORD PTR [esi]
c001f927:	e8 9d f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f92c:	e9 81 02 00 00       	jmp    c001fbb2 <Vm::x87Handler(regs*)+0x9fb>
c001f931:	80 fa 04             	cmp    dl,0x4
c001f934:	75 0f                	jne    c001f945 <Vm::x87Handler(regs*)+0x78e>
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	ff 36                	push   DWORD PTR [esi]
c001f93b:	e8 89 f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f940:	e9 86 01 00 00       	jmp    c001facb <Vm::x87Handler(regs*)+0x914>
c001f945:	80 fa 05             	cmp    dl,0x5
c001f948:	75 1b                	jne    c001f965 <Vm::x87Handler(regs*)+0x7ae>
c001f94a:	83 ec 0c             	sub    esp,0xc
c001f94d:	6a 00                	push   0x0
c001f94f:	e8 26 f7 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f954:	89 c7                	mov    edi,eax
c001f956:	89 d5                	mov    ebp,edx
c001f958:	58                   	pop    eax
c001f959:	ff 36                	push   DWORD PTR [esi]
c001f95b:	e8 69 f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f960:	e9 a3 01 00 00       	jmp    c001fb08 <Vm::x87Handler(regs*)+0x951>
c001f965:	80 fa 06             	cmp    dl,0x6
c001f968:	75 0f                	jne    c001f979 <Vm::x87Handler(regs*)+0x7c2>
c001f96a:	83 ec 0c             	sub    esp,0xc
c001f96d:	ff 36                	push   DWORD PTR [esi]
c001f96f:	e8 55 f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f974:	e9 ae 01 00 00       	jmp    c001fb27 <Vm::x87Handler(regs*)+0x970>
c001f979:	31 c0                	xor    eax,eax
c001f97b:	80 fa 07             	cmp    dl,0x7
c001f97e:	0f 85 94 02 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	6a 00                	push   0x0
c001f989:	e8 ec f6 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f98e:	89 c7                	mov    edi,eax
c001f990:	89 d5                	mov    ebp,edx
c001f992:	58                   	pop    eax
c001f993:	ff 36                	push   DWORD PTR [esi]
c001f995:	e8 2f f4 ff ff       	call   c001edc9 <Vm::fpu32ToInternal(unsigned int)>
c001f99a:	e9 cb 01 00 00       	jmp    c001fb6a <Vm::x87Handler(regs*)+0x9b3>
c001f99f:	80 fa 03             	cmp    dl,0x3
c001f9a2:	0f 85 d3 01 00 00    	jne    c001fb7b <Vm::x87Handler(regs*)+0x9c4>
c001f9a8:	e8 b8 f7 ff ff       	call   c001f165 <Vm::fpuPop()>
c001f9ad:	51                   	push   ecx
c001f9ae:	51                   	push   ecx
c001f9af:	e9 de 01 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0x9db>
c001f9b4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9b8:	80 fa 01             	cmp    dl,0x1
c001f9bb:	75 09                	jne    c001f9c6 <Vm::x87Handler(regs*)+0x80f>
c001f9bd:	57                   	push   edi
c001f9be:	57                   	push   edi
c001f9bf:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9c1:	e9 e3 01 00 00       	jmp    c001fba9 <Vm::x87Handler(regs*)+0x9f2>
c001f9c6:	80 fa 04             	cmp    dl,0x4
c001f9c9:	75 12                	jne    c001f9dd <Vm::x87Handler(regs*)+0x826>
c001f9cb:	31 d2                	xor    edx,edx
c001f9cd:	51                   	push   ecx
c001f9ce:	51                   	push   ecx
c001f9cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9d1:	52                   	push   edx
c001f9d2:	50                   	push   eax
c001f9d3:	e8 d0 f4 ff ff       	call   c001eea8 <Vm::fpuLongToFloat(long long)>
c001f9d8:	e9 ee 00 00 00       	jmp    c001facb <Vm::x87Handler(regs*)+0x914>
c001f9dd:	31 c0                	xor    eax,eax
c001f9df:	80 fa 07             	cmp    dl,0x7
c001f9e2:	0f 85 30 02 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	6a 00                	push   0x0
c001f9ed:	e8 88 f6 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001f9f2:	89 c7                	mov    edi,eax
c001f9f4:	89 d5                	mov    ebp,edx
c001f9f6:	58                   	pop    eax
c001f9f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9f9:	5a                   	pop    edx
c001f9fa:	31 d2                	xor    edx,edx
c001f9fc:	52                   	push   edx
c001f9fd:	50                   	push   eax
c001f9fe:	e8 a5 f4 ff ff       	call   c001eea8 <Vm::fpuLongToFloat(long long)>
c001fa03:	e9 62 01 00 00       	jmp    c001fb6a <Vm::x87Handler(regs*)+0x9b3>
c001fa08:	84 d2                	test   dl,dl
c001fa0a:	75 0d                	jne    c001fa19 <Vm::x87Handler(regs*)+0x862>
c001fa0c:	31 d2                	xor    edx,edx
c001fa0e:	55                   	push   ebp
c001fa0f:	55                   	push   ebp
c001fa10:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa12:	52                   	push   edx
c001fa13:	50                   	push   eax
c001fa14:	e9 d3 01 00 00       	jmp    c001fbec <Vm::x87Handler(regs*)+0xa35>
c001fa19:	31 c0                	xor    eax,eax
c001fa1b:	80 fa 02             	cmp    dl,0x2
c001fa1e:	0f 85 f4 01 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	6a 00                	push   0x0
c001fa29:	e8 4c f6 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fa2e:	59                   	pop    ecx
c001fa2f:	5f                   	pop    edi
c001fa30:	e9 6a f9 ff ff       	jmp    c001f39f <Vm::x87Handler(regs*)+0x1e8>
c001fa35:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa39:	84 d2                	test   dl,dl
c001fa3b:	75 2a                	jne    c001fa67 <Vm::x87Handler(regs*)+0x8b0>
c001fa3d:	50                   	push   eax
c001fa3e:	50                   	push   eax
c001fa3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa42:	ff 36                	push   DWORD PTR [esi]
c001fa44:	e8 c5 f3 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fa49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa50:	89 c6                	mov    esi,eax
c001fa52:	89 d7                	mov    edi,edx
c001fa54:	e8 21 f6 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fa59:	57                   	push   edi
c001fa5a:	56                   	push   esi
c001fa5b:	52                   	push   edx
c001fa5c:	50                   	push   eax
c001fa5d:	e8 8e f5 ff ff       	call   c001eff0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa62:	e9 64 01 00 00       	jmp    c001fbcb <Vm::x87Handler(regs*)+0xa14>
c001fa67:	80 fa 01             	cmp    dl,0x1
c001fa6a:	75 11                	jne    c001fa7d <Vm::x87Handler(regs*)+0x8c6>
c001fa6c:	50                   	push   eax
c001fa6d:	50                   	push   eax
c001fa6e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa71:	ff 36                	push   DWORD PTR [esi]
c001fa73:	e8 96 f3 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fa78:	e9 35 01 00 00       	jmp    c001fbb2 <Vm::x87Handler(regs*)+0x9fb>
c001fa7d:	80 fa 02             	cmp    dl,0x2
c001fa80:	0f 85 54 f9 ff ff    	jne    c001f3da <Vm::x87Handler(regs*)+0x223>
c001fa86:	55                   	push   ebp
c001fa87:	55                   	push   ebp
c001fa88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa8b:	ff 36                	push   DWORD PTR [esi]
c001fa8d:	e8 7c f3 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fa92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa99:	89 c6                	mov    esi,eax
c001fa9b:	89 d7                	mov    edi,edx
c001fa9d:	e8 d8 f5 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001faa2:	57                   	push   edi
c001faa3:	56                   	push   esi
c001faa4:	52                   	push   edx
c001faa5:	50                   	push   eax
c001faa6:	e8 f2 f4 ff ff       	call   c001ef9d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001faab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001faaf:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fab2:	83 c4 20             	add    esp,0x20
c001fab5:	e9 74 f7 ff ff       	jmp    c001f22e <Vm::x87Handler(regs*)+0x77>
c001faba:	80 fa 04             	cmp    dl,0x4
c001fabd:	75 2a                	jne    c001fae9 <Vm::x87Handler(regs*)+0x932>
c001fabf:	51                   	push   ecx
c001fac0:	51                   	push   ecx
c001fac1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fac4:	ff 36                	push   DWORD PTR [esi]
c001fac6:	e8 43 f3 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001facb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fad2:	89 c6                	mov    esi,eax
c001fad4:	89 d7                	mov    edi,edx
c001fad6:	e8 9f f5 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fadb:	57                   	push   edi
c001fadc:	56                   	push   esi
c001fadd:	52                   	push   edx
c001fade:	50                   	push   eax
c001fadf:	e8 36 f5 ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fae4:	e9 e2 00 00 00       	jmp    c001fbcb <Vm::x87Handler(regs*)+0xa14>
c001fae9:	80 fa 05             	cmp    dl,0x5
c001faec:	75 28                	jne    c001fb16 <Vm::x87Handler(regs*)+0x95f>
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	6a 00                	push   0x0
c001faf3:	e8 82 f5 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001faf8:	89 c7                	mov    edi,eax
c001fafa:	89 d5                	mov    ebp,edx
c001fafc:	58                   	pop    eax
c001fafd:	5a                   	pop    edx
c001fafe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb01:	ff 36                	push   DWORD PTR [esi]
c001fb03:	e8 06 f3 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fb08:	83 c4 10             	add    esp,0x10
c001fb0b:	55                   	push   ebp
c001fb0c:	57                   	push   edi
c001fb0d:	52                   	push   edx
c001fb0e:	50                   	push   eax
c001fb0f:	e8 06 f5 ff ff       	call   c001f01a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb14:	eb 60                	jmp    c001fb76 <Vm::x87Handler(regs*)+0x9bf>
c001fb16:	80 fa 06             	cmp    dl,0x6
c001fb19:	75 2a                	jne    c001fb45 <Vm::x87Handler(regs*)+0x98e>
c001fb1b:	51                   	push   ecx
c001fb1c:	51                   	push   ecx
c001fb1d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb20:	ff 36                	push   DWORD PTR [esi]
c001fb22:	e8 e7 f2 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fb27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb2e:	89 c6                	mov    esi,eax
c001fb30:	89 d7                	mov    edi,edx
c001fb32:	e8 43 f5 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fb37:	57                   	push   edi
c001fb38:	56                   	push   esi
c001fb39:	52                   	push   edx
c001fb3a:	50                   	push   eax
c001fb3b:	e8 08 f5 ff ff       	call   c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb40:	e9 86 00 00 00       	jmp    c001fbcb <Vm::x87Handler(regs*)+0xa14>
c001fb45:	31 c0                	xor    eax,eax
c001fb47:	80 fa 07             	cmp    dl,0x7
c001fb4a:	0f 85 c8 00 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	6a 00                	push   0x0
c001fb55:	e8 20 f5 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fb5a:	89 c7                	mov    edi,eax
c001fb5c:	89 d5                	mov    ebp,edx
c001fb5e:	58                   	pop    eax
c001fb5f:	5a                   	pop    edx
c001fb60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb63:	ff 36                	push   DWORD PTR [esi]
c001fb65:	e8 a4 f2 ff ff       	call   c001ee0e <Vm::fpu64ToInternal(unsigned long long)>
c001fb6a:	83 c4 10             	add    esp,0x10
c001fb6d:	55                   	push   ebp
c001fb6e:	57                   	push   edi
c001fb6f:	52                   	push   edx
c001fb70:	50                   	push   eax
c001fb71:	e8 d2 f4 ff ff       	call   c001f048 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb76:	83 c4 0c             	add    esp,0xc
c001fb79:	eb 53                	jmp    c001fbce <Vm::x87Handler(regs*)+0xa17>
c001fb7b:	31 c0                	xor    eax,eax
c001fb7d:	80 fa 02             	cmp    dl,0x2
c001fb80:	0f 85 92 00 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	6a 00                	push   0x0
c001fb8b:	e8 ea f4 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fb90:	59                   	pop    ecx
c001fb91:	5f                   	pop    edi
c001fb92:	52                   	push   edx
c001fb93:	50                   	push   eax
c001fb94:	e8 27 f2 ff ff       	call   c001edc0 <Vm::fpuInternalTo64(unsigned long long)>
c001fb99:	eb 70                	jmp    c001fc0b <Vm::x87Handler(regs*)+0xa54>
c001fb9b:	31 c0                	xor    eax,eax
c001fb9d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fba2:	75 74                	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001fba4:	50                   	push   eax
c001fba5:	50                   	push   eax
c001fba6:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fba9:	31 d2                	xor    edx,edx
c001fbab:	52                   	push   edx
c001fbac:	50                   	push   eax
c001fbad:	e8 f6 f2 ff ff       	call   c001eea8 <Vm::fpuLongToFloat(long long)>
c001fbb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbb9:	89 c6                	mov    esi,eax
c001fbbb:	89 d7                	mov    edi,edx
c001fbbd:	e8 b8 f4 ff ff       	call   c001f07a <Vm::fpuGetReg(int)>
c001fbc2:	57                   	push   edi
c001fbc3:	56                   	push   esi
c001fbc4:	52                   	push   edx
c001fbc5:	50                   	push   eax
c001fbc6:	e8 5e f4 ff ff       	call   c001f029 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbcb:	83 c4 1c             	add    esp,0x1c
c001fbce:	52                   	push   edx
c001fbcf:	50                   	push   eax
c001fbd0:	6a 00                	push   0x0
c001fbd2:	e8 e6 f4 ff ff       	call   c001f0bd <Vm::fpuSetReg(int, unsigned long long)>
c001fbd7:	e9 f2 f7 ff ff       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x217>
c001fbdc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbe0:	80 fa 05             	cmp    dl,0x5
c001fbe3:	75 11                	jne    c001fbf6 <Vm::x87Handler(regs*)+0xa3f>
c001fbe5:	55                   	push   ebp
c001fbe6:	55                   	push   ebp
c001fbe7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbea:	ff 36                	push   DWORD PTR [esi]
c001fbec:	e8 81 f2 ff ff       	call   c001ee72 <Vm::fpuULongToFloat(unsigned long long)>
c001fbf1:	e9 cf f7 ff ff       	jmp    c001f3c5 <Vm::x87Handler(regs*)+0x20e>
c001fbf6:	31 c0                	xor    eax,eax
c001fbf8:	80 fa 07             	cmp    dl,0x7
c001fbfb:	75 1b                	jne    c001fc18 <Vm::x87Handler(regs*)+0xa61>
c001fbfd:	e8 63 f5 ff ff       	call   c001f165 <Vm::fpuPop()>
c001fc02:	51                   	push   ecx
c001fc03:	51                   	push   ecx
c001fc04:	52                   	push   edx
c001fc05:	50                   	push   eax
c001fc06:	e8 0c f2 ff ff       	call   c001ee17 <Vm::fpuFloatToLong(unsigned long long)>
c001fc0b:	83 c4 10             	add    esp,0x10
c001fc0e:	89 06                	mov    DWORD PTR [esi],eax
c001fc10:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fc13:	e9 f8 f7 ff ff       	jmp    c001f410 <Vm::x87Handler(regs*)+0x259>
c001fc18:	83 c4 1c             	add    esp,0x1c
c001fc1b:	5b                   	pop    ebx
c001fc1c:	5e                   	pop    esi
c001fc1d:	5f                   	pop    edi
c001fc1e:	5d                   	pop    ebp
c001fc1f:	c3                   	ret    

c001fc20 <__static_initialization_and_destruction_0(int, int)>:
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fc28:	75 1a                	jne    c001fc44 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc2a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fc32:	75 10                	jne    c001fc44 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	68 60 0b 03 c0       	push   0xc0030b60
c001fc3c:	e8 09 8d 00 00       	call   c002894a <Vm::_FPUState::_FPUState()>
c001fc41:	83 c4 10             	add    esp,0x10
c001fc44:	90                   	nop
c001fc45:	83 c4 0c             	add    esp,0xc
c001fc48:	c3                   	ret    

c001fc49 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fc49:	83 ec 0c             	sub    esp,0xc
c001fc4c:	83 ec 08             	sub    esp,0x8
c001fc4f:	68 ff ff 00 00       	push   0xffff
c001fc54:	6a 01                	push   0x1
c001fc56:	e8 c5 ff ff ff       	call   c001fc20 <__static_initialization_and_destruction_0(int, int)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	83 c4 0c             	add    esp,0xc
c001fc61:	c3                   	ret    

c001fc62 <FAT::getName()>:
c001fc62:	b8 48 ba 02 c0       	mov    eax,0xc002ba48
c001fc67:	c3                   	ret    

c001fc68 <FAT::tell(void*, unsigned long long*)>:
c001fc68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc6d:	75 06                	jne    c001fc75 <FAT::tell(void*, unsigned long long*)+0xd>
c001fc6f:	b8 04 00 00 00       	mov    eax,0x4
c001fc74:	c3                   	ret    
c001fc75:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fc7a:	75 06                	jne    c001fc82 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fc7c:	b8 04 00 00 00       	mov    eax,0x4
c001fc81:	c3                   	ret    
c001fc82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc86:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fc89:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fc8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc90:	89 01                	mov    DWORD PTR [ecx],eax
c001fc92:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fc95:	b8 00 00 00 00       	mov    eax,0x0
c001fc9a:	c3                   	ret    
c001fc9b:	90                   	nop

c001fc9c <FAT::stat(void*, unsigned long long*)>:
c001fc9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fca1:	75 06                	jne    c001fca9 <FAT::stat(void*, unsigned long long*)+0xd>
c001fca3:	b8 04 00 00 00       	mov    eax,0x4
c001fca8:	c3                   	ret    
c001fca9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fcae:	75 06                	jne    c001fcb6 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fcb0:	b8 04 00 00 00       	mov    eax,0x4
c001fcb5:	c3                   	ret    
c001fcb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fcbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fcc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fcc4:	89 01                	mov    DWORD PTR [ecx],eax
c001fcc6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fcc9:	b8 00 00 00 00       	mov    eax,0x0
c001fcce:	c3                   	ret    
c001fccf:	90                   	nop

c001fcd0 <FAT::~FAT()>:
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c001fcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdc:	89 10                	mov    DWORD PTR [eax],edx
c001fcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	50                   	push   eax
c001fce6:	e8 4f 2b ff ff       	call   c001283a <Filesystem::~Filesystem()>
c001fceb:	83 c4 10             	add    esp,0x10
c001fcee:	90                   	nop
c001fcef:	83 c4 0c             	add    esp,0xc
c001fcf2:	c3                   	ret    
c001fcf3:	90                   	nop

c001fcf4 <FAT::~FAT()>:
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	83 ec 0c             	sub    esp,0xc
c001fcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcfe:	e8 cd ff ff ff       	call   c001fcd0 <FAT::~FAT()>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	83 ec 08             	sub    esp,0x8
c001fd09:	6a 08                	push   0x8
c001fd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0f:	e8 1f 27 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	83 c4 0c             	add    esp,0xc
c001fd1a:	c3                   	ret    
c001fd1b:	90                   	nop

c001fd1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fd1c:	83 ec 1c             	sub    esp,0x1c
c001fd1f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fd26:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fd2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd2f:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fd36:	83 f8 ff             	cmp    eax,0xffffffff
c001fd39:	75 34                	jne    c001fd6f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd3f:	88 c2                	mov    dl,al
c001fd41:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fd46:	01 d0                	add    eax,edx
c001fd48:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd4c:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001fd52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd56:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001fd5d:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fd62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd66:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001fd6d:	eb 17                	jmp    c001fd86 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd6f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd73:	88 c2                	mov    dl,al
c001fd75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd79:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fd80:	01 d0                	add    eax,edx
c001fd82:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd86:	83 ec 04             	sub    esp,0x4
c001fd89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fd91:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fd95:	50                   	push   eax
c001fd96:	e8 63 6f fe ff       	call   c0006cfe <f_getlabel>
c001fd9b:	83 c4 10             	add    esp,0x10
c001fd9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fda2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fda7:	75 07                	jne    c001fdb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fda9:	b8 00 00 00 00       	mov    eax,0x0
c001fdae:	eb 05                	jmp    c001fdb5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fdb0:	b8 01 00 00 00       	mov    eax,0x1
c001fdb5:	83 c4 1c             	add    esp,0x1c
c001fdb8:	c3                   	ret    
c001fdb9:	90                   	nop

c001fdba <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fdba:	57                   	push   edi
c001fdbb:	83 ec 58             	sub    esp,0x58
c001fdbe:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fdc6:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fdca:	b9 0f 00 00 00       	mov    ecx,0xf
c001fdcf:	b8 00 00 00 00       	mov    eax,0x0
c001fdd4:	fc                   	cld    
c001fdd5:	89 d7                	mov    edi,edx
c001fdd7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fdd9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fddd:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fde4:	83 f8 ff             	cmp    eax,0xffffffff
c001fde7:	75 34                	jne    c001fe1d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fde9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fded:	88 c2                	mov    dl,al
c001fdef:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fdf4:	01 d0                	add    eax,edx
c001fdf6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fdfa:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001fe00:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe04:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001fe0b:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001fe10:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fe14:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001fe1b:	eb 17                	jmp    c001fe34 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fe1d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe21:	88 c2                	mov    dl,al
c001fe23:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe27:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001fe2e:	01 d0                	add    eax,edx
c001fe30:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe34:	83 ec 08             	sub    esp,0x8
c001fe37:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe3f:	50                   	push   eax
c001fe40:	e8 07 0b fe ff       	call   c000094c <strcat>
c001fe45:	83 c4 10             	add    esp,0x10
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe4f:	50                   	push   eax
c001fe50:	e8 97 70 fe ff       	call   c0006eec <f_setlabel>
c001fe55:	83 c4 10             	add    esp,0x10
c001fe58:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fe5c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fe61:	75 07                	jne    c001fe6a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe63:	b8 00 00 00 00       	mov    eax,0x0
c001fe68:	eb 05                	jmp    c001fe6f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe6a:	b8 01 00 00 00       	mov    eax,0x1
c001fe6f:	83 c4 58             	add    esp,0x58
c001fe72:	5f                   	pop    edi
c001fe73:	c3                   	ret    

c001fe74 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe74:	83 ec 2c             	sub    esp,0x2c
c001fe77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fe7f:	83 ec 08             	sub    esp,0x8
c001fe82:	68 6c ba 02 c0       	push   0xc002ba6c
c001fe87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fe8b:	e8 08 0a fe ff       	call   c0000898 <strcmp>
c001fe90:	83 c4 10             	add    esp,0x10
c001fe93:	85 c0                	test   eax,eax
c001fe95:	0f 94 c0             	sete   al
c001fe98:	84 c0                	test   al,al
c001fe9a:	74 0d                	je     c001fea9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fe9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fea4:	e9 a6 00 00 00       	jmp    c001ff4f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fea9:	83 ec 08             	sub    esp,0x8
c001feac:	68 5e ba 02 c0       	push   0xc002ba5e
c001feb1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001feb5:	e8 de 09 fe ff       	call   c0000898 <strcmp>
c001feba:	83 c4 10             	add    esp,0x10
c001febd:	85 c0                	test   eax,eax
c001febf:	0f 94 c0             	sete   al
c001fec2:	84 c0                	test   al,al
c001fec4:	74 0a                	je     c001fed0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fec6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fece:	eb 7f                	jmp    c001ff4f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fed0:	83 ec 08             	sub    esp,0x8
c001fed3:	68 64 ba 02 c0       	push   0xc002ba64
c001fed8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fedc:	e8 b7 09 fe ff       	call   c0000898 <strcmp>
c001fee1:	83 c4 10             	add    esp,0x10
c001fee4:	85 c0                	test   eax,eax
c001fee6:	0f 94 c0             	sete   al
c001fee9:	84 c0                	test   al,al
c001feeb:	74 0a                	je     c001fef7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001feed:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fef5:	eb 58                	jmp    c001ff4f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fef7:	83 ec 08             	sub    esp,0x8
c001fefa:	68 ac 90 02 c0       	push   0xc00290ac
c001feff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff03:	e8 90 09 fe ff       	call   c0000898 <strcmp>
c001ff08:	83 c4 10             	add    esp,0x10
c001ff0b:	85 c0                	test   eax,eax
c001ff0d:	0f 94 c0             	sete   al
c001ff10:	84 c0                	test   al,al
c001ff12:	74 0a                	je     c001ff1e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ff14:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ff1c:	eb 31                	jmp    c001ff4f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 6a ba 02 c0       	push   0xc002ba6a
c001ff26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff2a:	e8 69 09 fe ff       	call   c0000898 <strcmp>
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	85 c0                	test   eax,eax
c001ff34:	0f 94 c0             	sete   al
c001ff37:	84 c0                	test   al,al
c001ff39:	74 0a                	je     c001ff45 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff3b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ff43:	eb 0a                	jmp    c001ff4f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff45:	b8 08 00 00 00       	mov    eax,0x8
c001ff4a:	e9 df 00 00 00       	jmp    c002002e <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001ff4f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ff56:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ff5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff5f:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001ff66:	83 f8 ff             	cmp    eax,0xffffffff
c001ff69:	75 34                	jne    c001ff9f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff6b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff6f:	88 c2                	mov    dl,al
c001ff71:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001ff76:	01 d0                	add    eax,edx
c001ff78:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ff7c:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c001ff82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff86:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c001ff8d:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c001ff92:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ff96:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c001ff9d:	eb 17                	jmp    c001ffb6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ff9f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ffa3:	88 c2                	mov    dl,al
c001ffa5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffa9:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001ffb0:	01 d0                	add    eax,edx
c001ffb2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ffb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ffba:	88 04 24             	mov    BYTE PTR [esp],al
c001ffbd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ffc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffc5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ffcd:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ffd2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	68 00 20 00 00       	push   0x2000
c001ffe2:	e8 b5 f5 fe ff       	call   c000f59c <malloc>
c001ffe7:	83 c4 10             	add    esp,0x10
c001ffea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffee:	68 00 20 00 00       	push   0x2000
c001fff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fffb:	50                   	push   eax
c001fffc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020000:	50                   	push   eax
c0020001:	e8 31 73 fe ff       	call   c0007337 <f_mkfs>
c0020006:	83 c4 10             	add    esp,0x10
c0020009:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002000d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020012:	75 07                	jne    c002001b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020014:	b8 00 00 00 00       	mov    eax,0x0
c0020019:	eb 13                	jmp    c002002e <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002001b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020020:	75 07                	jne    c0020029 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020022:	b8 09 00 00 00       	mov    eax,0x9
c0020027:	eb 05                	jmp    c002002e <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020029:	b8 01 00 00 00       	mov    eax,0x1
c002002e:	83 c4 2c             	add    esp,0x2c
c0020031:	c3                   	ret    

c0020032 <FAT::tryMount(LogicalDisk*, int)>:
c0020032:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020038:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c002003d:	83 f8 14             	cmp    eax,0x14
c0020040:	75 17                	jne    c0020059 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	68 70 ba 02 c0       	push   0xc002ba70
c002004a:	e8 1c 9c ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002004f:	83 c4 10             	add    esp,0x10
c0020052:	b0 00                	mov    al,0x0
c0020054:	e9 d7 01 00 00       	jmp    c0020230 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020059:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020060:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020066:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002006c:	3d 00 02 00 00       	cmp    eax,0x200
c0020071:	74 07                	je     c002007a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020073:	b0 00                	mov    al,0x0
c0020075:	e9 b6 01 00 00       	jmp    c0020230 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002007a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020082:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020089:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c0020090:	83 f8 ff             	cmp    eax,0xffffffff
c0020093:	74 07                	je     c002009c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020095:	b0 01                	mov    al,0x1
c0020097:	e9 94 01 00 00       	jmp    c0020230 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002009c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00200a6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00200ae:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00200b5:	88 c2                	mov    dl,al
c00200b7:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c00200bc:	01 d0                	add    eax,edx
c00200be:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00200c5:	8b 15 c0 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030bc0
c00200cb:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200d2:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c00200d9:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c00200de:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00200e5:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c00200ec:	83 ec 0c             	sub    esp,0xc
c00200ef:	68 54 02 00 00       	push   0x254
c00200f4:	e8 a3 f4 fe ff       	call   c000f59c <malloc>
c00200f9:	83 c4 10             	add    esp,0x10
c00200fc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020103:	83 ec 04             	sub    esp,0x4
c0020106:	6a 00                	push   0x0
c0020108:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002010f:	50                   	push   eax
c0020110:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020117:	e8 d9 4d fe ff       	call   c0004ef5 <f_mount>
c002011c:	83 c4 10             	add    esp,0x10
c002011f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020126:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002012e:	74 19                	je     c0020149 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020130:	83 ec 0c             	sub    esp,0xc
c0020133:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002013a:	e8 7d f4 fe ff       	call   c000f5bc <rfree>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	b0 00                	mov    al,0x0
c0020144:	e9 e7 00 00 00       	jmp    c0020230 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020149:	83 ec 04             	sub    esp,0x4
c002014c:	68 00 01 00 00       	push   0x100
c0020151:	6a 00                	push   0x0
c0020153:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002015a:	50                   	push   eax
c002015b:	e8 f0 05 fe ff       	call   c0000750 <memset>
c0020160:	83 c4 10             	add    esp,0x10
c0020163:	83 ec 08             	sub    esp,0x8
c0020166:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002016d:	50                   	push   eax
c002016e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020175:	50                   	push   eax
c0020176:	e8 d1 07 fe ff       	call   c000094c <strcat>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	83 ec 08             	sub    esp,0x8
c0020181:	68 7e ba 02 c0       	push   0xc002ba7e
c0020186:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002018d:	50                   	push   eax
c002018e:	e8 b9 07 fe ff       	call   c000094c <strcat>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	83 ec 04             	sub    esp,0x4
c0020199:	6a 01                	push   0x1
c002019b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00201a2:	50                   	push   eax
c00201a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201a7:	50                   	push   eax
c00201a8:	e8 aa 4d fe ff       	call   c0004f57 <f_open>
c00201ad:	83 c4 10             	add    esp,0x10
c00201b0:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201b7:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00201be:	85 c0                	test   eax,eax
c00201c0:	74 0a                	je     c00201cc <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00201c2:	78 2d                	js     c00201f1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201c4:	83 e8 04             	sub    eax,0x4
c00201c7:	83 f8 01             	cmp    eax,0x1
c00201ca:	77 25                	ja     c00201f1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201cc:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00201d4:	83 ec 0c             	sub    esp,0xc
c00201d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201db:	50                   	push   eax
c00201dc:	e8 c8 58 fe ff       	call   c0005aa9 <f_close>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	90                   	nop
c00201e5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00201ed:	74 3a                	je     c0020229 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00201ef:	eb 2d                	jmp    c002021e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00201f1:	83 ec 0c             	sub    esp,0xc
c00201f4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201fb:	e8 bc f3 fe ff       	call   c000f5bc <rfree>
c0020200:	83 c4 10             	add    esp,0x10
c0020203:	83 ec 04             	sub    esp,0x4
c0020206:	6a 00                	push   0x0
c0020208:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002020f:	50                   	push   eax
c0020210:	6a 00                	push   0x0
c0020212:	e8 de 4c fe ff       	call   c0004ef5 <f_mount>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	b0 00                	mov    al,0x0
c002021c:	eb 12                	jmp    c0020230 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002021e:	a1 c0 0b 03 c0       	mov    eax,ds:0xc0030bc0
c0020223:	40                   	inc    eax
c0020224:	a3 c0 0b 03 c0       	mov    ds:0xc0030bc0,eax
c0020229:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020230:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020236:	c3                   	ret    
c0020237:	90                   	nop

c0020238 <FAT::getFileFirstSector(char const*)>:
c0020238:	53                   	push   ebx
c0020239:	83 ec 28             	sub    esp,0x28
c002023c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002024b:	e8 4c f3 fe ff       	call   c000f59c <malloc>
c0020250:	83 c4 10             	add    esp,0x10
c0020253:	89 c3                	mov    ebx,eax
c0020255:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c002025a:	83 ec 04             	sub    esp,0x4
c002025d:	50                   	push   eax
c002025e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020262:	53                   	push   ebx
c0020263:	e8 02 28 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c0020268:	83 c4 10             	add    esp,0x10
c002026b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002026f:	83 ec 08             	sub    esp,0x8
c0020272:	6a 01                	push   0x1
c0020274:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020278:	e8 51 28 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020284:	8b 00                	mov    eax,DWORD PTR [eax]
c0020286:	83 c0 0c             	add    eax,0xc
c0020289:	8b 00                	mov    eax,DWORD PTR [eax]
c002028b:	83 ec 0c             	sub    esp,0xc
c002028e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020292:	52                   	push   edx
c0020293:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020297:	52                   	push   edx
c0020298:	6a 00                	push   0x0
c002029a:	6a 04                	push   0x4
c002029c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00202a0:	ff d0                	call   eax
c00202a2:	83 c4 20             	add    esp,0x20
c00202a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202a9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00202af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202b7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00202ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00202bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202c1:	83 ec 0c             	sub    esp,0xc
c00202c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202c8:	e8 5f 28 ff ff       	call   c0012b2c <File::close()>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202d4:	ba 00 00 00 00       	mov    edx,0x0
c00202d9:	83 c4 28             	add    esp,0x28
c00202dc:	5b                   	pop    ebx
c00202dd:	c3                   	ret    

c00202de <FAT::readDir(void*, unsigned long, void*, int*)>:
c00202de:	57                   	push   edi
c00202df:	56                   	push   esi
c00202e0:	53                   	push   ebx
c00202e1:	81 ec 50 02 00 00    	sub    esp,0x250
c00202e7:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00202ef:	74 0a                	je     c00202fb <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00202f1:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00202f9:	75 0a                	jne    c0020305 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00202fb:	b8 04 00 00 00       	mov    eax,0x4
c0020300:	e9 29 01 00 00       	jmp    c002042e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020305:	83 ec 08             	sub    esp,0x8
c0020308:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002030f:	50                   	push   eax
c0020310:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020317:	e8 97 5d fe ff       	call   c00060b3 <f_readdir>
c002031c:	83 c4 10             	add    esp,0x10
c002031f:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020326:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002032d:	83 ec 0c             	sub    esp,0xc
c0020330:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020337:	83 c0 1a             	add    eax,0x1a
c002033a:	50                   	push   eax
c002033b:	e8 2c 04 fe ff       	call   c000076c <strlen>
c0020340:	83 c4 10             	add    esp,0x10
c0020343:	ba 00 00 00 00       	mov    edx,0x0
c0020348:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002034c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020350:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020357:	0f b6 c0             	movzx  eax,al
c002035a:	83 e0 10             	and    eax,0x10
c002035d:	74 07                	je     c0020366 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002035f:	b8 02 00 00 00       	mov    eax,0x2
c0020364:	eb 05                	jmp    c002036b <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020366:	b8 01 00 00 00       	mov    eax,0x1
c002036b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002036f:	83 ec 08             	sub    esp,0x8
c0020372:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020379:	83 c0 1a             	add    eax,0x1a
c002037c:	50                   	push   eax
c002037d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020381:	83 c0 10             	add    eax,0x10
c0020384:	50                   	push   eax
c0020385:	e8 82 04 fe ff       	call   c000080c <strcpy>
c002038a:	83 c4 10             	add    esp,0x10
c002038d:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020394:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002039b:	8d 44 24 04          	lea    eax,[esp+0x4]
c002039f:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00203a6:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00203ad:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00203b4:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00203bb:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00203c2:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00203c9:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00203d0:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00203d7:	89 c6                	mov    esi,eax
c00203d9:	89 d7                	mov    edi,edx
c00203db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203dd:	89 c8                	mov    eax,ecx
c00203df:	89 fa                	mov    edx,edi
c00203e1:	89 f3                	mov    ebx,esi
c00203e3:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00203ea:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00203f1:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00203f8:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00203ff:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020405:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002040c:	84 c0                	test   al,al
c002040e:	75 07                	jne    c0020417 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020410:	b8 07 00 00 00       	mov    eax,0x7
c0020415:	eb 17                	jmp    c002042e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020417:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002041e:	85 c0                	test   eax,eax
c0020420:	75 07                	jne    c0020429 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020422:	b8 00 00 00 00       	mov    eax,0x0
c0020427:	eb 05                	jmp    c002042e <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020429:	b8 01 00 00 00       	mov    eax,0x1
c002042e:	81 c4 50 02 00 00    	add    esp,0x250
c0020434:	5b                   	pop    ebx
c0020435:	5e                   	pop    esi
c0020436:	5f                   	pop    edi
c0020437:	c3                   	ret    

c0020438 <FAT::read(void*, unsigned long, void*, int*)>:
c0020438:	83 ec 1c             	sub    esp,0x1c
c002043b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020440:	74 07                	je     c0020449 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020442:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020447:	75 07                	jne    c0020450 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020449:	b8 04 00 00 00       	mov    eax,0x4
c002044e:	eb 3d                	jmp    c002048d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020450:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020454:	50                   	push   eax
c0020455:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020459:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002045d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020461:	e8 2d 4f fe ff       	call   c0005393 <f_read>
c0020466:	83 c4 10             	add    esp,0x10
c0020469:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002046d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020471:	89 c2                	mov    edx,eax
c0020473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020477:	89 10                	mov    DWORD PTR [eax],edx
c0020479:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002047d:	85 c0                	test   eax,eax
c002047f:	75 07                	jne    c0020488 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020481:	b8 00 00 00 00       	mov    eax,0x0
c0020486:	eb 05                	jmp    c002048d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020488:	b8 01 00 00 00       	mov    eax,0x1
c002048d:	83 c4 1c             	add    esp,0x1c
c0020490:	c3                   	ret    
c0020491:	90                   	nop

c0020492 <FAT::write(void*, unsigned long, void*, int*)>:
c0020492:	83 ec 1c             	sub    esp,0x1c
c0020495:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002049a:	74 07                	je     c00204a3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002049c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00204a1:	75 07                	jne    c00204aa <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00204a3:	b8 04 00 00 00       	mov    eax,0x4
c00204a8:	eb 3d                	jmp    c00204e7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00204aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204ae:	50                   	push   eax
c00204af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204bb:	e8 53 51 fe ff       	call   c0005613 <f_write>
c00204c0:	83 c4 10             	add    esp,0x10
c00204c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204cb:	89 c2                	mov    edx,eax
c00204cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204d1:	89 10                	mov    DWORD PTR [eax],edx
c00204d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204d7:	85 c0                	test   eax,eax
c00204d9:	75 07                	jne    c00204e2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00204db:	b8 00 00 00 00       	mov    eax,0x0
c00204e0:	eb 05                	jmp    c00204e7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00204e2:	b8 01 00 00 00       	mov    eax,0x1
c00204e7:	83 c4 1c             	add    esp,0x1c
c00204ea:	c3                   	ret    
c00204eb:	90                   	nop

c00204ec <FAT::close(void*)>:
c00204ec:	83 ec 1c             	sub    esp,0x1c
c00204ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204f4:	75 07                	jne    c00204fd <FAT::close(void*)+0x11>
c00204f6:	b8 04 00 00 00       	mov    eax,0x4
c00204fb:	eb 36                	jmp    c0020533 <FAT::close(void*)+0x47>
c00204fd:	83 ec 0c             	sub    esp,0xc
c0020500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020504:	e8 a0 55 fe ff       	call   c0005aa9 <f_close>
c0020509:	83 c4 10             	add    esp,0x10
c002050c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020510:	83 ec 0c             	sub    esp,0xc
c0020513:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020517:	e8 90 f0 fe ff       	call   c000f5ac <free>
c002051c:	83 c4 10             	add    esp,0x10
c002051f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020523:	85 c0                	test   eax,eax
c0020525:	75 07                	jne    c002052e <FAT::close(void*)+0x42>
c0020527:	b8 00 00 00 00       	mov    eax,0x0
c002052c:	eb 05                	jmp    c0020533 <FAT::close(void*)+0x47>
c002052e:	b8 01 00 00 00       	mov    eax,0x1
c0020533:	83 c4 1c             	add    esp,0x1c
c0020536:	c3                   	ret    
c0020537:	90                   	nop

c0020538 <FAT::closeDir(void*)>:
c0020538:	83 ec 1c             	sub    esp,0x1c
c002053b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020540:	75 07                	jne    c0020549 <FAT::closeDir(void*)+0x11>
c0020542:	b8 04 00 00 00       	mov    eax,0x4
c0020547:	eb 36                	jmp    c002057f <FAT::closeDir(void*)+0x47>
c0020549:	83 ec 0c             	sub    esp,0xc
c002054c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020550:	e8 3c 5b fe ff       	call   c0006091 <f_closedir>
c0020555:	83 c4 10             	add    esp,0x10
c0020558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002055c:	83 ec 0c             	sub    esp,0xc
c002055f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020563:	e8 44 f0 fe ff       	call   c000f5ac <free>
c0020568:	83 c4 10             	add    esp,0x10
c002056b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002056f:	85 c0                	test   eax,eax
c0020571:	75 07                	jne    c002057a <FAT::closeDir(void*)+0x42>
c0020573:	b8 00 00 00 00       	mov    eax,0x0
c0020578:	eb 05                	jmp    c002057f <FAT::closeDir(void*)+0x47>
c002057a:	b8 01 00 00 00       	mov    eax,0x1
c002057f:	83 c4 1c             	add    esp,0x1c
c0020582:	c3                   	ret    
c0020583:	90                   	nop

c0020584 <FAT::seek(void*, unsigned long long)>:
c0020584:	83 ec 2c             	sub    esp,0x2c
c0020587:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002058b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002058f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020597:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002059c:	75 07                	jne    c00205a5 <FAT::seek(void*, unsigned long long)+0x21>
c002059e:	b8 04 00 00 00       	mov    eax,0x4
c00205a3:	eb 2f                	jmp    c00205d4 <FAT::seek(void*, unsigned long long)+0x50>
c00205a5:	83 ec 04             	sub    esp,0x4
c00205a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00205ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00205b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00205b4:	e8 1f 55 fe ff       	call   c0005ad8 <f_lseek>
c00205b9:	83 c4 10             	add    esp,0x10
c00205bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205c4:	85 c0                	test   eax,eax
c00205c6:	75 07                	jne    c00205cf <FAT::seek(void*, unsigned long long)+0x4b>
c00205c8:	b8 00 00 00 00       	mov    eax,0x0
c00205cd:	eb 05                	jmp    c00205d4 <FAT::seek(void*, unsigned long long)+0x50>
c00205cf:	b8 01 00 00 00       	mov    eax,0x1
c00205d4:	83 c4 2c             	add    esp,0x2c
c00205d7:	c3                   	ret    

c00205d8 <fatWrapperReadDisk>:
c00205d8:	83 ec 1c             	sub    esp,0x1c
c00205db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00205ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00205ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00205f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00205f7:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00205fe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020609:	52                   	push   edx
c002060a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002060e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020612:	50                   	push   eax
c0020613:	e8 3c 58 ff ff       	call   c0015e54 <LogicalDisk::read(unsigned long long, int, void*)>
c0020618:	83 c4 20             	add    esp,0x20
c002061b:	83 c4 1c             	add    esp,0x1c
c002061e:	c3                   	ret    

c002061f <fatWrapperWriteDisk>:
c002061f:	83 ec 1c             	sub    esp,0x1c
c0020622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020626:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002062a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002062e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020631:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020639:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002063e:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c0020645:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020649:	83 ec 0c             	sub    esp,0xc
c002064c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020650:	52                   	push   edx
c0020651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020655:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020659:	50                   	push   eax
c002065a:	e8 61 58 ff ff       	call   c0015ec0 <LogicalDisk::write(unsigned long long, int, void*)>
c002065f:	83 c4 20             	add    esp,0x20
c0020662:	83 c4 1c             	add    esp,0x1c
c0020665:	c3                   	ret    

c0020666 <fatWrapperIoctl>:
c0020666:	53                   	push   ebx
c0020667:	83 ec 28             	sub    esp,0x28
c002066a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002066e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020672:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020676:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002067a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002067f:	75 31                	jne    c00206b2 <fatWrapperIoctl+0x4c>
c0020681:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020685:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020689:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002068e:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c0020695:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002069b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00206a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00206a5:	66 89 02             	mov    WORD PTR [edx],ax
c00206a8:	b8 00 00 00 00       	mov    eax,0x0
c00206ad:	e9 b2 00 00 00       	jmp    c0020764 <fatWrapperIoctl+0xfe>
c00206b2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00206b7:	75 6a                	jne    c0020723 <fatWrapperIoctl+0xbd>
c00206b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206c6:	8b 04 85 a0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2460]
c00206cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206d3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00206d9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00206df:	89 c8                	mov    eax,ecx
c00206e1:	89 da                	mov    edx,ebx
c00206e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00206e7:	c1 e0 0a             	shl    eax,0xa
c00206ea:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00206ef:	8b 0c 8d a0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2460]
c00206f6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00206fc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020702:	89 cb                	mov    ebx,ecx
c0020704:	c1 fb 1f             	sar    ebx,0x1f
c0020707:	53                   	push   ebx
c0020708:	51                   	push   ecx
c0020709:	52                   	push   edx
c002070a:	50                   	push   eax
c002070b:	e8 34 5e 00 00       	call   c0026544 <__udivdi3>
c0020710:	83 c4 10             	add    esp,0x10
c0020713:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020717:	89 01                	mov    DWORD PTR [ecx],eax
c0020719:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002071c:	b8 00 00 00 00       	mov    eax,0x0
c0020721:	eb 41                	jmp    c0020764 <fatWrapperIoctl+0xfe>
c0020723:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020728:	75 07                	jne    c0020731 <fatWrapperIoctl+0xcb>
c002072a:	b8 00 00 00 00       	mov    eax,0x0
c002072f:	eb 33                	jmp    c0020764 <fatWrapperIoctl+0xfe>
c0020731:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020736:	75 19                	jne    c0020751 <fatWrapperIoctl+0xeb>
c0020738:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002073c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020744:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002074a:	b8 00 00 00 00       	mov    eax,0x0
c002074f:	eb 13                	jmp    c0020764 <fatWrapperIoctl+0xfe>
c0020751:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020756:	75 07                	jne    c002075f <fatWrapperIoctl+0xf9>
c0020758:	b8 00 00 00 00       	mov    eax,0x0
c002075d:	eb 05                	jmp    c0020764 <fatWrapperIoctl+0xfe>
c002075f:	b8 04 00 00 00       	mov    eax,0x4
c0020764:	83 c4 28             	add    esp,0x28
c0020767:	5b                   	pop    ebx
c0020768:	c3                   	ret    
c0020769:	90                   	nop

c002076a <FAT::FAT()>:
c002076a:	83 ec 1c             	sub    esp,0x1c
c002076d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020771:	83 ec 0c             	sub    esp,0xc
c0020774:	50                   	push   eax
c0020775:	e8 9c 20 ff ff       	call   c0012816 <Filesystem::Filesystem()>
c002077a:	83 c4 10             	add    esp,0x10
c002077d:	ba 94 ba 02 c0       	mov    edx,0xc002ba94
c0020782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020786:	89 10                	mov    DWORD PTR [eax],edx
c0020788:	c7 05 c0 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030bc0,0x0
c0020792:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002079a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002079f:	7f 15                	jg     c00207b6 <FAT::FAT()+0x4c>
c00207a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207a5:	c7 04 85 e0 0b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf420],0xffffffff
c00207b0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00207b4:	eb e4                	jmp    c002079a <FAT::FAT()+0x30>
c00207b6:	90                   	nop
c00207b7:	83 c4 1c             	add    esp,0x1c
c00207ba:	c3                   	ret    
c00207bb:	90                   	nop

c00207bc <FAT::fixFilepath(char*)>:
c00207bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207c0:	8a 00                	mov    al,BYTE PTR [eax]
c00207c2:	3c 40                	cmp    al,0x40
c00207c4:	7e 2c                	jle    c00207f2 <FAT::fixFilepath(char*)+0x36>
c00207c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207ca:	8a 00                	mov    al,BYTE PTR [eax]
c00207cc:	83 e8 41             	sub    eax,0x41
c00207cf:	88 c2                	mov    dl,al
c00207d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207d5:	88 10                	mov    BYTE PTR [eax],dl
c00207d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207db:	8a 00                	mov    al,BYTE PTR [eax]
c00207dd:	0f be c0             	movsx  eax,al
c00207e0:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c00207e7:	83 c0 30             	add    eax,0x30
c00207ea:	88 c2                	mov    dl,al
c00207ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207f0:	88 10                	mov    BYTE PTR [eax],dl
c00207f2:	90                   	nop
c00207f3:	c3                   	ret    

c00207f4 <FAT::open(char const*, void**, FileOpenMode)>:
c00207f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00207fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020802:	74 0a                	je     c002080e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020804:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002080c:	75 0a                	jne    c0020818 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002080e:	b8 04 00 00 00       	mov    eax,0x4
c0020813:	e9 fd 00 00 00       	jmp    c0020915 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020818:	83 ec 08             	sub    esp,0x8
c002081b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020822:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020826:	50                   	push   eax
c0020827:	e8 e0 ff fd ff       	call   c000080c <strcpy>
c002082c:	83 c4 10             	add    esp,0x10
c002082f:	83 ec 08             	sub    esp,0x8
c0020832:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020836:	50                   	push   eax
c0020837:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002083e:	e8 79 ff ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020843:	83 c4 10             	add    esp,0x10
c0020846:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002084e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020855:	83 e0 01             	and    eax,0x1
c0020858:	74 08                	je     c0020862 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002085a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020862:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020869:	83 e0 04             	and    eax,0x4
c002086c:	74 10                	je     c002087e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002086e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020876:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002087e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020885:	83 e0 02             	and    eax,0x2
c0020888:	74 08                	je     c0020892 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002088a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020892:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020899:	83 e0 08             	and    eax,0x8
c002089c:	74 08                	je     c00208a6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002089e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00208a6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208ad:	83 e0 10             	and    eax,0x10
c00208b0:	74 08                	je     c00208ba <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00208b2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00208ba:	83 ec 0c             	sub    esp,0xc
c00208bd:	68 50 02 00 00       	push   0x250
c00208c2:	e8 d5 ec fe ff       	call   c000f59c <malloc>
c00208c7:	83 c4 10             	add    esp,0x10
c00208ca:	89 c2                	mov    edx,eax
c00208cc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208d3:	89 10                	mov    DWORD PTR [eax],edx
c00208d5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00208dd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208e6:	83 ec 04             	sub    esp,0x4
c00208e9:	52                   	push   edx
c00208ea:	8d 54 24 10          	lea    edx,[esp+0x10]
c00208ee:	52                   	push   edx
c00208ef:	50                   	push   eax
c00208f0:	e8 62 46 fe ff       	call   c0004f57 <f_open>
c00208f5:	83 c4 10             	add    esp,0x10
c00208f8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00208ff:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020907:	74 07                	je     c0020910 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020909:	b8 01 00 00 00       	mov    eax,0x1
c002090e:	eb 05                	jmp    c0020915 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020910:	b8 00 00 00 00       	mov    eax,0x0
c0020915:	81 c4 1c 01 00 00    	add    esp,0x11c
c002091b:	c3                   	ret    

c002091c <FAT::openDir(char const*, void**)>:
c002091c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020922:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002092a:	74 0a                	je     c0020936 <FAT::openDir(char const*, void**)+0x1a>
c002092c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020934:	75 07                	jne    c002093d <FAT::openDir(char const*, void**)+0x21>
c0020936:	b8 04 00 00 00       	mov    eax,0x4
c002093b:	eb 7d                	jmp    c00209ba <FAT::openDir(char const*, void**)+0x9e>
c002093d:	83 ec 08             	sub    esp,0x8
c0020940:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020947:	8d 44 24 18          	lea    eax,[esp+0x18]
c002094b:	50                   	push   eax
c002094c:	e8 bb fe fd ff       	call   c000080c <strcpy>
c0020951:	83 c4 10             	add    esp,0x10
c0020954:	83 ec 08             	sub    esp,0x8
c0020957:	8d 44 24 14          	lea    eax,[esp+0x14]
c002095b:	50                   	push   eax
c002095c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020963:	e8 54 fe ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020968:	83 c4 10             	add    esp,0x10
c002096b:	83 ec 0c             	sub    esp,0xc
c002096e:	6a 4c                	push   0x4c
c0020970:	e8 27 ec fe ff       	call   c000f59c <malloc>
c0020975:	83 c4 10             	add    esp,0x10
c0020978:	89 c2                	mov    edx,eax
c002097a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020981:	89 10                	mov    DWORD PTR [eax],edx
c0020983:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002098a:	8b 00                	mov    eax,DWORD PTR [eax]
c002098c:	83 ec 08             	sub    esp,0x8
c002098f:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020993:	52                   	push   edx
c0020994:	50                   	push   eax
c0020995:	e8 f5 55 fe ff       	call   c0005f8f <f_opendir>
c002099a:	83 c4 10             	add    esp,0x10
c002099d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209a4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00209ac:	74 07                	je     c00209b5 <FAT::openDir(char const*, void**)+0x99>
c00209ae:	b8 01 00 00 00       	mov    eax,0x1
c00209b3:	eb 05                	jmp    c00209ba <FAT::openDir(char const*, void**)+0x9e>
c00209b5:	b8 00 00 00 00       	mov    eax,0x0
c00209ba:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209c0:	c3                   	ret    
c00209c1:	90                   	nop

c00209c2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00209c2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209c8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00209d0:	75 0a                	jne    c00209dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00209d2:	b8 04 00 00 00       	mov    eax,0x4
c00209d7:	e9 c9 00 00 00       	jmp    c0020aa5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00209e4:	75 0a                	jne    c00209f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00209e6:	b8 04 00 00 00       	mov    eax,0x4
c00209eb:	e9 b5 00 00 00       	jmp    c0020aa5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00209f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00209f8:	75 0a                	jne    c0020a04 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00209fa:	b8 04 00 00 00       	mov    eax,0x4
c00209ff:	e9 a1 00 00 00       	jmp    c0020aa5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a04:	83 ec 08             	sub    esp,0x8
c0020a07:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a0e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a15:	50                   	push   eax
c0020a16:	e8 f1 fd fd ff       	call   c000080c <strcpy>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	83 ec 08             	sub    esp,0x8
c0020a21:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a28:	50                   	push   eax
c0020a29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a30:	e8 87 fd ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020a35:	83 c4 10             	add    esp,0x10
c0020a38:	83 ec 08             	sub    esp,0x8
c0020a3b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a3f:	50                   	push   eax
c0020a40:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a47:	50                   	push   eax
c0020a48:	e8 01 57 fe ff       	call   c000614e <f_stat>
c0020a4d:	83 c4 10             	add    esp,0x10
c0020a50:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a57:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a5e:	85 c0                	test   eax,eax
c0020a60:	74 07                	je     c0020a69 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020a62:	83 f8 04             	cmp    eax,0x4
c0020a65:	74 32                	je     c0020a99 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020a67:	eb 37                	jmp    c0020aa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020a69:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020a6d:	0f b6 c0             	movzx  eax,al
c0020a70:	83 e0 10             	and    eax,0x10
c0020a73:	0f 95 c2             	setne  dl
c0020a76:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020a7d:	88 10                	mov    BYTE PTR [eax],dl
c0020a7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a86:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020a8d:	89 01                	mov    DWORD PTR [ecx],eax
c0020a8f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a92:	b8 00 00 00 00       	mov    eax,0x0
c0020a97:	eb 0c                	jmp    c0020aa5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a99:	b8 02 00 00 00       	mov    eax,0x2
c0020a9e:	eb 05                	jmp    c0020aa5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aa0:	b8 01 00 00 00       	mov    eax,0x1
c0020aa5:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020aab:	c3                   	ret    

c0020aac <FAT::unlink(char const*)>:
c0020aac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ab2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020aba:	75 07                	jne    c0020ac3 <FAT::unlink(char const*)+0x17>
c0020abc:	b8 04 00 00 00       	mov    eax,0x4
c0020ac1:	eb 5c                	jmp    c0020b1f <FAT::unlink(char const*)+0x73>
c0020ac3:	83 ec 08             	sub    esp,0x8
c0020ac6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020acd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ad1:	50                   	push   eax
c0020ad2:	e8 35 fd fd ff       	call   c000080c <strcpy>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	83 ec 08             	sub    esp,0x8
c0020add:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ae1:	50                   	push   eax
c0020ae2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ae9:	e8 ce fc ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020aee:	83 c4 10             	add    esp,0x10
c0020af1:	83 ec 0c             	sub    esp,0xc
c0020af4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020af8:	50                   	push   eax
c0020af9:	e8 a2 59 fe ff       	call   c00064a0 <f_unlink>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b08:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020b0f:	85 c0                	test   eax,eax
c0020b11:	75 07                	jne    c0020b1a <FAT::unlink(char const*)+0x6e>
c0020b13:	b8 00 00 00 00       	mov    eax,0x0
c0020b18:	eb 05                	jmp    c0020b1f <FAT::unlink(char const*)+0x73>
c0020b1a:	b8 01 00 00 00       	mov    eax,0x1
c0020b1f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b25:	c3                   	ret    

c0020b26 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b26:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b2c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b33:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b3a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020b42:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020b4a:	75 0a                	jne    c0020b56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020b4c:	b8 04 00 00 00       	mov    eax,0x4
c0020b51:	e9 1c 01 00 00       	jmp    c0020c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b56:	83 ec 08             	sub    esp,0x8
c0020b59:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b64:	50                   	push   eax
c0020b65:	e8 a2 fc fd ff       	call   c000080c <strcpy>
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	83 ec 08             	sub    esp,0x8
c0020b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020b74:	50                   	push   eax
c0020b75:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b7c:	e8 3b fc ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020b81:	83 c4 10             	add    esp,0x10
c0020b84:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020b8c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020b99:	83 e0 01             	and    eax,0x1
c0020b9c:	74 08                	je     c0020ba6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020b9e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020ba6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bab:	83 e0 02             	and    eax,0x2
c0020bae:	74 08                	je     c0020bb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020bb0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020bb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bbd:	83 e0 04             	and    eax,0x4
c0020bc0:	74 08                	je     c0020bca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020bc2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020bca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bcf:	83 e0 08             	and    eax,0x8
c0020bd2:	74 08                	je     c0020bdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020bd4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020bdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020be1:	83 e0 01             	and    eax,0x1
c0020be4:	74 08                	je     c0020bee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020be6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020bee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020bf3:	83 e0 02             	and    eax,0x2
c0020bf6:	74 08                	je     c0020c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020bf8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020c00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c05:	83 e0 04             	and    eax,0x4
c0020c08:	74 08                	je     c0020c12 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020c0a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020c12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c17:	83 e0 08             	and    eax,0x8
c0020c1a:	74 08                	je     c0020c24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020c1c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020c24:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c2b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c32:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c3a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020c42:	83 ec 04             	sub    esp,0x4
c0020c45:	52                   	push   edx
c0020c46:	50                   	push   eax
c0020c47:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c4b:	50                   	push   eax
c0020c4c:	e8 f1 5e fe ff       	call   c0006b42 <f_chmod>
c0020c51:	83 c4 10             	add    esp,0x10
c0020c54:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020c5b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020c62:	85 c0                	test   eax,eax
c0020c64:	75 07                	jne    c0020c6d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020c66:	b8 00 00 00 00       	mov    eax,0x0
c0020c6b:	eb 05                	jmp    c0020c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c6d:	b8 01 00 00 00       	mov    eax,0x1
c0020c72:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020c78:	c3                   	ret    
c0020c79:	90                   	nop

c0020c7a <FAT::rename(char const*, char const*)>:
c0020c7a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020c80:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020c88:	74 0a                	je     c0020c94 <FAT::rename(char const*, char const*)+0x1a>
c0020c8a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020c92:	75 0a                	jne    c0020c9e <FAT::rename(char const*, char const*)+0x24>
c0020c94:	b8 04 00 00 00       	mov    eax,0x4
c0020c99:	e9 98 00 00 00       	jmp    c0020d36 <FAT::rename(char const*, char const*)+0xbc>
c0020c9e:	83 ec 08             	sub    esp,0x8
c0020ca1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020ca8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020caf:	50                   	push   eax
c0020cb0:	e8 57 fb fd ff       	call   c000080c <strcpy>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	83 ec 08             	sub    esp,0x8
c0020cbb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020cc2:	50                   	push   eax
c0020cc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cca:	e8 ed fa ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020ccf:	83 c4 10             	add    esp,0x10
c0020cd2:	83 ec 08             	sub    esp,0x8
c0020cd5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020cdc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ce0:	50                   	push   eax
c0020ce1:	e8 26 fb fd ff       	call   c000080c <strcpy>
c0020ce6:	83 c4 10             	add    esp,0x10
c0020ce9:	83 ec 08             	sub    esp,0x8
c0020cec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020cf0:	50                   	push   eax
c0020cf1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cf8:	e8 bf fa ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020cfd:	83 c4 10             	add    esp,0x10
c0020d00:	83 ec 08             	sub    esp,0x8
c0020d03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d07:	50                   	push   eax
c0020d08:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d0f:	50                   	push   eax
c0020d10:	e8 3a 5b fe ff       	call   c000684f <f_rename>
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020d1f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020d26:	85 c0                	test   eax,eax
c0020d28:	75 07                	jne    c0020d31 <FAT::rename(char const*, char const*)+0xb7>
c0020d2a:	b8 00 00 00 00       	mov    eax,0x0
c0020d2f:	eb 05                	jmp    c0020d36 <FAT::rename(char const*, char const*)+0xbc>
c0020d31:	b8 01 00 00 00       	mov    eax,0x1
c0020d36:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020d3c:	c3                   	ret    
c0020d3d:	90                   	nop

c0020d3e <FAT::mkdir(char const*)>:
c0020d3e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d44:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d4c:	75 07                	jne    c0020d55 <FAT::mkdir(char const*)+0x17>
c0020d4e:	b8 04 00 00 00       	mov    eax,0x4
c0020d53:	eb 5c                	jmp    c0020db1 <FAT::mkdir(char const*)+0x73>
c0020d55:	83 ec 08             	sub    esp,0x8
c0020d58:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d63:	50                   	push   eax
c0020d64:	e8 a3 fa fd ff       	call   c000080c <strcpy>
c0020d69:	83 c4 10             	add    esp,0x10
c0020d6c:	83 ec 08             	sub    esp,0x8
c0020d6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d73:	50                   	push   eax
c0020d74:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d7b:	e8 3c fa ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020d80:	83 c4 10             	add    esp,0x10
c0020d83:	83 ec 0c             	sub    esp,0xc
c0020d86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d8a:	50                   	push   eax
c0020d8b:	e8 93 58 fe ff       	call   c0006623 <f_mkdir>
c0020d90:	83 c4 10             	add    esp,0x10
c0020d93:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d9a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020da1:	85 c0                	test   eax,eax
c0020da3:	75 07                	jne    c0020dac <FAT::mkdir(char const*)+0x6e>
c0020da5:	b8 00 00 00 00       	mov    eax,0x0
c0020daa:	eb 05                	jmp    c0020db1 <FAT::mkdir(char const*)+0x73>
c0020dac:	b8 01 00 00 00       	mov    eax,0x1
c0020db1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020db7:	c3                   	ret    

c0020db8 <FAT::exists(char const*)>:
c0020db8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020dbe:	83 ec 08             	sub    esp,0x8
c0020dc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020dc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020dcc:	50                   	push   eax
c0020dcd:	e8 3a fa fd ff       	call   c000080c <strcpy>
c0020dd2:	83 c4 10             	add    esp,0x10
c0020dd5:	83 ec 08             	sub    esp,0x8
c0020dd8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ddc:	50                   	push   eax
c0020ddd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020de4:	e8 d3 f9 ff ff       	call   c00207bc <FAT::fixFilepath(char*)>
c0020de9:	83 c4 10             	add    esp,0x10
c0020dec:	83 ec 08             	sub    esp,0x8
c0020def:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020df6:	50                   	push   eax
c0020df7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020dfb:	50                   	push   eax
c0020dfc:	e8 4d 53 fe ff       	call   c000614e <f_stat>
c0020e01:	83 c4 10             	add    esp,0x10
c0020e04:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020e0b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e12:	85 c0                	test   eax,eax
c0020e14:	75 04                	jne    c0020e1a <FAT::exists(char const*)+0x62>
c0020e16:	b0 01                	mov    al,0x1
c0020e18:	eb 02                	jmp    c0020e1c <FAT::exists(char const*)+0x64>
c0020e1a:	b0 00                	mov    al,0x0
c0020e1c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e22:	c3                   	ret    
c0020e23:	90                   	nop

c0020e24 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020e24:	b8 08 00 00 00       	mov    eax,0x8
c0020e29:	c3                   	ret    

c0020e2a <ISO9660::seek(void*, unsigned long long)>:
c0020e2a:	53                   	push   ebx
c0020e2b:	b8 04 00 00 00       	mov    eax,0x4
c0020e30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e3c:	85 d2                	test   edx,edx
c0020e3e:	74 17                	je     c0020e57 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e40:	89 c8                	mov    eax,ecx
c0020e42:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020e45:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020e48:	b8 01 00 00 00       	mov    eax,0x1
c0020e4d:	73 08                	jae    c0020e57 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e4f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020e52:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020e55:	31 c0                	xor    eax,eax
c0020e57:	5b                   	pop    ebx
c0020e58:	c3                   	ret    
c0020e59:	90                   	nop

c0020e5a <ISO9660::tell(void*, unsigned long long*)>:
c0020e5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e62:	85 d2                	test   edx,edx
c0020e64:	74 12                	je     c0020e78 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e66:	85 c0                	test   eax,eax
c0020e68:	74 0e                	je     c0020e78 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e6a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020e6d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020e70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e73:	89 10                	mov    DWORD PTR [eax],edx
c0020e75:	31 c0                	xor    eax,eax
c0020e77:	c3                   	ret    
c0020e78:	b8 04 00 00 00       	mov    eax,0x4
c0020e7d:	c3                   	ret    

c0020e7e <ISO9660::getName()>:
c0020e7e:	b8 f4 ba 02 c0       	mov    eax,0xc002baf4
c0020e83:	c3                   	ret    

c0020e84 <ISO9660::stat(void*, unsigned long long*)>:
c0020e84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8c:	85 d2                	test   edx,edx
c0020e8e:	74 12                	je     c0020ea2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e90:	85 c0                	test   eax,eax
c0020e92:	74 0e                	je     c0020ea2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020e94:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020e97:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020e9a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e9d:	89 10                	mov    DWORD PTR [eax],edx
c0020e9f:	31 c0                	xor    eax,eax
c0020ea1:	c3                   	ret    
c0020ea2:	b8 04 00 00 00       	mov    eax,0x4
c0020ea7:	c3                   	ret    

c0020ea8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020ea8:	b8 01 00 00 00       	mov    eax,0x1
c0020ead:	c3                   	ret    

c0020eae <ISO9660::unlink(char const*)>:
c0020eae:	b8 01 00 00 00       	mov    eax,0x1
c0020eb3:	c3                   	ret    

c0020eb4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020eb4:	b8 01 00 00 00       	mov    eax,0x1
c0020eb9:	c3                   	ret    

c0020eba <ISO9660::rename(char const*, char const*)>:
c0020eba:	b8 01 00 00 00       	mov    eax,0x1
c0020ebf:	c3                   	ret    

c0020ec0 <ISO9660::mkdir(char const*)>:
c0020ec0:	b8 01 00 00 00       	mov    eax,0x1
c0020ec5:	c3                   	ret    

c0020ec6 <ISO9660::close(void*)>:
c0020ec6:	83 ec 0c             	sub    esp,0xc
c0020ec9:	b8 04 00 00 00       	mov    eax,0x4
c0020ece:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ed2:	85 d2                	test   edx,edx
c0020ed4:	74 0e                	je     c0020ee4 <ISO9660::close(void*)+0x1e>
c0020ed6:	83 ec 0c             	sub    esp,0xc
c0020ed9:	52                   	push   edx
c0020eda:	e8 cd e6 fe ff       	call   c000f5ac <free>
c0020edf:	83 c4 10             	add    esp,0x10
c0020ee2:	31 c0                	xor    eax,eax
c0020ee4:	83 c4 0c             	add    esp,0xc
c0020ee7:	c3                   	ret    

c0020ee8 <ISO9660::closeDir(void*)>:
c0020ee8:	83 ec 0c             	sub    esp,0xc
c0020eeb:	b8 04 00 00 00       	mov    eax,0x4
c0020ef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ef4:	85 d2                	test   edx,edx
c0020ef6:	74 0e                	je     c0020f06 <ISO9660::closeDir(void*)+0x1e>
c0020ef8:	83 ec 0c             	sub    esp,0xc
c0020efb:	52                   	push   edx
c0020efc:	e8 ab e6 fe ff       	call   c000f5ac <free>
c0020f01:	83 c4 10             	add    esp,0x10
c0020f04:	31 c0                	xor    eax,eax
c0020f06:	83 c4 0c             	add    esp,0xc
c0020f09:	c3                   	ret    

c0020f0a <ISO9660::~ISO9660()>:
c0020f0a:	83 ec 0c             	sub    esp,0xc
c0020f0d:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c0020f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f16:	89 10                	mov    DWORD PTR [eax],edx
c0020f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f1c:	83 ec 0c             	sub    esp,0xc
c0020f1f:	50                   	push   eax
c0020f20:	e8 15 19 ff ff       	call   c001283a <Filesystem::~Filesystem()>
c0020f25:	83 c4 10             	add    esp,0x10
c0020f28:	90                   	nop
c0020f29:	83 c4 0c             	add    esp,0xc
c0020f2c:	c3                   	ret    
c0020f2d:	90                   	nop

c0020f2e <ISO9660::~ISO9660()>:
c0020f2e:	83 ec 0c             	sub    esp,0xc
c0020f31:	83 ec 0c             	sub    esp,0xc
c0020f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f38:	e8 cd ff ff ff       	call   c0020f0a <ISO9660::~ISO9660()>
c0020f3d:	83 c4 10             	add    esp,0x10
c0020f40:	83 ec 08             	sub    esp,0x8
c0020f43:	6a 08                	push   0x8
c0020f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f49:	e8 e5 14 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	83 c4 0c             	add    esp,0xc
c0020f54:	c3                   	ret    

c0020f55 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020f55:	55                   	push   ebp
c0020f56:	31 c9                	xor    ecx,ecx
c0020f58:	57                   	push   edi
c0020f59:	56                   	push   esi
c0020f5a:	53                   	push   ebx
c0020f5b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020f5f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020f63:	89 eb                	mov    ebx,ebp
c0020f65:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020f69:	39 ce                	cmp    esi,ecx
c0020f6b:	7e 17                	jle    c0020f84 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020f6d:	31 d2                	xor    edx,edx
c0020f6f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020f73:	7d 13                	jge    c0020f88 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020f75:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020f79:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020f7c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020f7f:	75 0d                	jne    c0020f8e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020f81:	42                   	inc    edx
c0020f82:	eb eb                	jmp    c0020f6f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020f84:	31 c0                	xor    eax,eax
c0020f86:	eb 0a                	jmp    c0020f92 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f88:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020f8c:	eb 04                	jmp    c0020f92 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020f8e:	41                   	inc    ecx
c0020f8f:	43                   	inc    ebx
c0020f90:	eb d7                	jmp    c0020f69 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020f92:	5b                   	pop    ebx
c0020f93:	5e                   	pop    esi
c0020f94:	5f                   	pop    edi
c0020f95:	5d                   	pop    ebp
c0020f96:	c3                   	ret    

c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020f97:	57                   	push   edi
c0020f98:	56                   	push   esi
c0020f99:	53                   	push   ebx
c0020f9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020f9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020fa2:	39 0d c0 0c 03 c0    	cmp    DWORD PTR ds:0xc0030cc0,ecx
c0020fa8:	75 08                	jne    c0020fb2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0020faa:	38 05 34 cb 02 c0    	cmp    BYTE PTR ds:0xc002cb34,al
c0020fb0:	74 2b                	je     c0020fdd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0020fb2:	83 ec 0c             	sub    esp,0xc
c0020fb5:	a2 34 cb 02 c0       	mov    ds:0xc002cb34,al
c0020fba:	68 e0 0c 03 c0       	push   0xc0030ce0
c0020fbf:	0f be c0             	movsx  eax,al
c0020fc2:	6a 01                	push   0x1
c0020fc4:	89 0d c0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cc0,ecx
c0020fca:	31 db                	xor    ebx,ebx
c0020fcc:	53                   	push   ebx
c0020fcd:	51                   	push   ecx
c0020fce:	ff 34 85 9c da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2564]
c0020fd5:	e8 7a 4e ff ff       	call   c0015e54 <LogicalDisk::read(unsigned long long, int, void*)>
c0020fda:	83 c4 20             	add    esp,0x20
c0020fdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0020fe1:	be e0 0c 03 c0       	mov    esi,0xc0030ce0
c0020fe6:	b9 00 08 00 00       	mov    ecx,0x800
c0020feb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fed:	5b                   	pop    ebx
c0020fee:	5e                   	pop    esi
c0020fef:	5f                   	pop    edi
c0020ff0:	c3                   	ret    
c0020ff1:	90                   	nop

c0020ff2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020ff2:	81 ec 10 08 00 00    	sub    esp,0x810
c0020ff8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020fff:	83 c0 41             	add    eax,0x41
c0021002:	0f be c0             	movsx  eax,al
c0021005:	50                   	push   eax
c0021006:	8d 44 24 08          	lea    eax,[esp+0x8]
c002100a:	50                   	push   eax
c002100b:	6a 10                	push   0x10
c002100d:	e8 85 ff ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021012:	83 c4 10             	add    esp,0x10
c0021015:	31 c0                	xor    eax,eax
c0021017:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002101c:	75 1d                	jne    c002103b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002101e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021023:	75 16                	jne    c002103b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021025:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002102a:	75 0f                	jne    c002103b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002102c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021031:	75 08                	jne    c002103b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021033:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021038:	0f 94 c0             	sete   al
c002103b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021041:	c3                   	ret    

c0021042 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021042:	55                   	push   ebp
c0021043:	57                   	push   edi
c0021044:	56                   	push   esi
c0021045:	53                   	push   ebx
c0021046:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002104c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021053:	85 ed                	test   ebp,ebp
c0021055:	0f 84 da 01 00 00    	je     c0021235 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002105b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021063:	0f 84 cc 01 00 00    	je     c0021235 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021069:	b8 01 00 00 00       	mov    eax,0x1
c002106e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021072:	0f 85 c2 01 00 00    	jne    c002123a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021078:	31 d2                	xor    edx,edx
c002107a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021081:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021084:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021087:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002108a:	89 04 24             	mov    DWORD PTR [esp],eax
c002108d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021091:	01 c8                	add    eax,ecx
c0021093:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021096:	11 da                	adc    edx,ebx
c0021098:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002109c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210a0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00210a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210a8:	19 d7                	sbb    edi,edx
c00210aa:	72 11                	jb     c00210bd <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00210ac:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00210af:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00210b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00210bb:	eb 0c                	jmp    c00210c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00210bd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00210c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210c5:	29 ce                	sub    esi,ecx
c00210c7:	19 df                	sbb    edi,ebx
c00210c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00210cc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00210cf:	0f a4 c2 0b          	shld   edx,eax,0xb
c00210d3:	c1 e0 0b             	shl    eax,0xb
c00210d6:	01 c8                	add    eax,ecx
c00210d8:	11 da                	adc    edx,ebx
c00210da:	89 04 24             	mov    DWORD PTR [esp],eax
c00210dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210e1:	51                   	push   ecx
c00210e2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00210e6:	50                   	push   eax
c00210e7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00210eb:	53                   	push   ebx
c00210ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00210f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210f4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00210f8:	50                   	push   eax
c00210f9:	e8 99 fe ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021101:	b8 00 08 00 00       	mov    eax,0x800
c0021106:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002110c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021110:	29 d0                	sub    eax,edx
c0021112:	83 c4 10             	add    esp,0x10
c0021115:	89 f9                	mov    ecx,edi
c0021117:	39 c6                	cmp    esi,eax
c0021119:	83 d9 00             	sbb    ecx,0x0
c002111c:	7d 1b                	jge    c0021139 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002111e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021123:	75 12                	jne    c0021137 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021125:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002112c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021132:	e9 fa 00 00 00       	jmp    c0021231 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021137:	89 f0                	mov    eax,esi
c0021139:	01 d3                	add    ebx,edx
c002113b:	31 d2                	xor    edx,edx
c002113d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021141:	39 c2                	cmp    edx,eax
c0021143:	7d 14                	jge    c0021159 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021145:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002114c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021150:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021153:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021156:	42                   	inc    edx
c0021157:	eb e8                	jmp    c0021141 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021159:	89 c2                	mov    edx,eax
c002115b:	85 c0                	test   eax,eax
c002115d:	79 02                	jns    c0021161 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002115f:	31 d2                	xor    edx,edx
c0021161:	01 c2                	add    edx,eax
c0021163:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021166:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002116d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021175:	99                   	cdq    
c0021176:	01 c1                	add    ecx,eax
c0021178:	11 d3                	adc    ebx,edx
c002117a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002117e:	29 c6                	sub    esi,eax
c0021180:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021184:	19 d7                	sbb    edi,edx
c0021186:	89 34 24             	mov    DWORD PTR [esp],esi
c0021189:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002118d:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021192:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021195:	b8 00 00 00 00       	mov    eax,0x0
c002119a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002119e:	7d 43                	jge    c00211e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00211a0:	52                   	push   edx
c00211a1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211a5:	50                   	push   eax
c00211a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211ae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00211b2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211b6:	50                   	push   eax
c00211b7:	e8 db fd ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211bc:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00211c4:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00211c9:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00211d1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00211d9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00211de:	83 c4 10             	add    esp,0x10
c00211e1:	eb aa                	jmp    c002118d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00211e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00211ea:	74 2a                	je     c0021216 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00211ec:	50                   	push   eax
c00211ed:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211f1:	50                   	push   eax
c00211f2:	8d 74 24 28          	lea    esi,[esp+0x28]
c00211f6:	56                   	push   esi
c00211f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00211fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00211ff:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021203:	51                   	push   ecx
c0021204:	e8 8e fd ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021209:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002120d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021213:	83 c4 10             	add    esp,0x10
c0021216:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002121d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021221:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021225:	89 18                	mov    DWORD PTR [eax],ebx
c0021227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002122b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002122e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021231:	31 c0                	xor    eax,eax
c0021233:	eb 05                	jmp    c002123a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021235:	b8 04 00 00 00       	mov    eax,0x4
c002123a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021240:	5b                   	pop    ebx
c0021241:	5e                   	pop    esi
c0021242:	5f                   	pop    edi
c0021243:	5d                   	pop    ebp
c0021244:	c3                   	ret    
c0021245:	90                   	nop

c0021246 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021246:	55                   	push   ebp
c0021247:	57                   	push   edi
c0021248:	56                   	push   esi
c0021249:	53                   	push   ebx
c002124a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021250:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021257:	85 ed                	test   ebp,ebp
c0021259:	0f 84 51 02 00 00    	je     c00214b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002125f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021267:	0f 84 43 02 00 00    	je     c00214b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002126d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021270:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021273:	75 0a                	jne    c002127f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021275:	b8 07 00 00 00       	mov    eax,0x7
c002127a:	e9 36 02 00 00       	jmp    c00214b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002127f:	50                   	push   eax
c0021280:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021284:	50                   	push   eax
c0021285:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002128c:	53                   	push   ebx
c002128d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021290:	c1 e0 0b             	shl    eax,0xb
c0021293:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021296:	c1 e8 0b             	shr    eax,0xb
c0021299:	50                   	push   eax
c002129a:	e8 f8 fc ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002129f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00212a2:	83 c4 10             	add    esp,0x10
c00212a5:	89 c1                	mov    ecx,eax
c00212a7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00212aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00212b0:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00212b3:	84 db                	test   bl,bl
c00212b5:	0f 85 8b 00 00 00    	jne    c0021346 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00212bb:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00212c1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00212c4:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00212ca:	29 c6                	sub    esi,eax
c00212cc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00212d0:	89 f3                	mov    ebx,esi
c00212d2:	89 f1                	mov    ecx,esi
c00212d4:	c1 fb 1f             	sar    ebx,0x1f
c00212d7:	01 f0                	add    eax,esi
c00212d9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00212dc:	11 da                	adc    edx,ebx
c00212de:	89 04 24             	mov    DWORD PTR [esp],eax
c00212e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00212e8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00212eb:	89 d8                	mov    eax,ebx
c00212ed:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00212f1:	ba 00 00 00 00       	mov    edx,0x0
c00212f6:	19 f8                	sbb    eax,edi
c00212f8:	b8 00 00 00 00       	mov    eax,0x0
c00212fd:	73 08                	jae    c0021307 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00212ff:	89 f0                	mov    eax,esi
c0021301:	89 fa                	mov    edx,edi
c0021303:	29 c8                	sub    eax,ecx
c0021305:	19 da                	sbb    edx,ebx
c0021307:	89 d7                	mov    edi,edx
c0021309:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002130c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002130f:	09 c7                	or     edi,eax
c0021311:	0f 84 5e ff ff ff    	je     c0021275 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021317:	57                   	push   edi
c0021318:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002131c:	50                   	push   eax
c002131d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021324:	53                   	push   ebx
c0021325:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021328:	c1 e0 0b             	shl    eax,0xb
c002132b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002132f:	c1 e8 0b             	shr    eax,0xb
c0021332:	50                   	push   eax
c0021333:	e8 5f fc ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021338:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002133b:	83 c4 10             	add    esp,0x10
c002133e:	25 ff 07 00 00       	and    eax,0x7ff
c0021343:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021346:	31 ff                	xor    edi,edi
c0021348:	56                   	push   esi
c0021349:	6a 28                	push   0x28
c002134b:	6a 00                	push   0x0
c002134d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021351:	50                   	push   eax
c0021352:	e8 f9 f3 fd ff       	call   c0000750 <memset>
c0021357:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002135a:	25 ff 07 00 00       	and    eax,0x7ff
c002135f:	89 c6                	mov    esi,eax
c0021361:	83 c6 21             	add    esi,0x21
c0021364:	83 d7 00             	adc    edi,0x0
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	31 c9                	xor    ecx,ecx
c002136c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021373:	83 f9 28             	cmp    ecx,0x28
c0021376:	88 04 24             	mov    BYTE PTR [esp],al
c0021379:	0f 94 c2             	sete   dl
c002137c:	88 d0                	mov    al,dl
c002137e:	ba ff 07 00 00       	mov    edx,0x7ff
c0021383:	39 f2                	cmp    edx,esi
c0021385:	ba 00 00 00 00       	mov    edx,0x0
c002138a:	19 fa                	sbb    edx,edi
c002138c:	0f 92 c2             	setb   dl
c002138f:	09 c2                	or     edx,eax
c0021391:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021395:	0f 94 c0             	sete   al
c0021398:	08 d0                	or     al,dl
c002139a:	75 16                	jne    c00213b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002139c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00213a0:	74 10                	je     c00213b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00213a2:	8a 04 24             	mov    al,BYTE PTR [esp]
c00213a5:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00213a9:	41                   	inc    ecx
c00213aa:	83 c6 01             	add    esi,0x1
c00213ad:	83 d7 00             	adc    edi,0x0
c00213b0:	eb ba                	jmp    c002136c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00213b2:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00213b9:	83 ec 0c             	sub    esp,0xc
c00213bc:	8d 74 24 24          	lea    esi,[esp+0x24]
c00213c0:	56                   	push   esi
c00213c1:	e8 a6 f3 fd ff       	call   c000076c <strlen>
c00213c6:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00213cd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213d1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00213d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213dc:	5a                   	pop    edx
c00213dd:	25 ff 07 00 00       	and    eax,0x7ff
c00213e2:	59                   	pop    ecx
c00213e3:	01 f8                	add    eax,edi
c00213e5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00213eb:	83 e0 02             	and    eax,0x2
c00213ee:	3c 01                	cmp    al,0x1
c00213f0:	19 c0                	sbb    eax,eax
c00213f2:	83 c0 02             	add    eax,0x2
c00213f5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213f9:	56                   	push   esi
c00213fa:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00213fe:	50                   	push   eax
c00213ff:	e8 08 f4 fd ff       	call   c000080c <strcpy>
c0021404:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021408:	83 c4 10             	add    esp,0x10
c002140b:	84 c0                	test   al,al
c002140d:	75 21                	jne    c0021430 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002140f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021417:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002141f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021427:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002142e:	eb 28                	jmp    c0021458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021430:	fe c8                	dec    al
c0021432:	75 24                	jne    c0021458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021434:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002143c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021444:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002144c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021453:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021458:	8d 74 24 40          	lea    esi,[esp+0x40]
c002145c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021463:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002146a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002146c:	0f b6 f3             	movzx  esi,bl
c002146f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021476:	31 db                	xor    ebx,ebx
c0021478:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002147e:	89 df                	mov    edi,ebx
c0021480:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021486:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021489:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002148c:	39 c6                	cmp    esi,eax
c002148e:	19 d7                	sbb    edi,edx
c0021490:	72 10                	jb     c00214a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021492:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021499:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00214a0:	eb 0a                	jmp    c00214ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00214a2:	29 f0                	sub    eax,esi
c00214a4:	19 da                	sbb    edx,ebx
c00214a6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214a9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214ac:	31 c0                	xor    eax,eax
c00214ae:	eb 05                	jmp    c00214b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00214b0:	b8 04 00 00 00       	mov    eax,0x4
c00214b5:	81 c4 5c 09 00 00    	add    esp,0x95c
c00214bb:	5b                   	pop    ebx
c00214bc:	5e                   	pop    esi
c00214bd:	5f                   	pop    edi
c00214be:	5d                   	pop    ebp
c00214bf:	c3                   	ret    

c00214c0 <readRoot(unsigned int*, unsigned int*, char)>:
c00214c0:	57                   	push   edi
c00214c1:	56                   	push   esi
c00214c2:	81 ec 38 08 00 00    	sub    esp,0x838
c00214c8:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00214d0:	50                   	push   eax
c00214d1:	8d 44 24 38          	lea    eax,[esp+0x38]
c00214d5:	50                   	push   eax
c00214d6:	6a 10                	push   0x10
c00214d8:	e8 ba fa ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214dd:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00214e4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00214e8:	b9 22 00 00 00       	mov    ecx,0x22
c00214ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214ef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00214fa:	89 10                	mov    DWORD PTR [eax],edx
c00214fc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021503:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021507:	89 10                	mov    DWORD PTR [eax],edx
c0021509:	81 c4 44 08 00 00    	add    esp,0x844
c002150f:	b0 01                	mov    al,0x1
c0021511:	5e                   	pop    esi
c0021512:	5f                   	pop    edi
c0021513:	c3                   	ret    

c0021514 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021514:	55                   	push   ebp
c0021515:	57                   	push   edi
c0021516:	56                   	push   esi
c0021517:	53                   	push   ebx
c0021518:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002151e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021525:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002152c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021530:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021534:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021538:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002153c:	75 03                	jne    c0021541 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002153e:	83 c3 02             	add    ebx,0x2
c0021541:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021544:	75 03                	jne    c0021549 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021546:	43                   	inc    ebx
c0021547:	eb f8                	jmp    c0021541 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021549:	51                   	push   ecx
c002154a:	68 00 01 00 00       	push   0x100
c002154f:	6a 00                	push   0x0
c0021551:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021555:	50                   	push   eax
c0021556:	e8 f5 f1 fd ff       	call   c0000750 <memset>
c002155b:	83 c4 10             	add    esp,0x10
c002155e:	31 d2                	xor    edx,edx
c0021560:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021563:	84 c0                	test   al,al
c0021565:	74 21                	je     c0021588 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021567:	3c 2f                	cmp    al,0x2f
c0021569:	75 0b                	jne    c0021576 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002156b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002156f:	bd 01 00 00 00       	mov    ebp,0x1
c0021574:	eb 14                	jmp    c002158a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021576:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021579:	80 f9 19             	cmp    cl,0x19
c002157c:	77 03                	ja     c0021581 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002157e:	83 e8 20             	sub    eax,0x20
c0021581:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021585:	42                   	inc    edx
c0021586:	eb d8                	jmp    c0021560 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021588:	31 ed                	xor    ebp,ebp
c002158a:	83 ec 0c             	sub    esp,0xc
c002158d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021594:	e8 03 e0 fe ff       	call   c000f59c <malloc>
c0021599:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00215a0:	89 c6                	mov    esi,eax
c00215a2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00215a8:	c1 ef 0b             	shr    edi,0xb
c00215ab:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00215b2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00215b6:	83 c4 10             	add    esp,0x10
c00215b9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00215be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215c2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00215c9:	74 28                	je     c00215f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00215cb:	52                   	push   edx
c00215cc:	57                   	push   edi
c00215cd:	50                   	push   eax
c00215ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215d2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00215d9:	e8 b9 f9 ff ff       	call   c0020f97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215e2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00215e9:	05 00 08 00 00       	add    eax,0x800
c00215ee:	83 c4 10             	add    esp,0x10
c00215f1:	eb cb                	jmp    c00215be <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00215fa:	57                   	push   edi
c00215fb:	e8 6c f1 fd ff       	call   c000076c <strlen>
c0021600:	50                   	push   eax
c0021601:	57                   	push   edi
c0021602:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021609:	56                   	push   esi
c002160a:	e8 46 f9 ff ff       	call   c0020f55 <__memmem(unsigned char*, int, unsigned char*, int)>
c002160f:	83 c4 20             	add    esp,0x20
c0021612:	85 c0                	test   eax,eax
c0021614:	75 13                	jne    c0021629 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021616:	83 ec 0c             	sub    esp,0xc
c0021619:	56                   	push   esi
c002161a:	e8 8d df fe ff       	call   c000f5ac <free>
c002161f:	83 c4 10             	add    esp,0x10
c0021622:	31 c0                	xor    eax,eax
c0021624:	e9 b3 00 00 00       	jmp    c00216dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021629:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002162d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021631:	c1 e7 08             	shl    edi,0x8
c0021634:	c1 e2 10             	shl    edx,0x10
c0021637:	09 d7                	or     edi,edx
c0021639:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002163d:	09 d7                	or     edi,edx
c002163f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021643:	c1 e2 18             	shl    edx,0x18
c0021646:	09 d7                	or     edi,edx
c0021648:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002164c:	89 d1                	mov    ecx,edx
c002164e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021652:	c1 e1 08             	shl    ecx,0x8
c0021655:	c1 e2 10             	shl    edx,0x10
c0021658:	09 ca                	or     edx,ecx
c002165a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002165e:	09 ca                	or     edx,ecx
c0021660:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021664:	c1 e1 18             	shl    ecx,0x18
c0021667:	09 ca                	or     edx,ecx
c0021669:	89 e9                	mov    ecx,ebp
c002166b:	84 c9                	test   cl,cl
c002166d:	74 3c                	je     c00216ab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002166f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021673:	83 ec 0c             	sub    esp,0xc
c0021676:	56                   	push   esi
c0021677:	e8 30 df fe ff       	call   c000f5ac <free>
c002167c:	83 c4 0c             	add    esp,0xc
c002167f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021686:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002168b:	50                   	push   eax
c002168c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021693:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002169a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002169e:	52                   	push   edx
c002169f:	57                   	push   edi
c00216a0:	53                   	push   ebx
c00216a1:	e8 6e fe ff ff       	call   c0021514 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00216a6:	83 c4 20             	add    esp,0x20
c00216a9:	eb 31                	jmp    c00216dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00216ab:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00216ae:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00216b5:	d0 e8                	shr    al,1
c00216b7:	89 3b                	mov    DWORD PTR [ebx],edi
c00216b9:	83 e0 01             	and    eax,0x1
c00216bc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00216c3:	83 ec 0c             	sub    esp,0xc
c00216c6:	89 13                	mov    DWORD PTR [ebx],edx
c00216c8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00216cf:	89 03                	mov    DWORD PTR [ebx],eax
c00216d1:	56                   	push   esi
c00216d2:	e8 d5 de fe ff       	call   c000f5ac <free>
c00216d7:	83 c4 10             	add    esp,0x10
c00216da:	b0 01                	mov    al,0x1
c00216dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216e2:	5b                   	pop    ebx
c00216e3:	5e                   	pop    esi
c00216e4:	5f                   	pop    edi
c00216e5:	5d                   	pop    ebp
c00216e6:	c3                   	ret    

c00216e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00216e7:	55                   	push   ebp
c00216e8:	57                   	push   edi
c00216e9:	56                   	push   esi
c00216ea:	53                   	push   ebx
c00216eb:	83 ec 20             	sub    esp,0x20
c00216ee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00216f2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00216f6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00216fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021702:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002170a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002170f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021715:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002171b:	57                   	push   edi
c002171c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021720:	50                   	push   eax
c0021721:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021725:	50                   	push   eax
c0021726:	e8 95 fd ff ff       	call   c00214c0 <readRoot(unsigned int*, unsigned int*, char)>
c002172b:	5a                   	pop    edx
c002172c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021730:	e8 37 f0 fd ff       	call   c000076c <strlen>
c0021735:	83 c4 10             	add    esp,0x10
c0021738:	83 f8 03             	cmp    eax,0x3
c002173b:	77 17                	ja     c0021754 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002173d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021741:	89 03                	mov    DWORD PTR [ebx],eax
c0021743:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021747:	89 06                	mov    DWORD PTR [esi],eax
c0021749:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021750:	b0 01                	mov    al,0x1
c0021752:	eb 19                	jmp    c002176d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021754:	50                   	push   eax
c0021755:	55                   	push   ebp
c0021756:	57                   	push   edi
c0021757:	56                   	push   esi
c0021758:	53                   	push   ebx
c0021759:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002175d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021761:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021765:	e8 aa fd ff ff       	call   c0021514 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002176a:	83 c4 20             	add    esp,0x20
c002176d:	83 c4 1c             	add    esp,0x1c
c0021770:	5b                   	pop    ebx
c0021771:	5e                   	pop    esi
c0021772:	5f                   	pop    edi
c0021773:	5d                   	pop    ebp
c0021774:	c3                   	ret    
c0021775:	90                   	nop

c0021776 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021776:	57                   	push   edi
c0021777:	56                   	push   esi
c0021778:	53                   	push   ebx
c0021779:	83 ec 10             	sub    esp,0x10
c002177c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021780:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021784:	85 ff                	test   edi,edi
c0021786:	0f 84 8b 00 00 00    	je     c0021817 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002178c:	85 f6                	test   esi,esi
c002178e:	0f 84 83 00 00 00    	je     c0021817 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021794:	b8 03 00 00 00       	mov    eax,0x3
c0021799:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002179e:	75 7c                	jne    c002181c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217a0:	83 ec 0c             	sub    esp,0xc
c00217a3:	6a 1c                	push   0x1c
c00217a5:	e8 f2 dd fe ff       	call   c000f59c <malloc>
c00217aa:	89 07                	mov    DWORD PTR [edi],eax
c00217ac:	89 c3                	mov    ebx,eax
c00217ae:	58                   	pop    eax
c00217af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217b3:	50                   	push   eax
c00217b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00217b7:	50                   	push   eax
c00217b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217bc:	50                   	push   eax
c00217bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217c1:	50                   	push   eax
c00217c2:	56                   	push   esi
c00217c3:	e8 1f ff ff ff       	call   c00216e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00217c8:	83 c4 20             	add    esp,0x20
c00217cb:	84 c0                	test   al,al
c00217cd:	74 07                	je     c00217d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00217cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00217d4:	74 0b                	je     c00217e1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00217d6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00217da:	b8 01 00 00 00       	mov    eax,0x1
c00217df:	eb 3b                	jmp    c002181c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00217e9:	89 03                	mov    DWORD PTR [ebx],eax
c00217eb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00217f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00217fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021804:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021807:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002180e:	8a 06                	mov    al,BYTE PTR [esi]
c0021810:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021813:	31 c0                	xor    eax,eax
c0021815:	eb 05                	jmp    c002181c <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021817:	b8 04 00 00 00       	mov    eax,0x4
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	5b                   	pop    ebx
c0021820:	5e                   	pop    esi
c0021821:	5f                   	pop    edi
c0021822:	c3                   	ret    
c0021823:	90                   	nop

c0021824 <ISO9660::exists(char const*)>:
c0021824:	83 ec 28             	sub    esp,0x28
c0021827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002182b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002182f:	52                   	push   edx
c0021830:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021833:	52                   	push   edx
c0021834:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021838:	52                   	push   edx
c0021839:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002183d:	52                   	push   edx
c002183e:	50                   	push   eax
c002183f:	e8 a3 fe ff ff       	call   c00216e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021844:	83 c4 3c             	add    esp,0x3c
c0021847:	c3                   	ret    

c0021848 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021848:	56                   	push   esi
c0021849:	53                   	push   ebx
c002184a:	83 ec 14             	sub    esp,0x14
c002184d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021851:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021855:	85 db                	test   ebx,ebx
c0021857:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002185b:	0f 94 c2             	sete   dl
c002185e:	85 f6                	test   esi,esi
c0021860:	0f 94 c0             	sete   al
c0021863:	08 c2                	or     dl,al
c0021865:	75 68                	jne    c00218cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021867:	85 c9                	test   ecx,ecx
c0021869:	74 64                	je     c00218cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002186b:	83 ec 0c             	sub    esp,0xc
c002186e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021871:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021875:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002187b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021882:	50                   	push   eax
c0021883:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021886:	50                   	push   eax
c0021887:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002188b:	50                   	push   eax
c002188c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021890:	50                   	push   eax
c0021891:	51                   	push   ecx
c0021892:	e8 50 fe ff ff       	call   c00216e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021897:	83 c4 20             	add    esp,0x20
c002189a:	ba 01 00 00 00       	mov    edx,0x1
c002189f:	84 c0                	test   al,al
c00218a1:	74 31                	je     c00218d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218ae:	89 03                	mov    DWORD PTR [ebx],eax
c00218b0:	ba 00 00 00 00       	mov    edx,0x0
c00218b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218b9:	85 c0                	test   eax,eax
c00218bb:	0f 95 06             	setne  BYTE PTR [esi]
c00218be:	74 14                	je     c00218d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218c0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00218c6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218cd:	eb 05                	jmp    c00218d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218cf:	ba 04 00 00 00       	mov    edx,0x4
c00218d4:	83 c4 14             	add    esp,0x14
c00218d7:	89 d0                	mov    eax,edx
c00218d9:	5b                   	pop    ebx
c00218da:	5e                   	pop    esi
c00218db:	c3                   	ret    

c00218dc <ISO9660::openDir(char const*, void**)>:
c00218dc:	57                   	push   edi
c00218dd:	56                   	push   esi
c00218de:	53                   	push   ebx
c00218df:	83 ec 10             	sub    esp,0x10
c00218e2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218ea:	85 ff                	test   edi,edi
c00218ec:	74 7b                	je     c0021969 <ISO9660::openDir(char const*, void**)+0x8d>
c00218ee:	85 f6                	test   esi,esi
c00218f0:	74 77                	je     c0021969 <ISO9660::openDir(char const*, void**)+0x8d>
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	6a 1c                	push   0x1c
c00218f7:	e8 a0 dc fe ff       	call   c000f59c <malloc>
c00218fc:	89 07                	mov    DWORD PTR [edi],eax
c00218fe:	89 c3                	mov    ebx,eax
c0021900:	58                   	pop    eax
c0021901:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021905:	50                   	push   eax
c0021906:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021909:	50                   	push   eax
c002190a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002190e:	50                   	push   eax
c002190f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021913:	50                   	push   eax
c0021914:	56                   	push   esi
c0021915:	e8 cd fd ff ff       	call   c00216e7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002191a:	83 c4 20             	add    esp,0x20
c002191d:	84 c0                	test   al,al
c002191f:	74 07                	je     c0021928 <ISO9660::openDir(char const*, void**)+0x4c>
c0021921:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021926:	75 0b                	jne    c0021933 <ISO9660::openDir(char const*, void**)+0x57>
c0021928:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002192c:	b8 01 00 00 00       	mov    eax,0x1
c0021931:	eb 3b                	jmp    c002196e <ISO9660::openDir(char const*, void**)+0x92>
c0021933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021937:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002193b:	89 03                	mov    DWORD PTR [ebx],eax
c002193d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002194f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021956:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021959:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021960:	8a 06                	mov    al,BYTE PTR [esi]
c0021962:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021965:	31 c0                	xor    eax,eax
c0021967:	eb 05                	jmp    c002196e <ISO9660::openDir(char const*, void**)+0x92>
c0021969:	b8 04 00 00 00       	mov    eax,0x4
c002196e:	83 c4 10             	add    esp,0x10
c0021971:	5b                   	pop    ebx
c0021972:	5e                   	pop    esi
c0021973:	5f                   	pop    edi
c0021974:	c3                   	ret    
c0021975:	90                   	nop

c0021976 <ISO9660::ISO9660()>:
c0021976:	83 ec 0c             	sub    esp,0xc
c0021979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002197d:	83 ec 0c             	sub    esp,0xc
c0021980:	50                   	push   eax
c0021981:	e8 90 0e ff ff       	call   c0012816 <Filesystem::Filesystem()>
c0021986:	83 c4 10             	add    esp,0x10
c0021989:	ba 18 bb 02 c0       	mov    edx,0xc002bb18
c002198e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021992:	89 10                	mov    DWORD PTR [eax],edx
c0021994:	90                   	nop
c0021995:	83 c4 0c             	add    esp,0xc
c0021998:	c3                   	ret    
c0021999:	90                   	nop

c002199a <SoundChannel::SoundChannel(int, int, int, int)>:
c002199a:	83 ec 1c             	sub    esp,0x1c
c002199d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00219a5:	89 10                	mov    DWORD PTR [eax],edx
c00219a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00219af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00219ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219bd:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00219c2:	75 23                	jne    c00219e7 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00219c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00219ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219d1:	0f af c2             	imul   eax,edx
c00219d4:	85 c0                	test   eax,eax
c00219d6:	79 03                	jns    c00219db <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00219d8:	83 c0 03             	add    eax,0x3
c00219db:	c1 f8 02             	sar    eax,0x2
c00219de:	05 a0 0f 00 00       	add    eax,0xfa0
c00219e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00219e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219ef:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00219f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219f6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00219fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a01:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a0c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a0f:	c1 e0 02             	shl    eax,0x2
c0021a12:	83 ec 0c             	sub    esp,0xc
c0021a15:	50                   	push   eax
c0021a16:	e8 81 db fe ff       	call   c000f59c <malloc>
c0021a1b:	83 c4 10             	add    esp,0x10
c0021a1e:	89 c2                	mov    edx,eax
c0021a20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021a27:	83 ec 04             	sub    esp,0x4
c0021a2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a2e:	50                   	push   eax
c0021a2f:	6a 01                	push   0x1
c0021a31:	6a 04                	push   0x4
c0021a33:	e8 2d 71 fe ff       	call   c0008b65 <src_new>
c0021a38:	83 c4 10             	add    esp,0x10
c0021a3b:	89 c2                	mov    edx,eax
c0021a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a48:	85 c0                	test   eax,eax
c0021a4a:	74 10                	je     c0021a5c <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021a4c:	83 ec 0c             	sub    esp,0xc
c0021a4f:	68 78 bb 02 c0       	push   0xc002bb78
c0021a54:	e8 12 82 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0021a59:	83 c4 10             	add    esp,0x10
c0021a5c:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c0021a61:	83 f0 01             	xor    eax,0x1
c0021a64:	84 c0                	test   al,al
c0021a66:	74 57                	je     c0021abf <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021a68:	a1 94 bb 02 c0       	mov    eax,ds:0xc002bb94
c0021a6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021a79:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021a81:	7f 35                	jg     c0021ab8 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021a83:	83 ec 0c             	sub    esp,0xc
c0021a86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a8a:	e8 e0 53 00 00       	call   c0026e6f <__floatsisf>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	8b 15 94 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb94
c0021a98:	83 ec 08             	sub    esp,0x8
c0021a9b:	52                   	push   edx
c0021a9c:	50                   	push   eax
c0021a9d:	e8 df 4f 00 00       	call   c0026a81 <__mulsf3>
c0021aa2:	83 c4 10             	add    esp,0x10
c0021aa5:	89 c2                	mov    edx,eax
c0021aa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021aab:	89 14 85 e0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb20],edx
c0021ab2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ab6:	eb c1                	jmp    c0021a79 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021ab8:	c6 05 e0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318e0,0x1
c0021abf:	90                   	nop
c0021ac0:	83 c4 1c             	add    esp,0x1c
c0021ac3:	c3                   	ret    

c0021ac4 <SoundChannel::~SoundChannel()>:
c0021ac4:	83 ec 0c             	sub    esp,0xc
c0021ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ace:	83 ec 0c             	sub    esp,0xc
c0021ad1:	50                   	push   eax
c0021ad2:	e8 d5 da fe ff       	call   c000f5ac <free>
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	90                   	nop
c0021adb:	83 c4 0c             	add    esp,0xc
c0021ade:	c3                   	ret    
c0021adf:	90                   	nop

c0021ae0 <SoundChannel::getSampleRate()>:
c0021ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ae6:	c3                   	ret    
c0021ae7:	90                   	nop

c0021ae8 <SoundChannel::getBits()>:
c0021ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aef:	c3                   	ret    

c0021af0 <SoundChannel::getBufferUsed()>:
c0021af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021af4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021af7:	c3                   	ret    

c0021af8 <SoundChannel::getBufferSize()>:
c0021af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021afc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021aff:	c3                   	ret    

c0021b00 <SoundChannel::unbuffer(float*, int, int)>:
c0021b00:	56                   	push   esi
c0021b01:	53                   	push   ebx
c0021b02:	83 ec 40             	sub    esp,0x40
c0021b05:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021b09:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021b0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b10:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021b13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021b17:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021b1b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021b1f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021b23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021b27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021b2b:	e8 3f 53 00 00       	call   c0026e6f <__floatsisf>
c0021b30:	5a                   	pop    edx
c0021b31:	89 c6                	mov    esi,eax
c0021b33:	ff 33                	push   DWORD PTR [ebx]
c0021b35:	e8 35 53 00 00       	call   c0026e6f <__floatsisf>
c0021b3a:	59                   	pop    ecx
c0021b3b:	5a                   	pop    edx
c0021b3c:	50                   	push   eax
c0021b3d:	56                   	push   esi
c0021b3e:	e8 01 51 00 00       	call   c0026c44 <__divsf3>
c0021b43:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b46:	e8 f4 65 00 00       	call   c002813f <__extendsfdf2>
c0021b4b:	59                   	pop    ecx
c0021b4c:	5e                   	pop    esi
c0021b4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021b55:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021b5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b61:	50                   	push   eax
c0021b62:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b65:	e8 f0 6b fe ff       	call   c000875a <src_process>
c0021b6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b6e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b71:	83 c4 0c             	add    esp,0xc
c0021b74:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b77:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021b7a:	29 d0                	sub    eax,edx
c0021b7c:	c1 e0 02             	shl    eax,0x2
c0021b7f:	50                   	push   eax
c0021b80:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021b83:	50                   	push   eax
c0021b84:	51                   	push   ecx
c0021b85:	e8 fe ea fd ff       	call   c0000688 <memmove>
c0021b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b8e:	83 c4 44             	add    esp,0x44
c0021b91:	5b                   	pop    ebx
c0021b92:	5e                   	pop    esi
c0021b93:	c3                   	ret    

c0021b94 <SoundChannel::buffer16(short*, int)>:
c0021b94:	55                   	push   ebp
c0021b95:	57                   	push   edi
c0021b96:	56                   	push   esi
c0021b97:	53                   	push   ebx
c0021b98:	83 ec 1c             	sub    esp,0x1c
c0021b9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021b9f:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021ba2:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021ba5:	0f 84 d2 00 00 00    	je     c0021c7d <SoundChannel::buffer16(short*, int)+0xe9>
c0021bab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021baf:	85 ed                	test   ebp,ebp
c0021bb1:	0f 8e c6 00 00 00    	jle    c0021c7d <SoundChannel::buffer16(short*, int)+0xe9>
c0021bb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021bbb:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021bc0:	83 ec 0c             	sub    esp,0xc
c0021bc3:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021bc6:	50                   	push   eax
c0021bc7:	e8 a3 52 00 00       	call   c0026e6f <__floatsisf>
c0021bcc:	59                   	pop    ecx
c0021bcd:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021bd0:	5f                   	pop    edi
c0021bd1:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021bd4:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021bd7:	55                   	push   ebp
c0021bd8:	50                   	push   eax
c0021bd9:	e8 a3 4e 00 00       	call   c0026a81 <__mulsf3>
c0021bde:	83 c4 10             	add    esp,0x10
c0021be1:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021be4:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021be7:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021bea:	0f 84 99 00 00 00    	je     c0021c89 <SoundChannel::buffer16(short*, int)+0xf5>
c0021bf0:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021bf5:	74 78                	je     c0021c6f <SoundChannel::buffer16(short*, int)+0xdb>
c0021bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021bfb:	83 ec 0c             	sub    esp,0xc
c0021bfe:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021c02:	50                   	push   eax
c0021c03:	e8 67 52 00 00       	call   c0026e6f <__floatsisf>
c0021c08:	5f                   	pop    edi
c0021c09:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c0c:	5a                   	pop    edx
c0021c0d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c10:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c13:	55                   	push   ebp
c0021c14:	50                   	push   eax
c0021c15:	e8 67 4e 00 00       	call   c0026a81 <__mulsf3>
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c20:	be 02 00 00 00       	mov    esi,0x2
c0021c25:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c28:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c2b:	74 46                	je     c0021c73 <SoundChannel::buffer16(short*, int)+0xdf>
c0021c2d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021c31:	eb 36                	jmp    c0021c69 <SoundChannel::buffer16(short*, int)+0xd5>
c0021c33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c37:	83 ec 0c             	sub    esp,0xc
c0021c3a:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021c3e:	46                   	inc    esi
c0021c3f:	50                   	push   eax
c0021c40:	e8 2a 52 00 00       	call   c0026e6f <__floatsisf>
c0021c45:	5a                   	pop    edx
c0021c46:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021c49:	59                   	pop    ecx
c0021c4a:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021c4d:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c54:	50                   	push   eax
c0021c55:	e8 27 4e 00 00       	call   c0026a81 <__mulsf3>
c0021c5a:	83 c4 10             	add    esp,0x10
c0021c5d:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021c61:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c64:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c67:	74 0a                	je     c0021c73 <SoundChannel::buffer16(short*, int)+0xdf>
c0021c69:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021c6d:	75 c4                	jne    c0021c33 <SoundChannel::buffer16(short*, int)+0x9f>
c0021c6f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021c73:	83 c4 1c             	add    esp,0x1c
c0021c76:	89 f0                	mov    eax,esi
c0021c78:	5b                   	pop    ebx
c0021c79:	5e                   	pop    esi
c0021c7a:	5f                   	pop    edi
c0021c7b:	5d                   	pop    ebp
c0021c7c:	c3                   	ret    
c0021c7d:	83 c4 1c             	add    esp,0x1c
c0021c80:	31 f6                	xor    esi,esi
c0021c82:	5b                   	pop    ebx
c0021c83:	89 f0                	mov    eax,esi
c0021c85:	5e                   	pop    esi
c0021c86:	5f                   	pop    edi
c0021c87:	5d                   	pop    ebp
c0021c88:	c3                   	ret    
c0021c89:	be 01 00 00 00       	mov    esi,0x1
c0021c8e:	eb e3                	jmp    c0021c73 <SoundChannel::buffer16(short*, int)+0xdf>

c0021c90 <SoundChannel::buffer8(unsigned char*, int)>:
c0021c90:	55                   	push   ebp
c0021c91:	57                   	push   edi
c0021c92:	56                   	push   esi
c0021c93:	53                   	push   ebx
c0021c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c98:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021c9c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ca3:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021ca6:	74 7a                	je     c0021d22 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021ca8:	85 ff                	test   edi,edi
c0021caa:	7e 76                	jle    c0021d22 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021cac:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021cb0:	8d 70 01             	lea    esi,[eax+0x1]
c0021cb3:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cb6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cb9:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021cc0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021cc3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021cc6:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021cc9:	74 5e                	je     c0021d29 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021ccb:	83 ff 01             	cmp    edi,0x1
c0021cce:	74 4b                	je     c0021d1b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021cd0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021cd4:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cd7:	8d 70 01             	lea    esi,[eax+0x1]
c0021cda:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021cdd:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021ce4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ce7:	b8 02 00 00 00       	mov    eax,0x2
c0021cec:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021cef:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021cf2:	75 23                	jne    c0021d17 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021cf4:	eb 27                	jmp    c0021d1d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021cf6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021cfb:	8d 71 01             	lea    esi,[ecx+0x1]
c0021cfe:	40                   	inc    eax
c0021cff:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d02:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021d05:	8b 1c 9d e0 14 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceb20]
c0021d0c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021d0f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d12:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d15:	74 06                	je     c0021d1d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d17:	39 c7                	cmp    edi,eax
c0021d19:	75 db                	jne    c0021cf6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021d1b:	89 f8                	mov    eax,edi
c0021d1d:	5b                   	pop    ebx
c0021d1e:	5e                   	pop    esi
c0021d1f:	5f                   	pop    edi
c0021d20:	5d                   	pop    ebp
c0021d21:	c3                   	ret    
c0021d22:	5b                   	pop    ebx
c0021d23:	31 c0                	xor    eax,eax
c0021d25:	5e                   	pop    esi
c0021d26:	5f                   	pop    edi
c0021d27:	5d                   	pop    ebp
c0021d28:	c3                   	ret    
c0021d29:	b8 01 00 00 00       	mov    eax,0x1
c0021d2e:	eb ed                	jmp    c0021d1d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d30 <SoundDevice::SoundDevice(char const*)>:
c0021d30:	83 ec 1c             	sub    esp,0x1c
c0021d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d37:	83 ec 08             	sub    esp,0x8
c0021d3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021d3e:	50                   	push   eax
c0021d3f:	e8 04 1e ff ff       	call   c0013b48 <Device::Device(char const*)>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0021d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d50:	89 10                	mov    DWORD PTR [eax],edx
c0021d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d56:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d64:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021d6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d76:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021d7b:	7f 19                	jg     c0021d96 <SoundDevice::SoundDevice(char const*)+0x66>
c0021d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d85:	83 c2 54             	add    edx,0x54
c0021d88:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021d90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d94:	eb e0                	jmp    c0021d76 <SoundDevice::SoundDevice(char const*)+0x46>
c0021d96:	90                   	nop
c0021d97:	83 c4 1c             	add    esp,0x1c
c0021d9a:	c3                   	ret    
c0021d9b:	90                   	nop

c0021d9c <SoundDevice::~SoundDevice()>:
c0021d9c:	53                   	push   ebx
c0021d9d:	83 ec 18             	sub    esp,0x18
c0021da0:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c0021da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da9:	89 10                	mov    DWORD PTR [eax],edx
c0021dab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021db3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021db8:	7f 46                	jg     c0021e00 <SoundDevice::~SoundDevice()+0x64>
c0021dba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dc2:	83 c2 54             	add    edx,0x54
c0021dc5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021dc9:	85 c0                	test   eax,eax
c0021dcb:	74 2d                	je     c0021dfa <SoundDevice::~SoundDevice()+0x5e>
c0021dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dd5:	83 c2 54             	add    edx,0x54
c0021dd8:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021ddc:	85 db                	test   ebx,ebx
c0021dde:	74 1a                	je     c0021dfa <SoundDevice::~SoundDevice()+0x5e>
c0021de0:	83 ec 0c             	sub    esp,0xc
c0021de3:	53                   	push   ebx
c0021de4:	e8 db fc ff ff       	call   c0021ac4 <SoundChannel::~SoundChannel()>
c0021de9:	83 c4 10             	add    esp,0x10
c0021dec:	83 ec 08             	sub    esp,0x8
c0021def:	6a 2c                	push   0x2c
c0021df1:	53                   	push   ebx
c0021df2:	e8 3c 06 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0021df7:	83 c4 10             	add    esp,0x10
c0021dfa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dfe:	eb b3                	jmp    c0021db3 <SoundDevice::~SoundDevice()+0x17>
c0021e00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	50                   	push   eax
c0021e08:	e8 05 1a ff ff       	call   c0013812 <Device::~Device()>
c0021e0d:	83 c4 10             	add    esp,0x10
c0021e10:	90                   	nop
c0021e11:	83 c4 18             	add    esp,0x18
c0021e14:	5b                   	pop    ebx
c0021e15:	c3                   	ret    

c0021e16 <SoundDevice::~SoundDevice()>:
c0021e16:	83 ec 0c             	sub    esp,0xc
c0021e19:	83 ec 0c             	sub    esp,0xc
c0021e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e20:	e8 77 ff ff ff       	call   c0021d9c <SoundDevice::~SoundDevice()>
c0021e25:	83 c4 10             	add    esp,0x10
c0021e28:	83 ec 08             	sub    esp,0x8
c0021e2b:	68 e4 01 00 00       	push   0x1e4
c0021e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e34:	e8 fa 05 ff ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0021e39:	83 c4 10             	add    esp,0x10
c0021e3c:	83 c4 0c             	add    esp,0xc
c0021e3f:	c3                   	ret    

c0021e40 <SoundDevice::getFreeChannelNum()>:
c0021e40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e44:	31 c0                	xor    eax,eax
c0021e46:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021e4e:	74 09                	je     c0021e59 <SoundDevice::getFreeChannelNum()+0x19>
c0021e50:	40                   	inc    eax
c0021e51:	83 f8 20             	cmp    eax,0x20
c0021e54:	75 f0                	jne    c0021e46 <SoundDevice::getFreeChannelNum()+0x6>
c0021e56:	83 c8 ff             	or     eax,0xffffffff
c0021e59:	c3                   	ret    

c0021e5a <SoundDevice::addChannel(SoundChannel*)>:
c0021e5a:	56                   	push   esi
c0021e5b:	53                   	push   ebx
c0021e5c:	51                   	push   ecx
c0021e5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e65:	53                   	push   ebx
c0021e66:	e8 d5 ff ff ff       	call   c0021e40 <SoundDevice::getFreeChannelNum()>
c0021e6b:	5a                   	pop    edx
c0021e6c:	83 f8 ff             	cmp    eax,0xffffffff
c0021e6f:	74 51                	je     c0021ec2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e71:	85 f6                	test   esi,esi
c0021e73:	74 4d                	je     c0021ec2 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e75:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021e7c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021e83:	75 30                	jne    c0021eb5 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021e85:	83 ec 0c             	sub    esp,0xc
c0021e88:	56                   	push   esi
c0021e89:	e8 52 fc ff ff       	call   c0021ae0 <SoundChannel::getSampleRate()>
c0021e8e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021e94:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e97:	e8 4c fc ff ff       	call   c0021ae8 <SoundChannel::getBits()>
c0021e9c:	83 c4 0c             	add    esp,0xc
c0021e9f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021ea5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021ea7:	50                   	push   eax
c0021ea8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021eae:	53                   	push   ebx
c0021eaf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021eb2:	83 c4 10             	add    esp,0x10
c0021eb5:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021ebb:	b8 01 00 00 00       	mov    eax,0x1
c0021ec0:	eb 03                	jmp    c0021ec5 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021ec2:	83 c8 ff             	or     eax,0xffffffff
c0021ec5:	5a                   	pop    edx
c0021ec6:	5b                   	pop    ebx
c0021ec7:	5e                   	pop    esi
c0021ec8:	c3                   	ret    
c0021ec9:	90                   	nop

c0021eca <SoundDevice::removeChannel(int)>:
c0021eca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ed2:	83 fa 1f             	cmp    edx,0x1f
c0021ed5:	77 23                	ja     c0021efa <SoundDevice::removeChannel(int)+0x30>
c0021ed7:	8d 14 90             	lea    edx,[eax+edx*4]
c0021eda:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021ee1:	74 17                	je     c0021efa <SoundDevice::removeChannel(int)+0x30>
c0021ee3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021eed:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021ef3:	75 05                	jne    c0021efa <SoundDevice::removeChannel(int)+0x30>
c0021ef5:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ef7:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021efa:	c3                   	ret    
c0021efb:	90                   	nop

c0021efc <SoundDevice::floatTo16(float*, short*, int)>:
c0021efc:	57                   	push   edi
c0021efd:	56                   	push   esi
c0021efe:	53                   	push   ebx
c0021eff:	31 db                	xor    ebx,ebx
c0021f01:	83 ec 10             	sub    esp,0x10
c0021f04:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021f08:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021f0c:	0f 8d d0 00 00 00    	jge    c0021fe2 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021f12:	83 ec 0c             	sub    esp,0xc
c0021f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f19:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021f1c:	e8 1e 62 00 00       	call   c002813f <__extendsfdf2>
c0021f21:	83 c4 10             	add    esp,0x10
c0021f24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f2c:	68 00 00 f0 3f       	push   0x3ff00000
c0021f31:	6a 00                	push   0x0
c0021f33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f3b:	e8 8b 51 00 00       	call   c00270cb <__adddf3>
c0021f40:	83 c4 10             	add    esp,0x10
c0021f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f4b:	68 00 00 e0 3f       	push   0x3fe00000
c0021f50:	6a 00                	push   0x0
c0021f52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f5a:	e8 e9 57 00 00       	call   c0027748 <__muldf3>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f6a:	68 c0 ff df 40       	push   0x40dfffc0
c0021f6f:	6a 00                	push   0x0
c0021f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f79:	e8 ca 57 00 00       	call   c0027748 <__muldf3>
c0021f7e:	59                   	pop    ecx
c0021f7f:	5f                   	pop    edi
c0021f80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021f84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021f88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f90:	e8 86 60 00 00       	call   c002801b <__truncdfsf2>
c0021f95:	5a                   	pop    edx
c0021f96:	89 c7                	mov    edi,eax
c0021f98:	59                   	pop    ecx
c0021f99:	68 00 fe ff 46       	push   0x46fffe00
c0021f9e:	50                   	push   eax
c0021f9f:	e8 21 51 00 00       	call   c00270c5 <__gesf2>
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	85 c0                	test   eax,eax
c0021fa9:	78 08                	js     c0021fb3 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0021fab:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0021fb1:	eb 29                	jmp    c0021fdc <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fb3:	50                   	push   eax
c0021fb4:	50                   	push   eax
c0021fb5:	6a 00                	push   0x0
c0021fb7:	57                   	push   edi
c0021fb8:	e8 0c 51 00 00       	call   c00270c9 <__lesf2>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	85 c0                	test   eax,eax
c0021fc2:	7f 08                	jg     c0021fcc <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0021fc4:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0021fca:	eb 10                	jmp    c0021fdc <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	57                   	push   edi
c0021fd0:	e8 07 62 00 00       	call   c00281dc <lrintf>
c0021fd5:	83 c4 10             	add    esp,0x10
c0021fd8:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0021fdc:	43                   	inc    ebx
c0021fdd:	e9 26 ff ff ff       	jmp    c0021f08 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0021fe2:	83 c4 10             	add    esp,0x10
c0021fe5:	5b                   	pop    ebx
c0021fe6:	5e                   	pop    esi
c0021fe7:	5f                   	pop    edi
c0021fe8:	c3                   	ret    
c0021fe9:	90                   	nop

c0021fea <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021fea:	57                   	push   edi
c0021feb:	56                   	push   esi
c0021fec:	53                   	push   ebx
c0021fed:	31 db                	xor    ebx,ebx
c0021fef:	83 ec 10             	sub    esp,0x10
c0021ff2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021ff6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021ffa:	0f 8d cb 00 00 00    	jge    c00220cb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022000:	83 ec 0c             	sub    esp,0xc
c0022003:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022007:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002200a:	e8 30 61 00 00       	call   c002813f <__extendsfdf2>
c002200f:	83 c4 10             	add    esp,0x10
c0022012:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022016:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002201a:	68 00 00 f0 3f       	push   0x3ff00000
c002201f:	6a 00                	push   0x0
c0022021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022025:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022029:	e8 9d 50 00 00       	call   c00270cb <__adddf3>
c002202e:	83 c4 10             	add    esp,0x10
c0022031:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022035:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022039:	68 00 00 e0 3f       	push   0x3fe00000
c002203e:	6a 00                	push   0x0
c0022040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022048:	e8 fb 56 00 00       	call   c0027748 <__muldf3>
c002204d:	83 c4 10             	add    esp,0x10
c0022050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022054:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022058:	68 00 00 60 40       	push   0x40600000
c002205d:	6a 00                	push   0x0
c002205f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022067:	e8 dc 56 00 00       	call   c0027748 <__muldf3>
c002206c:	59                   	pop    ecx
c002206d:	5f                   	pop    edi
c002206e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022072:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022076:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002207a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002207e:	e8 98 5f 00 00       	call   c002801b <__truncdfsf2>
c0022083:	5a                   	pop    edx
c0022084:	89 c7                	mov    edi,eax
c0022086:	59                   	pop    ecx
c0022087:	68 00 00 fe 42       	push   0x42fe0000
c002208c:	50                   	push   eax
c002208d:	e8 33 50 00 00       	call   c00270c5 <__gesf2>
c0022092:	83 c4 10             	add    esp,0x10
c0022095:	85 c0                	test   eax,eax
c0022097:	78 06                	js     c002209f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022099:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002209d:	eb 26                	jmp    c00220c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002209f:	50                   	push   eax
c00220a0:	50                   	push   eax
c00220a1:	6a 00                	push   0x0
c00220a3:	57                   	push   edi
c00220a4:	e8 20 50 00 00       	call   c00270c9 <__lesf2>
c00220a9:	83 c4 10             	add    esp,0x10
c00220ac:	85 c0                	test   eax,eax
c00220ae:	7f 06                	jg     c00220b6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00220b0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00220b4:	eb 0f                	jmp    c00220c5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	57                   	push   edi
c00220ba:	e8 1d 61 00 00       	call   c00281dc <lrintf>
c00220bf:	83 c4 10             	add    esp,0x10
c00220c2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00220c5:	43                   	inc    ebx
c00220c6:	e9 2b ff ff ff       	jmp    c0021ff6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00220cb:	83 c4 10             	add    esp,0x10
c00220ce:	5b                   	pop    ebx
c00220cf:	5e                   	pop    esi
c00220d0:	5f                   	pop    edi
c00220d1:	c3                   	ret    

c00220d2 <SoundDevice::getAudio(int, float*, float*)>:
c00220d2:	55                   	push   ebp
c00220d3:	31 ed                	xor    ebp,ebp
c00220d5:	57                   	push   edi
c00220d6:	56                   	push   esi
c00220d7:	31 f6                	xor    esi,esi
c00220d9:	53                   	push   ebx
c00220da:	83 ec 20             	sub    esp,0x20
c00220dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00220e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00220e5:	c1 e0 02             	shl    eax,0x2
c00220e8:	50                   	push   eax
c00220e9:	6a 00                	push   0x0
c00220eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00220ef:	e8 5c e6 fd ff       	call   c0000750 <memset>
c00220f4:	83 c4 10             	add    esp,0x10
c00220f7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220ff:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022106:	85 c9                	test   ecx,ecx
c0022108:	74 52                	je     c002215c <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002210a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002210e:	99                   	cdq    
c002210f:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022115:	50                   	push   eax
c0022116:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002211c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022120:	51                   	push   ecx
c0022121:	e8 da f9 ff ff       	call   c0021b00 <SoundChannel::unbuffer(float*, int, int)>
c0022126:	31 d2                	xor    edx,edx
c0022128:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002212c:	83 c4 10             	add    esp,0x10
c002212f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022133:	7d 1e                	jge    c0022153 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022135:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022139:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002213d:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022140:	89 cf                	mov    edi,ecx
c0022142:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022148:	0f af ca             	imul   ecx,edx
c002214b:	42                   	inc    edx
c002214c:	01 e9                	add    ecx,ebp
c002214e:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022151:	eb dc                	jmp    c002212f <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022153:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022157:	45                   	inc    ebp
c0022158:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002215c:	46                   	inc    esi
c002215d:	83 fe 20             	cmp    esi,0x20
c0022160:	75 9d                	jne    c00220ff <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022166:	83 c4 1c             	add    esp,0x1c
c0022169:	5b                   	pop    ebx
c002216a:	5e                   	pop    esi
c002216b:	5f                   	pop    edi
c002216c:	5d                   	pop    ebp
c002216d:	c3                   	ret    

c002216e <PCI::open(int, int, void*)>:
c002216e:	83 ec 18             	sub    esp,0x18
c0022171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022175:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022179:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002217f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022181:	50                   	push   eax
c0022182:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022185:	31 c0                	xor    eax,eax
c0022187:	83 c4 1c             	add    esp,0x1c
c002218a:	c3                   	ret    
c002218b:	90                   	nop

c002218c <PCI::close(int, int, void*)>:
c002218c:	31 c0                	xor    eax,eax
c002218e:	c3                   	ret    
c002218f:	90                   	nop

c0022190 <PCI::PCI()>:
c0022190:	83 ec 0c             	sub    esp,0xc
c0022193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022197:	83 ec 08             	sub    esp,0x8
c002219a:	68 d0 bb 02 c0       	push   0xc002bbd0
c002219f:	50                   	push   eax
c00221a0:	e8 07 10 ff ff       	call   c00131ac <Bus::Bus(char const*)>
c00221a5:	83 c4 10             	add    esp,0x10
c00221a8:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c00221ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b1:	89 10                	mov    DWORD PTR [eax],edx
c00221b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00221c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c5:	a3 e4 18 03 c0       	mov    ds:0xc00318e4,eax
c00221ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ce:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221d4:	0f b6 d0             	movzx  edx,al
c00221d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221db:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00221e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221ec:	0f b6 d0             	movzx  edx,al
c00221ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00221f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022202:	8d 50 01             	lea    edx,[eax+0x1]
c0022205:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022209:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002220f:	0f b6 d0             	movzx  edx,al
c0022212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022216:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002221a:	83 c9 c0             	or     ecx,0xffffffc0
c002221d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022221:	90                   	nop
c0022222:	83 c4 0c             	add    esp,0xc
c0022225:	c3                   	ret    

c0022226 <PCI::readBAR8(unsigned int, int)>:
c0022226:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002222a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002222e:	f6 c2 01             	test   dl,0x1
c0022231:	74 07                	je     c002223a <PCI::readBAR8(unsigned int, int)+0x14>
c0022233:	83 e2 fc             	and    edx,0xfffffffc
c0022236:	01 c2                	add    edx,eax
c0022238:	ec                   	in     al,dx
c0022239:	c3                   	ret    
c002223a:	83 e2 f0             	and    edx,0xfffffff0
c002223d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022240:	c3                   	ret    
c0022241:	90                   	nop

c0022242 <PCI::readBAR16(unsigned int, int)>:
c0022242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022246:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002224a:	f6 c2 01             	test   dl,0x1
c002224d:	74 08                	je     c0022257 <PCI::readBAR16(unsigned int, int)+0x15>
c002224f:	83 e2 fc             	and    edx,0xfffffffc
c0022252:	01 c2                	add    edx,eax
c0022254:	66 ed                	in     ax,dx
c0022256:	c3                   	ret    
c0022257:	83 e2 f0             	and    edx,0xfffffff0
c002225a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002225e:	c3                   	ret    
c002225f:	90                   	nop

c0022260 <PCI::readBAR32(unsigned int, int)>:
c0022260:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022268:	f6 c2 01             	test   dl,0x1
c002226b:	74 07                	je     c0022274 <PCI::readBAR32(unsigned int, int)+0x14>
c002226d:	83 e2 fc             	and    edx,0xfffffffc
c0022270:	01 c2                	add    edx,eax
c0022272:	ed                   	in     eax,dx
c0022273:	c3                   	ret    
c0022274:	83 e2 f0             	and    edx,0xfffffff0
c0022277:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002227a:	c3                   	ret    
c002227b:	90                   	nop

c002227c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002227c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022284:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022288:	f6 c2 01             	test   dl,0x1
c002228b:	74 07                	je     c0022294 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002228d:	83 e2 fc             	and    edx,0xfffffffc
c0022290:	01 ca                	add    edx,ecx
c0022292:	ee                   	out    dx,al
c0022293:	c3                   	ret    
c0022294:	83 e2 f0             	and    edx,0xfffffff0
c0022297:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002229a:	c3                   	ret    
c002229b:	90                   	nop

c002229c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002229c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222a8:	f6 c2 01             	test   dl,0x1
c00222ab:	74 08                	je     c00222b5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00222ad:	83 e2 fc             	and    edx,0xfffffffc
c00222b0:	01 ca                	add    edx,ecx
c00222b2:	66 ef                	out    dx,ax
c00222b4:	c3                   	ret    
c00222b5:	83 e2 f0             	and    edx,0xfffffff0
c00222b8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00222bc:	c3                   	ret    
c00222bd:	90                   	nop

c00222be <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00222be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222ca:	f6 c2 01             	test   dl,0x1
c00222cd:	74 07                	je     c00222d6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00222cf:	83 e2 fc             	and    edx,0xfffffffc
c00222d2:	01 ca                	add    edx,ecx
c00222d4:	ef                   	out    dx,eax
c00222d5:	c3                   	ret    
c00222d6:	83 e2 f0             	and    edx,0xfffffff0
c00222d9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00222dc:	c3                   	ret    
c00222dd:	90                   	nop

c00222de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00222de:	55                   	push   ebp
c00222df:	57                   	push   edi
c00222e0:	56                   	push   esi
c00222e1:	53                   	push   ebx
c00222e2:	83 ec 0c             	sub    esp,0xc
c00222e5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00222e9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00222ed:	89 f0                	mov    eax,esi
c00222ef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00222f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00222f7:	3c 07                	cmp    al,0x7
c00222f9:	76 10                	jbe    c002230b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00222fb:	83 ec 0c             	sub    esp,0xc
c00222fe:	68 d8 bb 02 c0       	push   0xc002bbd8
c0022303:	e8 63 79 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	80 fb 0f             	cmp    bl,0xf
c002230e:	76 10                	jbe    c0022320 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022310:	83 ec 0c             	sub    esp,0xc
c0022313:	68 08 bc 02 c0       	push   0xc002bc08
c0022318:	e8 4e 79 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002231d:	83 c4 10             	add    esp,0x10
c0022320:	8d 04 36             	lea    eax,[esi+esi*1]
c0022323:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022328:	83 c8 f0             	or     eax,0xfffffff0
c002232b:	ee                   	out    dx,al
c002232c:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022331:	89 e8                	mov    eax,ebp
c0022333:	ee                   	out    dx,al
c0022334:	83 c4 0c             	add    esp,0xc
c0022337:	89 d8                	mov    eax,ebx
c0022339:	66 81 e7 fc 00       	and    di,0xfc
c002233e:	5b                   	pop    ebx
c002233f:	c1 e0 08             	shl    eax,0x8
c0022342:	5e                   	pop    esi
c0022343:	09 f8                	or     eax,edi
c0022345:	5f                   	pop    edi
c0022346:	66 0d 00 c0          	or     ax,0xc000
c002234a:	5d                   	pop    ebp
c002234b:	c3                   	ret    

c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002234c:	57                   	push   edi
c002234d:	56                   	push   esi
c002234e:	53                   	push   ebx
c002234f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022357:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002235d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022365:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022369:	83 ff 01             	cmp    edi,0x1
c002236c:	75 3e                	jne    c00223ac <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002236e:	89 de                	mov    esi,ebx
c0022370:	0f b6 c0             	movzx  eax,al
c0022373:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022379:	c1 e0 10             	shl    eax,0x10
c002237c:	0f b6 c9             	movzx  ecx,cl
c002237f:	09 f0                	or     eax,esi
c0022381:	c1 e1 08             	shl    ecx,0x8
c0022384:	0f b6 d2             	movzx  edx,dl
c0022387:	09 c8                	or     eax,ecx
c0022389:	c1 e2 0b             	shl    edx,0xb
c002238c:	09 d0                	or     eax,edx
c002238e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022393:	0d 00 00 00 80       	or     eax,0x80000000
c0022398:	ef                   	out    dx,eax
c0022399:	ba fc 0c 00 00       	mov    edx,0xcfc
c002239e:	ed                   	in     eax,dx
c002239f:	83 e3 02             	and    ebx,0x2
c00223a2:	0f b6 cb             	movzx  ecx,bl
c00223a5:	c1 e1 03             	shl    ecx,0x3
c00223a8:	d3 e8                	shr    eax,cl
c00223aa:	eb 43                	jmp    c00223ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00223ac:	83 ff 02             	cmp    edi,0x2
c00223af:	75 2c                	jne    c00223dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00223b1:	83 ec 0c             	sub    esp,0xc
c00223b4:	0f b6 c9             	movzx  ecx,cl
c00223b7:	0f b6 d2             	movzx  edx,dl
c00223ba:	0f b6 fb             	movzx  edi,bl
c00223bd:	0f b6 c0             	movzx  eax,al
c00223c0:	57                   	push   edi
c00223c1:	51                   	push   ecx
c00223c2:	52                   	push   edx
c00223c3:	50                   	push   eax
c00223c4:	56                   	push   esi
c00223c5:	e8 14 ff ff ff       	call   c00222de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223ca:	89 c2                	mov    edx,eax
c00223cc:	ed                   	in     eax,dx
c00223cd:	83 e3 02             	and    ebx,0x2
c00223d0:	83 c4 20             	add    esp,0x20
c00223d3:	0f b6 cb             	movzx  ecx,bl
c00223d6:	c1 e1 03             	shl    ecx,0x3
c00223d9:	d3 e8                	shr    eax,cl
c00223db:	eb 12                	jmp    c00223ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00223dd:	83 ec 0c             	sub    esp,0xc
c00223e0:	68 38 bc 02 c0       	push   0xc002bc38
c00223e5:	e8 81 78 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00223ea:	83 c4 10             	add    esp,0x10
c00223ed:	31 c0                	xor    eax,eax
c00223ef:	5b                   	pop    ebx
c00223f0:	5e                   	pop    esi
c00223f1:	5f                   	pop    edi
c00223f2:	c3                   	ret    
c00223f3:	90                   	nop

c00223f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00223f4:	83 ec 18             	sub    esp,0x18
c00223f7:	6a 00                	push   0x0
c00223f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223fe:	50                   	push   eax
c00223ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022404:	50                   	push   eax
c0022405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002240a:	50                   	push   eax
c002240b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002240f:	e8 38 ff ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022414:	83 c4 2c             	add    esp,0x2c
c0022417:	c3                   	ret    

c0022418 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022418:	83 ec 18             	sub    esp,0x18
c002241b:	6a 0e                	push   0xe
c002241d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022422:	50                   	push   eax
c0022423:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022428:	50                   	push   eax
c0022429:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002242e:	50                   	push   eax
c002242f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022433:	e8 14 ff ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022438:	83 c4 2c             	add    esp,0x2c
c002243b:	0f b6 c0             	movzx  eax,al
c002243e:	c3                   	ret    
c002243f:	90                   	nop

c0022440 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022440:	55                   	push   ebp
c0022441:	57                   	push   edi
c0022442:	56                   	push   esi
c0022443:	53                   	push   ebx
c0022444:	83 ec 18             	sub    esp,0x18
c0022447:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002244c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022451:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022456:	6a 0a                	push   0xa
c0022458:	56                   	push   esi
c0022459:	55                   	push   ebp
c002245a:	57                   	push   edi
c002245b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002245f:	e8 e8 fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022464:	83 c4 14             	add    esp,0x14
c0022467:	89 c3                	mov    ebx,eax
c0022469:	6a 0a                	push   0xa
c002246b:	0f b6 db             	movzx  ebx,bl
c002246e:	56                   	push   esi
c002246f:	55                   	push   ebp
c0022470:	57                   	push   edi
c0022471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022475:	e8 d2 fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002247a:	83 c4 2c             	add    esp,0x2c
c002247d:	25 00 ff 00 00       	and    eax,0xff00
c0022482:	09 d8                	or     eax,ebx
c0022484:	5b                   	pop    ebx
c0022485:	5e                   	pop    esi
c0022486:	5f                   	pop    edi
c0022487:	5d                   	pop    ebp
c0022488:	c3                   	ret    
c0022489:	90                   	nop

c002248a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002248a:	83 ec 18             	sub    esp,0x18
c002248d:	6a 08                	push   0x8
c002248f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022494:	50                   	push   eax
c0022495:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002249a:	50                   	push   eax
c002249b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224a0:	50                   	push   eax
c00224a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224a5:	e8 a2 fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224aa:	83 c4 2c             	add    esp,0x2c
c00224ad:	0f b6 c4             	movzx  eax,ah
c00224b0:	c3                   	ret    
c00224b1:	90                   	nop

c00224b2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00224b2:	83 ec 18             	sub    esp,0x18
c00224b5:	6a 08                	push   0x8
c00224b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224bc:	50                   	push   eax
c00224bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c2:	50                   	push   eax
c00224c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c8:	50                   	push   eax
c00224c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224cd:	e8 7a fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224d2:	83 c4 2c             	add    esp,0x2c
c00224d5:	c3                   	ret    

c00224d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00224d6:	83 ec 18             	sub    esp,0x18
c00224d9:	6a 3c                	push   0x3c
c00224db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e0:	50                   	push   eax
c00224e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e6:	50                   	push   eax
c00224e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ec:	50                   	push   eax
c00224ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224f1:	e8 56 fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224f6:	83 c4 2c             	add    esp,0x2c
c00224f9:	c3                   	ret    

c00224fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00224fa:	83 ec 18             	sub    esp,0x18
c00224fd:	6a 18                	push   0x18
c00224ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022504:	50                   	push   eax
c0022505:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002250a:	50                   	push   eax
c002250b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022510:	50                   	push   eax
c0022511:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022515:	e8 32 fe ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002251a:	83 c4 2c             	add    esp,0x2c
c002251d:	0f b6 c4             	movzx  eax,ah
c0022520:	c3                   	ret    
c0022521:	90                   	nop

c0022522 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022522:	55                   	push   ebp
c0022523:	57                   	push   edi
c0022524:	56                   	push   esi
c0022525:	53                   	push   ebx
c0022526:	83 ec 28             	sub    esp,0x28
c0022529:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002252d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022532:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022537:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002253c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022543:	8d 43 12             	lea    eax,[ebx+0x12]
c0022546:	83 c3 10             	add    ebx,0x10
c0022549:	0f b6 c0             	movzx  eax,al
c002254c:	0f b6 db             	movzx  ebx,bl
c002254f:	50                   	push   eax
c0022550:	51                   	push   ecx
c0022551:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022555:	57                   	push   edi
c0022556:	55                   	push   ebp
c0022557:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002255b:	e8 ec fd ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022560:	83 c4 14             	add    esp,0x14
c0022563:	89 c6                	mov    esi,eax
c0022565:	53                   	push   ebx
c0022566:	c1 e6 10             	shl    esi,0x10
c0022569:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002256d:	51                   	push   ecx
c002256e:	57                   	push   edi
c002256f:	55                   	push   ebp
c0022570:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022574:	e8 d3 fd ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022579:	83 c4 3c             	add    esp,0x3c
c002257c:	0f b7 c0             	movzx  eax,ax
c002257f:	5b                   	pop    ebx
c0022580:	09 f0                	or     eax,esi
c0022582:	5e                   	pop    esi
c0022583:	5f                   	pop    edi
c0022584:	5d                   	pop    ebp
c0022585:	c3                   	ret    

c0022586 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022586:	55                   	push   ebp
c0022587:	57                   	push   edi
c0022588:	56                   	push   esi
c0022589:	53                   	push   ebx
c002258a:	83 ec 0c             	sub    esp,0xc
c002258d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022591:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022595:	89 f5                	mov    ebp,esi
c0022597:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002259d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00225a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00225a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225ad:	83 f9 01             	cmp    ecx,0x1
c00225b0:	75 5d                	jne    c002260f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00225b2:	0f b6 c8             	movzx  ecx,al
c00225b5:	0f b6 d2             	movzx  edx,dl
c00225b8:	c1 e1 10             	shl    ecx,0x10
c00225bb:	c1 e2 0b             	shl    edx,0xb
c00225be:	89 f0                	mov    eax,esi
c00225c0:	25 fc 00 00 00       	and    eax,0xfc
c00225c5:	09 c1                	or     ecx,eax
c00225c7:	89 e8                	mov    eax,ebp
c00225c9:	0f b6 c0             	movzx  eax,al
c00225cc:	c1 e0 08             	shl    eax,0x8
c00225cf:	09 c1                	or     ecx,eax
c00225d1:	09 d1                	or     ecx,edx
c00225d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225d8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00225de:	89 c8                	mov    eax,ecx
c00225e0:	ef                   	out    dx,eax
c00225e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225e6:	ed                   	in     eax,dx
c00225e7:	0f b7 db             	movzx  ebx,bx
c00225ea:	83 e6 02             	and    esi,0x2
c00225ed:	74 0a                	je     c00225f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00225ef:	0f b7 d0             	movzx  edx,ax
c00225f2:	c1 e3 10             	shl    ebx,0x10
c00225f5:	09 d3                	or     ebx,edx
c00225f7:	eb 05                	jmp    c00225fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00225f9:	66 31 c0             	xor    ax,ax
c00225fc:	09 c3                	or     ebx,eax
c00225fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022603:	89 c8                	mov    eax,ecx
c0022605:	ef                   	out    dx,eax
c0022606:	ba fc 0c 00 00       	mov    edx,0xcfc
c002260b:	89 d8                	mov    eax,ebx
c002260d:	eb 41                	jmp    c0022650 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002260f:	83 f9 02             	cmp    ecx,0x2
c0022612:	75 45                	jne    c0022659 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022614:	83 ec 0c             	sub    esp,0xc
c0022617:	0f b6 d2             	movzx  edx,dl
c002261a:	89 f1                	mov    ecx,esi
c002261c:	0f b6 c0             	movzx  eax,al
c002261f:	0f b6 f1             	movzx  esi,cl
c0022622:	89 e9                	mov    ecx,ebp
c0022624:	56                   	push   esi
c0022625:	0f b6 c9             	movzx  ecx,cl
c0022628:	51                   	push   ecx
c0022629:	52                   	push   edx
c002262a:	50                   	push   eax
c002262b:	57                   	push   edi
c002262c:	e8 ad fc ff ff       	call   c00222de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022631:	89 c2                	mov    edx,eax
c0022633:	ed                   	in     eax,dx
c0022634:	83 c4 20             	add    esp,0x20
c0022637:	0f b7 db             	movzx  ebx,bx
c002263a:	f6 c2 02             	test   dl,0x2
c002263d:	74 0c                	je     c002264b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002263f:	0f b7 c8             	movzx  ecx,ax
c0022642:	89 d8                	mov    eax,ebx
c0022644:	c1 e0 10             	shl    eax,0x10
c0022647:	09 c8                	or     eax,ecx
c0022649:	eb 05                	jmp    c0022650 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002264b:	66 31 c0             	xor    ax,ax
c002264e:	09 d8                	or     eax,ebx
c0022650:	ef                   	out    dx,eax
c0022651:	83 c4 0c             	add    esp,0xc
c0022654:	5b                   	pop    ebx
c0022655:	5e                   	pop    esi
c0022656:	5f                   	pop    edi
c0022657:	5d                   	pop    ebp
c0022658:	c3                   	ret    
c0022659:	c7 44 24 20 38 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc38
c0022661:	83 c4 0c             	add    esp,0xc
c0022664:	5b                   	pop    ebx
c0022665:	5e                   	pop    esi
c0022666:	5f                   	pop    edi
c0022667:	5d                   	pop    ebp
c0022668:	e9 fe 75 ff ff       	jmp    c0019c6b <Krnl::panic(char const*)>
c002266d:	90                   	nop

c002266e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002266e:	55                   	push   ebp
c002266f:	57                   	push   edi
c0022670:	56                   	push   esi
c0022671:	53                   	push   ebx
c0022672:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022678:	80 3d f0 18 03 c0 00 	cmp    BYTE PTR ds:0xc00318f0,0x0
c002267f:	0f 85 84 00 00 00    	jne    c0022709 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022685:	83 ec 0c             	sub    esp,0xc
c0022688:	68 14 01 00 00       	push   0x114
c002268d:	e8 0a cf fe ff       	call   c000f59c <malloc>
c0022692:	83 c4 0c             	add    esp,0xc
c0022695:	89 c3                	mov    ebx,eax
c0022697:	ff 35 f0 0a 03 c0    	push   DWORD PTR ds:0xc0030af0
c002269d:	68 3e bc 02 c0       	push   0xc002bc3e
c00226a2:	50                   	push   eax
c00226a3:	e8 c2 03 ff ff       	call   c0012a6a <File::File(char const*, Process*)>
c00226a8:	5a                   	pop    edx
c00226a9:	59                   	pop    ecx
c00226aa:	6a 01                	push   0x1
c00226ac:	53                   	push   ebx
c00226ad:	e8 1c 04 ff ff       	call   c0012ace <File::open(FileOpenMode)>
c00226b2:	83 c4 0c             	add    esp,0xc
c00226b5:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00226b9:	50                   	push   eax
c00226ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c00226be:	50                   	push   eax
c00226bf:	53                   	push   ebx
c00226c0:	e8 b5 06 ff ff       	call   c0012d7a <File::stat(unsigned long long*, bool*)>
c00226c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226c9:	40                   	inc    eax
c00226ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00226cd:	e8 ca ce fe ff       	call   c000f59c <malloc>
c00226d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226d6:	a3 ec 18 03 c0       	mov    ds:0xc00318ec,eax
c00226db:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00226df:	5e                   	pop    esi
c00226e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226e2:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00226e6:	51                   	push   ecx
c00226e7:	50                   	push   eax
c00226e8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00226f0:	53                   	push   ebx
c00226f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00226f4:	83 c4 14             	add    esp,0x14
c00226f7:	53                   	push   ebx
c00226f8:	e8 2f 04 ff ff       	call   c0012b2c <File::close()>
c00226fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022701:	83 c4 10             	add    esp,0x10
c0022704:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c0022709:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c002270e:	8b 15 ec 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318ec
c0022714:	89 04 24             	mov    DWORD PTR [esp],eax
c0022717:	31 ff                	xor    edi,edi
c0022719:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022721:	31 f6                	xor    esi,esi
c0022723:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022728:	31 db                	xor    ebx,ebx
c002272a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022732:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022737:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002273e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022742:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022749:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002274d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022750:	0f 8e 6b 01 00 00    	jle    c00228c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022756:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022759:	d4 40                	aam    0x40
c002275b:	d5 39                	aad    0x39
c002275d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022761:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022765:	d4 40                	aam    0x40
c0022767:	d5 39                	aad    0x39
c0022769:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002276d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022771:	d4 40                	aam    0x40
c0022773:	d5 39                	aad    0x39
c0022775:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022779:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002277d:	d4 40                	aam    0x40
c002277f:	d5 39                	aad    0x39
c0022781:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022785:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022789:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002278d:	3c 56                	cmp    al,0x56
c002278f:	74 45                	je     c00227d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022791:	d4 40                	aam    0x40
c0022793:	d5 39                	aad    0x39
c0022795:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022798:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002279c:	0f b6 c9             	movzx  ecx,cl
c002279f:	c1 e1 04             	shl    ecx,0x4
c00227a2:	d4 40                	aam    0x40
c00227a4:	d5 39                	aad    0x39
c00227a6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227a9:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00227ad:	0f b6 db             	movzx  ebx,bl
c00227b0:	09 cb                	or     ebx,ecx
c00227b2:	c1 e3 04             	shl    ebx,0x4
c00227b5:	d4 40                	aam    0x40
c00227b7:	d5 39                	aad    0x39
c00227b9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00227bc:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00227c0:	0f b6 c9             	movzx  ecx,cl
c00227c3:	09 cb                	or     ebx,ecx
c00227c5:	c1 e3 04             	shl    ebx,0x4
c00227c8:	89 d9                	mov    ecx,ebx
c00227ca:	d4 40                	aam    0x40
c00227cc:	d5 39                	aad    0x39
c00227ce:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227d1:	0f b6 db             	movzx  ebx,bl
c00227d4:	09 cb                	or     ebx,ecx
c00227d6:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00227da:	80 f9 44             	cmp    cl,0x44
c00227dd:	74 47                	je     c0022826 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00227df:	88 c8                	mov    al,cl
c00227e1:	d4 40                	aam    0x40
c00227e3:	d5 39                	aad    0x39
c00227e5:	83 e8 30             	sub    eax,0x30
c00227e8:	0f b6 e8             	movzx  ebp,al
c00227eb:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00227ef:	c1 e5 04             	shl    ebp,0x4
c00227f2:	d4 40                	aam    0x40
c00227f4:	d5 39                	aad    0x39
c00227f6:	83 e8 30             	sub    eax,0x30
c00227f9:	0f b6 f0             	movzx  esi,al
c00227fc:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022800:	09 ee                	or     esi,ebp
c0022802:	c1 e6 04             	shl    esi,0x4
c0022805:	d4 40                	aam    0x40
c0022807:	d5 39                	aad    0x39
c0022809:	83 e8 30             	sub    eax,0x30
c002280c:	0f b6 e8             	movzx  ebp,al
c002280f:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022813:	09 ee                	or     esi,ebp
c0022815:	c1 e6 04             	shl    esi,0x4
c0022818:	89 f5                	mov    ebp,esi
c002281a:	d4 40                	aam    0x40
c002281c:	d5 39                	aad    0x39
c002281e:	83 e8 30             	sub    eax,0x30
c0022821:	0f b6 f0             	movzx  esi,al
c0022824:	09 ee                	or     esi,ebp
c0022826:	83 c7 10             	add    edi,0x10
c0022829:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002282d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022830:	3c 0a                	cmp    al,0xa
c0022832:	74 09                	je     c002283d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022834:	45                   	inc    ebp
c0022835:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022838:	75 16                	jne    c0022850 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c002283a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002283d:	3c 0a                	cmp    al,0xa
c002283f:	0f 94 c0             	sete   al
c0022842:	0f b6 c0             	movzx  eax,al
c0022845:	01 c7                	add    edi,eax
c0022847:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002284c:	75 0c                	jne    c002285a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c002284e:	eb 15                	jmp    c0022865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022850:	47                   	inc    edi
c0022851:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022854:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022858:	eb d3                	jmp    c002282d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c002285a:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002285f:	0f 85 e8 fe ff ff    	jne    c002274d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022865:	80 f9 44             	cmp    cl,0x44
c0022868:	74 0b                	je     c0022875 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c002286a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002286f:	0f 85 d8 fe ff ff    	jne    c002274d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022875:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022879:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002287d:	c1 e1 04             	shl    ecx,0x4
c0022880:	83 e8 30             	sub    eax,0x30
c0022883:	09 c8                	or     eax,ecx
c0022885:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022889:	0f 85 be fe ff ff    	jne    c002274d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002288f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022893:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022897:	c1 e1 04             	shl    ecx,0x4
c002289a:	83 e8 30             	sub    eax,0x30
c002289d:	09 c8                	or     eax,ecx
c002289f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00228a3:	0f 85 a4 fe ff ff    	jne    c002274d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228a9:	50                   	push   eax
c00228aa:	50                   	push   eax
c00228ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228af:	50                   	push   eax
c00228b0:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00228b7:	e8 50 df fd ff       	call   c000080c <strcpy>
c00228bc:	83 c4 10             	add    esp,0x10
c00228bf:	eb 15                	jmp    c00228d6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00228c1:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228c8:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00228d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00228d6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228dd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00228e3:	5b                   	pop    ebx
c00228e4:	5e                   	pop    esi
c00228e5:	5f                   	pop    edi
c00228e6:	5d                   	pop    ebp
c00228e7:	c3                   	ret    

c00228e8 <PCI::checkBus(unsigned char)>:
c00228e8:	56                   	push   esi
c00228e9:	53                   	push   ebx
c00228ea:	31 db                	xor    ebx,ebx
c00228ec:	51                   	push   ecx
c00228ed:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00228f2:	52                   	push   edx
c00228f3:	53                   	push   ebx
c00228f4:	43                   	inc    ebx
c00228f5:	56                   	push   esi
c00228f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228fa:	e8 37 03 00 00       	call   c0022c36 <PCI::checkDevice(unsigned char, unsigned char)>
c00228ff:	83 c4 10             	add    esp,0x10
c0022902:	83 fb 20             	cmp    ebx,0x20
c0022905:	75 eb                	jne    c00228f2 <PCI::checkBus(unsigned char)+0xa>
c0022907:	58                   	pop    eax
c0022908:	5b                   	pop    ebx
c0022909:	5e                   	pop    esi
c002290a:	c3                   	ret    
c002290b:	90                   	nop

c002290c <PCI::foundDevice(PCIDeviceInfo)>:
c002290c:	55                   	push   ebp
c002290d:	57                   	push   edi
c002290e:	56                   	push   esi
c002290f:	53                   	push   ebx
c0022910:	83 ec 1c             	sub    esp,0x1c
c0022913:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022917:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002291d:	0f 84 52 01 00 00    	je     c0022a75 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022923:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022927:	66 81 f9 06 04       	cmp    cx,0x406
c002292c:	75 2c                	jne    c002295a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002292e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022933:	50                   	push   eax
c0022934:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022939:	50                   	push   eax
c002293a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002293f:	50                   	push   eax
c0022940:	56                   	push   esi
c0022941:	e8 b4 fb ff ff       	call   c00224fa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022946:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002294a:	0f b6 c0             	movzx  eax,al
c002294d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022951:	83 c4 2c             	add    esp,0x2c
c0022954:	5b                   	pop    ebx
c0022955:	5e                   	pop    esi
c0022956:	5f                   	pop    edi
c0022957:	5d                   	pop    ebp
c0022958:	eb 8e                	jmp    c00228e8 <PCI::checkBus(unsigned char)>
c002295a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002295e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022964:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022968:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002296c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022970:	88 d3                	mov    bl,dl
c0022972:	85 c0                	test   eax,eax
c0022974:	74 33                	je     c00229a9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022976:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022979:	85 d2                	test   edx,edx
c002297b:	74 28                	je     c00229a5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002297d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022983:	31 ef                	xor    edi,ebp
c0022985:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002298b:	75 18                	jne    c00229a5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002298d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022991:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022997:	75 0c                	jne    c00229a5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022999:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002299f:	0f 84 d0 00 00 00    	je     c0022a75 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00229a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00229a7:	eb c9                	jmp    c0022972 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00229a9:	66 81 f9 01 06       	cmp    cx,0x601
c00229ae:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00229b2:	75 19                	jne    c00229cd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00229b4:	83 ec 0c             	sub    esp,0xc
c00229b7:	68 64 01 00 00       	push   0x164
c00229bc:	e8 db cb fe ff       	call   c000f59c <malloc>
c00229c1:	89 c5                	mov    ebp,eax
c00229c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00229c6:	e8 85 0e 00 00       	call   c0023850 <SATABus::SATABus()>
c00229cb:	eb 1e                	jmp    c00229eb <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00229cd:	66 81 f9 01 01       	cmp    cx,0x101
c00229d2:	75 60                	jne    c0022a34 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00229d4:	83 ec 0c             	sub    esp,0xc
c00229d7:	68 70 02 00 00       	push   0x270
c00229dc:	e8 bb cb fe ff       	call   c000f59c <malloc>
c00229e1:	89 c5                	mov    ebp,eax
c00229e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00229e6:	e8 0f 03 00 00       	call   c0022cfa <IDE::IDE()>
c00229eb:	58                   	pop    eax
c00229ec:	5a                   	pop    edx
c00229ed:	55                   	push   ebp
c00229ee:	56                   	push   esi
c00229ef:	e8 50 0f ff ff       	call   c0013944 <Device::addChild(Device*)>
c00229f4:	83 ec 1c             	sub    esp,0x1c
c00229f7:	b9 09 00 00 00       	mov    ecx,0x9
c00229fc:	fc                   	cld    
c00229fd:	89 e7                	mov    edi,esp
c00229ff:	89 de                	mov    esi,ebx
c0022a01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a03:	55                   	push   ebp
c0022a04:	e8 4d 0e ff ff       	call   c0013856 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022a0c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022a10:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022a18:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022a20:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022a28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a2b:	83 c4 4c             	add    esp,0x4c
c0022a2e:	5b                   	pop    ebx
c0022a2f:	5e                   	pop    esi
c0022a30:	5f                   	pop    edi
c0022a31:	5d                   	pop    ebp
c0022a32:	ff e0                	jmp    eax
c0022a34:	83 ec 0c             	sub    esp,0xc
c0022a37:	68 58 01 00 00       	push   0x158
c0022a3c:	e8 5b cb fe ff       	call   c000f59c <malloc>
c0022a41:	89 c5                	mov    ebp,eax
c0022a43:	58                   	pop    eax
c0022a44:	5a                   	pop    edx
c0022a45:	68 57 bc 02 c0       	push   0xc002bc57
c0022a4a:	55                   	push   ebp
c0022a4b:	e8 fe 11 ff ff       	call   c0013c4e <DriverlessDevice::DriverlessDevice(char const*)>
c0022a50:	59                   	pop    ecx
c0022a51:	5f                   	pop    edi
c0022a52:	55                   	push   ebp
c0022a53:	56                   	push   esi
c0022a54:	e8 eb 0e ff ff       	call   c0013944 <Device::addChild(Device*)>
c0022a59:	b9 09 00 00 00       	mov    ecx,0x9
c0022a5e:	fc                   	cld    
c0022a5f:	89 df                	mov    edi,ebx
c0022a61:	89 de                	mov    esi,ebx
c0022a63:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a65:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022a69:	83 c4 2c             	add    esp,0x2c
c0022a6c:	5b                   	pop    ebx
c0022a6d:	5e                   	pop    esi
c0022a6e:	5f                   	pop    edi
c0022a6f:	5d                   	pop    ebp
c0022a70:	e9 e1 0d ff ff       	jmp    c0013856 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a75:	83 c4 1c             	add    esp,0x1c
c0022a78:	5b                   	pop    ebx
c0022a79:	5e                   	pop    esi
c0022a7a:	5f                   	pop    edi
c0022a7b:	5d                   	pop    ebp
c0022a7c:	c3                   	ret    
c0022a7d:	90                   	nop

c0022a7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022a7e:	55                   	push   ebp
c0022a7f:	57                   	push   edi
c0022a80:	56                   	push   esi
c0022a81:	53                   	push   ebx
c0022a82:	83 ec 68             	sub    esp,0x68
c0022a85:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022a89:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022a94:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022a9b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022aa4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022aab:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022ab0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022ab4:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ab9:	6a 0c                	push   0xc
c0022abb:	57                   	push   edi
c0022abc:	53                   	push   ebx
c0022abd:	56                   	push   esi
c0022abe:	55                   	push   ebp
c0022abf:	e8 88 f8 ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac4:	83 c4 20             	add    esp,0x20
c0022ac7:	57                   	push   edi
c0022ac8:	53                   	push   ebx
c0022ac9:	56                   	push   esi
c0022aca:	55                   	push   ebp
c0022acb:	e8 70 f9 ff ff       	call   c0022440 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ad0:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022ad5:	57                   	push   edi
c0022ad6:	53                   	push   ebx
c0022ad7:	56                   	push   esi
c0022ad8:	55                   	push   ebp
c0022ad9:	e8 f8 f9 ff ff       	call   c00224d6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022ade:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022ae2:	83 c4 14             	add    esp,0x14
c0022ae5:	6a 3c                	push   0x3c
c0022ae7:	57                   	push   edi
c0022ae8:	53                   	push   ebx
c0022ae9:	56                   	push   esi
c0022aea:	55                   	push   ebp
c0022aeb:	e8 5c f8 ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af0:	0f b6 c4             	movzx  eax,ah
c0022af3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022af7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022afb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022aff:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0022b04:	83 c4 20             	add    esp,0x20
c0022b07:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022b0d:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022b14:	74 7c                	je     c0022b92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b16:	31 c0                	xor    eax,eax
c0022b18:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0022b1e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b24:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022b2a:	7e 66                	jle    c0022b92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b2c:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022b2f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022b36:	39 cb                	cmp    ebx,ecx
c0022b38:	75 55                	jne    c0022b8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b3a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022b41:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022b45:	75 48                	jne    c0022b8f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b4b:	83 ec 0c             	sub    esp,0xc
c0022b4e:	68 71 bc 02 c0       	push   0xc002bc71
c0022b53:	e8 b3 f9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0022b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b5c:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c0022b62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022b66:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b6c:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022b74:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022b78:	52                   	push   edx
c0022b79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b7d:	53                   	push   ebx
c0022b7e:	68 96 bc 02 c0       	push   0xc002bc96
c0022b83:	e8 83 f9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0022b88:	83 c4 20             	add    esp,0x20
c0022b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022b8f:	40                   	inc    eax
c0022b90:	eb 86                	jmp    c0022b18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022b92:	31 d2                	xor    edx,edx
c0022b94:	83 ec 0c             	sub    esp,0xc
c0022b97:	57                   	push   edi
c0022b98:	53                   	push   ebx
c0022b99:	56                   	push   esi
c0022b9a:	52                   	push   edx
c0022b9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022b9f:	55                   	push   ebp
c0022ba0:	e8 7d f9 ff ff       	call   c0022522 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022ba9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022bad:	42                   	inc    edx
c0022bae:	83 c4 20             	add    esp,0x20
c0022bb1:	83 fa 06             	cmp    edx,0x6
c0022bb4:	75 de                	jne    c0022b94 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022bb6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022bbb:	83 ec 0c             	sub    esp,0xc
c0022bbe:	86 e0                	xchg   al,ah
c0022bc0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022bc5:	6a 02                	push   0x2
c0022bc7:	57                   	push   edi
c0022bc8:	53                   	push   ebx
c0022bc9:	56                   	push   esi
c0022bca:	55                   	push   ebp
c0022bcb:	e8 7c f7 ff ff       	call   c002234c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bd0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022bd5:	83 c4 20             	add    esp,0x20
c0022bd8:	57                   	push   edi
c0022bd9:	53                   	push   ebx
c0022bda:	56                   	push   esi
c0022bdb:	55                   	push   ebp
c0022bdc:	e8 a9 f8 ff ff       	call   c002248a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022be1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022be5:	57                   	push   edi
c0022be6:	53                   	push   ebx
c0022be7:	56                   	push   esi
c0022be8:	55                   	push   ebp
c0022be9:	e8 06 f8 ff ff       	call   c00223f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022bee:	b9 09 00 00 00       	mov    ecx,0x9
c0022bf3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022bf8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022bfc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022c00:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022c04:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022c08:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c0c:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022c10:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022c14:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022c18:	83 ec 0c             	sub    esp,0xc
c0022c1b:	fc                   	cld    
c0022c1c:	89 e7                	mov    edi,esp
c0022c1e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022c22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c24:	55                   	push   ebp
c0022c25:	e8 e2 fc ff ff       	call   c002290c <PCI::foundDevice(PCIDeviceInfo)>
c0022c2a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022c30:	5b                   	pop    ebx
c0022c31:	5e                   	pop    esi
c0022c32:	5f                   	pop    edi
c0022c33:	5d                   	pop    ebp
c0022c34:	c3                   	ret    
c0022c35:	90                   	nop

c0022c36 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022c36:	55                   	push   ebp
c0022c37:	57                   	push   edi
c0022c38:	56                   	push   esi
c0022c39:	53                   	push   ebx
c0022c3a:	83 ec 0c             	sub    esp,0xc
c0022c3d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022c41:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022c46:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c4b:	6a 00                	push   0x0
c0022c4d:	56                   	push   esi
c0022c4e:	57                   	push   edi
c0022c4f:	55                   	push   ebp
c0022c50:	e8 9f f7 ff ff       	call   c00223f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c55:	6a 00                	push   0x0
c0022c57:	56                   	push   esi
c0022c58:	57                   	push   edi
c0022c59:	55                   	push   ebp
c0022c5a:	e8 1f fe ff ff       	call   c0022a7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c5f:	83 c4 20             	add    esp,0x20
c0022c62:	6a 00                	push   0x0
c0022c64:	56                   	push   esi
c0022c65:	57                   	push   edi
c0022c66:	55                   	push   ebp
c0022c67:	e8 ac f7 ff ff       	call   c0022418 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022c6c:	83 c4 10             	add    esp,0x10
c0022c6f:	84 c0                	test   al,al
c0022c71:	79 27                	jns    c0022c9a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022c73:	bb 01 00 00 00       	mov    ebx,0x1
c0022c78:	53                   	push   ebx
c0022c79:	56                   	push   esi
c0022c7a:	57                   	push   edi
c0022c7b:	55                   	push   ebp
c0022c7c:	e8 73 f7 ff ff       	call   c00223f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c81:	83 c4 10             	add    esp,0x10
c0022c84:	66 40                	inc    ax
c0022c86:	74 0c                	je     c0022c94 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022c88:	53                   	push   ebx
c0022c89:	56                   	push   esi
c0022c8a:	57                   	push   edi
c0022c8b:	55                   	push   ebp
c0022c8c:	e8 ed fd ff ff       	call   c0022a7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c91:	83 c4 10             	add    esp,0x10
c0022c94:	43                   	inc    ebx
c0022c95:	83 fb 08             	cmp    ebx,0x8
c0022c98:	75 de                	jne    c0022c78 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022c9a:	83 c4 0c             	add    esp,0xc
c0022c9d:	5b                   	pop    ebx
c0022c9e:	5e                   	pop    esi
c0022c9f:	5f                   	pop    edi
c0022ca0:	5d                   	pop    ebp
c0022ca1:	c3                   	ret    

c0022ca2 <PCI::detect()>:
c0022ca2:	56                   	push   esi
c0022ca3:	53                   	push   ebx
c0022ca4:	53                   	push   ebx
c0022ca5:	31 db                	xor    ebx,ebx
c0022ca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022cab:	6a 00                	push   0x0
c0022cad:	6a 00                	push   0x0
c0022caf:	6a 00                	push   0x0
c0022cb1:	56                   	push   esi
c0022cb2:	e8 61 f7 ff ff       	call   c0022418 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022cb7:	83 c4 10             	add    esp,0x10
c0022cba:	a8 80                	test   al,0x80
c0022cbc:	75 21                	jne    c0022cdf <PCI::detect()+0x3d>
c0022cbe:	51                   	push   ecx
c0022cbf:	51                   	push   ecx
c0022cc0:	6a 00                	push   0x0
c0022cc2:	56                   	push   esi
c0022cc3:	e8 20 fc ff ff       	call   c00228e8 <PCI::checkBus(unsigned char)>
c0022cc8:	83 c4 10             	add    esp,0x10
c0022ccb:	eb 24                	jmp    c0022cf1 <PCI::detect()+0x4f>
c0022ccd:	52                   	push   edx
c0022cce:	52                   	push   edx
c0022ccf:	53                   	push   ebx
c0022cd0:	43                   	inc    ebx
c0022cd1:	56                   	push   esi
c0022cd2:	e8 11 fc ff ff       	call   c00228e8 <PCI::checkBus(unsigned char)>
c0022cd7:	83 c4 10             	add    esp,0x10
c0022cda:	83 fb 08             	cmp    ebx,0x8
c0022cdd:	74 12                	je     c0022cf1 <PCI::detect()+0x4f>
c0022cdf:	53                   	push   ebx
c0022ce0:	6a 00                	push   0x0
c0022ce2:	6a 00                	push   0x0
c0022ce4:	56                   	push   esi
c0022ce5:	e8 0a f7 ff ff       	call   c00223f4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cea:	83 c4 10             	add    esp,0x10
c0022ced:	66 40                	inc    ax
c0022cef:	74 dc                	je     c0022ccd <PCI::detect()+0x2b>
c0022cf1:	58                   	pop    eax
c0022cf2:	5b                   	pop    ebx
c0022cf3:	5e                   	pop    esi
c0022cf4:	c3                   	ret    
c0022cf5:	90                   	nop

c0022cf6 <IDE::close(int, int, void*)>:
c0022cf6:	83 c8 ff             	or     eax,0xffffffff
c0022cf9:	c3                   	ret    

c0022cfa <IDE::IDE()>:
c0022cfa:	83 ec 0c             	sub    esp,0xc
c0022cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d01:	83 ec 08             	sub    esp,0x8
c0022d04:	68 e0 bc 02 c0       	push   0xc002bce0
c0022d09:	50                   	push   eax
c0022d0a:	e8 e3 0f ff ff       	call   c0013cf2 <HardDiskController::HardDiskController(char const*)>
c0022d0f:	83 c4 10             	add    esp,0x10
c0022d12:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c0022d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1b:	89 10                	mov    DWORD PTR [eax],edx
c0022d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d21:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022d28:	90                   	nop
c0022d29:	83 c4 0c             	add    esp,0xc
c0022d2c:	c3                   	ret    
c0022d2d:	90                   	nop

c0022d2e <IDE::prepareInterrupt(unsigned char)>:
c0022d2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022d33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d37:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022d3f:	c3                   	ret    

c0022d40 <selectDrive(unsigned char, unsigned char)>:
c0022d40:	c3                   	ret    
c0022d41:	90                   	nop

c0022d42 <IDE::getBase(unsigned char)>:
c0022d42:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022d47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d4b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022d53:	c3                   	ret    

c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022d54:	55                   	push   ebp
c0022d55:	57                   	push   edi
c0022d56:	56                   	push   esi
c0022d57:	53                   	push   ebx
c0022d58:	83 ec 1c             	sub    esp,0x1c
c0022d5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d63:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022d66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d6e:	80 f9 03             	cmp    cl,0x3
c0022d71:	77 51                	ja     c0022dc4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022d73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d77:	0f b6 f2             	movzx  esi,dl
c0022d7a:	0f b6 db             	movzx  ebx,bl
c0022d7d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d80:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022d84:	83 ca 80             	or     edx,0xffffff80
c0022d87:	0f b6 d2             	movzx  edx,dl
c0022d8a:	52                   	push   edx
c0022d8b:	6a 0c                	push   0xc
c0022d8d:	56                   	push   esi
c0022d8e:	57                   	push   edi
c0022d8f:	e8 c0 ff ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d94:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d9d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022da1:	ee                   	out    dx,al
c0022da2:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022da7:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022dab:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022daf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022db3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022dbb:	83 c4 2c             	add    esp,0x2c
c0022dbe:	5b                   	pop    ebx
c0022dbf:	5e                   	pop    esi
c0022dc0:	5f                   	pop    edi
c0022dc1:	5d                   	pop    ebp
c0022dc2:	eb 90                	jmp    c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dc4:	80 fb 07             	cmp    bl,0x7
c0022dc7:	77 12                	ja     c0022ddb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022dc9:	0f b6 d2             	movzx  edx,dl
c0022dcc:	0f b6 db             	movzx  ebx,bl
c0022dcf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022dd7:	89 da                	mov    edx,ebx
c0022dd9:	eb 2f                	jmp    c0022e0a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ddb:	80 fb 0d             	cmp    bl,0xd
c0022dde:	77 13                	ja     c0022df3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022de0:	0f b6 d2             	movzx  edx,dl
c0022de3:	0f b6 db             	movzx  ebx,bl
c0022de6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022ded:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022df1:	eb 17                	jmp    c0022e0a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022df3:	80 fb 15             	cmp    bl,0x15
c0022df6:	77 13                	ja     c0022e0b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022df8:	0f b6 d2             	movzx  edx,dl
c0022dfb:	0f b6 db             	movzx  ebx,bl
c0022dfe:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022e06:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022e0a:	ee                   	out    dx,al
c0022e0b:	83 c4 1c             	add    esp,0x1c
c0022e0e:	5b                   	pop    ebx
c0022e0f:	5e                   	pop    esi
c0022e10:	5f                   	pop    edi
c0022e11:	5d                   	pop    ebp
c0022e12:	c3                   	ret    
c0022e13:	90                   	nop

c0022e14 <IDE::read(unsigned char, unsigned char)>:
c0022e14:	55                   	push   ebp
c0022e15:	57                   	push   edi
c0022e16:	56                   	push   esi
c0022e17:	53                   	push   ebx
c0022e18:	83 ec 1c             	sub    esp,0x1c
c0022e1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e23:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022e26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e2a:	3c 03                	cmp    al,0x3
c0022e2c:	77 43                	ja     c0022e71 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022e2e:	0f b6 f2             	movzx  esi,dl
c0022e31:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e34:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022e38:	83 c8 80             	or     eax,0xffffff80
c0022e3b:	0f b6 c0             	movzx  eax,al
c0022e3e:	50                   	push   eax
c0022e3f:	6a 0c                	push   0xc
c0022e41:	56                   	push   esi
c0022e42:	57                   	push   edi
c0022e43:	e8 0c ff ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e48:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022e4d:	0f b6 c3             	movzx  eax,bl
c0022e50:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022e54:	ec                   	in     al,dx
c0022e55:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e59:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022e5e:	52                   	push   edx
c0022e5f:	6a 0c                	push   0xc
c0022e61:	56                   	push   esi
c0022e62:	57                   	push   edi
c0022e63:	e8 ec fe ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e68:	83 c4 20             	add    esp,0x20
c0022e6b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022e6f:	eb 49                	jmp    c0022eba <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e71:	80 fb 07             	cmp    bl,0x7
c0022e74:	77 12                	ja     c0022e88 <IDE::read(unsigned char, unsigned char)+0x74>
c0022e76:	0f b6 d2             	movzx  edx,dl
c0022e79:	0f b6 c3             	movzx  eax,bl
c0022e7c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022e84:	89 c2                	mov    edx,eax
c0022e86:	eb 31                	jmp    c0022eb9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022e88:	80 fb 0d             	cmp    bl,0xd
c0022e8b:	77 13                	ja     c0022ea0 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022e8d:	0f b6 d2             	movzx  edx,dl
c0022e90:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022e97:	0f b6 d3             	movzx  edx,bl
c0022e9a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022e9e:	eb 19                	jmp    c0022eb9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ea0:	31 c0                	xor    eax,eax
c0022ea2:	80 fb 15             	cmp    bl,0x15
c0022ea5:	77 13                	ja     c0022eba <IDE::read(unsigned char, unsigned char)+0xa6>
c0022ea7:	0f b6 d2             	movzx  edx,dl
c0022eaa:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022eb2:	0f b6 d3             	movzx  edx,bl
c0022eb5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022eb9:	ec                   	in     al,dx
c0022eba:	83 c4 1c             	add    esp,0x1c
c0022ebd:	5b                   	pop    ebx
c0022ebe:	5e                   	pop    esi
c0022ebf:	5f                   	pop    edi
c0022ec0:	5d                   	pop    ebp
c0022ec1:	c3                   	ret    

c0022ec2 <IDE::waitInterrupt(unsigned char)>:
c0022ec2:	55                   	push   ebp
c0022ec3:	57                   	push   edi
c0022ec4:	56                   	push   esi
c0022ec5:	53                   	push   ebx
c0022ec6:	31 db                	xor    ebx,ebx
c0022ec8:	83 ec 0c             	sub    esp,0xc
c0022ecb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022ecf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022ed4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022edc:	89 e8                	mov    eax,ebp
c0022ede:	84 c0                	test   al,al
c0022ee0:	75 34                	jne    c0022f16 <IDE::waitInterrupt(unsigned char)+0x54>
c0022ee2:	52                   	push   edx
c0022ee3:	6a 0c                	push   0xc
c0022ee5:	56                   	push   esi
c0022ee6:	57                   	push   edi
c0022ee7:	e8 28 ff ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0022eec:	83 c4 10             	add    esp,0x10
c0022eef:	a8 01                	test   al,0x1
c0022ef1:	75 2b                	jne    c0022f1e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ef3:	f6 c3 04             	test   bl,0x4
c0022ef6:	75 16                	jne    c0022f0e <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ef8:	83 fb 32             	cmp    ebx,0x32
c0022efb:	7e 11                	jle    c0022f0e <IDE::waitInterrupt(unsigned char)+0x4c>
c0022efd:	50                   	push   eax
c0022efe:	50                   	push   eax
c0022eff:	6a 00                	push   0x0
c0022f01:	68 80 96 98 00       	push   0x989680
c0022f06:	e8 c6 ab ff ff       	call   c001dad1 <nanoSleep(unsigned long long)>
c0022f0b:	83 c4 10             	add    esp,0x10
c0022f0e:	83 fb 3c             	cmp    ebx,0x3c
c0022f11:	74 0b                	je     c0022f1e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f13:	43                   	inc    ebx
c0022f14:	eb be                	jmp    c0022ed4 <IDE::waitInterrupt(unsigned char)+0x12>
c0022f16:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022f1e:	83 c4 0c             	add    esp,0xc
c0022f21:	89 e8                	mov    eax,ebp
c0022f23:	5b                   	pop    ebx
c0022f24:	5e                   	pop    esi
c0022f25:	5f                   	pop    edi
c0022f26:	5d                   	pop    ebp
c0022f27:	c3                   	ret    

c0022f28 <ideChannel0IRQHandler(regs*, void*)>:
c0022f28:	83 ec 10             	sub    esp,0x10
c0022f2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f2f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022f36:	6a 07                	push   0x7
c0022f38:	6a 00                	push   0x0
c0022f3a:	50                   	push   eax
c0022f3b:	e8 d4 fe ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0022f40:	83 c4 1c             	add    esp,0x1c
c0022f43:	c3                   	ret    

c0022f44 <ideChannel1IRQHandler(regs*, void*)>:
c0022f44:	83 ec 10             	sub    esp,0x10
c0022f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f4b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022f52:	6a 07                	push   0x7
c0022f54:	6a 01                	push   0x1
c0022f56:	50                   	push   eax
c0022f57:	e8 b8 fe ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0022f5c:	83 c4 1c             	add    esp,0x1c
c0022f5f:	c3                   	ret    

c0022f60 <IDE::enableIRQs(unsigned char, bool)>:
c0022f60:	57                   	push   edi
c0022f61:	56                   	push   esi
c0022f62:	be 04 00 00 00       	mov    esi,0x4
c0022f67:	53                   	push   ebx
c0022f68:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022f6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f71:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022f76:	0f 94 c0             	sete   al
c0022f79:	d1 e0                	shl    eax,1
c0022f7b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022f82:	0f b6 c0             	movzx  eax,al
c0022f85:	50                   	push   eax
c0022f86:	6a 0c                	push   0xc
c0022f88:	57                   	push   edi
c0022f89:	53                   	push   ebx
c0022f8a:	e8 c5 fd ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	50                   	push   eax
c0022f93:	6a 0c                	push   0xc
c0022f95:	57                   	push   edi
c0022f96:	53                   	push   ebx
c0022f97:	e8 78 fe ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0022f9c:	83 c4 10             	add    esp,0x10
c0022f9f:	4e                   	dec    esi
c0022fa0:	75 f0                	jne    c0022f92 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022fa2:	5b                   	pop    ebx
c0022fa3:	5e                   	pop    esi
c0022fa4:	5f                   	pop    edi
c0022fa5:	c3                   	ret    

c0022fa6 <IDE::open(int, int, void*)>:
c0022fa6:	55                   	push   ebp
c0022fa7:	57                   	push   edi
c0022fa8:	56                   	push   esi
c0022fa9:	53                   	push   ebx
c0022faa:	83 ec 1c             	sub    esp,0x1c
c0022fad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022fb1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022fba:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022fc3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022fca:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022fd1:	0f 85 b0 02 00 00    	jne    c0023287 <IDE::open(int, int, void*)+0x2e1>
c0022fd7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022fdd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022fe1:	83 e0 7f             	and    eax,0x7f
c0022fe4:	3c 05                	cmp    al,0x5
c0022fe6:	74 04                	je     c0022fec <IDE::open(int, int, void*)+0x46>
c0022fe8:	3c 0f                	cmp    al,0xf
c0022fea:	75 32                	jne    c002301e <IDE::open(int, int, void*)+0x78>
c0022fec:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022ff2:	83 e0 fc             	and    eax,0xfffffffc
c0022ff5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022ffc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023002:	83 e0 fc             	and    eax,0xfffffffc
c0023005:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002300c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023012:	83 e0 fc             	and    eax,0xfffffffc
c0023015:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002301c:	eb 14                	jmp    c0023032 <IDE::open(int, int, void*)+0x8c>
c002301e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023028:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023032:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023039:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023040:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023044:	89 c6                	mov    esi,eax
c0023046:	bf f8 0c 00 00       	mov    edi,0xcf8
c002304b:	c1 e6 10             	shl    esi,0x10
c002304e:	89 e8                	mov    eax,ebp
c0023050:	89 fa                	mov    edx,edi
c0023052:	c1 e0 0b             	shl    eax,0xb
c0023055:	09 f0                	or     eax,esi
c0023057:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002305e:	c1 e6 08             	shl    esi,0x8
c0023061:	09 c6                	or     esi,eax
c0023063:	89 f0                	mov    eax,esi
c0023065:	0d 08 00 00 80       	or     eax,0x80000008
c002306a:	ef                   	out    dx,eax
c002306b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023070:	89 ca                	mov    edx,ecx
c0023072:	ed                   	in     eax,dx
c0023073:	c1 e8 10             	shr    eax,0x10
c0023076:	3d ff ff 00 00       	cmp    eax,0xffff
c002307b:	0f 84 f5 00 00 00    	je     c0023176 <IDE::open(int, int, void*)+0x1d0>
c0023081:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023087:	89 fa                	mov    edx,edi
c0023089:	89 f0                	mov    eax,esi
c002308b:	ef                   	out    dx,eax
c002308c:	b0 fe                	mov    al,0xfe
c002308e:	89 ca                	mov    edx,ecx
c0023090:	ee                   	out    dx,al
c0023091:	89 f0                	mov    eax,esi
c0023093:	89 fa                	mov    edx,edi
c0023095:	ef                   	out    dx,eax
c0023096:	89 ca                	mov    edx,ecx
c0023098:	ed                   	in     eax,dx
c0023099:	3c fe                	cmp    al,0xfe
c002309b:	0f 85 a9 00 00 00    	jne    c002314a <IDE::open(int, int, void*)+0x1a4>
c00230a1:	8b 15 a8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5a8
c00230a7:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00230ae:	74 33                	je     c00230e3 <IDE::open(int, int, void*)+0x13d>
c00230b0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00230b6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00230ba:	40                   	inc    eax
c00230bb:	83 ec 0c             	sub    esp,0xc
c00230be:	0f b6 c0             	movzx  eax,al
c00230c1:	50                   	push   eax
c00230c2:	55                   	push   ebp
c00230c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00230c7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00230cd:	51                   	push   ecx
c00230ce:	e8 51 48 ff ff       	call   c0017924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00230d3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00230d8:	83 c4 1c             	add    esp,0x1c
c00230db:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00230e1:	eb 0a                	jmp    c00230ed <IDE::open(int, int, void*)+0x147>
c00230e3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00230ed:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00230f4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00230fb:	c1 e1 10             	shl    ecx,0x10
c00230fe:	c1 e0 08             	shl    eax,0x8
c0023101:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023106:	09 c1                	or     ecx,eax
c0023108:	89 fa                	mov    edx,edi
c002310a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023111:	c1 e0 0b             	shl    eax,0xb
c0023114:	09 c1                	or     ecx,eax
c0023116:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002311c:	89 c8                	mov    eax,ecx
c002311e:	ef                   	out    dx,eax
c002311f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023124:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002312a:	89 f2                	mov    edx,esi
c002312c:	ee                   	out    dx,al
c002312d:	89 c8                	mov    eax,ecx
c002312f:	89 fa                	mov    edx,edi
c0023131:	ef                   	out    dx,eax
c0023132:	89 f2                	mov    edx,esi
c0023134:	ed                   	in     eax,dx
c0023135:	0f b6 c0             	movzx  eax,al
c0023138:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002313e:	74 46                	je     c0023186 <IDE::open(int, int, void*)+0x1e0>
c0023140:	83 ec 0c             	sub    esp,0xc
c0023143:	68 f8 bc 02 c0       	push   0xc002bcf8
c0023148:	eb 34                	jmp    c002317e <IDE::open(int, int, void*)+0x1d8>
c002314a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023153:	75 17                	jne    c002316c <IDE::open(int, int, void*)+0x1c6>
c0023155:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002315a:	74 07                	je     c0023163 <IDE::open(int, int, void*)+0x1bd>
c002315c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023161:	75 09                	jne    c002316c <IDE::open(int, int, void*)+0x1c6>
c0023163:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002316a:	eb 1a                	jmp    c0023186 <IDE::open(int, int, void*)+0x1e0>
c002316c:	83 ec 0c             	sub    esp,0xc
c002316f:	68 00 bd 02 c0       	push   0xc002bd00
c0023174:	eb 08                	jmp    c002317e <IDE::open(int, int, void*)+0x1d8>
c0023176:	83 ec 0c             	sub    esp,0xc
c0023179:	68 31 bd 02 c0       	push   0xc002bd31
c002317e:	e8 e8 6a ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0023183:	83 c4 10             	add    esp,0x10
c0023186:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002318d:	79 1a                	jns    c00231a9 <IDE::open(int, int, void*)+0x203>
c002318f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023195:	83 e0 fc             	and    eax,0xfffffffc
c0023198:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002319f:	83 c0 08             	add    eax,0x8
c00231a2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00231a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00231af:	89 c2                	mov    edx,eax
c00231b1:	83 e2 0f             	and    edx,0xf
c00231b4:	66 83 fa 08          	cmp    dx,0x8
c00231b8:	75 0a                	jne    c00231c4 <IDE::open(int, int, void*)+0x21e>
c00231ba:	83 e8 02             	sub    eax,0x2
c00231bd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231c4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00231ca:	89 c2                	mov    edx,eax
c00231cc:	83 e2 0f             	and    edx,0xf
c00231cf:	66 83 fa 08          	cmp    dx,0x8
c00231d3:	75 0a                	jne    c00231df <IDE::open(int, int, void*)+0x239>
c00231d5:	83 e8 02             	sub    eax,0x2
c00231d8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00231df:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00231e6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00231ed:	89 d0                	mov    eax,edx
c00231ef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00231f2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00231f6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00231fa:	8d 4a 01             	lea    ecx,[edx+0x1]
c00231fd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023202:	0f b6 c9             	movzx  ecx,cl
c0023205:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002320c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002320f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023213:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023217:	8d 50 02             	lea    edx,[eax+0x2]
c002321a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002321f:	0f b6 d2             	movzx  edx,dl
c0023222:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023228:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002322b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002322f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023233:	8d 48 03             	lea    ecx,[eax+0x3]
c0023236:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002323b:	0f b6 c9             	movzx  ecx,cl
c002323e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023244:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023247:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002324b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002324f:	8d 50 04             	lea    edx,[eax+0x4]
c0023252:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023258:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002325d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023264:	66 85 f6             	test   si,si
c0023267:	74 5b                	je     c00232c4 <IDE::open(int, int, void*)+0x31e>
c0023269:	0f b6 d2             	movzx  edx,dl
c002326c:	83 c0 05             	add    eax,0x5
c002326f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023272:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023276:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002327a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023280:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023285:	eb 3d                	jmp    c00232c4 <IDE::open(int, int, void*)+0x31e>
c0023287:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002328d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023294:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002329b:	66 05 06 02          	add    ax,0x206
c002329f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232a6:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00232ad:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232b4:	66 05 06 02          	add    ax,0x206
c00232b8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232bf:	e9 e5 fe ff ff       	jmp    c00231a9 <IDE::open(int, int, void*)+0x203>
c00232c4:	50                   	push   eax
c00232c5:	50                   	push   eax
c00232c6:	6a 00                	push   0x0
c00232c8:	53                   	push   ebx
c00232c9:	e8 60 fa ff ff       	call   c0022d2e <IDE::prepareInterrupt(unsigned char)>
c00232ce:	5a                   	pop    edx
c00232cf:	59                   	pop    ecx
c00232d0:	6a 01                	push   0x1
c00232d2:	53                   	push   ebx
c00232d3:	e8 56 fa ff ff       	call   c0022d2e <IDE::prepareInterrupt(unsigned char)>
c00232d8:	83 c4 0c             	add    esp,0xc
c00232db:	6a 00                	push   0x0
c00232dd:	6a 00                	push   0x0
c00232df:	53                   	push   ebx
c00232e0:	e8 7b fc ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c00232e5:	83 c4 0c             	add    esp,0xc
c00232e8:	6a 00                	push   0x0
c00232ea:	6a 01                	push   0x1
c00232ec:	53                   	push   ebx
c00232ed:	e8 6e fc ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c00232f2:	83 c4 10             	add    esp,0x10
c00232f5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00232fc:	74 34                	je     c0023332 <IDE::open(int, int, void*)+0x38c>
c00232fe:	83 ec 0c             	sub    esp,0xc
c0023301:	53                   	push   ebx
c0023302:	6a 01                	push   0x1
c0023304:	68 28 2f 02 c0       	push   0xc0022f28
c0023309:	6a 0e                	push   0xe
c002330b:	53                   	push   ebx
c002330c:	e8 ab 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023311:	83 c4 14             	add    esp,0x14
c0023314:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002331a:	53                   	push   ebx
c002331b:	6a 01                	push   0x1
c002331d:	68 44 2f 02 c0       	push   0xc0022f44
c0023322:	6a 0f                	push   0xf
c0023324:	53                   	push   ebx
c0023325:	e8 92 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002332a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023330:	eb 38                	jmp    c002336a <IDE::open(int, int, void*)+0x3c4>
c0023332:	83 ec 0c             	sub    esp,0xc
c0023335:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002333f:	53                   	push   ebx
c0023340:	6a 00                	push   0x0
c0023342:	68 28 2f 02 c0       	push   0xc0022f28
c0023347:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002334d:	53                   	push   ebx
c002334e:	e8 69 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023353:	83 c4 14             	add    esp,0x14
c0023356:	53                   	push   ebx
c0023357:	6a 00                	push   0x0
c0023359:	68 44 2f 02 c0       	push   0xc0022f44
c002335e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023364:	53                   	push   ebx
c0023365:	e8 52 05 ff ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002336a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002336c:	83 c4 20             	add    esp,0x20
c002336f:	83 ec 0c             	sub    esp,0xc
c0023372:	53                   	push   ebx
c0023373:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023376:	83 c4 0c             	add    esp,0xc
c0023379:	6a 07                	push   0x7
c002337b:	6a 00                	push   0x0
c002337d:	53                   	push   ebx
c002337e:	e8 91 fa ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023383:	83 c4 0c             	add    esp,0xc
c0023386:	6a 07                	push   0x7
c0023388:	6a 01                	push   0x1
c002338a:	53                   	push   ebx
c002338b:	e8 84 fa ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023390:	83 c4 0c             	add    esp,0xc
c0023393:	6a 01                	push   0x1
c0023395:	6a 00                	push   0x0
c0023397:	53                   	push   ebx
c0023398:	e8 c3 fb ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c002339d:	83 c4 0c             	add    esp,0xc
c00233a0:	6a 01                	push   0x1
c00233a2:	6a 01                	push   0x1
c00233a4:	53                   	push   ebx
c00233a5:	e8 b6 fb ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c00233aa:	83 c4 2c             	add    esp,0x2c
c00233ad:	31 c0                	xor    eax,eax
c00233af:	5b                   	pop    ebx
c00233b0:	5e                   	pop    esi
c00233b1:	5f                   	pop    edi
c00233b2:	5d                   	pop    ebp
c00233b3:	c3                   	ret    

c00233b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00233b4:	55                   	push   ebp
c00233b5:	57                   	push   edi
c00233b6:	56                   	push   esi
c00233b7:	53                   	push   ebx
c00233b8:	83 ec 1c             	sub    esp,0x1c
c00233bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00233bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233c3:	8d 50 f8             	lea    edx,[eax-0x8]
c00233c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233ca:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00233ce:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00233d2:	80 fa 03             	cmp    dl,0x3
c00233d5:	77 5d                	ja     c0023434 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00233d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00233db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00233df:	0f b6 db             	movzx  ebx,bl
c00233e2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00233e5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00233e9:	83 ca 80             	or     edx,0xffffff80
c00233ec:	0f b6 d2             	movzx  edx,dl
c00233ef:	52                   	push   edx
c00233f0:	6a 0c                	push   0xc
c00233f2:	53                   	push   ebx
c00233f3:	56                   	push   esi
c00233f4:	e8 5b f9 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233f9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00233fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023402:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023406:	0f b6 c0             	movzx  eax,al
c0023409:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002340d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002340f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023414:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023418:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002341c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023420:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023428:	83 c4 2c             	add    esp,0x2c
c002342b:	5b                   	pop    ebx
c002342c:	5e                   	pop    esi
c002342d:	5f                   	pop    edi
c002342e:	5d                   	pop    ebp
c002342f:	e9 20 f9 ff ff       	jmp    c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023434:	3c 07                	cmp    al,0x7
c0023436:	77 10                	ja     c0023448 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023438:	0f b6 db             	movzx  ebx,bl
c002343b:	0f b6 d0             	movzx  edx,al
c002343e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023446:	eb 2d                	jmp    c0023475 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023448:	3c 0d                	cmp    al,0xd
c002344a:	77 13                	ja     c002345f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002344c:	0f b6 db             	movzx  ebx,bl
c002344f:	0f b6 c0             	movzx  eax,al
c0023452:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023459:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002345d:	eb 16                	jmp    c0023475 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002345f:	3c 15                	cmp    al,0x15
c0023461:	77 14                	ja     c0023477 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023463:	0f b6 db             	movzx  ebx,bl
c0023466:	0f b6 c0             	movzx  eax,al
c0023469:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023471:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023475:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023477:	83 c4 1c             	add    esp,0x1c
c002347a:	5b                   	pop    ebx
c002347b:	5e                   	pop    esi
c002347c:	5f                   	pop    edi
c002347d:	5d                   	pop    ebp
c002347e:	c3                   	ret    
c002347f:	90                   	nop

c0023480 <IDE::detect()>:
c0023480:	55                   	push   ebp
c0023481:	57                   	push   edi
c0023482:	56                   	push   esi
c0023483:	53                   	push   ebx
c0023484:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002348a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023491:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023498:	0f 85 9d 02 00 00    	jne    c002373b <IDE::detect()+0x2bb>
c002349e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00234a5:	31 f6                	xor    esi,esi
c00234a7:	31 ed                	xor    ebp,ebp
c00234a9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00234b1:	89 e8                	mov    eax,ebp
c00234b3:	c1 e0 06             	shl    eax,0x6
c00234b6:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00234be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00234c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00234c6:	c1 e0 04             	shl    eax,0x4
c00234c9:	83 c8 a0             	or     eax,0xffffffa0
c00234cc:	0f b6 c0             	movzx  eax,al
c00234cf:	50                   	push   eax
c00234d0:	6a 06                	push   0x6
c00234d2:	56                   	push   esi
c00234d3:	53                   	push   ebx
c00234d4:	e8 7b f8 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234d9:	83 c4 0c             	add    esp,0xc
c00234dc:	6a 0c                	push   0xc
c00234de:	56                   	push   esi
c00234df:	53                   	push   ebx
c00234e0:	e8 2f f9 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00234e5:	83 c4 0c             	add    esp,0xc
c00234e8:	6a 0c                	push   0xc
c00234ea:	56                   	push   esi
c00234eb:	53                   	push   ebx
c00234ec:	e8 23 f9 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00234f1:	83 c4 0c             	add    esp,0xc
c00234f4:	6a 0c                	push   0xc
c00234f6:	56                   	push   esi
c00234f7:	53                   	push   ebx
c00234f8:	e8 17 f9 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00234fd:	83 c4 0c             	add    esp,0xc
c0023500:	6a 0c                	push   0xc
c0023502:	56                   	push   esi
c0023503:	53                   	push   ebx
c0023504:	e8 0b f9 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023509:	68 ec 00 00 00       	push   0xec
c002350e:	6a 07                	push   0x7
c0023510:	56                   	push   esi
c0023511:	53                   	push   ebx
c0023512:	e8 3d f8 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023517:	83 c4 1c             	add    esp,0x1c
c002351a:	6a 0c                	push   0xc
c002351c:	56                   	push   esi
c002351d:	53                   	push   ebx
c002351e:	e8 f1 f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023523:	83 c4 0c             	add    esp,0xc
c0023526:	6a 0c                	push   0xc
c0023528:	56                   	push   esi
c0023529:	53                   	push   ebx
c002352a:	e8 e5 f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c002352f:	83 c4 0c             	add    esp,0xc
c0023532:	6a 0c                	push   0xc
c0023534:	56                   	push   esi
c0023535:	53                   	push   ebx
c0023536:	e8 d9 f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c002353b:	83 c4 0c             	add    esp,0xc
c002353e:	6a 0c                	push   0xc
c0023540:	56                   	push   esi
c0023541:	53                   	push   ebx
c0023542:	e8 cd f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023547:	83 c4 0c             	add    esp,0xc
c002354a:	6a 0c                	push   0xc
c002354c:	56                   	push   esi
c002354d:	53                   	push   ebx
c002354e:	e8 c1 f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023553:	83 c4 10             	add    esp,0x10
c0023556:	84 c0                	test   al,al
c0023558:	0f 84 63 01 00 00    	je     c00236c1 <IDE::detect()+0x241>
c002355e:	31 ff                	xor    edi,edi
c0023560:	50                   	push   eax
c0023561:	6a 0c                	push   0xc
c0023563:	56                   	push   esi
c0023564:	53                   	push   ebx
c0023565:	e8 aa f8 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c002356a:	83 c4 10             	add    esp,0x10
c002356d:	a8 01                	test   al,0x1
c002356f:	0f 85 6d 01 00 00    	jne    c00236e2 <IDE::detect()+0x262>
c0023575:	84 c0                	test   al,al
c0023577:	78 04                	js     c002357d <IDE::detect()+0xfd>
c0023579:	a8 08                	test   al,0x8
c002357b:	75 27                	jne    c00235a4 <IDE::detect()+0x124>
c002357d:	47                   	inc    edi
c002357e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023584:	7e da                	jle    c0023560 <IDE::detect()+0xe0>
c0023586:	50                   	push   eax
c0023587:	50                   	push   eax
c0023588:	6a 00                	push   0x0
c002358a:	68 40 4b 4c 00       	push   0x4c4b40
c002358f:	e8 3d a5 ff ff       	call   c001dad1 <nanoSleep(unsigned long long)>
c0023594:	83 c4 10             	add    esp,0x10
c0023597:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002359d:	75 c1                	jne    c0023560 <IDE::detect()+0xe0>
c002359f:	e9 3e 01 00 00       	jmp    c00236e2 <IDE::detect()+0x262>
c00235a4:	31 c9                	xor    ecx,ecx
c00235a6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00235aa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00235ae:	83 ec 0c             	sub    esp,0xc
c00235b1:	68 80 00 00 00       	push   0x80
c00235b6:	57                   	push   edi
c00235b7:	6a 00                	push   0x0
c00235b9:	56                   	push   esi
c00235ba:	53                   	push   ebx
c00235bb:	e8 f4 fd ff ff       	call   c00233b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00235c0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00235c5:	89 e8                	mov    eax,ebp
c00235c7:	89 d1                	mov    ecx,edx
c00235c9:	c1 e0 06             	shl    eax,0x6
c00235cc:	01 d8                	add    eax,ebx
c00235ce:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00235d5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00235dc:	89 f2                	mov    edx,esi
c00235de:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00235e4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00235e8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00235ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00235f2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00235f9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023601:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023608:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023610:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023616:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002361d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023623:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023627:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002362b:	83 c4 20             	add    esp,0x20
c002362e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023631:	83 c0 02             	add    eax,0x2
c0023634:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002363a:	83 c7 02             	add    edi,0x2
c002363d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023640:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023646:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002364a:	75 e2                	jne    c002362e <IDE::detect()+0x1ae>
c002364c:	89 e8                	mov    eax,ebp
c002364e:	c1 e0 06             	shl    eax,0x6
c0023651:	01 d8                	add    eax,ebx
c0023653:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023659:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023660:	66 c1 ea 09          	shr    dx,0x9
c0023664:	83 e2 01             	and    edx,0x1
c0023667:	84 c9                	test   cl,cl
c0023669:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002366f:	75 22                	jne    c0023693 <IDE::detect()+0x213>
c0023671:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023678:	74 46                	je     c00236c0 <IDE::detect()+0x240>
c002367a:	83 ec 0c             	sub    esp,0xc
c002367d:	68 7c 01 00 00       	push   0x17c
c0023682:	e8 15 bf fe ff       	call   c000f59c <malloc>
c0023687:	89 c7                	mov    edi,eax
c0023689:	89 04 24             	mov    DWORD PTR [esp],eax
c002368c:	e8 15 05 00 00       	call   c0023ba6 <ATA::ATA()>
c0023691:	eb 17                	jmp    c00236aa <IDE::detect()+0x22a>
c0023693:	83 ec 0c             	sub    esp,0xc
c0023696:	68 80 01 00 00       	push   0x180
c002369b:	e8 fc be fe ff       	call   c000f59c <malloc>
c00236a0:	89 c7                	mov    edi,eax
c00236a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00236a5:	e8 04 0b 00 00       	call   c00241ae <ATAPI::ATAPI()>
c00236aa:	5a                   	pop    edx
c00236ab:	59                   	pop    ecx
c00236ac:	57                   	push   edi
c00236ad:	53                   	push   ebx
c00236ae:	e8 91 02 ff ff       	call   c0013944 <Device::addChild(Device*)>
c00236b3:	8b 07                	mov    eax,DWORD PTR [edi]
c00236b5:	53                   	push   ebx
c00236b6:	55                   	push   ebp
c00236b7:	6a 00                	push   0x0
c00236b9:	57                   	push   edi
c00236ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00236bd:	83 c4 20             	add    esp,0x20
c00236c0:	45                   	inc    ebp
c00236c1:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00236c6:	74 0d                	je     c00236d5 <IDE::detect()+0x255>
c00236c8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00236d0:	e9 dc fd ff ff       	jmp    c00234b1 <IDE::detect()+0x31>
c00236d5:	4e                   	dec    esi
c00236d6:	74 63                	je     c002373b <IDE::detect()+0x2bb>
c00236d8:	be 01 00 00 00       	mov    esi,0x1
c00236dd:	e9 c7 fd ff ff       	jmp    c00234a9 <IDE::detect()+0x29>
c00236e2:	50                   	push   eax
c00236e3:	6a 04                	push   0x4
c00236e5:	56                   	push   esi
c00236e6:	53                   	push   ebx
c00236e7:	e8 28 f7 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00236ec:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00236f0:	83 c4 0c             	add    esp,0xc
c00236f3:	6a 05                	push   0x5
c00236f5:	56                   	push   esi
c00236f6:	53                   	push   ebx
c00236f7:	e8 18 f7 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00236fc:	83 c4 10             	add    esp,0x10
c00236ff:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023703:	80 fa 14             	cmp    dl,0x14
c0023706:	75 04                	jne    c002370c <IDE::detect()+0x28c>
c0023708:	3c eb                	cmp    al,0xeb
c002370a:	eb 07                	jmp    c0023713 <IDE::detect()+0x293>
c002370c:	3c 96                	cmp    al,0x96
c002370e:	75 b1                	jne    c00236c1 <IDE::detect()+0x241>
c0023710:	80 fa 69             	cmp    dl,0x69
c0023713:	75 ac                	jne    c00236c1 <IDE::detect()+0x241>
c0023715:	68 a1 00 00 00       	push   0xa1
c002371a:	6a 07                	push   0x7
c002371c:	56                   	push   esi
c002371d:	53                   	push   ebx
c002371e:	e8 31 f6 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023723:	5f                   	pop    edi
c0023724:	58                   	pop    eax
c0023725:	6a 00                	push   0x0
c0023727:	68 40 42 0f 00       	push   0xf4240
c002372c:	e8 a0 a3 ff ff       	call   c001dad1 <nanoSleep(unsigned long long)>
c0023731:	83 c4 10             	add    esp,0x10
c0023734:	b1 01                	mov    cl,0x1
c0023736:	e9 6b fe ff ff       	jmp    c00235a6 <IDE::detect()+0x126>
c002373b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023741:	5b                   	pop    ebx
c0023742:	5e                   	pop    esi
c0023743:	5f                   	pop    edi
c0023744:	5d                   	pop    ebp
c0023745:	c3                   	ret    

c0023746 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023746:	55                   	push   ebp
c0023747:	57                   	push   edi
c0023748:	56                   	push   esi
c0023749:	53                   	push   ebx
c002374a:	83 ec 1c             	sub    esp,0x1c
c002374d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023751:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023755:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023759:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002375d:	88 c3                	mov    bl,al
c002375f:	84 c0                	test   al,al
c0023761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023765:	0f 84 81 00 00 00    	je     c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002376b:	83 ec 0c             	sub    esp,0xc
c002376e:	68 5b bd 02 c0       	push   0xc002bd5b
c0023773:	e8 93 ed fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0023778:	83 c4 10             	add    esp,0x10
c002377b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002377f:	3c 01                	cmp    al,0x1
c0023781:	74 63                	je     c00237e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023783:	3c 02                	cmp    al,0x2
c0023785:	75 53                	jne    c00237da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023787:	d1 e6                	shl    esi,1
c0023789:	09 ee                	or     esi,ebp
c002378b:	50                   	push   eax
c002378c:	89 f0                	mov    eax,esi
c002378e:	6a 01                	push   0x1
c0023790:	0f b6 f0             	movzx  esi,al
c0023793:	c1 e6 06             	shl    esi,0x6
c0023796:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002379e:	50                   	push   eax
c002379f:	57                   	push   edi
c00237a0:	e8 6f f6 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00237a5:	83 c4 10             	add    esp,0x10
c00237a8:	a8 01                	test   al,0x1
c00237aa:	74 02                	je     c00237ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00237ac:	b3 07                	mov    bl,0x7
c00237ae:	a8 02                	test   al,0x2
c00237b0:	74 02                	je     c00237b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00237b2:	b3 03                	mov    bl,0x3
c00237b4:	a8 04                	test   al,0x4
c00237b6:	74 02                	je     c00237ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00237b8:	b3 14                	mov    bl,0x14
c00237ba:	a8 08                	test   al,0x8
c00237bc:	74 02                	je     c00237c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00237be:	b3 03                	mov    bl,0x3
c00237c0:	a8 10                	test   al,0x10
c00237c2:	74 02                	je     c00237c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00237c4:	b3 15                	mov    bl,0x15
c00237c6:	a8 20                	test   al,0x20
c00237c8:	74 02                	je     c00237cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00237ca:	b3 03                	mov    bl,0x3
c00237cc:	a8 40                	test   al,0x40
c00237ce:	74 02                	je     c00237d2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00237d0:	b3 16                	mov    bl,0x16
c00237d2:	84 c0                	test   al,al
c00237d4:	79 16                	jns    c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237d6:	b3 0d                	mov    bl,0xd
c00237d8:	eb 12                	jmp    c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237da:	3c 03                	cmp    al,0x3
c00237dc:	74 0c                	je     c00237ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00237de:	3c 04                	cmp    al,0x4
c00237e0:	75 0a                	jne    c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237e2:	b3 08                	mov    bl,0x8
c00237e4:	eb 06                	jmp    c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237e6:	b3 13                	mov    bl,0x13
c00237e8:	eb 02                	jmp    c00237ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237ea:	b3 17                	mov    bl,0x17
c00237ec:	83 c4 1c             	add    esp,0x1c
c00237ef:	88 d8                	mov    al,bl
c00237f1:	5b                   	pop    ebx
c00237f2:	5e                   	pop    esi
c00237f3:	5f                   	pop    edi
c00237f4:	5d                   	pop    ebp
c00237f5:	c3                   	ret    

c00237f6 <IDE::polling(unsigned char, unsigned int)>:
c00237f6:	57                   	push   edi
c00237f7:	56                   	push   esi
c00237f8:	53                   	push   ebx
c00237f9:	bb 04 00 00 00       	mov    ebx,0x4
c00237fe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023802:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023807:	52                   	push   edx
c0023808:	6a 0c                	push   0xc
c002380a:	56                   	push   esi
c002380b:	57                   	push   edi
c002380c:	e8 03 f6 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023811:	83 c4 10             	add    esp,0x10
c0023814:	4b                   	dec    ebx
c0023815:	75 f0                	jne    c0023807 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023817:	bb a0 86 01 00       	mov    ebx,0x186a0
c002381c:	50                   	push   eax
c002381d:	6a 0c                	push   0xc
c002381f:	56                   	push   esi
c0023820:	57                   	push   edi
c0023821:	e8 ee f5 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023826:	83 c4 10             	add    esp,0x10
c0023829:	a8 01                	test   al,0x1
c002382b:	75 17                	jne    c0023844 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002382d:	a8 20                	test   al,0x20
c002382f:	75 0f                	jne    c0023840 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023831:	4b                   	dec    ebx
c0023832:	74 10                	je     c0023844 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023834:	84 c0                	test   al,al
c0023836:	78 e4                	js     c002381c <IDE::polling(unsigned char, unsigned int)+0x26>
c0023838:	a8 08                	test   al,0x8
c002383a:	74 e0                	je     c002381c <IDE::polling(unsigned char, unsigned int)+0x26>
c002383c:	31 c0                	xor    eax,eax
c002383e:	eb 06                	jmp    c0023846 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023840:	b0 01                	mov    al,0x1
c0023842:	eb 02                	jmp    c0023846 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023844:	b0 02                	mov    al,0x2
c0023846:	5b                   	pop    ebx
c0023847:	5e                   	pop    esi
c0023848:	5f                   	pop    edi
c0023849:	c3                   	ret    

c002384a <SATABus::close(int, int, void*)>:
c002384a:	31 c0                	xor    eax,eax
c002384c:	c3                   	ret    
c002384d:	90                   	nop

c002384e <SATABus::detect()>:
c002384e:	c3                   	ret    
c002384f:	90                   	nop

c0023850 <SATABus::SATABus()>:
c0023850:	83 ec 0c             	sub    esp,0xc
c0023853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023857:	83 ec 08             	sub    esp,0x8
c002385a:	68 94 bd 02 c0       	push   0xc002bd94
c002385f:	50                   	push   eax
c0023860:	e8 8d 04 ff ff       	call   c0013cf2 <HardDiskController::HardDiskController(char const*)>
c0023865:	83 c4 10             	add    esp,0x10
c0023868:	ba e8 bd 02 c0       	mov    edx,0xc002bde8
c002386d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023871:	89 10                	mov    DWORD PTR [eax],edx
c0023873:	83 ec 0c             	sub    esp,0xc
c0023876:	6a 50                	push   0x50
c0023878:	e8 6c c1 fe ff       	call   c000f9e9 <Phys::allocateContiguousPages(int)>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	89 c2                	mov    edx,eax
c0023882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023886:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002388c:	83 ec 0c             	sub    esp,0xc
c002388f:	6a 50                	push   0x50
c0023891:	e8 0b d9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0023896:	83 c4 10             	add    esp,0x10
c0023899:	89 c2                	mov    edx,eax
c002389b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002389f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00238a5:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c00238aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238ae:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00238b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238b8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238be:	83 ec 0c             	sub    esp,0xc
c00238c1:	6a 03                	push   0x3
c00238c3:	6a 50                	push   0x50
c00238c5:	51                   	push   ecx
c00238c6:	52                   	push   edx
c00238c7:	50                   	push   eax
c00238c8:	e8 87 e3 fe ff       	call   c0011c54 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238cd:	83 c4 20             	add    esp,0x20
c00238d0:	90                   	nop
c00238d1:	83 c4 0c             	add    esp,0xc
c00238d4:	c3                   	ret    
c00238d5:	90                   	nop

c00238d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00238d6:	83 ec 0c             	sub    esp,0xc
c00238d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238dd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00238e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00238e3:	09 c2                	or     edx,eax
c00238e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00238f1:	31 c0                	xor    eax,eax
c00238f3:	c1 e9 08             	shr    ecx,0x8
c00238f6:	83 e1 0f             	and    ecx,0xf
c00238f9:	39 c8                	cmp    eax,ecx
c00238fb:	74 0a                	je     c0023907 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00238fd:	f6 c2 01             	test   dl,0x1
c0023900:	74 18                	je     c002391a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023902:	d1 ea                	shr    edx,1
c0023904:	40                   	inc    eax
c0023905:	eb f2                	jmp    c00238f9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023907:	83 ec 0c             	sub    esp,0xc
c002390a:	68 b8 bd 02 c0       	push   0xc002bdb8
c002390f:	e8 57 63 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0023914:	83 c4 10             	add    esp,0x10
c0023917:	83 c8 ff             	or     eax,0xffffffff
c002391a:	83 c4 0c             	add    esp,0xc
c002391d:	c3                   	ret    

c002391e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002391e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023922:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023925:	89 c2                	mov    edx,eax
c0023927:	c1 ea 08             	shr    edx,0x8
c002392a:	83 e2 0f             	and    edx,0xf
c002392d:	fe ca                	dec    dl
c002392f:	75 31                	jne    c0023962 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023931:	83 e0 0f             	and    eax,0xf
c0023934:	3c 03                	cmp    al,0x3
c0023936:	75 2a                	jne    c0023962 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023938:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002393b:	b8 02 00 00 00       	mov    eax,0x2
c0023940:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023946:	74 1c                	je     c0023964 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023948:	b8 04 00 00 00       	mov    eax,0x4
c002394d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023953:	74 0f                	je     c0023964 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023955:	31 c0                	xor    eax,eax
c0023957:	83 fa 03             	cmp    edx,0x3
c002395a:	0f 94 c0             	sete   al
c002395d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023961:	c3                   	ret    
c0023962:	31 c0                	xor    eax,eax
c0023964:	c3                   	ret    
c0023965:	90                   	nop

c0023966 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002396a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002396d:	0f ba e2 0f          	bt     edx,0xf
c0023971:	72 f7                	jb     c002396a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023973:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023976:	83 ca 10             	or     edx,0x10
c0023979:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002397c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002397f:	83 ca 01             	or     edx,0x1
c0023982:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023985:	c3                   	ret    

c0023986 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002398a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002398d:	83 e2 fe             	and    edx,0xfffffffe
c0023990:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023993:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023996:	83 e2 ef             	and    edx,0xffffffef
c0023999:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002399c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002399f:	0f ba e2 0e          	bt     edx,0xe
c00239a3:	72 f7                	jb     c002399c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239a8:	0f ba e2 0f          	bt     edx,0xf
c00239ac:	72 ee                	jb     c002399c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239ae:	c3                   	ret    
c00239af:	90                   	nop

c00239b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00239b0:	55                   	push   ebp
c00239b1:	57                   	push   edi
c00239b2:	56                   	push   esi
c00239b3:	53                   	push   ebx
c00239b4:	83 ec 1c             	sub    esp,0x1c
c00239b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00239bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00239c3:	53                   	push   ebx
c00239c4:	89 fd                	mov    ebp,edi
c00239c6:	56                   	push   esi
c00239c7:	c1 e5 0a             	shl    ebp,0xa
c00239ca:	e8 b7 ff ff ff       	call   c0023986 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00239cf:	83 ec 0c             	sub    esp,0xc
c00239d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00239d8:	01 e8                	add    eax,ebp
c00239da:	89 03                	mov    DWORD PTR [ebx],eax
c00239dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239de:	68 00 04 00 00       	push   0x400
c00239e3:	6a 00                	push   0x0
c00239e5:	50                   	push   eax
c00239e6:	e8 65 cd fd ff       	call   c0000750 <memset>
c00239eb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00239f1:	89 fa                	mov    edx,edi
c00239f3:	01 e8                	add    eax,ebp
c00239f5:	c1 e7 0d             	shl    edi,0xd
c00239f8:	89 03                	mov    DWORD PTR [ebx],eax
c00239fa:	c1 e2 08             	shl    edx,0x8
c00239fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a04:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a0e:	89 d0                	mov    eax,edx
c0023a10:	83 c4 1c             	add    esp,0x1c
c0023a13:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a1f:	68 00 01 00 00       	push   0x100
c0023a24:	6a 00                	push   0x0
c0023a26:	50                   	push   eax
c0023a27:	e8 24 cd fd ff       	call   c0000750 <memset>
c0023a2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a30:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a36:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a40:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a43:	83 c4 10             	add    esp,0x10
c0023a46:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a4d:	31 ff                	xor    edi,edi
c0023a4f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a55:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a5f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a65:	83 c5 20             	add    ebp,0x20
c0023a68:	01 f8                	add    eax,edi
c0023a6a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a6d:	52                   	push   edx
c0023a6e:	68 00 01 00 00       	push   0x100
c0023a73:	6a 00                	push   0x0
c0023a75:	50                   	push   eax
c0023a76:	e8 d5 cc fd ff       	call   c0000750 <memset>
c0023a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023a7f:	83 c4 10             	add    esp,0x10
c0023a82:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023a88:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023a8f:	01 f8                	add    eax,edi
c0023a91:	81 c7 00 01 00 00    	add    edi,0x100
c0023a97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a9a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023aa0:	75 b3                	jne    c0023a55 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023aa2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023aa6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023aaa:	83 c4 1c             	add    esp,0x1c
c0023aad:	5b                   	pop    ebx
c0023aae:	5e                   	pop    esi
c0023aaf:	5f                   	pop    edi
c0023ab0:	5d                   	pop    ebp
c0023ab1:	e9 b0 fe ff ff       	jmp    c0023966 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ab6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ab6:	55                   	push   ebp
c0023ab7:	57                   	push   edi
c0023ab8:	56                   	push   esi
c0023ab9:	53                   	push   ebx
c0023aba:	31 db                	xor    ebx,ebx
c0023abc:	83 ec 0c             	sub    esp,0xc
c0023abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ac3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ac7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023aca:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ad0:	74 7a                	je     c0023b4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023ad2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023ad6:	89 d8                	mov    eax,ebx
c0023ad8:	c1 e0 07             	shl    eax,0x7
c0023adb:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023ae2:	55                   	push   ebp
c0023ae3:	56                   	push   esi
c0023ae4:	e8 35 fe ff ff       	call   c002391e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023ae9:	5a                   	pop    edx
c0023aea:	83 f8 01             	cmp    eax,0x1
c0023aed:	59                   	pop    ecx
c0023aee:	75 21                	jne    c0023b11 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023af0:	50                   	push   eax
c0023af1:	53                   	push   ebx
c0023af2:	55                   	push   ebp
c0023af3:	56                   	push   esi
c0023af4:	e8 b7 fe ff ff       	call   c00239b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023af9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b00:	e8 97 ba fe ff       	call   c000f59c <malloc>
c0023b05:	89 c5                	mov    ebp,eax
c0023b07:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b0a:	e8 03 0d 00 00       	call   c0024812 <SATA::SATA()>
c0023b0f:	eb 24                	jmp    c0023b35 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023b11:	83 f8 04             	cmp    eax,0x4
c0023b14:	75 36                	jne    c0023b4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b16:	51                   	push   ecx
c0023b17:	53                   	push   ebx
c0023b18:	55                   	push   ebp
c0023b19:	56                   	push   esi
c0023b1a:	e8 91 fe ff ff       	call   c00239b0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b1f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b26:	e8 71 ba fe ff       	call   c000f59c <malloc>
c0023b2b:	89 c5                	mov    ebp,eax
c0023b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b30:	e8 53 10 00 00       	call   c0024b88 <SATAPI::SATAPI()>
c0023b35:	58                   	pop    eax
c0023b36:	5a                   	pop    edx
c0023b37:	55                   	push   ebp
c0023b38:	56                   	push   esi
c0023b39:	e8 06 fe fe ff       	call   c0013944 <Device::addChild(Device*)>
c0023b3e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023b41:	56                   	push   esi
c0023b42:	6a 00                	push   0x0
c0023b44:	53                   	push   ebx
c0023b45:	55                   	push   ebp
c0023b46:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023b49:	83 c4 20             	add    esp,0x20
c0023b4c:	d1 ef                	shr    edi,1
c0023b4e:	43                   	inc    ebx
c0023b4f:	83 fb 20             	cmp    ebx,0x20
c0023b52:	0f 85 72 ff ff ff    	jne    c0023aca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023b58:	83 c4 0c             	add    esp,0xc
c0023b5b:	5b                   	pop    ebx
c0023b5c:	5e                   	pop    esi
c0023b5d:	5f                   	pop    edi
c0023b5e:	5d                   	pop    ebp
c0023b5f:	c3                   	ret    

c0023b60 <SATABus::open(int, int, void*)>:
c0023b60:	83 ec 14             	sub    esp,0x14
c0023b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b67:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023b6d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023b73:	52                   	push   edx
c0023b74:	50                   	push   eax
c0023b75:	e8 3c ff ff ff       	call   c0023ab6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023b7a:	31 c0                	xor    eax,eax
c0023b7c:	83 c4 1c             	add    esp,0x1c
c0023b7f:	c3                   	ret    

c0023b80 <ATA::close(int, int, void*)>:
c0023b80:	83 ec 0c             	sub    esp,0xc
c0023b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b8d:	85 c0                	test   eax,eax
c0023b8f:	74 0c                	je     c0023b9d <ATA::close(int, int, void*)+0x1d>
c0023b91:	83 ec 0c             	sub    esp,0xc
c0023b94:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b96:	50                   	push   eax
c0023b97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b9a:	83 c4 10             	add    esp,0x10
c0023b9d:	31 c0                	xor    eax,eax
c0023b9f:	83 c4 0c             	add    esp,0xc
c0023ba2:	c3                   	ret    
c0023ba3:	90                   	nop

c0023ba4 <ATA::powerSaving(PowerSavingLevel)>:
c0023ba4:	c3                   	ret    
c0023ba5:	90                   	nop

c0023ba6 <ATA::ATA()>:
c0023ba6:	83 ec 0c             	sub    esp,0xc
c0023ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bad:	83 ec 04             	sub    esp,0x4
c0023bb0:	68 00 02 00 00       	push   0x200
c0023bb5:	68 b1 be 02 c0       	push   0xc002beb1
c0023bba:	50                   	push   eax
c0023bbb:	e8 ba 01 ff ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023bc0:	83 c4 10             	add    esp,0x10
c0023bc3:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0023bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bcc:	89 10                	mov    DWORD PTR [eax],edx
c0023bce:	90                   	nop
c0023bcf:	83 c4 0c             	add    esp,0xc
c0023bd2:	c3                   	ret    
c0023bd3:	90                   	nop

c0023bd4 <ATA::flush(bool)>:
c0023bd4:	53                   	push   ebx
c0023bd5:	83 ec 08             	sub    esp,0x8
c0023bd8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023bdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023be1:	19 c0                	sbb    eax,eax
c0023be3:	83 e0 fd             	and    eax,0xfffffffd
c0023be6:	05 ea 00 00 00       	add    eax,0xea
c0023beb:	50                   	push   eax
c0023bec:	6a 07                	push   0x7
c0023bee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bf5:	50                   	push   eax
c0023bf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bfc:	e8 53 f1 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c01:	83 c4 0c             	add    esp,0xc
c0023c04:	6a 00                	push   0x0
c0023c06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c0d:	50                   	push   eax
c0023c0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c14:	e8 dd fb ff ff       	call   c00237f6 <IDE::polling(unsigned char, unsigned int)>
c0023c19:	83 c4 18             	add    esp,0x18
c0023c1c:	5b                   	pop    ebx
c0023c1d:	c3                   	ret    

c0023c1e <ATA::readyForCommand()>:
c0023c1e:	56                   	push   esi
c0023c1f:	53                   	push   ebx
c0023c20:	31 db                	xor    ebx,ebx
c0023c22:	50                   	push   eax
c0023c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c27:	50                   	push   eax
c0023c28:	6a 0c                	push   0xc
c0023c2a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c31:	50                   	push   eax
c0023c32:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c38:	e8 d7 f1 ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c0023c3d:	83 c4 10             	add    esp,0x10
c0023c40:	a8 88                	test   al,0x88
c0023c42:	74 23                	je     c0023c67 <ATA::readyForCommand()+0x49>
c0023c44:	43                   	inc    ebx
c0023c45:	83 fb 63             	cmp    ebx,0x63
c0023c48:	7e dd                	jle    c0023c27 <ATA::readyForCommand()+0x9>
c0023c4a:	51                   	push   ecx
c0023c4b:	51                   	push   ecx
c0023c4c:	6a 00                	push   0x0
c0023c4e:	68 40 42 0f 00       	push   0xf4240
c0023c53:	e8 79 9e ff ff       	call   c001dad1 <nanoSleep(unsigned long long)>
c0023c58:	83 c4 10             	add    esp,0x10
c0023c5b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023c61:	75 c4                	jne    c0023c27 <ATA::readyForCommand()+0x9>
c0023c63:	31 c0                	xor    eax,eax
c0023c65:	eb 02                	jmp    c0023c69 <ATA::readyForCommand()+0x4b>
c0023c67:	b0 01                	mov    al,0x1
c0023c69:	5a                   	pop    edx
c0023c6a:	5b                   	pop    ebx
c0023c6b:	5e                   	pop    esi
c0023c6c:	c3                   	ret    
c0023c6d:	90                   	nop

c0023c6e <ATA::access(unsigned long long, int, void*, bool)>:
c0023c6e:	55                   	push   ebp
c0023c6f:	57                   	push   edi
c0023c70:	56                   	push   esi
c0023c71:	53                   	push   ebx
c0023c72:	83 ec 2c             	sub    esp,0x2c
c0023c75:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023c79:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023c7d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023c81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c85:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023c89:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023c8d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023c91:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023c9b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ca1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ca5:	c1 e0 06             	shl    eax,0x6
c0023ca8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023cb0:	74 5d                	je     c0023d0f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023cb2:	89 fa                	mov    edx,edi
c0023cb4:	89 f0                	mov    eax,esi
c0023cb6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023cba:	c1 ea 1c             	shr    edx,0x1c
c0023cbd:	89 d1                	mov    ecx,edx
c0023cbf:	09 c1                	or     ecx,eax
c0023cc1:	74 25                	je     c0023ce8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023cc3:	31 ed                	xor    ebp,ebp
c0023cc5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023ccc:	89 fa                	mov    edx,edi
c0023cce:	89 f0                	mov    eax,esi
c0023cd0:	0f ad d0             	shrd   eax,edx,cl
c0023cd3:	d3 ea                	shr    edx,cl
c0023cd5:	f6 c1 20             	test   cl,0x20
c0023cd8:	74 02                	je     c0023cdc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023cda:	89 d0                	mov    eax,edx
c0023cdc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023ce0:	45                   	inc    ebp
c0023ce1:	83 fd 06             	cmp    ebp,0x6
c0023ce4:	75 df                	jne    c0023cc5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023ce6:	eb 76                	jmp    c0023d5e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023ce8:	89 f0                	mov    eax,esi
c0023cea:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023cef:	89 fa                	mov    edx,edi
c0023cf1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023cf8:	0f ac d0 10          	shrd   eax,edx,0x10
c0023cfc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d01:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d05:	c1 ee 18             	shr    esi,0x18
c0023d08:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d0d:	eb 56                	jmp    c0023d65 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d0f:	6a 00                	push   0x0
c0023d11:	6a 3f                	push   0x3f
c0023d13:	57                   	push   edi
c0023d14:	56                   	push   esi
c0023d15:	e8 2a 29 00 00       	call   c0026644 <__umoddi3>
c0023d1a:	83 c4 10             	add    esp,0x10
c0023d1d:	40                   	inc    eax
c0023d1e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023d22:	6a 00                	push   0x0
c0023d24:	68 f0 03 00 00       	push   0x3f0
c0023d29:	57                   	push   edi
c0023d2a:	56                   	push   esi
c0023d2b:	e8 14 28 00 00       	call   c0026544 <__udivdi3>
c0023d30:	83 c4 10             	add    esp,0x10
c0023d33:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d38:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d3f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d44:	6a 00                	push   0x0
c0023d46:	6a 3f                	push   0x3f
c0023d48:	57                   	push   edi
c0023d49:	56                   	push   esi
c0023d4a:	e8 f5 27 00 00       	call   c0026544 <__udivdi3>
c0023d4f:	83 c4 10             	add    esp,0x10
c0023d52:	89 c6                	mov    esi,eax
c0023d54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023d59:	83 e6 0f             	and    esi,0xf
c0023d5c:	eb 07                	jmp    c0023d65 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d5e:	31 f6                	xor    esi,esi
c0023d60:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023d65:	bf 01 00 00 00       	mov    edi,0x1
c0023d6a:	50                   	push   eax
c0023d6b:	6a 00                	push   0x0
c0023d6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d74:	50                   	push   eax
c0023d75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023d79:	e8 e2 f1 ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c0023d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d81:	e8 98 fe ff ff       	call   c0023c1e <ATA::readyForCommand()>
c0023d86:	83 c4 10             	add    esp,0x10
c0023d89:	84 c0                	test   al,al
c0023d8b:	0f 84 5a 02 00 00    	je     c0023feb <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023d91:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023d97:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023d9d:	c1 e0 04             	shl    eax,0x4
c0023da0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023da7:	09 c6                	or     esi,eax
c0023da9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023dae:	75 05                	jne    c0023db5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023db0:	83 ce a0             	or     esi,0xffffffa0
c0023db3:	eb 03                	jmp    c0023db8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023db5:	83 ce e0             	or     esi,0xffffffe0
c0023db8:	89 f0                	mov    eax,esi
c0023dba:	0f b6 f0             	movzx  esi,al
c0023dbd:	56                   	push   esi
c0023dbe:	6a 06                	push   0x6
c0023dc0:	51                   	push   ecx
c0023dc1:	52                   	push   edx
c0023dc2:	e8 8d ef ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023dc7:	83 c4 10             	add    esp,0x10
c0023dca:	6a 00                	push   0x0
c0023dcc:	6a 01                	push   0x1
c0023dce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dd5:	50                   	push   eax
c0023dd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ddc:	e8 73 ef ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023de1:	83 c4 10             	add    esp,0x10
c0023de4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023de9:	75 6e                	jne    c0023e59 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023deb:	6a 00                	push   0x0
c0023ded:	6a 08                	push   0x8
c0023def:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023df6:	50                   	push   eax
c0023df7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dfd:	e8 52 ef ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e02:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e07:	50                   	push   eax
c0023e08:	6a 09                	push   0x9
c0023e0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e11:	50                   	push   eax
c0023e12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e18:	e8 37 ef ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e1d:	83 c4 20             	add    esp,0x20
c0023e20:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023e25:	50                   	push   eax
c0023e26:	6a 0a                	push   0xa
c0023e28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e2f:	50                   	push   eax
c0023e30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e36:	e8 19 ef ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e3b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023e40:	50                   	push   eax
c0023e41:	6a 0b                	push   0xb
c0023e43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e4a:	50                   	push   eax
c0023e4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e51:	e8 fe ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e56:	83 c4 20             	add    esp,0x20
c0023e59:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023e5e:	50                   	push   eax
c0023e5f:	6a 02                	push   0x2
c0023e61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e68:	50                   	push   eax
c0023e69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e6f:	e8 e0 ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e74:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023e79:	50                   	push   eax
c0023e7a:	6a 03                	push   0x3
c0023e7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e83:	50                   	push   eax
c0023e84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e8a:	e8 c5 ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e8f:	83 c4 20             	add    esp,0x20
c0023e92:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023e97:	50                   	push   eax
c0023e98:	6a 04                	push   0x4
c0023e9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ea1:	50                   	push   eax
c0023ea2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea8:	e8 a7 ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ead:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023eb2:	50                   	push   eax
c0023eb3:	6a 05                	push   0x5
c0023eb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ebc:	50                   	push   eax
c0023ebd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ec3:	e8 8c ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec8:	83 c4 20             	add    esp,0x20
c0023ecb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ed0:	0f 94 c0             	sete   al
c0023ed3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023ed8:	74 09                	je     c0023ee3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023eda:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023ee1:	eb 07                	jmp    c0023eea <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023ee3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023eea:	0f b6 c0             	movzx  eax,al
c0023eed:	50                   	push   eax
c0023eee:	6a 07                	push   0x7
c0023ef0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef7:	50                   	push   eax
c0023ef8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023efe:	e8 51 ee ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f03:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f07:	83 c4 10             	add    esp,0x10
c0023f0a:	85 f6                	test   esi,esi
c0023f0c:	0f 84 ba 00 00 00    	je     c0023fcc <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f12:	50                   	push   eax
c0023f13:	6a 01                	push   0x1
c0023f15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f1c:	50                   	push   eax
c0023f1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f23:	e8 ce f8 ff ff       	call   c00237f6 <IDE::polling(unsigned char, unsigned int)>
c0023f28:	83 c4 10             	add    esp,0x10
c0023f2b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f31:	84 c0                	test   al,al
c0023f33:	74 2c                	je     c0023f61 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f35:	0f b6 f8             	movzx  edi,al
c0023f38:	0f b6 d2             	movzx  edx,dl
c0023f3b:	57                   	push   edi
c0023f3c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023f43:	50                   	push   eax
c0023f44:	52                   	push   edx
c0023f45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4b:	e8 f6 f7 ff ff       	call   c0023746 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f50:	c7 04 24 0c be 02 c0 	mov    DWORD PTR [esp],0xc002be0c
c0023f57:	e8 af e5 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0023f5c:	e9 87 00 00 00       	jmp    c0023fe8 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023f61:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023f66:	74 33                	je     c0023f9b <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023f68:	31 ed                	xor    ebp,ebp
c0023f6a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023f6e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023f72:	50                   	push   eax
c0023f73:	50                   	push   eax
c0023f74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f7b:	50                   	push   eax
c0023f7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f82:	e8 bb ed ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c0023f87:	89 c2                	mov    edx,eax
c0023f89:	89 f8                	mov    eax,edi
c0023f8b:	66 ef                	out    dx,ax
c0023f8d:	45                   	inc    ebp
c0023f8e:	83 c4 10             	add    esp,0x10
c0023f91:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023f97:	75 d1                	jne    c0023f6a <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023f99:	eb 23                	jmp    c0023fbe <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023f9b:	0f b6 d2             	movzx  edx,dl
c0023f9e:	51                   	push   ecx
c0023f9f:	51                   	push   ecx
c0023fa0:	52                   	push   edx
c0023fa1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa7:	e8 96 ed ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c0023fac:	b9 00 01 00 00       	mov    ecx,0x100
c0023fb1:	89 c2                	mov    edx,eax
c0023fb3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023fb7:	fc                   	cld    
c0023fb8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023fbb:	83 c4 10             	add    esp,0x10
c0023fbe:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023fc6:	4e                   	dec    esi
c0023fc7:	e9 3e ff ff ff       	jmp    c0023f0a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023fcc:	31 ff                	xor    edi,edi
c0023fce:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fd3:	74 16                	je     c0023feb <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023fd5:	50                   	push   eax
c0023fd6:	50                   	push   eax
c0023fd7:	31 c0                	xor    eax,eax
c0023fd9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023fde:	0f 94 c0             	sete   al
c0023fe1:	50                   	push   eax
c0023fe2:	53                   	push   ebx
c0023fe3:	e8 ec fb ff ff       	call   c0023bd4 <ATA::flush(bool)>
c0023fe8:	83 c4 10             	add    esp,0x10
c0023feb:	83 c4 2c             	add    esp,0x2c
c0023fee:	89 f8                	mov    eax,edi
c0023ff0:	5b                   	pop    ebx
c0023ff1:	5e                   	pop    esi
c0023ff2:	5f                   	pop    edi
c0023ff3:	5d                   	pop    ebp
c0023ff4:	c3                   	ret    
c0023ff5:	90                   	nop

c0023ff6 <ATA::read(unsigned long long, int, void*)>:
c0023ff6:	57                   	push   edi
c0023ff7:	b8 04 00 00 00       	mov    eax,0x4
c0023ffc:	56                   	push   esi
c0023ffd:	53                   	push   ebx
c0023ffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024002:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024006:	8d 7a ff             	lea    edi,[edx-0x1]
c0024009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002400d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024011:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024017:	77 25                	ja     c002403e <ATA::read(unsigned long long, int, void*)+0x48>
c0024019:	b8 06 00 00 00       	mov    eax,0x6
c002401e:	85 f6                	test   esi,esi
c0024020:	74 1c                	je     c002403e <ATA::read(unsigned long long, int, void*)+0x48>
c0024022:	50                   	push   eax
c0024023:	50                   	push   eax
c0024024:	6a 00                	push   0x0
c0024026:	56                   	push   esi
c0024027:	52                   	push   edx
c0024028:	53                   	push   ebx
c0024029:	51                   	push   ecx
c002402a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002402e:	e8 3b fc ff ff       	call   c0023c6e <ATA::access(unsigned long long, int, void*, bool)>
c0024033:	83 c4 20             	add    esp,0x20
c0024036:	85 c0                	test   eax,eax
c0024038:	0f 95 c0             	setne  al
c002403b:	0f b6 c0             	movzx  eax,al
c002403e:	5b                   	pop    ebx
c002403f:	5e                   	pop    esi
c0024040:	5f                   	pop    edi
c0024041:	c3                   	ret    

c0024042 <ATA::write(unsigned long long, int, void*)>:
c0024042:	57                   	push   edi
c0024043:	b8 04 00 00 00       	mov    eax,0x4
c0024048:	56                   	push   esi
c0024049:	53                   	push   ebx
c002404a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002404e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024052:	8d 7a ff             	lea    edi,[edx-0x1]
c0024055:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024059:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002405d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024063:	77 25                	ja     c002408a <ATA::write(unsigned long long, int, void*)+0x48>
c0024065:	b8 06 00 00 00       	mov    eax,0x6
c002406a:	85 f6                	test   esi,esi
c002406c:	74 1c                	je     c002408a <ATA::write(unsigned long long, int, void*)+0x48>
c002406e:	50                   	push   eax
c002406f:	50                   	push   eax
c0024070:	6a 01                	push   0x1
c0024072:	56                   	push   esi
c0024073:	52                   	push   edx
c0024074:	53                   	push   ebx
c0024075:	51                   	push   ecx
c0024076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002407a:	e8 ef fb ff ff       	call   c0023c6e <ATA::access(unsigned long long, int, void*, bool)>
c002407f:	83 c4 20             	add    esp,0x20
c0024082:	85 c0                	test   eax,eax
c0024084:	0f 95 c0             	setne  al
c0024087:	0f b6 c0             	movzx  eax,al
c002408a:	5b                   	pop    ebx
c002408b:	5e                   	pop    esi
c002408c:	5f                   	pop    edi
c002408d:	c3                   	ret    

c002408e <ATA::detectCHS()>:
c002408e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024092:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024098:	c1 e0 06             	shl    eax,0x6
c002409b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00240a1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00240ab:	c7 44 24 04 17 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002be17
c00240b3:	e9 b3 5b ff ff       	jmp    c0019c6b <Krnl::panic(char const*)>

c00240b8 <ATA::open(int, int, void*)>:
c00240b8:	53                   	push   ebx
c00240b9:	83 ec 08             	sub    esp,0x8
c00240bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240c8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00240ce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00240d4:	c1 e0 06             	shl    eax,0x6
c00240d7:	01 d0                	add    eax,edx
c00240d9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00240e0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00240e6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00240ed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00240f7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00240fd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024104:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002410b:	75 0c                	jne    c0024119 <ATA::open(int, int, void*)+0x61>
c002410d:	83 ec 0c             	sub    esp,0xc
c0024110:	53                   	push   ebx
c0024111:	e8 78 ff ff ff       	call   c002408e <ATA::detectCHS()>
c0024116:	83 c4 10             	add    esp,0x10
c0024119:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002411f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024125:	c1 e0 06             	shl    eax,0x6
c0024128:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002412f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024139:	d1 e8                	shr    eax,1
c002413b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024141:	6a 04                	push   0x4
c0024143:	6a 0c                	push   0xc
c0024145:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002414c:	50                   	push   eax
c002414d:	52                   	push   edx
c002414e:	e8 01 ec ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024153:	90                   	nop
c0024154:	90                   	nop
c0024155:	6a 00                	push   0x0
c0024157:	6a 0c                	push   0xc
c0024159:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024160:	50                   	push   eax
c0024161:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024167:	e8 e8 eb ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002416c:	83 c4 14             	add    esp,0x14
c002416f:	53                   	push   ebx
c0024170:	e8 6d fc fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024178:	e8 db 1e ff ff       	call   c0016058 <createPartitionsForDisk(PhysicalDisk*)>
c002417d:	31 c0                	xor    eax,eax
c002417f:	83 c4 18             	add    esp,0x18
c0024182:	5b                   	pop    ebx
c0024183:	c3                   	ret    

c0024184 <ATAPI::write(unsigned long long, int, void*)>:
c0024184:	b8 03 00 00 00       	mov    eax,0x3
c0024189:	c3                   	ret    

c002418a <ATAPI::close(int, int, void*)>:
c002418a:	83 ec 0c             	sub    esp,0xc
c002418d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024191:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024197:	85 c0                	test   eax,eax
c0024199:	74 0c                	je     c00241a7 <ATAPI::close(int, int, void*)+0x1d>
c002419b:	83 ec 0c             	sub    esp,0xc
c002419e:	8b 10                	mov    edx,DWORD PTR [eax]
c00241a0:	50                   	push   eax
c00241a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00241a4:	83 c4 10             	add    esp,0x10
c00241a7:	31 c0                	xor    eax,eax
c00241a9:	83 c4 0c             	add    esp,0xc
c00241ac:	c3                   	ret    
c00241ad:	90                   	nop

c00241ae <ATAPI::ATAPI()>:
c00241ae:	83 ec 0c             	sub    esp,0xc
c00241b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241b5:	83 ec 04             	sub    esp,0x4
c00241b8:	68 00 08 00 00       	push   0x800
c00241bd:	68 51 bf 02 c0       	push   0xc002bf51
c00241c2:	50                   	push   eax
c00241c3:	e8 b2 fb fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00241c8:	83 c4 10             	add    esp,0x10
c00241cb:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c00241d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241d4:	89 10                	mov    DWORD PTR [eax],edx
c00241d6:	90                   	nop
c00241d7:	83 c4 0c             	add    esp,0xc
c00241da:	c3                   	ret    
c00241db:	90                   	nop

c00241dc <ATAPI::readyForCommand()>:
c00241dc:	56                   	push   esi
c00241dd:	53                   	push   ebx
c00241de:	31 db                	xor    ebx,ebx
c00241e0:	50                   	push   eax
c00241e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00241e5:	50                   	push   eax
c00241e6:	6a 0c                	push   0xc
c00241e8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00241ef:	50                   	push   eax
c00241f0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00241f6:	e8 19 ec ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00241fb:	83 c4 10             	add    esp,0x10
c00241fe:	a8 88                	test   al,0x88
c0024200:	74 23                	je     c0024225 <ATAPI::readyForCommand()+0x49>
c0024202:	43                   	inc    ebx
c0024203:	83 fb 63             	cmp    ebx,0x63
c0024206:	7e dd                	jle    c00241e5 <ATAPI::readyForCommand()+0x9>
c0024208:	51                   	push   ecx
c0024209:	51                   	push   ecx
c002420a:	6a 00                	push   0x0
c002420c:	68 40 42 0f 00       	push   0xf4240
c0024211:	e8 bb 98 ff ff       	call   c001dad1 <nanoSleep(unsigned long long)>
c0024216:	83 c4 10             	add    esp,0x10
c0024219:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002421f:	75 c4                	jne    c00241e5 <ATAPI::readyForCommand()+0x9>
c0024221:	31 c0                	xor    eax,eax
c0024223:	eb 02                	jmp    c0024227 <ATAPI::readyForCommand()+0x4b>
c0024225:	b0 01                	mov    al,0x1
c0024227:	5a                   	pop    edx
c0024228:	5b                   	pop    ebx
c0024229:	5e                   	pop    esi
c002422a:	c3                   	ret    
c002422b:	90                   	nop

c002422c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002422c:	55                   	push   ebp
c002422d:	57                   	push   edi
c002422e:	56                   	push   esi
c002422f:	53                   	push   ebx
c0024230:	83 ec 20             	sub    esp,0x20
c0024233:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024237:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002423b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002423f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024243:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024247:	6a 01                	push   0x1
c0024249:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024250:	50                   	push   eax
c0024251:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024257:	e8 04 ed ff ff       	call   c0022f60 <IDE::enableIRQs(unsigned char, bool)>
c002425c:	5e                   	pop    esi
c002425d:	58                   	pop    eax
c002425e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024265:	50                   	push   eax
c0024266:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002426c:	e8 bd ea ff ff       	call   c0022d2e <IDE::prepareInterrupt(unsigned char)>
c0024271:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024274:	e8 63 ff ff ff       	call   c00241dc <ATAPI::readyForCommand()>
c0024279:	83 c4 10             	add    esp,0x10
c002427c:	84 c0                	test   al,al
c002427e:	75 0a                	jne    c002428a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024280:	bb 01 00 00 00       	mov    ebx,0x1
c0024285:	e9 57 02 00 00       	jmp    c00244e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002428a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024290:	c1 e0 04             	shl    eax,0x4
c0024293:	0f b6 c0             	movzx  eax,al
c0024296:	50                   	push   eax
c0024297:	6a 06                	push   0x6
c0024299:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242a0:	50                   	push   eax
c00242a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242a7:	e8 a8 ea ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ac:	6a 00                	push   0x0
c00242ae:	6a 01                	push   0x1
c00242b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242b7:	50                   	push   eax
c00242b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242be:	e8 91 ea ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c3:	83 c4 20             	add    esp,0x20
c00242c6:	0f b6 c3             	movzx  eax,bl
c00242c9:	0f b6 df             	movzx  ebx,bh
c00242cc:	50                   	push   eax
c00242cd:	6a 04                	push   0x4
c00242cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242d6:	50                   	push   eax
c00242d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242dd:	e8 72 ea ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242e2:	53                   	push   ebx
c00242e3:	6a 05                	push   0x5
c00242e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242ec:	50                   	push   eax
c00242ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242f3:	e8 5c ea ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f8:	83 c4 20             	add    esp,0x20
c00242fb:	68 a0 00 00 00       	push   0xa0
c0024300:	6a 07                	push   0x7
c0024302:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024309:	50                   	push   eax
c002430a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024310:	e8 3f ea ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024315:	83 c4 0c             	add    esp,0xc
c0024318:	6a 01                	push   0x1
c002431a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024321:	50                   	push   eax
c0024322:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024328:	e8 c9 f4 ff ff       	call   c00237f6 <IDE::polling(unsigned char, unsigned int)>
c002432d:	83 c4 10             	add    esp,0x10
c0024330:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024336:	84 c0                	test   al,al
c0024338:	74 23                	je     c002435d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002433a:	0f b6 d8             	movzx  ebx,al
c002433d:	0f b6 d2             	movzx  edx,dl
c0024340:	53                   	push   ebx
c0024341:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024348:	50                   	push   eax
c0024349:	52                   	push   edx
c002434a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024350:	e8 f1 f3 ff ff       	call   c0023746 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024355:	83 c4 10             	add    esp,0x10
c0024358:	e9 84 01 00 00       	jmp    c00244e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002435d:	0f b6 d2             	movzx  edx,dl
c0024360:	53                   	push   ebx
c0024361:	53                   	push   ebx
c0024362:	52                   	push   edx
c0024363:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024369:	e8 d4 e9 ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c002436e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024372:	b9 06 00 00 00       	mov    ecx,0x6
c0024377:	89 c2                	mov    edx,eax
c0024379:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002437c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024380:	83 c4 10             	add    esp,0x10
c0024383:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024389:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024390:	85 db                	test   ebx,ebx
c0024392:	0f 84 ec 00 00 00    	je     c0024484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024398:	51                   	push   ecx
c0024399:	51                   	push   ecx
c002439a:	52                   	push   edx
c002439b:	50                   	push   eax
c002439c:	e8 21 eb ff ff       	call   c0022ec2 <IDE::waitInterrupt(unsigned char)>
c00243a1:	83 c4 10             	add    esp,0x10
c00243a4:	84 c0                	test   al,al
c00243a6:	0f 84 d4 fe ff ff    	je     c0024280 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00243ac:	56                   	push   esi
c00243ad:	56                   	push   esi
c00243ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b5:	50                   	push   eax
c00243b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243bc:	e8 6d e9 ff ff       	call   c0022d2e <IDE::prepareInterrupt(unsigned char)>
c00243c1:	83 c4 0c             	add    esp,0xc
c00243c4:	6a 04                	push   0x4
c00243c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243cd:	50                   	push   eax
c00243ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243d4:	e8 3b ea ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00243d9:	83 c4 0c             	add    esp,0xc
c00243dc:	89 c6                	mov    esi,eax
c00243de:	6a 05                	push   0x5
c00243e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243e7:	50                   	push   eax
c00243e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ee:	e8 21 ea ff ff       	call   c0022e14 <IDE::read(unsigned char, unsigned char)>
c00243f3:	89 f1                	mov    ecx,esi
c00243f5:	0f b6 c0             	movzx  eax,al
c00243f8:	0f b6 f1             	movzx  esi,cl
c00243fb:	c1 e0 08             	shl    eax,0x8
c00243fe:	09 c6                	or     esi,eax
c0024400:	d1 fe                	sar    esi,1
c0024402:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024406:	83 c4 10             	add    esp,0x10
c0024409:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002440e:	74 41                	je     c0024451 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024410:	31 c9                	xor    ecx,ecx
c0024412:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024418:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002441f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024423:	75 0a                	jne    c002442f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024425:	01 c9                	add    ecx,ecx
c0024427:	01 cd                	add    ebp,ecx
c0024429:	4b                   	dec    ebx
c002442a:	e9 54 ff ff ff       	jmp    c0024383 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002442f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024434:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024438:	51                   	push   ecx
c0024439:	51                   	push   ecx
c002443a:	52                   	push   edx
c002443b:	50                   	push   eax
c002443c:	e8 01 e9 ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c0024441:	89 c2                	mov    edx,eax
c0024443:	89 f0                	mov    eax,esi
c0024445:	66 ef                	out    dx,ax
c0024447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002444b:	83 c4 10             	add    esp,0x10
c002444e:	41                   	inc    ecx
c002444f:	eb c1                	jmp    c0024412 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024451:	31 f6                	xor    esi,esi
c0024453:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024459:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024460:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024464:	75 06                	jne    c002446c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024466:	01 f6                	add    esi,esi
c0024468:	01 f5                	add    ebp,esi
c002446a:	eb bd                	jmp    c0024429 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002446c:	51                   	push   ecx
c002446d:	51                   	push   ecx
c002446e:	52                   	push   edx
c002446f:	50                   	push   eax
c0024470:	e8 cd e8 ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c0024475:	89 c2                	mov    edx,eax
c0024477:	66 ed                	in     ax,dx
c0024479:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002447e:	83 c4 10             	add    esp,0x10
c0024481:	46                   	inc    esi
c0024482:	eb cf                	jmp    c0024453 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024484:	51                   	push   ecx
c0024485:	51                   	push   ecx
c0024486:	52                   	push   edx
c0024487:	50                   	push   eax
c0024488:	e8 35 ea ff ff       	call   c0022ec2 <IDE::waitInterrupt(unsigned char)>
c002448d:	83 c4 10             	add    esp,0x10
c0024490:	84 c0                	test   al,al
c0024492:	0f 84 e8 fd ff ff    	je     c0024280 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024498:	bb a0 86 01 00       	mov    ebx,0x186a0
c002449d:	52                   	push   edx
c002449e:	52                   	push   edx
c002449f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a6:	50                   	push   eax
c00244a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ad:	e8 7c e8 ff ff       	call   c0022d2e <IDE::prepareInterrupt(unsigned char)>
c00244b2:	83 c4 10             	add    esp,0x10
c00244b5:	50                   	push   eax
c00244b6:	50                   	push   eax
c00244b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244be:	50                   	push   eax
c00244bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c5:	e8 78 e8 ff ff       	call   c0022d42 <IDE::getBase(unsigned char)>
c00244ca:	8d 50 07             	lea    edx,[eax+0x7]
c00244cd:	ec                   	in     al,dx
c00244ce:	83 c4 10             	add    esp,0x10
c00244d1:	a8 88                	test   al,0x88
c00244d3:	74 0a                	je     c00244df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00244d5:	4b                   	dec    ebx
c00244d6:	75 dd                	jne    c00244b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00244d8:	bb 02 00 00 00       	mov    ebx,0x2
c00244dd:	eb 02                	jmp    c00244e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244df:	31 db                	xor    ebx,ebx
c00244e1:	83 c4 1c             	add    esp,0x1c
c00244e4:	89 d8                	mov    eax,ebx
c00244e6:	5b                   	pop    ebx
c00244e7:	5e                   	pop    esi
c00244e8:	5f                   	pop    edi
c00244e9:	5d                   	pop    ebp
c00244ea:	c3                   	ret    
c00244eb:	90                   	nop

c00244ec <ATAPI::diskRemoved()>:
c00244ec:	83 ec 18             	sub    esp,0x18
c00244ef:	68 5d bf 02 c0       	push   0xc002bf5d
c00244f4:	e8 12 e0 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c00244f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244fd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024504:	83 c4 1c             	add    esp,0x1c
c0024507:	c3                   	ret    

c0024508 <ATAPI::eject()>:
c0024508:	57                   	push   edi
c0024509:	b9 03 00 00 00       	mov    ecx,0x3
c002450e:	53                   	push   ebx
c002450f:	83 ec 14             	sub    esp,0x14
c0024512:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024516:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002451a:	fc                   	cld    
c002451b:	31 c0                	xor    eax,eax
c002451d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002451f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024524:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024529:	50                   	push   eax
c002452a:	50                   	push   eax
c002452b:	6a 00                	push   0x0
c002452d:	6a 00                	push   0x0
c002452f:	6a 00                	push   0x0
c0024531:	6a 02                	push   0x2
c0024533:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024537:	50                   	push   eax
c0024538:	53                   	push   ebx
c0024539:	e8 ee fc ff ff       	call   c002422c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002453e:	83 c4 14             	add    esp,0x14
c0024541:	53                   	push   ebx
c0024542:	e8 a5 ff ff ff       	call   c00244ec <ATAPI::diskRemoved()>
c0024547:	83 c4 24             	add    esp,0x24
c002454a:	31 c0                	xor    eax,eax
c002454c:	5b                   	pop    ebx
c002454d:	5f                   	pop    edi
c002454e:	c3                   	ret    
c002454f:	90                   	nop

c0024550 <ATAPI::diskInserted()>:
c0024550:	53                   	push   ebx
c0024551:	83 ec 14             	sub    esp,0x14
c0024554:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024558:	68 74 bf 02 c0       	push   0xc002bf74
c002455d:	e8 a9 df fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024562:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024569:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002456c:	e8 71 f8 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024571:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024575:	83 c4 18             	add    esp,0x18
c0024578:	5b                   	pop    ebx
c0024579:	e9 da 1a ff ff       	jmp    c0016058 <createPartitionsForDisk(PhysicalDisk*)>

c002457e <ATAPI::detectMedia()>:
c002457e:	56                   	push   esi
c002457f:	53                   	push   ebx
c0024580:	83 ec 28             	sub    esp,0x28
c0024583:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024587:	6a 0c                	push   0xc
c0024589:	6a 00                	push   0x0
c002458b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002458f:	56                   	push   esi
c0024590:	e8 bb c1 fd ff       	call   c0000750 <memset>
c0024595:	58                   	pop    eax
c0024596:	5a                   	pop    edx
c0024597:	6a 00                	push   0x0
c0024599:	6a 00                	push   0x0
c002459b:	6a 00                	push   0x0
c002459d:	6a 00                	push   0x0
c002459f:	56                   	push   esi
c00245a0:	53                   	push   ebx
c00245a1:	e8 86 fc ff ff       	call   c002422c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245a6:	83 c4 1c             	add    esp,0x1c
c00245a9:	6a 0c                	push   0xc
c00245ab:	6a 00                	push   0x0
c00245ad:	56                   	push   esi
c00245ae:	e8 9d c1 fd ff       	call   c0000750 <memset>
c00245b3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00245b8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00245bd:	59                   	pop    ecx
c00245be:	58                   	pop    eax
c00245bf:	6a 01                	push   0x1
c00245c1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00245c5:	50                   	push   eax
c00245c6:	6a 00                	push   0x0
c00245c8:	6a 12                	push   0x12
c00245ca:	56                   	push   esi
c00245cb:	53                   	push   ebx
c00245cc:	e8 5b fc ff ff       	call   c002422c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245d1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00245d5:	83 c4 20             	add    esp,0x20
c00245d8:	83 e0 7f             	and    eax,0x7f
c00245db:	3c 70                	cmp    al,0x70
c00245dd:	74 15                	je     c00245f4 <ATAPI::detectMedia()+0x76>
c00245df:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00245e6:	75 0c                	jne    c00245f4 <ATAPI::detectMedia()+0x76>
c00245e8:	83 ec 0c             	sub    esp,0xc
c00245eb:	53                   	push   ebx
c00245ec:	e8 5f ff ff ff       	call   c0024550 <ATAPI::diskInserted()>
c00245f1:	83 c4 10             	add    esp,0x10
c00245f4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00245f8:	83 e0 0f             	and    eax,0xf
c00245fb:	3c 02                	cmp    al,0x2
c00245fd:	75 1b                	jne    c002461a <ATAPI::detectMedia()+0x9c>
c00245ff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024604:	75 2d                	jne    c0024633 <ATAPI::detectMedia()+0xb5>
c0024606:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002460d:	74 24                	je     c0024633 <ATAPI::detectMedia()+0xb5>
c002460f:	83 ec 0c             	sub    esp,0xc
c0024612:	53                   	push   ebx
c0024613:	e8 d4 fe ff ff       	call   c00244ec <ATAPI::diskRemoved()>
c0024618:	eb 16                	jmp    c0024630 <ATAPI::detectMedia()+0xb2>
c002461a:	84 c0                	test   al,al
c002461c:	75 15                	jne    c0024633 <ATAPI::detectMedia()+0xb5>
c002461e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024625:	75 0c                	jne    c0024633 <ATAPI::detectMedia()+0xb5>
c0024627:	83 ec 0c             	sub    esp,0xc
c002462a:	53                   	push   ebx
c002462b:	e8 20 ff ff ff       	call   c0024550 <ATAPI::diskInserted()>
c0024630:	83 c4 10             	add    esp,0x10
c0024633:	83 c4 24             	add    esp,0x24
c0024636:	5b                   	pop    ebx
c0024637:	5e                   	pop    esi
c0024638:	c3                   	ret    
c0024639:	90                   	nop

c002463a <ATAPI::open(int, int, void*)>:
c002463a:	53                   	push   ebx
c002463b:	83 ec 08             	sub    esp,0x8
c002463e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024642:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024646:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002464a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024650:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024656:	c1 e0 06             	shl    eax,0x6
c0024659:	01 d0                	add    eax,edx
c002465b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024662:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024668:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002466f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024679:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002467f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024686:	6a 04                	push   0x4
c0024688:	6a 0c                	push   0xc
c002468a:	51                   	push   ecx
c002468b:	52                   	push   edx
c002468c:	e8 c3 e6 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024691:	90                   	nop
c0024692:	90                   	nop
c0024693:	6a 00                	push   0x0
c0024695:	6a 0c                	push   0xc
c0024697:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002469e:	50                   	push   eax
c002469f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a5:	e8 aa e6 ff ff       	call   c0022d54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246aa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00246b1:	83 c4 14             	add    esp,0x14
c00246b4:	53                   	push   ebx
c00246b5:	e8 c4 fe ff ff       	call   c002457e <ATAPI::detectMedia()>
c00246ba:	31 c0                	xor    eax,eax
c00246bc:	83 c4 18             	add    esp,0x18
c00246bf:	5b                   	pop    ebx
c00246c0:	c3                   	ret    
c00246c1:	90                   	nop

c00246c2 <ATAPI::read(unsigned long long, int, void*)>:
c00246c2:	55                   	push   ebp
c00246c3:	57                   	push   edi
c00246c4:	56                   	push   esi
c00246c5:	53                   	push   ebx
c00246c6:	83 ec 1c             	sub    esp,0x1c
c00246c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246d1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00246d5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00246dc:	74 41                	je     c002471f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00246de:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246e2:	b9 03 00 00 00       	mov    ecx,0x3
c00246e7:	fc                   	cld    
c00246e8:	31 c0                	xor    eax,eax
c00246ea:	86 fb                	xchg   bl,bh
c00246ec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246ee:	c1 c3 10             	rol    ebx,0x10
c00246f1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00246f6:	89 e8                	mov    eax,ebp
c00246f8:	86 fb                	xchg   bl,bh
c00246fa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00246fe:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024702:	50                   	push   eax
c0024703:	50                   	push   eax
c0024704:	55                   	push   ebp
c0024705:	c1 e5 0b             	shl    ebp,0xb
c0024708:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002470c:	6a 00                	push   0x0
c002470e:	55                   	push   ebp
c002470f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024713:	50                   	push   eax
c0024714:	56                   	push   esi
c0024715:	e8 12 fb ff ff       	call   c002422c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002471a:	83 c4 20             	add    esp,0x20
c002471d:	eb 1a                	jmp    c0024739 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002471f:	83 ec 0c             	sub    esp,0xc
c0024722:	56                   	push   esi
c0024723:	e8 56 fe ff ff       	call   c002457e <ATAPI::detectMedia()>
c0024728:	83 c4 10             	add    esp,0x10
c002472b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024732:	75 aa                	jne    c00246de <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024734:	b8 02 00 00 00       	mov    eax,0x2
c0024739:	83 c4 1c             	add    esp,0x1c
c002473c:	5b                   	pop    ebx
c002473d:	5e                   	pop    esi
c002473e:	5f                   	pop    edi
c002473f:	5d                   	pop    ebp
c0024740:	c3                   	ret    
c0024741:	90                   	nop

c0024742 <SATA::close(int, int, void*)>:
c0024742:	83 ec 0c             	sub    esp,0xc
c0024745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024749:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002474f:	85 c0                	test   eax,eax
c0024751:	74 0c                	je     c002475f <SATA::close(int, int, void*)+0x1d>
c0024753:	83 ec 0c             	sub    esp,0xc
c0024756:	8b 10                	mov    edx,DWORD PTR [eax]
c0024758:	50                   	push   eax
c0024759:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002475c:	83 c4 10             	add    esp,0x10
c002475f:	31 c0                	xor    eax,eax
c0024761:	83 c4 0c             	add    esp,0xc
c0024764:	c3                   	ret    
c0024765:	90                   	nop

c0024766 <SATA::powerSaving(PowerSavingLevel)>:
c0024766:	c3                   	ret    
c0024767:	90                   	nop

c0024768 <SATA::open(int, int, void*)>:
c0024768:	56                   	push   esi
c0024769:	53                   	push   ebx
c002476a:	50                   	push   eax
c002476b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002476f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024773:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002477d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024783:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002478d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024791:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002479b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00247a1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00247a8:	e8 93 b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c00247ad:	89 c6                	mov    esi,eax
c00247af:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00247b5:	81 c6 00 10 00 00    	add    esi,0x1000
c00247bb:	e8 80 b1 fe ff       	call   c000f940 <Phys::allocatePage()>
c00247c0:	39 c6                	cmp    esi,eax
c00247c2:	74 10                	je     c00247d4 <SATA::open(int, int, void*)+0x6c>
c00247c4:	83 ec 0c             	sub    esp,0xc
c00247c7:	68 9c be 02 c0       	push   0xc002be9c
c00247cc:	e8 9a 54 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00247d1:	83 c4 10             	add    esp,0x10
c00247d4:	83 ec 0c             	sub    esp,0xc
c00247d7:	6a 02                	push   0x2
c00247d9:	e8 c3 c9 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c00247de:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00247e4:	6a 03                	push   0x3
c00247e6:	50                   	push   eax
c00247e7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00247ed:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c00247f3:	e8 66 d1 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c00247f8:	83 c4 14             	add    esp,0x14
c00247fb:	53                   	push   ebx
c00247fc:	e8 e1 f5 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024801:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024804:	e8 4f 18 ff ff       	call   c0016058 <createPartitionsForDisk(PhysicalDisk*)>
c0024809:	83 c4 14             	add    esp,0x14
c002480c:	31 c0                	xor    eax,eax
c002480e:	5b                   	pop    ebx
c002480f:	5e                   	pop    esi
c0024810:	c3                   	ret    
c0024811:	90                   	nop

c0024812 <SATA::SATA()>:
c0024812:	83 ec 0c             	sub    esp,0xc
c0024815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024819:	83 ec 04             	sub    esp,0x4
c002481c:	68 00 02 00 00       	push   0x200
c0024821:	68 b0 be 02 c0       	push   0xc002beb0
c0024826:	50                   	push   eax
c0024827:	e8 4e f5 fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002482c:	83 c4 10             	add    esp,0x10
c002482f:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c0024834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024838:	89 10                	mov    DWORD PTR [eax],edx
c002483a:	90                   	nop
c002483b:	83 c4 0c             	add    esp,0xc
c002483e:	c3                   	ret    
c002483f:	90                   	nop

c0024840 <SATA::access(unsigned long long, int, void*, bool)>:
c0024840:	55                   	push   ebp
c0024841:	57                   	push   edi
c0024842:	56                   	push   esi
c0024843:	53                   	push   ebx
c0024844:	83 ec 2c             	sub    esp,0x2c
c0024847:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002484b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002484f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024853:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024857:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002485b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024864:	7e 10                	jle    c0024876 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024866:	83 ec 0c             	sub    esp,0xc
c0024869:	68 c0 be 02 c0       	push   0xc002bec0
c002486e:	e8 f8 53 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024873:	83 c4 10             	add    esp,0x10
c0024876:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002487c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024882:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024888:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002488c:	89 d0                	mov    eax,edx
c002488e:	c1 e0 07             	shl    eax,0x7
c0024891:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024895:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002489f:	51                   	push   ecx
c00248a0:	8d 42 02             	lea    eax,[edx+0x2]
c00248a3:	51                   	push   ecx
c00248a4:	c1 e0 07             	shl    eax,0x7
c00248a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00248ab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00248af:	50                   	push   eax
c00248b0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00248b6:	e8 1b f0 ff ff       	call   c00238d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00248bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00248bf:	83 c4 10             	add    esp,0x10
c00248c2:	b8 01 00 00 00       	mov    eax,0x1
c00248c7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00248cc:	0f 84 cb 01 00 00    	je     c0024a9d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00248d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00248d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248da:	c1 e0 09             	shl    eax,0x9
c00248dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00248e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00248e6:	74 0e                	je     c00248f6 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00248e8:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00248ee:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00248f2:	89 c1                	mov    ecx,eax
c00248f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00248f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00248fa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024900:	8d 42 02             	lea    eax,[edx+0x2]
c0024903:	c1 e0 07             	shl    eax,0x7
c0024906:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002490a:	8b 00                	mov    eax,DWORD PTR [eax]
c002490c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024912:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024918:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002491c:	c1 e1 05             	shl    ecx,0x5
c002491f:	01 c8                	add    eax,ecx
c0024921:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024925:	83 e1 01             	and    ecx,0x1
c0024928:	89 ce                	mov    esi,ecx
c002492a:	8a 08                	mov    cl,BYTE PTR [eax]
c002492c:	c1 e6 06             	shl    esi,0x6
c002492f:	83 e1 bf             	and    ecx,0xffffffbf
c0024932:	09 f1                	or     ecx,esi
c0024934:	88 08                	mov    BYTE PTR [eax],cl
c0024936:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024938:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002493e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024944:	89 08                	mov    DWORD PTR [eax],ecx
c0024946:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002494c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024952:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024958:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002495b:	50                   	push   eax
c002495c:	68 90 00 00 00       	push   0x90
c0024961:	6a 00                	push   0x0
c0024963:	56                   	push   esi
c0024964:	e8 e7 bd fd ff       	call   c0000750 <memset>
c0024969:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002496f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024973:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024979:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002497d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024981:	83 c4 10             	add    esp,0x10
c0024984:	48                   	dec    eax
c0024985:	25 ff ff 3f 00       	and    eax,0x3fffff
c002498a:	89 c1                	mov    ecx,eax
c002498c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024992:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024997:	09 c8                	or     eax,ecx
c0024999:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002499f:	66 8b 06             	mov    ax,WORD PTR [esi]
c00249a2:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00249a9:	66 25 00 7f          	and    ax,0x7f00
c00249ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249b1:	66 0d 27 80          	or     ax,0x8027
c00249b5:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00249ba:	66 89 06             	mov    WORD PTR [esi],ax
c00249bd:	19 c0                	sbb    eax,eax
c00249bf:	83 e0 f0             	and    eax,0xfffffff0
c00249c2:	83 c0 35             	add    eax,0x35
c00249c5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00249c8:	89 e8                	mov    eax,ebp
c00249ca:	c1 e8 10             	shr    eax,0x10
c00249cd:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00249d0:	89 e8                	mov    eax,ebp
c00249d2:	c1 e8 18             	shr    eax,0x18
c00249d5:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00249d8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00249dc:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00249df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00249e3:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00249e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249ea:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00249ee:	89 d6                	mov    esi,edx
c00249f0:	31 c0                	xor    eax,eax
c00249f2:	c1 e6 07             	shl    esi,0x7
c00249f5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00249f9:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00249ff:	80 e1 88             	and    cl,0x88
c0024a02:	74 0a                	je     c0024a0e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024a04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a09:	74 0a                	je     c0024a15 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024a0b:	40                   	inc    eax
c0024a0c:	eb eb                	jmp    c00249f9 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024a0e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a13:	75 0a                	jne    c0024a1f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024a15:	83 ec 0c             	sub    esp,0xc
c0024a18:	68 f9 be 02 c0       	push   0xc002bef9
c0024a1d:	eb 56                	jmp    c0024a75 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024a1f:	b8 01 00 00 00       	mov    eax,0x1
c0024a24:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024a28:	c1 e2 07             	shl    edx,0x7
c0024a2b:	d3 e0                	shl    eax,cl
c0024a2d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024a31:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024a37:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024a3d:	85 c8                	test   eax,ecx
c0024a3f:	74 20                	je     c0024a61 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024a41:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024a47:	0f ba e1 1e          	bt     ecx,0x1e
c0024a4b:	73 ea                	jae    c0024a37 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024a4d:	83 ec 0c             	sub    esp,0xc
c0024a50:	68 07 bf 02 c0       	push   0xc002bf07
c0024a55:	e8 11 52 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024a5a:	83 c4 10             	add    esp,0x10
c0024a5d:	31 c0                	xor    eax,eax
c0024a5f:	eb 3c                	jmp    c0024a9d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a61:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024a67:	0f ba e0 1e          	bt     eax,0x1e
c0024a6b:	73 17                	jae    c0024a84 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024a6d:	83 ec 0c             	sub    esp,0xc
c0024a70:	68 07 bf 02 c0       	push   0xc002bf07
c0024a75:	e8 f1 51 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024a7a:	83 c4 10             	add    esp,0x10
c0024a7d:	b8 01 00 00 00       	mov    eax,0x1
c0024a82:	eb 19                	jmp    c0024a9d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a84:	31 c0                	xor    eax,eax
c0024a86:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a8b:	75 10                	jne    c0024a9d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a8d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024a93:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024a97:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024a9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024a9d:	83 c4 2c             	add    esp,0x2c
c0024aa0:	5b                   	pop    ebx
c0024aa1:	5e                   	pop    esi
c0024aa2:	5f                   	pop    edi
c0024aa3:	5d                   	pop    ebp
c0024aa4:	c3                   	ret    
c0024aa5:	90                   	nop

c0024aa6 <SATA::read(unsigned long long, int, void*)>:
c0024aa6:	57                   	push   edi
c0024aa7:	b8 04 00 00 00       	mov    eax,0x4
c0024aac:	56                   	push   esi
c0024aad:	53                   	push   ebx
c0024aae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ab2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ab6:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ab9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ac1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024ac7:	77 25                	ja     c0024aee <SATA::read(unsigned long long, int, void*)+0x48>
c0024ac9:	b8 06 00 00 00       	mov    eax,0x6
c0024ace:	85 f6                	test   esi,esi
c0024ad0:	74 1c                	je     c0024aee <SATA::read(unsigned long long, int, void*)+0x48>
c0024ad2:	50                   	push   eax
c0024ad3:	50                   	push   eax
c0024ad4:	6a 00                	push   0x0
c0024ad6:	56                   	push   esi
c0024ad7:	52                   	push   edx
c0024ad8:	53                   	push   ebx
c0024ad9:	51                   	push   ecx
c0024ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ade:	e8 5d fd ff ff       	call   c0024840 <SATA::access(unsigned long long, int, void*, bool)>
c0024ae3:	83 c4 20             	add    esp,0x20
c0024ae6:	85 c0                	test   eax,eax
c0024ae8:	0f 95 c0             	setne  al
c0024aeb:	0f b6 c0             	movzx  eax,al
c0024aee:	5b                   	pop    ebx
c0024aef:	5e                   	pop    esi
c0024af0:	5f                   	pop    edi
c0024af1:	c3                   	ret    

c0024af2 <SATA::write(unsigned long long, int, void*)>:
c0024af2:	55                   	push   ebp
c0024af3:	b8 04 00 00 00       	mov    eax,0x4
c0024af8:	57                   	push   edi
c0024af9:	56                   	push   esi
c0024afa:	53                   	push   ebx
c0024afb:	83 ec 0c             	sub    esp,0xc
c0024afe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b06:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024b09:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024b0d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b11:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024b17:	77 3d                	ja     c0024b56 <SATA::write(unsigned long long, int, void*)+0x64>
c0024b19:	b8 06 00 00 00       	mov    eax,0x6
c0024b1e:	85 ed                	test   ebp,ebp
c0024b20:	74 34                	je     c0024b56 <SATA::write(unsigned long long, int, void*)+0x64>
c0024b22:	c1 e3 09             	shl    ebx,0x9
c0024b25:	01 eb                	add    ebx,ebp
c0024b27:	89 d6                	mov    esi,edx
c0024b29:	89 cf                	mov    edi,ecx
c0024b2b:	83 c6 01             	add    esi,0x1
c0024b2e:	83 d7 00             	adc    edi,0x0
c0024b31:	50                   	push   eax
c0024b32:	50                   	push   eax
c0024b33:	6a 01                	push   0x1
c0024b35:	55                   	push   ebp
c0024b36:	81 c5 00 02 00 00    	add    ebp,0x200
c0024b3c:	6a 01                	push   0x1
c0024b3e:	51                   	push   ecx
c0024b3f:	52                   	push   edx
c0024b40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b44:	e8 f7 fc ff ff       	call   c0024840 <SATA::access(unsigned long long, int, void*, bool)>
c0024b49:	83 c4 20             	add    esp,0x20
c0024b4c:	89 f2                	mov    edx,esi
c0024b4e:	89 f9                	mov    ecx,edi
c0024b50:	39 dd                	cmp    ebp,ebx
c0024b52:	75 d3                	jne    c0024b27 <SATA::write(unsigned long long, int, void*)+0x35>
c0024b54:	31 c0                	xor    eax,eax
c0024b56:	83 c4 0c             	add    esp,0xc
c0024b59:	5b                   	pop    ebx
c0024b5a:	5e                   	pop    esi
c0024b5b:	5f                   	pop    edi
c0024b5c:	5d                   	pop    ebp
c0024b5d:	c3                   	ret    

c0024b5e <SATAPI::write(unsigned long long, int, void*)>:
c0024b5e:	b8 03 00 00 00       	mov    eax,0x3
c0024b63:	c3                   	ret    

c0024b64 <SATAPI::close(int, int, void*)>:
c0024b64:	83 ec 0c             	sub    esp,0xc
c0024b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b71:	85 c0                	test   eax,eax
c0024b73:	74 0c                	je     c0024b81 <SATAPI::close(int, int, void*)+0x1d>
c0024b75:	83 ec 0c             	sub    esp,0xc
c0024b78:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b7a:	50                   	push   eax
c0024b7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b7e:	83 c4 10             	add    esp,0x10
c0024b81:	31 c0                	xor    eax,eax
c0024b83:	83 c4 0c             	add    esp,0xc
c0024b86:	c3                   	ret    
c0024b87:	90                   	nop

c0024b88 <SATAPI::SATAPI()>:
c0024b88:	83 ec 0c             	sub    esp,0xc
c0024b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b8f:	83 ec 04             	sub    esp,0x4
c0024b92:	68 00 08 00 00       	push   0x800
c0024b97:	68 50 bf 02 c0       	push   0xc002bf50
c0024b9c:	50                   	push   eax
c0024b9d:	e8 d8 f1 fe ff       	call   c0013d7a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ba2:	83 c4 10             	add    esp,0x10
c0024ba5:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c0024baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bae:	89 10                	mov    DWORD PTR [eax],edx
c0024bb0:	90                   	nop
c0024bb1:	83 c4 0c             	add    esp,0xc
c0024bb4:	c3                   	ret    
c0024bb5:	90                   	nop

c0024bb6 <SATAPI::diskRemoved()>:
c0024bb6:	83 ec 18             	sub    esp,0x18
c0024bb9:	68 5c bf 02 c0       	push   0xc002bf5c
c0024bbe:	e8 48 d9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bc7:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024bce:	83 c4 1c             	add    esp,0x1c
c0024bd1:	c3                   	ret    

c0024bd2 <SATAPI::diskInserted()>:
c0024bd2:	53                   	push   ebx
c0024bd3:	83 ec 14             	sub    esp,0x14
c0024bd6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024bda:	68 73 bf 02 c0       	push   0xc002bf73
c0024bdf:	e8 27 d9 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024be4:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024beb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bee:	e8 ef f1 fe ff       	call   c0013de2 <PhysicalDisk::startCache()>
c0024bf3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024bf7:	83 c4 18             	add    esp,0x18
c0024bfa:	5b                   	pop    ebx
c0024bfb:	e9 58 14 ff ff       	jmp    c0016058 <createPartitionsForDisk(PhysicalDisk*)>

c0024c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024c00:	55                   	push   ebp
c0024c01:	57                   	push   edi
c0024c02:	56                   	push   esi
c0024c03:	53                   	push   ebx
c0024c04:	83 ec 34             	sub    esp,0x34
c0024c07:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024c0b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024c0f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024c13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c1b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c21:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c2b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024c31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c35:	c1 e0 07             	shl    eax,0x7
c0024c38:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c40:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c4e:	8d 58 02             	lea    ebx,[eax+0x2]
c0024c51:	c1 e3 07             	shl    ebx,0x7
c0024c54:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024c58:	53                   	push   ebx
c0024c59:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c5f:	e8 72 ec ff ff       	call   c00238d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c68:	83 c4 10             	add    esp,0x10
c0024c6b:	b8 01 00 00 00       	mov    eax,0x1
c0024c70:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c75:	0f 84 85 01 00 00    	je     c0024e00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024c7b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c83:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c89:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c8f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024c93:	c1 e1 05             	shl    ecx,0x5
c0024c96:	01 c8                	add    eax,ecx
c0024c98:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c9a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024ca0:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024ca6:	89 08                	mov    DWORD PTR [eax],ecx
c0024ca8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cae:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024cb4:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024cba:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024cbd:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024cc0:	50                   	push   eax
c0024cc1:	68 90 00 00 00       	push   0x90
c0024cc6:	6a 00                	push   0x0
c0024cc8:	53                   	push   ebx
c0024cc9:	e8 82 ba fd ff       	call   c0000750 <memset>
c0024cce:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024cd2:	b9 0c 00 00 00       	mov    ecx,0xc
c0024cd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024cd9:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024cdf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024ce3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ce9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ced:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024cf1:	48                   	dec    eax
c0024cf2:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024cf7:	89 c1                	mov    ecx,eax
c0024cf9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024cff:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d04:	09 c8                	or     eax,ecx
c0024d06:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d0c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d0f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d16:	66 25 00 7f          	and    ax,0x7f00
c0024d1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024d1e:	66 0d 27 80          	or     ax,0x8027
c0024d22:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024d26:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d29:	89 d0                	mov    eax,edx
c0024d2b:	c1 ea 18             	shr    edx,0x18
c0024d2e:	c1 e8 10             	shr    eax,0x10
c0024d31:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d34:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d37:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024d3b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d42:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d45:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024d49:	83 c4 10             	add    esp,0x10
c0024d4c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d50:	31 c0                	xor    eax,eax
c0024d52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024d56:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024d5c:	80 e2 88             	and    dl,0x88
c0024d5f:	74 0a                	je     c0024d6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024d61:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d66:	74 0a                	je     c0024d72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024d68:	40                   	inc    eax
c0024d69:	eb eb                	jmp    c0024d56 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024d6b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d70:	75 0f                	jne    c0024d81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024d72:	83 ec 0c             	sub    esp,0xc
c0024d75:	68 f9 be 02 c0       	push   0xc002bef9
c0024d7a:	e8 ec 4e ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024d7f:	eb 3f                	jmp    c0024dc0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024d81:	ba 01 00 00 00       	mov    edx,0x1
c0024d86:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d8e:	d3 e2                	shl    edx,cl
c0024d90:	c1 e0 07             	shl    eax,0x7
c0024d93:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024d99:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024d9d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024da3:	85 ca                	test   edx,ecx
c0024da5:	74 23                	je     c0024dca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024da7:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024dad:	0f ba e1 1e          	bt     ecx,0x1e
c0024db1:	73 ea                	jae    c0024d9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024db3:	83 ec 0c             	sub    esp,0xc
c0024db6:	68 8b bf 02 c0       	push   0xc002bf8b
c0024dbb:	e8 4b d7 fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0024dc0:	83 c4 10             	add    esp,0x10
c0024dc3:	b8 01 00 00 00       	mov    eax,0x1
c0024dc8:	eb 36                	jmp    c0024e00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024dca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024dd0:	0f ba e0 1e          	bt     eax,0x1e
c0024dd4:	73 0a                	jae    c0024de0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024dd6:	83 ec 0c             	sub    esp,0xc
c0024dd9:	68 9e bf 02 c0       	push   0xc002bf9e
c0024dde:	eb db                	jmp    c0024dbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024de0:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024de5:	74 17                	je     c0024dfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024de7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024dec:	74 10                	je     c0024dfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024dee:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024df4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024df8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024dfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024dfe:	31 c0                	xor    eax,eax
c0024e00:	83 c4 2c             	add    esp,0x2c
c0024e03:	5b                   	pop    ebx
c0024e04:	5e                   	pop    esi
c0024e05:	5f                   	pop    edi
c0024e06:	5d                   	pop    ebp
c0024e07:	c3                   	ret    

c0024e08 <SATAPI::eject()>:
c0024e08:	57                   	push   edi
c0024e09:	b9 03 00 00 00       	mov    ecx,0x3
c0024e0e:	53                   	push   ebx
c0024e0f:	83 ec 14             	sub    esp,0x14
c0024e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024e16:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024e1a:	fc                   	cld    
c0024e1b:	31 c0                	xor    eax,eax
c0024e1d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e1f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024e24:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024e29:	50                   	push   eax
c0024e2a:	6a 00                	push   0x0
c0024e2c:	6a 00                	push   0x0
c0024e2e:	6a 00                	push   0x0
c0024e30:	6a 00                	push   0x0
c0024e32:	6a 02                	push   0x2
c0024e34:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e38:	50                   	push   eax
c0024e39:	53                   	push   ebx
c0024e3a:	e8 c1 fd ff ff       	call   c0024c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e3f:	83 c4 14             	add    esp,0x14
c0024e42:	53                   	push   ebx
c0024e43:	e8 6e fd ff ff       	call   c0024bb6 <SATAPI::diskRemoved()>
c0024e48:	83 c4 24             	add    esp,0x24
c0024e4b:	31 c0                	xor    eax,eax
c0024e4d:	5b                   	pop    ebx
c0024e4e:	5f                   	pop    edi
c0024e4f:	c3                   	ret    

c0024e50 <SATAPI::detectMedia()>:
c0024e50:	56                   	push   esi
c0024e51:	53                   	push   ebx
c0024e52:	83 ec 28             	sub    esp,0x28
c0024e55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e59:	6a 0c                	push   0xc
c0024e5b:	6a 00                	push   0x0
c0024e5d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e61:	56                   	push   esi
c0024e62:	e8 e9 b8 fd ff       	call   c0000750 <memset>
c0024e67:	83 c4 0c             	add    esp,0xc
c0024e6a:	6a 00                	push   0x0
c0024e6c:	6a 00                	push   0x0
c0024e6e:	6a 00                	push   0x0
c0024e70:	6a 00                	push   0x0
c0024e72:	6a 00                	push   0x0
c0024e74:	56                   	push   esi
c0024e75:	53                   	push   ebx
c0024e76:	e8 85 fd ff ff       	call   c0024c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e7b:	83 c4 1c             	add    esp,0x1c
c0024e7e:	6a 0c                	push   0xc
c0024e80:	6a 00                	push   0x0
c0024e82:	56                   	push   esi
c0024e83:	e8 c8 b8 fd ff       	call   c0000750 <memset>
c0024e88:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024e8d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024e92:	83 c4 0c             	add    esp,0xc
c0024e95:	6a 01                	push   0x1
c0024e97:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024e9b:	50                   	push   eax
c0024e9c:	6a 00                	push   0x0
c0024e9e:	6a 00                	push   0x0
c0024ea0:	6a 12                	push   0x12
c0024ea2:	56                   	push   esi
c0024ea3:	53                   	push   ebx
c0024ea4:	e8 57 fd ff ff       	call   c0024c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ea9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ead:	83 c4 20             	add    esp,0x20
c0024eb0:	83 e0 7f             	and    eax,0x7f
c0024eb3:	3c 70                	cmp    al,0x70
c0024eb5:	74 15                	je     c0024ecc <SATAPI::detectMedia()+0x7c>
c0024eb7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ebe:	75 0c                	jne    c0024ecc <SATAPI::detectMedia()+0x7c>
c0024ec0:	83 ec 0c             	sub    esp,0xc
c0024ec3:	53                   	push   ebx
c0024ec4:	e8 09 fd ff ff       	call   c0024bd2 <SATAPI::diskInserted()>
c0024ec9:	83 c4 10             	add    esp,0x10
c0024ecc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ed0:	83 e0 0f             	and    eax,0xf
c0024ed3:	3c 02                	cmp    al,0x2
c0024ed5:	75 1b                	jne    c0024ef2 <SATAPI::detectMedia()+0xa2>
c0024ed7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024edc:	75 2d                	jne    c0024f0b <SATAPI::detectMedia()+0xbb>
c0024ede:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ee5:	74 24                	je     c0024f0b <SATAPI::detectMedia()+0xbb>
c0024ee7:	83 ec 0c             	sub    esp,0xc
c0024eea:	53                   	push   ebx
c0024eeb:	e8 c6 fc ff ff       	call   c0024bb6 <SATAPI::diskRemoved()>
c0024ef0:	eb 16                	jmp    c0024f08 <SATAPI::detectMedia()+0xb8>
c0024ef2:	84 c0                	test   al,al
c0024ef4:	75 15                	jne    c0024f0b <SATAPI::detectMedia()+0xbb>
c0024ef6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024efd:	75 0c                	jne    c0024f0b <SATAPI::detectMedia()+0xbb>
c0024eff:	83 ec 0c             	sub    esp,0xc
c0024f02:	53                   	push   ebx
c0024f03:	e8 ca fc ff ff       	call   c0024bd2 <SATAPI::diskInserted()>
c0024f08:	83 c4 10             	add    esp,0x10
c0024f0b:	83 c4 24             	add    esp,0x24
c0024f0e:	5b                   	pop    ebx
c0024f0f:	5e                   	pop    esi
c0024f10:	c3                   	ret    
c0024f11:	90                   	nop

c0024f12 <SATAPI::open(int, int, void*)>:
c0024f12:	56                   	push   esi
c0024f13:	53                   	push   ebx
c0024f14:	50                   	push   eax
c0024f15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f1d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024f27:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f2d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f3b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f45:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f4b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f52:	e8 e9 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f57:	89 c6                	mov    esi,eax
c0024f59:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f5f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f65:	e8 d6 a9 fe ff       	call   c000f940 <Phys::allocatePage()>
c0024f6a:	39 c6                	cmp    esi,eax
c0024f6c:	74 10                	je     c0024f7e <SATAPI::open(int, int, void*)+0x6c>
c0024f6e:	83 ec 0c             	sub    esp,0xc
c0024f71:	68 b3 bf 02 c0       	push   0xc002bfb3
c0024f76:	e8 f0 4c ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024f7b:	83 c4 10             	add    esp,0x10
c0024f7e:	83 ec 0c             	sub    esp,0xc
c0024f81:	6a 02                	push   0x2
c0024f83:	e8 19 c2 fe ff       	call   c00111a1 <Virt::allocateKernelVirtualPages(int)>
c0024f88:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024f8e:	6a 03                	push   0x3
c0024f90:	50                   	push   eax
c0024f91:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024f97:	ff 35 10 d7 02 c0    	push   DWORD PTR ds:0xc002d710
c0024f9d:	e8 bc c9 fe ff       	call   c001195e <VAS::mapPage(unsigned long, unsigned long, int)>
c0024fa2:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024fa9:	83 c4 14             	add    esp,0x14
c0024fac:	53                   	push   ebx
c0024fad:	e8 9e fe ff ff       	call   c0024e50 <SATAPI::detectMedia()>
c0024fb2:	83 c4 14             	add    esp,0x14
c0024fb5:	31 c0                	xor    eax,eax
c0024fb7:	5b                   	pop    ebx
c0024fb8:	5e                   	pop    esi
c0024fb9:	c3                   	ret    

c0024fba <SATAPI::read(unsigned long long, int, void*)>:
c0024fba:	55                   	push   ebp
c0024fbb:	57                   	push   edi
c0024fbc:	56                   	push   esi
c0024fbd:	53                   	push   ebx
c0024fbe:	83 ec 1c             	sub    esp,0x1c
c0024fc1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024fc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024fc9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024fcd:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024fd4:	74 19                	je     c0024fef <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024fd6:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024fdb:	7e 2e                	jle    c002500b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fdd:	83 ec 0c             	sub    esp,0xc
c0024fe0:	68 c9 bf 02 c0       	push   0xc002bfc9
c0024fe5:	e8 81 4c ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0024fea:	83 c4 10             	add    esp,0x10
c0024fed:	eb 1c                	jmp    c002500b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024fef:	83 ec 0c             	sub    esp,0xc
c0024ff2:	55                   	push   ebp
c0024ff3:	e8 58 fe ff ff       	call   c0024e50 <SATAPI::detectMedia()>
c0024ff8:	83 c4 10             	add    esp,0x10
c0024ffb:	b8 02 00 00 00       	mov    eax,0x2
c0025000:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025007:	75 cd                	jne    c0024fd6 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025009:	eb 49                	jmp    c0025054 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002500b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002500f:	b9 03 00 00 00       	mov    ecx,0x3
c0025014:	fc                   	cld    
c0025015:	31 c0                	xor    eax,eax
c0025017:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025019:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002501e:	89 d8                	mov    eax,ebx
c0025020:	86 e0                	xchg   al,ah
c0025022:	c1 c0 10             	rol    eax,0x10
c0025025:	86 e0                	xchg   al,ah
c0025027:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002502b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002502f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025033:	50                   	push   eax
c0025034:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025038:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002503c:	56                   	push   esi
c002503d:	53                   	push   ebx
c002503e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025042:	c1 e0 0b             	shl    eax,0xb
c0025045:	50                   	push   eax
c0025046:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002504a:	50                   	push   eax
c002504b:	55                   	push   ebp
c002504c:	e8 af fb ff ff       	call   c0024c00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025051:	83 c4 20             	add    esp,0x20
c0025054:	83 c4 1c             	add    esp,0x1c
c0025057:	5b                   	pop    ebx
c0025058:	5e                   	pop    esi
c0025059:	5f                   	pop    edi
c002505a:	5d                   	pop    ebp
c002505b:	c3                   	ret    

c002505c <AVX::open(int, int, void*)>:
c002505c:	83 ec 0c             	sub    esp,0xc
c002505f:	e8 44 11 00 00       	call   c00261a8 <avxInit>
c0025064:	b8 00 00 00 00       	mov    eax,0x0
c0025069:	83 c4 0c             	add    esp,0xc
c002506c:	c3                   	ret    
c002506d:	90                   	nop

c002506e <AVX::close(int, int, void*)>:
c002506e:	83 ec 0c             	sub    esp,0xc
c0025071:	e8 33 11 00 00       	call   c00261a9 <avxClose>
c0025076:	b8 00 00 00 00       	mov    eax,0x0
c002507b:	83 c4 0c             	add    esp,0xc
c002507e:	c3                   	ret    
c002507f:	90                   	nop

c0025080 <AVX::available()>:
c0025080:	83 ec 0c             	sub    esp,0xc
c0025083:	e8 18 11 00 00       	call   c00261a0 <avxDetect>
c0025088:	85 c0                	test   eax,eax
c002508a:	0f 95 c0             	setne  al
c002508d:	83 c4 0c             	add    esp,0xc
c0025090:	c3                   	ret    
c0025091:	90                   	nop

c0025092 <AVX::save(void*)>:
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025099:	83 ec 0c             	sub    esp,0xc
c002509c:	50                   	push   eax
c002509d:	e8 04 11 00 00       	call   c00261a6 <avxSave>
c00250a2:	83 c4 10             	add    esp,0x10
c00250a5:	90                   	nop
c00250a6:	83 c4 0c             	add    esp,0xc
c00250a9:	c3                   	ret    

c00250aa <AVX::load(void*)>:
c00250aa:	83 ec 0c             	sub    esp,0xc
c00250ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250b1:	83 ec 0c             	sub    esp,0xc
c00250b4:	50                   	push   eax
c00250b5:	e8 ed 10 00 00       	call   c00261a7 <avxLoad>
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	90                   	nop
c00250be:	83 c4 0c             	add    esp,0xc
c00250c1:	c3                   	ret    

c00250c2 <AVX::AVX()>:
c00250c2:	83 ec 0c             	sub    esp,0xc
c00250c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c9:	83 ec 08             	sub    esp,0x8
c00250cc:	68 2c c0 02 c0       	push   0xc002c02c
c00250d1:	50                   	push   eax
c00250d2:	e8 81 ed fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c00250d7:	83 c4 10             	add    esp,0x10
c00250da:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c00250df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e3:	89 10                	mov    DWORD PTR [eax],edx
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

c00250ea <MMX::available()>:
c00250ea:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00250ef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00250f5:	83 e0 20             	and    eax,0x20
c00250f8:	84 c0                	test   al,al
c00250fa:	0f 95 c0             	setne  al
c00250fd:	c3                   	ret    

c00250fe <MMX::open(int, int, void*)>:
c00250fe:	83 ec 0c             	sub    esp,0xc
c0025101:	e8 2c 11 00 00       	call   c0026232 <x87Init>
c0025106:	b8 00 00 00 00       	mov    eax,0x0
c002510b:	83 c4 0c             	add    esp,0xc
c002510e:	c3                   	ret    
c002510f:	90                   	nop

c0025110 <MMX::close(int, int, void*)>:
c0025110:	83 ec 0c             	sub    esp,0xc
c0025113:	e8 34 11 00 00       	call   c002624c <x87Close>
c0025118:	b8 00 00 00 00       	mov    eax,0x0
c002511d:	83 c4 0c             	add    esp,0xc
c0025120:	c3                   	ret    
c0025121:	90                   	nop

c0025122 <MMX::save(void*)>:
c0025122:	83 ec 0c             	sub    esp,0xc
c0025125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025129:	83 ec 0c             	sub    esp,0xc
c002512c:	50                   	push   eax
c002512d:	e8 ef 10 00 00       	call   c0026221 <x87Save>
c0025132:	83 c4 10             	add    esp,0x10
c0025135:	90                   	nop
c0025136:	83 c4 0c             	add    esp,0xc
c0025139:	c3                   	ret    

c002513a <MMX::load(void*)>:
c002513a:	83 ec 0c             	sub    esp,0xc
c002513d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025141:	83 ec 0c             	sub    esp,0xc
c0025144:	50                   	push   eax
c0025145:	e8 e0 10 00 00       	call   c002622a <x87Load>
c002514a:	83 c4 10             	add    esp,0x10
c002514d:	90                   	nop
c002514e:	83 c4 0c             	add    esp,0xc
c0025151:	c3                   	ret    

c0025152 <MMX::MMX()>:
c0025152:	83 ec 0c             	sub    esp,0xc
c0025155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025159:	83 ec 08             	sub    esp,0x8
c002515c:	68 6c c0 02 c0       	push   0xc002c06c
c0025161:	50                   	push   eax
c0025162:	e8 f1 ec fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c0025167:	83 c4 10             	add    esp,0x10
c002516a:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c002516f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025173:	89 10                	mov    DWORD PTR [eax],edx
c0025175:	90                   	nop
c0025176:	83 c4 0c             	add    esp,0xc
c0025179:	c3                   	ret    

c002517a <SSE::open(int, int, void*)>:
c002517a:	83 ec 0c             	sub    esp,0xc
c002517d:	e8 62 10 00 00       	call   c00261e4 <sseInit>
c0025182:	b8 00 00 00 00       	mov    eax,0x0
c0025187:	83 c4 0c             	add    esp,0xc
c002518a:	c3                   	ret    
c002518b:	90                   	nop

c002518c <SSE::close(int, int, void*)>:
c002518c:	83 ec 0c             	sub    esp,0xc
c002518f:	e8 60 10 00 00       	call   c00261f4 <sseClose>
c0025194:	b8 00 00 00 00       	mov    eax,0x0
c0025199:	83 c4 0c             	add    esp,0xc
c002519c:	c3                   	ret    
c002519d:	90                   	nop

c002519e <SSE::available()>:
c002519e:	83 ec 1c             	sub    esp,0x1c
c00251a1:	e8 1a 10 00 00       	call   c00261c0 <absolutelyNoChanceInHell>
c00251a6:	85 c0                	test   eax,eax
c00251a8:	0f 95 c0             	setne  al
c00251ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00251af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00251b3:	83 c4 1c             	add    esp,0x1c
c00251b6:	c3                   	ret    
c00251b7:	90                   	nop

c00251b8 <SSE::save(void*)>:
c00251b8:	83 ec 0c             	sub    esp,0xc
c00251bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251bf:	83 ec 0c             	sub    esp,0xc
c00251c2:	50                   	push   eax
c00251c3:	e8 10 10 00 00       	call   c00261d8 <sseSave>
c00251c8:	83 c4 10             	add    esp,0x10
c00251cb:	90                   	nop
c00251cc:	83 c4 0c             	add    esp,0xc
c00251cf:	c3                   	ret    

c00251d0 <SSE::load(void*)>:
c00251d0:	83 ec 0c             	sub    esp,0xc
c00251d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251d7:	83 ec 0c             	sub    esp,0xc
c00251da:	50                   	push   eax
c00251db:	e8 fe 0f 00 00       	call   c00261de <sseLoad>
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	90                   	nop
c00251e4:	83 c4 0c             	add    esp,0xc
c00251e7:	c3                   	ret    

c00251e8 <SSE::SSE()>:
c00251e8:	83 ec 0c             	sub    esp,0xc
c00251eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ef:	83 ec 08             	sub    esp,0x8
c00251f2:	68 ac c0 02 c0       	push   0xc002c0ac
c00251f7:	50                   	push   eax
c00251f8:	e8 5b ec fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c00251fd:	83 c4 10             	add    esp,0x10
c0025200:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0025205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025209:	89 10                	mov    DWORD PTR [eax],edx
c002520b:	90                   	nop
c002520c:	83 c4 0c             	add    esp,0xc
c002520f:	c3                   	ret    

c0025210 <x87::open(int, int, void*)>:
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	e8 1a 10 00 00       	call   c0026232 <x87Init>
c0025218:	b8 00 00 00 00       	mov    eax,0x0
c002521d:	83 c4 0c             	add    esp,0xc
c0025220:	c3                   	ret    
c0025221:	90                   	nop

c0025222 <x87::close(int, int, void*)>:
c0025222:	83 ec 0c             	sub    esp,0xc
c0025225:	e8 22 10 00 00       	call   c002624c <x87Close>
c002522a:	b8 00 00 00 00       	mov    eax,0x0
c002522f:	83 c4 0c             	add    esp,0xc
c0025232:	c3                   	ret    
c0025233:	90                   	nop

c0025234 <x87::available()>:
c0025234:	83 ec 0c             	sub    esp,0xc
c0025237:	e8 ca 0f 00 00       	call   c0026206 <x87Detect>
c002523c:	85 c0                	test   eax,eax
c002523e:	0f 95 c0             	setne  al
c0025241:	83 c4 0c             	add    esp,0xc
c0025244:	c3                   	ret    
c0025245:	90                   	nop

c0025246 <x87::save(void*)>:
c0025246:	83 ec 0c             	sub    esp,0xc
c0025249:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002524d:	83 ec 0c             	sub    esp,0xc
c0025250:	50                   	push   eax
c0025251:	e8 cb 0f 00 00       	call   c0026221 <x87Save>
c0025256:	83 c4 10             	add    esp,0x10
c0025259:	90                   	nop
c002525a:	83 c4 0c             	add    esp,0xc
c002525d:	c3                   	ret    

c002525e <x87::load(void*)>:
c002525e:	83 ec 0c             	sub    esp,0xc
c0025261:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025265:	83 ec 0c             	sub    esp,0xc
c0025268:	50                   	push   eax
c0025269:	e8 bc 0f 00 00       	call   c002622a <x87Load>
c002526e:	83 c4 10             	add    esp,0x10
c0025271:	90                   	nop
c0025272:	83 c4 0c             	add    esp,0xc
c0025275:	c3                   	ret    

c0025276 <x87::x87()>:
c0025276:	83 ec 0c             	sub    esp,0xc
c0025279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527d:	83 ec 08             	sub    esp,0x8
c0025280:	68 ec c0 02 c0       	push   0xc002c0ec
c0025285:	50                   	push   eax
c0025286:	e8 cd eb fe ff       	call   c0013e58 <FPU::FPU(char const*)>
c002528b:	83 c4 10             	add    esp,0x10
c002528e:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0025293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025297:	89 10                	mov    DWORD PTR [eax],edx
c0025299:	90                   	nop
c002529a:	83 c4 0c             	add    esp,0xc
c002529d:	c3                   	ret    

c002529e <APIC::disable()>:
c002529e:	90                   	nop
c002529f:	c3                   	ret    

c00252a0 <APIC::close(int, int, void*)>:
c00252a0:	55                   	push   ebp
c00252a1:	89 e5                	mov    ebp,esp
c00252a3:	83 ec 08             	sub    esp,0x8
c00252a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00252ab:	83 c0 3c             	add    eax,0x3c
c00252ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00252b0:	83 ec 0c             	sub    esp,0xc
c00252b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252b6:	ff d0                	call   eax
c00252b8:	83 c4 10             	add    esp,0x10
c00252bb:	b8 00 00 00 00       	mov    eax,0x0
c00252c0:	c9                   	leave  
c00252c1:	c3                   	ret    

c00252c2 <IOAPIC::close(int, int, void*)>:
c00252c2:	b8 00 00 00 00       	mov    eax,0x0
c00252c7:	c3                   	ret    

c00252c8 <APIC::io_wait()>:
c00252c8:	eb 00                	jmp    c00252ca <APIC::io_wait()+0x2>
c00252ca:	eb 00                	jmp    c00252cc <APIC::io_wait()+0x4>
c00252cc:	90                   	nop
c00252cd:	c3                   	ret    

c00252ce <APIC::getBase()>:
c00252ce:	55                   	push   ebp
c00252cf:	89 e5                	mov    ebp,esp
c00252d1:	83 ec 18             	sub    esp,0x18
c00252d4:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00252d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252df:	83 e0 08             	and    eax,0x8
c00252e2:	84 c0                	test   al,al
c00252e4:	75 07                	jne    c00252ed <APIC::getBase()+0x1f>
c00252e6:	b8 00 00 00 00       	mov    eax,0x0
c00252eb:	eb 21                	jmp    c002530e <APIC::getBase()+0x40>
c00252ed:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c00252f2:	83 ec 08             	sub    esp,0x8
c00252f5:	6a 1b                	push   0x1b
c00252f7:	50                   	push   eax
c00252f8:	e8 43 98 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00252fd:	83 c4 10             	add    esp,0x10
c0025300:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025303:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025306:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025309:	25 00 f0 ff ff       	and    eax,0xfffff000
c002530e:	c9                   	leave  
c002530f:	c3                   	ret    

c0025310 <APIC::eoi(unsigned char)>:
c0025310:	55                   	push   ebp
c0025311:	89 e5                	mov    ebp,esp
c0025313:	83 ec 28             	sub    esp,0x28
c0025316:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025319:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002531c:	83 ec 0c             	sub    esp,0xc
c002531f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025322:	e8 a7 ff ff ff       	call   c00252ce <APIC::getBase()>
c0025327:	83 c4 10             	add    esp,0x10
c002532a:	05 b0 00 00 00       	add    eax,0xb0
c002532f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025335:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002533b:	90                   	nop
c002533c:	c9                   	leave  
c002533d:	c3                   	ret    

c002533e <APIC::open(int, int, void*)>:
c002533e:	55                   	push   ebp
c002533f:	89 e5                	mov    ebp,esp
c0025341:	57                   	push   edi
c0025342:	56                   	push   esi
c0025343:	53                   	push   ebx
c0025344:	83 ec 2c             	sub    esp,0x2c
c0025347:	83 ec 0c             	sub    esp,0xc
c002534a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002534d:	e8 7c ff ff ff       	call   c00252ce <APIC::getBase()>
c0025352:	83 c4 10             	add    esp,0x10
c0025355:	89 c2                	mov    edx,eax
c0025357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002535a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025360:	0f b6 f8             	movzx  edi,al
c0025363:	89 d0                	mov    eax,edx
c0025365:	ba 00 00 00 00       	mov    edx,0x0
c002536a:	89 c1                	mov    ecx,eax
c002536c:	80 e5 ff             	and    ch,0xff
c002536f:	89 cb                	mov    ebx,ecx
c0025371:	0f b6 f2             	movzx  esi,dl
c0025374:	89 d8                	mov    eax,ebx
c0025376:	89 f2                	mov    edx,esi
c0025378:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002537b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002537e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025382:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025386:	83 e0 00             	and    eax,0x0
c0025389:	09 d0                	or     eax,edx
c002538b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002538f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025392:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025398:	8d 50 01             	lea    edx,[eax+0x1]
c002539b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002539e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00253a4:	0f b6 d0             	movzx  edx,al
c00253a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253aa:	83 c2 08             	add    edx,0x8
c00253ad:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00253b1:	0f b6 c9             	movzx  ecx,cl
c00253b4:	81 c9 00 00 01 00    	or     ecx,0x10000
c00253ba:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00253be:	83 ec 0c             	sub    esp,0xc
c00253c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253c4:	e8 05 ff ff ff       	call   c00252ce <APIC::getBase()>
c00253c9:	83 c4 10             	add    esp,0x10
c00253cc:	05 f0 00 00 00       	add    eax,0xf0
c00253d1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00253d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00253d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00253dc:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00253e3:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00253ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253ed:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00253f0:	89 10                	mov    DWORD PTR [eax],edx
c00253f2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00253f9:	a1 70 fe 02 c0       	mov    eax,ds:0xc002fe70
c00253fe:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025401:	7d 7c                	jge    c002547f <APIC::open(int, int, void*)+0x141>
c0025403:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025406:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c002540d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025410:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025413:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c002541a:	c1 e8 08             	shr    eax,0x8
c002541d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025421:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025424:	8b 04 85 80 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0180]
c002542b:	c1 e8 18             	shr    eax,0x18
c002542e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025431:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025435:	75 40                	jne    c0025477 <APIC::open(int, int, void*)+0x139>
c0025437:	83 ec 0c             	sub    esp,0xc
c002543a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002543d:	e8 8c fe ff ff       	call   c00252ce <APIC::getBase()>
c0025442:	83 c4 10             	add    esp,0x10
c0025445:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025449:	75 07                	jne    c0025452 <APIC::open(int, int, void*)+0x114>
c002544b:	ba 60 03 00 00       	mov    edx,0x360
c0025450:	eb 05                	jmp    c0025457 <APIC::open(int, int, void*)+0x119>
c0025452:	ba 50 03 00 00       	mov    edx,0x350
c0025457:	01 d0                	add    eax,edx
c0025459:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002545c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002545f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025461:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025464:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002546b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002546f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025472:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025475:	89 10                	mov    DWORD PTR [eax],edx
c0025477:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002547a:	e9 7a ff ff ff       	jmp    c00253f9 <APIC::open(int, int, void*)+0xbb>
c002547f:	b8 00 00 00 00       	mov    eax,0x0
c0025484:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025487:	5b                   	pop    ebx
c0025488:	5e                   	pop    esi
c0025489:	5f                   	pop    edi
c002548a:	5d                   	pop    ebp
c002548b:	c3                   	ret    

c002548c <IOAPIC::IOAPIC()>:
c002548c:	83 ec 0c             	sub    esp,0xc
c002548f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025493:	83 ec 08             	sub    esp,0x8
c0025496:	68 2c c1 02 c0       	push   0xc002c12c
c002549b:	50                   	push   eax
c002549c:	e8 a7 e6 fe ff       	call   c0013b48 <Device::Device(char const*)>
c00254a1:	83 c4 10             	add    esp,0x10
c00254a4:	ba 54 c2 02 c0       	mov    edx,0xc002c254
c00254a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ad:	89 10                	mov    DWORD PTR [eax],edx
c00254af:	90                   	nop
c00254b0:	83 c4 0c             	add    esp,0xc
c00254b3:	c3                   	ret    

c00254b4 <APIC::APIC()>:
c00254b4:	53                   	push   ebx
c00254b5:	83 ec 18             	sub    esp,0x18
c00254b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254bc:	83 ec 08             	sub    esp,0x8
c00254bf:	68 34 c1 02 c0       	push   0xc002c134
c00254c4:	50                   	push   eax
c00254c5:	e8 e8 ed fe ff       	call   c00142b2 <InterruptController::InterruptController(char const*)>
c00254ca:	83 c4 10             	add    esp,0x10
c00254cd:	ba 0c c2 02 c0       	mov    edx,0xc002c20c
c00254d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254d6:	89 10                	mov    DWORD PTR [eax],edx
c00254d8:	a0 40 19 03 c0       	mov    al,ds:0xc0031940
c00254dd:	83 f0 01             	xor    eax,0x1
c00254e0:	84 c0                	test   al,al
c00254e2:	0f 84 a1 00 00 00    	je     c0025589 <APIC::APIC()+0xd5>
c00254e8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00254ed:	a0 20 ff 02 c0       	mov    al,ds:0xc002ff20
c00254f2:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00254f6:	0f 83 86 00 00 00    	jae    c0025582 <APIC::APIC()+0xce>
c00254fc:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025504:	83 ec 0c             	sub    esp,0xc
c0025507:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002550b:	e8 8c a0 fe ff       	call   c000f59c <malloc>
c0025510:	83 c4 10             	add    esp,0x10
c0025513:	89 c3                	mov    ebx,eax
c0025515:	83 ec 0c             	sub    esp,0xc
c0025518:	53                   	push   ebx
c0025519:	e8 6e ff ff ff       	call   c002548c <IOAPIC::IOAPIC()>
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025525:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002552a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002552e:	89 14 85 20 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6e0],edx
c0025535:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c002553a:	40                   	inc    eax
c002553b:	a3 00 19 03 c0       	mov    ds:0xc0031900,eax
c0025540:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025545:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002554b:	83 ec 08             	sub    esp,0x8
c002554e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025552:	50                   	push   eax
c0025553:	e8 ec e3 fe ff       	call   c0013944 <Device::addChild(Device*)>
c0025558:	83 c4 10             	add    esp,0x10
c002555b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002555f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025561:	83 c0 08             	add    eax,0x8
c0025564:	8b 00                	mov    eax,DWORD PTR [eax]
c0025566:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002556b:	6a 00                	push   0x0
c002556d:	6a 00                	push   0x0
c002556f:	52                   	push   edx
c0025570:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025574:	ff d0                	call   eax
c0025576:	83 c4 10             	add    esp,0x10
c0025579:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002557d:	e9 6b ff ff ff       	jmp    c00254ed <APIC::APIC()+0x39>
c0025582:	c6 05 40 19 03 c0 01 	mov    BYTE PTR ds:0xc0031940,0x1
c0025589:	90                   	nop
c002558a:	83 c4 18             	add    esp,0x18
c002558d:	5b                   	pop    ebx
c002558e:	c3                   	ret    
c002558f:	90                   	nop

c0025590 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025590:	55                   	push   ebp
c0025591:	89 e5                	mov    ebp,esp
c0025593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025596:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002559c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002559f:	72 1d                	jb     c00255be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00255a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255a4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00255aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255ad:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00255b3:	01 d0                	add    eax,edx
c00255b5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00255b8:	73 04                	jae    c00255be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00255ba:	b0 01                	mov    al,0x1
c00255bc:	eb 02                	jmp    c00255c0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00255be:	b0 00                	mov    al,0x0
c00255c0:	5d                   	pop    ebp
c00255c1:	c3                   	ret    

c00255c2 <IOAPIC::read(int)>:
c00255c2:	55                   	push   ebp
c00255c3:	89 e5                	mov    ebp,esp
c00255c5:	83 ec 10             	sub    esp,0x10
c00255c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00255d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00255d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255d7:	0f b6 d0             	movzx  edx,al
c00255da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255dd:	89 10                	mov    DWORD PTR [eax],edx
c00255df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00255e2:	83 c0 10             	add    eax,0x10
c00255e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00255e7:	c9                   	leave  
c00255e8:	c3                   	ret    
c00255e9:	90                   	nop

c00255ea <IOAPIC::open(int, int, void*)>:
c00255ea:	55                   	push   ebp
c00255eb:	89 e5                	mov    ebp,esp
c00255ed:	57                   	push   edi
c00255ee:	56                   	push   esi
c00255ef:	53                   	push   ebx
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	83 ec 0c             	sub    esp,0xc
c00255f6:	68 5f c1 02 c0       	push   0xc002c15f
c00255fb:	e8 0b cf fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0025600:	83 c4 10             	add    esp,0x10
c0025603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025606:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025609:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025612:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025618:	8b 14 85 60 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd00a0]
c002561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025622:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002562b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025631:	8b 14 85 e0 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0020]
c0025638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002563b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025644:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002564d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025653:	0f b6 f8             	movzx  edi,al
c0025656:	89 d0                	mov    eax,edx
c0025658:	ba 00 00 00 00       	mov    edx,0x0
c002565d:	89 c1                	mov    ecx,eax
c002565f:	80 e5 ff             	and    ch,0xff
c0025662:	89 cb                	mov    ebx,ecx
c0025664:	0f b6 f2             	movzx  esi,dl
c0025667:	89 d8                	mov    eax,ebx
c0025669:	89 f2                	mov    edx,esi
c002566b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002566e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025671:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025675:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025679:	83 e0 00             	and    eax,0x0
c002567c:	09 d0                	or     eax,edx
c002567e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025685:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002568b:	8d 50 01             	lea    edx,[eax+0x1]
c002568e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025691:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025697:	0f b6 d0             	movzx  edx,al
c002569a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002569d:	83 c2 08             	add    edx,0x8
c00256a0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256a4:	0f b6 c9             	movzx  ecx,cl
c00256a7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00256ad:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256b1:	83 ec 08             	sub    esp,0x8
c00256b4:	6a 01                	push   0x1
c00256b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256b9:	e8 04 ff ff ff       	call   c00255c2 <IOAPIC::read(int)>
c00256be:	83 c4 10             	add    esp,0x10
c00256c1:	c1 f8 10             	sar    eax,0x10
c00256c4:	0f b6 c0             	movzx  eax,al
c00256c7:	8d 50 01             	lea    edx,[eax+0x1]
c00256ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256cd:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00256d3:	b8 00 00 00 00       	mov    eax,0x0
c00256d8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256db:	5b                   	pop    ebx
c00256dc:	5e                   	pop    esi
c00256dd:	5f                   	pop    edi
c00256de:	5d                   	pop    ebp
c00256df:	c3                   	ret    

c00256e0 <IOAPIC::write(int, int)>:
c00256e0:	55                   	push   ebp
c00256e1:	89 e5                	mov    ebp,esp
c00256e3:	83 ec 10             	sub    esp,0x10
c00256e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256f5:	0f b6 d0             	movzx  edx,al
c00256f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256fb:	89 10                	mov    DWORD PTR [eax],edx
c00256fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025700:	8d 50 10             	lea    edx,[eax+0x10]
c0025703:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025706:	89 02                	mov    DWORD PTR [edx],eax
c0025708:	90                   	nop
c0025709:	c9                   	leave  
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002570c:	55                   	push   ebp
c002570d:	89 e5                	mov    ebp,esp
c002570f:	53                   	push   ebx
c0025710:	83 ec 2c             	sub    esp,0x2c
c0025713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025716:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025719:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002571c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002571f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025722:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025725:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025728:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002572b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002572e:	88 d8                	mov    al,bl
c0025730:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025733:	88 c8                	mov    al,cl
c0025735:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025738:	88 d0                	mov    al,dl
c002573a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002573d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025741:	83 c0 08             	add    eax,0x8
c0025744:	01 c0                	add    eax,eax
c0025746:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025749:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002574d:	83 c0 08             	add    eax,0x8
c0025750:	01 c0                	add    eax,eax
c0025752:	40                   	inc    eax
c0025753:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025756:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025759:	50                   	push   eax
c002575a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002575d:	e8 60 fe ff ff       	call   c00255c2 <IOAPIC::read(int)>
c0025762:	83 c4 08             	add    esp,0x8
c0025765:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025768:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002576f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025772:	c1 e0 18             	shl    eax,0x18
c0025775:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025778:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002577b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002577e:	52                   	push   edx
c002577f:	50                   	push   eax
c0025780:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025783:	e8 58 ff ff ff       	call   c00256e0 <IOAPIC::write(int, int)>
c0025788:	83 c4 0c             	add    esp,0xc
c002578b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002578e:	50                   	push   eax
c002578f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025792:	e8 2b fe ff ff       	call   c00255c2 <IOAPIC::read(int)>
c0025797:	83 c4 08             	add    esp,0x8
c002579a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002579d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00257a4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00257ab:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00257b2:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00257b6:	74 09                	je     c00257c1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00257b8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00257bf:	eb 07                	jmp    c00257c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00257c1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00257c8:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00257cc:	74 09                	je     c00257d7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00257ce:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00257d5:	eb 07                	jmp    c00257de <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00257d7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00257de:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00257e5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00257e9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00257ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00257ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257f2:	52                   	push   edx
c00257f3:	50                   	push   eax
c00257f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257f7:	e8 e4 fe ff ff       	call   c00256e0 <IOAPIC::write(int, int)>
c00257fc:	83 c4 0c             	add    esp,0xc
c00257ff:	90                   	nop
c0025800:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025803:	c9                   	leave  
c0025804:	c3                   	ret    
c0025805:	90                   	nop

c0025806 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025806:	55                   	push   ebp
c0025807:	89 e5                	mov    ebp,esp
c0025809:	57                   	push   edi
c002580a:	56                   	push   esi
c002580b:	53                   	push   ebx
c002580c:	83 ec 2c             	sub    esp,0x2c
c002580f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025812:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025815:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025819:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002581d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025821:	74 5a                	je     c002587d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025823:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025827:	7f 44                	jg     c002586d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025829:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002582c:	05 00 c8 02 c0       	add    eax,0xc002c800
c0025831:	8a 00                	mov    al,BYTE PTR [eax]
c0025833:	0f b6 c0             	movzx  eax,al
c0025836:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025839:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002583c:	66 8b 84 00 00 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0100]
c0025844:	0f b7 c0             	movzx  eax,ax
c0025847:	83 e0 02             	and    eax,0x2
c002584a:	85 c0                	test   eax,eax
c002584c:	74 04                	je     c0025852 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002584e:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025855:	66 8b 84 00 00 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0100]
c002585d:	0f b7 c0             	movzx  eax,ax
c0025860:	83 e0 08             	and    eax,0x8
c0025863:	85 c0                	test   eax,eax
c0025865:	74 16                	je     c002587d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025867:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002586b:	eb 10                	jmp    c002587d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002586d:	83 ec 0c             	sub    esp,0xc
c0025870:	68 70 c1 02 c0       	push   0xc002c170
c0025875:	e8 f1 43 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002587a:	83 c4 10             	add    esp,0x10
c002587d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025881:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c0025886:	83 ec 08             	sub    esp,0x8
c0025889:	50                   	push   eax
c002588a:	68 a8 c1 02 c0       	push   0xc002c1a8
c002588f:	e8 77 cc fe ff       	call   c001250b <Dbg::kprintf(char const*, ...)>
c0025894:	83 c4 10             	add    esp,0x10
c0025897:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002589e:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c00258a3:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00258a6:	7d 67                	jge    c002590f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00258a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258ab:	8b 04 85 20 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6e0]
c00258b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258b5:	83 ec 08             	sub    esp,0x8
c00258b8:	52                   	push   edx
c00258b9:	50                   	push   eax
c00258ba:	e8 d1 fc ff ff       	call   c0025590 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00258bf:	83 c4 10             	add    esp,0x10
c00258c2:	84 c0                	test   al,al
c00258c4:	74 44                	je     c002590a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00258c6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258c9:	8b 1c 85 20 19 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce6e0]
c00258d0:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00258d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258d7:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00258db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258de:	83 c0 20             	add    eax,0x20
c00258e1:	0f b6 f0             	movzx  esi,al
c00258e4:	b8 00 00 00 00       	mov    eax,0x0
c00258e9:	99                   	cdq    
c00258ea:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00258ed:	0f b6 c9             	movzx  ecx,cl
c00258f0:	83 ec 04             	sub    esp,0x4
c00258f3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00258f6:	57                   	push   edi
c00258f7:	56                   	push   esi
c00258f8:	52                   	push   edx
c00258f9:	50                   	push   eax
c00258fa:	51                   	push   ecx
c00258fb:	53                   	push   ebx
c00258fc:	e8 0b fe ff ff       	call   c002570c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025901:	83 c4 20             	add    esp,0x20
c0025904:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025908:	eb 05                	jmp    c002590f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002590a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002590d:	eb 8f                	jmp    c002589e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002590f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025912:	83 f0 01             	xor    eax,0x1
c0025915:	84 c0                	test   al,al
c0025917:	74 10                	je     c0025929 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025919:	83 ec 0c             	sub    esp,0xc
c002591c:	68 bf c1 02 c0       	push   0xc002c1bf
c0025921:	e8 45 43 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0025926:	83 c4 10             	add    esp,0x10
c0025929:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002592d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025934:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025938:	7f 65                	jg     c002599f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002593a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002593d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025940:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025947:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002594a:	01 ca                	add    edx,ecx
c002594c:	83 c2 54             	add    edx,0x54
c002594f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025953:	85 c0                	test   eax,eax
c0025955:	75 43                	jne    c002599a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002595a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002595d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025964:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025967:	01 ca                	add    edx,ecx
c0025969:	8d 4a 54             	lea    ecx,[edx+0x54]
c002596c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002596f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025976:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025979:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025980:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025983:	01 ca                	add    edx,ecx
c0025985:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002598b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002598e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025992:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025995:	83 e8 20             	sub    eax,0x20
c0025998:	eb 1a                	jmp    c00259b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002599a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002599d:	eb 95                	jmp    c0025934 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002599f:	83 ec 0c             	sub    esp,0xc
c00259a2:	68 cc c1 02 c0       	push   0xc002c1cc
c00259a7:	e8 bf 42 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00259ac:	83 c4 10             	add    esp,0x10
c00259af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00259b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259b7:	5b                   	pop    ebx
c00259b8:	5e                   	pop    esi
c00259b9:	5f                   	pop    edi
c00259ba:	5d                   	pop    ebp
c00259bb:	c3                   	ret    

c00259bc <PIC::disable()>:
c00259bc:	55                   	push   ebp
c00259bd:	89 e5                	mov    ebp,esp
c00259bf:	83 ec 10             	sub    esp,0x10
c00259c2:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00259c8:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00259cc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00259cf:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00259d3:	ee                   	out    dx,al
c00259d4:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00259da:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00259de:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00259e1:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00259e5:	ee                   	out    dx,al
c00259e6:	90                   	nop
c00259e7:	c9                   	leave  
c00259e8:	c3                   	ret    
c00259e9:	90                   	nop

c00259ea <PIC::close(int, int, void*)>:
c00259ea:	55                   	push   ebp
c00259eb:	89 e5                	mov    ebp,esp
c00259ed:	83 ec 08             	sub    esp,0x8
c00259f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00259f5:	83 c0 3c             	add    eax,0x3c
c00259f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00259fa:	83 ec 0c             	sub    esp,0xc
c00259fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a00:	ff d0                	call   eax
c0025a02:	83 c4 10             	add    esp,0x10
c0025a05:	b8 00 00 00 00       	mov    eax,0x0
c0025a0a:	c9                   	leave  
c0025a0b:	c3                   	ret    

c0025a0c <PIC::PIC()>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a13:	83 ec 08             	sub    esp,0x8
c0025a16:	68 78 c2 02 c0       	push   0xc002c278
c0025a1b:	50                   	push   eax
c0025a1c:	e8 91 e8 fe ff       	call   c00142b2 <InterruptController::InterruptController(char const*)>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0025a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2d:	89 10                	mov    DWORD PTR [eax],edx
c0025a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a39:	0f b6 d0             	movzx  edx,al
c0025a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a40:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a51:	0f b6 d0             	movzx  edx,al
c0025a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a58:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a67:	8d 50 01             	lea    edx,[eax+0x1]
c0025a6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a6e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a74:	0f b6 d0             	movzx  edx,al
c0025a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025a7f:	83 e1 3f             	and    ecx,0x3f
c0025a82:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a90:	0f b6 d0             	movzx  edx,al
c0025a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a97:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025aa8:	0f b6 d0             	movzx  edx,al
c0025aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aaf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025abe:	8d 50 01             	lea    edx,[eax+0x1]
c0025ac1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ac5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025acb:	0f b6 d0             	movzx  edx,al
c0025ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ad6:	83 e1 3f             	and    ecx,0x3f
c0025ad9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025add:	90                   	nop
c0025ade:	83 c4 0c             	add    esp,0xc
c0025ae1:	c3                   	ret    

c0025ae2 <PIC::ioWait()>:
c0025ae2:	eb 00                	jmp    c0025ae4 <PIC::ioWait()+0x2>
c0025ae4:	eb 00                	jmp    c0025ae6 <PIC::ioWait()+0x4>
c0025ae6:	90                   	nop
c0025ae7:	c3                   	ret    

c0025ae8 <PIC::getIRQReg(int)>:
c0025ae8:	55                   	push   ebp
c0025ae9:	89 e5                	mov    ebp,esp
c0025aeb:	83 ec 10             	sub    esp,0x10
c0025aee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025af1:	0f b6 c0             	movzx  eax,al
c0025af4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025afa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025afd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025b00:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025b04:	ee                   	out    dx,al
c0025b05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b08:	0f b6 c0             	movzx  eax,al
c0025b0b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b11:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025b14:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025b17:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025b1b:	ee                   	out    dx,al
c0025b1c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025b22:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025b26:	89 c2                	mov    edx,eax
c0025b28:	ec                   	in     al,dx
c0025b29:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025b2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b2f:	0f b6 c0             	movzx  eax,al
c0025b32:	c1 e0 08             	shl    eax,0x8
c0025b35:	89 c1                	mov    ecx,eax
c0025b37:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025b3d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025b41:	89 c2                	mov    edx,eax
c0025b43:	ec                   	in     al,dx
c0025b44:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025b47:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b4a:	0f b6 c0             	movzx  eax,al
c0025b4d:	09 c8                	or     eax,ecx
c0025b4f:	c9                   	leave  
c0025b50:	c3                   	ret    
c0025b51:	90                   	nop

c0025b52 <PIC::eoi(unsigned char)>:
c0025b52:	55                   	push   ebp
c0025b53:	89 e5                	mov    ebp,esp
c0025b55:	83 ec 14             	sub    esp,0x14
c0025b58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025b5e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b62:	75 1e                	jne    c0025b82 <PIC::eoi(unsigned char)+0x30>
c0025b64:	6a 0b                	push   0xb
c0025b66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b69:	e8 7a ff ff ff       	call   c0025ae8 <PIC::getIRQReg(int)>
c0025b6e:	83 c4 08             	add    esp,0x8
c0025b71:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025b75:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025b79:	25 80 00 00 00       	and    eax,0x80
c0025b7e:	85 c0                	test   eax,eax
c0025b80:	74 5f                	je     c0025be1 <PIC::eoi(unsigned char)+0x8f>
c0025b82:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025b86:	75 2d                	jne    c0025bb5 <PIC::eoi(unsigned char)+0x63>
c0025b88:	6a 0b                	push   0xb
c0025b8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b8d:	e8 56 ff ff ff       	call   c0025ae8 <PIC::getIRQReg(int)>
c0025b92:	83 c4 08             	add    esp,0x8
c0025b95:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025b99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b9c:	66 85 c0             	test   ax,ax
c0025b9f:	78 14                	js     c0025bb5 <PIC::eoi(unsigned char)+0x63>
c0025ba1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ba7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025bab:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bae:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bb2:	ee                   	out    dx,al
c0025bb3:	eb 2d                	jmp    c0025be2 <PIC::eoi(unsigned char)+0x90>
c0025bb5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025bb9:	76 12                	jbe    c0025bcd <PIC::eoi(unsigned char)+0x7b>
c0025bbb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025bc1:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025bc5:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bc8:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bcc:	ee                   	out    dx,al
c0025bcd:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bd3:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025bd7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bda:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bde:	ee                   	out    dx,al
c0025bdf:	eb 01                	jmp    c0025be2 <PIC::eoi(unsigned char)+0x90>
c0025be1:	90                   	nop
c0025be2:	c9                   	leave  
c0025be3:	c3                   	ret    

c0025be4 <PIC::remap()>:
c0025be4:	55                   	push   ebp
c0025be5:	89 e5                	mov    ebp,esp
c0025be7:	83 ec 48             	sub    esp,0x48
c0025bea:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025bf1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025bf8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025bfe:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025c01:	89 c2                	mov    edx,eax
c0025c03:	ec                   	in     al,dx
c0025c04:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025c07:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025c0a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025c0d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025c13:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025c16:	89 c2                	mov    edx,eax
c0025c18:	ec                   	in     al,dx
c0025c19:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025c1c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025c1f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025c22:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025c28:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025c2c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025c2f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025c32:	ee                   	out    dx,al
c0025c33:	83 ec 0c             	sub    esp,0xc
c0025c36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c39:	e8 a4 fe ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025c3e:	83 c4 10             	add    esp,0x10
c0025c41:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025c47:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025c4b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025c4e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c51:	ee                   	out    dx,al
c0025c52:	83 ec 0c             	sub    esp,0xc
c0025c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c58:	e8 85 fe ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025c5d:	83 c4 10             	add    esp,0x10
c0025c60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c63:	0f b6 c0             	movzx  eax,al
c0025c66:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025c6c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025c6f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025c72:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025c75:	ee                   	out    dx,al
c0025c76:	83 ec 0c             	sub    esp,0xc
c0025c79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c7c:	e8 61 fe ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025c81:	83 c4 10             	add    esp,0x10
c0025c84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c87:	0f b6 c0             	movzx  eax,al
c0025c8a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025c90:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025c93:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025c96:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025c99:	ee                   	out    dx,al
c0025c9a:	83 ec 0c             	sub    esp,0xc
c0025c9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ca0:	e8 3d fe ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025ca5:	83 c4 10             	add    esp,0x10
c0025ca8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025cae:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025cb2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025cb5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025cb8:	ee                   	out    dx,al
c0025cb9:	83 ec 0c             	sub    esp,0xc
c0025cbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cbf:	e8 1e fe ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025cc4:	83 c4 10             	add    esp,0x10
c0025cc7:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025ccd:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025cd1:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025cd4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cd7:	ee                   	out    dx,al
c0025cd8:	83 ec 0c             	sub    esp,0xc
c0025cdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cde:	e8 ff fd ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025ce3:	83 c4 10             	add    esp,0x10
c0025ce6:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025cec:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025cf0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025cf3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025cf6:	ee                   	out    dx,al
c0025cf7:	83 ec 0c             	sub    esp,0xc
c0025cfa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cfd:	e8 e0 fd ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025d02:	83 c4 10             	add    esp,0x10
c0025d05:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025d0b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025d0f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025d12:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d15:	ee                   	out    dx,al
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1c:	e8 c1 fd ff ff       	call   c0025ae2 <PIC::ioWait()>
c0025d21:	83 c4 10             	add    esp,0x10
c0025d24:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025d28:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025d2e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025d31:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025d34:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d37:	ee                   	out    dx,al
c0025d38:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025d3c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025d42:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025d45:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025d48:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d4b:	ee                   	out    dx,al
c0025d4c:	90                   	nop
c0025d4d:	c9                   	leave  
c0025d4e:	c3                   	ret    
c0025d4f:	90                   	nop

c0025d50 <PIC::open(int, int, void*)>:
c0025d50:	55                   	push   ebp
c0025d51:	89 e5                	mov    ebp,esp
c0025d53:	83 ec 18             	sub    esp,0x18
c0025d56:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025d5c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025d60:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d63:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d67:	ee                   	out    dx,al
c0025d68:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025d6e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025d72:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d75:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d79:	ee                   	out    dx,al
c0025d7a:	83 ec 0c             	sub    esp,0xc
c0025d7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d80:	e8 5f fe ff ff       	call   c0025be4 <PIC::remap()>
c0025d85:	83 c4 10             	add    esp,0x10
c0025d88:	b8 00 00 00 00       	mov    eax,0x0
c0025d8d:	c9                   	leave  
c0025d8e:	c3                   	ret    
c0025d8f:	90                   	nop

c0025d90 <APICTimer::close(int, int, void*)>:
c0025d90:	b8 00 00 00 00       	mov    eax,0x0
c0025d95:	c3                   	ret    

c0025d96 <apicTimerHandler(regs*, void*)>:
c0025d96:	83 ec 0c             	sub    esp,0xc
c0025d99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d9f:	99                   	cdq    
c0025da0:	52                   	push   edx
c0025da1:	50                   	push   eax
c0025da2:	6a 00                	push   0x0
c0025da4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025da9:	e8 96 07 00 00       	call   c0026544 <__udivdi3>
c0025dae:	83 c4 10             	add    esp,0x10
c0025db1:	83 ec 08             	sub    esp,0x8
c0025db4:	52                   	push   edx
c0025db5:	50                   	push   eax
c0025db6:	e8 42 06 ff ff       	call   c00163fd <timerHandler(unsigned long long)>
c0025dbb:	83 c4 10             	add    esp,0x10
c0025dbe:	90                   	nop
c0025dbf:	83 c4 0c             	add    esp,0xc
c0025dc2:	c3                   	ret    
c0025dc3:	90                   	nop

c0025dc4 <APICTimer::write(int)>:
c0025dc4:	53                   	push   ebx
c0025dc5:	83 ec 28             	sub    esp,0x28
c0025dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025dcc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025dd0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025dd6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025ddb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025de1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025de7:	83 ec 0c             	sub    esp,0xc
c0025dea:	50                   	push   eax
c0025deb:	e8 de f4 ff ff       	call   c00252ce <APIC::getBase()>
c0025df0:	83 c4 10             	add    esp,0x10
c0025df3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025df7:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0025dfc:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0025e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e0e:	05 e0 03 00 00       	add    eax,0x3e0
c0025e13:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e1d:	05 80 03 00 00       	add    eax,0x380
c0025e22:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025e28:	fb                   	sti    
c0025e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e31:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025e36:	83 d2 00             	adc    edx,0x0
c0025e39:	89 c1                	mov    ecx,eax
c0025e3b:	89 d3                	mov    ebx,edx
c0025e3d:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0025e42:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0025e48:	39 c8                	cmp    eax,ecx
c0025e4a:	89 d0                	mov    eax,edx
c0025e4c:	19 d8                	sbb    eax,ebx
c0025e4e:	73 02                	jae    c0025e52 <APICTimer::write(int)+0x8e>
c0025e50:	eb d7                	jmp    c0025e29 <APICTimer::write(int)+0x65>
c0025e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e56:	05 20 03 00 00       	add    eax,0x320
c0025e5b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e65:	05 90 03 00 00       	add    eax,0x390
c0025e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e6c:	f7 d0                	not    eax
c0025e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e72:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e7a:	ba 00 00 00 00       	mov    edx,0x0
c0025e7f:	f7 f3                	div    ebx
c0025e81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025e8f:	0d 00 00 02 00       	or     eax,0x20000
c0025e94:	89 c2                	mov    edx,eax
c0025e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e9a:	05 20 03 00 00       	add    eax,0x320
c0025e9f:	89 10                	mov    DWORD PTR [eax],edx
c0025ea1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ea5:	05 e0 03 00 00       	add    eax,0x3e0
c0025eaa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025eb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025eb4:	05 80 03 00 00       	add    eax,0x380
c0025eb9:	89 c2                	mov    edx,eax
c0025ebb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ebf:	89 02                	mov    DWORD PTR [edx],eax
c0025ec1:	90                   	nop
c0025ec2:	83 c4 28             	add    esp,0x28
c0025ec5:	5b                   	pop    ebx
c0025ec6:	c3                   	ret    
c0025ec7:	90                   	nop

c0025ec8 <APICTimer::open(int, int, void*)>:
c0025ec8:	57                   	push   edi
c0025ec9:	56                   	push   esi
c0025eca:	53                   	push   ebx
c0025ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ed1:	83 c0 24             	add    eax,0x24
c0025ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ed6:	83 ec 08             	sub    esp,0x8
c0025ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025edd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ee1:	ff d0                	call   eax
c0025ee3:	83 c4 10             	add    esp,0x10
c0025ee6:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0025eeb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ef1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ef7:	83 ec 0c             	sub    esp,0xc
c0025efa:	50                   	push   eax
c0025efb:	e8 ce f3 ff ff       	call   c00252ce <APIC::getBase()>
c0025f00:	83 c4 10             	add    esp,0x10
c0025f03:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f0d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f13:	0f b6 f8             	movzx  edi,al
c0025f16:	89 d0                	mov    eax,edx
c0025f18:	ba 00 00 00 00       	mov    edx,0x0
c0025f1d:	89 c1                	mov    ecx,eax
c0025f1f:	80 e5 ff             	and    ch,0xff
c0025f22:	89 cb                	mov    ebx,ecx
c0025f24:	0f b6 f2             	movzx  esi,dl
c0025f27:	89 d8                	mov    eax,ebx
c0025f29:	89 f2                	mov    edx,esi
c0025f2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f2f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f32:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f36:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f3a:	83 e0 00             	and    eax,0x0
c0025f3d:	09 d0                	or     eax,edx
c0025f3f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f47:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0025f50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f54:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f5a:	0f b6 d0             	movzx  edx,al
c0025f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f61:	83 c2 08             	add    edx,0x8
c0025f64:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f68:	0f b6 c9             	movzx  ecx,cl
c0025f6b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025f71:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f7d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f8b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025f91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025f95:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025f9b:	83 ec 0c             	sub    esp,0xc
c0025f9e:	51                   	push   ecx
c0025f9f:	6a 01                	push   0x1
c0025fa1:	68 96 5d 02 c0       	push   0xc0025d96
c0025fa6:	52                   	push   edx
c0025fa7:	50                   	push   eax
c0025fa8:	e8 0f d9 fe ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025fad:	83 c4 20             	add    esp,0x20
c0025fb0:	89 c2                	mov    edx,eax
c0025fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025fbc:	b8 00 00 00 00       	mov    eax,0x0
c0025fc1:	5b                   	pop    ebx
c0025fc2:	5e                   	pop    esi
c0025fc3:	5f                   	pop    edi
c0025fc4:	c3                   	ret    
c0025fc5:	90                   	nop

c0025fc6 <APICTimer::APICTimer()>:
c0025fc6:	83 ec 0c             	sub    esp,0xc
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	83 ec 08             	sub    esp,0x8
c0025fd0:	68 e4 c2 02 c0       	push   0xc002c2e4
c0025fd5:	50                   	push   eax
c0025fd6:	e8 93 03 ff ff       	call   c001636e <Timer::Timer(char const*)>
c0025fdb:	83 c4 10             	add    esp,0x10
c0025fde:	ba f8 c2 02 c0       	mov    edx,0xc002c2f8
c0025fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe7:	89 10                	mov    DWORD PTR [eax],edx
c0025fe9:	90                   	nop
c0025fea:	83 c4 0c             	add    esp,0xc
c0025fed:	c3                   	ret    

c0025fee <PIT::write(int)>:
c0025fee:	83 ec 10             	sub    esp,0x10
c0025ff1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ff5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025ff9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025fff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026003:	a3 44 19 03 c0       	mov    ds:0xc0031944,eax
c0026008:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002600d:	99                   	cdq    
c002600e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026016:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002601d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026022:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026026:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002602b:	ee                   	out    dx,al
c002602c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026030:	0f b6 c0             	movzx  eax,al
c0026033:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002603a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002603e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026042:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026047:	ee                   	out    dx,al
c0026048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002604c:	c1 f8 08             	sar    eax,0x8
c002604f:	0f b6 c0             	movzx  eax,al
c0026052:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026059:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002605d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026061:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026066:	ee                   	out    dx,al
c0026067:	90                   	nop
c0026068:	83 c4 10             	add    esp,0x10
c002606b:	c3                   	ret    

c002606c <pitHandler(regs*, void*)>:
c002606c:	83 ec 0c             	sub    esp,0xc
c002606f:	a1 44 19 03 c0       	mov    eax,ds:0xc0031944
c0026074:	99                   	cdq    
c0026075:	52                   	push   edx
c0026076:	50                   	push   eax
c0026077:	6a 00                	push   0x0
c0026079:	68 00 ca 9a 3b       	push   0x3b9aca00
c002607e:	e8 c1 04 00 00       	call   c0026544 <__udivdi3>
c0026083:	83 c4 10             	add    esp,0x10
c0026086:	83 ec 08             	sub    esp,0x8
c0026089:	52                   	push   edx
c002608a:	50                   	push   eax
c002608b:	e8 6d 03 ff ff       	call   c00163fd <timerHandler(unsigned long long)>
c0026090:	83 c4 10             	add    esp,0x10
c0026093:	90                   	nop
c0026094:	83 c4 0c             	add    esp,0xc
c0026097:	c3                   	ret    

c0026098 <PIT::open(int, int, void*)>:
c0026098:	83 ec 0c             	sub    esp,0xc
c002609b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609f:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a1:	83 c0 24             	add    eax,0x24
c00260a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00260a6:	83 ec 08             	sub    esp,0x8
c00260a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260b1:	ff d0                	call   eax
c00260b3:	83 c4 10             	add    esp,0x10
c00260b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ba:	83 ec 0c             	sub    esp,0xc
c00260bd:	6a 00                	push   0x0
c00260bf:	6a 01                	push   0x1
c00260c1:	68 6c 60 02 c0       	push   0xc002606c
c00260c6:	6a 00                	push   0x0
c00260c8:	50                   	push   eax
c00260c9:	e8 ee d7 fe ff       	call   c00138bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260ce:	83 c4 20             	add    esp,0x20
c00260d1:	89 c2                	mov    edx,eax
c00260d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260dd:	b8 00 00 00 00       	mov    eax,0x0
c00260e2:	83 c4 0c             	add    esp,0xc
c00260e5:	c3                   	ret    

c00260e6 <PIT::close(int, int, void*)>:
c00260e6:	83 ec 0c             	sub    esp,0xc
c00260e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ed:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00260f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260fb:	6a 01                	push   0x1
c00260fd:	68 6c 60 02 c0       	push   0xc002606c
c0026102:	6a 00                	push   0x0
c0026104:	50                   	push   eax
c0026105:	e8 fc d7 fe ff       	call   c0013906 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002610a:	83 c4 10             	add    esp,0x10
c002610d:	b8 00 00 00 00       	mov    eax,0x0
c0026112:	83 c4 0c             	add    esp,0xc
c0026115:	c3                   	ret    

c0026116 <PIT::PIT()>:
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611d:	83 ec 08             	sub    esp,0x8
c0026120:	68 20 c3 02 c0       	push   0xc002c320
c0026125:	50                   	push   eax
c0026126:	e8 43 02 ff ff       	call   c001636e <Timer::Timer(char const*)>
c002612b:	83 c4 10             	add    esp,0x10
c002612e:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0026133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026137:	89 10                	mov    DWORD PTR [eax],edx
c0026139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026143:	0f b6 d0             	movzx  edx,al
c0026146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026155:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002615b:	0f b6 d0             	movzx  edx,al
c002615e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026162:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002616b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026171:	8d 50 01             	lea    edx,[eax+0x1]
c0026174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026178:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002617e:	0f b6 d0             	movzx  edx,al
c0026181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026185:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026189:	83 e1 3f             	and    ecx,0x3f
c002618c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026190:	90                   	nop
c0026191:	83 c4 0c             	add    esp,0xc
c0026194:	c3                   	ret    
c0026195:	66 90                	xchg   ax,ax
c0026197:	66 90                	xchg   ax,ax
c0026199:	66 90                	xchg   ax,ax
c002619b:	66 90                	xchg   ax,ax
c002619d:	66 90                	xchg   ax,ax
c002619f:	90                   	nop

c00261a0 <avxDetect>:
c00261a0:	b8 00 00 00 00       	mov    eax,0x0
c00261a5:	c3                   	ret    

c00261a6 <avxSave>:
c00261a6:	c3                   	ret    

c00261a7 <avxLoad>:
c00261a7:	c3                   	ret    

c00261a8 <avxInit>:
c00261a8:	c3                   	ret    

c00261a9 <avxClose>:
c00261a9:	c3                   	ret    

c00261aa <wouldSheSayYes>:
c00261aa:	c3                   	ret    
c00261ab:	49                   	dec    ecx
c00261ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00261b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00261b4:	75 20                	jne    c00261d6 <sseDetect.noSSE+0x1>
c00261b6:	4e                   	dec    esi
c00261b7:	79 61                	jns    c002621a <x87Detect+0x14>
c00261b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00261be:	66 90                	xchg   ax,ax

c00261c0 <absolutelyNoChanceInHell>:
c00261c0:	b8 01 00 00 00       	mov    eax,0x1
c00261c5:	0f a2                	cpuid  
c00261c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00261cd:	74 06                	je     c00261d5 <sseDetect.noSSE>
c00261cf:	b8 01 00 00 00       	mov    eax,0x1
c00261d4:	c3                   	ret    

c00261d5 <sseDetect.noSSE>:
c00261d5:	31 c0                	xor    eax,eax
c00261d7:	c3                   	ret    

c00261d8 <sseSave>:
c00261d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00261dd:	c3                   	ret    

c00261de <sseLoad>:
c00261de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00261e3:	c3                   	ret    

c00261e4 <sseInit>:
c00261e4:	e8 49 00 00 00       	call   c0026232 <x87Init>
c00261e9:	0f 20 e0             	mov    eax,cr4
c00261ec:	66 0d 00 06          	or     ax,0x600
c00261f0:	0f 22 e0             	mov    cr4,eax
c00261f3:	c3                   	ret    

c00261f4 <sseClose>:
c00261f4:	c3                   	ret    
c00261f5:	66 90                	xchg   ax,ax
c00261f7:	66 90                	xchg   ax,ax
c00261f9:	66 90                	xchg   ax,ax
c00261fb:	66 90                	xchg   ax,ax
c00261fd:	66 90                	xchg   ax,ax
c00261ff:	90                   	nop

c0026200 <value_37F>:
c0026200:	7f 03                	jg     c0026205 <value_37A+0x1>

c0026202 <value_37E>:
c0026202:	7e 03                	jle    c0026207 <x87Detect+0x1>

c0026204 <value_37A>:
c0026204:	7a 03                	jp     c0026209 <x87Detect+0x3>

c0026206 <x87Detect>:
c0026206:	b8 01 00 00 00       	mov    eax,0x1
c002620b:	0f a2                	cpuid  
c002620d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026213:	74 06                	je     c002621b <x87Detect.nox87>
c0026215:	b8 01 00 00 00       	mov    eax,0x1
c002621a:	c3                   	ret    

c002621b <x87Detect.nox87>:
c002621b:	b8 00 00 00 00       	mov    eax,0x0
c0026220:	c3                   	ret    

c0026221 <x87Save>:
c0026221:	55                   	push   ebp
c0026222:	89 e5                	mov    ebp,esp
c0026224:	9b dd 75 08          	fsave  [ebp+0x8]
c0026228:	c9                   	leave  
c0026229:	c3                   	ret    

c002622a <x87Load>:
c002622a:	55                   	push   ebp
c002622b:	89 e5                	mov    ebp,esp
c002622d:	dd 65 08             	frstor [ebp+0x8]
c0026230:	c9                   	leave  
c0026231:	c3                   	ret    

c0026232 <x87Init>:
c0026232:	9b db e3             	finit  
c0026235:	0f 20 c0             	mov    eax,cr0
c0026238:	66 25 fb ff          	and    ax,0xfffb
c002623c:	66 0d 22 00          	or     ax,0x22
c0026240:	0f 22 c0             	mov    cr0,eax
c0026243:	0f 06                	clts   
c0026245:	d9 2d 04 62 02 c0    	fldcw  WORD PTR ds:0xc0026204
c002624b:	c3                   	ret    

c002624c <x87Close>:
c002624c:	c3                   	ret    
c002624d:	66 90                	xchg   ax,ax
c002624f:	90                   	nop

c0026250 <__do_global_ctors_aux>:
c0026250:	a1 44 8e 02 c0       	mov    eax,ds:0xc0028e44
c0026255:	83 f8 ff             	cmp    eax,0xffffffff
c0026258:	74 1a                	je     c0026274 <__do_global_ctors_aux+0x24>
c002625a:	55                   	push   ebp
c002625b:	89 e5                	mov    ebp,esp
c002625d:	53                   	push   ebx
c002625e:	52                   	push   edx
c002625f:	bb 44 8e 02 c0       	mov    ebx,0xc0028e44
c0026264:	ff d0                	call   eax
c0026266:	83 eb 04             	sub    ebx,0x4
c0026269:	8b 03                	mov    eax,DWORD PTR [ebx]
c002626b:	83 f8 ff             	cmp    eax,0xffffffff
c002626e:	75 f4                	jne    c0026264 <__do_global_ctors_aux+0x14>
c0026270:	58                   	pop    eax
c0026271:	5b                   	pop    ebx
c0026272:	5d                   	pop    ebp
c0026273:	c3                   	ret    
c0026274:	c3                   	ret    
c0026275:	66 90                	xchg   ax,ax
c0026277:	90                   	nop

c0026278 <__divdi3>:
c0026278:	55                   	push   ebp
c0026279:	57                   	push   edi
c002627a:	56                   	push   esi
c002627b:	53                   	push   ebx
c002627c:	83 ec 1c             	sub    esp,0x1c
c002627f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026283:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026287:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002628a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002628e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026292:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026296:	85 db                	test   ebx,ebx
c0026298:	0f 88 8e 00 00 00    	js     c002632c <__divdi3+0xb4>
c002629e:	89 dd                	mov    ebp,ebx
c00262a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00262a8:	89 d3                	mov    ebx,edx
c00262aa:	85 d2                	test   edx,edx
c00262ac:	79 0d                	jns    c00262bb <__divdi3+0x43>
c00262ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00262b2:	f7 d8                	neg    eax
c00262b4:	83 d2 00             	adc    edx,0x0
c00262b7:	f7 da                	neg    edx
c00262b9:	89 d3                	mov    ebx,edx
c00262bb:	89 c7                	mov    edi,eax
c00262bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262c0:	85 db                	test   ebx,ebx
c00262c2:	75 48                	jne    c002630c <__divdi3+0x94>
c00262c4:	39 ef                	cmp    edi,ebp
c00262c6:	76 24                	jbe    c00262ec <__divdi3+0x74>
c00262c8:	89 ea                	mov    edx,ebp
c00262ca:	f7 f7                	div    edi
c00262cc:	89 c1                	mov    ecx,eax
c00262ce:	31 f6                	xor    esi,esi
c00262d0:	89 c8                	mov    eax,ecx
c00262d2:	89 f2                	mov    edx,esi
c00262d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262d8:	85 c9                	test   ecx,ecx
c00262da:	74 07                	je     c00262e3 <__divdi3+0x6b>
c00262dc:	f7 d8                	neg    eax
c00262de:	83 d2 00             	adc    edx,0x0
c00262e1:	f7 da                	neg    edx
c00262e3:	83 c4 1c             	add    esp,0x1c
c00262e6:	5b                   	pop    ebx
c00262e7:	5e                   	pop    esi
c00262e8:	5f                   	pop    edi
c00262e9:	5d                   	pop    ebp
c00262ea:	c3                   	ret    
c00262eb:	90                   	nop
c00262ec:	85 ff                	test   edi,edi
c00262ee:	75 0b                	jne    c00262fb <__divdi3+0x83>
c00262f0:	b8 01 00 00 00       	mov    eax,0x1
c00262f5:	31 d2                	xor    edx,edx
c00262f7:	f7 f3                	div    ebx
c00262f9:	89 c7                	mov    edi,eax
c00262fb:	31 d2                	xor    edx,edx
c00262fd:	89 e8                	mov    eax,ebp
c00262ff:	f7 f7                	div    edi
c0026301:	89 c6                	mov    esi,eax
c0026303:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026306:	f7 f7                	div    edi
c0026308:	89 c1                	mov    ecx,eax
c002630a:	eb c4                	jmp    c00262d0 <__divdi3+0x58>
c002630c:	39 eb                	cmp    ebx,ebp
c002630e:	77 3c                	ja     c002634c <__divdi3+0xd4>
c0026310:	0f bd f3             	bsr    esi,ebx
c0026313:	83 f6 1f             	xor    esi,0x1f
c0026316:	75 40                	jne    c0026358 <__divdi3+0xe0>
c0026318:	39 eb                	cmp    ebx,ebp
c002631a:	72 09                	jb     c0026325 <__divdi3+0xad>
c002631c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002631f:	0f 87 97 00 00 00    	ja     c00263bc <__divdi3+0x144>
c0026325:	b9 01 00 00 00       	mov    ecx,0x1
c002632a:	eb a4                	jmp    c00262d0 <__divdi3+0x58>
c002632c:	f7 d9                	neg    ecx
c002632e:	83 d3 00             	adc    ebx,0x0
c0026331:	f7 db                	neg    ebx
c0026333:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026336:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002633a:	89 dd                	mov    ebp,ebx
c002633c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026344:	e9 5f ff ff ff       	jmp    c00262a8 <__divdi3+0x30>
c0026349:	8d 76 00             	lea    esi,[esi+0x0]
c002634c:	31 f6                	xor    esi,esi
c002634e:	31 c9                	xor    ecx,ecx
c0026350:	e9 7b ff ff ff       	jmp    c00262d0 <__divdi3+0x58>
c0026355:	8d 76 00             	lea    esi,[esi+0x0]
c0026358:	b8 20 00 00 00       	mov    eax,0x20
c002635d:	29 f0                	sub    eax,esi
c002635f:	89 f1                	mov    ecx,esi
c0026361:	d3 e3                	shl    ebx,cl
c0026363:	89 fa                	mov    edx,edi
c0026365:	88 c1                	mov    cl,al
c0026367:	d3 ea                	shr    edx,cl
c0026369:	09 da                	or     edx,ebx
c002636b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002636f:	89 f1                	mov    ecx,esi
c0026371:	d3 e7                	shl    edi,cl
c0026373:	89 eb                	mov    ebx,ebp
c0026375:	88 c1                	mov    cl,al
c0026377:	d3 eb                	shr    ebx,cl
c0026379:	89 f1                	mov    ecx,esi
c002637b:	d3 e5                	shl    ebp,cl
c002637d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026380:	88 c1                	mov    cl,al
c0026382:	d3 ea                	shr    edx,cl
c0026384:	09 d5                	or     ebp,edx
c0026386:	89 e8                	mov    eax,ebp
c0026388:	89 da                	mov    edx,ebx
c002638a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002638e:	89 d3                	mov    ebx,edx
c0026390:	89 c5                	mov    ebp,eax
c0026392:	f7 e7                	mul    edi
c0026394:	39 d3                	cmp    ebx,edx
c0026396:	72 18                	jb     c00263b0 <__divdi3+0x138>
c0026398:	74 0a                	je     c00263a4 <__divdi3+0x12c>
c002639a:	89 e9                	mov    ecx,ebp
c002639c:	31 f6                	xor    esi,esi
c002639e:	e9 2d ff ff ff       	jmp    c00262d0 <__divdi3+0x58>
c00263a3:	90                   	nop
c00263a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00263a7:	89 f1                	mov    ecx,esi
c00263a9:	d3 e7                	shl    edi,cl
c00263ab:	39 c7                	cmp    edi,eax
c00263ad:	73 eb                	jae    c002639a <__divdi3+0x122>
c00263af:	90                   	nop
c00263b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00263b3:	31 f6                	xor    esi,esi
c00263b5:	e9 16 ff ff ff       	jmp    c00262d0 <__divdi3+0x58>
c00263ba:	66 90                	xchg   ax,ax
c00263bc:	31 c9                	xor    ecx,ecx
c00263be:	e9 0d ff ff ff       	jmp    c00262d0 <__divdi3+0x58>
c00263c3:	90                   	nop

c00263c4 <__moddi3>:
c00263c4:	55                   	push   ebp
c00263c5:	57                   	push   edi
c00263c6:	56                   	push   esi
c00263c7:	53                   	push   ebx
c00263c8:	83 ec 2c             	sub    esp,0x2c
c00263cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00263cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00263d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00263d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00263db:	85 db                	test   ebx,ebx
c00263dd:	0f 88 85 00 00 00    	js     c0026468 <__moddi3+0xa4>
c00263e3:	89 de                	mov    esi,ebx
c00263e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00263ed:	89 d7                	mov    edi,edx
c00263ef:	85 d2                	test   edx,edx
c00263f1:	79 09                	jns    c00263fc <__moddi3+0x38>
c00263f3:	f7 d8                	neg    eax
c00263f5:	83 d2 00             	adc    edx,0x0
c00263f8:	f7 da                	neg    edx
c00263fa:	89 d7                	mov    edi,edx
c00263fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026400:	89 cd                	mov    ebp,ecx
c0026402:	85 ff                	test   edi,edi
c0026404:	75 52                	jne    c0026458 <__moddi3+0x94>
c0026406:	89 c3                	mov    ebx,eax
c0026408:	39 f0                	cmp    eax,esi
c002640a:	76 24                	jbe    c0026430 <__moddi3+0x6c>
c002640c:	89 c8                	mov    eax,ecx
c002640e:	89 f2                	mov    edx,esi
c0026410:	f7 f3                	div    ebx
c0026412:	89 d6                	mov    esi,edx
c0026414:	89 f0                	mov    eax,esi
c0026416:	31 d2                	xor    edx,edx
c0026418:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002641c:	85 c9                	test   ecx,ecx
c002641e:	74 07                	je     c0026427 <__moddi3+0x63>
c0026420:	f7 d8                	neg    eax
c0026422:	83 d2 00             	adc    edx,0x0
c0026425:	f7 da                	neg    edx
c0026427:	83 c4 2c             	add    esp,0x2c
c002642a:	5b                   	pop    ebx
c002642b:	5e                   	pop    esi
c002642c:	5f                   	pop    edi
c002642d:	5d                   	pop    ebp
c002642e:	c3                   	ret    
c002642f:	90                   	nop
c0026430:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026434:	85 db                	test   ebx,ebx
c0026436:	75 0d                	jne    c0026445 <__moddi3+0x81>
c0026438:	b8 01 00 00 00       	mov    eax,0x1
c002643d:	31 d2                	xor    edx,edx
c002643f:	f7 f7                	div    edi
c0026441:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026445:	89 f0                	mov    eax,esi
c0026447:	31 d2                	xor    edx,edx
c0026449:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002644d:	f7 f7                	div    edi
c002644f:	89 e8                	mov    eax,ebp
c0026451:	f7 f7                	div    edi
c0026453:	89 d6                	mov    esi,edx
c0026455:	eb bd                	jmp    c0026414 <__moddi3+0x50>
c0026457:	90                   	nop
c0026458:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002645c:	39 f7                	cmp    edi,esi
c002645e:	76 20                	jbe    c0026480 <__moddi3+0xbc>
c0026460:	89 c8                	mov    eax,ecx
c0026462:	89 f2                	mov    edx,esi
c0026464:	eb b2                	jmp    c0026418 <__moddi3+0x54>
c0026466:	66 90                	xchg   ax,ax
c0026468:	f7 d9                	neg    ecx
c002646a:	83 d3 00             	adc    ebx,0x0
c002646d:	f7 db                	neg    ebx
c002646f:	89 de                	mov    esi,ebx
c0026471:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026479:	e9 6f ff ff ff       	jmp    c00263ed <__moddi3+0x29>
c002647e:	66 90                	xchg   ax,ax
c0026480:	0f bd c7             	bsr    eax,edi
c0026483:	83 f0 1f             	xor    eax,0x1f
c0026486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002648a:	75 24                	jne    c00264b0 <__moddi3+0xec>
c002648c:	39 f7                	cmp    edi,esi
c002648e:	72 06                	jb     c0026496 <__moddi3+0xd2>
c0026490:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026494:	77 0c                	ja     c00264a2 <__moddi3+0xde>
c0026496:	89 e9                	mov    ecx,ebp
c0026498:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002649c:	19 fe                	sbb    esi,edi
c002649e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00264a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264a6:	89 f2                	mov    edx,esi
c00264a8:	e9 6b ff ff ff       	jmp    c0026418 <__moddi3+0x54>
c00264ad:	8d 76 00             	lea    esi,[esi+0x0]
c00264b0:	b8 20 00 00 00       	mov    eax,0x20
c00264b5:	89 c2                	mov    edx,eax
c00264b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00264bb:	29 da                	sub    edx,ebx
c00264bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00264c1:	88 d9                	mov    cl,bl
c00264c3:	d3 e7                	shl    edi,cl
c00264c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264c9:	88 d1                	mov    cl,dl
c00264cb:	d3 e8                	shr    eax,cl
c00264cd:	09 c7                	or     edi,eax
c00264cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00264d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264d7:	89 d8                	mov    eax,ebx
c00264d9:	88 d9                	mov    cl,bl
c00264db:	d3 e7                	shl    edi,cl
c00264dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00264e1:	89 f3                	mov    ebx,esi
c00264e3:	88 d1                	mov    cl,dl
c00264e5:	d3 eb                	shr    ebx,cl
c00264e7:	89 c7                	mov    edi,eax
c00264e9:	88 c1                	mov    cl,al
c00264eb:	d3 e6                	shl    esi,cl
c00264ed:	89 e8                	mov    eax,ebp
c00264ef:	88 d1                	mov    cl,dl
c00264f1:	d3 e8                	shr    eax,cl
c00264f3:	09 f0                	or     eax,esi
c00264f5:	89 f9                	mov    ecx,edi
c00264f7:	d3 e5                	shl    ebp,cl
c00264f9:	89 da                	mov    edx,ebx
c00264fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00264ff:	89 d3                	mov    ebx,edx
c0026501:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026505:	89 c6                	mov    esi,eax
c0026507:	89 d1                	mov    ecx,edx
c0026509:	39 d3                	cmp    ebx,edx
c002650b:	72 27                	jb     c0026534 <__moddi3+0x170>
c002650d:	74 21                	je     c0026530 <__moddi3+0x16c>
c002650f:	29 f5                	sub    ebp,esi
c0026511:	19 cb                	sbb    ebx,ecx
c0026513:	89 de                	mov    esi,ebx
c0026515:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026519:	d3 e6                	shl    esi,cl
c002651b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002651f:	89 f9                	mov    ecx,edi
c0026521:	d3 ed                	shr    ebp,cl
c0026523:	09 ee                	or     esi,ebp
c0026525:	89 f0                	mov    eax,esi
c0026527:	d3 eb                	shr    ebx,cl
c0026529:	89 da                	mov    edx,ebx
c002652b:	e9 e8 fe ff ff       	jmp    c0026418 <__moddi3+0x54>
c0026530:	39 c5                	cmp    ebp,eax
c0026532:	73 db                	jae    c002650f <__moddi3+0x14b>
c0026534:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026538:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002653c:	89 d1                	mov    ecx,edx
c002653e:	89 c6                	mov    esi,eax
c0026540:	eb cd                	jmp    c002650f <__moddi3+0x14b>
c0026542:	66 90                	xchg   ax,ax

c0026544 <__udivdi3>:
c0026544:	55                   	push   ebp
c0026545:	57                   	push   edi
c0026546:	56                   	push   esi
c0026547:	53                   	push   ebx
c0026548:	83 ec 1c             	sub    esp,0x1c
c002654b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002654f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026553:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026557:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002655b:	85 d2                	test   edx,edx
c002655d:	75 41                	jne    c00265a0 <__udivdi3+0x5c>
c002655f:	39 f7                	cmp    edi,esi
c0026561:	76 15                	jbe    c0026578 <__udivdi3+0x34>
c0026563:	89 e8                	mov    eax,ebp
c0026565:	89 f2                	mov    edx,esi
c0026567:	f7 f7                	div    edi
c0026569:	31 db                	xor    ebx,ebx
c002656b:	89 da                	mov    edx,ebx
c002656d:	83 c4 1c             	add    esp,0x1c
c0026570:	5b                   	pop    ebx
c0026571:	5e                   	pop    esi
c0026572:	5f                   	pop    edi
c0026573:	5d                   	pop    ebp
c0026574:	c3                   	ret    
c0026575:	8d 76 00             	lea    esi,[esi+0x0]
c0026578:	89 f9                	mov    ecx,edi
c002657a:	85 ff                	test   edi,edi
c002657c:	75 0b                	jne    c0026589 <__udivdi3+0x45>
c002657e:	b8 01 00 00 00       	mov    eax,0x1
c0026583:	31 d2                	xor    edx,edx
c0026585:	f7 f7                	div    edi
c0026587:	89 c1                	mov    ecx,eax
c0026589:	31 d2                	xor    edx,edx
c002658b:	89 f0                	mov    eax,esi
c002658d:	f7 f1                	div    ecx
c002658f:	89 c3                	mov    ebx,eax
c0026591:	89 e8                	mov    eax,ebp
c0026593:	f7 f1                	div    ecx
c0026595:	89 da                	mov    edx,ebx
c0026597:	83 c4 1c             	add    esp,0x1c
c002659a:	5b                   	pop    ebx
c002659b:	5e                   	pop    esi
c002659c:	5f                   	pop    edi
c002659d:	5d                   	pop    ebp
c002659e:	c3                   	ret    
c002659f:	90                   	nop
c00265a0:	39 f2                	cmp    edx,esi
c00265a2:	77 1c                	ja     c00265c0 <__udivdi3+0x7c>
c00265a4:	0f bd da             	bsr    ebx,edx
c00265a7:	83 f3 1f             	xor    ebx,0x1f
c00265aa:	75 24                	jne    c00265d0 <__udivdi3+0x8c>
c00265ac:	39 f2                	cmp    edx,esi
c00265ae:	72 08                	jb     c00265b8 <__udivdi3+0x74>
c00265b0:	39 ef                	cmp    edi,ebp
c00265b2:	0f 87 84 00 00 00    	ja     c002663c <__udivdi3+0xf8>
c00265b8:	b8 01 00 00 00       	mov    eax,0x1
c00265bd:	eb ac                	jmp    c002656b <__udivdi3+0x27>
c00265bf:	90                   	nop
c00265c0:	31 db                	xor    ebx,ebx
c00265c2:	31 c0                	xor    eax,eax
c00265c4:	89 da                	mov    edx,ebx
c00265c6:	83 c4 1c             	add    esp,0x1c
c00265c9:	5b                   	pop    ebx
c00265ca:	5e                   	pop    esi
c00265cb:	5f                   	pop    edi
c00265cc:	5d                   	pop    ebp
c00265cd:	c3                   	ret    
c00265ce:	66 90                	xchg   ax,ax
c00265d0:	b8 20 00 00 00       	mov    eax,0x20
c00265d5:	29 d8                	sub    eax,ebx
c00265d7:	88 d9                	mov    cl,bl
c00265d9:	d3 e2                	shl    edx,cl
c00265db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00265df:	89 fa                	mov    edx,edi
c00265e1:	88 c1                	mov    cl,al
c00265e3:	d3 ea                	shr    edx,cl
c00265e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265e9:	09 d1                	or     ecx,edx
c00265eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00265ef:	88 d9                	mov    cl,bl
c00265f1:	d3 e7                	shl    edi,cl
c00265f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265f7:	89 f7                	mov    edi,esi
c00265f9:	88 c1                	mov    cl,al
c00265fb:	d3 ef                	shr    edi,cl
c00265fd:	88 d9                	mov    cl,bl
c00265ff:	d3 e6                	shl    esi,cl
c0026601:	89 ea                	mov    edx,ebp
c0026603:	88 c1                	mov    cl,al
c0026605:	d3 ea                	shr    edx,cl
c0026607:	09 d6                	or     esi,edx
c0026609:	89 f0                	mov    eax,esi
c002660b:	89 fa                	mov    edx,edi
c002660d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026611:	89 d7                	mov    edi,edx
c0026613:	89 c6                	mov    esi,eax
c0026615:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026619:	39 d7                	cmp    edi,edx
c002661b:	72 13                	jb     c0026630 <__udivdi3+0xec>
c002661d:	74 09                	je     c0026628 <__udivdi3+0xe4>
c002661f:	89 f0                	mov    eax,esi
c0026621:	31 db                	xor    ebx,ebx
c0026623:	e9 43 ff ff ff       	jmp    c002656b <__udivdi3+0x27>
c0026628:	88 d9                	mov    cl,bl
c002662a:	d3 e5                	shl    ebp,cl
c002662c:	39 c5                	cmp    ebp,eax
c002662e:	73 ef                	jae    c002661f <__udivdi3+0xdb>
c0026630:	8d 46 ff             	lea    eax,[esi-0x1]
c0026633:	31 db                	xor    ebx,ebx
c0026635:	e9 31 ff ff ff       	jmp    c002656b <__udivdi3+0x27>
c002663a:	66 90                	xchg   ax,ax
c002663c:	31 c0                	xor    eax,eax
c002663e:	e9 28 ff ff ff       	jmp    c002656b <__udivdi3+0x27>
c0026643:	90                   	nop

c0026644 <__umoddi3>:
c0026644:	55                   	push   ebp
c0026645:	57                   	push   edi
c0026646:	56                   	push   esi
c0026647:	53                   	push   ebx
c0026648:	83 ec 1c             	sub    esp,0x1c
c002664b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002664f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026653:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002665b:	89 da                	mov    edx,ebx
c002665d:	85 c0                	test   eax,eax
c002665f:	75 37                	jne    c0026698 <__umoddi3+0x54>
c0026661:	39 df                	cmp    edi,ebx
c0026663:	76 13                	jbe    c0026678 <__umoddi3+0x34>
c0026665:	89 f0                	mov    eax,esi
c0026667:	f7 f7                	div    edi
c0026669:	89 d0                	mov    eax,edx
c002666b:	31 d2                	xor    edx,edx
c002666d:	83 c4 1c             	add    esp,0x1c
c0026670:	5b                   	pop    ebx
c0026671:	5e                   	pop    esi
c0026672:	5f                   	pop    edi
c0026673:	5d                   	pop    ebp
c0026674:	c3                   	ret    
c0026675:	8d 76 00             	lea    esi,[esi+0x0]
c0026678:	89 fd                	mov    ebp,edi
c002667a:	85 ff                	test   edi,edi
c002667c:	75 0b                	jne    c0026689 <__umoddi3+0x45>
c002667e:	b8 01 00 00 00       	mov    eax,0x1
c0026683:	31 d2                	xor    edx,edx
c0026685:	f7 f7                	div    edi
c0026687:	89 c5                	mov    ebp,eax
c0026689:	89 d8                	mov    eax,ebx
c002668b:	31 d2                	xor    edx,edx
c002668d:	f7 f5                	div    ebp
c002668f:	89 f0                	mov    eax,esi
c0026691:	f7 f5                	div    ebp
c0026693:	89 d0                	mov    eax,edx
c0026695:	eb d4                	jmp    c002666b <__umoddi3+0x27>
c0026697:	90                   	nop
c0026698:	89 f1                	mov    ecx,esi
c002669a:	39 d8                	cmp    eax,ebx
c002669c:	76 0a                	jbe    c00266a8 <__umoddi3+0x64>
c002669e:	89 f0                	mov    eax,esi
c00266a0:	83 c4 1c             	add    esp,0x1c
c00266a3:	5b                   	pop    ebx
c00266a4:	5e                   	pop    esi
c00266a5:	5f                   	pop    edi
c00266a6:	5d                   	pop    ebp
c00266a7:	c3                   	ret    
c00266a8:	0f bd e8             	bsr    ebp,eax
c00266ab:	83 f5 1f             	xor    ebp,0x1f
c00266ae:	75 1c                	jne    c00266cc <__umoddi3+0x88>
c00266b0:	39 d8                	cmp    eax,ebx
c00266b2:	72 04                	jb     c00266b8 <__umoddi3+0x74>
c00266b4:	39 f7                	cmp    edi,esi
c00266b6:	77 08                	ja     c00266c0 <__umoddi3+0x7c>
c00266b8:	89 da                	mov    edx,ebx
c00266ba:	29 fe                	sub    esi,edi
c00266bc:	19 c2                	sbb    edx,eax
c00266be:	89 f1                	mov    ecx,esi
c00266c0:	89 c8                	mov    eax,ecx
c00266c2:	83 c4 1c             	add    esp,0x1c
c00266c5:	5b                   	pop    ebx
c00266c6:	5e                   	pop    esi
c00266c7:	5f                   	pop    edi
c00266c8:	5d                   	pop    ebp
c00266c9:	c3                   	ret    
c00266ca:	66 90                	xchg   ax,ax
c00266cc:	ba 20 00 00 00       	mov    edx,0x20
c00266d1:	29 ea                	sub    edx,ebp
c00266d3:	89 e9                	mov    ecx,ebp
c00266d5:	d3 e0                	shl    eax,cl
c00266d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266db:	89 f8                	mov    eax,edi
c00266dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00266e1:	88 d1                	mov    cl,dl
c00266e3:	d3 e8                	shr    eax,cl
c00266e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266e9:	09 c1                	or     ecx,eax
c00266eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266ef:	89 e9                	mov    ecx,ebp
c00266f1:	d3 e7                	shl    edi,cl
c00266f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266f7:	89 d8                	mov    eax,ebx
c00266f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00266fd:	88 d1                	mov    cl,dl
c00266ff:	d3 e8                	shr    eax,cl
c0026701:	89 c7                	mov    edi,eax
c0026703:	89 e9                	mov    ecx,ebp
c0026705:	d3 e3                	shl    ebx,cl
c0026707:	89 f0                	mov    eax,esi
c0026709:	88 d1                	mov    cl,dl
c002670b:	d3 e8                	shr    eax,cl
c002670d:	09 d8                	or     eax,ebx
c002670f:	89 e9                	mov    ecx,ebp
c0026711:	d3 e6                	shl    esi,cl
c0026713:	89 f3                	mov    ebx,esi
c0026715:	89 fa                	mov    edx,edi
c0026717:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002671b:	89 d1                	mov    ecx,edx
c002671d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026721:	89 c6                	mov    esi,eax
c0026723:	89 d7                	mov    edi,edx
c0026725:	39 d1                	cmp    ecx,edx
c0026727:	72 27                	jb     c0026750 <__umoddi3+0x10c>
c0026729:	74 21                	je     c002674c <__umoddi3+0x108>
c002672b:	89 ca                	mov    edx,ecx
c002672d:	29 f3                	sub    ebx,esi
c002672f:	19 fa                	sbb    edx,edi
c0026731:	89 d0                	mov    eax,edx
c0026733:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026737:	d3 e0                	shl    eax,cl
c0026739:	89 e9                	mov    ecx,ebp
c002673b:	d3 eb                	shr    ebx,cl
c002673d:	09 d8                	or     eax,ebx
c002673f:	d3 ea                	shr    edx,cl
c0026741:	83 c4 1c             	add    esp,0x1c
c0026744:	5b                   	pop    ebx
c0026745:	5e                   	pop    esi
c0026746:	5f                   	pop    edi
c0026747:	5d                   	pop    ebp
c0026748:	c3                   	ret    
c0026749:	8d 76 00             	lea    esi,[esi+0x0]
c002674c:	39 c3                	cmp    ebx,eax
c002674e:	73 db                	jae    c002672b <__umoddi3+0xe7>
c0026750:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026754:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026758:	89 d7                	mov    edi,edx
c002675a:	89 c6                	mov    esi,eax
c002675c:	eb cd                	jmp    c002672b <__umoddi3+0xe7>

c002675e <__addsf3>:
c002675e:	55                   	push   ebp
c002675f:	89 e5                	mov    ebp,esp
c0026761:	57                   	push   edi
c0026762:	56                   	push   esi
c0026763:	53                   	push   ebx
c0026764:	83 ec 08             	sub    esp,0x8
c0026767:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002676a:	89 fa                	mov    edx,edi
c002676c:	89 f8                	mov    eax,edi
c002676e:	c1 f8 17             	sar    eax,0x17
c0026771:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026774:	c1 e2 08             	shl    edx,0x8
c0026777:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002677d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026780:	89 de                	mov    esi,ebx
c0026782:	c1 fe 17             	sar    esi,0x17
c0026785:	c1 e3 08             	shl    ebx,0x8
c0026788:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002678e:	31 f0                	xor    eax,esi
c0026790:	0f 88 3b 01 00 00    	js     c00268d1 <__addsf3+0x173>
c0026796:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026799:	29 f1                	sub    ecx,esi
c002679b:	85 c9                	test   ecx,ecx
c002679d:	7e 54                	jle    c00267f3 <__addsf3+0x95>
c002679f:	89 f0                	mov    eax,esi
c00267a1:	84 c0                	test   al,al
c00267a3:	75 10                	jne    c00267b5 <__addsf3+0x57>
c00267a5:	85 db                	test   ebx,ebx
c00267a7:	0f 84 aa 02 00 00    	je     c0026a57 <__addsf3+0x2f9>
c00267ad:	49                   	dec    ecx
c00267ae:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267b1:	74 38                	je     c00267eb <__addsf3+0x8d>
c00267b3:	eb 13                	jmp    c00267c8 <__addsf3+0x6a>
c00267b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00267b8:	f7 d0                	not    eax
c00267ba:	84 c0                	test   al,al
c00267bc:	0f 84 95 02 00 00    	je     c0026a57 <__addsf3+0x2f9>
c00267c2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00267c8:	83 f9 1f             	cmp    ecx,0x1f
c00267cb:	0f 8f 86 02 00 00    	jg     c0026a57 <__addsf3+0x2f9>
c00267d1:	89 de                	mov    esi,ebx
c00267d3:	d3 ee                	shr    esi,cl
c00267d5:	b8 20 00 00 00       	mov    eax,0x20
c00267da:	29 c8                	sub    eax,ecx
c00267dc:	89 c1                	mov    ecx,eax
c00267de:	d3 e3                	shl    ebx,cl
c00267e0:	31 c0                	xor    eax,eax
c00267e2:	85 db                	test   ebx,ebx
c00267e4:	0f 95 c0             	setne  al
c00267e7:	09 f0                	or     eax,esi
c00267e9:	01 d0                	add    eax,edx
c00267eb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00267ee:	e9 b6 00 00 00       	jmp    c00268a9 <__addsf3+0x14b>
c00267f3:	74 5c                	je     c0026851 <__addsf3+0xf3>
c00267f5:	89 f1                	mov    ecx,esi
c00267f7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00267fa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267fd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026801:	75 14                	jne    c0026817 <__addsf3+0xb9>
c0026803:	85 d2                	test   edx,edx
c0026805:	0f 84 4c 02 00 00    	je     c0026a57 <__addsf3+0x2f9>
c002680b:	49                   	dec    ecx
c002680c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002680f:	0f 84 94 00 00 00    	je     c00268a9 <__addsf3+0x14b>
c0026815:	eb 12                	jmp    c0026829 <__addsf3+0xcb>
c0026817:	89 f0                	mov    eax,esi
c0026819:	f7 d0                	not    eax
c002681b:	84 c0                	test   al,al
c002681d:	0f 84 34 02 00 00    	je     c0026a57 <__addsf3+0x2f9>
c0026823:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026829:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002682c:	83 f9 1f             	cmp    ecx,0x1f
c002682f:	0f 8f 22 02 00 00    	jg     c0026a57 <__addsf3+0x2f9>
c0026835:	89 d7                	mov    edi,edx
c0026837:	d3 ef                	shr    edi,cl
c0026839:	b8 20 00 00 00       	mov    eax,0x20
c002683e:	29 c8                	sub    eax,ecx
c0026840:	89 c1                	mov    ecx,eax
c0026842:	d3 e2                	shl    edx,cl
c0026844:	31 c0                	xor    eax,eax
c0026846:	85 d2                	test   edx,edx
c0026848:	0f 95 c0             	setne  al
c002684b:	09 f8                	or     eax,edi
c002684d:	01 d8                	add    eax,ebx
c002684f:	eb 58                	jmp    c00268a9 <__addsf3+0x14b>
c0026851:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026854:	8d 70 01             	lea    esi,[eax+0x1]
c0026857:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002685d:	75 32                	jne    c0026891 <__addsf3+0x133>
c002685f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026863:	75 1f                	jne    c0026884 <__addsf3+0x126>
c0026865:	85 d2                	test   edx,edx
c0026867:	0f 84 e0 01 00 00    	je     c0026a4d <__addsf3+0x2ef>
c002686d:	85 db                	test   ebx,ebx
c002686f:	0f 84 e2 01 00 00    	je     c0026a57 <__addsf3+0x2f9>
c0026875:	89 d0                	mov    eax,edx
c0026877:	01 d8                	add    eax,ebx
c0026879:	0f 89 a9 01 00 00    	jns    c0026a28 <__addsf3+0x2ca>
c002687f:	e9 9d 01 00 00       	jmp    c0026a21 <__addsf3+0x2c3>
c0026884:	85 d2                	test   edx,edx
c0026886:	0f 85 cb 01 00 00    	jne    c0026a57 <__addsf3+0x2f9>
c002688c:	e9 bc 01 00 00       	jmp    c0026a4d <__addsf3+0x2ef>
c0026891:	31 c0                	xor    eax,eax
c0026893:	89 f1                	mov    ecx,esi
c0026895:	f7 d1                	not    ecx
c0026897:	84 c9                	test   cl,cl
c0026899:	0f 84 90 01 00 00    	je     c0026a2f <__addsf3+0x2d1>
c002689f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268a2:	d1 e8                	shr    eax,1
c00268a4:	e9 86 01 00 00       	jmp    c0026a2f <__addsf3+0x2d1>
c00268a9:	85 c0                	test   eax,eax
c00268ab:	0f 89 7e 01 00 00    	jns    c0026a2f <__addsf3+0x2d1>
c00268b1:	46                   	inc    esi
c00268b2:	89 f2                	mov    edx,esi
c00268b4:	f7 d2                	not    edx
c00268b6:	84 d2                	test   dl,dl
c00268b8:	0f 84 6f 01 00 00    	je     c0026a2d <__addsf3+0x2cf>
c00268be:	89 c2                	mov    edx,eax
c00268c0:	83 e2 01             	and    edx,0x1
c00268c3:	d1 e8                	shr    eax,1
c00268c5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00268ca:	09 d0                	or     eax,edx
c00268cc:	e9 5e 01 00 00       	jmp    c0026a2f <__addsf3+0x2d1>
c00268d1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00268d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268d8:	89 f0                	mov    eax,esi
c00268da:	0f b6 c0             	movzx  eax,al
c00268dd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00268e0:	29 c1                	sub    ecx,eax
c00268e2:	85 c9                	test   ecx,ecx
c00268e4:	7e 55                	jle    c002693b <__addsf3+0x1dd>
c00268e6:	85 c0                	test   eax,eax
c00268e8:	75 11                	jne    c00268fb <__addsf3+0x19d>
c00268ea:	85 db                	test   ebx,ebx
c00268ec:	0f 84 65 01 00 00    	je     c0026a57 <__addsf3+0x2f9>
c00268f2:	49                   	dec    ecx
c00268f3:	75 19                	jne    c002690e <__addsf3+0x1b0>
c00268f5:	89 d0                	mov    eax,edx
c00268f7:	29 d8                	sub    eax,ebx
c00268f9:	eb 38                	jmp    c0026933 <__addsf3+0x1d5>
c00268fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268fe:	f7 d0                	not    eax
c0026900:	84 c0                	test   al,al
c0026902:	0f 84 4f 01 00 00    	je     c0026a57 <__addsf3+0x2f9>
c0026908:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002690e:	83 f9 1f             	cmp    ecx,0x1f
c0026911:	0f 8f 40 01 00 00    	jg     c0026a57 <__addsf3+0x2f9>
c0026917:	89 de                	mov    esi,ebx
c0026919:	d3 ee                	shr    esi,cl
c002691b:	b8 20 00 00 00       	mov    eax,0x20
c0026920:	29 c8                	sub    eax,ecx
c0026922:	89 c1                	mov    ecx,eax
c0026924:	d3 e3                	shl    ebx,cl
c0026926:	31 c0                	xor    eax,eax
c0026928:	85 db                	test   ebx,ebx
c002692a:	0f 95 c0             	setne  al
c002692d:	09 f0                	or     eax,esi
c002692f:	29 c2                	sub    edx,eax
c0026931:	89 d0                	mov    eax,edx
c0026933:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026936:	e9 af 00 00 00       	jmp    c00269ea <__addsf3+0x28c>
c002693b:	74 5c                	je     c0026999 <__addsf3+0x23b>
c002693d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026940:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026943:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026947:	75 14                	jne    c002695d <__addsf3+0x1ff>
c0026949:	85 d2                	test   edx,edx
c002694b:	0f 84 06 01 00 00    	je     c0026a57 <__addsf3+0x2f9>
c0026951:	48                   	dec    eax
c0026952:	75 1b                	jne    c002696f <__addsf3+0x211>
c0026954:	89 d8                	mov    eax,ebx
c0026956:	29 d0                	sub    eax,edx
c0026958:	e9 8d 00 00 00       	jmp    c00269ea <__addsf3+0x28c>
c002695d:	89 f1                	mov    ecx,esi
c002695f:	f7 d1                	not    ecx
c0026961:	84 c9                	test   cl,cl
c0026963:	0f 84 ee 00 00 00    	je     c0026a57 <__addsf3+0x2f9>
c0026969:	81 ca 00 00 00 80    	or     edx,0x80000000
c002696f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026972:	83 f8 1f             	cmp    eax,0x1f
c0026975:	0f 8f dc 00 00 00    	jg     c0026a57 <__addsf3+0x2f9>
c002697b:	89 d7                	mov    edi,edx
c002697d:	88 c1                	mov    cl,al
c002697f:	d3 ef                	shr    edi,cl
c0026981:	b9 20 00 00 00       	mov    ecx,0x20
c0026986:	29 c1                	sub    ecx,eax
c0026988:	d3 e2                	shl    edx,cl
c002698a:	31 c0                	xor    eax,eax
c002698c:	85 d2                	test   edx,edx
c002698e:	0f 95 c0             	setne  al
c0026991:	09 f8                	or     eax,edi
c0026993:	29 c3                	sub    ebx,eax
c0026995:	89 d8                	mov    eax,ebx
c0026997:	eb 51                	jmp    c00269ea <__addsf3+0x28c>
c0026999:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002699c:	40                   	inc    eax
c002699d:	a8 fe                	test   al,0xfe
c002699f:	75 3d                	jne    c00269de <__addsf3+0x280>
c00269a1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00269a5:	0f 85 a7 00 00 00    	jne    c0026a52 <__addsf3+0x2f4>
c00269ab:	85 d2                	test   edx,edx
c00269ad:	75 12                	jne    c00269c1 <__addsf3+0x263>
c00269af:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269b2:	85 db                	test   ebx,ebx
c00269b4:	0f 85 9d 00 00 00    	jne    c0026a57 <__addsf3+0x2f9>
c00269ba:	31 ff                	xor    edi,edi
c00269bc:	e9 96 00 00 00       	jmp    c0026a57 <__addsf3+0x2f9>
c00269c1:	85 db                	test   ebx,ebx
c00269c3:	0f 84 8e 00 00 00    	je     c0026a57 <__addsf3+0x2f9>
c00269c9:	89 d0                	mov    eax,edx
c00269cb:	29 d8                	sub    eax,ebx
c00269cd:	79 06                	jns    c00269d5 <__addsf3+0x277>
c00269cf:	89 d8                	mov    eax,ebx
c00269d1:	29 d0                	sub    eax,edx
c00269d3:	eb 5a                	jmp    c0026a2f <__addsf3+0x2d1>
c00269d5:	bf 00 00 00 00       	mov    edi,0x0
c00269da:	74 7b                	je     c0026a57 <__addsf3+0x2f9>
c00269dc:	eb 4a                	jmp    c0026a28 <__addsf3+0x2ca>
c00269de:	89 d0                	mov    eax,edx
c00269e0:	29 d8                	sub    eax,ebx
c00269e2:	79 12                	jns    c00269f6 <__addsf3+0x298>
c00269e4:	89 d8                	mov    eax,ebx
c00269e6:	29 d0                	sub    eax,edx
c00269e8:	eb 09                	jmp    c00269f3 <__addsf3+0x295>
c00269ea:	85 c0                	test   eax,eax
c00269ec:	79 41                	jns    c0026a2f <__addsf3+0x2d1>
c00269ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00269f3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00269f6:	31 f6                	xor    esi,esi
c00269f8:	85 c0                	test   eax,eax
c00269fa:	74 33                	je     c0026a2f <__addsf3+0x2d1>
c00269fc:	0f bd c8             	bsr    ecx,eax
c00269ff:	83 f1 1f             	xor    ecx,0x1f
c0026a02:	d3 e0                	shl    eax,cl
c0026a04:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026a08:	39 ca                	cmp    edx,ecx
c0026a0a:	7f 10                	jg     c0026a1c <__addsf3+0x2be>
c0026a0c:	29 d1                	sub    ecx,edx
c0026a0e:	41                   	inc    ecx
c0026a0f:	d3 e8                	shr    eax,cl
c0026a11:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a14:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026a1a:	eb 13                	jmp    c0026a2f <__addsf3+0x2d1>
c0026a1c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a1f:	29 ce                	sub    esi,ecx
c0026a21:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a26:	eb 07                	jmp    c0026a2f <__addsf3+0x2d1>
c0026a28:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a2b:	eb 02                	jmp    c0026a2f <__addsf3+0x2d1>
c0026a2d:	31 c0                	xor    eax,eax
c0026a2f:	89 c2                	mov    edx,eax
c0026a31:	c1 ea 08             	shr    edx,0x8
c0026a34:	a8 7f                	test   al,0x7f
c0026a36:	0f 95 c1             	setne  cl
c0026a39:	09 d1                	or     ecx,edx
c0026a3b:	83 e1 01             	and    ecx,0x1
c0026a3e:	c1 e8 07             	shr    eax,0x7
c0026a41:	21 c8                	and    eax,ecx
c0026a43:	c1 e6 17             	shl    esi,0x17
c0026a46:	09 d6                	or     esi,edx
c0026a48:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026a4b:	eb 0a                	jmp    c0026a57 <__addsf3+0x2f9>
c0026a4d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a50:	eb 05                	jmp    c0026a57 <__addsf3+0x2f9>
c0026a52:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026a57:	89 f8                	mov    eax,edi
c0026a59:	5a                   	pop    edx
c0026a5a:	59                   	pop    ecx
c0026a5b:	5b                   	pop    ebx
c0026a5c:	5e                   	pop    esi
c0026a5d:	5f                   	pop    edi
c0026a5e:	5d                   	pop    ebp
c0026a5f:	c3                   	ret    

c0026a60 <__subsf3>:
c0026a60:	55                   	push   ebp
c0026a61:	89 e5                	mov    ebp,esp
c0026a63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a66:	05 00 00 00 80       	add    eax,0x80000000
c0026a6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a6e:	5d                   	pop    ebp
c0026a6f:	e9 ea fc ff ff       	jmp    c002675e <__addsf3>

c0026a74 <__negsf2>:
c0026a74:	55                   	push   ebp
c0026a75:	89 e5                	mov    ebp,esp
c0026a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a7a:	05 00 00 00 80       	add    eax,0x80000000
c0026a7f:	5d                   	pop    ebp
c0026a80:	c3                   	ret    

c0026a81 <__mulsf3>:
c0026a81:	55                   	push   ebp
c0026a82:	89 e5                	mov    ebp,esp
c0026a84:	57                   	push   edi
c0026a85:	56                   	push   esi
c0026a86:	53                   	push   ebx
c0026a87:	83 ec 1c             	sub    esp,0x1c
c0026a8a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026a8d:	89 f0                	mov    eax,esi
c0026a8f:	89 f1                	mov    ecx,esi
c0026a91:	c1 f9 17             	sar    ecx,0x17
c0026a94:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026a97:	c1 e0 08             	shl    eax,0x8
c0026a9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026a9f:	89 c1                	mov    ecx,eax
c0026aa1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026aa4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026aa7:	89 c7                	mov    edi,eax
c0026aa9:	c1 ff 17             	sar    edi,0x17
c0026aac:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ab0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026ab3:	89 f8                	mov    eax,edi
c0026ab5:	0f b6 c0             	movzx  eax,al
c0026ab8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026abb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026abf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ac2:	42                   	inc    edx
c0026ac3:	80 e2 fe             	and    dl,0xfe
c0026ac6:	75 7b                	jne    c0026b43 <__mulsf3+0xc2>
c0026ac8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026acc:	74 54                	je     c0026b22 <__mulsf3+0xa1>
c0026ace:	85 c9                	test   ecx,ecx
c0026ad0:	0f 85 64 01 00 00    	jne    c0026c3a <__mulsf3+0x1b9>
c0026ad6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ad9:	80 e2 fe             	and    dl,0xfe
c0026adc:	75 1f                	jne    c0026afd <__mulsf3+0x7c>
c0026ade:	85 c0                	test   eax,eax
c0026ae0:	b8 00 00 00 00       	mov    eax,0x0
c0026ae5:	74 29                	je     c0026b10 <__mulsf3+0x8f>
c0026ae7:	53                   	push   ebx
c0026ae8:	53                   	push   ebx
c0026ae9:	50                   	push   eax
c0026aea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026aed:	e8 96 05 00 00       	call   c0027088 <__nesf2>
c0026af2:	83 c4 10             	add    esp,0x10
c0026af5:	85 c0                	test   eax,eax
c0026af7:	0f 85 3a 01 00 00    	jne    c0026c37 <__mulsf3+0x1b6>
c0026afd:	85 ff                	test   edi,edi
c0026aff:	0f 89 35 01 00 00    	jns    c0026c3a <__mulsf3+0x1b9>
c0026b05:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026b0b:	e9 2a 01 00 00       	jmp    c0026c3a <__mulsf3+0x1b9>
c0026b10:	51                   	push   ecx
c0026b11:	51                   	push   ecx
c0026b12:	50                   	push   eax
c0026b13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b16:	e8 6d 05 00 00       	call   c0027088 <__nesf2>
c0026b1b:	83 c4 10             	add    esp,0x10
c0026b1e:	85 c0                	test   eax,eax
c0026b20:	eb 15                	jmp    c0026b37 <__mulsf3+0xb6>
c0026b22:	85 c9                	test   ecx,ecx
c0026b24:	74 0b                	je     c0026b31 <__mulsf3+0xb0>
c0026b26:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026b29:	01 c9                	add    ecx,ecx
c0026b2b:	78 16                	js     c0026b43 <__mulsf3+0xc2>
c0026b2d:	89 d3                	mov    ebx,edx
c0026b2f:	eb f5                	jmp    c0026b26 <__mulsf3+0xa5>
c0026b31:	89 f8                	mov    eax,edi
c0026b33:	f7 d0                	not    eax
c0026b35:	84 c0                	test   al,al
c0026b37:	75 c4                	jne    c0026afd <__mulsf3+0x7c>
c0026b39:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026b3e:	e9 f7 00 00 00       	jmp    c0026c3a <__mulsf3+0x1b9>
c0026b43:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b46:	c1 e6 08             	shl    esi,0x8
c0026b49:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026b4f:	8d 57 01             	lea    edx,[edi+0x1]
c0026b52:	80 e2 fe             	and    dl,0xfe
c0026b55:	75 63                	jne    c0026bba <__mulsf3+0x139>
c0026b57:	85 c0                	test   eax,eax
c0026b59:	74 2f                	je     c0026b8a <__mulsf3+0x109>
c0026b5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b5f:	0f 89 d2 00 00 00    	jns    c0026c37 <__mulsf3+0x1b6>
c0026b65:	52                   	push   edx
c0026b66:	52                   	push   edx
c0026b67:	6a 00                	push   0x0
c0026b69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b6c:	e8 dc 04 00 00       	call   c002704d <__eqsf2>
c0026b71:	83 c4 10             	add    esp,0x10
c0026b74:	85 c0                	test   eax,eax
c0026b76:	0f 85 bb 00 00 00    	jne    c0026c37 <__mulsf3+0x1b6>
c0026b7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b7f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026b85:	e9 b0 00 00 00       	jmp    c0026c3a <__mulsf3+0x1b9>
c0026b8a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026b8d:	50                   	push   eax
c0026b8e:	50                   	push   eax
c0026b8f:	6a 00                	push   0x0
c0026b91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b94:	e8 b4 04 00 00       	call   c002704d <__eqsf2>
c0026b99:	83 c4 10             	add    esp,0x10
c0026b9c:	85 c0                	test   eax,eax
c0026b9e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ba1:	75 0c                	jne    c0026baf <__mulsf3+0x12e>
c0026ba3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ba7:	0f 89 8a 00 00 00    	jns    c0026c37 <__mulsf3+0x1b6>
c0026bad:	eb cd                	jmp    c0026b7c <__mulsf3+0xfb>
c0026baf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026bb2:	01 f6                	add    esi,esi
c0026bb4:	78 04                	js     c0026bba <__mulsf3+0x139>
c0026bb6:	89 c3                	mov    ebx,eax
c0026bb8:	eb f5                	jmp    c0026baf <__mulsf3+0x12e>
c0026bba:	89 c8                	mov    eax,ecx
c0026bbc:	0d 00 00 00 80       	or     eax,0x80000000
c0026bc1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026bc7:	f7 e6                	mul    esi
c0026bc9:	85 c0                	test   eax,eax
c0026bcb:	0f 95 c0             	setne  al
c0026bce:	0f b6 c0             	movzx  eax,al
c0026bd1:	09 c2                	or     edx,eax
c0026bd3:	78 03                	js     c0026bd8 <__mulsf3+0x157>
c0026bd5:	01 d2                	add    edx,edx
c0026bd7:	4b                   	dec    ebx
c0026bd8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026bde:	7f 22                	jg     c0026c02 <__mulsf3+0x181>
c0026be0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026be6:	85 db                	test   ebx,ebx
c0026be8:	7f 23                	jg     c0026c0d <__mulsf3+0x18c>
c0026bea:	83 fb e9             	cmp    ebx,0xffffffe9
c0026bed:	7c 1a                	jl     c0026c09 <__mulsf3+0x188>
c0026bef:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bf5:	b9 01 00 00 00       	mov    ecx,0x1
c0026bfa:	29 d9                	sub    ecx,ebx
c0026bfc:	d3 ea                	shr    edx,cl
c0026bfe:	31 db                	xor    ebx,ebx
c0026c00:	eb 0b                	jmp    c0026c0d <__mulsf3+0x18c>
c0026c02:	bb ff 00 00 00       	mov    ebx,0xff
c0026c07:	eb 02                	jmp    c0026c0b <__mulsf3+0x18a>
c0026c09:	31 db                	xor    ebx,ebx
c0026c0b:	31 d2                	xor    edx,edx
c0026c0d:	89 d0                	mov    eax,edx
c0026c0f:	c1 e8 08             	shr    eax,0x8
c0026c12:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026c15:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026c1b:	09 fb                	or     ebx,edi
c0026c1d:	c1 e3 17             	shl    ebx,0x17
c0026c20:	09 c3                	or     ebx,eax
c0026c22:	f6 c2 7f             	test   dl,0x7f
c0026c25:	0f 95 c1             	setne  cl
c0026c28:	09 c8                	or     eax,ecx
c0026c2a:	83 e0 01             	and    eax,0x1
c0026c2d:	c1 ea 07             	shr    edx,0x7
c0026c30:	21 c2                	and    edx,eax
c0026c32:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026c35:	eb 03                	jmp    c0026c3a <__mulsf3+0x1b9>
c0026c37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026c3a:	89 f0                	mov    eax,esi
c0026c3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c3f:	5b                   	pop    ebx
c0026c40:	5e                   	pop    esi
c0026c41:	5f                   	pop    edi
c0026c42:	5d                   	pop    ebp
c0026c43:	c3                   	ret    

c0026c44 <__divsf3>:
c0026c44:	55                   	push   ebp
c0026c45:	89 e5                	mov    ebp,esp
c0026c47:	57                   	push   edi
c0026c48:	56                   	push   esi
c0026c49:	53                   	push   ebx
c0026c4a:	83 ec 1c             	sub    esp,0x1c
c0026c4d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c50:	89 d8                	mov    eax,ebx
c0026c52:	89 d9                	mov    ecx,ebx
c0026c54:	c1 f9 17             	sar    ecx,0x17
c0026c57:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c5a:	c1 e0 08             	shl    eax,0x8
c0026c5d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c62:	89 c1                	mov    ecx,eax
c0026c64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c6a:	89 c7                	mov    edi,eax
c0026c6c:	c1 ff 17             	sar    edi,0x17
c0026c6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c73:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c76:	89 f8                	mov    eax,edi
c0026c78:	0f b6 c0             	movzx  eax,al
c0026c7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c7e:	29 c6                	sub    esi,eax
c0026c80:	83 c6 7f             	add    esi,0x7f
c0026c83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c86:	42                   	inc    edx
c0026c87:	80 e2 fe             	and    dl,0xfe
c0026c8a:	0f 85 9c 00 00 00    	jne    c0026d2c <__divsf3+0xe8>
c0026c90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c94:	74 33                	je     c0026cc9 <__divsf3+0x85>
c0026c96:	85 c9                	test   ecx,ecx
c0026c98:	0f 85 c7 01 00 00    	jne    c0026e65 <__divsf3+0x221>
c0026c9e:	8d 57 01             	lea    edx,[edi+0x1]
c0026ca1:	80 e2 fe             	and    dl,0xfe
c0026ca4:	75 2f                	jne    c0026cd5 <__divsf3+0x91>
c0026ca6:	85 c0                	test   eax,eax
c0026ca8:	74 2b                	je     c0026cd5 <__divsf3+0x91>
c0026caa:	51                   	push   ecx
c0026cab:	51                   	push   ecx
c0026cac:	6a 00                	push   0x0
c0026cae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cb1:	e8 d2 03 00 00       	call   c0027088 <__nesf2>
c0026cb6:	83 c4 10             	add    esp,0x10
c0026cb9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cbc:	85 c0                	test   eax,eax
c0026cbe:	0f 85 a1 01 00 00    	jne    c0026e65 <__divsf3+0x221>
c0026cc4:	e9 92 01 00 00       	jmp    c0026e5b <__divsf3+0x217>
c0026cc9:	85 c9                	test   ecx,ecx
c0026ccb:	75 1b                	jne    c0026ce8 <__divsf3+0xa4>
c0026ccd:	8d 57 01             	lea    edx,[edi+0x1]
c0026cd0:	80 e2 fe             	and    dl,0xfe
c0026cd3:	74 1e                	je     c0026cf3 <__divsf3+0xaf>
c0026cd5:	85 ff                	test   edi,edi
c0026cd7:	0f 89 88 01 00 00    	jns    c0026e65 <__divsf3+0x221>
c0026cdd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ce3:	e9 7d 01 00 00       	jmp    c0026e65 <__divsf3+0x221>
c0026ce8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026ceb:	01 c9                	add    ecx,ecx
c0026ced:	78 3d                	js     c0026d2c <__divsf3+0xe8>
c0026cef:	89 d6                	mov    esi,edx
c0026cf1:	eb f5                	jmp    c0026ce8 <__divsf3+0xa4>
c0026cf3:	85 c0                	test   eax,eax
c0026cf5:	b8 00 00 00 00       	mov    eax,0x0
c0026cfa:	74 18                	je     c0026d14 <__divsf3+0xd0>
c0026cfc:	52                   	push   edx
c0026cfd:	52                   	push   edx
c0026cfe:	50                   	push   eax
c0026cff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d02:	e8 81 03 00 00       	call   c0027088 <__nesf2>
c0026d07:	83 c4 10             	add    esp,0x10
c0026d0a:	85 c0                	test   eax,eax
c0026d0c:	0f 85 50 01 00 00    	jne    c0026e62 <__divsf3+0x21e>
c0026d12:	eb c1                	jmp    c0026cd5 <__divsf3+0x91>
c0026d14:	56                   	push   esi
c0026d15:	56                   	push   esi
c0026d16:	50                   	push   eax
c0026d17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d1a:	e8 69 03 00 00       	call   c0027088 <__nesf2>
c0026d1f:	83 c4 10             	add    esp,0x10
c0026d22:	85 c0                	test   eax,eax
c0026d24:	0f 84 31 01 00 00    	je     c0026e5b <__divsf3+0x217>
c0026d2a:	eb a9                	jmp    c0026cd5 <__divsf3+0x91>
c0026d2c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026d2f:	c1 e3 08             	shl    ebx,0x8
c0026d32:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d38:	8d 57 01             	lea    edx,[edi+0x1]
c0026d3b:	80 e2 fe             	and    dl,0xfe
c0026d3e:	75 71                	jne    c0026db1 <__divsf3+0x16d>
c0026d40:	85 c0                	test   eax,eax
c0026d42:	ba 00 00 00 00       	mov    edx,0x0
c0026d47:	74 2f                	je     c0026d78 <__divsf3+0x134>
c0026d49:	51                   	push   ecx
c0026d4a:	51                   	push   ecx
c0026d4b:	52                   	push   edx
c0026d4c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d4f:	e8 f9 02 00 00       	call   c002704d <__eqsf2>
c0026d54:	83 c4 10             	add    esp,0x10
c0026d57:	85 c0                	test   eax,eax
c0026d59:	0f 85 03 01 00 00    	jne    c0026e62 <__divsf3+0x21e>
c0026d5f:	31 d2                	xor    edx,edx
c0026d61:	89 d3                	mov    ebx,edx
c0026d63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d66:	31 f8                	xor    eax,edi
c0026d68:	0f 89 f7 00 00 00    	jns    c0026e65 <__divsf3+0x221>
c0026d6e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026d73:	e9 ed 00 00 00       	jmp    c0026e65 <__divsf3+0x221>
c0026d78:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d7b:	50                   	push   eax
c0026d7c:	50                   	push   eax
c0026d7d:	52                   	push   edx
c0026d7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d81:	e8 c7 02 00 00       	call   c002704d <__eqsf2>
c0026d86:	83 c4 10             	add    esp,0x10
c0026d89:	85 c0                	test   eax,eax
c0026d8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d8e:	75 16                	jne    c0026da6 <__divsf3+0x162>
c0026d90:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d93:	31 fb                	xor    ebx,edi
c0026d95:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026d9b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026da1:	e9 bf 00 00 00       	jmp    c0026e65 <__divsf3+0x221>
c0026da6:	8d 46 01             	lea    eax,[esi+0x1]
c0026da9:	01 db                	add    ebx,ebx
c0026dab:	78 04                	js     c0026db1 <__divsf3+0x16d>
c0026dad:	89 c6                	mov    esi,eax
c0026daf:	eb f5                	jmp    c0026da6 <__divsf3+0x162>
c0026db1:	89 c8                	mov    eax,ecx
c0026db3:	0d 00 00 00 80       	or     eax,0x80000000
c0026db8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dbe:	31 d2                	xor    edx,edx
c0026dc0:	39 d8                	cmp    eax,ebx
c0026dc2:	72 07                	jb     c0026dcb <__divsf3+0x187>
c0026dc4:	29 d8                	sub    eax,ebx
c0026dc6:	ba 01 00 00 00       	mov    edx,0x1
c0026dcb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026dd2:	01 d2                	add    edx,edx
c0026dd4:	89 c1                	mov    ecx,eax
c0026dd6:	01 c0                	add    eax,eax
c0026dd8:	85 c9                	test   ecx,ecx
c0026dda:	78 04                	js     c0026de0 <__divsf3+0x19c>
c0026ddc:	39 c3                	cmp    ebx,eax
c0026dde:	77 05                	ja     c0026de5 <__divsf3+0x1a1>
c0026de0:	29 d8                	sub    eax,ebx
c0026de2:	83 ca 01             	or     edx,0x1
c0026de5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026de8:	75 e8                	jne    c0026dd2 <__divsf3+0x18e>
c0026dea:	85 c0                	test   eax,eax
c0026dec:	0f 95 c0             	setne  al
c0026def:	0f b6 c0             	movzx  eax,al
c0026df2:	c1 e2 06             	shl    edx,0x6
c0026df5:	09 c2                	or     edx,eax
c0026df7:	78 03                	js     c0026dfc <__divsf3+0x1b8>
c0026df9:	01 d2                	add    edx,edx
c0026dfb:	4e                   	dec    esi
c0026dfc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026e02:	7f 22                	jg     c0026e26 <__divsf3+0x1e2>
c0026e04:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e0a:	85 f6                	test   esi,esi
c0026e0c:	7f 23                	jg     c0026e31 <__divsf3+0x1ed>
c0026e0e:	83 fe e9             	cmp    esi,0xffffffe9
c0026e11:	7c 1a                	jl     c0026e2d <__divsf3+0x1e9>
c0026e13:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e19:	b9 01 00 00 00       	mov    ecx,0x1
c0026e1e:	29 f1                	sub    ecx,esi
c0026e20:	d3 ea                	shr    edx,cl
c0026e22:	31 f6                	xor    esi,esi
c0026e24:	eb 0b                	jmp    c0026e31 <__divsf3+0x1ed>
c0026e26:	be ff 00 00 00       	mov    esi,0xff
c0026e2b:	eb 02                	jmp    c0026e2f <__divsf3+0x1eb>
c0026e2d:	31 f6                	xor    esi,esi
c0026e2f:	31 d2                	xor    edx,edx
c0026e31:	89 d0                	mov    eax,edx
c0026e33:	c1 e8 08             	shr    eax,0x8
c0026e36:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e39:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e3f:	09 fe                	or     esi,edi
c0026e41:	c1 e6 17             	shl    esi,0x17
c0026e44:	09 c6                	or     esi,eax
c0026e46:	f6 c2 7f             	test   dl,0x7f
c0026e49:	0f 95 c1             	setne  cl
c0026e4c:	09 c8                	or     eax,ecx
c0026e4e:	83 e0 01             	and    eax,0x1
c0026e51:	c1 ea 07             	shr    edx,0x7
c0026e54:	21 c2                	and    edx,eax
c0026e56:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026e59:	eb 0a                	jmp    c0026e65 <__divsf3+0x221>
c0026e5b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026e60:	eb 03                	jmp    c0026e65 <__divsf3+0x221>
c0026e62:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e65:	89 d8                	mov    eax,ebx
c0026e67:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e6a:	5b                   	pop    ebx
c0026e6b:	5e                   	pop    esi
c0026e6c:	5f                   	pop    edi
c0026e6d:	5d                   	pop    ebp
c0026e6e:	c3                   	ret    

c0026e6f <__floatsisf>:
c0026e6f:	55                   	push   ebp
c0026e70:	89 e5                	mov    ebp,esp
c0026e72:	53                   	push   ebx
c0026e73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e76:	85 d2                	test   edx,edx
c0026e78:	7e 2b                	jle    c0026ea5 <__floatsisf+0x36>
c0026e7a:	0f bd ca             	bsr    ecx,edx
c0026e7d:	83 f1 1f             	xor    ecx,0x1f
c0026e80:	d3 e2                	shl    edx,cl
c0026e82:	89 d0                	mov    eax,edx
c0026e84:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e89:	89 c3                	mov    ebx,eax
c0026e8b:	c1 eb 08             	shr    ebx,0x8
c0026e8e:	80 e2 7f             	and    dl,0x7f
c0026e91:	0f 95 c2             	setne  dl
c0026e94:	09 da                	or     edx,ebx
c0026e96:	83 e2 01             	and    edx,0x1
c0026e99:	c1 e8 07             	shr    eax,0x7
c0026e9c:	21 c2                	and    edx,eax
c0026e9e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026ea3:	eb 32                	jmp    c0026ed7 <__floatsisf+0x68>
c0026ea5:	b8 00 00 00 00       	mov    eax,0x0
c0026eaa:	74 34                	je     c0026ee0 <__floatsisf+0x71>
c0026eac:	f7 da                	neg    edx
c0026eae:	0f bd ca             	bsr    ecx,edx
c0026eb1:	83 f1 1f             	xor    ecx,0x1f
c0026eb4:	d3 e2                	shl    edx,cl
c0026eb6:	89 d0                	mov    eax,edx
c0026eb8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ebd:	89 c3                	mov    ebx,eax
c0026ebf:	c1 eb 08             	shr    ebx,0x8
c0026ec2:	80 e2 7f             	and    dl,0x7f
c0026ec5:	0f 95 c2             	setne  dl
c0026ec8:	09 da                	or     edx,ebx
c0026eca:	83 e2 01             	and    edx,0x1
c0026ecd:	c1 e8 07             	shr    eax,0x7
c0026ed0:	21 c2                	and    edx,eax
c0026ed2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026ed7:	29 c8                	sub    eax,ecx
c0026ed9:	c1 e0 17             	shl    eax,0x17
c0026edc:	09 d8                	or     eax,ebx
c0026ede:	01 d0                	add    eax,edx
c0026ee0:	5b                   	pop    ebx
c0026ee1:	5d                   	pop    ebp
c0026ee2:	c3                   	ret    

c0026ee3 <__floatunsisf>:
c0026ee3:	55                   	push   ebp
c0026ee4:	89 e5                	mov    ebp,esp
c0026ee6:	53                   	push   ebx
c0026ee7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026eea:	31 c0                	xor    eax,eax
c0026eec:	85 d2                	test   edx,edx
c0026eee:	74 32                	je     c0026f22 <__floatunsisf+0x3f>
c0026ef0:	0f bd ca             	bsr    ecx,edx
c0026ef3:	83 f1 1f             	xor    ecx,0x1f
c0026ef6:	d3 e2                	shl    edx,cl
c0026ef8:	89 d0                	mov    eax,edx
c0026efa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026eff:	89 c3                	mov    ebx,eax
c0026f01:	c1 eb 08             	shr    ebx,0x8
c0026f04:	80 e2 7f             	and    dl,0x7f
c0026f07:	0f 95 c2             	setne  dl
c0026f0a:	09 da                	or     edx,ebx
c0026f0c:	83 e2 01             	and    edx,0x1
c0026f0f:	c1 e8 07             	shr    eax,0x7
c0026f12:	21 c2                	and    edx,eax
c0026f14:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f19:	29 c8                	sub    eax,ecx
c0026f1b:	c1 e0 17             	shl    eax,0x17
c0026f1e:	09 d8                	or     eax,ebx
c0026f20:	01 d0                	add    eax,edx
c0026f22:	5b                   	pop    ebx
c0026f23:	5d                   	pop    ebp
c0026f24:	c3                   	ret    

c0026f25 <__fixsfsi>:
c0026f25:	55                   	push   ebp
c0026f26:	89 e5                	mov    ebp,esp
c0026f28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f2b:	89 d1                	mov    ecx,edx
c0026f2d:	c1 e1 08             	shl    ecx,0x8
c0026f30:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026f36:	c1 fa 17             	sar    edx,0x17
c0026f39:	78 1c                	js     c0026f57 <__fixsfsi+0x32>
c0026f3b:	83 ea 7f             	sub    edx,0x7f
c0026f3e:	31 c0                	xor    eax,eax
c0026f40:	83 fa 1e             	cmp    edx,0x1e
c0026f43:	77 40                	ja     c0026f85 <__fixsfsi+0x60>
c0026f45:	89 c8                	mov    eax,ecx
c0026f47:	0d 00 00 00 80       	or     eax,0x80000000
c0026f4c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f51:	29 d1                	sub    ecx,edx
c0026f53:	d3 e8                	shr    eax,cl
c0026f55:	eb 2e                	jmp    c0026f85 <__fixsfsi+0x60>
c0026f57:	31 c0                	xor    eax,eax
c0026f59:	81 c2 81 00 00 00    	add    edx,0x81
c0026f5f:	78 24                	js     c0026f85 <__fixsfsi+0x60>
c0026f61:	83 fa 1e             	cmp    edx,0x1e
c0026f64:	7e 09                	jle    c0026f6f <__fixsfsi+0x4a>
c0026f66:	83 fa 1f             	cmp    edx,0x1f
c0026f69:	75 18                	jne    c0026f83 <__fixsfsi+0x5e>
c0026f6b:	85 c9                	test   ecx,ecx
c0026f6d:	75 14                	jne    c0026f83 <__fixsfsi+0x5e>
c0026f6f:	89 c8                	mov    eax,ecx
c0026f71:	0d 00 00 00 80       	or     eax,0x80000000
c0026f76:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f7b:	29 d1                	sub    ecx,edx
c0026f7d:	d3 e8                	shr    eax,cl
c0026f7f:	f7 d8                	neg    eax
c0026f81:	eb 02                	jmp    c0026f85 <__fixsfsi+0x60>
c0026f83:	31 c0                	xor    eax,eax
c0026f85:	5d                   	pop    ebp
c0026f86:	c3                   	ret    

c0026f87 <__fixunssfsi>:
c0026f87:	55                   	push   ebp
c0026f88:	89 e5                	mov    ebp,esp
c0026f8a:	53                   	push   ebx
c0026f8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f8e:	89 d3                	mov    ebx,edx
c0026f90:	c1 fb 17             	sar    ebx,0x17
c0026f93:	83 eb 7f             	sub    ebx,0x7f
c0026f96:	31 c0                	xor    eax,eax
c0026f98:	83 fb 1f             	cmp    ebx,0x1f
c0026f9b:	77 18                	ja     c0026fb5 <__fixunssfsi+0x2e>
c0026f9d:	89 d0                	mov    eax,edx
c0026f9f:	c1 e0 08             	shl    eax,0x8
c0026fa2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fa7:	0d 00 00 00 80       	or     eax,0x80000000
c0026fac:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026fb1:	29 d9                	sub    ecx,ebx
c0026fb3:	d3 e8                	shr    eax,cl
c0026fb5:	5b                   	pop    ebx
c0026fb6:	5d                   	pop    ebp
c0026fb7:	c3                   	ret    

c0026fb8 <__cmpsf2>:
c0026fb8:	55                   	push   ebp
c0026fb9:	89 e5                	mov    ebp,esp
c0026fbb:	57                   	push   edi
c0026fbc:	56                   	push   esi
c0026fbd:	53                   	push   ebx
c0026fbe:	83 ec 24             	sub    esp,0x24
c0026fc1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fc7:	e8 4f 10 00 00       	call   c002801b <__truncdfsf2>
c0026fcc:	5a                   	pop    edx
c0026fcd:	59                   	pop    ecx
c0026fce:	89 c3                	mov    ebx,eax
c0026fd0:	c1 e8 17             	shr    eax,0x17
c0026fd3:	0f b6 f0             	movzx  esi,al
c0026fd6:	89 d8                	mov    eax,ebx
c0026fd8:	c1 e8 1f             	shr    eax,0x1f
c0026fdb:	31 c6                	xor    esi,eax
c0026fdd:	c1 e3 08             	shl    ebx,0x8
c0026fe0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026fe3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026fe6:	e8 30 10 00 00       	call   c002801b <__truncdfsf2>
c0026feb:	83 c4 10             	add    esp,0x10
c0026fee:	89 c1                	mov    ecx,eax
c0026ff0:	c1 e9 17             	shr    ecx,0x17
c0026ff3:	0f b6 c9             	movzx  ecx,cl
c0026ff6:	89 c7                	mov    edi,eax
c0026ff8:	c1 ef 1f             	shr    edi,0x1f
c0026ffb:	89 ca                	mov    edx,ecx
c0026ffd:	31 fa                	xor    edx,edi
c0026fff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027002:	c1 e0 08             	shl    eax,0x8
c0027005:	89 c2                	mov    edx,eax
c0027007:	89 d8                	mov    eax,ebx
c0027009:	09 d0                	or     eax,edx
c002700b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027010:	09 f0                	or     eax,esi
c0027012:	75 08                	jne    c002701c <__cmpsf2+0x64>
c0027014:	31 c0                	xor    eax,eax
c0027016:	39 f9                	cmp    ecx,edi
c0027018:	75 0c                	jne    c0027026 <__cmpsf2+0x6e>
c002701a:	eb 29                	jmp    c0027045 <__cmpsf2+0x8d>
c002701c:	b8 01 00 00 00       	mov    eax,0x1
c0027021:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027024:	7f 1f                	jg     c0027045 <__cmpsf2+0x8d>
c0027026:	83 c8 ff             	or     eax,0xffffffff
c0027029:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002702c:	7c 17                	jl     c0027045 <__cmpsf2+0x8d>
c002702e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027034:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002703a:	b8 01 00 00 00       	mov    eax,0x1
c002703f:	39 d3                	cmp    ebx,edx
c0027041:	77 02                	ja     c0027045 <__cmpsf2+0x8d>
c0027043:	19 c0                	sbb    eax,eax
c0027045:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027048:	5b                   	pop    ebx
c0027049:	5e                   	pop    esi
c002704a:	5f                   	pop    edi
c002704b:	5d                   	pop    ebp
c002704c:	c3                   	ret    

c002704d <__eqsf2>:
c002704d:	55                   	push   ebp
c002704e:	89 e5                	mov    ebp,esp
c0027050:	83 ec 24             	sub    esp,0x24
c0027053:	6a 01                	push   0x1
c0027055:	83 ec 0c             	sub    esp,0xc
c0027058:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002705b:	e8 df 10 00 00       	call   c002813f <__extendsfdf2>
c0027060:	83 c4 10             	add    esp,0x10
c0027063:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027066:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027069:	52                   	push   edx
c002706a:	50                   	push   eax
c002706b:	50                   	push   eax
c002706c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002706f:	e8 cb 10 00 00       	call   c002813f <__extendsfdf2>
c0027074:	59                   	pop    ecx
c0027075:	59                   	pop    ecx
c0027076:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027079:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002707c:	52                   	push   edx
c002707d:	50                   	push   eax
c002707e:	e8 35 ff ff ff       	call   c0026fb8 <__cmpsf2>
c0027083:	83 c4 20             	add    esp,0x20
c0027086:	c9                   	leave  
c0027087:	c3                   	ret    

c0027088 <__nesf2>:
c0027088:	eb c3                	jmp    c002704d <__eqsf2>

c002708a <__gtsf2>:
c002708a:	55                   	push   ebp
c002708b:	89 e5                	mov    ebp,esp
c002708d:	83 ec 24             	sub    esp,0x24
c0027090:	6a ff                	push   0xffffffff
c0027092:	83 ec 0c             	sub    esp,0xc
c0027095:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027098:	e8 a2 10 00 00       	call   c002813f <__extendsfdf2>
c002709d:	83 c4 10             	add    esp,0x10
c00270a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270a6:	52                   	push   edx
c00270a7:	50                   	push   eax
c00270a8:	50                   	push   eax
c00270a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270ac:	e8 8e 10 00 00       	call   c002813f <__extendsfdf2>
c00270b1:	59                   	pop    ecx
c00270b2:	59                   	pop    ecx
c00270b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270b9:	52                   	push   edx
c00270ba:	50                   	push   eax
c00270bb:	e8 f8 fe ff ff       	call   c0026fb8 <__cmpsf2>
c00270c0:	83 c4 20             	add    esp,0x20
c00270c3:	c9                   	leave  
c00270c4:	c3                   	ret    

c00270c5 <__gesf2>:
c00270c5:	eb c3                	jmp    c002708a <__gtsf2>

c00270c7 <__ltsf2>:
c00270c7:	eb 84                	jmp    c002704d <__eqsf2>

c00270c9 <__lesf2>:
c00270c9:	eb 82                	jmp    c002704d <__eqsf2>

c00270cb <__adddf3>:
c00270cb:	55                   	push   ebp
c00270cc:	89 e5                	mov    ebp,esp
c00270ce:	57                   	push   edi
c00270cf:	56                   	push   esi
c00270d0:	53                   	push   ebx
c00270d1:	83 ec 24             	sub    esp,0x24
c00270d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00270d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00270da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00270dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00270e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00270e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00270e6:	89 c8                	mov    eax,ecx
c00270e8:	89 ce                	mov    esi,ecx
c00270ea:	c1 fe 14             	sar    esi,0x14
c00270ed:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00270f0:	89 fb                	mov    ebx,edi
c00270f2:	89 fa                	mov    edx,edi
c00270f4:	c1 e2 0b             	shl    edx,0xb
c00270f7:	c1 e0 0b             	shl    eax,0xb
c00270fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00270ff:	c1 eb 15             	shr    ebx,0x15
c0027102:	09 d8                	or     eax,ebx
c0027104:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027107:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002710a:	c1 fe 14             	sar    esi,0x14
c002710d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027110:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027113:	89 f3                	mov    ebx,esi
c0027115:	c1 e3 0b             	shl    ebx,0xb
c0027118:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002711b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002711e:	c1 e3 0b             	shl    ebx,0xb
c0027121:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027127:	c1 ee 15             	shr    esi,0x15
c002712a:	09 f3                	or     ebx,esi
c002712c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002712f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027132:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027135:	0f 88 5f 02 00 00    	js     c002739a <__adddf3+0x2cf>
c002713b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002713e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027141:	85 db                	test   ebx,ebx
c0027143:	0f 8e c7 00 00 00    	jle    c0027210 <__adddf3+0x145>
c0027149:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027150:	75 1a                	jne    c002716c <__adddf3+0xa1>
c0027152:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027155:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027158:	0f 84 b2 05 00 00    	je     c0027710 <__adddf3+0x645>
c002715e:	4b                   	dec    ebx
c002715f:	75 23                	jne    c0027184 <__adddf3+0xb9>
c0027161:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027164:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027167:	e9 99 00 00 00       	jmp    c0027205 <__adddf3+0x13a>
c002716c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002716f:	f7 d6                	not    esi
c0027171:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027177:	0f 84 93 05 00 00    	je     c0027710 <__adddf3+0x645>
c002717d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027184:	83 fb 1f             	cmp    ebx,0x1f
c0027187:	7e 42                	jle    c00271cb <__adddf3+0x100>
c0027189:	83 fb 3f             	cmp    ebx,0x3f
c002718c:	0f 8f 7e 05 00 00    	jg     c0027710 <__adddf3+0x645>
c0027192:	83 e3 1f             	and    ebx,0x1f
c0027195:	89 d9                	mov    ecx,ebx
c0027197:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002719a:	d3 ef                	shr    edi,cl
c002719c:	31 db                	xor    ebx,ebx
c002719e:	85 c9                	test   ecx,ecx
c00271a0:	74 15                	je     c00271b7 <__adddf3+0xec>
c00271a2:	be 20 00 00 00       	mov    esi,0x20
c00271a7:	29 ce                	sub    esi,ecx
c00271a9:	89 f1                	mov    ecx,esi
c00271ab:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271ae:	d3 e6                	shl    esi,cl
c00271b0:	31 db                	xor    ebx,ebx
c00271b2:	85 f6                	test   esi,esi
c00271b4:	0f 95 c3             	setne  bl
c00271b7:	31 c9                	xor    ecx,ecx
c00271b9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271bd:	0f 95 c1             	setne  cl
c00271c0:	09 cf                	or     edi,ecx
c00271c2:	09 fb                	or     ebx,edi
c00271c4:	01 da                	add    edx,ebx
c00271c6:	83 d0 00             	adc    eax,0x0
c00271c9:	eb 3a                	jmp    c0027205 <__adddf3+0x13a>
c00271cb:	bf 20 00 00 00       	mov    edi,0x20
c00271d0:	29 df                	sub    edi,ebx
c00271d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271d8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271db:	d3 e6                	shl    esi,cl
c00271dd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271e0:	88 d9                	mov    cl,bl
c00271e2:	d3 ef                	shr    edi,cl
c00271e4:	09 fe                	or     esi,edi
c00271e6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271e9:	88 d9                	mov    cl,bl
c00271eb:	d3 ef                	shr    edi,cl
c00271ed:	89 fb                	mov    ebx,edi
c00271ef:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271f2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271f5:	d3 e7                	shl    edi,cl
c00271f7:	85 ff                	test   edi,edi
c00271f9:	0f 95 c1             	setne  cl
c00271fc:	0f b6 c9             	movzx  ecx,cl
c00271ff:	09 ce                	or     esi,ecx
c0027201:	01 f2                	add    edx,esi
c0027203:	11 d8                	adc    eax,ebx
c0027205:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027208:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002720b:	e9 52 01 00 00       	jmp    c0027362 <__adddf3+0x297>
c0027210:	0f 84 d5 00 00 00    	je     c00272eb <__adddf3+0x220>
c0027216:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027219:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002721c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002721f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027222:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027229:	75 20                	jne    c002724b <__adddf3+0x180>
c002722b:	89 d6                	mov    esi,edx
c002722d:	09 c6                	or     esi,eax
c002722f:	0f 84 db 04 00 00    	je     c0027710 <__adddf3+0x645>
c0027235:	4b                   	dec    ebx
c0027236:	75 29                	jne    c0027261 <__adddf3+0x196>
c0027238:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002723b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002723e:	01 d1                	add    ecx,edx
c0027240:	11 c6                	adc    esi,eax
c0027242:	89 f0                	mov    eax,esi
c0027244:	89 ca                	mov    edx,ecx
c0027246:	e9 17 01 00 00       	jmp    c0027362 <__adddf3+0x297>
c002724b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002724e:	f7 d6                	not    esi
c0027250:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027256:	0f 84 b4 04 00 00    	je     c0027710 <__adddf3+0x645>
c002725c:	0d 00 00 00 80       	or     eax,0x80000000
c0027261:	83 fb 1f             	cmp    ebx,0x1f
c0027264:	7e 48                	jle    c00272ae <__adddf3+0x1e3>
c0027266:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027269:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002726c:	83 fb 3f             	cmp    ebx,0x3f
c002726f:	0f 8f 9b 04 00 00    	jg     c0027710 <__adddf3+0x645>
c0027275:	83 e3 1f             	and    ebx,0x1f
c0027278:	89 d9                	mov    ecx,ebx
c002727a:	89 c7                	mov    edi,eax
c002727c:	d3 ef                	shr    edi,cl
c002727e:	31 db                	xor    ebx,ebx
c0027280:	85 c9                	test   ecx,ecx
c0027282:	74 12                	je     c0027296 <__adddf3+0x1cb>
c0027284:	be 20 00 00 00       	mov    esi,0x20
c0027289:	29 ce                	sub    esi,ecx
c002728b:	89 f1                	mov    ecx,esi
c002728d:	d3 e0                	shl    eax,cl
c002728f:	31 db                	xor    ebx,ebx
c0027291:	85 c0                	test   eax,eax
c0027293:	0f 95 c3             	setne  bl
c0027296:	31 c0                	xor    eax,eax
c0027298:	85 d2                	test   edx,edx
c002729a:	0f 95 c0             	setne  al
c002729d:	09 c7                	or     edi,eax
c002729f:	09 fb                	or     ebx,edi
c00272a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272a4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272a7:	01 da                	add    edx,ebx
c00272a9:	83 d6 00             	adc    esi,0x0
c00272ac:	eb 39                	jmp    c00272e7 <__adddf3+0x21c>
c00272ae:	be 20 00 00 00       	mov    esi,0x20
c00272b3:	29 de                	sub    esi,ebx
c00272b5:	89 c7                	mov    edi,eax
c00272b7:	89 f1                	mov    ecx,esi
c00272b9:	d3 e7                	shl    edi,cl
c00272bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00272be:	89 d7                	mov    edi,edx
c00272c0:	88 d9                	mov    cl,bl
c00272c2:	d3 ef                	shr    edi,cl
c00272c4:	89 f9                	mov    ecx,edi
c00272c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272c9:	09 cf                	or     edi,ecx
c00272cb:	88 d9                	mov    cl,bl
c00272cd:	d3 e8                	shr    eax,cl
c00272cf:	89 f1                	mov    ecx,esi
c00272d1:	d3 e2                	shl    edx,cl
c00272d3:	85 d2                	test   edx,edx
c00272d5:	0f 95 c2             	setne  dl
c00272d8:	0f b6 d2             	movzx  edx,dl
c00272db:	09 d7                	or     edi,edx
c00272dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272e3:	01 fa                	add    edx,edi
c00272e5:	11 c6                	adc    esi,eax
c00272e7:	89 f0                	mov    eax,esi
c00272e9:	eb 77                	jmp    c0027362 <__adddf3+0x297>
c00272eb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272ee:	46                   	inc    esi
c00272ef:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272f2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00272f8:	75 41                	jne    c002733b <__adddf3+0x270>
c00272fa:	89 d3                	mov    ebx,edx
c00272fc:	09 c3                	or     ebx,eax
c00272fe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027305:	75 27                	jne    c002732e <__adddf3+0x263>
c0027307:	85 db                	test   ebx,ebx
c0027309:	0f 84 fb 03 00 00    	je     c002770a <__adddf3+0x63f>
c002730f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027312:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027315:	0f 84 f5 03 00 00    	je     c0027710 <__adddf3+0x645>
c002731b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002731e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027321:	85 c0                	test   eax,eax
c0027323:	0f 89 91 03 00 00    	jns    c00276ba <__adddf3+0x5ef>
c0027329:	e9 85 03 00 00       	jmp    c00276b3 <__adddf3+0x5e8>
c002732e:	85 db                	test   ebx,ebx
c0027330:	0f 85 da 03 00 00    	jne    c0027710 <__adddf3+0x645>
c0027336:	e9 cf 03 00 00       	jmp    c002770a <__adddf3+0x63f>
c002733b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002733e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027341:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027344:	f7 d1                	not    ecx
c0027346:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002734c:	0f 84 70 03 00 00    	je     c00276c2 <__adddf3+0x5f7>
c0027352:	d1 ea                	shr    edx,1
c0027354:	89 c1                	mov    ecx,eax
c0027356:	c1 e1 1f             	shl    ecx,0x1f
c0027359:	09 ca                	or     edx,ecx
c002735b:	d1 e8                	shr    eax,1
c002735d:	e9 6f 03 00 00       	jmp    c00276d1 <__adddf3+0x606>
c0027362:	85 c0                	test   eax,eax
c0027364:	0f 89 67 03 00 00    	jns    c00276d1 <__adddf3+0x606>
c002736a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002736d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027370:	f7 d1                	not    ecx
c0027372:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027378:	0f 84 44 03 00 00    	je     c00276c2 <__adddf3+0x5f7>
c002737e:	89 d1                	mov    ecx,edx
c0027380:	d1 e9                	shr    ecx,1
c0027382:	83 e2 01             	and    edx,0x1
c0027385:	09 ca                	or     edx,ecx
c0027387:	89 c1                	mov    ecx,eax
c0027389:	c1 e1 1f             	shl    ecx,0x1f
c002738c:	09 ca                	or     edx,ecx
c002738e:	d1 e8                	shr    eax,1
c0027390:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027395:	e9 37 03 00 00       	jmp    c00276d1 <__adddf3+0x606>
c002739a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002739d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273a3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00273a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273af:	29 de                	sub    esi,ebx
c00273b1:	85 f6                	test   esi,esi
c00273b3:	0f 8e bd 00 00 00    	jle    c0027476 <__adddf3+0x3ab>
c00273b9:	85 db                	test   ebx,ebx
c00273bb:	75 17                	jne    c00273d4 <__adddf3+0x309>
c00273bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00273c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00273c3:	0f 84 47 03 00 00    	je     c0027710 <__adddf3+0x645>
c00273c9:	4e                   	dec    esi
c00273ca:	75 20                	jne    c00273ec <__adddf3+0x321>
c00273cc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00273cf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00273d2:	eb 5b                	jmp    c002742f <__adddf3+0x364>
c00273d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273d7:	f7 d3                	not    ebx
c00273d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273df:	0f 84 2b 03 00 00    	je     c0027710 <__adddf3+0x645>
c00273e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00273ec:	83 fe 1f             	cmp    esi,0x1f
c00273ef:	7e 49                	jle    c002743a <__adddf3+0x36f>
c00273f1:	83 fe 3f             	cmp    esi,0x3f
c00273f4:	0f 8f 16 03 00 00    	jg     c0027710 <__adddf3+0x645>
c00273fa:	83 e6 1f             	and    esi,0x1f
c00273fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027400:	89 f1                	mov    ecx,esi
c0027402:	d3 ef                	shr    edi,cl
c0027404:	31 db                	xor    ebx,ebx
c0027406:	85 f6                	test   esi,esi
c0027408:	74 13                	je     c002741d <__adddf3+0x352>
c002740a:	b9 20 00 00 00       	mov    ecx,0x20
c002740f:	29 f1                	sub    ecx,esi
c0027411:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027414:	d3 e6                	shl    esi,cl
c0027416:	31 db                	xor    ebx,ebx
c0027418:	85 f6                	test   esi,esi
c002741a:	0f 95 c3             	setne  bl
c002741d:	31 c9                	xor    ecx,ecx
c002741f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027423:	0f 95 c1             	setne  cl
c0027426:	09 cf                	or     edi,ecx
c0027428:	09 fb                	or     ebx,edi
c002742a:	29 da                	sub    edx,ebx
c002742c:	83 d8 00             	sbb    eax,0x0
c002742f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027432:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027435:	e9 aa 01 00 00       	jmp    c00275e4 <__adddf3+0x519>
c002743a:	bf 20 00 00 00       	mov    edi,0x20
c002743f:	29 f7                	sub    edi,esi
c0027441:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027444:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027447:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002744a:	d3 e3                	shl    ebx,cl
c002744c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002744f:	89 f1                	mov    ecx,esi
c0027451:	d3 ef                	shr    edi,cl
c0027453:	09 fb                	or     ebx,edi
c0027455:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027458:	89 f1                	mov    ecx,esi
c002745a:	d3 ef                	shr    edi,cl
c002745c:	89 fe                	mov    esi,edi
c002745e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027461:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027464:	d3 e7                	shl    edi,cl
c0027466:	85 ff                	test   edi,edi
c0027468:	0f 95 c1             	setne  cl
c002746b:	0f b6 c9             	movzx  ecx,cl
c002746e:	09 cb                	or     ebx,ecx
c0027470:	29 da                	sub    edx,ebx
c0027472:	19 f0                	sbb    eax,esi
c0027474:	eb b9                	jmp    c002742f <__adddf3+0x364>
c0027476:	0f 84 cd 00 00 00    	je     c0027549 <__adddf3+0x47e>
c002747c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002747f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027482:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027485:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027489:	75 1b                	jne    c00274a6 <__adddf3+0x3db>
c002748b:	89 d6                	mov    esi,edx
c002748d:	09 c6                	or     esi,eax
c002748f:	0f 84 7b 02 00 00    	je     c0027710 <__adddf3+0x645>
c0027495:	4b                   	dec    ebx
c0027496:	75 24                	jne    c00274bc <__adddf3+0x3f1>
c0027498:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002749b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002749e:	29 d1                	sub    ecx,edx
c00274a0:	19 c6                	sbb    esi,eax
c00274a2:	89 ca                	mov    edx,ecx
c00274a4:	eb 61                	jmp    c0027507 <__adddf3+0x43c>
c00274a6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274a9:	f7 d6                	not    esi
c00274ab:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274b1:	0f 84 59 02 00 00    	je     c0027710 <__adddf3+0x645>
c00274b7:	0d 00 00 00 80       	or     eax,0x80000000
c00274bc:	83 fb 1f             	cmp    ebx,0x1f
c00274bf:	7e 4d                	jle    c002750e <__adddf3+0x443>
c00274c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274c7:	83 fb 3f             	cmp    ebx,0x3f
c00274ca:	0f 8f 40 02 00 00    	jg     c0027710 <__adddf3+0x645>
c00274d0:	83 e3 1f             	and    ebx,0x1f
c00274d3:	89 d9                	mov    ecx,ebx
c00274d5:	89 c7                	mov    edi,eax
c00274d7:	d3 ef                	shr    edi,cl
c00274d9:	31 db                	xor    ebx,ebx
c00274db:	85 c9                	test   ecx,ecx
c00274dd:	74 12                	je     c00274f1 <__adddf3+0x426>
c00274df:	be 20 00 00 00       	mov    esi,0x20
c00274e4:	29 ce                	sub    esi,ecx
c00274e6:	89 f1                	mov    ecx,esi
c00274e8:	d3 e0                	shl    eax,cl
c00274ea:	31 db                	xor    ebx,ebx
c00274ec:	85 c0                	test   eax,eax
c00274ee:	0f 95 c3             	setne  bl
c00274f1:	31 c0                	xor    eax,eax
c00274f3:	85 d2                	test   edx,edx
c00274f5:	0f 95 c0             	setne  al
c00274f8:	09 c7                	or     edi,eax
c00274fa:	09 fb                	or     ebx,edi
c00274fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027502:	29 da                	sub    edx,ebx
c0027504:	83 de 00             	sbb    esi,0x0
c0027507:	89 f0                	mov    eax,esi
c0027509:	e9 d6 00 00 00       	jmp    c00275e4 <__adddf3+0x519>
c002750e:	be 20 00 00 00       	mov    esi,0x20
c0027513:	29 de                	sub    esi,ebx
c0027515:	89 c7                	mov    edi,eax
c0027517:	89 f1                	mov    ecx,esi
c0027519:	d3 e7                	shl    edi,cl
c002751b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002751e:	89 d7                	mov    edi,edx
c0027520:	88 d9                	mov    cl,bl
c0027522:	d3 ef                	shr    edi,cl
c0027524:	89 f9                	mov    ecx,edi
c0027526:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027529:	09 cf                	or     edi,ecx
c002752b:	88 d9                	mov    cl,bl
c002752d:	d3 e8                	shr    eax,cl
c002752f:	89 f1                	mov    ecx,esi
c0027531:	d3 e2                	shl    edx,cl
c0027533:	85 d2                	test   edx,edx
c0027535:	0f 95 c2             	setne  dl
c0027538:	0f b6 d2             	movzx  edx,dl
c002753b:	09 d7                	or     edi,edx
c002753d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027540:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027543:	29 fa                	sub    edx,edi
c0027545:	19 c6                	sbb    esi,eax
c0027547:	eb be                	jmp    c0027507 <__adddf3+0x43c>
c0027549:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002754c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002754f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027555:	75 6a                	jne    c00275c1 <__adddf3+0x4f6>
c0027557:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002755b:	75 58                	jne    c00275b5 <__adddf3+0x4ea>
c002755d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027560:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027563:	89 d6                	mov    esi,edx
c0027565:	09 c6                	or     esi,eax
c0027567:	75 17                	jne    c0027580 <__adddf3+0x4b5>
c0027569:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002756c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002756f:	85 db                	test   ebx,ebx
c0027571:	0f 85 99 01 00 00    	jne    c0027710 <__adddf3+0x645>
c0027577:	31 ff                	xor    edi,edi
c0027579:	31 c9                	xor    ecx,ecx
c002757b:	e9 90 01 00 00       	jmp    c0027710 <__adddf3+0x645>
c0027580:	85 db                	test   ebx,ebx
c0027582:	0f 84 88 01 00 00    	je     c0027710 <__adddf3+0x645>
c0027588:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002758b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002758e:	85 c0                	test   eax,eax
c0027590:	79 10                	jns    c00275a2 <__adddf3+0x4d7>
c0027592:	31 c9                	xor    ecx,ecx
c0027594:	f7 da                	neg    edx
c0027596:	0f 95 c1             	setne  cl
c0027599:	01 c8                	add    eax,ecx
c002759b:	f7 d8                	neg    eax
c002759d:	e9 2f 01 00 00       	jmp    c00276d1 <__adddf3+0x606>
c00275a2:	31 ff                	xor    edi,edi
c00275a4:	31 c9                	xor    ecx,ecx
c00275a6:	89 c3                	mov    ebx,eax
c00275a8:	09 d3                	or     ebx,edx
c00275aa:	0f 84 60 01 00 00    	je     c0027710 <__adddf3+0x645>
c00275b0:	e9 05 01 00 00       	jmp    c00276ba <__adddf3+0x5ef>
c00275b5:	31 ff                	xor    edi,edi
c00275b7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00275bc:	e9 4f 01 00 00       	jmp    c0027710 <__adddf3+0x645>
c00275c1:	89 c1                	mov    ecx,eax
c00275c3:	89 d0                	mov    eax,edx
c00275c5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00275c8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00275cb:	89 ca                	mov    edx,ecx
c00275cd:	85 c9                	test   ecx,ecx
c00275cf:	79 2c                	jns    c00275fd <__adddf3+0x532>
c00275d1:	31 c9                	xor    ecx,ecx
c00275d3:	f7 d8                	neg    eax
c00275d5:	0f 95 c1             	setne  cl
c00275d8:	01 ca                	add    edx,ecx
c00275da:	f7 da                	neg    edx
c00275dc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00275df:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275e2:	eb 19                	jmp    c00275fd <__adddf3+0x532>
c00275e4:	85 c0                	test   eax,eax
c00275e6:	0f 89 e5 00 00 00    	jns    c00276d1 <__adddf3+0x606>
c00275ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00275f1:	89 c1                	mov    ecx,eax
c00275f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00275f6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00275f9:	89 d0                	mov    eax,edx
c00275fb:	89 ca                	mov    edx,ecx
c00275fd:	85 d2                	test   edx,edx
c00275ff:	74 59                	je     c002765a <__adddf3+0x58f>
c0027601:	0f bd da             	bsr    ebx,edx
c0027604:	83 f3 1f             	xor    ebx,0x1f
c0027607:	88 d9                	mov    cl,bl
c0027609:	d3 e2                	shl    edx,cl
c002760b:	bf 20 00 00 00       	mov    edi,0x20
c0027610:	89 f9                	mov    ecx,edi
c0027612:	29 d9                	sub    ecx,ebx
c0027614:	89 c6                	mov    esi,eax
c0027616:	d3 ee                	shr    esi,cl
c0027618:	09 d6                	or     esi,edx
c002761a:	88 d9                	mov    cl,bl
c002761c:	d3 e0                	shl    eax,cl
c002761e:	89 c2                	mov    edx,eax
c0027620:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027623:	25 ff 07 00 00       	and    eax,0x7ff
c0027628:	39 d8                	cmp    eax,ebx
c002762a:	7f 22                	jg     c002764e <__adddf3+0x583>
c002762c:	29 c3                	sub    ebx,eax
c002762e:	43                   	inc    ebx
c002762f:	88 d9                	mov    cl,bl
c0027631:	d3 ea                	shr    edx,cl
c0027633:	29 df                	sub    edi,ebx
c0027635:	89 f9                	mov    ecx,edi
c0027637:	89 f0                	mov    eax,esi
c0027639:	d3 e0                	shl    eax,cl
c002763b:	09 c2                	or     edx,eax
c002763d:	89 f0                	mov    eax,esi
c002763f:	88 d9                	mov    cl,bl
c0027641:	d3 e8                	shr    eax,cl
c0027643:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027646:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002764c:	eb 6f                	jmp    c00276bd <__adddf3+0x5f2>
c002764e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027651:	29 d8                	sub    eax,ebx
c0027653:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027656:	89 f0                	mov    eax,esi
c0027658:	eb 59                	jmp    c00276b3 <__adddf3+0x5e8>
c002765a:	85 c0                	test   eax,eax
c002765c:	74 6a                	je     c00276c8 <__adddf3+0x5fd>
c002765e:	0f bd c8             	bsr    ecx,eax
c0027661:	83 f1 1f             	xor    ecx,0x1f
c0027664:	d3 e0                	shl    eax,cl
c0027666:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027669:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002766f:	83 c1 20             	add    ecx,0x20
c0027672:	39 cb                	cmp    ebx,ecx
c0027674:	7f 35                	jg     c00276ab <__adddf3+0x5e0>
c0027676:	29 d9                	sub    ecx,ebx
c0027678:	8d 71 01             	lea    esi,[ecx+0x1]
c002767b:	83 fe 1f             	cmp    esi,0x1f
c002767e:	7e 09                	jle    c0027689 <__adddf3+0x5be>
c0027680:	83 e9 1f             	sub    ecx,0x1f
c0027683:	d3 e8                	shr    eax,cl
c0027685:	89 c3                	mov    ebx,eax
c0027687:	eb 11                	jmp    c002769a <__adddf3+0x5cf>
c0027689:	b9 20 00 00 00       	mov    ecx,0x20
c002768e:	29 f1                	sub    ecx,esi
c0027690:	89 c3                	mov    ebx,eax
c0027692:	d3 e3                	shl    ebx,cl
c0027694:	89 f1                	mov    ecx,esi
c0027696:	d3 e8                	shr    eax,cl
c0027698:	89 c2                	mov    edx,eax
c002769a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002769d:	25 00 f8 ff ff       	and    eax,0xfffff800
c00276a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276a5:	89 d0                	mov    eax,edx
c00276a7:	89 da                	mov    edx,ebx
c00276a9:	eb 26                	jmp    c00276d1 <__adddf3+0x606>
c00276ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276ae:	29 cf                	sub    edi,ecx
c00276b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276b3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276b8:	eb 17                	jmp    c00276d1 <__adddf3+0x606>
c00276ba:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276bd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276c0:	eb 0f                	jmp    c00276d1 <__adddf3+0x606>
c00276c2:	31 d2                	xor    edx,edx
c00276c4:	31 c0                	xor    eax,eax
c00276c6:	eb 09                	jmp    c00276d1 <__adddf3+0x606>
c00276c8:	89 c2                	mov    edx,eax
c00276ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00276d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276d4:	c1 e1 14             	shl    ecx,0x14
c00276d7:	89 c3                	mov    ebx,eax
c00276d9:	c1 eb 0b             	shr    ebx,0xb
c00276dc:	09 d9                	or     ecx,ebx
c00276de:	89 d3                	mov    ebx,edx
c00276e0:	c1 eb 0b             	shr    ebx,0xb
c00276e3:	c1 e0 15             	shl    eax,0x15
c00276e6:	09 d8                	or     eax,ebx
c00276e8:	89 c7                	mov    edi,eax
c00276ea:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00276f0:	0f 95 c0             	setne  al
c00276f3:	89 c6                	mov    esi,eax
c00276f5:	09 f3                	or     ebx,esi
c00276f7:	83 e3 01             	and    ebx,0x1
c00276fa:	c1 ea 0a             	shr    edx,0xa
c00276fd:	21 da                	and    edx,ebx
c00276ff:	89 f8                	mov    eax,edi
c0027701:	01 d0                	add    eax,edx
c0027703:	83 d1 00             	adc    ecx,0x0
c0027706:	89 c7                	mov    edi,eax
c0027708:	eb 06                	jmp    c0027710 <__adddf3+0x645>
c002770a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002770d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027710:	89 f8                	mov    eax,edi
c0027712:	89 ca                	mov    edx,ecx
c0027714:	83 c4 24             	add    esp,0x24
c0027717:	5b                   	pop    ebx
c0027718:	5e                   	pop    esi
c0027719:	5f                   	pop    edi
c002771a:	5d                   	pop    ebp
c002771b:	c3                   	ret    

c002771c <__subdf3>:
c002771c:	55                   	push   ebp
c002771d:	89 e5                	mov    ebp,esp
c002771f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027722:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027725:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002772b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002772e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027731:	5d                   	pop    ebp
c0027732:	e9 94 f9 ff ff       	jmp    c00270cb <__adddf3>

c0027737 <__negdf2>:
c0027737:	55                   	push   ebp
c0027738:	89 e5                	mov    ebp,esp
c002773a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002773d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027740:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027746:	5d                   	pop    ebp
c0027747:	c3                   	ret    

c0027748 <__muldf3>:
c0027748:	55                   	push   ebp
c0027749:	89 e5                	mov    ebp,esp
c002774b:	57                   	push   edi
c002774c:	56                   	push   esi
c002774d:	53                   	push   ebx
c002774e:	83 ec 24             	sub    esp,0x24
c0027751:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027757:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002775a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002775d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027760:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027763:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027766:	89 c8                	mov    eax,ecx
c0027768:	c1 f8 14             	sar    eax,0x14
c002776b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002776e:	89 f8                	mov    eax,edi
c0027770:	89 fb                	mov    ebx,edi
c0027772:	c1 e3 0b             	shl    ebx,0xb
c0027775:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027778:	c1 e1 0b             	shl    ecx,0xb
c002777b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027781:	c1 e8 15             	shr    eax,0x15
c0027784:	09 c1                	or     ecx,eax
c0027786:	89 d6                	mov    esi,edx
c0027788:	89 d0                	mov    eax,edx
c002778a:	c1 f8 14             	sar    eax,0x14
c002778d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027790:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027793:	89 c3                	mov    ebx,eax
c0027795:	c1 e3 0b             	shl    ebx,0xb
c0027798:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002779b:	c1 e6 0b             	shl    esi,0xb
c002779e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00277a4:	c1 e8 15             	shr    eax,0x15
c00277a7:	09 c6                	or     esi,eax
c00277a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277ac:	25 ff 07 00 00       	and    eax,0x7ff
c00277b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00277b4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277b7:	25 ff 07 00 00       	and    eax,0x7ff
c00277bc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00277bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00277c2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00277c5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00277cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277cf:	40                   	inc    eax
c00277d0:	a9 fe 07 00 00       	test   eax,0x7fe
c00277d5:	0f 85 8d 00 00 00    	jne    c0027868 <__muldf3+0x120>
c00277db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277de:	09 c8                	or     eax,ecx
c00277e0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00277e4:	74 44                	je     c002782a <__muldf3+0xe2>
c00277e6:	85 c0                	test   eax,eax
c00277e8:	0f 85 31 02 00 00    	jne    c0027a1f <__muldf3+0x2d7>
c00277ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277f1:	40                   	inc    eax
c00277f2:	a9 fe 07 00 00       	test   eax,0x7fe
c00277f7:	75 13                	jne    c002780c <__muldf3+0xc4>
c00277f9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277fc:	09 f1                	or     ecx,esi
c00277fe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027802:	74 22                	je     c0027826 <__muldf3+0xde>
c0027804:	85 c9                	test   ecx,ecx
c0027806:	0f 85 0d 02 00 00    	jne    c0027a19 <__muldf3+0x2d1>
c002780c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027810:	0f 89 09 02 00 00    	jns    c0027a1f <__muldf3+0x2d7>
c0027816:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027819:	05 00 00 00 80       	add    eax,0x80000000
c002781e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027821:	e9 f9 01 00 00       	jmp    c0027a1f <__muldf3+0x2d7>
c0027826:	85 c9                	test   ecx,ecx
c0027828:	eb 2e                	jmp    c0027858 <__muldf3+0x110>
c002782a:	85 c0                	test   eax,eax
c002782c:	74 20                	je     c002784e <__muldf3+0x106>
c002782e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027831:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027834:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027837:	c1 ef 1f             	shr    edi,0x1f
c002783a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002783d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027840:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027843:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027846:	09 f9                	or     ecx,edi
c0027848:	78 1e                	js     c0027868 <__muldf3+0x120>
c002784a:	89 c3                	mov    ebx,eax
c002784c:	eb e0                	jmp    c002782e <__muldf3+0xe6>
c002784e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027851:	f7 d0                	not    eax
c0027853:	a9 ff 07 00 00       	test   eax,0x7ff
c0027858:	75 b2                	jne    c002780c <__muldf3+0xc4>
c002785a:	31 ff                	xor    edi,edi
c002785c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027863:	e9 b7 01 00 00       	jmp    c0027a1f <__muldf3+0x2d7>
c0027868:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002786b:	40                   	inc    eax
c002786c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027871:	75 57                	jne    c00278ca <__muldf3+0x182>
c0027873:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027876:	09 f0                	or     eax,esi
c0027878:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002787c:	74 23                	je     c00278a1 <__muldf3+0x159>
c002787e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027882:	0f 89 91 01 00 00    	jns    c0027a19 <__muldf3+0x2d1>
c0027888:	85 c0                	test   eax,eax
c002788a:	0f 85 89 01 00 00    	jne    c0027a19 <__muldf3+0x2d1>
c0027890:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027893:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027899:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002789c:	e9 7e 01 00 00       	jmp    c0027a1f <__muldf3+0x2d7>
c00278a1:	85 c0                	test   eax,eax
c00278a3:	75 0c                	jne    c00278b1 <__muldf3+0x169>
c00278a5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00278a9:	0f 89 6a 01 00 00    	jns    c0027a19 <__muldf3+0x2d1>
c00278af:	eb df                	jmp    c0027890 <__muldf3+0x148>
c00278b1:	01 f6                	add    esi,esi
c00278b3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278b6:	c1 ea 1f             	shr    edx,0x1f
c00278b9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278bc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00278bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278c2:	09 d6                	or     esi,edx
c00278c4:	78 04                	js     c00278ca <__muldf3+0x182>
c00278c6:	89 c3                	mov    ebx,eax
c00278c8:	eb e7                	jmp    c00278b1 <__muldf3+0x169>
c00278ca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00278d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278d6:	89 c8                	mov    eax,ecx
c00278d8:	f7 e6                	mul    esi
c00278da:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00278dd:	89 c7                	mov    edi,eax
c00278df:	89 c8                	mov    eax,ecx
c00278e1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278e4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00278e7:	89 c1                	mov    ecx,eax
c00278e9:	89 f0                	mov    eax,esi
c00278eb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00278ee:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00278f1:	89 c6                	mov    esi,eax
c00278f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278f6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00278f9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00278fc:	31 c0                	xor    eax,eax
c00278fe:	01 f1                	add    ecx,esi
c0027900:	0f 92 c0             	setb   al
c0027903:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027906:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027909:	83 d6 00             	adc    esi,0x0
c002790c:	01 c7                	add    edi,eax
c002790e:	83 d6 00             	adc    esi,0x0
c0027911:	01 ca                	add    edx,ecx
c0027913:	0f 92 c1             	setb   cl
c0027916:	0f b6 c9             	movzx  ecx,cl
c0027919:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002791c:	83 d6 00             	adc    esi,0x0
c002791f:	01 cf                	add    edi,ecx
c0027921:	83 d6 00             	adc    esi,0x0
c0027924:	31 c9                	xor    ecx,ecx
c0027926:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027929:	0f 95 c1             	setne  cl
c002792c:	09 cf                	or     edi,ecx
c002792e:	85 f6                	test   esi,esi
c0027930:	78 0c                	js     c002793e <__muldf3+0x1f6>
c0027932:	01 f6                	add    esi,esi
c0027934:	89 f8                	mov    eax,edi
c0027936:	c1 e8 1f             	shr    eax,0x1f
c0027939:	09 c6                	or     esi,eax
c002793b:	01 ff                	add    edi,edi
c002793d:	4b                   	dec    ebx
c002793e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027944:	0f 8f 85 00 00 00    	jg     c00279cf <__muldf3+0x287>
c002794a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027950:	85 db                	test   ebx,ebx
c0027952:	0f 8f 84 00 00 00    	jg     c00279dc <__muldf3+0x294>
c0027958:	83 fb cc             	cmp    ebx,0xffffffcc
c002795b:	7c 79                	jl     c00279d6 <__muldf3+0x28e>
c002795d:	ba 01 00 00 00       	mov    edx,0x1
c0027962:	29 da                	sub    edx,ebx
c0027964:	81 ce 00 00 00 80    	or     esi,0x80000000
c002796a:	83 fa 1f             	cmp    edx,0x1f
c002796d:	7e 30                	jle    c002799f <__muldf3+0x257>
c002796f:	83 fa 20             	cmp    edx,0x20
c0027972:	75 0b                	jne    c002797f <__muldf3+0x237>
c0027974:	31 c0                	xor    eax,eax
c0027976:	85 ff                	test   edi,edi
c0027978:	0f 95 c0             	setne  al
c002797b:	89 c7                	mov    edi,eax
c002797d:	eb 1a                	jmp    c0027999 <__muldf3+0x251>
c002797f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027982:	89 f0                	mov    eax,esi
c0027984:	d3 e0                	shl    eax,cl
c0027986:	09 f8                	or     eax,edi
c0027988:	0f 95 c0             	setne  al
c002798b:	0f b6 c0             	movzx  eax,al
c002798e:	89 c7                	mov    edi,eax
c0027990:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027995:	29 d9                	sub    ecx,ebx
c0027997:	d3 ee                	shr    esi,cl
c0027999:	09 f7                	or     edi,esi
c002799b:	31 db                	xor    ebx,ebx
c002799d:	eb 3b                	jmp    c00279da <__muldf3+0x292>
c002799f:	83 c3 1f             	add    ebx,0x1f
c00279a2:	89 f0                	mov    eax,esi
c00279a4:	88 d9                	mov    cl,bl
c00279a6:	d3 e0                	shl    eax,cl
c00279a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279ab:	89 f8                	mov    eax,edi
c00279ad:	88 d1                	mov    cl,dl
c00279af:	d3 e8                	shr    eax,cl
c00279b1:	89 c1                	mov    ecx,eax
c00279b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279b6:	09 c8                	or     eax,ecx
c00279b8:	88 d9                	mov    cl,bl
c00279ba:	d3 e7                	shl    edi,cl
c00279bc:	31 db                	xor    ebx,ebx
c00279be:	85 ff                	test   edi,edi
c00279c0:	0f 95 c3             	setne  bl
c00279c3:	89 df                	mov    edi,ebx
c00279c5:	09 c7                	or     edi,eax
c00279c7:	88 d1                	mov    cl,dl
c00279c9:	d3 ee                	shr    esi,cl
c00279cb:	31 db                	xor    ebx,ebx
c00279cd:	eb 0d                	jmp    c00279dc <__muldf3+0x294>
c00279cf:	bb ff 07 00 00       	mov    ebx,0x7ff
c00279d4:	eb 02                	jmp    c00279d8 <__muldf3+0x290>
c00279d6:	31 db                	xor    ebx,ebx
c00279d8:	31 ff                	xor    edi,edi
c00279da:	31 f6                	xor    esi,esi
c00279dc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279df:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00279e2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279e7:	09 c3                	or     ebx,eax
c00279e9:	c1 e3 14             	shl    ebx,0x14
c00279ec:	89 f0                	mov    eax,esi
c00279ee:	c1 e8 0b             	shr    eax,0xb
c00279f1:	09 c3                	or     ebx,eax
c00279f3:	89 f8                	mov    eax,edi
c00279f5:	c1 e8 0b             	shr    eax,0xb
c00279f8:	c1 e6 15             	shl    esi,0x15
c00279fb:	09 c6                	or     esi,eax
c00279fd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027a03:	0f 95 c1             	setne  cl
c0027a06:	09 c8                	or     eax,ecx
c0027a08:	83 e0 01             	and    eax,0x1
c0027a0b:	c1 ef 0a             	shr    edi,0xa
c0027a0e:	21 c7                	and    edi,eax
c0027a10:	01 f7                	add    edi,esi
c0027a12:	83 d3 00             	adc    ebx,0x0
c0027a15:	89 da                	mov    edx,ebx
c0027a17:	eb 03                	jmp    c0027a1c <__muldf3+0x2d4>
c0027a19:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a1c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027a1f:	89 f8                	mov    eax,edi
c0027a21:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027a24:	83 c4 24             	add    esp,0x24
c0027a27:	5b                   	pop    ebx
c0027a28:	5e                   	pop    esi
c0027a29:	5f                   	pop    edi
c0027a2a:	5d                   	pop    ebp
c0027a2b:	c3                   	ret    

c0027a2c <__divdf3>:
c0027a2c:	55                   	push   ebp
c0027a2d:	89 e5                	mov    ebp,esp
c0027a2f:	57                   	push   edi
c0027a30:	56                   	push   esi
c0027a31:	53                   	push   ebx
c0027a32:	83 ec 2c             	sub    esp,0x2c
c0027a35:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027a44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a47:	89 ce                	mov    esi,ecx
c0027a49:	89 c8                	mov    eax,ecx
c0027a4b:	c1 f8 14             	sar    eax,0x14
c0027a4e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a51:	89 f8                	mov    eax,edi
c0027a53:	89 fb                	mov    ebx,edi
c0027a55:	c1 e3 0b             	shl    ebx,0xb
c0027a58:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027a5b:	c1 e6 0b             	shl    esi,0xb
c0027a5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a64:	c1 e8 15             	shr    eax,0x15
c0027a67:	09 c6                	or     esi,eax
c0027a69:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027a6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a6f:	89 c2                	mov    edx,eax
c0027a71:	c1 fa 14             	sar    edx,0x14
c0027a74:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a7a:	89 de                	mov    esi,ebx
c0027a7c:	c1 e6 0b             	shl    esi,0xb
c0027a7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027a82:	c1 e0 0b             	shl    eax,0xb
c0027a85:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027a8a:	c1 eb 15             	shr    ebx,0x15
c0027a8d:	09 d8                	or     eax,ebx
c0027a8f:	89 c2                	mov    edx,eax
c0027a91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a94:	25 ff 07 00 00       	and    eax,0x7ff
c0027a99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027a9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a9f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027aa5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027aa8:	29 d8                	sub    eax,ebx
c0027aaa:	05 ff 03 00 00       	add    eax,0x3ff
c0027aaf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027ab2:	46                   	inc    esi
c0027ab3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ab9:	0f 85 a5 00 00 00    	jne    c0027b64 <__divdf3+0x138>
c0027abf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ac2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ac5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ac9:	74 2a                	je     c0027af5 <__divdf3+0xc9>
c0027acb:	85 f6                	test   esi,esi
c0027acd:	0f 85 cc 02 00 00    	jne    c0027d9f <__divdf3+0x373>
c0027ad3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ad6:	40                   	inc    eax
c0027ad7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027adc:	75 26                	jne    c0027b04 <__divdf3+0xd8>
c0027ade:	85 db                	test   ebx,ebx
c0027ae0:	74 22                	je     c0027b04 <__divdf3+0xd8>
c0027ae2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ae5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ae8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027aeb:	09 d0                	or     eax,edx
c0027aed:	0f 85 ac 02 00 00    	jne    c0027d9f <__divdf3+0x373>
c0027af3:	eb 63                	jmp    c0027b58 <__divdf3+0x12c>
c0027af5:	85 f6                	test   esi,esi
c0027af7:	75 22                	jne    c0027b1b <__divdf3+0xef>
c0027af9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027afc:	40                   	inc    eax
c0027afd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b02:	74 36                	je     c0027b3a <__divdf3+0x10e>
c0027b04:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027b08:	0f 89 91 02 00 00    	jns    c0027d9f <__divdf3+0x373>
c0027b0e:	89 f8                	mov    eax,edi
c0027b10:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b16:	e9 80 02 00 00       	jmp    c0027d9b <__divdf3+0x36f>
c0027b1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b1e:	01 f6                	add    esi,esi
c0027b20:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b23:	c1 ef 1f             	shr    edi,0x1f
c0027b26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b29:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027b2c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027b2f:	09 f7                	or     edi,esi
c0027b31:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027b34:	78 2e                	js     c0027b64 <__divdf3+0x138>
c0027b36:	89 c8                	mov    eax,ecx
c0027b38:	eb e1                	jmp    c0027b1b <__divdf3+0xef>
c0027b3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b3d:	09 d0                	or     eax,edx
c0027b3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b43:	74 0f                	je     c0027b54 <__divdf3+0x128>
c0027b45:	85 c0                	test   eax,eax
c0027b47:	74 bb                	je     c0027b04 <__divdf3+0xd8>
c0027b49:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b4c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b4f:	e9 4b 02 00 00       	jmp    c0027d9f <__divdf3+0x373>
c0027b54:	85 c0                	test   eax,eax
c0027b56:	75 ac                	jne    c0027b04 <__divdf3+0xd8>
c0027b58:	31 ff                	xor    edi,edi
c0027b5a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b5f:	e9 3b 02 00 00       	jmp    c0027d9f <__divdf3+0x373>
c0027b64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027b6a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027b70:	75 6b                	jne    c0027bdd <__divdf3+0x1b1>
c0027b72:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b75:	09 d6                	or     esi,edx
c0027b77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b7b:	74 28                	je     c0027ba5 <__divdf3+0x179>
c0027b7d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b80:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b83:	85 f6                	test   esi,esi
c0027b85:	0f 85 14 02 00 00    	jne    c0027d9f <__divdf3+0x373>
c0027b8b:	31 ff                	xor    edi,edi
c0027b8d:	31 c9                	xor    ecx,ecx
c0027b8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b92:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027b95:	0f 89 04 02 00 00    	jns    c0027d9f <__divdf3+0x373>
c0027b9b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ba0:	e9 fa 01 00 00       	jmp    c0027d9f <__divdf3+0x373>
c0027ba5:	85 f6                	test   esi,esi
c0027ba7:	75 1b                	jne    c0027bc4 <__divdf3+0x198>
c0027ba9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bac:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027baf:	25 00 00 00 80       	and    eax,0x80000000
c0027bb4:	31 c9                	xor    ecx,ecx
c0027bb6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027bbb:	89 cf                	mov    edi,ecx
c0027bbd:	89 c1                	mov    ecx,eax
c0027bbf:	e9 db 01 00 00       	jmp    c0027d9f <__divdf3+0x373>
c0027bc4:	01 d2                	add    edx,edx
c0027bc6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027bc9:	c1 eb 1f             	shr    ebx,0x1f
c0027bcc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bcf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027bd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027bd5:	09 da                	or     edx,ebx
c0027bd7:	78 04                	js     c0027bdd <__divdf3+0x1b1>
c0027bd9:	89 c8                	mov    eax,ecx
c0027bdb:	eb e7                	jmp    c0027bc4 <__divdf3+0x198>
c0027bdd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027be0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027be6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bec:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027bef:	39 d6                	cmp    esi,edx
c0027bf1:	77 0d                	ja     c0027c00 <__divdf3+0x1d4>
c0027bf3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027bf6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027bf9:	72 1b                	jb     c0027c16 <__divdf3+0x1ea>
c0027bfb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027bfe:	75 16                	jne    c0027c16 <__divdf3+0x1ea>
c0027c00:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c03:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c06:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027c09:	83 de 00             	sbb    esi,0x0
c0027c0c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027c0f:	ba 01 00 00 00       	mov    edx,0x1
c0027c14:	eb 02                	jmp    c0027c18 <__divdf3+0x1ec>
c0027c16:	31 d2                	xor    edx,edx
c0027c18:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027c1f:	31 ff                	xor    edi,edi
c0027c21:	01 ff                	add    edi,edi
c0027c23:	89 d1                	mov    ecx,edx
c0027c25:	c1 e9 1f             	shr    ecx,0x1f
c0027c28:	09 cf                	or     edi,ecx
c0027c2a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027c2d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027c30:	89 da                	mov    edx,ebx
c0027c32:	89 f3                	mov    ebx,esi
c0027c34:	8d 34 36             	lea    esi,[esi+esi*1]
c0027c37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c3a:	c1 e9 1f             	shr    ecx,0x1f
c0027c3d:	09 ce                	or     esi,ecx
c0027c3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c42:	01 c9                	add    ecx,ecx
c0027c44:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027c47:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c4a:	85 db                	test   ebx,ebx
c0027c4c:	78 29                	js     c0027c77 <__divdf3+0x24b>
c0027c4e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027c51:	72 07                	jb     c0027c5a <__divdf3+0x22e>
c0027c53:	75 3c                	jne    c0027c91 <__divdf3+0x265>
c0027c55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c58:	77 37                	ja     c0027c91 <__divdf3+0x265>
c0027c5a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c5d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027c60:	31 d2                	xor    edx,edx
c0027c62:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027c65:	0f 97 c2             	seta   dl
c0027c68:	29 d6                	sub    esi,edx
c0027c6a:	89 d9                	mov    ecx,ebx
c0027c6c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027c6f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c72:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027c75:	eb 17                	jmp    c0027c8e <__divdf3+0x262>
c0027c77:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c7a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c80:	0f 97 c1             	seta   cl
c0027c83:	0f b6 c9             	movzx  ecx,cl
c0027c86:	29 ce                	sub    esi,ecx
c0027c88:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027c8b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027c8e:	83 ca 01             	or     edx,0x1
c0027c91:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027c94:	75 8b                	jne    c0027c21 <__divdf3+0x1f5>
c0027c96:	c1 e7 09             	shl    edi,0x9
c0027c99:	89 d1                	mov    ecx,edx
c0027c9b:	c1 e9 17             	shr    ecx,0x17
c0027c9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ca1:	09 f3                	or     ebx,esi
c0027ca3:	0f 95 c3             	setne  bl
c0027ca6:	0f b6 db             	movzx  ebx,bl
c0027ca9:	c1 e2 09             	shl    edx,0x9
c0027cac:	09 d3                	or     ebx,edx
c0027cae:	89 ca                	mov    edx,ecx
c0027cb0:	09 fa                	or     edx,edi
c0027cb2:	78 0c                	js     c0027cc0 <__divdf3+0x294>
c0027cb4:	01 d2                	add    edx,edx
c0027cb6:	89 d9                	mov    ecx,ebx
c0027cb8:	c1 e9 1f             	shr    ecx,0x1f
c0027cbb:	09 ca                	or     edx,ecx
c0027cbd:	01 db                	add    ebx,ebx
c0027cbf:	48                   	dec    eax
c0027cc0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027cc5:	0f 8f 83 00 00 00    	jg     c0027d4e <__divdf3+0x322>
c0027ccb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027cd1:	85 c0                	test   eax,eax
c0027cd3:	0f 8f 82 00 00 00    	jg     c0027d5b <__divdf3+0x32f>
c0027cd9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027cdc:	7c 77                	jl     c0027d55 <__divdf3+0x329>
c0027cde:	be 01 00 00 00       	mov    esi,0x1
c0027ce3:	29 c6                	sub    esi,eax
c0027ce5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ceb:	83 fe 1f             	cmp    esi,0x1f
c0027cee:	7e 2f                	jle    c0027d1f <__divdf3+0x2f3>
c0027cf0:	83 fe 20             	cmp    esi,0x20
c0027cf3:	75 0a                	jne    c0027cff <__divdf3+0x2d3>
c0027cf5:	85 db                	test   ebx,ebx
c0027cf7:	0f 95 c3             	setne  bl
c0027cfa:	0f b6 db             	movzx  ebx,bl
c0027cfd:	eb 1a                	jmp    c0027d19 <__divdf3+0x2ed>
c0027cff:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027d02:	89 d7                	mov    edi,edx
c0027d04:	d3 e7                	shl    edi,cl
c0027d06:	89 f9                	mov    ecx,edi
c0027d08:	09 d9                	or     ecx,ebx
c0027d0a:	0f 95 c3             	setne  bl
c0027d0d:	0f b6 db             	movzx  ebx,bl
c0027d10:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d15:	29 c1                	sub    ecx,eax
c0027d17:	d3 ea                	shr    edx,cl
c0027d19:	09 d3                	or     ebx,edx
c0027d1b:	31 c0                	xor    eax,eax
c0027d1d:	eb 3a                	jmp    c0027d59 <__divdf3+0x32d>
c0027d1f:	83 c0 1f             	add    eax,0x1f
c0027d22:	89 d7                	mov    edi,edx
c0027d24:	88 c1                	mov    cl,al
c0027d26:	d3 e7                	shl    edi,cl
c0027d28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d2b:	89 df                	mov    edi,ebx
c0027d2d:	89 f1                	mov    ecx,esi
c0027d2f:	d3 ef                	shr    edi,cl
c0027d31:	89 f9                	mov    ecx,edi
c0027d33:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d36:	09 cf                	or     edi,ecx
c0027d38:	88 c1                	mov    cl,al
c0027d3a:	d3 e3                	shl    ebx,cl
c0027d3c:	85 db                	test   ebx,ebx
c0027d3e:	0f 95 c3             	setne  bl
c0027d41:	0f b6 db             	movzx  ebx,bl
c0027d44:	09 fb                	or     ebx,edi
c0027d46:	89 f1                	mov    ecx,esi
c0027d48:	d3 ea                	shr    edx,cl
c0027d4a:	31 c0                	xor    eax,eax
c0027d4c:	eb 0d                	jmp    c0027d5b <__divdf3+0x32f>
c0027d4e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027d53:	eb 02                	jmp    c0027d57 <__divdf3+0x32b>
c0027d55:	31 c0                	xor    eax,eax
c0027d57:	31 db                	xor    ebx,ebx
c0027d59:	31 d2                	xor    edx,edx
c0027d5b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027d5e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027d61:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027d67:	09 c8                	or     eax,ecx
c0027d69:	c1 e0 14             	shl    eax,0x14
c0027d6c:	89 d1                	mov    ecx,edx
c0027d6e:	c1 e9 0b             	shr    ecx,0xb
c0027d71:	09 c8                	or     eax,ecx
c0027d73:	89 c6                	mov    esi,eax
c0027d75:	89 d9                	mov    ecx,ebx
c0027d77:	c1 e9 0b             	shr    ecx,0xb
c0027d7a:	c1 e2 15             	shl    edx,0x15
c0027d7d:	09 ca                	or     edx,ecx
c0027d7f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027d85:	0f 95 c0             	setne  al
c0027d88:	09 c1                	or     ecx,eax
c0027d8a:	83 e1 01             	and    ecx,0x1
c0027d8d:	c1 eb 0a             	shr    ebx,0xa
c0027d90:	21 cb                	and    ebx,ecx
c0027d92:	01 d3                	add    ebx,edx
c0027d94:	89 d8                	mov    eax,ebx
c0027d96:	83 d6 00             	adc    esi,0x0
c0027d99:	89 f2                	mov    edx,esi
c0027d9b:	89 c7                	mov    edi,eax
c0027d9d:	89 d1                	mov    ecx,edx
c0027d9f:	89 f8                	mov    eax,edi
c0027da1:	89 ca                	mov    edx,ecx
c0027da3:	83 c4 2c             	add    esp,0x2c
c0027da6:	5b                   	pop    ebx
c0027da7:	5e                   	pop    esi
c0027da8:	5f                   	pop    edi
c0027da9:	5d                   	pop    ebp
c0027daa:	c3                   	ret    

c0027dab <__floatsidf>:
c0027dab:	55                   	push   ebp
c0027dac:	89 e5                	mov    ebp,esp
c0027dae:	56                   	push   esi
c0027daf:	53                   	push   ebx
c0027db0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027db3:	85 db                	test   ebx,ebx
c0027db5:	7e 15                	jle    c0027dcc <__floatsidf+0x21>
c0027db7:	0f bd cb             	bsr    ecx,ebx
c0027dba:	83 f1 1f             	xor    ecx,0x1f
c0027dbd:	d3 e3                	shl    ebx,cl
c0027dbf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027dc5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027dca:	eb 21                	jmp    c0027ded <__floatsidf+0x42>
c0027dcc:	b8 00 00 00 00       	mov    eax,0x0
c0027dd1:	ba 00 00 00 00       	mov    edx,0x0
c0027dd6:	74 2a                	je     c0027e02 <__floatsidf+0x57>
c0027dd8:	f7 db                	neg    ebx
c0027dda:	0f bd cb             	bsr    ecx,ebx
c0027ddd:	83 f1 1f             	xor    ecx,0x1f
c0027de0:	d3 e3                	shl    ebx,cl
c0027de2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027de8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ded:	29 c8                	sub    eax,ecx
c0027def:	c1 e0 14             	shl    eax,0x14
c0027df2:	89 c1                	mov    ecx,eax
c0027df4:	89 de                	mov    esi,ebx
c0027df6:	c1 ee 0b             	shr    esi,0xb
c0027df9:	09 f1                	or     ecx,esi
c0027dfb:	89 ca                	mov    edx,ecx
c0027dfd:	c1 e3 15             	shl    ebx,0x15
c0027e00:	89 d8                	mov    eax,ebx
c0027e02:	5b                   	pop    ebx
c0027e03:	5e                   	pop    esi
c0027e04:	5d                   	pop    ebp
c0027e05:	c3                   	ret    

c0027e06 <__floatunsidf>:
c0027e06:	55                   	push   ebp
c0027e07:	89 e5                	mov    ebp,esp
c0027e09:	56                   	push   esi
c0027e0a:	53                   	push   ebx
c0027e0b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e0e:	85 db                	test   ebx,ebx
c0027e10:	74 2a                	je     c0027e3c <__floatunsidf+0x36>
c0027e12:	0f bd cb             	bsr    ecx,ebx
c0027e15:	83 f1 1f             	xor    ecx,0x1f
c0027e18:	d3 e3                	shl    ebx,cl
c0027e1a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e20:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e25:	29 c8                	sub    eax,ecx
c0027e27:	c1 e0 14             	shl    eax,0x14
c0027e2a:	89 c1                	mov    ecx,eax
c0027e2c:	89 de                	mov    esi,ebx
c0027e2e:	c1 ee 0b             	shr    esi,0xb
c0027e31:	09 f1                	or     ecx,esi
c0027e33:	89 ca                	mov    edx,ecx
c0027e35:	c1 e3 15             	shl    ebx,0x15
c0027e38:	89 d8                	mov    eax,ebx
c0027e3a:	eb 04                	jmp    c0027e40 <__floatunsidf+0x3a>
c0027e3c:	31 c0                	xor    eax,eax
c0027e3e:	31 d2                	xor    edx,edx
c0027e40:	5b                   	pop    ebx
c0027e41:	5e                   	pop    esi
c0027e42:	5d                   	pop    ebp
c0027e43:	c3                   	ret    

c0027e44 <__fixdfsi>:
c0027e44:	55                   	push   ebp
c0027e45:	89 e5                	mov    ebp,esp
c0027e47:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e4a:	89 d1                	mov    ecx,edx
c0027e4c:	c1 e1 0b             	shl    ecx,0xb
c0027e4f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e58:	c1 e8 15             	shr    eax,0x15
c0027e5b:	09 c1                	or     ecx,eax
c0027e5d:	c1 fa 14             	sar    edx,0x14
c0027e60:	78 1f                	js     c0027e81 <__fixdfsi+0x3d>
c0027e62:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027e68:	31 c0                	xor    eax,eax
c0027e6a:	83 fa 1e             	cmp    edx,0x1e
c0027e6d:	77 40                	ja     c0027eaf <__fixdfsi+0x6b>
c0027e6f:	89 c8                	mov    eax,ecx
c0027e71:	0d 00 00 00 80       	or     eax,0x80000000
c0027e76:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e7b:	29 d1                	sub    ecx,edx
c0027e7d:	d3 e8                	shr    eax,cl
c0027e7f:	eb 2e                	jmp    c0027eaf <__fixdfsi+0x6b>
c0027e81:	31 c0                	xor    eax,eax
c0027e83:	81 c2 01 04 00 00    	add    edx,0x401
c0027e89:	78 24                	js     c0027eaf <__fixdfsi+0x6b>
c0027e8b:	83 fa 1e             	cmp    edx,0x1e
c0027e8e:	7e 09                	jle    c0027e99 <__fixdfsi+0x55>
c0027e90:	83 fa 1f             	cmp    edx,0x1f
c0027e93:	75 18                	jne    c0027ead <__fixdfsi+0x69>
c0027e95:	85 c9                	test   ecx,ecx
c0027e97:	75 14                	jne    c0027ead <__fixdfsi+0x69>
c0027e99:	89 c8                	mov    eax,ecx
c0027e9b:	0d 00 00 00 80       	or     eax,0x80000000
c0027ea0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ea5:	29 d1                	sub    ecx,edx
c0027ea7:	d3 e8                	shr    eax,cl
c0027ea9:	f7 d8                	neg    eax
c0027eab:	eb 02                	jmp    c0027eaf <__fixdfsi+0x6b>
c0027ead:	31 c0                	xor    eax,eax
c0027eaf:	5d                   	pop    ebp
c0027eb0:	c3                   	ret    

c0027eb1 <__fixunsdfsi>:
c0027eb1:	55                   	push   ebp
c0027eb2:	89 e5                	mov    ebp,esp
c0027eb4:	53                   	push   ebx
c0027eb5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027eb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ebb:	89 d3                	mov    ebx,edx
c0027ebd:	c1 fb 14             	sar    ebx,0x14
c0027ec0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027ec6:	31 c0                	xor    eax,eax
c0027ec8:	83 fb 1f             	cmp    ebx,0x1f
c0027ecb:	77 1d                	ja     c0027eea <__fixunsdfsi+0x39>
c0027ecd:	89 d0                	mov    eax,edx
c0027ecf:	c1 e0 0b             	shl    eax,0xb
c0027ed2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ed7:	c1 e9 15             	shr    ecx,0x15
c0027eda:	09 c8                	or     eax,ecx
c0027edc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ee1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ee6:	29 d9                	sub    ecx,ebx
c0027ee8:	d3 e8                	shr    eax,cl
c0027eea:	5b                   	pop    ebx
c0027eeb:	5d                   	pop    ebp
c0027eec:	c3                   	ret    

c0027eed <__cmpdf2>:
c0027eed:	55                   	push   ebp
c0027eee:	89 e5                	mov    ebp,esp
c0027ef0:	57                   	push   edi
c0027ef1:	56                   	push   esi
c0027ef2:	53                   	push   ebx
c0027ef3:	83 ec 0c             	sub    esp,0xc
c0027ef6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ef9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027efc:	89 ca                	mov    edx,ecx
c0027efe:	c1 ea 14             	shr    edx,0x14
c0027f01:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027f07:	89 cb                	mov    ebx,ecx
c0027f09:	c1 fb 1f             	sar    ebx,0x1f
c0027f0c:	31 da                	xor    edx,ebx
c0027f0e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f11:	89 df                	mov    edi,ebx
c0027f13:	c1 e7 0b             	shl    edi,0xb
c0027f16:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f19:	c1 e1 0b             	shl    ecx,0xb
c0027f1c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f22:	c1 eb 15             	shr    ebx,0x15
c0027f25:	09 d9                	or     ecx,ebx
c0027f27:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027f2a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f2d:	89 ce                	mov    esi,ecx
c0027f2f:	c1 ee 14             	shr    esi,0x14
c0027f32:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f38:	89 cb                	mov    ebx,ecx
c0027f3a:	c1 fb 1f             	sar    ebx,0x1f
c0027f3d:	31 de                	xor    esi,ebx
c0027f3f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027f42:	89 df                	mov    edi,ebx
c0027f44:	c1 e7 0b             	shl    edi,0xb
c0027f47:	c1 e1 0b             	shl    ecx,0xb
c0027f4a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f50:	c1 eb 15             	shr    ebx,0x15
c0027f53:	09 d9                	or     ecx,ebx
c0027f55:	89 d3                	mov    ebx,edx
c0027f57:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f5d:	43                   	inc    ebx
c0027f5e:	83 fb 01             	cmp    ebx,0x1
c0027f61:	77 08                	ja     c0027f6b <__cmpdf2+0x7e>
c0027f63:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f66:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027f69:	75 68                	jne    c0027fd3 <__cmpdf2+0xe6>
c0027f6b:	89 f3                	mov    ebx,esi
c0027f6d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f73:	43                   	inc    ebx
c0027f74:	83 fb 01             	cmp    ebx,0x1
c0027f77:	77 06                	ja     c0027f7f <__cmpdf2+0x92>
c0027f79:	89 fb                	mov    ebx,edi
c0027f7b:	09 cb                	or     ebx,ecx
c0027f7d:	75 54                	jne    c0027fd3 <__cmpdf2+0xe6>
c0027f7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f82:	09 f8                	or     eax,edi
c0027f84:	09 c8                	or     eax,ecx
c0027f86:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027f89:	75 12                	jne    c0027f9d <__cmpdf2+0xb0>
c0027f8b:	8d 42 01             	lea    eax,[edx+0x1]
c0027f8e:	83 f8 01             	cmp    eax,0x1
c0027f91:	77 0a                	ja     c0027f9d <__cmpdf2+0xb0>
c0027f93:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027f96:	31 c0                	xor    eax,eax
c0027f98:	83 fb 01             	cmp    ebx,0x1
c0027f9b:	76 36                	jbe    c0027fd3 <__cmpdf2+0xe6>
c0027f9d:	b8 01 00 00 00       	mov    eax,0x1
c0027fa2:	39 f2                	cmp    edx,esi
c0027fa4:	7f 2d                	jg     c0027fd3 <__cmpdf2+0xe6>
c0027fa6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027fab:	7c 26                	jl     c0027fd3 <__cmpdf2+0xe6>
c0027fad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fb0:	77 07                	ja     c0027fb9 <__cmpdf2+0xcc>
c0027fb2:	72 16                	jb     c0027fca <__cmpdf2+0xdd>
c0027fb4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027fb7:	76 0a                	jbe    c0027fc3 <__cmpdf2+0xd6>
c0027fb9:	89 d0                	mov    eax,edx
c0027fbb:	c1 f8 1f             	sar    eax,0x1f
c0027fbe:	83 c8 01             	or     eax,0x1
c0027fc1:	eb 10                	jmp    c0027fd3 <__cmpdf2+0xe6>
c0027fc3:	b8 00 00 00 00       	mov    eax,0x0
c0027fc8:	73 09                	jae    c0027fd3 <__cmpdf2+0xe6>
c0027fca:	89 d0                	mov    eax,edx
c0027fcc:	c1 f8 1f             	sar    eax,0x1f
c0027fcf:	83 e0 02             	and    eax,0x2
c0027fd2:	48                   	dec    eax
c0027fd3:	83 c4 0c             	add    esp,0xc
c0027fd6:	5b                   	pop    ebx
c0027fd7:	5e                   	pop    esi
c0027fd8:	5f                   	pop    edi
c0027fd9:	5d                   	pop    ebp
c0027fda:	c3                   	ret    

c0027fdb <__eqdf2>:
c0027fdb:	55                   	push   ebp
c0027fdc:	89 e5                	mov    ebp,esp
c0027fde:	50                   	push   eax
c0027fdf:	6a 01                	push   0x1
c0027fe1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027fe4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027fe7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fed:	e8 fb fe ff ff       	call   c0027eed <__cmpdf2>
c0027ff2:	83 c4 18             	add    esp,0x18
c0027ff5:	c9                   	leave  
c0027ff6:	c3                   	ret    

c0027ff7 <__nedf2>:
c0027ff7:	eb e2                	jmp    c0027fdb <__eqdf2>

c0027ff9 <__gtdf2>:
c0027ff9:	55                   	push   ebp
c0027ffa:	89 e5                	mov    ebp,esp
c0027ffc:	50                   	push   eax
c0027ffd:	6a ff                	push   0xffffffff
c0027fff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028002:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028005:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028008:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002800b:	e8 dd fe ff ff       	call   c0027eed <__cmpdf2>
c0028010:	83 c4 18             	add    esp,0x18
c0028013:	c9                   	leave  
c0028014:	c3                   	ret    

c0028015 <__gedf2>:
c0028015:	eb e2                	jmp    c0027ff9 <__gtdf2>

c0028017 <__ltdf2>:
c0028017:	eb c2                	jmp    c0027fdb <__eqdf2>

c0028019 <__ledf2>:
c0028019:	eb c0                	jmp    c0027fdb <__eqdf2>

c002801b <__truncdfsf2>:
c002801b:	55                   	push   ebp
c002801c:	89 e5                	mov    ebp,esp
c002801e:	57                   	push   edi
c002801f:	56                   	push   esi
c0028020:	53                   	push   ebx
c0028021:	83 ec 0c             	sub    esp,0xc
c0028024:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028027:	89 d1                	mov    ecx,edx
c0028029:	c1 f9 14             	sar    ecx,0x14
c002802c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002802f:	89 df                	mov    edi,ebx
c0028031:	c1 e7 0b             	shl    edi,0xb
c0028034:	89 d0                	mov    eax,edx
c0028036:	c1 e0 0b             	shl    eax,0xb
c0028039:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002803e:	c1 eb 15             	shr    ebx,0x15
c0028041:	09 d8                	or     eax,ebx
c0028043:	89 cb                	mov    ebx,ecx
c0028045:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002804b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028051:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028057:	0f 86 9e 00 00 00    	jbe    c00280fb <__truncdfsf2+0xe0>
c002805d:	85 db                	test   ebx,ebx
c002805f:	75 0a                	jne    c002806b <__truncdfsf2+0x50>
c0028061:	c1 fa 17             	sar    edx,0x17
c0028064:	30 d2                	xor    dl,dl
c0028066:	e9 84 00 00 00       	jmp    c00280ef <__truncdfsf2+0xd4>
c002806b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028071:	83 fe 83             	cmp    esi,0xffffff83
c0028074:	7d 4b                	jge    c00280c1 <__truncdfsf2+0xa6>
c0028076:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002807b:	29 f1                	sub    ecx,esi
c002807d:	83 f9 1f             	cmp    ecx,0x1f
c0028080:	7f 6b                	jg     c00280ed <__truncdfsf2+0xd2>
c0028082:	0d 00 00 00 80       	or     eax,0x80000000
c0028087:	89 c3                	mov    ebx,eax
c0028089:	d3 eb                	shr    ebx,cl
c002808b:	be 01 00 00 00       	mov    esi,0x1
c0028090:	d3 e6                	shl    esi,cl
c0028092:	4e                   	dec    esi
c0028093:	21 f0                	and    eax,esi
c0028095:	09 f8                	or     eax,edi
c0028097:	0f 95 c0             	setne  al
c002809a:	0f b6 c0             	movzx  eax,al
c002809d:	09 c3                	or     ebx,eax
c002809f:	89 d9                	mov    ecx,ebx
c00280a1:	c1 e9 08             	shr    ecx,0x8
c00280a4:	f6 c3 7f             	test   bl,0x7f
c00280a7:	0f 95 c0             	setne  al
c00280aa:	09 c8                	or     eax,ecx
c00280ac:	83 e0 01             	and    eax,0x1
c00280af:	c1 eb 07             	shr    ebx,0x7
c00280b2:	21 c3                	and    ebx,eax
c00280b4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00280ba:	09 d1                	or     ecx,edx
c00280bc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00280bf:	eb 76                	jmp    c0028137 <__truncdfsf2+0x11c>
c00280c1:	83 c6 80             	add    esi,0xffffff80
c00280c4:	7e 1d                	jle    c00280e3 <__truncdfsf2+0xc8>
c00280c6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00280cc:	75 0b                	jne    c00280d9 <__truncdfsf2+0xbe>
c00280ce:	09 f8                	or     eax,edi
c00280d0:	74 09                	je     c00280db <__truncdfsf2+0xc0>
c00280d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00280d7:	eb 02                	jmp    c00280db <__truncdfsf2+0xc0>
c00280d9:	31 c0                	xor    eax,eax
c00280db:	c1 fa 17             	sar    edx,0x17
c00280de:	80 ca ff             	or     dl,0xff
c00280e1:	eb 0e                	jmp    c00280f1 <__truncdfsf2+0xd6>
c00280e3:	c1 fa 1f             	sar    edx,0x1f
c00280e6:	c1 e2 08             	shl    edx,0x8
c00280e9:	09 ca                	or     edx,ecx
c00280eb:	eb 04                	jmp    c00280f1 <__truncdfsf2+0xd6>
c00280ed:	31 d2                	xor    edx,edx
c00280ef:	31 c0                	xor    eax,eax
c00280f1:	c1 e2 17             	shl    edx,0x17
c00280f4:	c1 e8 08             	shr    eax,0x8
c00280f7:	09 d0                	or     eax,edx
c00280f9:	eb 3c                	jmp    c0028137 <__truncdfsf2+0x11c>
c00280fb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028101:	89 ca                	mov    edx,ecx
c0028103:	c1 fa 0b             	sar    edx,0xb
c0028106:	c1 e2 08             	shl    edx,0x8
c0028109:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002810c:	31 db                	xor    ebx,ebx
c002810e:	85 ff                	test   edi,edi
c0028110:	0f 95 c3             	setne  bl
c0028113:	09 d8                	or     eax,ebx
c0028115:	89 c3                	mov    ebx,eax
c0028117:	c1 eb 08             	shr    ebx,0x8
c002811a:	a8 7f                	test   al,0x7f
c002811c:	0f 95 c2             	setne  dl
c002811f:	89 d6                	mov    esi,edx
c0028121:	09 de                	or     esi,ebx
c0028123:	83 e6 01             	and    esi,0x1
c0028126:	c1 e8 07             	shr    eax,0x7
c0028129:	21 f0                	and    eax,esi
c002812b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002812e:	09 ca                	or     edx,ecx
c0028130:	c1 e2 17             	shl    edx,0x17
c0028133:	09 da                	or     edx,ebx
c0028135:	01 d0                	add    eax,edx
c0028137:	83 c4 0c             	add    esp,0xc
c002813a:	5b                   	pop    ebx
c002813b:	5e                   	pop    esi
c002813c:	5f                   	pop    edi
c002813d:	5d                   	pop    ebp
c002813e:	c3                   	ret    

c002813f <__extendsfdf2>:
c002813f:	55                   	push   ebp
c0028140:	89 e5                	mov    ebp,esp
c0028142:	57                   	push   edi
c0028143:	56                   	push   esi
c0028144:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028147:	89 d1                	mov    ecx,edx
c0028149:	c1 f9 17             	sar    ecx,0x17
c002814c:	c1 e2 08             	shl    edx,0x8
c002814f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028155:	89 c8                	mov    eax,ecx
c0028157:	80 e4 f8             	and    ah,0xf8
c002815a:	8d 71 01             	lea    esi,[ecx+0x1]
c002815d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028163:	75 27                	jne    c002818c <__extendsfdf2+0x4d>
c0028165:	81 e1 ff 00 00 00    	and    ecx,0xff
c002816b:	75 18                	jne    c0028185 <__extendsfdf2+0x46>
c002816d:	85 d2                	test   edx,edx
c002816f:	74 20                	je     c0028191 <__extendsfdf2+0x52>
c0028171:	41                   	inc    ecx
c0028172:	01 d2                	add    edx,edx
c0028174:	79 fb                	jns    c0028171 <__extendsfdf2+0x32>
c0028176:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002817c:	29 c8                	sub    eax,ecx
c002817e:	05 81 03 00 00       	add    eax,0x381
c0028183:	eb 0c                	jmp    c0028191 <__extendsfdf2+0x52>
c0028185:	05 00 07 00 00       	add    eax,0x700
c002818a:	eb 05                	jmp    c0028191 <__extendsfdf2+0x52>
c002818c:	05 80 03 00 00       	add    eax,0x380
c0028191:	c1 e0 14             	shl    eax,0x14
c0028194:	89 c1                	mov    ecx,eax
c0028196:	89 d0                	mov    eax,edx
c0028198:	c1 e8 0b             	shr    eax,0xb
c002819b:	09 c1                	or     ecx,eax
c002819d:	c1 e2 15             	shl    edx,0x15
c00281a0:	89 d0                	mov    eax,edx
c00281a2:	89 ca                	mov    edx,ecx
c00281a4:	5e                   	pop    esi
c00281a5:	5f                   	pop    edi
c00281a6:	5d                   	pop    ebp
c00281a7:	c3                   	ret    
c00281a8:	66 90                	xchg   ax,ax
c00281aa:	66 90                	xchg   ax,ax
c00281ac:	66 90                	xchg   ax,ax
c00281ae:	66 90                	xchg   ax,ax

c00281b0 <fabs>:
c00281b0:	83 ec 0c             	sub    esp,0xc
c00281b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00281ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00281c7:	dd 04 24             	fld    QWORD PTR [esp]
c00281ca:	83 c4 0c             	add    esp,0xc
c00281cd:	c3                   	ret    
c00281ce:	66 90                	xchg   ax,ax

c00281d0 <lrint>:
c00281d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00281d4:	83 ec 04             	sub    esp,0x4
c00281d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00281da:	58                   	pop    eax
c00281db:	c3                   	ret    

c00281dc <lrintf>:
c00281dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00281e0:	83 ec 04             	sub    esp,0x4
c00281e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00281e6:	58                   	pop    eax
c00281e7:	c3                   	ret    

Disassembly of section .init:

c00281e8 <_init>:
c00281e8:	55                   	push   ebp
c00281e9:	89 e5                	mov    ebp,esp
c00281eb:	e8 28 7f fd ff       	call   c0000118 <frame_dummy>
c00281f0:	e8 5b e0 ff ff       	call   c0026250 <__do_global_ctors_aux>
c00281f5:	5d                   	pop    ebp
c00281f6:	c3                   	ret    

Disassembly of section .fini:

c00281f7 <_fini>:
c00281f7:	55                   	push   ebp
c00281f8:	89 e5                	mov    ebp,esp
c00281fa:	e8 a9 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00281ff:	5d                   	pop    ebp
c0028200:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028202 <Computer::~Computer()>:
c0028202:	83 ec 0c             	sub    esp,0xc
c0028205:	ba 7c 9d 02 c0       	mov    edx,0xc0029d7c
c002820a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002820e:	89 10                	mov    DWORD PTR [eax],edx
c0028210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028214:	83 ec 0c             	sub    esp,0xc
c0028217:	50                   	push   eax
c0028218:	e8 f5 b5 fe ff       	call   c0013812 <Device::~Device()>
c002821d:	83 c4 10             	add    esp,0x10
c0028220:	90                   	nop
c0028221:	83 c4 0c             	add    esp,0xc
c0028224:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028226 <Computer::~Computer()>:
c0028226:	83 ec 0c             	sub    esp,0xc
c0028229:	83 ec 0c             	sub    esp,0xc
c002822c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028230:	e8 cd ff ff ff       	call   c0028202 <Computer::~Computer()>
c0028235:	83 c4 10             	add    esp,0x10
c0028238:	83 ec 08             	sub    esp,0x8
c002823b:	68 ec 01 00 00       	push   0x1ec
c0028240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028244:	e8 ea a1 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028249:	83 c4 10             	add    esp,0x10
c002824c:	83 c4 0c             	add    esp,0xc
c002824f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028250 <idleCommon()>:
c0028250:	83 ec 0c             	sub    esp,0xc
c0028253:	fa                   	cli    
c0028254:	ff 05 c8 0a 03 c0    	inc    DWORD PTR ds:0xc0030ac8
c002825a:	e8 98 55 ff ff       	call   c001d7f7 <schedule()>
c002825f:	a1 c8 0a 03 c0       	mov    eax,ds:0xc0030ac8
c0028264:	48                   	dec    eax
c0028265:	a3 c8 0a 03 c0       	mov    ds:0xc0030ac8,eax
c002826a:	75 01                	jne    c002826d <idleCommon()+0x1d>
c002826c:	fb                   	sti    
c002826d:	83 c4 0c             	add    esp,0xc
c0028270:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028272 <LinkedList<UnixFile>::~LinkedList()>:
c0028272:	90                   	nop
c0028273:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028274 <LinkedList<UnixFile>::LinkedList()>:
c0028274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002827e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028282:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028289:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002828d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028298:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002829e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282b4:	90                   	nop
c00282b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00282b6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00282b6:	83 ec 0c             	sub    esp,0xc
c00282b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00282be:	75 10                	jne    c00282d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00282c0:	83 ec 0c             	sub    esp,0xc
c00282c3:	68 58 9f 02 c0       	push   0xc0029f58
c00282c8:	e8 9e 19 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00282cd:	83 c4 10             	add    esp,0x10
c00282d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00282d6:	85 c0                	test   eax,eax
c00282d8:	74 34                	je     c002830e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282e1:	85 c0                	test   eax,eax
c00282e3:	74 29                	je     c002830e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00282ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00282fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00282fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028305:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002830c:	eb 65                	jmp    c0028373 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002830e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028312:	8b 00                	mov    eax,DWORD PTR [eax]
c0028314:	85 c0                	test   eax,eax
c0028316:	75 4b                	jne    c0028363 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002831c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002831f:	85 c0                	test   eax,eax
c0028321:	75 40                	jne    c0028363 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028327:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002832b:	89 10                	mov    DWORD PTR [eax],edx
c002832d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028331:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028335:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002833f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002834a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002834d:	85 c0                	test   eax,eax
c002834f:	74 22                	je     c0028373 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028351:	83 ec 0c             	sub    esp,0xc
c0028354:	68 7a 9f 02 c0       	push   0xc0029f7a
c0028359:	e8 0d 19 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002835e:	83 c4 10             	add    esp,0x10
c0028361:	eb 10                	jmp    c0028373 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028363:	83 ec 0c             	sub    esp,0xc
c0028366:	68 84 9f 02 c0       	push   0xc0029f84
c002836b:	e8 fb 18 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028370:	83 c4 10             	add    esp,0x10
c0028373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028377:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002837a:	8d 50 01             	lea    edx,[eax+0x1]
c002837d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028381:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028384:	90                   	nop
c0028385:	83 c4 0c             	add    esp,0xc
c0028388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002838a <LinkedList<UnixFile>::getFirstElement()>:
c002838a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002838e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028390:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028392 <LinkedList<UnixFile>::removeFirst()>:
c0028392:	83 ec 0c             	sub    esp,0xc
c0028395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028399:	8b 00                	mov    eax,DWORD PTR [eax]
c002839b:	85 c0                	test   eax,eax
c002839d:	75 12                	jne    c00283b1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002839f:	83 ec 0c             	sub    esp,0xc
c00283a2:	68 90 9f 02 c0       	push   0xc0029f90
c00283a7:	e8 bf 18 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00283ac:	83 c4 10             	add    esp,0x10
c00283af:	eb 7e                	jmp    c002842f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00283b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283bb:	85 c0                	test   eax,eax
c00283bd:	74 10                	je     c00283cf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00283bf:	83 ec 0c             	sub    esp,0xc
c00283c2:	68 db 9f 02 c0       	push   0xc0029fdb
c00283c7:	e8 9f 18 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00283cc:	83 c4 10             	add    esp,0x10
c00283cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283d8:	85 c0                	test   eax,eax
c00283da:	75 33                	jne    c002840f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00283dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283f8:	83 f8 01             	cmp    eax,0x1
c00283fb:	74 21                	je     c002841e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00283fd:	83 ec 0c             	sub    esp,0xc
c0028400:	68 b4 9f 02 c0       	push   0xc0029fb4
c0028405:	e8 61 18 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002840a:	83 c4 10             	add    esp,0x10
c002840d:	eb 0f                	jmp    c002841e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002840f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028413:	8b 00                	mov    eax,DWORD PTR [eax]
c0028415:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841c:	89 10                	mov    DWORD PTR [eax],edx
c002841e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028422:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028425:	8d 50 ff             	lea    edx,[eax-0x1]
c0028428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002842f:	83 c4 0c             	add    esp,0xc
c0028432:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028434 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028438:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002843b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002843c <DriverlessDevice::~DriverlessDevice()>:
c002843c:	ba dc a6 02 c0       	mov    edx,0xc002a6dc
c0028441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028445:	89 10                	mov    DWORD PTR [eax],edx
c0028447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002844b:	50                   	push   eax
c002844c:	e8 c1 b3 fe ff       	call   c0013812 <Device::~Device()>
c0028451:	83 c4 04             	add    esp,0x4
c0028454:	90                   	nop
c0028455:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028456 <DriverlessDevice::~DriverlessDevice()>:
c0028456:	83 ec 0c             	sub    esp,0xc
c0028459:	83 ec 0c             	sub    esp,0xc
c002845c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028460:	e8 d7 ff ff ff       	call   c002843c <DriverlessDevice::~DriverlessDevice()>
c0028465:	83 c4 10             	add    esp,0x10
c0028468:	83 ec 08             	sub    esp,0x8
c002846b:	68 58 01 00 00       	push   0x158
c0028470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028474:	e8 ba 9f fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028479:	83 c4 10             	add    esp,0x10
c002847c:	83 c4 0c             	add    esp,0xc
c002847f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028480 <LinkedList<Device>::addElement(Device*)>:
c0028480:	83 ec 0c             	sub    esp,0xc
c0028483:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028488:	75 10                	jne    c002849a <LinkedList<Device>::addElement(Device*)+0x1a>
c002848a:	83 ec 0c             	sub    esp,0xc
c002848d:	68 58 9f 02 c0       	push   0xc0029f58
c0028492:	e8 d4 17 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028497:	83 c4 10             	add    esp,0x10
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	8b 00                	mov    eax,DWORD PTR [eax]
c00284a0:	85 c0                	test   eax,eax
c00284a2:	74 3a                	je     c00284de <LinkedList<Device>::addElement(Device*)+0x5e>
c00284a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ab:	85 c0                	test   eax,eax
c00284ad:	74 2f                	je     c00284de <LinkedList<Device>::addElement(Device*)+0x5e>
c00284af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284ba:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00284c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284dc:	eb 68                	jmp    c0028546 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284e4:	85 c0                	test   eax,eax
c00284e6:	75 4e                	jne    c0028536 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ef:	85 c0                	test   eax,eax
c00284f1:	75 43                	jne    c0028536 <LinkedList<Device>::addElement(Device*)+0xb6>
c00284f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284fb:	89 10                	mov    DWORD PTR [eax],edx
c00284fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028501:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028520:	85 c0                	test   eax,eax
c0028522:	74 22                	je     c0028546 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028524:	83 ec 0c             	sub    esp,0xc
c0028527:	68 7a 9f 02 c0       	push   0xc0029f7a
c002852c:	e8 3a 17 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028531:	83 c4 10             	add    esp,0x10
c0028534:	eb 10                	jmp    c0028546 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028536:	83 ec 0c             	sub    esp,0xc
c0028539:	68 84 9f 02 c0       	push   0xc0029f84
c002853e:	e8 28 17 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028543:	83 c4 10             	add    esp,0x10
c0028546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002854a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002854d:	8d 50 01             	lea    edx,[eax+0x1]
c0028550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028554:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028557:	90                   	nop
c0028558:	83 c4 0c             	add    esp,0xc
c002855b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002855c <LinkedList<Device>::LinkedList()>:
c002855c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028560:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002856a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028575:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028580:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002858a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028595:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859c:	90                   	nop
c002859d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002859e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002859e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a4:	85 c0                	test   eax,eax
c00285a6:	75 0e                	jne    c00285b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00285a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285af:	85 c0                	test   eax,eax
c00285b1:	75 03                	jne    c00285b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00285b3:	b0 01                	mov    al,0x1
c00285b5:	c3                   	ret    
c00285b6:	b0 00                	mov    al,0x0
c00285b8:	90                   	nop
c00285b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00285ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00285ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285be:	8b 00                	mov    eax,DWORD PTR [eax]
c00285c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00285c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00285c2:	83 ec 0c             	sub    esp,0xc
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00285cb:	85 c0                	test   eax,eax
c00285cd:	75 15                	jne    c00285e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00285cf:	83 ec 0c             	sub    esp,0xc
c00285d2:	68 90 9f 02 c0       	push   0xc0029f90
c00285d7:	e8 8f 16 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00285dc:	83 c4 10             	add    esp,0x10
c00285df:	e9 88 00 00 00       	jmp    c002866c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00285e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285ee:	85 c0                	test   eax,eax
c00285f0:	0f 95 c0             	setne  al
c00285f3:	84 c0                	test   al,al
c00285f5:	74 10                	je     c0028607 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00285f7:	83 ec 0c             	sub    esp,0xc
c00285fa:	68 db 9f 02 c0       	push   0xc0029fdb
c00285ff:	e8 67 16 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028604:	83 c4 10             	add    esp,0x10
c0028607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860b:	8b 00                	mov    eax,DWORD PTR [eax]
c002860d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028610:	85 c0                	test   eax,eax
c0028612:	0f 94 c0             	sete   al
c0028615:	84 c0                	test   al,al
c0028617:	74 33                	je     c002864c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028627:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002862e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028632:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028635:	83 f8 01             	cmp    eax,0x1
c0028638:	74 21                	je     c002865b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002863a:	83 ec 0c             	sub    esp,0xc
c002863d:	68 b4 9f 02 c0       	push   0xc0029fb4
c0028642:	e8 24 16 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028647:	83 c4 10             	add    esp,0x10
c002864a:	eb 0f                	jmp    c002865b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002864c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028650:	8b 00                	mov    eax,DWORD PTR [eax]
c0028652:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028659:	89 10                	mov    DWORD PTR [eax],edx
c002865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028662:	8d 50 ff             	lea    edx,[eax-0x1]
c0028665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002866c:	83 c4 0c             	add    esp,0xc
c002866f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028670 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028670:	83 ec 0c             	sub    esp,0xc
c0028673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028678:	75 10                	jne    c002868a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002867a:	83 ec 0c             	sub    esp,0xc
c002867d:	68 58 9f 02 c0       	push   0xc0029f58
c0028682:	e8 e4 15 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028687:	83 c4 10             	add    esp,0x10
c002868a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028690:	85 c0                	test   eax,eax
c0028692:	74 34                	je     c00286c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028698:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002869b:	85 c0                	test   eax,eax
c002869d:	74 29                	je     c00286c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286c6:	eb 65                	jmp    c002872d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ce:	85 c0                	test   eax,eax
c00286d0:	75 4b                	jne    c002871d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286d9:	85 c0                	test   eax,eax
c00286db:	75 40                	jne    c002871d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286e5:	89 10                	mov    DWORD PTR [eax],edx
c00286e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028707:	85 c0                	test   eax,eax
c0028709:	74 22                	je     c002872d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002870b:	83 ec 0c             	sub    esp,0xc
c002870e:	68 7a 9f 02 c0       	push   0xc0029f7a
c0028713:	e8 53 15 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028718:	83 c4 10             	add    esp,0x10
c002871b:	eb 10                	jmp    c002872d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002871d:	83 ec 0c             	sub    esp,0xc
c0028720:	68 84 9f 02 c0       	push   0xc0029f84
c0028725:	e8 41 15 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c002872a:	83 c4 10             	add    esp,0x10
c002872d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028731:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028734:	8d 50 01             	lea    edx,[eax+0x1]
c0028737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002873e:	90                   	nop
c002873f:	83 c4 0c             	add    esp,0xc
c0028742:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028744 <ACPI::~ACPI()>:
c0028744:	83 ec 0c             	sub    esp,0xc
c0028747:	ba 40 af 02 c0       	mov    edx,0xc002af40
c002874c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028750:	89 10                	mov    DWORD PTR [eax],edx
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	83 ec 0c             	sub    esp,0xc
c0028759:	50                   	push   eax
c002875a:	e8 b3 b0 fe ff       	call   c0013812 <Device::~Device()>
c002875f:	83 c4 10             	add    esp,0x10
c0028762:	90                   	nop
c0028763:	83 c4 0c             	add    esp,0xc
c0028766:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028768 <ACPI::~ACPI()>:
c0028768:	83 ec 0c             	sub    esp,0xc
c002876b:	83 ec 0c             	sub    esp,0xc
c002876e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028772:	e8 cd ff ff ff       	call   c0028744 <ACPI::~ACPI()>
c0028777:	83 c4 10             	add    esp,0x10
c002877a:	83 ec 08             	sub    esp,0x8
c002877d:	68 64 12 00 00       	push   0x1264
c0028782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028786:	e8 a8 9c fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c002878b:	83 c4 10             	add    esp,0x10
c002878e:	83 c4 0c             	add    esp,0xc
c0028791:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028792 <LinkedList<Device>::~LinkedList()>:
c0028792:	90                   	nop
c0028793:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028794 <LinkedList<Device>::isEmpty()>:
c0028794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028798:	8b 00                	mov    eax,DWORD PTR [eax]
c002879a:	85 c0                	test   eax,eax
c002879c:	75 0e                	jne    c00287ac <LinkedList<Device>::isEmpty()+0x18>
c002879e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a5:	85 c0                	test   eax,eax
c00287a7:	75 03                	jne    c00287ac <LinkedList<Device>::isEmpty()+0x18>
c00287a9:	b0 01                	mov    al,0x1
c00287ab:	c3                   	ret    
c00287ac:	b0 00                	mov    al,0x0
c00287ae:	90                   	nop
c00287af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00287b0 <LinkedList<Device>::getFirstElement()>:
c00287b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00287b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00287b8 <LinkedList<Device>::removeFirst()>:
c00287b8:	83 ec 0c             	sub    esp,0xc
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c1:	85 c0                	test   eax,eax
c00287c3:	75 15                	jne    c00287da <LinkedList<Device>::removeFirst()+0x22>
c00287c5:	83 ec 0c             	sub    esp,0xc
c00287c8:	68 90 9f 02 c0       	push   0xc0029f90
c00287cd:	e8 99 14 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00287d2:	83 c4 10             	add    esp,0x10
c00287d5:	e9 87 00 00 00       	jmp    c0028861 <LinkedList<Device>::removeFirst()+0xa9>
c00287da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00287e7:	85 c0                	test   eax,eax
c00287e9:	74 10                	je     c00287fb <LinkedList<Device>::removeFirst()+0x43>
c00287eb:	83 ec 0c             	sub    esp,0xc
c00287ee:	68 db 9f 02 c0       	push   0xc0029fdb
c00287f3:	e8 73 14 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c00287f8:	83 c4 10             	add    esp,0x10
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0028801:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028807:	85 c0                	test   eax,eax
c0028809:	75 33                	jne    c002883e <LinkedList<Device>::removeFirst()+0x86>
c002880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028819:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028824:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028827:	83 f8 01             	cmp    eax,0x1
c002882a:	74 24                	je     c0028850 <LinkedList<Device>::removeFirst()+0x98>
c002882c:	83 ec 0c             	sub    esp,0xc
c002882f:	68 b4 9f 02 c0       	push   0xc0029fb4
c0028834:	e8 32 14 ff ff       	call   c0019c6b <Krnl::panic(char const*)>
c0028839:	83 c4 10             	add    esp,0x10
c002883c:	eb 12                	jmp    c0028850 <LinkedList<Device>::removeFirst()+0x98>
c002883e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028842:	8b 00                	mov    eax,DWORD PTR [eax]
c0028844:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	89 10                	mov    DWORD PTR [eax],edx
c0028850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028857:	8d 50 ff             	lea    edx,[eax-0x1]
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028861:	83 c4 0c             	add    esp,0xc
c0028864:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028866 <CPU::~CPU()>:
c0028866:	83 ec 0c             	sub    esp,0xc
c0028869:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c002886e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028872:	89 10                	mov    DWORD PTR [eax],edx
c0028874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028878:	83 ec 0c             	sub    esp,0xc
c002887b:	50                   	push   eax
c002887c:	e8 91 af fe ff       	call   c0013812 <Device::~Device()>
c0028881:	83 c4 10             	add    esp,0x10
c0028884:	90                   	nop
c0028885:	83 c4 0c             	add    esp,0xc
c0028888:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002888a <CPU::~CPU()>:
c002888a:	83 ec 0c             	sub    esp,0xc
c002888d:	83 ec 0c             	sub    esp,0xc
c0028890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028894:	e8 cd ff ff ff       	call   c0028866 <CPU::~CPU()>
c0028899:	83 c4 10             	add    esp,0x10
c002889c:	83 ec 08             	sub    esp,0x8
c002889f:	68 98 11 00 00       	push   0x1198
c00288a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288a8:	e8 86 9b fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00288ad:	83 c4 10             	add    esp,0x10
c00288b0:	83 c4 0c             	add    esp,0xc
c00288b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288b4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288b4:	90                   	nop
c00288b5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288b6 <ThreadControlBlock::ThreadControlBlock()>:
c00288b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00288cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00288d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288db:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00288e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00288ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00288f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00288fd:	90                   	nop
c00288fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028900 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028904:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002890a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002890e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028919:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028924:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002892a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028939:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028940:	90                   	nop
c0028941:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028942 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028946:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028949:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002894a <Vm::_FPUState::_FPUState()>:
c002894a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002894e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028955:	90                   	nop
c0028956:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028958 <PCI::~PCI()>:
c0028958:	83 ec 0c             	sub    esp,0xc
c002895b:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	89 10                	mov    DWORD PTR [eax],edx
c0028966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896a:	83 ec 0c             	sub    esp,0xc
c002896d:	50                   	push   eax
c002896e:	e8 6f a8 fe ff       	call   c00131e2 <Bus::~Bus()>
c0028973:	83 c4 10             	add    esp,0x10
c0028976:	90                   	nop
c0028977:	83 c4 0c             	add    esp,0xc
c002897a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002897c <PCI::~PCI()>:
c002897c:	83 ec 0c             	sub    esp,0xc
c002897f:	83 ec 0c             	sub    esp,0xc
c0028982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028986:	e8 cd ff ff ff       	call   c0028958 <PCI::~PCI()>
c002898b:	83 c4 10             	add    esp,0x10
c002898e:	83 ec 08             	sub    esp,0x8
c0028991:	68 5c 01 00 00       	push   0x15c
c0028996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899a:	e8 94 9a fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c002899f:	83 c4 10             	add    esp,0x10
c00289a2:	83 c4 0c             	add    esp,0xc
c00289a5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00289a6 <IDE::~IDE()>:
c00289a6:	83 ec 0c             	sub    esp,0xc
c00289a9:	ba 70 bd 02 c0       	mov    edx,0xc002bd70
c00289ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b2:	89 10                	mov    DWORD PTR [eax],edx
c00289b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b8:	83 ec 0c             	sub    esp,0xc
c00289bb:	50                   	push   eax
c00289bc:	e8 67 b3 fe ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c00289c1:	83 c4 10             	add    esp,0x10
c00289c4:	90                   	nop
c00289c5:	83 c4 0c             	add    esp,0xc
c00289c8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00289ca <IDE::~IDE()>:
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	83 ec 0c             	sub    esp,0xc
c00289d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d4:	e8 cd ff ff ff       	call   c00289a6 <IDE::~IDE()>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	83 ec 08             	sub    esp,0x8
c00289df:	68 70 02 00 00       	push   0x270
c00289e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e8:	e8 46 9a fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c00289ed:	83 c4 10             	add    esp,0x10
c00289f0:	83 c4 0c             	add    esp,0xc
c00289f3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00289f4 <SATABus::~SATABus()>:
c00289f4:	83 ec 0c             	sub    esp,0xc
c00289f7:	ba e8 bd 02 c0       	mov    edx,0xc002bde8
c00289fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a00:	89 10                	mov    DWORD PTR [eax],edx
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	50                   	push   eax
c0028a0a:	e8 19 b3 fe ff       	call   c0013d28 <HardDiskController::~HardDiskController()>
c0028a0f:	83 c4 10             	add    esp,0x10
c0028a12:	90                   	nop
c0028a13:	83 c4 0c             	add    esp,0xc
c0028a16:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a18 <SATABus::~SATABus()>:
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	83 ec 0c             	sub    esp,0xc
c0028a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a22:	e8 cd ff ff ff       	call   c00289f4 <SATABus::~SATABus()>
c0028a27:	83 c4 10             	add    esp,0x10
c0028a2a:	83 ec 08             	sub    esp,0x8
c0028a2d:	68 64 01 00 00       	push   0x164
c0028a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a36:	e8 f8 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028a3b:	83 c4 10             	add    esp,0x10
c0028a3e:	83 c4 0c             	add    esp,0xc
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a42 <ATA::~ATA()>:
c0028a42:	83 ec 0c             	sub    esp,0xc
c0028a45:	ba 34 be 02 c0       	mov    edx,0xc002be34
c0028a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4e:	89 10                	mov    DWORD PTR [eax],edx
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	83 ec 0c             	sub    esp,0xc
c0028a57:	50                   	push   eax
c0028a58:	e8 ad b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	90                   	nop
c0028a61:	83 c4 0c             	add    esp,0xc
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a66 <ATA::~ATA()>:
c0028a66:	83 ec 0c             	sub    esp,0xc
c0028a69:	83 ec 0c             	sub    esp,0xc
c0028a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a70:	e8 cd ff ff ff       	call   c0028a42 <ATA::~ATA()>
c0028a75:	83 c4 10             	add    esp,0x10
c0028a78:	83 ec 08             	sub    esp,0x8
c0028a7b:	68 7c 01 00 00       	push   0x17c
c0028a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a84:	e8 aa 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028a89:	83 c4 10             	add    esp,0x10
c0028a8c:	83 c4 0c             	add    esp,0xc
c0028a8f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028a90 <ATAPI::~ATAPI()>:
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	ba 6c be 02 c0       	mov    edx,0xc002be6c
c0028a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9c:	89 10                	mov    DWORD PTR [eax],edx
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	83 ec 0c             	sub    esp,0xc
c0028aa5:	50                   	push   eax
c0028aa6:	e8 5f b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028aab:	83 c4 10             	add    esp,0x10
c0028aae:	90                   	nop
c0028aaf:	83 c4 0c             	add    esp,0xc
c0028ab2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028ab4 <ATAPI::~ATAPI()>:
c0028ab4:	83 ec 0c             	sub    esp,0xc
c0028ab7:	83 ec 0c             	sub    esp,0xc
c0028aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028abe:	e8 cd ff ff ff       	call   c0028a90 <ATAPI::~ATAPI()>
c0028ac3:	83 c4 10             	add    esp,0x10
c0028ac6:	83 ec 08             	sub    esp,0x8
c0028ac9:	68 80 01 00 00       	push   0x180
c0028ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad2:	e8 5c 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028ad7:	83 c4 10             	add    esp,0x10
c0028ada:	83 c4 0c             	add    esp,0xc
c0028add:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ade <SATA::~SATA()>:
c0028ade:	83 ec 0c             	sub    esp,0xc
c0028ae1:	ba 20 bf 02 c0       	mov    edx,0xc002bf20
c0028ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aea:	89 10                	mov    DWORD PTR [eax],edx
c0028aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af0:	83 ec 0c             	sub    esp,0xc
c0028af3:	50                   	push   eax
c0028af4:	e8 11 b3 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028af9:	83 c4 10             	add    esp,0x10
c0028afc:	90                   	nop
c0028afd:	83 c4 0c             	add    esp,0xc
c0028b00:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028b02 <SATA::~SATA()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	83 ec 0c             	sub    esp,0xc
c0028b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b0c:	e8 cd ff ff ff       	call   c0028ade <SATA::~SATA()>
c0028b11:	83 c4 10             	add    esp,0x10
c0028b14:	83 ec 08             	sub    esp,0x8
c0028b17:	68 7c 01 00 00       	push   0x17c
c0028b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b20:	e8 0e 99 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028b25:	83 c4 10             	add    esp,0x10
c0028b28:	83 c4 0c             	add    esp,0xc
c0028b2b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b2c <SATAPI::~SATAPI()>:
c0028b2c:	83 ec 0c             	sub    esp,0xc
c0028b2f:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c0028b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b38:	89 10                	mov    DWORD PTR [eax],edx
c0028b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b3e:	83 ec 0c             	sub    esp,0xc
c0028b41:	50                   	push   eax
c0028b42:	e8 c3 b2 fe ff       	call   c0013e0a <PhysicalDisk::~PhysicalDisk()>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	90                   	nop
c0028b4b:	83 c4 0c             	add    esp,0xc
c0028b4e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b50 <SATAPI::~SATAPI()>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	83 ec 0c             	sub    esp,0xc
c0028b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b5a:	e8 cd ff ff ff       	call   c0028b2c <SATAPI::~SATAPI()>
c0028b5f:	83 c4 10             	add    esp,0x10
c0028b62:	83 ec 08             	sub    esp,0x8
c0028b65:	68 80 01 00 00       	push   0x180
c0028b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b6e:	e8 c0 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028b73:	83 c4 10             	add    esp,0x10
c0028b76:	83 c4 0c             	add    esp,0xc
c0028b79:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028b7a <AVX::~AVX()>:
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c0028b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b86:	89 10                	mov    DWORD PTR [eax],edx
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	83 ec 0c             	sub    esp,0xc
c0028b8f:	50                   	push   eax
c0028b90:	e8 f9 b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028b95:	83 c4 10             	add    esp,0x10
c0028b98:	90                   	nop
c0028b99:	83 c4 0c             	add    esp,0xc
c0028b9c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028b9e <AVX::~AVX()>:
c0028b9e:	83 ec 0c             	sub    esp,0xc
c0028ba1:	83 ec 0c             	sub    esp,0xc
c0028ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba8:	e8 cd ff ff ff       	call   c0028b7a <AVX::~AVX()>
c0028bad:	83 c4 10             	add    esp,0x10
c0028bb0:	83 ec 08             	sub    esp,0x8
c0028bb3:	68 58 01 00 00       	push   0x158
c0028bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bbc:	e8 72 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028bc1:	83 c4 10             	add    esp,0x10
c0028bc4:	83 c4 0c             	add    esp,0xc
c0028bc7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028bc8 <MMX::~MMX()>:
c0028bc8:	83 ec 0c             	sub    esp,0xc
c0028bcb:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0028bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd4:	89 10                	mov    DWORD PTR [eax],edx
c0028bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bda:	83 ec 0c             	sub    esp,0xc
c0028bdd:	50                   	push   eax
c0028bde:	e8 ab b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028be3:	83 c4 10             	add    esp,0x10
c0028be6:	90                   	nop
c0028be7:	83 c4 0c             	add    esp,0xc
c0028bea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028bec <MMX::~MMX()>:
c0028bec:	83 ec 0c             	sub    esp,0xc
c0028bef:	83 ec 0c             	sub    esp,0xc
c0028bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf6:	e8 cd ff ff ff       	call   c0028bc8 <MMX::~MMX()>
c0028bfb:	83 c4 10             	add    esp,0x10
c0028bfe:	83 ec 08             	sub    esp,0x8
c0028c01:	68 58 01 00 00       	push   0x158
c0028c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c0a:	e8 24 98 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028c0f:	83 c4 10             	add    esp,0x10
c0028c12:	83 c4 0c             	add    esp,0xc
c0028c15:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c16 <SSE::~SSE()>:
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0028c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c22:	89 10                	mov    DWORD PTR [eax],edx
c0028c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c28:	83 ec 0c             	sub    esp,0xc
c0028c2b:	50                   	push   eax
c0028c2c:	e8 5d b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028c31:	83 c4 10             	add    esp,0x10
c0028c34:	90                   	nop
c0028c35:	83 c4 0c             	add    esp,0xc
c0028c38:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c3a <SSE::~SSE()>:
c0028c3a:	83 ec 0c             	sub    esp,0xc
c0028c3d:	83 ec 0c             	sub    esp,0xc
c0028c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c44:	e8 cd ff ff ff       	call   c0028c16 <SSE::~SSE()>
c0028c49:	83 c4 10             	add    esp,0x10
c0028c4c:	83 ec 08             	sub    esp,0x8
c0028c4f:	68 58 01 00 00       	push   0x158
c0028c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c58:	e8 d6 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028c5d:	83 c4 10             	add    esp,0x10
c0028c60:	83 c4 0c             	add    esp,0xc
c0028c63:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c64 <x87::~x87()>:
c0028c64:	83 ec 0c             	sub    esp,0xc
c0028c67:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0028c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c70:	89 10                	mov    DWORD PTR [eax],edx
c0028c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c76:	83 ec 0c             	sub    esp,0xc
c0028c79:	50                   	push   eax
c0028c7a:	e8 0f b2 fe ff       	call   c0013e8e <FPU::~FPU()>
c0028c7f:	83 c4 10             	add    esp,0x10
c0028c82:	90                   	nop
c0028c83:	83 c4 0c             	add    esp,0xc
c0028c86:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028c88 <x87::~x87()>:
c0028c88:	83 ec 0c             	sub    esp,0xc
c0028c8b:	83 ec 0c             	sub    esp,0xc
c0028c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c92:	e8 cd ff ff ff       	call   c0028c64 <x87::~x87()>
c0028c97:	83 c4 10             	add    esp,0x10
c0028c9a:	83 ec 08             	sub    esp,0x8
c0028c9d:	68 58 01 00 00       	push   0x158
c0028ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca6:	e8 88 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028cab:	83 c4 10             	add    esp,0x10
c0028cae:	83 c4 0c             	add    esp,0xc
c0028cb1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028cb2 <IOAPIC::~IOAPIC()>:
c0028cb2:	83 ec 0c             	sub    esp,0xc
c0028cb5:	ba 54 c2 02 c0       	mov    edx,0xc002c254
c0028cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cbe:	89 10                	mov    DWORD PTR [eax],edx
c0028cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc4:	83 ec 0c             	sub    esp,0xc
c0028cc7:	50                   	push   eax
c0028cc8:	e8 45 ab fe ff       	call   c0013812 <Device::~Device()>
c0028ccd:	83 c4 10             	add    esp,0x10
c0028cd0:	90                   	nop
c0028cd1:	83 c4 0c             	add    esp,0xc
c0028cd4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028cd6 <IOAPIC::~IOAPIC()>:
c0028cd6:	83 ec 0c             	sub    esp,0xc
c0028cd9:	83 ec 0c             	sub    esp,0xc
c0028cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce0:	e8 cd ff ff ff       	call   c0028cb2 <IOAPIC::~IOAPIC()>
c0028ce5:	83 c4 10             	add    esp,0x10
c0028ce8:	83 ec 08             	sub    esp,0x8
c0028ceb:	68 68 01 00 00       	push   0x168
c0028cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf4:	e8 3a 97 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028cf9:	83 c4 10             	add    esp,0x10
c0028cfc:	83 c4 0c             	add    esp,0xc
c0028cff:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028d00 <APIC::~APIC()>:
c0028d00:	83 ec 0c             	sub    esp,0xc
c0028d03:	ba 0c c2 02 c0       	mov    edx,0xc002c20c
c0028d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0c:	89 10                	mov    DWORD PTR [eax],edx
c0028d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d12:	83 ec 0c             	sub    esp,0xc
c0028d15:	50                   	push   eax
c0028d16:	e8 3d b6 fe ff       	call   c0014358 <InterruptController::~InterruptController()>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	90                   	nop
c0028d1f:	83 c4 0c             	add    esp,0xc
c0028d22:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d24 <APIC::~APIC()>:
c0028d24:	83 ec 0c             	sub    esp,0xc
c0028d27:	83 ec 0c             	sub    esp,0xc
c0028d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2e:	e8 cd ff ff ff       	call   c0028d00 <APIC::~APIC()>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	83 ec 08             	sub    esp,0x8
c0028d39:	68 58 21 00 00       	push   0x2158
c0028d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d42:	e8 ec 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028d47:	83 c4 10             	add    esp,0x10
c0028d4a:	83 c4 0c             	add    esp,0xc
c0028d4d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d4e <PIC::~PIC()>:
c0028d4e:	83 ec 0c             	sub    esp,0xc
c0028d51:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0028d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5a:	89 10                	mov    DWORD PTR [eax],edx
c0028d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	50                   	push   eax
c0028d64:	e8 ef b5 fe ff       	call   c0014358 <InterruptController::~InterruptController()>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	90                   	nop
c0028d6d:	83 c4 0c             	add    esp,0xc
c0028d70:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028d72 <PIC::~PIC()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	83 ec 0c             	sub    esp,0xc
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 cd ff ff ff       	call   c0028d4e <PIC::~PIC()>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 ec 08             	sub    esp,0x8
c0028d87:	68 58 21 00 00       	push   0x2158
c0028d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d90:	e8 9e 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	83 c4 0c             	add    esp,0xc
c0028d9b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028d9c <APICTimer::~APICTimer()>:
c0028d9c:	83 ec 0c             	sub    esp,0xc
c0028d9f:	ba f8 c2 02 c0       	mov    edx,0xc002c2f8
c0028da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da8:	89 10                	mov    DWORD PTR [eax],edx
c0028daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	50                   	push   eax
c0028db2:	e8 ed d5 fe ff       	call   c00163a4 <Timer::~Timer()>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	90                   	nop
c0028dbb:	83 c4 0c             	add    esp,0xc
c0028dbe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028dc0 <APICTimer::~APICTimer()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	83 ec 0c             	sub    esp,0xc
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 cd ff ff ff       	call   c0028d9c <APICTimer::~APICTimer()>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 ec 08             	sub    esp,0x8
c0028dd5:	68 60 01 00 00       	push   0x160
c0028dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dde:	e8 50 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	83 c4 0c             	add    esp,0xc
c0028de9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028dea <PIT::~PIT()>:
c0028dea:	83 ec 0c             	sub    esp,0xc
c0028ded:	ba 48 c3 02 c0       	mov    edx,0xc002c348
c0028df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df6:	89 10                	mov    DWORD PTR [eax],edx
c0028df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	50                   	push   eax
c0028e00:	e8 9f d5 fe ff       	call   c00163a4 <Timer::~Timer()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	90                   	nop
c0028e09:	83 c4 0c             	add    esp,0xc
c0028e0c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e0e <PIT::~PIT()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	83 ec 0c             	sub    esp,0xc
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 cd ff ff ff       	call   c0028dea <PIT::~PIT()>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 ec 08             	sub    esp,0x8
c0028e23:	68 5c 01 00 00       	push   0x15c
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 02 96 fe ff       	call   c0012433 <operator delete(void*, unsigned long)>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 c4 0c             	add    esp,0xc
c0028e37:	c3                   	ret    
