
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 84 02 00       	call   c0028448 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 9c 90 02 c0       	mov    ebx,0xc002909c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a8 90 02 c0    	cmp    ebx,0xc00290a8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 cf 02 c0       	mov    eax,0xc002cff8
c0000049:	3d f8 cf 02 c0       	cmp    eax,0xc002cff8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 cf 02 c0       	push   0xc002cff8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 cf 02 c0       	mov    eax,0xc002cff8
c0000075:	2d f8 cf 02 c0       	sub    eax,0xc002cff8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 cf 02 c0       	push   0xc002cff8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d628,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b0 90 02 c0       	mov    ebx,0xc00290b0
c00000bb:	81 eb ac 90 02 c0    	sub    ebx,0xc00290ac
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be ac 90 02 c0       	mov    esi,0xc00290ac
c00000ca:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c d6 02 c0       	mov    ds:0xc002d62c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c d6 02 c0       	mov    eax,ds:0xc002d62c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 cf 02 c0       	push   0xc002cff8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d628,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 d6 02 c0       	push   0xc002d630
c000012c:	68 f8 cf 02 c0       	push   0xc002cff8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 83 cf 01 00       	call   c001d326 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 1a 21 01 00       	call   c00124d5 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 61 cf 01 00       	call   c001d326 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 09 d4 01 00       	call   c001d7ed <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 1f da 01 00       	call   c001de0c <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 da 02 c0 	lgdtd  ds:0xc002da70
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 83 3e 01 00       	call   c0014465 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 d6 02 c0       	mov    ds:0xc002d648,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 d6 02 c0    	mov    DWORD PTR ds:0xc002d648,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d648
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 c0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f40],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 c0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f40],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 c0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f40],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 c0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f40],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 c0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f40],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d660
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 d6 02 c0    	mov    DWORD PTR ds:0xc002d660,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 d6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd299c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd299c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 d6 02 c0    	mov    DWORD PTR ds:0xc002d660,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c d6 02 c0    	cmp    DWORD PTR ds:0xc002d68c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d69c
c0000e38:	c7 42 0c 94 d6 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d694
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c d6 02 c0    	mov    DWORD PTR ds:0xc002d69c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c d6 02 c0    	mov    DWORD PTR ds:0xc002d68c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 d6 02 c0 02 	test   BYTE PTR ds:0xc002d660,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d660
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd299c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd299c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 d6 02 c0 	lea    edx,[eax*8-0x3ffd296c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a0
c00011ba:	81 fb 94 d6 02 c0    	cmp    ebx,0xc002d694
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 d6 02 c0       	cmp    eax,0xc002d694
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 d6 02 c0    	cmp    DWORD PTR ds:0xc002d690,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c d6 02 c0       	mov    ds:0xc002d69c,eax
c00011f6:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c00011fb:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d694
c0001209:	c7 40 0c 94 d6 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d694
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 d6 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d694
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 d6 02 c0 	lea    ebp,[edx*4-0x3ffd29a8]
c000125a:	8b 14 95 60 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd29a0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 d6 02 c0 	lea    ecx,[edx*4-0x3ffd29a0]
c0001275:	8b 14 95 60 d6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd29a0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 d9 02 c0 	or     DWORD PTR [edi*4-0x3ffd266c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 d6 02 c0 	lea    eax,[eax*8-0x3ffd296c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c d6 02 c0    	mov    DWORD PTR ds:0xc002d69c,ecx
c000132f:	89 0d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,ecx
c0001335:	c7 41 08 94 d6 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d694
c000133c:	c7 41 0c 94 d6 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d694
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c d6 02 c0 	lea    edx,[ecx*8-0x3ffd2974]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd266c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 d9 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd266c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c d6 02 c0 	lea    edx,[eax*4-0x3ffd2974]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 d9 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd266c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c d6 02 c0    	mov    DWORD PTR ds:0xc002d69c,edi
c0001402:	89 3d a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,edi
c0001408:	c7 47 08 94 d6 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d694
c000140f:	c7 47 0c 94 d6 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d694
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 d6 02 c0    	mov    DWORD PTR ds:0xc002d690,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c d6 02 c0    	mov    DWORD PTR ds:0xc002d68c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 d6 02 c0       	mov    edx,0xc002d660
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d660,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c d6 02 c0    	cmp    DWORD PTR ds:0xc002d68c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c d6 02 c0    	mov    DWORD PTR ds:0xc002d68c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d660,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc d9 02 c0    	push   DWORD PTR ds:0xc002d9bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d660,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc d9 02 c0       	mov    eax,ds:0xc002d9bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d68c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd299c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 d6 02 c0       	mov    eax,0xc002d694
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c d9 02 c0       	cmp    eax,0xc002d98c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 d9 02 c0       	mov    eax,ds:0xc002d9c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 c4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e3c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 d6 02 c0       	mov    eax,ds:0xc002d660
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 d6 02 c0       	mov    ds:0xc002d660,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac d9 02 c0    	mov    DWORD PTR ds:0xc002d9ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 4a ec 01 00       	jmp    c002083c <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 7b ec 01 00       	jmp    c0020883 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceee0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 a3 ec 01 00       	jmp    c00208ca <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 48 02 00       	call   c00267a4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 e0 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d20]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 e0 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d20]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba e0 91 02 c0       	mov    edx,0xc00291e0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 34 bf 02 c0       	mov    edx,0xc002bf34
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2600]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 d9 02 c0    	mov    ax,ds:0xc002d9e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 d9 02 c0    	mov    ds:0xc002d9e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 36 02 00       	call   c00267a4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 12 93 02 c0       	mov    eax,0xc0029312
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 60 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6da0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 1b 93 02 c0       	mov    eax,0xc002931b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 e0 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d20]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 20 02 00       	call   c00267a4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba e0 91 02 c0       	mov    edx,0xc00291e0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba f0 91 02 c0       	mov    edx,0xc00291f0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2600]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2600],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 0a 02 00       	call   c00267a4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 0a 02 00       	call   c00267a4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 37 92 02 c0       	mov    eax,0xc0029237
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 30 92 02 c0       	mov    eax,0xc0029230
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2600]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 20 92 02 c0       	mov    esi,0xc0029220
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 52 f1 01 00       	call   c00267a4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 00 93 02 c0       	mov    edx,0xc0029300
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 00 92 02 c0       	mov    edx,0xc0029200
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 22 93 02 c0       	mov    edx,0xc0029322
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 2e 93 02 c0       	mov    edx,0xc002932e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 42 93 02 c0       	mov    edx,0xc0029342
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 60 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029660
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 60 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029660
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 60 94 02 c0       	mov    eax,0xc0029460
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 a0 93 02 c0       	mov    eax,0xc00293a0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 60 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ca0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 a6 fa 01 00       	call   c0028277 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 69 fa 01 00       	call   c0028259 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 3d fa 01 00       	call   c0028277 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 f0 f0 01 00       	call   c002797c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 72 fb 01 00       	call   c0028410 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 b7 f9 01 00       	call   c0028277 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 f9 f8 01 00       	call   c0028277 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 c6 f8 01 00       	call   c0028259 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 b3 f7 01 00       	call   c0028277 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 7b f7 01 00       	call   c0028259 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 87 f5 01 00       	call   c0028277 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 4c f5 01 00       	call   c0028259 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 c0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6440]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 5c f2 01 00       	call   c002800b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 da eb 01 00       	call   c00279a8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 96 f4 01 00       	call   c002827b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 84 f5 01 00       	call   c002839f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 6e eb 01 00       	call   c00279a8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 19 f4 01 00       	call   c0028275 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 fa f3 01 00       	call   c0028279 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 90 f5 01 00       	call   c0028430 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 3a f1 01 00       	call   c002800b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 b8 ea 01 00       	call   c00279a8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 74 f3 01 00       	call   c002827b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 62 f4 01 00       	call   c002839f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 4c ea 01 00       	call   c00279a8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 f7 f2 01 00       	call   c0028275 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 d7 f2 01 00       	call   c0028279 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 6c f4 01 00       	call   c0028430 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 12 f2 01 00       	call   c0028277 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 d0 f1 01 00       	call   c0028259 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 b8 f1 01 00       	call   c0028277 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 2a ef 01 00       	call   c002800b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 2c e2 01 00       	call   c002732b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 8f e8 01 00       	call   c00279a8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 e1 ee 01 00       	call   c002800b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 e7 e1 01 00       	call   c002732b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 b6 ee 01 00       	call   c002800b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 06 f1 01 00       	call   c0028275 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 e3 e7 01 00       	call   c002797c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 65 f2 01 00       	call   c0028410 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 8c f0 01 00       	call   c0028259 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 87 e7 01 00       	call   c002797c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 05 ee 01 00       	call   c002800b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 88 e7 01 00       	call   c00279a8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 da ed 01 00       	call   c002800b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 41 ea 01 00       	call   c0027c8c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 c0 e0 01 00       	call   c002732b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 20 da 01 00       	call   c0026cc0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 f7 f0 01 00       	call   c002839f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 e0 e6 01 00       	call   c00279a8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 c7 f0 01 00       	call   c002839f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 39 e0 01 00       	call   c002732b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 72 ef 01 00       	call   c002827b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 5a e9 01 00       	call   c0027c8c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 e0 df 01 00       	call   c002732b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 ce f0 01 00       	call   c0028430 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 a0 ec 01 00       	call   c002800b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 f7 e5 01 00       	call   c002797c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 d6 ee 01 00       	call   c0028277 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 6f df 01 00       	call   c002732b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 9b e5 01 00       	call   c002797c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 3d f0 01 00       	call   c0028430 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ee eb 01 00       	call   c002800b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 6b e5 01 00       	call   c00279a8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 be eb 01 00       	call   c002800b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 c4 de 01 00       	call   c002732b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 94 eb 01 00       	call   c002800b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 e6 ed 01 00       	call   c0028277 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 bd e4 01 00       	call   c002797c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 3f ef 01 00       	call   c0028410 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 66 ed 01 00       	call   c0028259 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 60 e4 01 00       	call   c002797c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 de ea 01 00       	call   c002800b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 61 e4 01 00       	call   c00279a8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 b3 ea 01 00       	call   c002800b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 1a e7 01 00       	call   c0027c8c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 99 dd 01 00       	call   c002732b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 e9 d6 01 00       	call   c0026cc0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 c0 ed 01 00       	call   c002839f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 a9 e3 01 00       	call   c00279a8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 90 ed 01 00       	call   c002839f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 02 dd 01 00       	call   c002732b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 3b ec 01 00       	call   c002827b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 22 e6 01 00       	call   c0027c8c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 a1 dc 01 00       	call   c002732b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 8f ed 01 00       	call   c0028430 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 61 e9 01 00       	call   c002800b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 b8 e2 01 00       	call   c002797c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 97 eb 01 00       	call   c0028277 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 30 dc 01 00       	call   c002732b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 5c e2 01 00       	call   c002797c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 d1 e8 01 00       	call   c002800b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 d7 db 01 00       	call   c002732b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 20 9c 02 c0       	mov    eax,0xc0029c20
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 34 9c 02 c0       	mov    eax,0xc0029c34
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 4c e7 01 00       	call   c002800b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ca e0 01 00       	call   c00279a8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 5c d3 01 00       	call   c0026cc0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 33 ea 01 00       	call   c002839f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 1c e0 01 00       	call   c00279a8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ff e9 01 00       	call   c002839f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 71 d9 01 00       	call   c002732b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 d1 e9 01 00       	call   c002839f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 c0 df 01 00       	call   c00279a8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 29 d9 01 00       	call   c002732b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 4a d2 01 00       	call   c0026cc0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 21 e9 01 00       	call   c002839f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 0a df 01 00       	call   c00279a8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ed e8 01 00       	call   c002839f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 5f d8 01 00       	call   c002732b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 bf e8 01 00       	call   c002839f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ae de 01 00       	call   c00279a8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 17 d8 01 00       	call   c002732b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 f5 d7 01 00       	call   c002732b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 d1 d0 01 00       	call   c0026cc0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 a8 e7 01 00       	call   c002839f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 91 dd 01 00       	call   c00279a8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 74 e7 01 00       	call   c002839f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 e6 d6 01 00       	call   c002732b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 46 e7 01 00       	call   c002839f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 2f dd 01 00       	call   c00279a8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 98 d6 01 00       	call   c002732b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 f8 e6 01 00       	call   c002839f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 e1 dc 01 00       	call   c00279a8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 4a d6 01 00       	call   c002732b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 5f cf 01 00       	call   c0026cc0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 36 e6 01 00       	call   c002839f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 1f dc 01 00       	call   c00279a8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 06 e6 01 00       	call   c002839f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 78 d5 01 00       	call   c002732b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 d8 e5 01 00       	call   c002839f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 c1 db 01 00       	call   c00279a8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 2a d5 01 00       	call   c002732b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 8a e5 01 00       	call   c002839f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 73 db 01 00       	call   c00279a8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 dc d4 01 00       	call   c002732b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 b0 d4 01 00       	call   c002732b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 0d db 01 00       	call   c00279a8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 c9 e3 01 00       	call   c002827b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 58 d4 01 00       	call   c002732b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 b5 da 01 00       	call   c00279a8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 71 e3 01 00       	call   c002827b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 eb cc 01 00       	call   c0026cc0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c2 e3 01 00       	call   c002839f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 ab d9 01 00       	call   c00279a8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 8e e3 01 00       	call   c002839f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 00 d3 01 00       	call   c002732b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 60 e3 01 00       	call   c002839f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 49 d9 01 00       	call   c00279a8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 b2 d2 01 00       	call   c002732b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 12 e3 01 00       	call   c002839f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 fb d8 01 00       	call   c00279a8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 64 d2 01 00       	call   c002732b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 c4 e2 01 00       	call   c002839f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ad d8 01 00       	call   c00279a8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 16 d2 01 00       	call   c002732b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 76 e2 01 00       	call   c002839f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 5f d8 01 00       	call   c00279a8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 c8 d1 01 00       	call   c002732b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ca ca 01 00       	call   c0026cc0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 a1 e1 01 00       	call   c002839f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 8a d7 01 00       	call   c00279a8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 71 e1 01 00       	call   c002839f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 e3 d0 01 00       	call   c002732b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 43 e1 01 00       	call   c002839f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 2c d7 01 00       	call   c00279a8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 95 d0 01 00       	call   c002732b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 f5 e0 01 00       	call   c002839f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 de d6 01 00       	call   c00279a8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 47 d0 01 00       	call   c002732b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 a7 e0 01 00       	call   c002839f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 90 d6 01 00       	call   c00279a8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 f9 cf 01 00       	call   c002732b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 59 e0 01 00       	call   c002839f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 42 d6 01 00       	call   c00279a8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 ab cf 01 00       	call   c002732b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 7f cf 01 00       	call   c002732b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 dc d5 01 00       	call   c00279a8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 98 de 01 00       	call   c002827b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 27 cf 01 00       	call   c002732b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 84 d5 01 00       	call   c00279a8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 40 de 01 00       	call   c002827b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 ce ce 01 00       	call   c002732b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 2b d5 01 00       	call   c00279a8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 e7 dd 01 00       	call   c002827b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 75 ce 01 00       	call   c002732b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 d2 d4 01 00       	call   c00279a8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 8e dd 01 00       	call   c002827b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ec c6 01 00       	call   c0026cc0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 c3 dd 01 00       	call   c002839f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ac d3 01 00       	call   c00279a8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 8f dd 01 00       	call   c002839f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 01 cd 01 00       	call   c002732b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 61 dd 01 00       	call   c002839f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 4a d3 01 00       	call   c00279a8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 b3 cc 01 00       	call   c002732b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 13 dd 01 00       	call   c002839f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 fc d2 01 00       	call   c00279a8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 65 cc 01 00       	call   c002732b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 c5 dc 01 00       	call   c002839f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ae d2 01 00       	call   c00279a8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 17 cc 01 00       	call   c002732b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 77 dc 01 00       	call   c002839f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 60 d2 01 00       	call   c00279a8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 c9 cb 01 00       	call   c002732b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 29 dc 01 00       	call   c002839f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 12 d2 01 00       	call   c00279a8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 78 cb 01 00       	call   c002732b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 d8 db 01 00       	call   c002839f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 c1 d1 01 00       	call   c00279a8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 2a cb 01 00       	call   c002732b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 24 c4 01 00       	call   c0026cc0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 fb da 01 00       	call   c002839f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 e4 d0 01 00       	call   c00279a8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 c4 da 01 00       	call   c002839f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 36 ca 01 00       	call   c002732b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 96 da 01 00       	call   c002839f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 7f d0 01 00       	call   c00279a8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 e8 c9 01 00       	call   c002732b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 48 da 01 00       	call   c002839f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 31 d0 01 00       	call   c00279a8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 9a c9 01 00       	call   c002732b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 fa d9 01 00       	call   c002839f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 e3 cf 01 00       	call   c00279a8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 4c c9 01 00       	call   c002732b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ac d9 01 00       	call   c002839f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 95 cf 01 00       	call   c00279a8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 fe c8 01 00       	call   c002732b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 5e d9 01 00       	call   c002839f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 47 cf 01 00       	call   c00279a8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ad c8 01 00       	call   c002732b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 0d d9 01 00       	call   c002839f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 f6 ce 01 00       	call   c00279a8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 65 c8 01 00       	call   c002732b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 3e c8 01 00       	call   c002732b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 9c ce 01 00       	call   c00279a8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 58 d7 01 00       	call   c002827b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 e7 c7 01 00       	call   c002732b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 45 ce 01 00       	call   c00279a8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 01 d7 01 00       	call   c002827b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 8f c7 01 00       	call   c002732b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ed cd 01 00       	call   c00279a8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 a9 d6 01 00       	call   c002827b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 37 c7 01 00       	call   c002732b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 95 cd 01 00       	call   c00279a8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 51 d6 01 00       	call   c002827b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 df c6 01 00       	call   c002732b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 3d cd 01 00       	call   c00279a8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 f9 d5 01 00       	call   c002827b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 8d c6 01 00       	call   c002732b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 eb cc 01 00       	call   c00279a8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 a7 d5 01 00       	call   c002827b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 bb be 01 00       	call   c0026cc0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 92 d5 01 00       	call   c002839f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 7b cb 01 00       	call   c00279a8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 62 d5 01 00       	call   c002839f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 d4 c4 01 00       	call   c002732b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 64 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd639c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 08 d5 01 00       	call   c002839f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 f1 ca 01 00       	call   c00279a8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 5c c4 01 00       	call   c002732b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 a9 d4 01 00       	call   c002839f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 92 ca 01 00       	call   c00279a8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 fd c3 01 00       	call   c002732b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 4a d4 01 00       	call   c002839f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 33 ca 01 00       	call   c00279a8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 9e c3 01 00       	call   c002732b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 eb d3 01 00       	call   c002839f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 d4 c9 01 00       	call   c00279a8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 3f c3 01 00       	call   c002732b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 8c d3 01 00       	call   c002839f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 75 c9 01 00       	call   c00279a8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 e0 c2 01 00       	call   c002732b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 2d d3 01 00       	call   c002839f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 16 c9 01 00       	call   c00279a8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 81 c2 01 00       	call   c002732b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 ce d2 01 00       	call   c002839f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 b7 c8 01 00       	call   c00279a8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 22 c2 01 00       	call   c002732b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 6f d2 01 00       	call   c002839f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 58 c8 01 00       	call   c00279a8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 c3 c1 01 00       	call   c002732b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 cd ba 01 00       	call   c0026cc0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 a4 d1 01 00       	call   c002839f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 8d c7 01 00       	call   c00279a8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 74 d1 01 00       	call   c002839f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 e6 c0 01 00       	call   c002732b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 80 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6380]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 19 d1 01 00       	call   c002839f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 02 c7 01 00       	call   c00279a8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 6d c0 01 00       	call   c002732b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 b9 d0 01 00       	call   c002839f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 a2 c6 01 00       	call   c00279a8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 0d c0 01 00       	call   c002732b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 59 d0 01 00       	call   c002839f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 42 c6 01 00       	call   c00279a8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ad bf 01 00       	call   c002732b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 f9 cf 01 00       	call   c002839f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 e2 c5 01 00       	call   c00279a8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 4d bf 01 00       	call   c002732b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 99 cf 01 00       	call   c002839f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 82 c5 01 00       	call   c00279a8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ed be 01 00       	call   c002732b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 39 cf 01 00       	call   c002839f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 22 c5 01 00       	call   c00279a8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 8d be 01 00       	call   c002732b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 d9 ce 01 00       	call   c002839f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 c2 c4 01 00       	call   c00279a8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 2d be 01 00       	call   c002732b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 79 ce 01 00       	call   c002839f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 62 c4 01 00       	call   c00279a8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 cd bd 01 00       	call   c002732b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 9c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6364]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 72 bd 01 00       	call   c002732b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 cf c3 01 00       	call   c00279a8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 8b cc 01 00       	call   c002827b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 15 bd 01 00       	call   c002732b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 72 c3 01 00       	call   c00279a8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 2e cc 01 00       	call   c002827b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 b8 bc 01 00       	call   c002732b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 15 c3 01 00       	call   c00279a8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 d1 cb 01 00       	call   c002827b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 5b bc 01 00       	call   c002732b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 b8 c2 01 00       	call   c00279a8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 74 cb 01 00       	call   c002827b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 fe bb 01 00       	call   c002732b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 5b c2 01 00       	call   c00279a8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 17 cb 01 00       	call   c002827b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 a1 bb 01 00       	call   c002732b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 fe c1 01 00       	call   c00279a8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ba ca 01 00       	call   c002827b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 44 bb 01 00       	call   c002732b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 a1 c1 01 00       	call   c00279a8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 5d ca 01 00       	call   c002827b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 e7 ba 01 00       	call   c002732b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 44 c1 01 00       	call   c00279a8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 00 ca 01 00       	call   c002827b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 fc c0 01 00       	call   c00279a8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 74 cb 01 00       	jmp    c0028430 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 de c7 01 00       	call   c0028277 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9c c7 01 00       	call   c0028259 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 33 c5 01 00       	call   c002800b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 34 b8 01 00       	call   c002732b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 03 c5 01 00       	call   c002800b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 6a c1 01 00       	call   c0027c8c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 09 c7 01 00       	call   c0028259 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 0c c7 01 00       	call   c0028277 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 df c6 01 00       	call   c0028277 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 d8 c0 01 00       	call   c0027c8c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 62 c8 01 00       	call   c0028430 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 3d c8 01 00       	call   c0028430 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 0f c4 01 00       	call   c002800b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 66 bd 01 00       	call   c002797c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 45 c6 01 00       	call   c0028277 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 de b6 01 00       	call   c002732b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 02 bd 01 00       	call   c002797c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 a4 c7 01 00       	call   c0028430 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 dc bf 01 00       	call   c0027c8c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 59 b6 01 00       	call   c002732b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 85 c2 01 00       	call   c002800b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 85 b5 01 00       	call   c002732b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 65 b5 01 00       	call   c002732b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 35 c2 01 00       	call   c002800b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 85 c4 01 00       	call   c0028275 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 64 bb 01 00       	call   c002797c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 e6 c5 01 00       	call   c0028410 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 0d c4 01 00       	call   c0028259 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 0b bb 01 00       	call   c002797c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 89 c1 01 00       	call   c002800b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 0c bb 01 00       	call   c00279a8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 5e c1 01 00       	call   c002800b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 c5 bd 01 00       	call   c0027c8c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 44 b4 01 00       	call   c002732b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 0e c1 01 00       	call   c002800b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 5a c3 01 00       	call   c0028277 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 4f ba 01 00       	call   c00279a8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 21 ba 01 00       	call   c00279a8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 5a c0 01 00       	call   c002800b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 be bc 01 00       	call   c0027c8c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 86 bc 01 00       	call   c0027c8c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 05 b3 01 00       	call   c002732b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 f2 c3 01 00       	call   c0028430 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 c4 bf 01 00       	call   c002800b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 1b b9 01 00       	call   c002797c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 fa c1 01 00       	call   c0028277 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 92 b2 01 00       	call   c002732b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 b6 b8 01 00       	call   c002797c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 58 c3 01 00       	call   c0028430 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 19 c1 01 00       	call   c0028277 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 d7 c0 01 00       	call   c0028259 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 6e be 01 00       	call   c002800b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 6f b1 01 00       	call   c002732b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 3e be 01 00       	call   c002800b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 a5 ba 01 00       	call   c0027c8c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 44 c0 01 00       	call   c0028259 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 47 c0 01 00       	call   c0028277 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 1a c0 01 00       	call   c0028277 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 13 ba 01 00       	call   c0027c8c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 9d c1 01 00       	call   c0028430 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 78 c1 01 00       	call   c0028430 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 4a bd 01 00       	call   c002800b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 a1 b6 01 00       	call   c002797c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 80 bf 01 00       	call   c0028277 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 19 b0 01 00       	call   c002732b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 3d b6 01 00       	call   c002797c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 df c0 01 00       	call   c0028430 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 17 b9 01 00       	call   c0027c8c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 94 af 01 00       	call   c002732b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 bf bb 01 00       	call   c002800b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 bf ae 01 00       	call   c002732b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 9f ae 01 00       	call   c002732b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 6f bb 01 00       	call   c002800b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 bf bd 01 00       	call   c0028275 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 9d b4 01 00       	call   c002797c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 1f bf 01 00       	call   c0028410 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 46 bd 01 00       	call   c0028259 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 43 b4 01 00       	call   c002797c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 c1 ba 01 00       	call   c002800b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 44 b4 01 00       	call   c00279a8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 96 ba 01 00       	call   c002800b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 fd b6 01 00       	call   c0027c8c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 7c ad 01 00       	call   c002732b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 46 ba 01 00       	call   c002800b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 92 bc 01 00       	call   c0028277 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 87 b3 01 00       	call   c00279a8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 59 b3 01 00       	call   c00279a8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 90 b9 01 00       	call   c002800b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 f4 b5 01 00       	call   c0027c8c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 c1 b5 01 00       	call   c0027c8c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 40 ac 01 00       	call   c002732b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 2d bd 01 00       	call   c0028430 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ff b8 01 00       	call   c002800b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 56 b2 01 00       	call   c002797c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 35 bb 01 00       	call   c0028277 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 cd ab 01 00       	call   c002732b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 f1 b1 01 00       	call   c002797c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 93 bc 01 00       	call   c0028430 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 54 ba 01 00       	call   c0028277 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 12 ba 01 00       	call   c0028259 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 a9 b7 01 00       	call   c002800b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 aa aa 01 00       	call   c002732b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 79 b7 01 00       	call   c002800b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 e0 b3 01 00       	call   c0027c8c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 7f b9 01 00       	call   c0028259 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 82 b9 01 00       	call   c0028277 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 55 b9 01 00       	call   c0028277 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 4e b3 01 00       	call   c0027c8c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 d8 ba 01 00       	call   c0028430 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 b3 ba 01 00       	call   c0028430 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 85 b6 01 00       	call   c002800b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 dc af 01 00       	call   c002797c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 bb b8 01 00       	call   c0028277 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 54 a9 01 00       	call   c002732b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 78 af 01 00       	call   c002797c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 1a ba 01 00       	call   c0028430 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 52 b2 01 00       	call   c0027c8c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 cf a8 01 00       	call   c002732b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 fa b4 01 00       	call   c002800b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 fa a7 01 00       	call   c002732b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 da a7 01 00       	call   c002732b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 aa b4 01 00       	call   c002800b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 fa b6 01 00       	call   c0028275 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 d8 ad 01 00       	call   c002797c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 5a b8 01 00       	call   c0028410 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 81 b6 01 00       	call   c0028259 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 7e ad 01 00       	call   c002797c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 fc b3 01 00       	call   c002800b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 7f ad 01 00       	call   c00279a8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 d1 b3 01 00       	call   c002800b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 38 b0 01 00       	call   c0027c8c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 b7 a6 01 00       	call   c002732b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 81 b3 01 00       	call   c002800b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 cd b5 01 00       	call   c0028277 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 c2 ac 01 00       	call   c00279a8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 94 ac 01 00       	call   c00279a8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 cb b2 01 00       	call   c002800b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 2f af 01 00       	call   c0027c8c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 fc ae 01 00       	call   c0027c8c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 7b a5 01 00       	call   c002732b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 68 b6 01 00       	call   c0028430 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 3a b2 01 00       	call   c002800b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 91 ab 01 00       	call   c002797c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 70 b4 01 00       	call   c0028277 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 08 a5 01 00       	call   c002732b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 2c ab 01 00       	call   c002797c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 ce b5 01 00       	call   c0028430 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 8f b3 01 00       	call   c0028277 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 4d b3 01 00       	call   c0028259 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 e4 b0 01 00       	call   c002800b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 e5 a3 01 00       	call   c002732b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 b4 b0 01 00       	call   c002800b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 1b ad 01 00       	call   c0027c8c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ba b2 01 00       	call   c0028259 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 bd b2 01 00       	call   c0028277 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 90 b2 01 00       	call   c0028277 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 89 ac 01 00       	call   c0027c8c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 13 b4 01 00       	call   c0028430 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ee b3 01 00       	call   c0028430 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 c0 af 01 00       	call   c002800b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 17 a9 01 00       	call   c002797c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 f6 b1 01 00       	call   c0028277 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 8f a2 01 00       	call   c002732b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 b3 a8 01 00       	call   c002797c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 55 b3 01 00       	call   c0028430 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 8d ab 01 00       	call   c0027c8c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 0a a2 01 00       	call   c002732b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 35 ae 01 00       	call   c002800b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 35 a1 01 00       	call   c002732b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 15 a1 01 00       	call   c002732b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 e5 ad 01 00       	call   c002800b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 35 b0 01 00       	call   c0028275 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 13 a7 01 00       	call   c002797c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 95 b1 01 00       	call   c0028410 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 bc af 01 00       	call   c0028259 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 b9 a6 01 00       	call   c002797c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 37 ad 01 00       	call   c002800b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ba a6 01 00       	call   c00279a8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 0c ad 01 00       	call   c002800b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 73 a9 01 00       	call   c0027c8c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 f2 9f 01 00       	call   c002732b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 bc ac 01 00       	call   c002800b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 08 af 01 00       	call   c0028277 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 fd a5 01 00       	call   c00279a8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 cf a5 01 00       	call   c00279a8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 06 ac 01 00       	call   c002800b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 6a a8 01 00       	call   c0027c8c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 37 a8 01 00       	call   c0027c8c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 b6 9e 01 00       	call   c002732b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 a3 af 01 00       	call   c0028430 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 75 ab 01 00       	call   c002800b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 cc a4 01 00       	call   c002797c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 ab ad 01 00       	call   c0028277 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 43 9e 01 00       	call   c002732b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 67 a4 01 00       	call   c002797c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 09 af 01 00       	call   c0028430 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 c7 ac 01 00       	call   c0028277 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 85 ac 01 00       	call   c0028259 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 1c aa 01 00       	call   c002800b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 1d 9d 01 00       	call   c002732b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ec a9 01 00       	call   c002800b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 53 a6 01 00       	call   c0027c8c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 f2 ab 01 00       	call   c0028259 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 f5 ab 01 00       	call   c0028277 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 c8 ab 01 00       	call   c0028277 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 c1 a5 01 00       	call   c0027c8c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 4b ad 01 00       	call   c0028430 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 22 ad 01 00       	call   c0028430 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 f4 a8 01 00       	call   c002800b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 4b a2 01 00       	call   c002797c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 2a ab 01 00       	call   c0028277 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 c3 9b 01 00       	call   c002732b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 eb a1 01 00       	call   c002797c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 8d ac 01 00       	call   c0028430 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 c6 a4 01 00       	call   c0027c8c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 43 9b 01 00       	call   c002732b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 6f a7 01 00       	call   c002800b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 6f 9a 01 00       	call   c002732b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 4f 9a 01 00       	call   c002732b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 1f a7 01 00       	call   c002800b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 53 a9 01 00       	call   c0028259 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 4a a0 01 00       	call   c002797c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 cc aa 01 00       	call   c0028410 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 f3 a8 01 00       	call   c0028259 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ed 9f 01 00       	call   c002797c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 6b a6 01 00       	call   c002800b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ee 9f 01 00       	call   c00279a8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 40 a6 01 00       	call   c002800b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 a7 a2 01 00       	call   c0027c8c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 26 99 01 00       	call   c002732b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 f0 a5 01 00       	call   c002800b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 3c a8 01 00       	call   c0028277 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 31 9f 01 00       	call   c00279a8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 03 9f 01 00       	call   c00279a8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 47 a5 01 00       	call   c002800b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ae a1 01 00       	call   c0027c8c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 97 9e 01 00       	call   c00279a8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 53 a7 01 00       	call   c002827b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 46 a1 01 00       	call   c0027c8c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 c5 97 01 00       	call   c002732b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 b2 a8 01 00       	call   c0028430 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 84 a4 01 00       	call   c002800b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 db 9d 01 00       	call   c002797c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ba a6 01 00       	call   c0028277 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 52 97 01 00       	call   c002732b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 7a 9d 01 00       	call   c002797c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 1c a8 01 00       	call   c0028430 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 c4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd633c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 b8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6348]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 cf a4 01 00       	call   c0028277 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 8d a4 01 00       	call   c0028259 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 79 a4 01 00       	call   c0028277 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 eb a1 01 00       	call   c002800b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 69 9b 01 00       	call   c00279a8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 bb a1 01 00       	call   c002800b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 c1 94 01 00       	call   c002732b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 90 a1 01 00       	call   c002800b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 e0 a3 01 00       	call   c0028275 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 c1 9a 01 00       	call   c002797c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 43 a5 01 00       	call   c0028410 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 6a a3 01 00       	call   c0028259 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 69 9a 01 00       	call   c002797c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 e7 a0 01 00       	call   c002800b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 6a 9a 01 00       	call   c00279a8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 bc a0 01 00       	call   c002800b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 23 9d 01 00       	call   c0027c8c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 a2 93 01 00       	call   c002732b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ca 9c 01 00       	call   c0027c8c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 50 93 01 00       	call   c002732b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 3e a4 01 00       	call   c0028430 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 10 a0 01 00       	call   c002800b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 67 99 01 00       	call   c002797c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 46 a2 01 00       	call   c0028277 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 df 92 01 00       	call   c002732b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 0b 99 01 00       	call   c002797c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ad a3 01 00       	call   c0028430 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 5a 9f 01 00       	call   c002800b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 d7 98 01 00       	call   c00279a8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 28 9f 01 00       	call   c002800b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 2e 92 01 00       	call   c002732b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 fe 9e 01 00       	call   c002800b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 52 a1 01 00       	call   c0028279 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 2b 98 01 00       	call   c002797c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ad a2 01 00       	call   c0028410 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 d4 a0 01 00       	call   c0028259 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 d2 97 01 00       	call   c002797c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 50 9e 01 00       	call   c002800b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 d3 97 01 00       	call   c00279a8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 25 9e 01 00       	call   c002800b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 8c 9a 01 00       	call   c0027c8c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 0b 91 01 00       	call   c002732b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 27 9a 01 00       	call   c0027c8c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 a6 90 01 00       	call   c002732b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 94 a1 01 00       	call   c0028430 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 66 9d 01 00       	call   c002800b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 bd 96 01 00       	call   c002797c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 9c 9f 01 00       	call   c0028277 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 35 90 01 00       	call   c002732b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 61 96 01 00       	call   c002797c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 d2 9c 01 00       	call   c002800b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 d8 8f 01 00       	call   c002732b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 de 9d 02 c0       	mov    eax,0xc0029dde
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 ef 9d 02 c0       	mov    eax,0xc0029def
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000e4e3:	ff 05 84 0f 03 c0    	inc    DWORD PTR ds:0xc0030f84
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f80,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c000e50d:	e8 49 f5 00 00       	call   c001da5b <schedule()>
c000e512:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000e517:	48                   	dec    eax
c000e518:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 26 9e 02 c0       	push   0xc0029e26
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 da 02 c0       	mov    eax,0xc002da68
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 a4 67 02 c0       	mov    eax,0xc00267a4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 39 9e 02 c0       	push   0xc0029e39
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 d8 64 02 c0       	mov    eax,0xc00264d8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 42 9e 02 c0       	push   0xc0029e42
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 a4 68 02 c0       	mov    eax,0xc00268a4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 4c 9e 02 c0       	push   0xc0029e4c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 24 66 02 c0       	mov    eax,0xc0026624
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 55 9e 02 c0       	push   0xc0029e55
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c da 02 c0       	mov    eax,0xc002da6c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 62 9e 02 c0       	push   0xc0029e62
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d da 02 c0       	mov    eax,0xc002da6d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 b5 56 00 00       	call   c0013d22 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c000e6be:	68 88 9e 02 c0       	push   0xc0029e88
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 73 ef 00 00       	call   c001d63e <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 56 f1 00 00       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 1a e2 01 c0       	push   0xc001e21a
c000e6e9:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c000e6ef:	e8 42 f1 00 00       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 0f 03 c0       	mov    ds:0xc0030f68,eax
c000e6fc:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e701:	c6 05 6d da 02 c0 01 	mov    BYTE PTR ds:0xc002da6d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 b3 fe 00 00       	call   c001e5c5 <Vm::initialise8086()>
c000e712:	e8 d3 43 00 00       	call   c0012aea <Fs::initVFS()>
c000e717:	c7 04 24 95 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e95
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 6c 9f 02 c0       	push   0xc0029f6c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 79 d7 00 00       	call   c001bec5 <Sys::loadSyscalls()>
c000e74c:	e8 71 b6 00 00       	call   c0019dc2 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 af 9e 02 c0       	push   0xc0029eaf
c000e75b:	68 b8 9e 02 c0       	push   0xc0029eb8
c000e760:	e8 22 c5 00 00       	call   c001ac87 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 6d 4e 00 00       	call   c00135da <User::loadClockSettings(int)>
c000e76d:	c7 04 24 90 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f90
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 58 55 00 00       	call   c0013ce2 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 c0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ec0
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 8f b1 00 00       	call   c001992a <Krnl::startCPUs()>
c000e79b:	c7 04 24 da 9e 02 c0 	mov    DWORD PTR [esp],0xc0029eda
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 eb 9e 02 c0       	push   0xc0029eeb
c000e7b6:	e8 da e8 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 02 eb 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 60 f4 00 00       	call   c001dc31 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 07 9f 02 c0       	push   0xc0029f07
c000e7e5:	50                   	push   eax
c000e7e6:	e8 b1 55 00 00       	call   c0013d9c <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba dc 9f 02 c0       	mov    edx,0xc0029fdc
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 81 da 02 c0 04 	test   BYTE PTR ds:0xc002da81,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 e7 7a 01 00       	call   c0026466 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 02 9f 00 00       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 db 9e 00 00       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 b9 9e 00 00       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 97 9e 00 00       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 80 da 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002da80,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 a5 9d 00 00       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 80 9d 00 00       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 51 79 01 00       	call   c0026420 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 0e 79 01 00       	call   c0026400 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 9c 9d 00 00       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 10 9f 02 c0       	push   0xc0029f10
c000eb62:	e8 64 b3 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 16 9f 02 c0       	push   0xc0029f16
c000eb9a:	e8 2c b3 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 b0 9f 02 c0       	push   0xc0029fb0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 80 da 02 c0 04 	test   BYTE PTR ds:0xc002da80,0x4
c000ec03:	0f 94 05 a0 c9 02 c0 	sete   BYTE PTR ds:0xc002c9a0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 17 8f 00 00       	call   c0017b30 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 70 4f 00 00       	call   c0013b98 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 c0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ec0
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 18 9d 00 00       	call   c0018974 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 2d 4f 00 00       	call   c0013b98 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 a9 54 00 00       	call   c0014130 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 fd 4e 00 00       	call   c0013b98 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 1c 9f 02 c0       	push   0xc0029f1c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 8f ec 00 00       	call   c001d958 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 37 9f 02 c0       	push   0xc0029f37
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 48 3a 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 48 9f 02 c0       	push   0xc0029f48
c000ed34:	e8 92 b1 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 55 9f 02 c0       	push   0xc0029f55
c000ed49:	e8 7d b1 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 5f 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f5f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 66 b1 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 72 da 02 c0       	mov    ds:0xc002da72,eax
c000ee21:	66 89 15 70 da 02 c0 	mov    WORD PTR ds:0xc002da70,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000ef38:	48                   	dec    eax
c000ef39:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 21 95 01 00       	call   c00284b0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 18 95 01 00       	call   c00284b0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 78 da 02 c0 ff 07 	mov    WORD PTR ds:0xc002da78,0x7ff
c000f085:	a3 7a da 02 c0       	mov    ds:0xc002da7a,eax
c000f08a:	0f 01 1d 78 da 02 c0 	lidtd  ds:0xc002da78
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c000f37c:	e8 a5 27 00 00       	call   c0011b26 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c5 17 00 00       	call   c0010b64 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f6 17 00 00       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 3c c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c83c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 3c c8 02 c0       	mov    eax,ds:0xc002c83c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 00 a0 02 c0       	push   0xc002a000
c000f455:	e8 05 33 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 3c c8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c83c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c000f481:	8b 2d 3c c8 02 c0    	mov    ebp,DWORD PTR ds:0xc002c83c
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 8b 25 00 00       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 3c c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c83c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 30 a0 02 c0       	push   0xc002a030
c000f50d:	e8 b9 a9 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 35 a0 02 c0       	push   0xc002a035
c000f523:	e8 a3 a9 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000f543:	48                   	dec    eax
c000f544:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c000f561:	e8 c0 25 00 00       	call   c0011b26 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c000f577:	e8 ce 21 00 00       	call   c001174a <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 3c a0 02 c0       	push   0xc002a03c
c000f6a4:	e8 b6 30 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 40 c8 02 c0 	movzx  eax,BYTE PTR ds:0xc002c840
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 40 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd37c0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 76 c8 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd378a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 75 c8 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd378b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 40 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd37c0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 54 a0 02 c0       	push   0xc002a054
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 81 1c 00 00       	call   c00113dc <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 20 20 00 00       	call   c0011786 <VAS::VAS()>
c000f766:	89 1d d0 db 02 c0    	mov    DWORD PTR ds:0xc002dbd0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 68 da 02 c0    	mov    DWORD PTR ds:0xc002da68,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 06 21 00 00       	call   c00118a8 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 73 a0 02 c0       	push   0xc002a073
c000f7b9:	e8 a1 2f 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba c0 da 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2540],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be c0 da 02 c0       	mov    esi,0xc002dac0
c000f826:	8d 93 c0 da 02 c0    	lea    edx,[ebx-0x3ffd2540]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 8c a0 02 c0       	push   0xc002a08c
c000f843:	e8 17 2f 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 a3 a0 02 c0       	push   0xc002a0a3
c000f87f:	e8 db 2e 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 c0 da 02 c0    	lea    eax,[edx-0x3ffd2540]
c000f8b8:	8d 94 11 c0 da 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2540]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 84 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c984
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 84 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c984
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 84 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c984
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 b9 a0 02 c0       	push   0xc002a0b9
c000f932:	e8 28 2e 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d b0 da 02 c0    	dec    DWORD PTR ds:0xc002dab0
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 cc a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0cc
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 4c a5 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 a4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002daa4
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d a4 da 02 c0    	mov    DWORD PTR ds:0xc002daa4,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 a4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002daa4,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 00 a1 02 c0       	push   0xc002a100
c000f9da:	e8 80 2d 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 31 2a 00 00       	call   c0012424 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 18 a1 02 c0       	push   0xc002a118
c000fa16:	e8 b0 a4 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d a4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa4
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 a4 da 02 c0    	mov    edx,DWORD PTR ds:0xc002daa4
c000fa45:	a3 b0 da 02 c0       	mov    ds:0xc002dab0,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 b4 da 02 c0    	push   DWORD PTR ds:0xc002dab4
c000fa54:	50                   	push   eax
c000fa55:	68 e2 a0 02 c0       	push   0xc002a0e2
c000fa5a:	e8 00 2d 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 a4 da 02 c0       	mov    eax,ds:0xc002daa4
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000fad3:	48                   	dec    eax
c000fad4:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d a8 da 02 c0    	cmp    DWORD PTR ds:0xc002daa8,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 c0 da 02 c0       	push   0xc002dac0
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 26 a1 02 c0       	push   0xc002a126
c000fb52:	e8 08 2c 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 68 a1 02 c0       	push   0xc002a168
c000fbe6:	e8 74 2b 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 8c a1 02 c0       	push   0xc002a18c
c000fc72:	e8 e8 2a 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 b4 da 02 c0    	add    eax,DWORD PTR ds:0xc002dab4
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 b4 da 02 c0       	mov    ds:0xc002dab4,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 4c a1 02 c0       	push   0xc002a14c
c000fca8:	e8 b2 2a 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 3e a1 02 c0       	push   0xc002a13e
c000fd17:	e8 af a1 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 b4 da 02 c0    	inc    DWORD PTR ds:0xc002dab4
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba f8 a1 02 c0       	mov    edx,0xc002a1f8
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 3f 12 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 e1 28 00 00       	call   c0012687 <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c000fddc:	e8 7a dc 00 00       	call   c001da5b <schedule()>
c000fde1:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c000fde6:	48                   	dec    eax
c000fde7:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 2b 6a 01 00       	call   c00268a4 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 b5 a1 02 c0       	push   0xc002a1b5
c000fe8e:	e8 38 a0 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 d1 a1 02 c0       	push   0xc002a1d1
c000ff4f:	e8 77 9f 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 5e 0e 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba f8 a1 02 c0       	mov    edx,0xc002a1f8
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba 80 a2 02 c0       	mov    edx,0xc002a280
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cb 0f 00 00       	call   c0010fbc <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 6a 26 00 00       	call   c0012687 <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 ee 5b 00 00       	call   c0015c26 <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 20 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db20
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 00 db 02 c0       	push   0xc002db00
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d c0 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3640]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d c0 c9 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3640]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 78 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3788]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 50 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd37b0]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 0c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a20c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 5b 9b 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c0010370:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d 24 db 02 c0    	mov    DWORD PTR ds:0xc002db24,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 d8 db 02 c0       	mov    eax,ds:0xc002dbd8
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 b4 30 00 00       	jmp    c001356c <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d 24 db 02 c0    	cmp    DWORD PTR ds:0xc002db24,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 1a a2 02 c0       	mov    esi,0xc002a21a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 42 05 00 00       	call   c0010dda <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba 80 a2 02 c0       	mov    edx,0xc002a280
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb 00 db 02 c0       	mov    ebx,0xc002db00
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 dd 08 00 00       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	6a 05                	push   0x5
c0010962:	56                   	push   esi
c0010963:	50                   	push   eax
c0010964:	53                   	push   ebx
c0010965:	e8 ba 10 00 00       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010974:	83 ec 04             	sub    esp,0x4
c0010977:	68 00 0f 00 00       	push   0xf00
c001097c:	6a 00                	push   0x0
c001097e:	50                   	push   eax
c001097f:	e8 cc fd fe ff       	call   c0000750 <memset>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	83 ec 04             	sub    esp,0x4
c001098a:	6a 00                	push   0x0
c001098c:	6a 07                	push   0x7
c001098e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010992:	e8 1b f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	83 ec 04             	sub    esp,0x4
c001099d:	6a 00                	push   0x0
c001099f:	6a 00                	push   0x0
c00109a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a5:	e8 92 f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109aa:	83 c4 10             	add    esp,0x10
c00109ad:	83 ec 0c             	sub    esp,0xc
c00109b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b4:	e8 1b fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109b9:	83 c4 10             	add    esp,0x10
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	05 02 01 00 00       	add    eax,0x102
c00109cd:	83 ec 04             	sub    esp,0x4
c00109d0:	68 96 00 00 00       	push   0x96
c00109d5:	6a 00                	push   0x0
c00109d7:	50                   	push   eax
c00109d8:	e8 73 fd fe ff       	call   c0000750 <memset>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	05 98 01 00 00       	add    eax,0x198
c00109e9:	83 ec 04             	sub    esp,0x4
c00109ec:	68 2c 01 00 00       	push   0x12c
c00109f1:	6a 00                	push   0x0
c00109f3:	50                   	push   eax
c00109f4:	e8 57 fd fe ff       	call   c0000750 <memset>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	5b                   	pop    ebx
c00109fe:	5e                   	pop    esi
c00109ff:	5f                   	pop    edi
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <VgaText::receiveKey(unsigned char)>:
c0010a02:	55                   	push   ebp
c0010a03:	57                   	push   edi
c0010a04:	56                   	push   esi
c0010a05:	53                   	push   ebx
c0010a06:	83 ec 1c             	sub    esp,0x1c
c0010a09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a11:	84 db                	test   bl,bl
c0010a13:	0f 84 c9 00 00 00    	je     c0010ae2 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a19:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a1f:	80 fb 08             	cmp    bl,0x8
c0010a22:	75 2c                	jne    c0010a50 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	57                   	push   edi
c0010a28:	e8 3f fd fe ff       	call   c000076c <strlen>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	85 c0                	test   eax,eax
c0010a32:	74 41                	je     c0010a75 <VgaText::receiveKey(unsigned char)+0x73>
c0010a34:	50                   	push   eax
c0010a35:	50                   	push   eax
c0010a36:	6a 08                	push   0x8
c0010a38:	56                   	push   esi
c0010a39:	e8 f0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a41:	e8 26 fd fe ff       	call   c000076c <strlen>
c0010a46:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a4e:	eb 22                	jmp    c0010a72 <VgaText::receiveKey(unsigned char)+0x70>
c0010a50:	0f be c3             	movsx  eax,bl
c0010a53:	52                   	push   edx
c0010a54:	52                   	push   edx
c0010a55:	50                   	push   eax
c0010a56:	56                   	push   esi
c0010a57:	e8 d2 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a65:	59                   	pop    ecx
c0010a66:	5d                   	pop    ebp
c0010a67:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6b:	50                   	push   eax
c0010a6c:	57                   	push   edi
c0010a6d:	e8 da fe fe ff       	call   c000094c <strcat>
c0010a72:	83 c4 10             	add    esp,0x10
c0010a75:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7c:	75 05                	jne    c0010a83 <VgaText::receiveKey(unsigned char)+0x81>
c0010a7e:	80 fb 0a             	cmp    bl,0xa
c0010a81:	75 53                	jne    c0010ad6 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 da fc fe ff       	call   c000076c <strlen>
c0010a92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a95:	89 c5                	mov    ebp,eax
c0010a97:	e8 d0 fc fe ff       	call   c000076c <strlen>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa3:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aa8:	76 10                	jbe    c0010aba <VgaText::receiveKey(unsigned char)+0xb8>
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	68 2b a2 02 c0       	push   0xc002a22b
c0010ab2:	e8 14 94 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	50                   	push   eax
c0010abb:	50                   	push   eax
c0010abc:	57                   	push   edi
c0010abd:	53                   	push   ebx
c0010abe:	e8 89 fe fe ff       	call   c000094c <strcat>
c0010ac3:	83 c4 0c             	add    esp,0xc
c0010ac6:	68 96 00 00 00       	push   0x96
c0010acb:	6a 00                	push   0x0
c0010acd:	57                   	push   edi
c0010ace:	e8 7d fc fe ff       	call   c0000750 <memset>
c0010ad3:	83 c4 10             	add    esp,0x10
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	56                   	push   esi
c0010ada:	e8 6f fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	83 c4 1c             	add    esp,0x1c
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	5f                   	pop    edi
c0010ae8:	5d                   	pop    ebp
c0010ae9:	c3                   	ret    

c0010aea <VgaText::write(unsigned long long, void*, int*)>:
c0010aea:	55                   	push   ebp
c0010aeb:	57                   	push   edi
c0010aec:	56                   	push   esi
c0010aed:	53                   	push   ebx
c0010aee:	83 ec 0c             	sub    esp,0xc
c0010af1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010af9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010afd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b04:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b07:	39 eb                	cmp    ebx,ebp
c0010b09:	74 13                	je     c0010b1e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0b:	43                   	inc    ebx
c0010b0c:	50                   	push   eax
c0010b0d:	50                   	push   eax
c0010b0e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b12:	50                   	push   eax
c0010b13:	56                   	push   esi
c0010b14:	e8 15 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b19:	83 c4 10             	add    esp,0x10
c0010b1c:	eb e9                	jmp    c0010b07 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b28:	56                   	push   esi
c0010b29:	e8 20 fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b32:	89 38                	mov    DWORD PTR [eax],edi
c0010b34:	83 c4 1c             	add    esp,0x1c
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	5b                   	pop    ebx
c0010b3a:	5e                   	pop    esi
c0010b3b:	5f                   	pop    edi
c0010b3c:	5d                   	pop    ebp
c0010b3d:	c3                   	ret    

c0010b3e <newTerminal(char*)>:
c0010b3e:	83 ec 28             	sub    esp,0x28
c0010b41:	68 c4 02 00 00       	push   0x2c4
c0010b46:	e8 4e ea ff ff       	call   c000f599 <malloc>
c0010b4b:	5a                   	pop    edx
c0010b4c:	59                   	pop    ecx
c0010b4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b51:	50                   	push   eax
c0010b52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b56:	e8 2b fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b5f:	83 c4 2c             	add    esp,0x2c
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <TSS::TSS()>:
c0010b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b6f:	90                   	nop
c0010b70:	c3                   	ret    
c0010b71:	90                   	nop

c0010b72 <TSS::setESP(unsigned long)>:
c0010b72:	55                   	push   ebp
c0010b73:	89 e5                	mov    ebp,esp
c0010b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b81:	90                   	nop
c0010b82:	5d                   	pop    ebp
c0010b83:	c3                   	ret    

c0010b84 <TSS::flush()>:
c0010b84:	55                   	push   ebp
c0010b85:	89 e5                	mov    ebp,esp
c0010b87:	83 ec 10             	sub    esp,0x10
c0010b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b8f:	83 c8 03             	or     eax,0x3
c0010b92:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b96:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9a:	66 89 d0             	mov    ax,dx
c0010b9d:	0f 00 d8             	ltr    ax
c0010ba0:	90                   	nop
c0010ba1:	c9                   	leave  
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <TSS::setup(unsigned long, unsigned long)>:
c0010ba4:	55                   	push   ebp
c0010ba5:	89 e5                	mov    ebp,esp
c0010ba7:	83 ec 18             	sub    esp,0x18
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	6a 68                	push   0x68
c0010baf:	e8 e5 e9 ff ff       	call   c000f599 <malloc>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	89 c2                	mov    edx,eax
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc5:	83 ec 04             	sub    esp,0x4
c0010bc8:	6a 68                	push   0x68
c0010bca:	6a 00                	push   0x0
c0010bcc:	50                   	push   eax
c0010bcd:	e8 7e fb fe ff       	call   c0000750 <memset>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bff:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c17:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c23:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c53:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6c:	0f 20 da             	mov    edx,cr3
c0010c6f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c75:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7e:	83 ec 08             	sub    esp,0x8
c0010c81:	50                   	push   eax
c0010c82:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c85:	50                   	push   eax
c0010c86:	e8 07 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8b:	83 c4 10             	add    esp,0x10
c0010c8e:	83 ec 08             	sub    esp,0x8
c0010c91:	6a 68                	push   0x68
c0010c93:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c96:	50                   	push   eax
c0010c97:	e8 12 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca6:	83 e0 0f             	and    eax,0xf
c0010ca9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cac:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010caf:	83 c8 40             	or     eax,0x40
c0010cb2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb5:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010cba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc0:	05 78 01 00 00       	add    eax,0x178
c0010cc5:	83 ec 04             	sub    esp,0x4
c0010cc8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cce:	50                   	push   eax
c0010ccf:	e8 0e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd4:	83 c4 10             	add    esp,0x10
c0010cd7:	89 c2                	mov    edx,eax
c0010cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdc:	89 10                	mov    DWORD PTR [eax],edx
c0010cde:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0010ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce9:	05 78 01 00 00       	add    eax,0x178
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	50                   	push   eax
c0010cf2:	e8 15 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cff:	c9                   	leave  
c0010d00:	c3                   	ret    
c0010d01:	90                   	nop

c0010d02 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d12:	75 08                	jne    c0010d1c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1a:	eb 38                	jmp    c0010d54 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d21:	75 17                	jne    c0010d3a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d31:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d37:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3a:	89 c1                	mov    ecx,eax
c0010d3c:	83 e1 fd             	and    ecx,0xfffffffd
c0010d3f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d45:	74 cd                	je     c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d47:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4c:	83 e0 ef             	and    eax,0xffffffef
c0010d4f:	83 f8 08             	cmp    eax,0x8
c0010d52:	76 c0                	jbe    c0010d14 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d54:	31 c0                	xor    eax,eax
c0010d56:	c3                   	ret    
c0010d57:	90                   	nop

c0010d58 <ReservedFilename::isAtty()>:
c0010d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d5f:	31 c0                	xor    eax,eax
c0010d61:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d67:	74 09                	je     c0010d72 <ReservedFilename::isAtty()+0x1a>
c0010d69:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d6f:	0f 94 c0             	sete   al
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d83:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d88:	75 08                	jne    c0010d92 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d90:	eb 3d                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d92:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d97:	75 17                	jne    c0010db0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dad:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db5:	75 04                	jne    c0010dbb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db7:	89 0a                	mov    DWORD PTR [edx],ecx
c0010db9:	eb 14                	jmp    c0010dcf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc0:	74 c8                	je     c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc7:	83 e0 ef             	and    eax,0xffffffef
c0010dca:	83 f8 08             	cmp    eax,0x8
c0010dcd:	76 bb                	jbe    c0010d8a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dcf:	31 c0                	xor    eax,eax
c0010dd1:	c3                   	ret    

c0010dd2 <UnixFile::getFileDescriptor()>:
c0010dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd9:	c3                   	ret    

c0010dda <UnixFile::UnixFile(int)>:
c0010dda:	53                   	push   ebx
c0010ddb:	83 ec 28             	sub    esp,0x28
c0010dde:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c0010de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de7:	89 10                	mov    DWORD PTR [eax],edx
c0010de9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df1:	0f 8f 8c 01 00 00    	jg     c0010f83 <UnixFile::UnixFile(int)+0x1a9>
c0010df7:	a1 00 ca 02 c0       	mov    eax,ds:0xc002ca00
c0010dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0010dff:	89 15 00 ca 02 c0    	mov    DWORD PTR ds:0xc002ca00,edx
c0010e05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e13:	68 b8 db 02 c0       	push   0xc002dbb8
c0010e18:	e8 f9 76 01 00       	call   c0028516 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1d:	83 c4 10             	add    esp,0x10
c0010e20:	a0 b4 db 02 c0       	mov    al,ds:0xc002dbb4
c0010e25:	83 f0 01             	xor    eax,0x1
c0010e28:	84 c0                	test   al,al
c0010e2a:	0f 84 54 01 00 00    	je     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010e30:	c6 05 b4 db 02 c0 01 	mov    BYTE PTR ds:0xc002dbb4,0x1
c0010e37:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e46:	e8 4e e7 ff ff       	call   c000f599 <malloc>
c0010e4b:	83 c4 10             	add    esp,0x10
c0010e4e:	89 c3                	mov    ebx,eax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 03 ff ff 0f       	push   0xfffff03
c0010e58:	53                   	push   ebx
c0010e59:	e8 2c 01 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e5e:	83 c4 10             	add    esp,0x10
c0010e61:	89 1d ac db 02 c0    	mov    DWORD PTR ds:0xc002dbac,ebx
c0010e67:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e6f:	83 ec 0c             	sub    esp,0xc
c0010e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e76:	e8 1e e7 ff ff       	call   c000f599 <malloc>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	89 c3                	mov    ebx,eax
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	68 01 ff ff 0f       	push   0xfffff01
c0010e88:	53                   	push   ebx
c0010e89:	e8 fc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 1d b0 db 02 c0    	mov    DWORD PTR ds:0xc002dbb0,ebx
c0010e97:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea6:	e8 ee e6 ff ff       	call   c000f599 <malloc>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	89 c3                	mov    ebx,eax
c0010eb0:	83 ec 08             	sub    esp,0x8
c0010eb3:	68 00 ff ff 0f       	push   0xfffff00
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 cc 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	89 1d a4 db 02 c0    	mov    DWORD PTR ds:0xc002dba4,ebx
c0010ec7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ecf:	83 ec 0c             	sub    esp,0xc
c0010ed2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed6:	e8 be e6 ff ff       	call   c000f599 <malloc>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	89 c3                	mov    ebx,eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	68 02 ff ff 0f       	push   0xfffff02
c0010ee8:	53                   	push   ebx
c0010ee9:	e8 9c 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	89 1d a8 db 02 c0    	mov    DWORD PTR ds:0xc002dba8,ebx
c0010ef7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010eff:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f04:	7f 7e                	jg     c0010f84 <UnixFile::UnixFile(int)+0x1aa>
c0010f06:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f15:	e8 7f e6 ff ff       	call   c000f599 <malloc>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	89 c3                	mov    ebx,eax
c0010f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f23:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	50                   	push   eax
c0010f2c:	53                   	push   ebx
c0010f2d:	e8 58 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f39:	89 1c 85 80 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2480],ebx
c0010f40:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f4f:	e8 45 e6 ff ff       	call   c000f599 <malloc>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	89 c3                	mov    ebx,eax
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	50                   	push   eax
c0010f66:	53                   	push   ebx
c0010f67:	e8 1e 00 00 00       	call   c0010f8a <ReservedFilename::ReservedFilename(int)>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f73:	89 1c 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],ebx
c0010f7a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f7e:	e9 7c ff ff ff       	jmp    c0010eff <UnixFile::UnixFile(int)+0x125>
c0010f83:	90                   	nop
c0010f84:	83 c4 28             	add    esp,0x28
c0010f87:	5b                   	pop    ebx
c0010f88:	c3                   	ret    
c0010f89:	90                   	nop

c0010f8a <ReservedFilename::ReservedFilename(int)>:
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f91:	83 ec 08             	sub    esp,0x8
c0010f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f98:	50                   	push   eax
c0010f99:	e8 3c fe ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0010f9e:	83 c4 10             	add    esp,0x10
c0010fa1:	ba 64 a3 02 c0       	mov    edx,0xc002a364
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	89 10                	mov    DWORD PTR [eax],edx
c0010fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb7:	90                   	nop
c0010fb8:	83 c4 0c             	add    esp,0xc
c0010fbb:	c3                   	ret    

c0010fbc <UnixFile::~UnixFile()>:
c0010fbc:	83 ec 1c             	sub    esp,0x1c
c0010fbf:	ba 48 a3 02 c0       	mov    edx,0xc002a348
c0010fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fc8:	89 10                	mov    DWORD PTR [eax],edx
c0010fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd6:	7f 73                	jg     c001104b <UnixFile::~UnixFile()+0x8f>
c0010fd8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe0:	83 ec 0c             	sub    esp,0xc
c0010fe3:	68 b8 db 02 c0       	push   0xc002dbb8
c0010fe8:	e8 fd 75 01 00       	call   c00285ea <LinkedList<UnixFile>::getFirstElement()>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff4:	83 ec 0c             	sub    esp,0xc
c0010ff7:	68 b8 db 02 c0       	push   0xc002dbb8
c0010ffc:	e8 f1 75 01 00       	call   c00285f2 <LinkedList<UnixFile>::removeFirst()>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011008:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100c:	74 40                	je     c001104e <UnixFile::~UnixFile()+0x92>
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011015:	68 b8 db 02 c0       	push   0xc002dbb8
c001101a:	e8 f7 74 01 00       	call   c0028516 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011026:	8d 50 01             	lea    edx,[eax+0x1]
c0011029:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011032:	0f 94 c0             	sete   al
c0011035:	84 c0                	test   al,al
c0011037:	74 a7                	je     c0010fe0 <UnixFile::~UnixFile()+0x24>
c0011039:	83 ec 0c             	sub    esp,0xc
c001103c:	68 20 a3 02 c0       	push   0xc002a320
c0011041:	e8 85 8e 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	eb 95                	jmp    c0010fe0 <UnixFile::~UnixFile()+0x24>
c001104b:	90                   	nop
c001104c:	eb 01                	jmp    c001104f <UnixFile::~UnixFile()+0x93>
c001104e:	90                   	nop
c001104f:	90                   	nop
c0011050:	83 c4 1c             	add    esp,0x1c
c0011053:	c3                   	ret    

c0011054 <UnixFile::~UnixFile()>:
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	83 ec 0c             	sub    esp,0xc
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 59 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 ec 08             	sub    esp,0x8
c0011069:	6a 0c                	push   0xc
c001106b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001106f:	e8 13 16 00 00       	call   c0012687 <operator delete(void*, unsigned long)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	83 c4 0c             	add    esp,0xc
c001107a:	c3                   	ret    
c001107b:	90                   	nop

c001107c <ReservedFilename::~ReservedFilename()>:
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	ba 64 a3 02 c0       	mov    edx,0xc002a364
c0011084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011088:	89 10                	mov    DWORD PTR [eax],edx
c001108a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	50                   	push   eax
c0011092:	e8 25 ff ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0011097:	83 c4 10             	add    esp,0x10
c001109a:	90                   	nop
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <ReservedFilename::~ReservedFilename()>:
c00110a0:	83 ec 0c             	sub    esp,0xc
c00110a3:	83 ec 0c             	sub    esp,0xc
c00110a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110aa:	e8 cd ff ff ff       	call   c001107c <ReservedFilename::~ReservedFilename()>
c00110af:	83 c4 10             	add    esp,0x10
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	6a 0c                	push   0xc
c00110b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bb:	e8 c7 15 00 00       	call   c0012687 <operator delete(void*, unsigned long)>
c00110c0:	83 c4 10             	add    esp,0x10
c00110c3:	83 c4 0c             	add    esp,0xc
c00110c6:	c3                   	ret    

c00110c7 <getFromFileDescriptor(int)>:
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110cf:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110db:	7f 2c                	jg     c0011109 <getFromFileDescriptor(int)+0x42>
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	68 b8 db 02 c0       	push   0xc002dbb8
c00110e5:	e8 00 75 01 00       	call   c00285ea <LinkedList<UnixFile>::getFirstElement()>
c00110ea:	83 c4 10             	add    esp,0x10
c00110ed:	85 c0                	test   eax,eax
c00110ef:	75 04                	jne    c00110f5 <getFromFileDescriptor(int)+0x2e>
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	eb 6e                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c00110f5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110f8:	74 69                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c00110fa:	52                   	push   edx
c00110fb:	52                   	push   edx
c00110fc:	50                   	push   eax
c00110fd:	68 b8 db 02 c0       	push   0xc002dbb8
c0011102:	e8 8d 75 01 00       	call   c0028694 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011107:	eb e1                	jmp    c00110ea <getFromFileDescriptor(int)+0x23>
c0011109:	a1 ac db 02 c0       	mov    eax,ds:0xc002dbac
c001110e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011114:	74 4d                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011116:	a1 b0 db 02 c0       	mov    eax,ds:0xc002dbb0
c001111b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011121:	74 40                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011123:	a1 a8 db 02 c0       	mov    eax,ds:0xc002dba8
c0011128:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001112e:	74 33                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c0011130:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0011135:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113b:	74 26                	je     c0011163 <getFromFileDescriptor(int)+0x9c>
c001113d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011143:	83 f8 08             	cmp    eax,0x8
c0011146:	77 09                	ja     c0011151 <getFromFileDescriptor(int)+0x8a>
c0011148:	8b 04 85 80 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2480]
c001114f:	eb 12                	jmp    c0011163 <getFromFileDescriptor(int)+0x9c>
c0011151:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011157:	83 fb 08             	cmp    ebx,0x8
c001115a:	77 95                	ja     c00110f1 <getFromFileDescriptor(int)+0x2a>
c001115c:	8b 04 9d 40 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd24c0]
c0011163:	83 c4 08             	add    esp,0x8
c0011166:	5b                   	pop    ebx
c0011167:	c3                   	ret    

c0011168 <__static_initialization_and_destruction_0(int, int)>:
c0011168:	83 ec 0c             	sub    esp,0xc
c001116b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011170:	75 34                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011172:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117a:	75 2a                	jne    c00111a6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	68 b8 db 02 c0       	push   0xc002dbb8
c0011184:	e8 4b 73 01 00       	call   c00284d4 <LinkedList<UnixFile>::LinkedList()>
c0011189:	83 c4 10             	add    esp,0x10
c001118c:	83 ec 04             	sub    esp,0x4
c001118f:	68 38 c8 02 c0       	push   0xc002c838
c0011194:	68 b8 db 02 c0       	push   0xc002dbb8
c0011199:	68 d2 84 02 c0       	push   0xc00284d2
c001119e:	e8 5e 14 00 00       	call   c0012601 <__cxa_atexit>
c00111a3:	83 c4 10             	add    esp,0x10
c00111a6:	90                   	nop
c00111a7:	83 c4 0c             	add    esp,0xc
c00111aa:	c3                   	ret    

c00111ab <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ab:	83 ec 0c             	sub    esp,0xc
c00111ae:	83 ec 08             	sub    esp,0x8
c00111b1:	68 ff ff 00 00       	push   0xffff
c00111b6:	6a 01                	push   0x1
c00111b8:	e8 ab ff ff ff       	call   c0011168 <__static_initialization_and_destruction_0(int, int)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	83 c4 0c             	add    esp,0xc
c00111c3:	c3                   	ret    

c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c4:	53                   	push   ebx
c00111c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111c9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d3:	89 c8                	mov    eax,ecx
c00111d5:	d1 e8                	shr    eax,1
c00111d7:	03 05 08 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca08
c00111dd:	83 e1 01             	and    ecx,0x1
c00111e0:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e2:	75 09                	jne    c00111ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e4:	83 e2 f0             	and    edx,0xfffffff0
c00111e7:	09 da                	or     edx,ebx
c00111e9:	88 10                	mov    BYTE PTR [eax],dl
c00111eb:	5b                   	pop    ebx
c00111ec:	c3                   	ret    
c00111ed:	c1 e3 04             	shl    ebx,0x4
c00111f0:	83 e2 0f             	and    edx,0xf
c00111f3:	09 da                	or     edx,ebx
c00111f5:	88 10                	mov    BYTE PTR [eax],dl
c00111f7:	5b                   	pop    ebx
c00111f8:	c3                   	ret    

c00111f9 <Virt::getPageState(unsigned long)>:
c00111f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fd:	8b 0d 08 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca08
c0011203:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011209:	89 d0                	mov    eax,edx
c001120b:	d1 e8                	shr    eax,1
c001120d:	83 e2 01             	and    edx,0x1
c0011210:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011213:	75 04                	jne    c0011219 <Virt::getPageState(unsigned long)+0x20>
c0011215:	83 e0 0f             	and    eax,0xf
c0011218:	c3                   	ret    
c0011219:	c0 e8 04             	shr    al,0x4
c001121c:	c3                   	ret    

c001121d <Virt::allocateKernelVirtualPages(int)>:
c001121d:	55                   	push   ebp
c001121e:	31 ed                	xor    ebp,ebp
c0011220:	57                   	push   edi
c0011221:	56                   	push   esi
c0011222:	53                   	push   ebx
c0011223:	31 db                	xor    ebx,ebx
c0011225:	83 ec 1c             	sub    esp,0x1c
c0011228:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122c:	8b 3d 04 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca04
c0011232:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011237:	57                   	push   edi
c0011238:	e8 bc ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c001123d:	5a                   	pop    edx
c001123e:	84 c0                	test   al,al
c0011240:	75 3a                	jne    c001127c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011242:	85 db                	test   ebx,ebx
c0011244:	75 02                	jne    c0011248 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011246:	89 fd                	mov    ebp,edi
c0011248:	43                   	inc    ebx
c0011249:	39 f3                	cmp    ebx,esi
c001124b:	74 5a                	je     c00112a7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124d:	47                   	inc    edi
c001124e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011254:	76 31                	jbe    c0011287 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011256:	c7 05 04 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ca04,0xc8000
c0011260:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011265:	75 28                	jne    c001128f <Virt::allocateKernelVirtualPages(int)+0x72>
c0011267:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011271:	57                   	push   edi
c0011272:	e8 82 ff ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011277:	5a                   	pop    edx
c0011278:	84 c0                	test   al,al
c001127a:	74 c6                	je     c0011242 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127c:	31 db                	xor    ebx,ebx
c001127e:	47                   	inc    edi
c001127f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011285:	77 cf                	ja     c0011256 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011287:	89 3d 04 ca 02 c0    	mov    DWORD PTR ds:0xc002ca04,edi
c001128d:	eb a8                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001128f:	83 ec 0c             	sub    esp,0xc
c0011292:	68 78 a3 02 c0       	push   0xc002a378
c0011297:	e8 2f 8c 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c001129c:	8b 3d 04 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca04
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	eb 90                	jmp    c0011237 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a7:	89 2d 04 ca 02 c0    	mov    DWORD PTR ds:0xc002ca04,ebp
c00112ad:	4b                   	dec    ebx
c00112ae:	74 5f                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b0:	85 f6                	test   esi,esi
c00112b2:	74 3d                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b4:	89 e8                	mov    eax,ebp
c00112b6:	31 db                	xor    ebx,ebx
c00112b8:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bb:	eb 14                	jmp    c00112d1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bd:	6a 01                	push   0x1
c00112bf:	43                   	inc    ebx
c00112c0:	50                   	push   eax
c00112c1:	e8 fe fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c6:	58                   	pop    eax
c00112c7:	39 f3                	cmp    ebx,esi
c00112c9:	5a                   	pop    edx
c00112ca:	74 25                	je     c00112f1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112cc:	a1 04 ca 02 c0       	mov    eax,ds:0xc002ca04
c00112d1:	8d 50 01             	lea    edx,[eax+0x1]
c00112d4:	85 db                	test   ebx,ebx
c00112d6:	89 15 04 ca 02 c0    	mov    DWORD PTR ds:0xc002ca04,edx
c00112dc:	74 20                	je     c00112fe <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112de:	39 df                	cmp    edi,ebx
c00112e0:	75 db                	jne    c00112bd <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e2:	6a 03                	push   0x3
c00112e4:	43                   	inc    ebx
c00112e5:	50                   	push   eax
c00112e6:	e8 d9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112eb:	59                   	pop    ecx
c00112ec:	39 f3                	cmp    ebx,esi
c00112ee:	58                   	pop    eax
c00112ef:	75 db                	jne    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f1:	83 c4 1c             	add    esp,0x1c
c00112f4:	89 e8                	mov    eax,ebp
c00112f6:	5b                   	pop    ebx
c00112f7:	c1 e0 0c             	shl    eax,0xc
c00112fa:	5e                   	pop    esi
c00112fb:	5f                   	pop    edi
c00112fc:	5d                   	pop    ebp
c00112fd:	c3                   	ret    
c00112fe:	6a 02                	push   0x2
c0011300:	bb 01 00 00 00       	mov    ebx,0x1
c0011305:	50                   	push   eax
c0011306:	e8 b9 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130b:	58                   	pop    eax
c001130c:	5a                   	pop    edx
c001130d:	eb bd                	jmp    c00112cc <Virt::allocateKernelVirtualPages(int)+0xaf>
c001130f:	6a 04                	push   0x4
c0011311:	8d 45 01             	lea    eax,[ebp+0x1]
c0011314:	55                   	push   ebp
c0011315:	a3 04 ca 02 c0       	mov    ds:0xc002ca04,eax
c001131a:	e8 a5 fe ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001131f:	59                   	pop    ecx
c0011320:	89 e8                	mov    eax,ebp
c0011322:	5b                   	pop    ebx
c0011323:	c1 e0 0c             	shl    eax,0xc
c0011326:	83 c4 1c             	add    esp,0x1c
c0011329:	5b                   	pop    ebx
c001132a:	5e                   	pop    esi
c001132b:	5f                   	pop    edi
c001132c:	5d                   	pop    ebp
c001132d:	c3                   	ret    

c001132e <Virt::freeSwapfilePage(unsigned long)>:
c001132e:	53                   	push   ebx
c001132f:	8b 15 cc db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbcc
c0011335:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011339:	b8 01 00 00 00       	mov    eax,0x1
c001133e:	89 cb                	mov    ebx,ecx
c0011340:	d3 e0                	shl    eax,cl
c0011342:	c1 eb 05             	shr    ebx,0x5
c0011345:	f7 d0                	not    eax
c0011347:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134a:	5b                   	pop    ebx
c001134b:	c3                   	ret    

c001134c <Virt::swapIDToSector(unsigned long)>:
c001134c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011350:	0f af 05 0c ca 02 c0 	imul   eax,DWORD PTR ds:0xc002ca0c
c0011357:	03 05 14 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca14
c001135d:	c3                   	ret    

c001135e <Virt::allocateSwapfilePage()>:
c001135e:	55                   	push   ebp
c001135f:	31 d2                	xor    edx,edx
c0011361:	57                   	push   edi
c0011362:	56                   	push   esi
c0011363:	53                   	push   ebx
c0011364:	83 ec 0c             	sub    esp,0xc
c0011367:	8b 0d 0c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca0c
c001136d:	a1 10 ca 02 c0       	mov    eax,ds:0xc002ca10
c0011372:	f7 f1                	div    ecx
c0011374:	39 0d 10 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca10,ecx
c001137a:	72 2d                	jb     c00113a9 <Virt::allocateSwapfilePage()+0x4b>
c001137c:	8b 35 cc db 02 c0    	mov    esi,DWORD PTR ds:0xc002dbcc
c0011382:	8b 16                	mov    edx,DWORD PTR [esi]
c0011384:	f6 c2 01             	test   dl,0x1
c0011387:	74 3c                	je     c00113c5 <Virt::allocateSwapfilePage()+0x67>
c0011389:	31 c9                	xor    ecx,ecx
c001138b:	bf 01 00 00 00       	mov    edi,0x1
c0011390:	eb 12                	jmp    c00113a4 <Virt::allocateSwapfilePage()+0x46>
c0011392:	89 fd                	mov    ebp,edi
c0011394:	89 ca                	mov    edx,ecx
c0011396:	d3 e5                	shl    ebp,cl
c0011398:	c1 ea 05             	shr    edx,0x5
c001139b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001139e:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a0:	85 ea                	test   edx,ebp
c00113a2:	74 2a                	je     c00113ce <Virt::allocateSwapfilePage()+0x70>
c00113a4:	41                   	inc    ecx
c00113a5:	39 c8                	cmp    eax,ecx
c00113a7:	77 e9                	ja     c0011392 <Virt::allocateSwapfilePage()+0x34>
c00113a9:	83 ec 0c             	sub    esp,0xc
c00113ac:	68 6c a5 02 c0       	push   0xc002a56c
c00113b1:	e8 15 8b 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	31 c9                	xor    ecx,ecx
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	89 c8                	mov    eax,ecx
c00113c0:	5b                   	pop    ebx
c00113c1:	5e                   	pop    esi
c00113c2:	5f                   	pop    edi
c00113c3:	5d                   	pop    ebp
c00113c4:	c3                   	ret    
c00113c5:	89 f3                	mov    ebx,esi
c00113c7:	bd 01 00 00 00       	mov    ebp,0x1
c00113cc:	31 c9                	xor    ecx,ecx
c00113ce:	09 ea                	or     edx,ebp
c00113d0:	89 c8                	mov    eax,ecx
c00113d2:	89 13                	mov    DWORD PTR [ebx],edx
c00113d4:	83 c4 0c             	add    esp,0xc
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <Virt::virtualMemorySetup()>:
c00113dc:	53                   	push   ebx
c00113dd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e2:	6a 0f                	push   0xf
c00113e4:	53                   	push   ebx
c00113e5:	43                   	inc    ebx
c00113e6:	e8 d9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113eb:	58                   	pop    eax
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	5a                   	pop    edx
c00113f3:	75 ed                	jne    c00113e2 <Virt::virtualMemorySetup()+0x6>
c00113f5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fa:	6a 00                	push   0x0
c00113fc:	53                   	push   ebx
c00113fd:	43                   	inc    ebx
c00113fe:	e8 c1 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011403:	59                   	pop    ecx
c0011404:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140a:	58                   	pop    eax
c001140b:	75 ed                	jne    c00113fa <Virt::virtualMemorySetup()+0x1e>
c001140d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011412:	6a 0f                	push   0xf
c0011414:	53                   	push   ebx
c0011415:	43                   	inc    ebx
c0011416:	e8 a9 fd ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141b:	58                   	pop    eax
c001141c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011422:	5a                   	pop    edx
c0011423:	75 ed                	jne    c0011412 <Virt::virtualMemorySetup()+0x36>
c0011425:	5b                   	pop    ebx
c0011426:	c3                   	ret    

c0011427 <Virt::setupPageSwapping(int)>:
c0011427:	57                   	push   edi
c0011428:	56                   	push   esi
c0011429:	53                   	push   ebx
c001142a:	83 ec 1c             	sub    esp,0x1c
c001142d:	68 14 01 00 00       	push   0x114
c0011432:	e8 62 e1 ff ff       	call   c000f599 <malloc>
c0011437:	83 c4 0c             	add    esp,0xc
c001143a:	89 c6                	mov    esi,eax
c001143c:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c0011442:	68 83 a5 02 c0       	push   0xc002a583
c0011447:	50                   	push   eax
c0011448:	e8 71 18 00 00       	call   c0012cbe <File::File(char const*, Process*)>
c001144d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011450:	e8 45 1a 00 00       	call   c0012e9a <File::unlink()>
c0011455:	58                   	pop    eax
c0011456:	5a                   	pop    edx
c0011457:	6a 12                	push   0x12
c0011459:	56                   	push   esi
c001145a:	e8 c3 18 00 00       	call   c0012d22 <File::open(FileOpenMode)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	85 c0                	test   eax,eax
c0011464:	0f 85 2f 01 00 00    	jne    c0011599 <Virt::setupPageSwapping(int)+0x172>
c001146a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001146e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011476:	c1 e3 08             	shl    ebx,0x8
c0011479:	83 ec 0c             	sub    esp,0xc
c001147c:	68 00 00 01 00       	push   0x10000
c0011481:	e8 13 e1 ff ff       	call   c000f599 <malloc>
c0011486:	83 c4 0c             	add    esp,0xc
c0011489:	89 c7                	mov    edi,eax
c001148b:	68 00 00 01 00       	push   0x10000
c0011490:	68 ee 00 00 00       	push   0xee
c0011495:	50                   	push   eax
c0011496:	e8 b5 f2 fe ff       	call   c0000750 <memset>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	85 db                	test   ebx,ebx
c00114a0:	79 03                	jns    c00114a5 <Virt::setupPageSwapping(int)+0x7e>
c00114a2:	83 c3 0f             	add    ebx,0xf
c00114a5:	c1 fb 04             	sar    ebx,0x4
c00114a8:	4b                   	dec    ebx
c00114a9:	83 fb ff             	cmp    ebx,0xffffffff
c00114ac:	74 41                	je     c00114ef <Virt::setupPageSwapping(int)+0xc8>
c00114ae:	83 ec 0c             	sub    esp,0xc
c00114b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114b7:	52                   	push   edx
c00114b8:	57                   	push   edi
c00114b9:	6a 00                	push   0x0
c00114bb:	68 00 00 01 00       	push   0x10000
c00114c0:	56                   	push   esi
c00114c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114c4:	83 c4 20             	add    esp,0x20
c00114c7:	85 c0                	test   eax,eax
c00114c9:	0f 85 b5 00 00 00    	jne    c0011584 <Virt::setupPageSwapping(int)+0x15d>
c00114cf:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114d7:	74 cf                	je     c00114a8 <Virt::setupPageSwapping(int)+0x81>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	4b                   	dec    ebx
c00114dd:	68 b5 a5 02 c0       	push   0xc002a5b5
c00114e2:	e8 e4 89 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00114e7:	83 c4 10             	add    esp,0x10
c00114ea:	83 fb ff             	cmp    ebx,0xffffffff
c00114ed:	75 bf                	jne    c00114ae <Virt::setupPageSwapping(int)+0x87>
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	56                   	push   esi
c00114f3:	e8 88 18 00 00       	call   c0012d80 <File::close()>
c00114f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114fb:	e8 b9 e0 ff ff       	call   c000f5b9 <rfree>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	85 f6                	test   esi,esi
c0011505:	74 0c                	je     c0011513 <Virt::setupPageSwapping(int)+0xec>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	8b 06                	mov    eax,DWORD PTR [esi]
c001150c:	56                   	push   esi
c001150d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	83 ec 08             	sub    esp,0x8
c0011516:	a1 68 e0 02 c0       	mov    eax,ds:0xc002e068
c001151b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011521:	8b 10                	mov    edx,DWORD PTR [eax]
c0011523:	68 83 a5 02 c0       	push   0xc002a583
c0011528:	50                   	push   eax
c0011529:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001152c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011530:	c6 05 18 ca 02 c0 43 	mov    BYTE PTR ds:0xc002ca18,0x43
c0011537:	c1 e2 0b             	shl    edx,0xb
c001153a:	a3 14 ca 02 c0       	mov    ds:0xc002ca14,eax
c001153f:	89 15 10 ca 02 c0    	mov    DWORD PTR ds:0xc002ca10,edx
c0011545:	c7 05 0c ca 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ca0c,0x8
c001154f:	c1 ea 08             	shr    edx,0x8
c0011552:	89 14 24             	mov    DWORD PTR [esp],edx
c0011555:	e8 3f e0 ff ff       	call   c000f599 <malloc>
c001155a:	83 c4 0c             	add    esp,0xc
c001155d:	89 c1                	mov    ecx,eax
c001155f:	a3 cc db 02 c0       	mov    ds:0xc002dbcc,eax
c0011564:	31 d2                	xor    edx,edx
c0011566:	a1 10 ca 02 c0       	mov    eax,ds:0xc002ca10
c001156b:	f7 35 0c ca 02 c0    	div    DWORD PTR ds:0xc002ca0c
c0011571:	c1 e8 05             	shr    eax,0x5
c0011574:	50                   	push   eax
c0011575:	6a 00                	push   0x0
c0011577:	51                   	push   ecx
c0011578:	e8 d3 f1 fe ff       	call   c0000750 <memset>
c001157d:	83 c4 20             	add    esp,0x20
c0011580:	5b                   	pop    ebx
c0011581:	5e                   	pop    esi
c0011582:	5f                   	pop    edi
c0011583:	c3                   	ret    
c0011584:	83 ec 0c             	sub    esp,0xc
c0011587:	68 b5 a5 02 c0       	push   0xc002a5b5
c001158c:	e8 3a 89 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011591:	83 c4 10             	add    esp,0x10
c0011594:	e9 36 ff ff ff       	jmp    c00114cf <Virt::setupPageSwapping(int)+0xa8>
c0011599:	83 ec 0c             	sub    esp,0xc
c001159c:	68 9a a5 02 c0       	push   0xc002a59a
c00115a1:	e8 25 89 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	e9 bc fe ff ff       	jmp    c001146a <Virt::setupPageSwapping(int)+0x43>

c00115ae <VAS::VAS(VAS*)>:
c00115ae:	83 ec 0c             	sub    esp,0xc
c00115b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	68 98 a3 02 c0       	push   0xc002a398
c00115cf:	e8 f7 88 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00115d4:	83 c4 10             	add    esp,0x10
c00115d7:	90                   	nop
c00115d8:	83 c4 0c             	add    esp,0xc
c00115db:	c3                   	ret    

c00115dc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115e0:	89 c2                	mov    edx,eax
c00115e2:	c1 e8 0a             	shr    eax,0xa
c00115e5:	c1 ea 16             	shr    edx,0x16
c00115e8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115ed:	19 c9                	sbb    ecx,ecx
c00115ef:	c1 e2 0c             	shl    edx,0xc
c00115f2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115f8:	25 fc 0f 00 00       	and    eax,0xffc
c00115fd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011604:	01 d0                	add    eax,edx
c0011606:	c3                   	ret    
c0011607:	90                   	nop

c0011608 <VAS::getPageTableEntry(unsigned long)>:
c0011608:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001160c:	89 ca                	mov    edx,ecx
c001160e:	c1 e9 0a             	shr    ecx,0xa
c0011611:	c1 ea 16             	shr    edx,0x16
c0011614:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001161a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011620:	c1 e0 0c             	shl    eax,0xc
c0011623:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011626:	c3                   	ret    

c0011627 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011627:	57                   	push   edi
c0011628:	56                   	push   esi
c0011629:	be 01 00 00 00       	mov    esi,0x1
c001162e:	53                   	push   ebx
c001162f:	83 ec 10             	sub    esp,0x10
c0011632:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011636:	c1 eb 0c             	shr    ebx,0xc
c0011639:	eb 3f                	jmp    c001167a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001163b:	83 ec 08             	sub    esp,0x8
c001163e:	57                   	push   edi
c001163f:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c0011645:	e8 be ff ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	8b 00                	mov    eax,DWORD PTR [eax]
c001164f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011653:	f6 c4 04             	test   ah,0x4
c0011656:	75 5f                	jne    c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011658:	80 fa 04             	cmp    dl,0x4
c001165b:	74 78                	je     c00116d5 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001165d:	80 fa 02             	cmp    dl,0x2
c0011660:	0f 84 88 00 00 00    	je     c00116ee <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011666:	80 fa 03             	cmp    dl,0x3
c0011669:	0f 84 ad 00 00 00    	je     c001171c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001166f:	fe ca                	dec    dl
c0011671:	0f 84 92 00 00 00    	je     c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011677:	43                   	inc    ebx
c0011678:	31 f6                	xor    esi,esi
c001167a:	53                   	push   ebx
c001167b:	89 df                	mov    edi,ebx
c001167d:	e8 77 fb ff ff       	call   c00111f9 <Virt::getPageState(unsigned long)>
c0011682:	c1 e7 0c             	shl    edi,0xc
c0011685:	59                   	pop    ecx
c0011686:	84 c0                	test   al,al
c0011688:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001168c:	75 ad                	jne    c001163b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001168e:	83 ec 0c             	sub    esp,0xc
c0011691:	68 bb a5 02 c0       	push   0xc002a5bb
c0011696:	e8 30 88 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c001169b:	58                   	pop    eax
c001169c:	5a                   	pop    edx
c001169d:	57                   	push   edi
c001169e:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c00116a4:	e8 5f ff ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00116ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116b2:	f6 c4 04             	test   ah,0x4
c00116b5:	74 c0                	je     c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116b7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	50                   	push   eax
c00116c4:	e8 5b e2 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116d0:	80 fa 04             	cmp    dl,0x4
c00116d3:	75 88                	jne    c001165d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116d5:	89 f0                	mov    eax,esi
c00116d7:	84 c0                	test   al,al
c00116d9:	75 47                	jne    c0011722 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116db:	c7 44 24 20 bc a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a3bc
c00116e3:	83 c4 10             	add    esp,0x10
c00116e6:	5b                   	pop    ebx
c00116e7:	5e                   	pop    esi
c00116e8:	5f                   	pop    edi
c00116e9:	e9 dd 87 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c00116ee:	89 f0                	mov    eax,esi
c00116f0:	84 c0                	test   al,al
c00116f2:	75 15                	jne    c0011709 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116f4:	83 ec 0c             	sub    esp,0xc
c00116f7:	68 d7 a5 02 c0       	push   0xc002a5d7
c00116fc:	e8 ca 87 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	e9 6e ff ff ff       	jmp    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011709:	83 ec 08             	sub    esp,0x8
c001170c:	6a 00                	push   0x0
c001170e:	53                   	push   ebx
c001170f:	e8 b0 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	e9 5b ff ff ff       	jmp    c0011677 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001171c:	89 f0                	mov    eax,esi
c001171e:	84 c0                	test   al,al
c0011720:	75 15                	jne    c0011737 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011722:	83 ec 08             	sub    esp,0x8
c0011725:	6a 00                	push   0x0
c0011727:	53                   	push   ebx
c0011728:	e8 97 fa ff ff       	call   c00111c4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	83 c4 10             	add    esp,0x10
c0011733:	5b                   	pop    ebx
c0011734:	5e                   	pop    esi
c0011735:	5f                   	pop    edi
c0011736:	c3                   	ret    
c0011737:	c7 44 24 20 f3 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5f3
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	5b                   	pop    ebx
c0011743:	5e                   	pop    esi
c0011744:	5f                   	pop    edi
c0011745:	e9 81 87 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>

c001174a <VAS::freeAllocatedPages(unsigned long)>:
c001174a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001174e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011752:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011756:	74 09                	je     c0011761 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011758:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001175c:	e9 c6 fe ff ff       	jmp    c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011761:	c7 44 24 04 e0 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a3e0
c0011769:	e9 f1 0f 00 00       	jmp    c001275f <Dbg::kprintf(char const*, ...)>

c001176e <VAS::virtualToPhysical(unsigned long)>:
c001176e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011772:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011776:	e8 8d fe ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001177b:	5a                   	pop    edx
c001177c:	8b 00                	mov    eax,DWORD PTR [eax]
c001177e:	59                   	pop    ecx
c001177f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011784:	c3                   	ret    
c0011785:	90                   	nop

c0011786 <VAS::VAS()>:
c0011786:	83 ec 1c             	sub    esp,0x1c
c0011789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001178d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011798:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001179f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117a3:	a3 d0 db 02 c0       	mov    ds:0xc002dbd0,eax
c00117a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ac:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00117b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117b4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00117b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117bb:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00117c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117cb:	50                   	push   eax
c00117cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117d0:	e8 33 fe ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00117d5:	83 c4 08             	add    esp,0x8
c00117d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117e5:	83 ec 08             	sub    esp,0x8
c00117e8:	50                   	push   eax
c00117e9:	68 04 a4 02 c0       	push   0xc002a404
c00117ee:	e8 6c 0f 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fc:	80 e4 f7             	and    ah,0xf7
c00117ff:	89 c2                	mov    edx,eax
c0011801:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011805:	89 10                	mov    DWORD PTR [eax],edx
c0011807:	90                   	nop
c0011808:	83 c4 1c             	add    esp,0x1c
c001180b:	c3                   	ret    

c001180c <VAS::reflagRange(unsigned long, int, int, int)>:
c001180c:	55                   	push   ebp
c001180d:	57                   	push   edi
c001180e:	56                   	push   esi
c001180f:	53                   	push   ebx
c0011810:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011814:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011818:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001181c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011820:	85 db                	test   ebx,ebx
c0011822:	7e 22                	jle    c0011846 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011824:	c1 e3 0c             	shl    ebx,0xc
c0011827:	01 f3                	add    ebx,esi
c0011829:	56                   	push   esi
c001182a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011830:	55                   	push   ebp
c0011831:	e8 d2 fd ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0011836:	5a                   	pop    edx
c0011837:	59                   	pop    ecx
c0011838:	8b 08                	mov    ecx,DWORD PTR [eax]
c001183a:	21 f9                	and    ecx,edi
c001183c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011840:	39 f3                	cmp    ebx,esi
c0011842:	89 08                	mov    DWORD PTR [eax],ecx
c0011844:	75 e3                	jne    c0011829 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011846:	5b                   	pop    ebx
c0011847:	5e                   	pop    esi
c0011848:	5f                   	pop    edi
c0011849:	5d                   	pop    ebp
c001184a:	c3                   	ret    
c001184b:	90                   	nop

c001184c <VAS::setToWriteCombining(unsigned long, int)>:
c001184c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011857:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001185e:	75 01                	jne    c0011861 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011860:	c3                   	ret    
c0011861:	68 80 00 00 00       	push   0x80
c0011866:	6a ff                	push   0xffffffff
c0011868:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001186c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011870:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011874:	e8 93 ff ff ff       	call   c001180c <VAS::reflagRange(unsigned long, int, int, int)>
c0011879:	83 c4 14             	add    esp,0x14
c001187c:	c3                   	ret    
c001187d:	90                   	nop

c001187e <VAS::mapOtherVASIn(bool, VAS*)>:
c001187e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011887:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001188a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011891:	19 c0                	sbb    eax,eax
c0011893:	83 ca 03             	or     edx,0x3
c0011896:	83 e0 fc             	and    eax,0xfffffffc
c0011899:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118a0:	0f 20 d8             	mov    eax,cr3
c00118a3:	0f 22 d8             	mov    cr3,eax
c00118a6:	c3                   	ret    
c00118a7:	90                   	nop

c00118a8 <VAS::~VAS()>:
c00118a8:	83 ec 2c             	sub    esp,0x2c
c00118ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00118b3:	fa                   	cli    
c00118b4:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00118b9:	40                   	inc    eax
c00118ba:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00118bf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118c9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118d3:	6a 01                	push   0x1
c00118d5:	50                   	push   eax
c00118d6:	e8 a3 ff ff ff       	call   c001187e <VAS::mapOtherVASIn(bool, VAS*)>
c00118db:	83 c4 0c             	add    esp,0xc
c00118de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00118e6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00118ee:	0f 8f d4 00 00 00    	jg     c00119c8 <VAS::~VAS()+0x120>
c00118f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00118ff:	c1 e2 02             	shl    edx,0x2
c0011902:	01 d0                	add    eax,edx
c0011904:	8b 00                	mov    eax,DWORD PTR [eax]
c0011906:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190e:	83 e0 01             	and    eax,0x1
c0011911:	0f 84 a8 00 00 00    	je     c00119bf <VAS::~VAS()+0x117>
c0011917:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001191f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011927:	7f 72                	jg     c001199b <VAS::~VAS()+0xf3>
c0011929:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001192d:	c1 e0 0a             	shl    eax,0xa
c0011930:	89 c2                	mov    edx,eax
c0011932:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011936:	01 d0                	add    eax,edx
c0011938:	c1 e0 0c             	shl    eax,0xc
c001193b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001193f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011944:	8b 00                	mov    eax,DWORD PTR [eax]
c0011946:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011949:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001194f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011953:	6a 01                	push   0x1
c0011955:	50                   	push   eax
c0011956:	e8 81 fc ff ff       	call   c00115dc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001195b:	83 c4 0c             	add    esp,0xc
c001195e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011966:	8b 00                	mov    eax,DWORD PTR [eax]
c0011968:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001196c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011970:	25 01 04 00 00       	and    eax,0x401
c0011975:	3d 01 04 00 00       	cmp    eax,0x401
c001197a:	75 19                	jne    c0011995 <VAS::~VAS()+0xed>
c001197c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011980:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011985:	83 ec 0c             	sub    esp,0xc
c0011988:	50                   	push   eax
c0011989:	e8 96 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011995:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011999:	eb 84                	jmp    c001191f <VAS::~VAS()+0x77>
c001199b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199f:	25 00 04 00 00       	and    eax,0x400
c00119a4:	74 19                	je     c00119bf <VAS::~VAS()+0x117>
c00119a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119af:	83 ec 0c             	sub    esp,0xc
c00119b2:	50                   	push   eax
c00119b3:	e8 6c df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119b8:	83 c4 10             	add    esp,0x10
c00119bb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119bf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00119c3:	e9 1e ff ff ff       	jmp    c00118e6 <VAS::~VAS()+0x3e>
c00119c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	83 ec 0c             	sub    esp,0xc
c00119d2:	50                   	push   eax
c00119d3:	e8 4f fc ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00119e2:	83 ec 0c             	sub    esp,0xc
c00119e5:	50                   	push   eax
c00119e6:	e8 39 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119f6:	c1 e0 02             	shl    eax,0x2
c00119f9:	83 ec 08             	sub    esp,0x8
c00119fc:	50                   	push   eax
c00119fd:	68 40 a4 02 c0       	push   0xc002a440
c0011a02:	e8 58 0d 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0011a07:	83 c4 10             	add    esp,0x10
c0011a0a:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0011a0f:	48                   	dec    eax
c0011a10:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0011a15:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0011a1a:	85 c0                	test   eax,eax
c0011a1c:	75 01                	jne    c0011a1f <VAS::~VAS()+0x177>
c0011a1e:	fb                   	sti    
c0011a1f:	90                   	nop
c0011a20:	83 c4 2c             	add    esp,0x2c
c0011a23:	c3                   	ret    

c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a24:	55                   	push   ebp
c0011a25:	57                   	push   edi
c0011a26:	56                   	push   esi
c0011a27:	53                   	push   ebx
c0011a28:	83 ec 1c             	sub    esp,0x1c
c0011a2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a33:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a39:	77 08                	ja     c0011a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a3b:	0f 20 d8             	mov    eax,cr3
c0011a3e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a41:	75 47                	jne    c0011a8a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a47:	09 d8                	or     eax,ebx
c0011a49:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a4e:	75 57                	jne    c0011aa7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a50:	89 de                	mov    esi,ebx
c0011a52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a55:	c1 ee 16             	shr    esi,0x16
c0011a58:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011a5f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a63:	74 54                	je     c0011ab9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a6f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a73:	c1 e6 0c             	shl    esi,0xc
c0011a76:	c1 eb 0a             	shr    ebx,0xa
c0011a79:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a7f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a82:	83 c4 1c             	add    esp,0x1c
c0011a85:	5b                   	pop    ebx
c0011a86:	5e                   	pop    esi
c0011a87:	5f                   	pop    edi
c0011a88:	5d                   	pop    ebp
c0011a89:	c3                   	ret    
c0011a8a:	83 ec 0c             	sub    esp,0xc
c0011a8d:	68 60 a4 02 c0       	push   0xc002a460
c0011a92:	e8 c8 0c 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0011a97:	83 c4 10             	add    esp,0x10
c0011a9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a9e:	09 d8                	or     eax,ebx
c0011aa0:	a9 ff 0f 00 00       	test   eax,0xfff
c0011aa5:	74 a9                	je     c0011a50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011aa7:	83 ec 0c             	sub    esp,0xc
c0011aaa:	68 c8 a4 02 c0       	push   0xc002a4c8
c0011aaf:	e8 17 84 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011ab4:	83 c4 10             	add    esp,0x10
c0011ab7:	eb 97                	jmp    c0011a50 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ab9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011abd:	e8 d3 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011ac2:	83 ec 0c             	sub    esp,0xc
c0011ac5:	89 c5                	mov    ebp,eax
c0011ac7:	8b 0d d0 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dbd0
c0011acd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ad1:	6a 01                	push   0x1
c0011ad3:	e8 45 f7 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011ad8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011adf:	6a 01                	push   0x1
c0011ae1:	50                   	push   eax
c0011ae2:	55                   	push   ebp
c0011ae3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ae9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011aed:	51                   	push   ecx
c0011aee:	e8 27 02 00 00       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011af3:	83 c4 1c             	add    esp,0x1c
c0011af6:	68 00 10 00 00       	push   0x1000
c0011afb:	6a 00                	push   0x0
c0011afd:	50                   	push   eax
c0011afe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b02:	e8 49 ec fe ff       	call   c0000750 <memset>
c0011b07:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b0b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b0e:	e8 14 fb ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b17:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b20:	e9 40 ff ff ff       	jmp    c0011a65 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b25:	90                   	nop

c0011b26 <VAS::allocatePages(int, int)>:
c0011b26:	55                   	push   ebp
c0011b27:	57                   	push   edi
c0011b28:	56                   	push   esi
c0011b29:	53                   	push   ebx
c0011b2a:	83 ec 1c             	sub    esp,0x1c
c0011b2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b31:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011b36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b3c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b42:	83 e0 01             	and    eax,0x1
c0011b45:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b49:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b4d:	0f 85 cc 00 00 00    	jne    c0011c1f <VAS::allocatePages(int, int)+0xf9>
c0011b53:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b5a:	85 c0                	test   eax,eax
c0011b5c:	0f 84 a1 00 00 00    	je     c0011c03 <VAS::allocatePages(int, int)+0xdd>
c0011b62:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b6a:	c1 e6 0c             	shl    esi,0xc
c0011b6d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b71:	85 c0                	test   eax,eax
c0011b73:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b76:	7e 33                	jle    c0011bab <VAS::allocatePages(int, int)+0x85>
c0011b78:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b80:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b86:	e8 0a de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b8b:	55                   	push   ebp
c0011b8c:	53                   	push   ebx
c0011b8d:	50                   	push   eax
c0011b8e:	57                   	push   edi
c0011b8f:	e8 90 fe ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b9c:	74 03                	je     c0011ba1 <VAS::allocatePages(int, int)+0x7b>
c0011b9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ba7:	39 de                	cmp    esi,ebx
c0011ba9:	75 db                	jne    c0011b86 <VAS::allocatePages(int, int)+0x60>
c0011bab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bb0:	75 12                	jne    c0011bc4 <VAS::allocatePages(int, int)+0x9e>
c0011bb2:	0f 20 d8             	mov    eax,cr3
c0011bb5:	0f 22 d8             	mov    cr3,eax
c0011bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bbc:	83 c4 1c             	add    esp,0x1c
c0011bbf:	5b                   	pop    ebx
c0011bc0:	5e                   	pop    esi
c0011bc1:	5f                   	pop    edi
c0011bc2:	5d                   	pop    ebp
c0011bc3:	c3                   	ret    
c0011bc4:	c1 ee 0a             	shr    esi,0xa
c0011bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bcb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011bd1:	c1 eb 0a             	shr    ebx,0xa
c0011bd4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011bda:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011be0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be6:	39 c3                	cmp    ebx,eax
c0011be8:	77 ce                	ja     c0011bb8 <VAS::allocatePages(int, int)+0x92>
c0011bea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf3:	39 d8                	cmp    eax,ebx
c0011bf5:	73 f3                	jae    c0011bea <VAS::allocatePages(int, int)+0xc4>
c0011bf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bfb:	83 c4 1c             	add    esp,0x1c
c0011bfe:	5b                   	pop    ebx
c0011bff:	5e                   	pop    esi
c0011c00:	5f                   	pop    edi
c0011c01:	5d                   	pop    ebp
c0011c02:	c3                   	ret    
c0011c03:	83 ec 0c             	sub    esp,0xc
c0011c06:	68 ec a4 02 c0       	push   0xc002a4ec
c0011c0b:	e8 bb 82 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011c10:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c17:	83 c4 10             	add    esp,0x10
c0011c1a:	e9 43 ff ff ff       	jmp    c0011b62 <VAS::allocatePages(int, int)+0x3c>
c0011c1f:	83 ec 0c             	sub    esp,0xc
c0011c22:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c26:	e8 f2 f5 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c37:	0f 87 9b 00 00 00    	ja     c0011cd8 <VAS::allocatePages(int, int)+0x1b2>
c0011c3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c41:	85 d2                	test   edx,edx
c0011c43:	7e 3c                	jle    c0011c81 <VAS::allocatePages(int, int)+0x15b>
c0011c45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c49:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c51:	c1 e5 0c             	shl    ebp,0xc
c0011c54:	81 ce 00 04 00 00    	or     esi,0x400
c0011c5a:	01 dd                	add    ebp,ebx
c0011c5c:	e8 34 dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011c61:	56                   	push   esi
c0011c62:	53                   	push   ebx
c0011c63:	50                   	push   eax
c0011c64:	57                   	push   edi
c0011c65:	e8 ba fd ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c72:	74 03                	je     c0011c77 <VAS::allocatePages(int, int)+0x151>
c0011c74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7d:	39 dd                	cmp    ebp,ebx
c0011c7f:	75 db                	jne    c0011c5c <VAS::allocatePages(int, int)+0x136>
c0011c81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c86:	0f 84 26 ff ff ff    	je     c0011bb2 <VAS::allocatePages(int, int)+0x8c>
c0011c8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c94:	89 d3                	mov    ebx,edx
c0011c96:	c1 e0 0c             	shl    eax,0xc
c0011c99:	c1 eb 0a             	shr    ebx,0xa
c0011c9c:	01 d0                	add    eax,edx
c0011c9e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ca4:	c1 e8 0a             	shr    eax,0xa
c0011ca7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cb2:	2d 00 00 40 00       	sub    eax,0x400000
c0011cb7:	39 c3                	cmp    ebx,eax
c0011cb9:	0f 87 f9 fe ff ff    	ja     c0011bb8 <VAS::allocatePages(int, int)+0x92>
c0011cbf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cc8:	39 d8                	cmp    eax,ebx
c0011cca:	73 f3                	jae    c0011cbf <VAS::allocatePages(int, int)+0x199>
c0011ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd0:	83 c4 1c             	add    esp,0x1c
c0011cd3:	5b                   	pop    ebx
c0011cd4:	5e                   	pop    esi
c0011cd5:	5f                   	pop    edi
c0011cd6:	5d                   	pop    ebp
c0011cd7:	c3                   	ret    
c0011cd8:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011cdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ce3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011cea:	0f 84 4d ff ff ff    	je     c0011c3d <VAS::allocatePages(int, int)+0x117>
c0011cf0:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011cf8:	e9 40 ff ff ff       	jmp    c0011c3d <VAS::allocatePages(int, int)+0x117>
c0011cfd:	90                   	nop

c0011cfe <VAS::setCPUSpecific(unsigned long)>:
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	6a 05                	push   0x5
c0011d03:	68 00 00 40 c2       	push   0xc2400000
c0011d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d10:	e8 0f fd ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d15:	83 c4 1c             	add    esp,0x1c
c0011d18:	c3                   	ret    
c0011d19:	90                   	nop

c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d1a:	55                   	push   ebp
c0011d1b:	57                   	push   edi
c0011d1c:	56                   	push   esi
c0011d1d:	53                   	push   ebx
c0011d1e:	83 ec 1c             	sub    esp,0x1c
c0011d21:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011d26:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d30:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d34:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d3a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d3e:	83 e0 01             	and    eax,0x1
c0011d41:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d49:	85 c0                	test   eax,eax
c0011d4b:	7e 39                	jle    c0011d86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d51:	89 f3                	mov    ebx,esi
c0011d53:	c1 e0 0c             	shl    eax,0xc
c0011d56:	01 f0                	add    eax,esi
c0011d58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d5c:	55                   	push   ebp
c0011d5d:	53                   	push   ebx
c0011d5e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d62:	29 f0                	sub    eax,esi
c0011d64:	01 d8                	add    eax,ebx
c0011d66:	50                   	push   eax
c0011d67:	57                   	push   edi
c0011d68:	e8 b7 fc ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d75:	74 03                	je     c0011d7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d77:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d7a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d80:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d84:	75 d6                	jne    c0011d5c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d86:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d8b:	75 10                	jne    c0011d9d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d8d:	0f 20 d8             	mov    eax,cr3
c0011d90:	0f 22 d8             	mov    cr3,eax
c0011d93:	83 c4 1c             	add    esp,0x1c
c0011d96:	89 f0                	mov    eax,esi
c0011d98:	5b                   	pop    ebx
c0011d99:	5e                   	pop    esi
c0011d9a:	5f                   	pop    edi
c0011d9b:	5d                   	pop    ebp
c0011d9c:	c3                   	ret    
c0011d9d:	89 f3                	mov    ebx,esi
c0011d9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011da3:	c1 eb 0a             	shr    ebx,0xa
c0011da6:	c1 e0 0c             	shl    eax,0xc
c0011da9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011daf:	01 f0                	add    eax,esi
c0011db1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011db7:	c1 e8 0a             	shr    eax,0xa
c0011dba:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dbf:	2d 00 00 40 00       	sub    eax,0x400000
c0011dc4:	39 c3                	cmp    ebx,eax
c0011dc6:	77 cb                	ja     c0011d93 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011dc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dd1:	39 d8                	cmp    eax,ebx
c0011dd3:	73 f3                	jae    c0011dc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011dd5:	83 c4 1c             	add    esp,0x1c
c0011dd8:	89 f0                	mov    eax,esi
c0011dda:	5b                   	pop    ebx
c0011ddb:	5e                   	pop    esi
c0011ddc:	5f                   	pop    edi
c0011ddd:	5d                   	pop    ebp
c0011dde:	c3                   	ret    
c0011ddf:	90                   	nop

c0011de0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011de0:	55                   	push   ebp
c0011de1:	57                   	push   edi
c0011de2:	56                   	push   esi
c0011de3:	53                   	push   ebx
c0011de4:	83 ec 1c             	sub    esp,0x1c
c0011de7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011deb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011def:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011df3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011df7:	a9 ff 0f 00 00       	test   eax,0xfff
c0011dfc:	75 4a                	jne    c0011e48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011dfe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e02:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e05:	c1 eb 16             	shr    ebx,0x16
c0011e08:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e0f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e13:	74 4d                	je     c0011e62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e19:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e1d:	c1 e8 0a             	shr    eax,0xa
c0011e20:	80 fa 01             	cmp    dl,0x1
c0011e23:	19 d2                	sbb    edx,edx
c0011e25:	c1 e3 0c             	shl    ebx,0xc
c0011e28:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e2c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e32:	25 fc 0f 00 00       	and    eax,0xffc
c0011e37:	01 d8                	add    eax,ebx
c0011e39:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e40:	83 c4 1c             	add    esp,0x1c
c0011e43:	5b                   	pop    ebx
c0011e44:	5e                   	pop    esi
c0011e45:	5f                   	pop    edi
c0011e46:	5d                   	pop    ebp
c0011e47:	c3                   	ret    
c0011e48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e4c:	83 ec 0c             	sub    esp,0xc
c0011e4f:	68 18 a5 02 c0       	push   0xc002a518
c0011e54:	e8 72 80 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0011e59:	83 c4 10             	add    esp,0x10
c0011e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e60:	eb 9c                	jmp    c0011dfe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e66:	e8 2a db ff ff       	call   c000f995 <Phys::allocatePage()>
c0011e6b:	83 ec 0c             	sub    esp,0xc
c0011e6e:	89 c5                	mov    ebp,eax
c0011e70:	8b 0d d0 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002dbd0
c0011e76:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e7a:	6a 01                	push   0x1
c0011e7c:	e8 9c f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011e81:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e88:	6a 01                	push   0x1
c0011e8a:	50                   	push   eax
c0011e8b:	55                   	push   ebp
c0011e8c:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e92:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e96:	51                   	push   ecx
c0011e97:	e8 7e fe ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e9c:	83 c4 1c             	add    esp,0x1c
c0011e9f:	68 00 10 00 00       	push   0x1000
c0011ea4:	6a 00                	push   0x0
c0011ea6:	50                   	push   eax
c0011ea7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011eab:	e8 a0 e8 fe ff       	call   c0000750 <memset>
c0011eb0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011eb4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011eb7:	e8 6b f7 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ebc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011ebf:	83 c4 10             	add    esp,0x10
c0011ec2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011ec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ec9:	e9 47 ff ff ff       	jmp    c0011e15 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011ece <VAS::VAS(bool)>:
c0011ece:	53                   	push   ebx
c0011ecf:	83 ec 28             	sub    esp,0x28
c0011ed2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011eda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ede:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011ef8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011efb:	e8 95 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f00:	89 c2                	mov    edx,eax
c0011f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f09:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	6a 01                	push   0x1
c0011f14:	e8 04 f3 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	89 c2                	mov    edx,eax
c0011f1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f22:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f25:	83 ec 0c             	sub    esp,0xc
c0011f28:	6a 03                	push   0x3
c0011f2a:	6a 01                	push   0x1
c0011f2c:	52                   	push   edx
c0011f2d:	50                   	push   eax
c0011f2e:	53                   	push   ebx
c0011f2f:	e8 e6 fd ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f34:	83 c4 20             	add    esp,0x20
c0011f37:	89 c2                	mov    edx,eax
c0011f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f40:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f48:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f50:	7f 1c                	jg     c0011f6e <VAS::VAS(bool)+0xa0>
c0011f52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f5d:	c1 e2 02             	shl    edx,0x2
c0011f60:	01 d0                	add    eax,edx
c0011f62:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f68:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f6c:	eb da                	jmp    c0011f48 <VAS::VAS(bool)+0x7a>
c0011f6e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f76:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f7e:	7f 7a                	jg     c0011ffa <VAS::VAS(bool)+0x12c>
c0011f80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f84:	2d 00 02 00 00       	sub    eax,0x200
c0011f89:	c1 e0 0c             	shl    eax,0xc
c0011f8c:	83 c8 03             	or     eax,0x3
c0011f8f:	89 c2                	mov    edx,eax
c0011f91:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011f96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fa2:	83 e0 10             	and    eax,0x10
c0011fa5:	84 c0                	test   al,al
c0011fa7:	74 07                	je     c0011fb0 <VAS::VAS(bool)+0xe2>
c0011fa9:	b8 00 01 00 00       	mov    eax,0x100
c0011fae:	eb 05                	jmp    c0011fb5 <VAS::VAS(bool)+0xe7>
c0011fb0:	b8 00 00 00 00       	mov    eax,0x0
c0011fb5:	09 d0                	or     eax,edx
c0011fb7:	89 c1                	mov    ecx,eax
c0011fb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fc4:	c1 e2 02             	shl    edx,0x2
c0011fc7:	01 d0                	add    eax,edx
c0011fc9:	89 ca                	mov    edx,ecx
c0011fcb:	89 10                	mov    DWORD PTR [eax],edx
c0011fcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd1:	2d 40 03 00 00       	sub    eax,0x340
c0011fd6:	83 f8 7f             	cmp    eax,0x7f
c0011fd9:	77 16                	ja     c0011ff1 <VAS::VAS(bool)+0x123>
c0011fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fe2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011fe6:	c1 e2 02             	shl    edx,0x2
c0011fe9:	01 d0                	add    eax,edx
c0011feb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ff1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011ff5:	e9 7c ff ff ff       	jmp    c0011f76 <VAS::VAS(bool)+0xa8>
c0011ffa:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0011fff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012005:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001200b:	83 e0 10             	and    eax,0x10
c001200e:	84 c0                	test   al,al
c0012010:	74 07                	je     c0012019 <VAS::VAS(bool)+0x14b>
c0012012:	b8 03 41 00 00       	mov    eax,0x4103
c0012017:	eb 05                	jmp    c001201e <VAS::VAS(bool)+0x150>
c0012019:	b8 03 40 00 00       	mov    eax,0x4003
c001201e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012022:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012025:	81 c2 20 0c 00 00    	add    edx,0xc20
c001202b:	89 02                	mov    DWORD PTR [edx],eax
c001202d:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0012032:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012038:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001203e:	83 ec 08             	sub    esp,0x8
c0012041:	50                   	push   eax
c0012042:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012046:	e8 b3 fc ff ff       	call   c0011cfe <VAS::setCPUSpecific(unsigned long)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012052:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012055:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001205a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012060:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012066:	83 e0 10             	and    eax,0x10
c0012069:	84 c0                	test   al,al
c001206b:	74 07                	je     c0012074 <VAS::VAS(bool)+0x1a6>
c001206d:	b8 00 01 00 00       	mov    eax,0x100
c0012072:	eb 05                	jmp    c0012079 <VAS::VAS(bool)+0x1ab>
c0012074:	b8 00 00 00 00       	mov    eax,0x0
c0012079:	09 c2                	or     edx,eax
c001207b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001207f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012082:	05 fc 0f 00 00       	add    eax,0xffc
c0012087:	83 ca 03             	or     edx,0x3
c001208a:	89 10                	mov    DWORD PTR [eax],edx
c001208c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0012091:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012097:	83 ec 0c             	sub    esp,0xc
c001209a:	50                   	push   eax
c001209b:	e8 f8 1d 00 00       	call   c0013e98 <Device::getName()>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	83 ec 08             	sub    esp,0x8
c00120a6:	68 0d a6 02 c0       	push   0xc002a60d
c00120ab:	50                   	push   eax
c00120ac:	e8 e7 e7 fe ff       	call   c0000898 <strcmp>
c00120b1:	83 c4 10             	add    esp,0x10
c00120b4:	85 c0                	test   eax,eax
c00120b6:	0f 94 c0             	sete   al
c00120b9:	84 c0                	test   al,al
c00120bb:	0f 84 87 00 00 00    	je     c0012148 <VAS::VAS(bool)+0x27a>
c00120c1:	fa                   	cli    
c00120c2:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00120c7:	40                   	inc    eax
c00120c8:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00120cd:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00120d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120d8:	05 7c 09 00 00       	add    eax,0x97c
c00120dd:	83 ec 0c             	sub    esp,0xc
c00120e0:	50                   	push   eax
c00120e1:	e8 38 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120e6:	83 c4 10             	add    esp,0x10
c00120e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ee:	89 c3                	mov    ebx,eax
c00120f0:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00120f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120fb:	05 7c 09 00 00       	add    eax,0x97c
c0012100:	83 ec 0c             	sub    esp,0xc
c0012103:	50                   	push   eax
c0012104:	e8 15 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	83 ec 08             	sub    esp,0x8
c001210f:	50                   	push   eax
c0012110:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012114:	e8 ef f4 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	8b 00                	mov    eax,DWORD PTR [eax]
c001211e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012123:	6a 11                	push   0x11
c0012125:	53                   	push   ebx
c0012126:	50                   	push   eax
c0012127:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001212b:	e8 f4 f8 ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012130:	83 c4 10             	add    esp,0x10
c0012133:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0012138:	48                   	dec    eax
c0012139:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001213e:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0012143:	85 c0                	test   eax,eax
c0012145:	75 01                	jne    c0012148 <VAS::VAS(bool)+0x27a>
c0012147:	fb                   	sti    
c0012148:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c001214d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012151:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012157:	83 ec 08             	sub    esp,0x8
c001215a:	52                   	push   edx
c001215b:	50                   	push   eax
c001215c:	e8 a7 f4 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001216c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012171:	83 ec 08             	sub    esp,0x8
c0012174:	50                   	push   eax
c0012175:	68 04 a4 02 c0       	push   0xc002a404
c001217a:	e8 e0 05 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001217f:	83 c4 10             	add    esp,0x10
c0012182:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012186:	8b 00                	mov    eax,DWORD PTR [eax]
c0012188:	80 e4 f7             	and    ah,0xf7
c001218b:	89 c2                	mov    edx,eax
c001218d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012191:	89 10                	mov    DWORD PTR [eax],edx
c0012193:	90                   	nop
c0012194:	83 c4 28             	add    esp,0x28
c0012197:	5b                   	pop    ebx
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::evict(unsigned long)>:
c001219a:	55                   	push   ebp
c001219b:	57                   	push   edi
c001219c:	56                   	push   esi
c001219d:	53                   	push   ebx
c001219e:	83 ec 1c             	sub    esp,0x1c
c00121a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121ad:	e8 ac f1 ff ff       	call   c001135e <Virt::allocateSwapfilePage()>
c00121b2:	89 c7                	mov    edi,eax
c00121b4:	a1 0c ca 02 c0       	mov    eax,ds:0xc002ca0c
c00121b9:	85 c0                	test   eax,eax
c00121bb:	7e 3d                	jle    c00121fa <VAS::evict(unsigned long)+0x60>
c00121bd:	89 ee                	mov    esi,ebp
c00121bf:	31 db                	xor    ebx,ebx
c00121c1:	83 ec 0c             	sub    esp,0xc
c00121c4:	57                   	push   edi
c00121c5:	e8 82 f1 ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c00121ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00121cd:	01 d8                	add    eax,ebx
c00121cf:	6a 01                	push   0x1
c00121d1:	31 d2                	xor    edx,edx
c00121d3:	43                   	inc    ebx
c00121d4:	52                   	push   edx
c00121d5:	81 c6 00 02 00 00    	add    esi,0x200
c00121db:	50                   	push   eax
c00121dc:	0f be 05 18 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002ca18
c00121e3:	ff 34 85 5c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20a4]
c00121ea:	e8 31 3f 00 00       	call   c0016120 <LogicalDisk::write(unsigned long long, int, void*)>
c00121ef:	83 c4 20             	add    esp,0x20
c00121f2:	39 1d 0c ca 02 c0    	cmp    DWORD PTR ds:0xc002ca0c,ebx
c00121f8:	7f c7                	jg     c00121c1 <VAS::evict(unsigned long)+0x27>
c00121fa:	83 ec 08             	sub    esp,0x8
c00121fd:	c1 e7 0b             	shl    edi,0xb
c0012200:	55                   	push   ebp
c0012201:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012205:	e8 fe f3 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001220a:	5a                   	pop    edx
c001220b:	89 c6                	mov    esi,eax
c001220d:	59                   	pop    ecx
c001220e:	ff 30                	push   DWORD PTR [eax]
c0012210:	68 1b a6 02 c0       	push   0xc002a61b
c0012215:	e8 45 05 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001221a:	8b 16                	mov    edx,DWORD PTR [esi]
c001221c:	89 d3                	mov    ebx,edx
c001221e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012224:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001222a:	09 d7                	or     edi,edx
c001222c:	89 3e                	mov    DWORD PTR [esi],edi
c001222e:	5e                   	pop    esi
c001222f:	58                   	pop    eax
c0012230:	57                   	push   edi
c0012231:	68 34 a6 02 c0       	push   0xc002a634
c0012236:	e8 24 05 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001223b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001223e:	ff 05 c8 db 02 c0    	inc    DWORD PTR ds:0xc002dbc8
c0012244:	e8 db d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0012249:	0f 20 d8             	mov    eax,cr3
c001224c:	0f 22 d8             	mov    cr3,eax
c001224f:	ff 35 c8 db 02 c0    	push   DWORD PTR ds:0xc002dbc8
c0012255:	55                   	push   ebp
c0012256:	53                   	push   ebx
c0012257:	68 3c a5 02 c0       	push   0xc002a53c
c001225c:	e8 fe 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012261:	a1 c4 db 02 c0       	mov    eax,ds:0xc002dbc4
c0012266:	c7 44 24 50 4d a6 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a64d
c001226e:	8d 50 01             	lea    edx,[eax+0x1]
c0012271:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012275:	89 15 c4 db 02 c0    	mov    DWORD PTR ds:0xc002dbc4,edx
c001227b:	83 c4 3c             	add    esp,0x3c
c001227e:	5b                   	pop    ebx
c001227f:	5e                   	pop    esi
c0012280:	5f                   	pop    edi
c0012281:	5d                   	pop    ebp
c0012282:	e9 d8 04 00 00       	jmp    c001275f <Dbg::kprintf(char const*, ...)>
c0012287:	90                   	nop

c0012288 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012288:	55                   	push   ebp
c0012289:	57                   	push   edi
c001228a:	56                   	push   esi
c001228b:	53                   	push   ebx
c001228c:	83 ec 24             	sub    esp,0x24
c001228f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012293:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012297:	68 5e a6 02 c0       	push   0xc002a65e
c001229c:	e8 be 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00122a1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00122a5:	58                   	pop    eax
c00122a6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122ac:	5a                   	pop    edx
c00122ad:	53                   	push   ebx
c00122ae:	56                   	push   esi
c00122af:	e8 54 f3 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00122b4:	59                   	pop    ecx
c00122b5:	89 c5                	mov    ebp,eax
c00122b7:	5f                   	pop    edi
c00122b8:	ff 30                	push   DWORD PTR [eax]
c00122ba:	68 71 a6 02 c0       	push   0xc002a671
c00122bf:	e8 9b 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	85 db                	test   ebx,ebx
c00122c9:	74 1d                	je     c00122e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c00122cb:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c00122ce:	31 c0                	xor    eax,eax
c00122d0:	89 fa                	mov    edx,edi
c00122d2:	81 e2 01 04 00 00    	and    edx,0x401
c00122d8:	81 fa 00 04 00 00    	cmp    edx,0x400
c00122de:	74 12                	je     c00122f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c00122e0:	83 c4 1c             	add    esp,0x1c
c00122e3:	5b                   	pop    ebx
c00122e4:	5e                   	pop    esi
c00122e5:	5f                   	pop    edi
c00122e6:	5d                   	pop    ebp
c00122e7:	c3                   	ret    
c00122e8:	83 c4 1c             	add    esp,0x1c
c00122eb:	31 c0                	xor    eax,eax
c00122ed:	5b                   	pop    ebx
c00122ee:	5e                   	pop    esi
c00122ef:	5f                   	pop    edi
c00122f0:	5d                   	pop    ebp
c00122f1:	c3                   	ret    
c00122f2:	83 ec 08             	sub    esp,0x8
c00122f5:	c1 ef 0b             	shr    edi,0xb
c00122f8:	57                   	push   edi
c00122f9:	68 7f a6 02 c0       	push   0xc002a67f
c00122fe:	e8 5c 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012303:	e8 8d d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012308:	59                   	pop    ecx
c0012309:	5a                   	pop    edx
c001230a:	50                   	push   eax
c001230b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001230f:	68 8a a6 02 c0       	push   0xc002a68a
c0012314:	e8 46 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001231d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012320:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012326:	09 d0                	or     eax,edx
c0012328:	0d 01 08 00 00       	or     eax,0x801
c001232d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012330:	59                   	pop    ecx
c0012331:	5d                   	pop    ebp
c0012332:	50                   	push   eax
c0012333:	68 9f a6 02 c0       	push   0xc002a69f
c0012338:	e8 22 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001233d:	0f 20 d8             	mov    eax,cr3
c0012340:	83 c4 0c             	add    esp,0xc
c0012343:	56                   	push   esi
c0012344:	50                   	push   eax
c0012345:	68 b7 a6 02 c0       	push   0xc002a6b7
c001234a:	e8 10 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001234f:	c7 04 24 cf a6 02 c0 	mov    DWORD PTR [esp],0xc002a6cf
c0012356:	e8 04 04 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	a1 0c ca 02 c0       	mov    eax,ds:0xc002ca0c
c0012363:	85 c0                	test   eax,eax
c0012365:	7e 3d                	jle    c00123a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c0012367:	89 dd                	mov    ebp,ebx
c0012369:	31 f6                	xor    esi,esi
c001236b:	83 ec 0c             	sub    esp,0xc
c001236e:	57                   	push   edi
c001236f:	e8 d8 ef ff ff       	call   c001134c <Virt::swapIDToSector(unsigned long)>
c0012374:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012377:	01 f0                	add    eax,esi
c0012379:	6a 01                	push   0x1
c001237b:	31 d2                	xor    edx,edx
c001237d:	46                   	inc    esi
c001237e:	52                   	push   edx
c001237f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012385:	50                   	push   eax
c0012386:	0f be 05 18 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002ca18
c001238d:	ff 34 85 5c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20a4]
c0012394:	e8 1b 3d 00 00       	call   c00160b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0012399:	83 c4 20             	add    esp,0x20
c001239c:	39 35 0c ca 02 c0    	cmp    DWORD PTR ds:0xc002ca0c,esi
c00123a2:	7f c7                	jg     c001236b <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00123a4:	a1 c8 db 02 c0       	mov    eax,ds:0xc002dbc8
c00123a9:	48                   	dec    eax
c00123aa:	52                   	push   edx
c00123ab:	a3 c8 db 02 c0       	mov    ds:0xc002dbc8,eax
c00123b0:	50                   	push   eax
c00123b1:	53                   	push   ebx
c00123b2:	68 df a6 02 c0       	push   0xc002a6df
c00123b7:	e8 a3 03 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00123bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123bf:	e8 6a ef ff ff       	call   c001132e <Virt::freeSwapfilePage(unsigned long)>
c00123c4:	c7 04 24 f4 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6f4
c00123cb:	e8 8f 03 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00123d0:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00123d5:	83 c4 10             	add    esp,0x10
c00123d8:	48                   	dec    eax
c00123d9:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00123de:	85 c0                	test   eax,eax
c00123e0:	74 2d                	je     c001240f <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c00123e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e6:	25 ff 0f 00 00       	and    eax,0xfff
c00123eb:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00123f0:	77 20                	ja     c0012412 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c00123f2:	0f 20 d8             	mov    eax,cr3
c00123f5:	0f 22 d8             	mov    cr3,eax
c00123f8:	83 ec 0c             	sub    esp,0xc
c00123fb:	68 1a a7 02 c0       	push   0xc002a71a
c0012400:	e8 5a 03 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	b0 01                	mov    al,0x1
c001240a:	e9 d1 fe ff ff       	jmp    c00122e0 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c001240f:	fb                   	sti    
c0012410:	eb d0                	jmp    c00123e2 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c0012412:	83 ec 0c             	sub    esp,0xc
c0012415:	68 0a a7 02 c0       	push   0xc002a70a
c001241a:	e8 40 03 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001241f:	83 c4 10             	add    esp,0x10
c0012422:	eb ce                	jmp    c00123f2 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012424 <VAS::scanForEviction()>:
c0012424:	57                   	push   edi
c0012425:	56                   	push   esi
c0012426:	53                   	push   ebx
c0012427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001242b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001242e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012434:	75 0e                	jne    c0012444 <VAS::scanForEviction()+0x20>
c0012436:	89 da                	mov    edx,ebx
c0012438:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001243b:	c1 ea 16             	shr    edx,0x16
c001243e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012442:	74 48                	je     c001248c <VAS::scanForEviction()+0x68>
c0012444:	53                   	push   ebx
c0012445:	56                   	push   esi
c0012446:	e8 bd f1 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001244b:	5a                   	pop    edx
c001244c:	8b 38                	mov    edi,DWORD PTR [eax]
c001244e:	59                   	pop    ecx
c001244f:	89 fa                	mov    edx,edi
c0012451:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012457:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001245d:	74 3d                	je     c001249c <VAS::scanForEviction()+0x78>
c001245f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012465:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001246b:	76 2a                	jbe    c0012497 <VAS::scanForEviction()+0x73>
c001246d:	31 db                	xor    ebx,ebx
c001246f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012476:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001247c:	75 c6                	jne    c0012444 <VAS::scanForEviction()+0x20>
c001247e:	89 da                	mov    edx,ebx
c0012480:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012483:	c1 ea 16             	shr    edx,0x16
c0012486:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001248a:	75 b8                	jne    c0012444 <VAS::scanForEviction()+0x20>
c001248c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012492:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012495:	eb 97                	jmp    c001242e <VAS::scanForEviction()+0xa>
c0012497:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001249a:	eb 92                	jmp    c001242e <VAS::scanForEviction()+0xa>
c001249c:	f7 c7 01 00 00 00    	test   edi,0x1
c00124a2:	74 bb                	je     c001245f <VAS::scanForEviction()+0x3b>
c00124a4:	f7 c7 20 00 00 00    	test   edi,0x20
c00124aa:	74 0a                	je     c00124b6 <VAS::scanForEviction()+0x92>
c00124ac:	83 e7 df             	and    edi,0xffffffdf
c00124af:	89 38                	mov    DWORD PTR [eax],edi
c00124b1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124b4:	eb a9                	jmp    c001245f <VAS::scanForEviction()+0x3b>
c00124b6:	83 ec 08             	sub    esp,0x8
c00124b9:	53                   	push   ebx
c00124ba:	56                   	push   esi
c00124bb:	e8 da fc ff ff       	call   c001219a <VAS::evict(unsigned long)>
c00124c0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	89 f8                	mov    eax,edi
c00124cc:	5b                   	pop    ebx
c00124cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124d2:	5e                   	pop    esi
c00124d3:	5f                   	pop    edi
c00124d4:	c3                   	ret    

c00124d5 <mapVASFirstTime>:
c00124d5:	55                   	push   ebp
c00124d6:	57                   	push   edi
c00124d7:	56                   	push   esi
c00124d8:	53                   	push   ebx
c00124d9:	83 ec 0c             	sub    esp,0xc
c00124dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124e1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00124e4:	4a                   	dec    edx
c00124e5:	0f 84 fe 00 00 00    	je     c00125e9 <mapVASFirstTime+0x114>
c00124eb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00124ee:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00124f1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00124f6:	c1 e5 15             	shl    ebp,0x15
c00124f9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00124fe:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012504:	29 eb                	sub    ebx,ebp
c0012506:	29 ef                	sub    edi,ebp
c0012508:	83 ec 08             	sub    esp,0x8
c001250b:	53                   	push   ebx
c001250c:	68 41 a7 02 c0       	push   0xc002a741
c0012511:	e8 49 02 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012516:	e8 7a d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c001251b:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012522:	6a 01                	push   0x1
c0012524:	53                   	push   ebx
c0012525:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001252b:	50                   	push   eax
c001252c:	56                   	push   esi
c001252d:	e8 e8 f7 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012532:	83 c4 20             	add    esp,0x20
c0012535:	39 fb                	cmp    ebx,edi
c0012537:	75 cf                	jne    c0012508 <mapVASFirstTime+0x33>
c0012539:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001253e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012543:	29 eb                	sub    ebx,ebp
c0012545:	29 ef                	sub    edi,ebp
c0012547:	83 ec 08             	sub    esp,0x8
c001254a:	53                   	push   ebx
c001254b:	68 5d a7 02 c0       	push   0xc002a75d
c0012550:	e8 0a 02 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012555:	58                   	pop    eax
c0012556:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001255a:	5a                   	pop    edx
c001255b:	19 c0                	sbb    eax,eax
c001255d:	83 e0 04             	and    eax,0x4
c0012560:	05 03 04 00 00       	add    eax,0x403
c0012565:	50                   	push   eax
c0012566:	68 a9 a6 02 c0       	push   0xc002a6a9
c001256b:	e8 ef 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012570:	e8 20 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c0012575:	59                   	pop    ecx
c0012576:	89 c5                	mov    ebp,eax
c0012578:	58                   	pop    eax
c0012579:	55                   	push   ebp
c001257a:	68 71 a7 02 c0       	push   0xc002a771
c001257f:	e8 db 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012584:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c0012588:	19 d2                	sbb    edx,edx
c001258a:	83 e2 04             	and    edx,0x4
c001258d:	81 c2 03 0c 00 00    	add    edx,0xc03
c0012593:	89 14 24             	mov    DWORD PTR [esp],edx
c0012596:	6a 01                	push   0x1
c0012598:	53                   	push   ebx
c0012599:	55                   	push   ebp
c001259a:	56                   	push   esi
c001259b:	e8 7a f7 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125a0:	83 c4 18             	add    esp,0x18
c00125a3:	53                   	push   ebx
c00125a4:	56                   	push   esi
c00125a5:	e8 5e f0 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c00125aa:	5a                   	pop    edx
c00125ab:	59                   	pop    ecx
c00125ac:	ff 30                	push   DWORD PTR [eax]
c00125ae:	68 8d a7 02 c0       	push   0xc002a78d
c00125b3:	e8 a7 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00125b8:	0f 20 d8             	mov    eax,cr3
c00125bb:	83 c4 0c             	add    esp,0xc
c00125be:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125c4:	56                   	push   esi
c00125c5:	50                   	push   eax
c00125c6:	68 b7 a6 02 c0       	push   0xc002a6b7
c00125cb:	e8 8f 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	39 df                	cmp    edi,ebx
c00125d5:	0f 85 6c ff ff ff    	jne    c0012547 <mapVASFirstTime+0x72>
c00125db:	0f 20 d8             	mov    eax,cr3
c00125de:	0f 22 d8             	mov    cr3,eax
c00125e1:	83 c4 0c             	add    esp,0xc
c00125e4:	5b                   	pop    ebx
c00125e5:	5e                   	pop    esi
c00125e6:	5f                   	pop    edi
c00125e7:	5d                   	pop    ebp
c00125e8:	c3                   	ret    
c00125e9:	83 ec 0c             	sub    esp,0xc
c00125ec:	68 28 a7 02 c0       	push   0xc002a728
c00125f1:	e8 69 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00125f6:	83 c4 10             	add    esp,0x10
c00125f9:	83 c4 0c             	add    esp,0xc
c00125fc:	5b                   	pop    ebx
c00125fd:	5e                   	pop    esi
c00125fe:	5f                   	pop    edi
c00125ff:	5d                   	pop    ebp
c0012600:	c3                   	ret    

c0012601 <__cxa_atexit>:
c0012601:	31 c0                	xor    eax,eax
c0012603:	c3                   	ret    

c0012604 <__cxa_finalize>:
c0012604:	c3                   	ret    

c0012605 <__stack_chk_fail>:
c0012605:	55                   	push   ebp
c0012606:	89 e5                	mov    ebp,esp
c0012608:	83 ec 14             	sub    esp,0x14
c001260b:	68 98 a7 02 c0       	push   0xc002a798
c0012610:	e8 4a 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012615:	58                   	pop    eax
c0012616:	5a                   	pop    edx
c0012617:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001261a:	68 e8 a7 02 c0       	push   0xc002a7e8
c001261f:	e8 3b 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012624:	59                   	pop    ecx
c0012625:	58                   	pop    eax
c0012626:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012629:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001262c:	68 e8 a7 02 c0       	push   0xc002a7e8
c0012631:	e8 29 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012636:	5a                   	pop    edx
c0012637:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001263a:	59                   	pop    ecx
c001263b:	8b 00                	mov    eax,DWORD PTR [eax]
c001263d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012640:	68 e8 a7 02 c0       	push   0xc002a7e8
c0012645:	e8 15 01 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001264a:	5a                   	pop    edx
c001264b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001264e:	59                   	pop    ecx
c001264f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012651:	8b 00                	mov    eax,DWORD PTR [eax]
c0012653:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012656:	68 e8 a7 02 c0       	push   0xc002a7e8
c001265b:	e8 ff 00 00 00       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0012660:	c7 04 24 f0 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7f0
c0012667:	e8 5f 78 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	c9                   	leave  
c0012670:	c3                   	ret    

c0012671 <__cxa_pure_virtual>:
c0012671:	83 ec 18             	sub    esp,0x18
c0012674:	68 08 a8 02 c0       	push   0xc002a808
c0012679:	e8 4d 78 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c001267e:	83 c4 1c             	add    esp,0x1c
c0012681:	c3                   	ret    

c0012682 <operator new[](unsigned long)>:
c0012682:	e9 12 cf ff ff       	jmp    c000f599 <malloc>

c0012687 <operator delete(void*, unsigned long)>:
c0012687:	e9 2d cf ff ff       	jmp    c000f5b9 <rfree>

c001268c <operator delete[](void*)>:
c001268c:	e9 28 cf ff ff       	jmp    c000f5b9 <rfree>

c0012691 <operator delete[](void*, unsigned long)>:
c0012691:	e9 23 cf ff ff       	jmp    c000f5b9 <rfree>

c0012696 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012696:	55                   	push   ebp
c0012697:	b9 11 00 00 00       	mov    ecx,0x11
c001269c:	57                   	push   edi
c001269d:	56                   	push   esi
c001269e:	be 1a a2 02 c0       	mov    esi,0xc002a21a
c00126a3:	53                   	push   ebx
c00126a4:	83 ec 20             	sub    esp,0x20
c00126a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126af:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126b3:	fc                   	cld    
c00126b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126b6:	89 ee                	mov    esi,ebp
c00126b8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126bc:	eb 02                	jmp    c00126c0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00126be:	89 c6                	mov    esi,eax
c00126c0:	31 d2                	xor    edx,edx
c00126c2:	41                   	inc    ecx
c00126c3:	89 f0                	mov    eax,esi
c00126c5:	f7 f3                	div    ebx
c00126c7:	39 de                	cmp    esi,ebx
c00126c9:	73 f3                	jae    c00126be <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00126cb:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00126ce:	eb 02                	jmp    c00126d2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00126d0:	89 c5                	mov    ebp,eax
c00126d2:	31 d2                	xor    edx,edx
c00126d4:	49                   	dec    ecx
c00126d5:	89 e8                	mov    eax,ebp
c00126d7:	f7 f3                	div    ebx
c00126d9:	39 dd                	cmp    ebp,ebx
c00126db:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00126df:	88 11                	mov    BYTE PTR [ecx],dl
c00126e1:	73 ed                	jae    c00126d0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00126e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00126e7:	83 c4 20             	add    esp,0x20
c00126ea:	5b                   	pop    ebx
c00126eb:	5e                   	pop    esi
c00126ec:	5f                   	pop    edi
c00126ed:	5d                   	pop    ebp
c00126ee:	c3                   	ret    

c00126ef <Dbg::logc(char)>:
c00126ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126f3:	ba fd 03 00 00       	mov    edx,0x3fd
c00126f8:	ec                   	in     al,dx
c00126f9:	a8 20                	test   al,0x20
c00126fb:	74 fb                	je     c00126f8 <Dbg::logc(char)+0x9>
c00126fd:	ba f8 03 00 00       	mov    edx,0x3f8
c0012702:	88 c8                	mov    al,cl
c0012704:	ee                   	out    dx,al
c0012705:	c3                   	ret    

c0012706 <Dbg::logs(char*)>:
c0012706:	53                   	push   ebx
c0012707:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001270b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001270e:	84 c0                	test   al,al
c0012710:	74 0f                	je     c0012721 <Dbg::logs(char*)+0x1b>
c0012712:	50                   	push   eax
c0012713:	43                   	inc    ebx
c0012714:	e8 d6 ff ff ff       	call   c00126ef <Dbg::logc(char)>
c0012719:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001271c:	5a                   	pop    edx
c001271d:	84 c0                	test   al,al
c001271f:	75 f1                	jne    c0012712 <Dbg::logs(char*)+0xc>
c0012721:	5b                   	pop    ebx
c0012722:	c3                   	ret    

c0012723 <Dbg::logWriteInt(unsigned int)>:
c0012723:	83 ec 10             	sub    esp,0x10
c0012726:	6a 0a                	push   0xa
c0012728:	8d 44 24 08          	lea    eax,[esp+0x8]
c001272c:	50                   	push   eax
c001272d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012731:	e8 60 ff ff ff       	call   c0012696 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012736:	50                   	push   eax
c0012737:	e8 ca ff ff ff       	call   c0012706 <Dbg::logs(char*)>
c001273c:	83 c4 20             	add    esp,0x20
c001273f:	c3                   	ret    

c0012740 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012740:	83 ec 10             	sub    esp,0x10
c0012743:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012747:	8d 44 24 08          	lea    eax,[esp+0x8]
c001274b:	50                   	push   eax
c001274c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012750:	e8 41 ff ff ff       	call   c0012696 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012755:	50                   	push   eax
c0012756:	e8 ab ff ff ff       	call   c0012706 <Dbg::logs(char*)>
c001275b:	83 c4 20             	add    esp,0x20
c001275e:	c3                   	ret    

c001275f <Dbg::kprintf(char const*, ...)>:
c001275f:	55                   	push   ebp
c0012760:	57                   	push   edi
c0012761:	56                   	push   esi
c0012762:	53                   	push   ebx
c0012763:	83 ec 0c             	sub    esp,0xc
c0012766:	8d 44 24 24          	lea    eax,[esp+0x24]
c001276a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001276e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012772:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012775:	84 c0                	test   al,al
c0012777:	74 4a                	je     c00127c3 <Dbg::kprintf(char const*, ...)+0x64>
c0012779:	31 db                	xor    ebx,ebx
c001277b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001277e:	3c 25                	cmp    al,0x25
c0012780:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012783:	0f 85 e4 00 00 00    	jne    c001286d <Dbg::kprintf(char const*, ...)+0x10e>
c0012789:	83 c3 02             	add    ebx,0x2
c001278c:	8a 07                	mov    al,BYTE PTR [edi]
c001278e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012791:	83 e8 25             	sub    eax,0x25
c0012794:	3c 53                	cmp    al,0x53
c0012796:	0f 87 ba 00 00 00    	ja     c0012856 <Dbg::kprintf(char const*, ...)+0xf7>
c001279c:	0f b6 c0             	movzx  eax,al
c001279f:	ff 24 85 1c a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd57e4]
c00127a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127aa:	89 c8                	mov    eax,ecx
c00127ac:	83 c1 04             	add    ecx,0x4
c00127af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127b3:	ff 30                	push   DWORD PTR [eax]
c00127b5:	e8 69 ff ff ff       	call   c0012723 <Dbg::logWriteInt(unsigned int)>
c00127ba:	5f                   	pop    edi
c00127bb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127bf:	84 c0                	test   al,al
c00127c1:	75 b8                	jne    c001277b <Dbg::kprintf(char const*, ...)+0x1c>
c00127c3:	83 c4 0c             	add    esp,0xc
c00127c6:	5b                   	pop    ebx
c00127c7:	5e                   	pop    esi
c00127c8:	5f                   	pop    edi
c00127c9:	5d                   	pop    ebp
c00127ca:	c3                   	ret    
c00127cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127cf:	89 c8                	mov    eax,ecx
c00127d1:	83 c1 04             	add    ecx,0x4
c00127d4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127d8:	ff 30                	push   DWORD PTR [eax]
c00127da:	e8 27 ff ff ff       	call   c0012706 <Dbg::logs(char*)>
c00127df:	58                   	pop    eax
c00127e0:	eb d9                	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c00127e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127e6:	89 d0                	mov    eax,edx
c00127e8:	83 c2 04             	add    edx,0x4
c00127eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127ef:	ff 30                	push   DWORD PTR [eax]
c00127f1:	e8 2d ff ff ff       	call   c0012723 <Dbg::logWriteInt(unsigned int)>
c00127f6:	58                   	pop    eax
c00127f7:	eb c2                	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c00127f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127fd:	89 d0                	mov    eax,edx
c00127ff:	83 c2 04             	add    edx,0x4
c0012802:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012805:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012809:	50                   	push   eax
c001280a:	e8 e0 fe ff ff       	call   c00126ef <Dbg::logc(char)>
c001280f:	58                   	pop    eax
c0012810:	eb a9                	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c0012812:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012816:	89 c8                	mov    eax,ecx
c0012818:	83 c1 04             	add    ecx,0x4
c001281b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001281f:	6a 10                	push   0x10
c0012821:	ff 30                	push   DWORD PTR [eax]
c0012823:	e8 18 ff ff ff       	call   c0012740 <Dbg::logWriteIntBase(unsigned int, int)>
c0012828:	59                   	pop    ecx
c0012829:	5f                   	pop    edi
c001282a:	eb 8f                	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c001282c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012830:	89 d0                	mov    eax,edx
c0012832:	83 c2 08             	add    edx,0x8
c0012835:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012839:	6a 10                	push   0x10
c001283b:	ff 30                	push   DWORD PTR [eax]
c001283d:	e8 fe fe ff ff       	call   c0012740 <Dbg::logWriteIntBase(unsigned int, int)>
c0012842:	58                   	pop    eax
c0012843:	5a                   	pop    edx
c0012844:	e9 72 ff ff ff       	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c0012849:	6a 25                	push   0x25
c001284b:	e8 9f fe ff ff       	call   c00126ef <Dbg::logc(char)>
c0012850:	58                   	pop    eax
c0012851:	e9 65 ff ff ff       	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c0012856:	6a 25                	push   0x25
c0012858:	e8 92 fe ff ff       	call   c00126ef <Dbg::logc(char)>
c001285d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012860:	50                   	push   eax
c0012861:	e8 89 fe ff ff       	call   c00126ef <Dbg::logc(char)>
c0012866:	5a                   	pop    edx
c0012867:	59                   	pop    ecx
c0012868:	e9 4e ff ff ff       	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c001286d:	50                   	push   eax
c001286e:	89 eb                	mov    ebx,ebp
c0012870:	e8 7a fe ff ff       	call   c00126ef <Dbg::logc(char)>
c0012875:	89 fd                	mov    ebp,edi
c0012877:	58                   	pop    eax
c0012878:	e9 3e ff ff ff       	jmp    c00127bb <Dbg::kprintf(char const*, ...)+0x5c>
c001287d:	90                   	nop

c001287e <File::read(unsigned long long, void*, int*)>:
c001287e:	53                   	push   ebx
c001287f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012883:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012887:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001288e:	3c 19                	cmp    al,0x19
c0012890:	77 35                	ja     c00128c7 <File::read(unsigned long long, void*, int*)+0x49>
c0012892:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0012899:	85 c0                	test   eax,eax
c001289b:	74 2a                	je     c00128c7 <File::read(unsigned long long, void*, int*)+0x49>
c001289d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128a3:	85 c0                	test   eax,eax
c00128a5:	74 20                	je     c00128c7 <File::read(unsigned long long, void*, int*)+0x49>
c00128a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128ab:	74 21                	je     c00128ce <File::read(unsigned long long, void*, int*)+0x50>
c00128ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128c1:	5b                   	pop    ebx
c00128c2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128c5:	ff e0                	jmp    eax
c00128c7:	b8 0b 00 00 00       	mov    eax,0xb
c00128cc:	eb 05                	jmp    c00128d3 <File::read(unsigned long long, void*, int*)+0x55>
c00128ce:	b8 05 00 00 00       	mov    eax,0x5
c00128d3:	5b                   	pop    ebx
c00128d4:	c3                   	ret    
c00128d5:	90                   	nop

c00128d6 <File::write(unsigned long long, void*, int*)>:
c00128d6:	53                   	push   ebx
c00128d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128e6:	3c 19                	cmp    al,0x19
c00128e8:	77 35                	ja     c001291f <File::write(unsigned long long, void*, int*)+0x49>
c00128ea:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c00128f1:	85 c0                	test   eax,eax
c00128f3:	74 2a                	je     c001291f <File::write(unsigned long long, void*, int*)+0x49>
c00128f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128fb:	85 c0                	test   eax,eax
c00128fd:	74 20                	je     c001291f <File::write(unsigned long long, void*, int*)+0x49>
c00128ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012903:	74 21                	je     c0012926 <File::write(unsigned long long, void*, int*)+0x50>
c0012905:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012907:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001290b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012911:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012915:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012919:	5b                   	pop    ebx
c001291a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001291d:	ff e0                	jmp    eax
c001291f:	b8 0b 00 00 00       	mov    eax,0xb
c0012924:	eb 05                	jmp    c001292b <File::write(unsigned long long, void*, int*)+0x55>
c0012926:	b8 05 00 00 00       	mov    eax,0x5
c001292b:	5b                   	pop    ebx
c001292c:	c3                   	ret    
c001292d:	90                   	nop

c001292e <Directory::read(unsigned long long, void*, int*)>:
c001292e:	53                   	push   ebx
c001292f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012933:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012937:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001293e:	3c 19                	cmp    al,0x19
c0012940:	77 35                	ja     c0012977 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012942:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0012949:	85 c0                	test   eax,eax
c001294b:	74 2a                	je     c0012977 <Directory::read(unsigned long long, void*, int*)+0x49>
c001294d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012953:	85 c0                	test   eax,eax
c0012955:	74 20                	je     c0012977 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012957:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001295b:	74 21                	je     c001297e <Directory::read(unsigned long long, void*, int*)+0x50>
c001295d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001295f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012963:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012969:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001296d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012971:	5b                   	pop    ebx
c0012972:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012975:	ff e0                	jmp    eax
c0012977:	b8 0b 00 00 00       	mov    eax,0xb
c001297c:	eb 05                	jmp    c0012983 <Directory::read(unsigned long long, void*, int*)+0x55>
c001297e:	b8 05 00 00 00       	mov    eax,0x5
c0012983:	5b                   	pop    ebx
c0012984:	c3                   	ret    
c0012985:	90                   	nop

c0012986 <Directory::write(unsigned long long, void*, int*)>:
c0012986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001298a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012991:	b8 0b 00 00 00       	mov    eax,0xb
c0012996:	80 fa 19             	cmp    dl,0x19
c0012999:	77 18                	ja     c00129b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001299b:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c00129a2:	85 d2                	test   edx,edx
c00129a4:	74 0d                	je     c00129b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129a6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129ad:	19 c0                	sbb    eax,eax
c00129af:	83 e0 0a             	and    eax,0xa
c00129b2:	40                   	inc    eax
c00129b3:	c3                   	ret    

c00129b4 <File::isAtty()>:
c00129b4:	31 c0                	xor    eax,eax
c00129b6:	c3                   	ret    
c00129b7:	90                   	nop

c00129b8 <Directory::isAtty()>:
c00129b8:	31 c0                	xor    eax,eax
c00129ba:	c3                   	ret    
c00129bb:	90                   	nop

c00129bc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129bc:	b8 0a 00 00 00       	mov    eax,0xa
c00129c1:	c3                   	ret    

c00129c2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129c2:	b8 0a 00 00 00       	mov    eax,0xa
c00129c7:	c3                   	ret    

c00129c8 <Filesystem::getFileFirstSector(char const*)>:
c00129c8:	31 c0                	xor    eax,eax
c00129ca:	31 d2                	xor    edx,edx
c00129cc:	c3                   	ret    
c00129cd:	90                   	nop

c00129ce <File::~File()>:
c00129ce:	83 ec 0c             	sub    esp,0xc
c00129d1:	ba dc a9 02 c0       	mov    edx,0xc002a9dc
c00129d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129da:	89 10                	mov    DWORD PTR [eax],edx
c00129dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e0:	83 ec 0c             	sub    esp,0xc
c00129e3:	50                   	push   eax
c00129e4:	e8 d3 e5 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c00129e9:	83 c4 10             	add    esp,0x10
c00129ec:	90                   	nop
c00129ed:	83 c4 0c             	add    esp,0xc
c00129f0:	c3                   	ret    
c00129f1:	90                   	nop

c00129f2 <File::~File()>:
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	83 ec 0c             	sub    esp,0xc
c00129f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129fc:	e8 cd ff ff ff       	call   c00129ce <File::~File()>
c0012a01:	83 c4 10             	add    esp,0x10
c0012a04:	83 ec 08             	sub    esp,0x8
c0012a07:	68 14 01 00 00       	push   0x114
c0012a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a10:	e8 72 fc ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 c4 0c             	add    esp,0xc
c0012a1b:	c3                   	ret    

c0012a1c <Directory::~Directory()>:
c0012a1c:	83 ec 0c             	sub    esp,0xc
c0012a1f:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0012a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a28:	89 10                	mov    DWORD PTR [eax],edx
c0012a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a2e:	83 ec 0c             	sub    esp,0xc
c0012a31:	50                   	push   eax
c0012a32:	e8 85 e5 ff ff       	call   c0010fbc <UnixFile::~UnixFile()>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	90                   	nop
c0012a3b:	83 c4 0c             	add    esp,0xc
c0012a3e:	c3                   	ret    
c0012a3f:	90                   	nop

c0012a40 <Directory::~Directory()>:
c0012a40:	83 ec 0c             	sub    esp,0xc
c0012a43:	83 ec 0c             	sub    esp,0xc
c0012a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a4a:	e8 cd ff ff ff       	call   c0012a1c <Directory::~Directory()>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	83 ec 08             	sub    esp,0x8
c0012a55:	68 14 01 00 00       	push   0x114
c0012a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a5e:	e8 24 fc ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	83 c4 0c             	add    esp,0xc
c0012a69:	c3                   	ret    

c0012a6a <Filesystem::Filesystem()>:
c0012a6a:	ba 74 a9 02 c0       	mov    edx,0xc002a974
c0012a6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a73:	89 10                	mov    DWORD PTR [eax],edx
c0012a75:	8b 15 d4 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbd4
c0012a7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a86:	a3 d4 db 02 c0       	mov    ds:0xc002dbd4,eax
c0012a8b:	90                   	nop
c0012a8c:	c3                   	ret    
c0012a8d:	90                   	nop

c0012a8e <Filesystem::~Filesystem()>:
c0012a8e:	ba 74 a9 02 c0       	mov    edx,0xc002a974
c0012a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a97:	89 10                	mov    DWORD PTR [eax],edx
c0012a99:	90                   	nop
c0012a9a:	c3                   	ret    
c0012a9b:	90                   	nop

c0012a9c <Filesystem::~Filesystem()>:
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012aa3:	e8 e6 ff ff ff       	call   c0012a8e <Filesystem::~Filesystem()>
c0012aa8:	83 c4 04             	add    esp,0x4
c0012aab:	83 ec 08             	sub    esp,0x8
c0012aae:	6a 08                	push   0x8
c0012ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ab4:	e8 ce fb ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	83 c4 0c             	add    esp,0xc
c0012abf:	c3                   	ret    

c0012ac0 <Fs::getcwd(Process*, char*, int)>:
c0012ac0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ac4:	31 c0                	xor    eax,eax
c0012ac6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ac9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012acd:	7d 15                	jge    c0012ae4 <Fs::getcwd(Process*, char*, int)+0x24>
c0012acf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ad3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ada:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012add:	84 c9                	test   cl,cl
c0012adf:	74 06                	je     c0012ae7 <Fs::getcwd(Process*, char*, int)+0x27>
c0012ae1:	40                   	inc    eax
c0012ae2:	eb e2                	jmp    c0012ac6 <Fs::getcwd(Process*, char*, int)+0x6>
c0012ae4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012ae7:	31 c0                	xor    eax,eax
c0012ae9:	c3                   	ret    

c0012aea <Fs::initVFS()>:
c0012aea:	83 ec 18             	sub    esp,0x18
c0012aed:	6a 08                	push   0x8
c0012aef:	e8 a5 ca ff ff       	call   c000f599 <malloc>
c0012af4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012af7:	e8 d2 de 00 00       	call   c00209ce <FAT::FAT()>
c0012afc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b03:	e8 91 ca ff ff       	call   c000f599 <malloc>
c0012b08:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b0b:	e8 ca f0 00 00       	call   c0021bda <ISO9660::ISO9660()>
c0012b10:	83 c4 1c             	add    esp,0x1c
c0012b13:	c3                   	ret    

c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b14:	55                   	push   ebp
c0012b15:	57                   	push   edi
c0012b16:	56                   	push   esi
c0012b17:	53                   	push   ebx
c0012b18:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b1e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b25:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b2c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b33:	68 00 04 00 00       	push   0x400
c0012b38:	6a 00                	push   0x0
c0012b3a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b3e:	56                   	push   esi
c0012b3f:	e8 0c dc fe ff       	call   c0000750 <memset>
c0012b44:	83 c4 10             	add    esp,0x10
c0012b47:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b4b:	75 0b                	jne    c0012b58 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b4d:	50                   	push   eax
c0012b4e:	50                   	push   eax
c0012b4f:	57                   	push   edi
c0012b50:	56                   	push   esi
c0012b51:	e8 b6 dc fe ff       	call   c000080c <strcpy>
c0012b56:	eb 41                	jmp    c0012b99 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b58:	8a 07                	mov    al,BYTE PTR [edi]
c0012b5a:	3c 5c                	cmp    al,0x5c
c0012b5c:	74 04                	je     c0012b62 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b5e:	3c 2f                	cmp    al,0x2f
c0012b60:	75 18                	jne    c0012b7a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b62:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b65:	3c 60                	cmp    al,0x60
c0012b67:	7e 03                	jle    c0012b6c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b69:	83 e8 20             	sub    eax,0x20
c0012b6c:	88 04 24             	mov    BYTE PTR [esp],al
c0012b6f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b76:	50                   	push   eax
c0012b77:	50                   	push   eax
c0012b78:	eb 18                	jmp    c0012b92 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b7a:	50                   	push   eax
c0012b7b:	50                   	push   eax
c0012b7c:	55                   	push   ebp
c0012b7d:	56                   	push   esi
c0012b7e:	e8 89 dc fe ff       	call   c000080c <strcpy>
c0012b83:	5a                   	pop    edx
c0012b84:	59                   	pop    ecx
c0012b85:	68 6a bc 02 c0       	push   0xc002bc6a
c0012b8a:	56                   	push   esi
c0012b8b:	e8 bc dd fe ff       	call   c000094c <strcat>
c0012b90:	5d                   	pop    ebp
c0012b91:	58                   	pop    eax
c0012b92:	57                   	push   edi
c0012b93:	56                   	push   esi
c0012b94:	e8 b3 dd fe ff       	call   c000094c <strcat>
c0012b99:	83 c4 10             	add    esp,0x10
c0012b9c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b9f:	3c 60                	cmp    al,0x60
c0012ba1:	7e 03                	jle    c0012ba6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012ba3:	83 e8 20             	sub    eax,0x20
c0012ba6:	88 04 24             	mov    BYTE PTR [esp],al
c0012ba9:	88 03                	mov    BYTE PTR [ebx],al
c0012bab:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012bb2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bb8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bbc:	bf 03 00 00 00       	mov    edi,0x3
c0012bc1:	b8 03 00 00 00       	mov    eax,0x3
c0012bc6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bc9:	84 d2                	test   dl,dl
c0012bcb:	0f 84 91 00 00 00    	je     c0012c62 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bd1:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bd4:	80 fa 5c             	cmp    dl,0x5c
c0012bd7:	74 05                	je     c0012bde <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012bd9:	80 fa 2f             	cmp    dl,0x2f
c0012bdc:	75 12                	jne    c0012bf0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bde:	89 c5                	mov    ebp,eax
c0012be0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012be5:	74 09                	je     c0012bf0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012be7:	40                   	inc    eax
c0012be8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bec:	89 cf                	mov    edi,ecx
c0012bee:	eb d6                	jmp    c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bf0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bf5:	75 5b                	jne    c0012c52 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bf7:	80 fa 2e             	cmp    dl,0x2e
c0012bfa:	75 56                	jne    c0012c52 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bfc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c00:	74 19                	je     c0012c1b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c02:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c07:	74 53                	je     c0012c5c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c09:	89 f9                	mov    ecx,edi
c0012c0b:	41                   	inc    ecx
c0012c0c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c0f:	80 fa 2f             	cmp    dl,0x2f
c0012c12:	74 f7                	je     c0012c0b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c14:	80 fa 5c             	cmp    dl,0x5c
c0012c17:	74 f2                	je     c0012c0b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c19:	eb d1                	jmp    c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c1b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c20:	74 3a                	je     c0012c5c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c22:	83 f8 03             	cmp    eax,0x3
c0012c25:	74 c5                	je     c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c27:	41                   	inc    ecx
c0012c28:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c2b:	80 fa 2f             	cmp    dl,0x2f
c0012c2e:	74 f7                	je     c0012c27 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c30:	80 fa 5c             	cmp    dl,0x5c
c0012c33:	74 f2                	je     c0012c27 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c35:	48                   	dec    eax
c0012c36:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c3a:	75 06                	jne    c0012c42 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c3c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c40:	eb f3                	jmp    c0012c35 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c42:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c46:	74 07                	je     c0012c4f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c48:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c4c:	48                   	dec    eax
c0012c4d:	eb f3                	jmp    c0012c42 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c4f:	40                   	inc    eax
c0012c50:	eb 9a                	jmp    c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c52:	80 fa 2f             	cmp    dl,0x2f
c0012c55:	74 95                	je     c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c57:	80 fa 5c             	cmp    dl,0x5c
c0012c5a:	74 90                	je     c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c5c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c5f:	40                   	inc    eax
c0012c60:	eb 8a                	jmp    c0012bec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c62:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	53                   	push   ebx
c0012c6a:	e8 fd da fe ff       	call   c000076c <strlen>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c77:	75 26                	jne    c0012c9f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c79:	83 ec 0c             	sub    esp,0xc
c0012c7c:	53                   	push   ebx
c0012c7d:	e8 ea da fe ff       	call   c000076c <strlen>
c0012c82:	83 c4 10             	add    esp,0x10
c0012c85:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c8a:	74 26                	je     c0012cb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	53                   	push   ebx
c0012c90:	e8 d7 da fe ff       	call   c000076c <strlen>
c0012c95:	83 c4 10             	add    esp,0x10
c0012c98:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c9d:	eb c7                	jmp    c0012c66 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012c9f:	83 ec 0c             	sub    esp,0xc
c0012ca2:	53                   	push   ebx
c0012ca3:	e8 c4 da fe ff       	call   c000076c <strlen>
c0012ca8:	83 c4 10             	add    esp,0x10
c0012cab:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012cb0:	74 c7                	je     c0012c79 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012cb2:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cb8:	5b                   	pop    ebx
c0012cb9:	5e                   	pop    esi
c0012cba:	5f                   	pop    edi
c0012cbb:	5d                   	pop    ebp
c0012cbc:	c3                   	ret    
c0012cbd:	90                   	nop

c0012cbe <File::File(char const*, Process*)>:
c0012cbe:	83 ec 0c             	sub    esp,0xc
c0012cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc5:	83 ec 08             	sub    esp,0x8
c0012cc8:	6a 00                	push   0x0
c0012cca:	50                   	push   eax
c0012ccb:	e8 0a e1 ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c0012cd0:	83 c4 10             	add    esp,0x10
c0012cd3:	ba dc a9 02 c0       	mov    edx,0xc002a9dc
c0012cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdc:	89 10                	mov    DWORD PTR [eax],edx
c0012cde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ce2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cec:	83 c0 0d             	add    eax,0xd
c0012cef:	83 ec 04             	sub    esp,0x4
c0012cf2:	52                   	push   edx
c0012cf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cf7:	50                   	push   eax
c0012cf8:	e8 17 fe ff ff       	call   c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012cfd:	83 c4 10             	add    esp,0x10
c0012d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d04:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d07:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d18:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d1c:	90                   	nop
c0012d1d:	83 c4 0c             	add    esp,0xc
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <File::open(FileOpenMode)>:
c0012d22:	53                   	push   ebx
c0012d23:	b8 0b 00 00 00       	mov    eax,0xb
c0012d28:	83 ec 08             	sub    esp,0x8
c0012d2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d2f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d36:	80 fa 19             	cmp    dl,0x19
c0012d39:	77 40                	ja     c0012d7b <File::open(FileOpenMode)+0x59>
c0012d3b:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012d42:	85 d2                	test   edx,edx
c0012d44:	74 35                	je     c0012d7b <File::open(FileOpenMode)+0x59>
c0012d46:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d4c:	85 d2                	test   edx,edx
c0012d4e:	74 2b                	je     c0012d7b <File::open(FileOpenMode)+0x59>
c0012d50:	b8 06 00 00 00       	mov    eax,0x6
c0012d55:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d59:	75 20                	jne    c0012d7b <File::open(FileOpenMode)+0x59>
c0012d5b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d5d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d67:	51                   	push   ecx
c0012d68:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d6b:	51                   	push   ecx
c0012d6c:	52                   	push   edx
c0012d6d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	85 c0                	test   eax,eax
c0012d75:	75 04                	jne    c0012d7b <File::open(FileOpenMode)+0x59>
c0012d77:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d7b:	83 c4 08             	add    esp,0x8
c0012d7e:	5b                   	pop    ebx
c0012d7f:	c3                   	ret    

c0012d80 <File::close()>:
c0012d80:	53                   	push   ebx
c0012d81:	b8 0b 00 00 00       	mov    eax,0xb
c0012d86:	83 ec 08             	sub    esp,0x8
c0012d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d8d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d94:	80 fa 19             	cmp    dl,0x19
c0012d97:	77 41                	ja     c0012dda <File::close()+0x5a>
c0012d99:	8b 1c 95 60 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012da0:	85 db                	test   ebx,ebx
c0012da2:	74 36                	je     c0012dda <File::close()+0x5a>
c0012da4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012dab:	74 2d                	je     c0012dda <File::close()+0x5a>
c0012dad:	b8 05 00 00 00       	mov    eax,0x5
c0012db2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012db6:	74 22                	je     c0012dda <File::close()+0x5a>
c0012db8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dbc:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c0012dc3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dc9:	53                   	push   ebx
c0012dca:	53                   	push   ebx
c0012dcb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dcd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dd3:	50                   	push   eax
c0012dd4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012dd7:	83 c4 10             	add    esp,0x10
c0012dda:	83 c4 08             	add    esp,0x8
c0012ddd:	5b                   	pop    ebx
c0012dde:	c3                   	ret    
c0012ddf:	90                   	nop

c0012de0 <File::seek(unsigned long long)>:
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	b8 0b 00 00 00       	mov    eax,0xb
c0012de7:	51                   	push   ecx
c0012de8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012df0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012df7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dfb:	80 fa 19             	cmp    dl,0x19
c0012dfe:	77 31                	ja     c0012e31 <File::seek(unsigned long long)+0x51>
c0012e00:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012e07:	85 d2                	test   edx,edx
c0012e09:	74 26                	je     c0012e31 <File::seek(unsigned long long)+0x51>
c0012e0b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e11:	85 d2                	test   edx,edx
c0012e13:	74 1c                	je     c0012e31 <File::seek(unsigned long long)+0x51>
c0012e15:	b8 05 00 00 00       	mov    eax,0x5
c0012e1a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e1e:	74 11                	je     c0012e31 <File::seek(unsigned long long)+0x51>
c0012e20:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e22:	53                   	push   ebx
c0012e23:	51                   	push   ecx
c0012e24:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e2a:	52                   	push   edx
c0012e2b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	5a                   	pop    edx
c0012e32:	5b                   	pop    ebx
c0012e33:	5e                   	pop    esi
c0012e34:	c3                   	ret    
c0012e35:	90                   	nop

c0012e36 <File::tell(unsigned long long*)>:
c0012e36:	83 ec 0c             	sub    esp,0xc
c0012e39:	b8 0b 00 00 00       	mov    eax,0xb
c0012e3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e42:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e49:	80 fa 19             	cmp    dl,0x19
c0012e4c:	77 34                	ja     c0012e82 <File::tell(unsigned long long*)+0x4c>
c0012e4e:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0012e55:	85 d2                	test   edx,edx
c0012e57:	74 29                	je     c0012e82 <File::tell(unsigned long long*)+0x4c>
c0012e59:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e5f:	85 d2                	test   edx,edx
c0012e61:	74 1f                	je     c0012e82 <File::tell(unsigned long long*)+0x4c>
c0012e63:	b8 05 00 00 00       	mov    eax,0x5
c0012e68:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e6c:	74 14                	je     c0012e82 <File::tell(unsigned long long*)+0x4c>
c0012e6e:	50                   	push   eax
c0012e6f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e75:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e7b:	52                   	push   edx
c0012e7c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	83 c4 0c             	add    esp,0xc
c0012e85:	c3                   	ret    

c0012e86 <File::rewind()>:
c0012e86:	83 ec 10             	sub    esp,0x10
c0012e89:	6a 00                	push   0x0
c0012e8b:	6a 00                	push   0x0
c0012e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e91:	e8 4a ff ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c0012e96:	83 c4 1c             	add    esp,0x1c
c0012e99:	c3                   	ret    

c0012e9a <File::unlink()>:
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ea6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ead:	80 f9 19             	cmp    cl,0x19
c0012eb0:	77 2f                	ja     c0012ee1 <File::unlink()+0x47>
c0012eb2:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0012eb9:	85 c9                	test   ecx,ecx
c0012ebb:	74 24                	je     c0012ee1 <File::unlink()+0x47>
c0012ebd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ec3:	85 c9                	test   ecx,ecx
c0012ec5:	74 1a                	je     c0012ee1 <File::unlink()+0x47>
c0012ec7:	b8 06 00 00 00       	mov    eax,0x6
c0012ecc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ed0:	75 0f                	jne    c0012ee1 <File::unlink()+0x47>
c0012ed2:	83 c2 0d             	add    edx,0xd
c0012ed5:	50                   	push   eax
c0012ed6:	50                   	push   eax
c0012ed7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ed9:	52                   	push   edx
c0012eda:	51                   	push   ecx
c0012edb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	83 c4 0c             	add    esp,0xc
c0012ee4:	c3                   	ret    
c0012ee5:	90                   	nop

c0012ee6 <File::rename(char const*)>:
c0012ee6:	83 ec 0c             	sub    esp,0xc
c0012ee9:	b8 0b 00 00 00       	mov    eax,0xb
c0012eee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ef2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ef9:	80 f9 19             	cmp    cl,0x19
c0012efc:	77 32                	ja     c0012f30 <File::rename(char const*)+0x4a>
c0012efe:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0012f05:	85 c9                	test   ecx,ecx
c0012f07:	74 27                	je     c0012f30 <File::rename(char const*)+0x4a>
c0012f09:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f0f:	85 c9                	test   ecx,ecx
c0012f11:	74 1d                	je     c0012f30 <File::rename(char const*)+0x4a>
c0012f13:	b8 06 00 00 00       	mov    eax,0x6
c0012f18:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f1c:	75 12                	jne    c0012f30 <File::rename(char const*)+0x4a>
c0012f1e:	83 c2 0d             	add    edx,0xd
c0012f21:	50                   	push   eax
c0012f22:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f28:	52                   	push   edx
c0012f29:	51                   	push   ecx
c0012f2a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f2d:	83 c4 10             	add    esp,0x10
c0012f30:	83 c4 0c             	add    esp,0xc
c0012f33:	c3                   	ret    

c0012f34 <File::chfatattr(unsigned char, unsigned char)>:
c0012f34:	57                   	push   edi
c0012f35:	b8 0b 00 00 00       	mov    eax,0xb
c0012f3a:	56                   	push   esi
c0012f3b:	53                   	push   ebx
c0012f3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f40:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f4b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f4f:	80 f9 19             	cmp    cl,0x19
c0012f52:	77 37                	ja     c0012f8b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f54:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0012f5b:	85 c9                	test   ecx,ecx
c0012f5d:	74 2c                	je     c0012f8b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f65:	85 c9                	test   ecx,ecx
c0012f67:	74 22                	je     c0012f8b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f69:	b8 06 00 00 00       	mov    eax,0x6
c0012f6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f72:	75 17                	jne    c0012f8b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f74:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f76:	89 f0                	mov    eax,esi
c0012f78:	83 c2 0d             	add    edx,0xd
c0012f7b:	0f b6 f0             	movzx  esi,al
c0012f7e:	0f b6 db             	movzx  ebx,bl
c0012f81:	56                   	push   esi
c0012f82:	53                   	push   ebx
c0012f83:	52                   	push   edx
c0012f84:	51                   	push   ecx
c0012f85:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	5b                   	pop    ebx
c0012f8c:	5e                   	pop    esi
c0012f8d:	5f                   	pop    edi
c0012f8e:	c3                   	ret    
c0012f8f:	90                   	nop

c0012f90 <File::exists()>:
c0012f90:	83 ec 0c             	sub    esp,0xc
c0012f93:	31 c0                	xor    eax,eax
c0012f95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f99:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fa0:	80 f9 19             	cmp    cl,0x19
c0012fa3:	77 24                	ja     c0012fc9 <File::exists()+0x39>
c0012fa5:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0012fac:	85 c9                	test   ecx,ecx
c0012fae:	74 19                	je     c0012fc9 <File::exists()+0x39>
c0012fb0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fb6:	85 c9                	test   ecx,ecx
c0012fb8:	74 0f                	je     c0012fc9 <File::exists()+0x39>
c0012fba:	83 c2 0d             	add    edx,0xd
c0012fbd:	50                   	push   eax
c0012fbe:	50                   	push   eax
c0012fbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fc1:	52                   	push   edx
c0012fc2:	51                   	push   ecx
c0012fc3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	83 c4 0c             	add    esp,0xc
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <File::stat(unsigned long long*, bool*)>:
c0012fce:	56                   	push   esi
c0012fcf:	53                   	push   ebx
c0012fd0:	50                   	push   eax
c0012fd1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fde:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fe5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fe9:	80 f9 19             	cmp    cl,0x19
c0012fec:	77 3d                	ja     c001302b <File::stat(unsigned long long*, bool*)+0x5d>
c0012fee:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0012ff5:	85 c9                	test   ecx,ecx
c0012ff7:	74 32                	je     c001302b <File::stat(unsigned long long*, bool*)+0x5d>
c0012ff9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fff:	85 c9                	test   ecx,ecx
c0013001:	74 28                	je     c001302b <File::stat(unsigned long long*, bool*)+0x5d>
c0013003:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013005:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013009:	74 13                	je     c001301e <File::stat(unsigned long long*, bool*)+0x50>
c001300b:	83 ec 04             	sub    esp,0x4
c001300e:	56                   	push   esi
c001300f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013015:	51                   	push   ecx
c0013016:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013019:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001301c:	eb 0a                	jmp    c0013028 <File::stat(unsigned long long*, bool*)+0x5a>
c001301e:	53                   	push   ebx
c001301f:	83 c2 0d             	add    edx,0xd
c0013022:	56                   	push   esi
c0013023:	52                   	push   edx
c0013024:	51                   	push   ecx
c0013025:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013028:	83 c4 10             	add    esp,0x10
c001302b:	5a                   	pop    edx
c001302c:	5b                   	pop    ebx
c001302d:	5e                   	pop    esi
c001302e:	c3                   	ret    

c001302f <Fs::setcwd(Process*, char*)>:
c001302f:	55                   	push   ebp
c0013030:	57                   	push   edi
c0013031:	56                   	push   esi
c0013032:	53                   	push   ebx
c0013033:	81 ec 20 02 00 00    	sub    esp,0x220
c0013039:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013040:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013046:	57                   	push   edi
c0013047:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001304e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013052:	56                   	push   esi
c0013053:	e8 bc fa ff ff       	call   c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013058:	89 34 24             	mov    DWORD PTR [esp],esi
c001305b:	e8 0c d7 fe ff       	call   c000076c <strlen>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	83 f8 02             	cmp    eax,0x2
c0013066:	77 17                	ja     c001307f <Fs::setcwd(Process*, char*)+0x50>
c0013068:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001306d:	83 e8 41             	sub    eax,0x41
c0013070:	83 f8 19             	cmp    eax,0x19
c0013073:	76 24                	jbe    c0013099 <Fs::setcwd(Process*, char*)+0x6a>
c0013075:	b8 03 00 00 00       	mov    eax,0x3
c001307a:	e9 e0 00 00 00       	jmp    c001315f <Fs::setcwd(Process*, char*)+0x130>
c001307f:	83 ec 0c             	sub    esp,0xc
c0013082:	56                   	push   esi
c0013083:	e8 e4 d6 fe ff       	call   c000076c <strlen>
c0013088:	83 c4 10             	add    esp,0x10
c001308b:	83 f8 03             	cmp    eax,0x3
c001308e:	75 34                	jne    c00130c4 <Fs::setcwd(Process*, char*)+0x95>
c0013090:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013095:	75 2d                	jne    c00130c4 <Fs::setcwd(Process*, char*)+0x95>
c0013097:	eb cf                	jmp    c0013068 <Fs::setcwd(Process*, char*)+0x39>
c0013099:	8b 14 85 60 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fa0]
c00130a0:	b8 05 00 00 00       	mov    eax,0x5
c00130a5:	85 d2                	test   edx,edx
c00130a7:	0f 84 b2 00 00 00    	je     c001315f <Fs::setcwd(Process*, char*)+0x130>
c00130ad:	b8 06 00 00 00       	mov    eax,0x6
c00130b2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130b9:	0f 85 92 00 00 00    	jne    c0013151 <Fs::setcwd(Process*, char*)+0x122>
c00130bf:	e9 9b 00 00 00       	jmp    c001315f <Fs::setcwd(Process*, char*)+0x130>
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	68 14 01 00 00       	push   0x114
c00130cc:	e8 c8 c4 ff ff       	call   c000f599 <malloc>
c00130d1:	83 c4 0c             	add    esp,0xc
c00130d4:	89 c3                	mov    ebx,eax
c00130d6:	55                   	push   ebp
c00130d7:	56                   	push   esi
c00130d8:	50                   	push   eax
c00130d9:	e8 e0 fb ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c00130de:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130e3:	83 c4 0c             	add    esp,0xc
c00130e6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00130ea:	50                   	push   eax
c00130eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00130ef:	50                   	push   eax
c00130f0:	53                   	push   ebx
c00130f1:	e8 d8 fe ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c00130f6:	83 c4 10             	add    esp,0x10
c00130f9:	83 f8 02             	cmp    eax,0x2
c00130fc:	74 04                	je     c0013102 <Fs::setcwd(Process*, char*)+0xd3>
c00130fe:	85 c0                	test   eax,eax
c0013100:	74 1c                	je     c001311e <Fs::setcwd(Process*, char*)+0xef>
c0013102:	b8 01 00 00 00       	mov    eax,0x1
c0013107:	85 db                	test   ebx,ebx
c0013109:	74 54                	je     c001315f <Fs::setcwd(Process*, char*)+0x130>
c001310b:	83 ec 0c             	sub    esp,0xc
c001310e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013110:	53                   	push   ebx
c0013111:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	b8 01 00 00 00       	mov    eax,0x1
c001311c:	eb 41                	jmp    c001315f <Fs::setcwd(Process*, char*)+0x130>
c001311e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013123:	75 1c                	jne    c0013141 <Fs::setcwd(Process*, char*)+0x112>
c0013125:	b8 02 00 00 00       	mov    eax,0x2
c001312a:	85 db                	test   ebx,ebx
c001312c:	74 31                	je     c001315f <Fs::setcwd(Process*, char*)+0x130>
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013133:	53                   	push   ebx
c0013134:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	b8 02 00 00 00       	mov    eax,0x2
c001313f:	eb 1e                	jmp    c001315f <Fs::setcwd(Process*, char*)+0x130>
c0013141:	85 db                	test   ebx,ebx
c0013143:	74 0c                	je     c0013151 <Fs::setcwd(Process*, char*)+0x122>
c0013145:	83 ec 0c             	sub    esp,0xc
c0013148:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314a:	53                   	push   ebx
c001314b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001314e:	83 c4 10             	add    esp,0x10
c0013151:	50                   	push   eax
c0013152:	50                   	push   eax
c0013153:	56                   	push   esi
c0013154:	57                   	push   edi
c0013155:	e8 b2 d6 fe ff       	call   c000080c <strcpy>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	31 c0                	xor    eax,eax
c001315f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013165:	5b                   	pop    ebx
c0013166:	5e                   	pop    esi
c0013167:	5f                   	pop    edi
c0013168:	5d                   	pop    ebp
c0013169:	c3                   	ret    

c001316a <Directory::Directory(char const*, Process*)>:
c001316a:	83 ec 0c             	sub    esp,0xc
c001316d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013171:	83 ec 08             	sub    esp,0x8
c0013174:	6a 00                	push   0x0
c0013176:	50                   	push   eax
c0013177:	e8 5e dc ff ff       	call   c0010dda <UnixFile::UnixFile(int)>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c0013184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013188:	89 10                	mov    DWORD PTR [eax],edx
c001318a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013198:	83 c0 0d             	add    eax,0xd
c001319b:	83 ec 04             	sub    esp,0x4
c001319e:	52                   	push   edx
c001319f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131a3:	50                   	push   eax
c00131a4:	e8 6b f9 ff ff       	call   c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131b3:	8d 50 bf             	lea    edx,[eax-0x41]
c00131b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131c8:	90                   	nop
c00131c9:	83 c4 0c             	add    esp,0xc
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop

c00131ce <Directory::open()>:
c00131ce:	53                   	push   ebx
c00131cf:	b8 0b 00 00 00       	mov    eax,0xb
c00131d4:	83 ec 08             	sub    esp,0x8
c00131d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131e2:	80 fa 19             	cmp    dl,0x19
c00131e5:	77 3d                	ja     c0013224 <Directory::open()+0x56>
c00131e7:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c00131ee:	85 d2                	test   edx,edx
c00131f0:	74 32                	je     c0013224 <Directory::open()+0x56>
c00131f2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131f8:	85 d2                	test   edx,edx
c00131fa:	74 28                	je     c0013224 <Directory::open()+0x56>
c00131fc:	b8 06 00 00 00       	mov    eax,0x6
c0013201:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013205:	75 1d                	jne    c0013224 <Directory::open()+0x56>
c0013207:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001320d:	50                   	push   eax
c001320e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013210:	51                   	push   ecx
c0013211:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013214:	51                   	push   ecx
c0013215:	52                   	push   edx
c0013216:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	85 c0                	test   eax,eax
c001321e:	75 04                	jne    c0013224 <Directory::open()+0x56>
c0013220:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013224:	83 c4 08             	add    esp,0x8
c0013227:	5b                   	pop    ebx
c0013228:	c3                   	ret    
c0013229:	90                   	nop

c001322a <Directory::close()>:
c001322a:	53                   	push   ebx
c001322b:	b8 0b 00 00 00       	mov    eax,0xb
c0013230:	83 ec 08             	sub    esp,0x8
c0013233:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013237:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001323e:	80 fa 19             	cmp    dl,0x19
c0013241:	77 41                	ja     c0013284 <Directory::close()+0x5a>
c0013243:	8b 1c 95 60 e0 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1fa0]
c001324a:	85 db                	test   ebx,ebx
c001324c:	74 36                	je     c0013284 <Directory::close()+0x5a>
c001324e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013255:	74 2d                	je     c0013284 <Directory::close()+0x5a>
c0013257:	b8 05 00 00 00       	mov    eax,0x5
c001325c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013260:	74 22                	je     c0013284 <Directory::close()+0x5a>
c0013262:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013266:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c001326d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013273:	53                   	push   ebx
c0013274:	53                   	push   ebx
c0013275:	8b 10                	mov    edx,DWORD PTR [eax]
c0013277:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001327d:	50                   	push   eax
c001327e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	83 c4 08             	add    esp,0x8
c0013287:	5b                   	pop    ebx
c0013288:	c3                   	ret    
c0013289:	90                   	nop

c001328a <Directory::unlink()>:
c001328a:	83 ec 0c             	sub    esp,0xc
c001328d:	b8 0b 00 00 00       	mov    eax,0xb
c0013292:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013296:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001329d:	80 f9 19             	cmp    cl,0x19
c00132a0:	77 2f                	ja     c00132d1 <Directory::unlink()+0x47>
c00132a2:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00132a9:	85 c9                	test   ecx,ecx
c00132ab:	74 24                	je     c00132d1 <Directory::unlink()+0x47>
c00132ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132b3:	85 c9                	test   ecx,ecx
c00132b5:	74 1a                	je     c00132d1 <Directory::unlink()+0x47>
c00132b7:	b8 06 00 00 00       	mov    eax,0x6
c00132bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132c0:	75 0f                	jne    c00132d1 <Directory::unlink()+0x47>
c00132c2:	83 c2 0d             	add    edx,0xd
c00132c5:	50                   	push   eax
c00132c6:	50                   	push   eax
c00132c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132c9:	52                   	push   edx
c00132ca:	51                   	push   ecx
c00132cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132ce:	83 c4 10             	add    esp,0x10
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	c3                   	ret    
c00132d5:	90                   	nop

c00132d6 <Directory::rename(char const*)>:
c00132d6:	83 ec 0c             	sub    esp,0xc
c00132d9:	b8 0b 00 00 00       	mov    eax,0xb
c00132de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132e9:	80 f9 19             	cmp    cl,0x19
c00132ec:	77 32                	ja     c0013320 <Directory::rename(char const*)+0x4a>
c00132ee:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00132f5:	85 c9                	test   ecx,ecx
c00132f7:	74 27                	je     c0013320 <Directory::rename(char const*)+0x4a>
c00132f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ff:	85 c9                	test   ecx,ecx
c0013301:	74 1d                	je     c0013320 <Directory::rename(char const*)+0x4a>
c0013303:	b8 06 00 00 00       	mov    eax,0x6
c0013308:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001330c:	75 12                	jne    c0013320 <Directory::rename(char const*)+0x4a>
c001330e:	83 c2 0d             	add    edx,0xd
c0013311:	50                   	push   eax
c0013312:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013314:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013318:	52                   	push   edx
c0013319:	51                   	push   ecx
c001331a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	83 c4 0c             	add    esp,0xc
c0013323:	c3                   	ret    

c0013324 <Directory::exists()>:
c0013324:	83 ec 0c             	sub    esp,0xc
c0013327:	31 c0                	xor    eax,eax
c0013329:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001332d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013334:	80 f9 19             	cmp    cl,0x19
c0013337:	77 24                	ja     c001335d <Directory::exists()+0x39>
c0013339:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c0013340:	85 c9                	test   ecx,ecx
c0013342:	74 19                	je     c001335d <Directory::exists()+0x39>
c0013344:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001334a:	85 c9                	test   ecx,ecx
c001334c:	74 0f                	je     c001335d <Directory::exists()+0x39>
c001334e:	83 c2 0d             	add    edx,0xd
c0013351:	50                   	push   eax
c0013352:	50                   	push   eax
c0013353:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013355:	52                   	push   edx
c0013356:	51                   	push   ecx
c0013357:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001335a:	83 c4 10             	add    esp,0x10
c001335d:	83 c4 0c             	add    esp,0xc
c0013360:	c3                   	ret    
c0013361:	90                   	nop

c0013362 <Directory::read(dirent*)>:
c0013362:	83 ec 1c             	sub    esp,0x1c
c0013365:	b8 0b 00 00 00       	mov    eax,0xb
c001336a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001336e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013375:	80 fa 19             	cmp    dl,0x19
c0013378:	77 30                	ja     c00133aa <Directory::read(dirent*)+0x48>
c001337a:	8b 14 95 60 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fa0]
c0013381:	85 d2                	test   edx,edx
c0013383:	74 25                	je     c00133aa <Directory::read(dirent*)+0x48>
c0013385:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001338c:	74 1c                	je     c00133aa <Directory::read(dirent*)+0x48>
c001338e:	83 ec 0c             	sub    esp,0xc
c0013391:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013393:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013397:	52                   	push   edx
c0013398:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001339c:	6a 00                	push   0x0
c001339e:	68 10 01 00 00       	push   0x110
c00133a3:	51                   	push   ecx
c00133a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133a7:	83 c4 20             	add    esp,0x20
c00133aa:	83 c4 1c             	add    esp,0x1c
c00133ad:	c3                   	ret    

c00133ae <Directory::create()>:
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	b8 0b 00 00 00       	mov    eax,0xb
c00133b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133c1:	80 f9 19             	cmp    cl,0x19
c00133c4:	77 2f                	ja     c00133f5 <Directory::create()+0x47>
c00133c6:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c00133cd:	85 c9                	test   ecx,ecx
c00133cf:	74 24                	je     c00133f5 <Directory::create()+0x47>
c00133d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133d7:	85 c9                	test   ecx,ecx
c00133d9:	74 1a                	je     c00133f5 <Directory::create()+0x47>
c00133db:	b8 06 00 00 00       	mov    eax,0x6
c00133e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133e4:	75 0f                	jne    c00133f5 <Directory::create()+0x47>
c00133e6:	83 c2 0d             	add    edx,0xd
c00133e9:	50                   	push   eax
c00133ea:	50                   	push   eax
c00133eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133ed:	52                   	push   edx
c00133ee:	51                   	push   ecx
c00133ef:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	83 c4 0c             	add    esp,0xc
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00133fa:	b8 0a 00 00 00       	mov    eax,0xa
c00133ff:	c3                   	ret    

c0013400 <Bus::Bus(char const*)>:
c0013400:	83 ec 0c             	sub    esp,0xc
c0013403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013407:	83 ec 08             	sub    esp,0x8
c001340a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001340e:	50                   	push   eax
c001340f:	e8 88 09 00 00       	call   c0013d9c <Device::Device(char const*)>
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	89 10                	mov    DWORD PTR [eax],edx
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013430:	90                   	nop
c0013431:	83 c4 0c             	add    esp,0xc
c0013434:	c3                   	ret    
c0013435:	90                   	nop

c0013436 <Bus::~Bus()>:
c0013436:	83 ec 0c             	sub    esp,0xc
c0013439:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c001343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013442:	89 10                	mov    DWORD PTR [eax],edx
c0013444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	50                   	push   eax
c001344c:	e8 15 06 00 00       	call   c0013a66 <Device::~Device()>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	90                   	nop
c0013455:	83 c4 0c             	add    esp,0xc
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <Bus::~Bus()>:
c001345a:	83 ec 0c             	sub    esp,0xc
c001345d:	83 ec 0c             	sub    esp,0xc
c0013460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013464:	e8 cd ff ff ff       	call   c0013436 <Bus::~Bus()>
c0013469:	83 c4 10             	add    esp,0x10
c001346c:	83 ec 08             	sub    esp,0x8
c001346f:	68 58 01 00 00       	push   0x158
c0013474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013478:	e8 0a f2 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	83 c4 0c             	add    esp,0xc
c0013483:	c3                   	ret    

c0013484 <Buzzer::Buzzer(char const*)>:
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001348b:	83 ec 08             	sub    esp,0x8
c001348e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013492:	50                   	push   eax
c0013493:	e8 04 09 00 00       	call   c0013d9c <Device::Device(char const*)>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	ba 40 aa 02 c0       	mov    edx,0xc002aa40
c00134a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a4:	89 10                	mov    DWORD PTR [eax],edx
c00134a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134c2:	90                   	nop
c00134c3:	83 c4 0c             	add    esp,0xc
c00134c6:	c3                   	ret    
c00134c7:	90                   	nop

c00134c8 <Buzzer::~Buzzer()>:
c00134c8:	83 ec 0c             	sub    esp,0xc
c00134cb:	ba 40 aa 02 c0       	mov    edx,0xc002aa40
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	89 10                	mov    DWORD PTR [eax],edx
c00134d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134da:	83 ec 0c             	sub    esp,0xc
c00134dd:	50                   	push   eax
c00134de:	e8 83 05 00 00       	call   c0013a66 <Device::~Device()>
c00134e3:	83 c4 10             	add    esp,0x10
c00134e6:	90                   	nop
c00134e7:	83 c4 0c             	add    esp,0xc
c00134ea:	c3                   	ret    
c00134eb:	90                   	nop

c00134ec <Buzzer::~Buzzer()>:
c00134ec:	83 ec 0c             	sub    esp,0xc
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f6:	e8 cd ff ff ff       	call   c00134c8 <Buzzer::~Buzzer()>
c00134fb:	83 c4 10             	add    esp,0x10
c00134fe:	83 ec 08             	sub    esp,0x8
c0013501:	68 5c 01 00 00       	push   0x15c
c0013506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001350a:	e8 78 f1 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 c4 0c             	add    esp,0xc
c0013515:	c3                   	ret    

c0013516 <Buzzer::stop()>:
c0013516:	83 ec 14             	sub    esp,0x14
c0013519:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001351d:	8b 10                	mov    edx,DWORD PTR [eax]
c001351f:	6a 00                	push   0x0
c0013521:	50                   	push   eax
c0013522:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013525:	83 c4 1c             	add    esp,0x1c
c0013528:	c3                   	ret    

c0013529 <beepThread(void*)>:
c0013529:	53                   	push   ebx
c001352a:	83 ec 08             	sub    esp,0x8
c001352d:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0013532:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013536:	48                   	dec    eax
c0013537:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001353c:	75 01                	jne    c001353f <beepThread(void*)+0x16>
c001353e:	fb                   	sti    
c001353f:	50                   	push   eax
c0013540:	50                   	push   eax
c0013541:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013546:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001354c:	52                   	push   edx
c001354d:	50                   	push   eax
c001354e:	e8 e2 a7 00 00       	call   c001dd35 <nanoSleep(unsigned long long)>
c0013553:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013556:	e8 bb ff ff ff       	call   c0013516 <Buzzer::stop()>
c001355b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013563:	83 c4 18             	add    esp,0x18
c0013566:	5b                   	pop    ebx
c0013567:	e9 c5 a6 00 00       	jmp    c001dc31 <blockTask(TaskState)>

c001356c <Buzzer::beep(int, int, bool)>:
c001356c:	57                   	push   edi
c001356d:	56                   	push   esi
c001356e:	53                   	push   ebx
c001356f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013573:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013577:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001357b:	52                   	push   edx
c001357c:	52                   	push   edx
c001357d:	8b 06                	mov    eax,DWORD PTR [esi]
c001357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013583:	56                   	push   esi
c0013584:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	89 f8                	mov    eax,edi
c001358c:	84 c0                	test   al,al
c001358e:	74 1f                	je     c00135af <Buzzer::beep(int, int, bool)+0x43>
c0013590:	50                   	push   eax
c0013591:	50                   	push   eax
c0013592:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013598:	99                   	cdq    
c0013599:	52                   	push   edx
c001359a:	50                   	push   eax
c001359b:	e8 95 a7 00 00       	call   c001dd35 <nanoSleep(unsigned long long)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135a7:	5b                   	pop    ebx
c00135a8:	5e                   	pop    esi
c00135a9:	5f                   	pop    edi
c00135aa:	e9 67 ff ff ff       	jmp    c0013516 <Buzzer::stop()>
c00135af:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135b5:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00135ba:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135c2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135c6:	c7 44 24 14 29 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013529
c00135ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135d2:	5b                   	pop    ebx
c00135d3:	5e                   	pop    esi
c00135d4:	5f                   	pop    edi
c00135d5:	e9 5c a2 00 00       	jmp    c001d836 <Process::createThread(void (*)(void*), void*, int)>

c00135da <User::loadClockSettings(int)>:
c00135da:	53                   	push   ebx
c00135db:	83 ec 14             	sub    esp,0x14
c00135de:	68 14 01 00 00       	push   0x114
c00135e3:	e8 b1 bf ff ff       	call   c000f599 <malloc>
c00135e8:	83 c4 0c             	add    esp,0xc
c00135eb:	89 c3                	mov    ebx,eax
c00135ed:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c00135f3:	68 68 aa 02 c0       	push   0xc002aa68
c00135f8:	50                   	push   eax
c00135f9:	e8 c0 f6 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c00135fe:	58                   	pop    eax
c00135ff:	5a                   	pop    edx
c0013600:	6a 01                	push   0x1
c0013602:	53                   	push   ebx
c0013603:	e8 1a f7 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c0013608:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001360b:	e8 70 f7 ff ff       	call   c0012d80 <File::close()>
c0013610:	83 c4 10             	add    esp,0x10
c0013613:	85 db                	test   ebx,ebx
c0013615:	74 0f                	je     c0013626 <User::loadClockSettings(int)+0x4c>
c0013617:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013619:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001361d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013620:	83 c4 08             	add    esp,0x8
c0013623:	5b                   	pop    ebx
c0013624:	ff e0                	jmp    eax
c0013626:	83 c4 08             	add    esp,0x8
c0013629:	5b                   	pop    ebx
c001362a:	c3                   	ret    
c001362b:	90                   	nop

c001362c <Clock::Clock(char const*)>:
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013633:	83 ec 08             	sub    esp,0x8
c0013636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363a:	50                   	push   eax
c001363b:	e8 5c 07 00 00       	call   c0013d9c <Device::Device(char const*)>
c0013640:	83 c4 10             	add    esp,0x10
c0013643:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c0013648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364c:	89 10                	mov    DWORD PTR [eax],edx
c001364e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013652:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001365c:	90                   	nop
c001365d:	83 c4 0c             	add    esp,0xc
c0013660:	c3                   	ret    
c0013661:	90                   	nop

c0013662 <Clock::~Clock()>:
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	ba 90 aa 02 c0       	mov    edx,0xc002aa90
c001366a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366e:	89 10                	mov    DWORD PTR [eax],edx
c0013670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013674:	83 ec 0c             	sub    esp,0xc
c0013677:	50                   	push   eax
c0013678:	e8 e9 03 00 00       	call   c0013a66 <Device::~Device()>
c001367d:	83 c4 10             	add    esp,0x10
c0013680:	90                   	nop
c0013681:	83 c4 0c             	add    esp,0xc
c0013684:	c3                   	ret    
c0013685:	90                   	nop

c0013686 <Clock::~Clock()>:
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	83 ec 0c             	sub    esp,0xc
c001368c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013690:	e8 cd ff ff ff       	call   c0013662 <Clock::~Clock()>
c0013695:	83 c4 10             	add    esp,0x10
c0013698:	83 ec 08             	sub    esp,0x8
c001369b:	68 58 01 00 00       	push   0x158
c00136a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a4:	e8 de ef ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	83 c4 0c             	add    esp,0xc
c00136af:	c3                   	ret    

c00136b0 <Clock::timeInSecondsLocal()>:
c00136b0:	53                   	push   ebx
c00136b1:	83 ec 14             	sub    esp,0x14
c00136b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ba:	50                   	push   eax
c00136bb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136be:	0f b6 0d dc db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dbdc
c00136c5:	03 0d e0 db 02 c0    	add    ecx,DWORD PTR ds:0xc002dbe0
c00136cb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136d1:	89 cb                	mov    ebx,ecx
c00136d3:	c1 fb 1f             	sar    ebx,0x1f
c00136d6:	01 c8                	add    eax,ecx
c00136d8:	11 da                	adc    edx,ebx
c00136da:	83 c4 10             	add    esp,0x10
c00136dd:	31 c9                	xor    ecx,ecx
c00136df:	80 3d dd db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbdd,0x0
c00136e6:	74 05                	je     c00136ed <Clock::timeInSecondsLocal()+0x3d>
c00136e8:	b9 08 07 00 00       	mov    ecx,0x708
c00136ed:	31 db                	xor    ebx,ebx
c00136ef:	01 c8                	add    eax,ecx
c00136f1:	11 da                	adc    edx,ebx
c00136f3:	83 c4 08             	add    esp,0x8
c00136f6:	5b                   	pop    ebx
c00136f7:	c3                   	ret    

c00136f8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136f8:	57                   	push   edi
c00136f9:	56                   	push   esi
c00136fa:	53                   	push   ebx
c00136fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013703:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013705:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013709:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001370c:	0f b6 05 dc db 02 c0 	movzx  eax,BYTE PTR ds:0xc002dbdc
c0013713:	03 05 e0 db 02 c0    	add    eax,DWORD PTR ds:0xc002dbe0
c0013719:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001371f:	99                   	cdq    
c0013720:	29 c6                	sub    esi,eax
c0013722:	19 d7                	sbb    edi,edx
c0013724:	89 f0                	mov    eax,esi
c0013726:	89 fa                	mov    edx,edi
c0013728:	31 f6                	xor    esi,esi
c001372a:	80 3d dd db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbdd,0x0
c0013731:	74 05                	je     c0013738 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013733:	be 08 07 00 00       	mov    esi,0x708
c0013738:	31 ff                	xor    edi,edi
c001373a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001373e:	29 f0                	sub    eax,esi
c0013740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013744:	19 fa                	sbb    edx,edi
c0013746:	89 d8                	mov    eax,ebx
c0013748:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001374c:	5b                   	pop    ebx
c001374d:	5e                   	pop    esi
c001374e:	5f                   	pop    edi
c001374f:	ff e0                	jmp    eax

c0013751 <datetimeToSeconds(datetime_t)>:
c0013751:	55                   	push   ebp
c0013752:	57                   	push   edi
c0013753:	56                   	push   esi
c0013754:	53                   	push   ebx
c0013755:	83 ec 14             	sub    esp,0x14
c0013758:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001375c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013760:	89 d3                	mov    ebx,edx
c0013762:	0f b6 c6             	movzx  eax,dh
c0013765:	c1 eb 10             	shr    ebx,0x10
c0013768:	48                   	dec    eax
c0013769:	66 81 eb 6c 07       	sub    bx,0x76c
c001376e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013772:	0f b6 f5             	movzx  esi,ch
c0013775:	89 cf                	mov    edi,ecx
c0013777:	6b f6 3c             	imul   esi,esi,0x3c
c001377a:	c1 ef 10             	shr    edi,0x10
c001377d:	0f b6 c9             	movzx  ecx,cl
c0013780:	89 f8                	mov    eax,edi
c0013782:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013788:	0f b6 f8             	movzx  edi,al
c001378b:	0f b6 d2             	movzx  edx,dl
c001378e:	01 fe                	add    esi,edi
c0013790:	01 f1                	add    ecx,esi
c0013792:	0f b7 f3             	movzx  esi,bx
c0013795:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013799:	c1 f9 1f             	sar    ecx,0x1f
c001379c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137a5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137aa:	8b 0c 8d e0 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5520]
c00137b1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137b5:	76 29                	jbe    c00137e0 <datetimeToSeconds(datetime_t)+0x8f>
c00137b7:	f6 c3 03             	test   bl,0x3
c00137ba:	75 24                	jne    c00137e0 <datetimeToSeconds(datetime_t)+0x8f>
c00137bc:	31 d2                	xor    edx,edx
c00137be:	bf 64 00 00 00       	mov    edi,0x64
c00137c3:	89 d8                	mov    eax,ebx
c00137c5:	66 f7 f7             	div    di
c00137c8:	66 85 d2             	test   dx,dx
c00137cb:	75 12                	jne    c00137df <datetimeToSeconds(datetime_t)+0x8e>
c00137cd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137d3:	bf 90 01 00 00       	mov    edi,0x190
c00137d8:	99                   	cdq    
c00137d9:	f7 ff                	idiv   edi
c00137db:	85 d2                	test   edx,edx
c00137dd:	75 01                	jne    c00137e0 <datetimeToSeconds(datetime_t)+0x8f>
c00137df:	41                   	inc    ecx
c00137e0:	66 83 fb 46          	cmp    bx,0x46
c00137e4:	76 45                	jbe    c001382b <datetimeToSeconds(datetime_t)+0xda>
c00137e6:	bb 46 00 00 00       	mov    ebx,0x46
c00137eb:	bf 64 00 00 00       	mov    edi,0x64
c00137f0:	bd 90 01 00 00       	mov    ebp,0x190
c00137f5:	b8 6d 01 00 00       	mov    eax,0x16d
c00137fa:	f6 c3 03             	test   bl,0x3
c00137fd:	75 23                	jne    c0013822 <datetimeToSeconds(datetime_t)+0xd1>
c00137ff:	89 d8                	mov    eax,ebx
c0013801:	99                   	cdq    
c0013802:	f7 ff                	idiv   edi
c0013804:	b8 6e 01 00 00       	mov    eax,0x16e
c0013809:	85 d2                	test   edx,edx
c001380b:	75 15                	jne    c0013822 <datetimeToSeconds(datetime_t)+0xd1>
c001380d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013813:	99                   	cdq    
c0013814:	f7 fd                	idiv   ebp
c0013816:	83 fa 01             	cmp    edx,0x1
c0013819:	19 c0                	sbb    eax,eax
c001381b:	f7 d0                	not    eax
c001381d:	05 6e 01 00 00       	add    eax,0x16e
c0013822:	01 c1                	add    ecx,eax
c0013824:	43                   	inc    ebx
c0013825:	39 f3                	cmp    ebx,esi
c0013827:	7c cc                	jl     c00137f5 <datetimeToSeconds(datetime_t)+0xa4>
c0013829:	eb 35                	jmp    c0013860 <datetimeToSeconds(datetime_t)+0x10f>
c001382b:	74 33                	je     c0013860 <datetimeToSeconds(datetime_t)+0x10f>
c001382d:	b8 45 00 00 00       	mov    eax,0x45
c0013832:	89 c2                	mov    edx,eax
c0013834:	83 e2 03             	and    edx,0x3
c0013837:	39 f0                	cmp    eax,esi
c0013839:	7e 0f                	jle    c001384a <datetimeToSeconds(datetime_t)+0xf9>
c001383b:	83 fa 01             	cmp    edx,0x1
c001383e:	19 d2                	sbb    edx,edx
c0013840:	48                   	dec    eax
c0013841:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013848:	eb e8                	jmp    c0013832 <datetimeToSeconds(datetime_t)+0xe1>
c001384a:	b8 6d 01 00 00       	mov    eax,0x16d
c001384f:	85 d2                	test   edx,edx
c0013851:	75 0b                	jne    c001385e <datetimeToSeconds(datetime_t)+0x10d>
c0013853:	66 83 fb 01          	cmp    bx,0x1
c0013857:	19 c0                	sbb    eax,eax
c0013859:	05 6e 01 00 00       	add    eax,0x16e
c001385e:	29 c1                	sub    ecx,eax
c0013860:	b8 80 51 01 00       	mov    eax,0x15180
c0013865:	f7 e9                	imul   ecx
c0013867:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001386b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001386f:	83 c4 14             	add    esp,0x14
c0013872:	5b                   	pop    ebx
c0013873:	5e                   	pop    esi
c0013874:	5f                   	pop    edi
c0013875:	5d                   	pop    ebp
c0013876:	c3                   	ret    
c0013877:	90                   	nop

c0013878 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013878:	57                   	push   edi
c0013879:	56                   	push   esi
c001387a:	53                   	push   ebx
c001387b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001387f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013881:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013884:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013888:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001388c:	e8 c0 fe ff ff       	call   c0013751 <datetimeToSeconds(datetime_t)>
c0013891:	59                   	pop    ecx
c0013892:	0f b6 0d dc db 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dbdc
c0013899:	5b                   	pop    ebx
c001389a:	03 0d e0 db 02 c0    	add    ecx,DWORD PTR ds:0xc002dbe0
c00138a0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138a6:	89 cb                	mov    ebx,ecx
c00138a8:	c1 fb 1f             	sar    ebx,0x1f
c00138ab:	29 c8                	sub    eax,ecx
c00138ad:	19 da                	sbb    edx,ebx
c00138af:	31 c9                	xor    ecx,ecx
c00138b1:	80 3d dd db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbdd,0x0
c00138b8:	74 05                	je     c00138bf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138ba:	b9 08 07 00 00       	mov    ecx,0x708
c00138bf:	31 db                	xor    ebx,ebx
c00138c1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138c5:	29 c8                	sub    eax,ecx
c00138c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138cb:	19 da                	sbb    edx,ebx
c00138cd:	89 f8                	mov    eax,edi
c00138cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138d3:	5b                   	pop    ebx
c00138d4:	5e                   	pop    esi
c00138d5:	5f                   	pop    edi
c00138d6:	ff e0                	jmp    eax

c00138d8 <secondsToDatetime(unsigned long long)>:
c00138d8:	55                   	push   ebp
c00138d9:	57                   	push   edi
c00138da:	56                   	push   esi
c00138db:	53                   	push   ebx
c00138dc:	83 ec 1c             	sub    esp,0x1c
c00138df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138eb:	6a 00                	push   0x0
c00138ed:	68 80 51 01 00       	push   0x15180
c00138f2:	55                   	push   ebp
c00138f3:	57                   	push   edi
c00138f4:	e8 ab 2e 01 00       	call   c00267a4 <__udivdi3>
c00138f9:	83 c4 10             	add    esp,0x10
c00138fc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013902:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013906:	6a 00                	push   0x0
c0013908:	68 80 51 01 00       	push   0x15180
c001390d:	55                   	push   ebp
c001390e:	57                   	push   edi
c001390f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013914:	e8 8b 2f 01 00       	call   c00268a4 <__umoddi3>
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	99                   	cdq    
c001391d:	f7 ff                	idiv   edi
c001391f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013924:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013927:	89 d0                	mov    eax,edx
c0013929:	99                   	cdq    
c001392a:	f7 ff                	idiv   edi
c001392c:	85 db                	test   ebx,ebx
c001392e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013931:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013934:	79 11                	jns    c0013947 <secondsToDatetime(unsigned long long)+0x6f>
c0013936:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001393a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013940:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013945:	eb 07                	jmp    c001394e <secondsToDatetime(unsigned long long)+0x76>
c0013947:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001394c:	89 d8                	mov    eax,ebx
c001394e:	bf b4 05 00 00       	mov    edi,0x5b4
c0013953:	99                   	cdq    
c0013954:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013959:	f7 f9                	idiv   ecx
c001395b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013960:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013964:	31 d2                	xor    edx,edx
c0013966:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001396e:	01 c3                	add    ebx,eax
c0013970:	89 d8                	mov    eax,ebx
c0013972:	f7 f1                	div    ecx
c0013974:	31 d2                	xor    edx,edx
c0013976:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013979:	89 d8                	mov    eax,ebx
c001397b:	f7 f7                	div    edi
c001397d:	31 d2                	xor    edx,edx
c001397f:	29 c1                	sub    ecx,eax
c0013981:	89 d8                	mov    eax,ebx
c0013983:	f7 f5                	div    ebp
c0013985:	bd 6d 01 00 00       	mov    ebp,0x16d
c001398a:	29 c1                	sub    ecx,eax
c001398c:	31 d2                	xor    edx,edx
c001398e:	89 c8                	mov    eax,ecx
c0013990:	f7 f5                	div    ebp
c0013992:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001399b:	31 d2                	xor    edx,edx
c001399d:	89 c8                	mov    eax,ecx
c001399f:	f7 f5                	div    ebp
c00139a1:	31 d2                	xor    edx,edx
c00139a3:	01 c3                	add    ebx,eax
c00139a5:	89 c8                	mov    eax,ecx
c00139a7:	f7 f7                	div    edi
c00139a9:	bf 99 00 00 00       	mov    edi,0x99
c00139ae:	29 c3                	sub    ebx,eax
c00139b0:	31 d2                	xor    edx,edx
c00139b2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139ba:	29 c3                	sub    ebx,eax
c00139bc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139bf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139c2:	bb 05 00 00 00       	mov    ebx,0x5
c00139c7:	83 c1 02             	add    ecx,0x2
c00139ca:	89 c8                	mov    eax,ecx
c00139cc:	f7 f7                	div    edi
c00139ce:	31 d2                	xor    edx,edx
c00139d0:	89 c7                	mov    edi,eax
c00139d2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139d8:	83 c0 02             	add    eax,0x2
c00139db:	f7 f3                	div    ebx
c00139dd:	89 eb                	mov    ebx,ebp
c00139df:	29 c3                	sub    ebx,eax
c00139e1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139e7:	88 1e                	mov    BYTE PTR [esi],bl
c00139e9:	19 c0                	sbb    eax,eax
c00139eb:	31 d2                	xor    edx,edx
c00139ed:	83 e0 0c             	and    eax,0xc
c00139f0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139f4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139fc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a00:	83 f9 01             	cmp    ecx,0x1
c0013a03:	0f 96 c2             	setbe  dl
c0013a06:	41                   	inc    ecx
c0013a07:	01 d0                	add    eax,edx
c0013a09:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a0c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a10:	83 c4 1c             	add    esp,0x1c
c0013a13:	89 f0                	mov    eax,esi
c0013a15:	5b                   	pop    ebx
c0013a16:	5e                   	pop    esi
c0013a17:	5f                   	pop    edi
c0013a18:	5d                   	pop    ebp
c0013a19:	c2 04 00             	ret    0x4

c0013a1c <Clock::timeInDatetimeLocal()>:
c0013a1c:	53                   	push   ebx
c0013a1d:	83 ec 14             	sub    esp,0x14
c0013a20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a28:	e8 83 fc ff ff       	call   c00136b0 <Clock::timeInSecondsLocal()>
c0013a2d:	83 c4 0c             	add    esp,0xc
c0013a30:	52                   	push   edx
c0013a31:	50                   	push   eax
c0013a32:	53                   	push   ebx
c0013a33:	e8 a0 fe ff ff       	call   c00138d8 <secondsToDatetime(unsigned long long)>
c0013a38:	89 d8                	mov    eax,ebx
c0013a3a:	83 c4 14             	add    esp,0x14
c0013a3d:	5b                   	pop    ebx
c0013a3e:	c2 04 00             	ret    0x4
c0013a41:	90                   	nop

c0013a42 <Device::hibernate()>:
c0013a42:	c3                   	ret    
c0013a43:	90                   	nop

c0013a44 <Device::wake()>:
c0013a44:	c3                   	ret    
c0013a45:	90                   	nop

c0013a46 <Device::detect()>:
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Device::disableLegacy()>:
c0013a48:	c3                   	ret    
c0013a49:	90                   	nop

c0013a4a <Device::powerSaving(PowerSavingLevel)>:
c0013a4a:	c3                   	ret    
c0013a4b:	90                   	nop

c0013a4c <DriverlessDevice::close(int, int, void*)>:
c0013a4c:	31 c0                	xor    eax,eax
c0013a4e:	c3                   	ret    
c0013a4f:	90                   	nop

c0013a50 <DriverlessDevice::detect()>:
c0013a50:	c3                   	ret    
c0013a51:	90                   	nop

c0013a52 <DriverlessDevice::open(int, int, void*)>:
c0013a52:	83 ec 18             	sub    esp,0x18
c0013a55:	68 10 ab 02 c0       	push   0xc002ab10
c0013a5a:	e8 6c 64 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0013a5f:	83 c8 ff             	or     eax,0xffffffff
c0013a62:	83 c4 1c             	add    esp,0x1c
c0013a65:	c3                   	ret    

c0013a66 <Device::~Device()>:
c0013a66:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c0013a6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a6f:	89 10                	mov    DWORD PTR [eax],edx
c0013a71:	90                   	nop
c0013a72:	c3                   	ret    
c0013a73:	90                   	nop

c0013a74 <Device::~Device()>:
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a7b:	e8 e6 ff ff ff       	call   c0013a66 <Device::~Device()>
c0013a80:	83 c4 04             	add    esp,0x4
c0013a83:	83 ec 08             	sub    esp,0x8
c0013a86:	68 58 01 00 00       	push   0x158
c0013a8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a8f:	e8 f3 eb ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0013a94:	83 c4 10             	add    esp,0x10
c0013a97:	83 c4 0c             	add    esp,0xc
c0013a9a:	c3                   	ret    
c0013a9b:	90                   	nop

c0013a9c <Device::findAndLoadDriver()>:
c0013a9c:	c7 44 24 04 2e ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab2e
c0013aa4:	e9 b6 ec ff ff       	jmp    c001275f <Dbg::kprintf(char const*, ...)>
c0013aa9:	90                   	nop

c0013aaa <Device::preOpenPCI(PCIDeviceInfo)>:
c0013aaa:	57                   	push   edi
c0013aab:	b9 09 00 00 00       	mov    ecx,0x9
c0013ab0:	56                   	push   esi
c0013ab1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ab5:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013ab9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ac3:	81 c7 18 01 00 00    	add    edi,0x118
c0013ac9:	fc                   	cld    
c0013aca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013acc:	5e                   	pop    esi
c0013acd:	5f                   	pop    edi
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Device::preOpenACPI(void*, char*, char*)>:
c0013ad0:	57                   	push   edi
c0013ad1:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013ad6:	56                   	push   esi
c0013ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013adb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013adf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013ae9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013aef:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013af5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013afb:	b9 0e 00 00 00       	mov    ecx,0xe
c0013b00:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013b06:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b0c:	5e                   	pop    esi
c0013b0d:	5f                   	pop    edi
c0013b0e:	c3                   	ret    
c0013b0f:	90                   	nop

c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b14:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b19:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b20:	75 0b                	jne    c0013b2d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b24:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b2b:	eb 1e                	jmp    c0013b4b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b2d:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0013b32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b38:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b3e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b40:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b48:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b4b:	ff e0                	jmp    eax
c0013b4d:	90                   	nop

c0013b4e <Device::getParent()>:
c0013b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b52:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b5e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b63:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b6a:	75 0b                	jne    c0013b77 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b72:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b75:	eb 1e                	jmp    c0013b95 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b77:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0013b7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b82:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b88:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b92:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b95:	ff e0                	jmp    eax
c0013b97:	90                   	nop

c0013b98 <Device::addChild(Device*)>:
c0013b98:	53                   	push   ebx
c0013b99:	83 ec 08             	sub    esp,0x8
c0013b9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ba4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013baa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013bb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013bb2:	85 d2                	test   edx,edx
c0013bb4:	74 04                	je     c0013bba <Device::addChild(Device*)+0x22>
c0013bb6:	89 d3                	mov    ebx,edx
c0013bb8:	eb f6                	jmp    c0013bb0 <Device::addChild(Device*)+0x18>
c0013bba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bbd:	83 ec 0c             	sub    esp,0xc
c0013bc0:	6a 08                	push   0x8
c0013bc2:	e8 d2 b9 ff ff       	call   c000f599 <malloc>
c0013bc7:	89 03                	mov    DWORD PTR [ebx],eax
c0013bc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bd6:	83 c4 18             	add    esp,0x18
c0013bd9:	5b                   	pop    ebx
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <Device::removeAllChildren()>:
c0013bdc:	56                   	push   esi
c0013bdd:	53                   	push   ebx
c0013bde:	52                   	push   edx
c0013bdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013be3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013be9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bec:	74 17                	je     c0013c05 <Device::removeAllChildren()+0x29>
c0013bee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bf1:	85 c0                	test   eax,eax
c0013bf3:	74 0c                	je     c0013c01 <Device::removeAllChildren()+0x25>
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bfa:	50                   	push   eax
c0013bfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c03:	eb e4                	jmp    c0013be9 <Device::removeAllChildren()+0xd>
c0013c05:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c11:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c1e:	58                   	pop    eax
c0013c1f:	5b                   	pop    ebx
c0013c20:	5e                   	pop    esi
c0013c21:	c3                   	ret    

c0013c22 <Device::hibernateAll()>:
c0013c22:	53                   	push   ebx
c0013c23:	83 ec 14             	sub    esp,0x14
c0013c26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2c:	53                   	push   ebx
c0013c2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c36:	83 c4 10             	add    esp,0x10
c0013c39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c3c:	74 0f                	je     c0013c4d <Device::hibernateAll()+0x2b>
c0013c3e:	83 ec 0c             	sub    esp,0xc
c0013c41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c44:	e8 d9 ff ff ff       	call   c0013c22 <Device::hibernateAll()>
c0013c49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c4b:	eb e9                	jmp    c0013c36 <Device::hibernateAll()+0x14>
c0013c4d:	83 c4 08             	add    esp,0x8
c0013c50:	5b                   	pop    ebx
c0013c51:	c3                   	ret    

c0013c52 <Device::wakeAll()>:
c0013c52:	53                   	push   ebx
c0013c53:	83 ec 14             	sub    esp,0x14
c0013c56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c5c:	53                   	push   ebx
c0013c5d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c66:	83 c4 10             	add    esp,0x10
c0013c69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c6c:	74 0f                	je     c0013c7d <Device::wakeAll()+0x2b>
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c74:	e8 d9 ff ff ff       	call   c0013c52 <Device::wakeAll()>
c0013c79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7b:	eb e9                	jmp    c0013c66 <Device::wakeAll()+0x14>
c0013c7d:	83 c4 08             	add    esp,0x8
c0013c80:	5b                   	pop    ebx
c0013c81:	c3                   	ret    

c0013c82 <Device::detectAll()>:
c0013c82:	53                   	push   ebx
c0013c83:	83 ec 14             	sub    esp,0x14
c0013c86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c8c:	53                   	push   ebx
c0013c8d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c9c:	74 0f                	je     c0013cad <Device::detectAll()+0x2b>
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ca4:	e8 d9 ff ff ff       	call   c0013c82 <Device::detectAll()>
c0013ca9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cab:	eb e9                	jmp    c0013c96 <Device::detectAll()+0x14>
c0013cad:	83 c4 08             	add    esp,0x8
c0013cb0:	5b                   	pop    ebx
c0013cb1:	c3                   	ret    

c0013cb2 <Device::disableLegacyAll()>:
c0013cb2:	53                   	push   ebx
c0013cb3:	83 ec 14             	sub    esp,0x14
c0013cb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cbc:	53                   	push   ebx
c0013cbd:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cc0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ccc:	74 0f                	je     c0013cdd <Device::disableLegacyAll()+0x2b>
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd4:	e8 d9 ff ff ff       	call   c0013cb2 <Device::disableLegacyAll()>
c0013cd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdb:	eb e9                	jmp    c0013cc6 <Device::disableLegacyAll()+0x14>
c0013cdd:	83 c4 08             	add    esp,0x8
c0013ce0:	5b                   	pop    ebx
c0013ce1:	c3                   	ret    

c0013ce2 <Device::loadDriversForAll()>:
c0013ce2:	53                   	push   ebx
c0013ce3:	83 ec 08             	sub    esp,0x8
c0013ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cea:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013cf1:	75 0c                	jne    c0013cff <Device::loadDriversForAll()+0x1d>
c0013cf3:	83 ec 0c             	sub    esp,0xc
c0013cf6:	53                   	push   ebx
c0013cf7:	e8 a0 fd ff ff       	call   c0013a9c <Device::findAndLoadDriver()>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d08:	74 12                	je     c0013d1c <Device::loadDriversForAll()+0x3a>
c0013d0a:	83 ec 0c             	sub    esp,0xc
c0013d0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d10:	e8 cd ff ff ff       	call   c0013ce2 <Device::loadDriversForAll()>
c0013d15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d17:	83 c4 10             	add    esp,0x10
c0013d1a:	eb e9                	jmp    c0013d05 <Device::loadDriversForAll()+0x23>
c0013d1c:	83 c4 08             	add    esp,0x8
c0013d1f:	5b                   	pop    ebx
c0013d20:	c3                   	ret    
c0013d21:	90                   	nop

c0013d22 <Device::closeAll()>:
c0013d22:	53                   	push   ebx
c0013d23:	83 ec 08             	sub    esp,0x8
c0013d26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2c:	6a 00                	push   0x0
c0013d2e:	6a 00                	push   0x0
c0013d30:	6a 00                	push   0x0
c0013d32:	53                   	push   ebx
c0013d33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d3c:	83 c4 10             	add    esp,0x10
c0013d3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d42:	74 0f                	je     c0013d53 <Device::closeAll()+0x31>
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4a:	e8 d3 ff ff ff       	call   c0013d22 <Device::closeAll()>
c0013d4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d51:	eb e9                	jmp    c0013d3c <Device::closeAll()+0x1a>
c0013d53:	83 c4 08             	add    esp,0x8
c0013d56:	5b                   	pop    ebx
c0013d57:	c3                   	ret    

c0013d58 <Device::powerSavingAll(PowerSavingLevel)>:
c0013d58:	56                   	push   esi
c0013d59:	53                   	push   ebx
c0013d5a:	83 ec 0c             	sub    esp,0xc
c0013d5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d61:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d67:	56                   	push   esi
c0013d68:	53                   	push   ebx
c0013d69:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d6c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d78:	74 0f                	je     c0013d89 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d7a:	52                   	push   edx
c0013d7b:	52                   	push   edx
c0013d7c:	56                   	push   esi
c0013d7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d80:	e8 d3 ff ff ff       	call   c0013d58 <Device::powerSavingAll(PowerSavingLevel)>
c0013d85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d87:	eb e9                	jmp    c0013d72 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d89:	58                   	pop    eax
c0013d8a:	5b                   	pop    ebx
c0013d8b:	5e                   	pop    esi
c0013d8c:	c3                   	ret    
c0013d8d:	90                   	nop

c0013d8e <Device::setName(char const*)>:
c0013d8e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d96:	e9 71 ca fe ff       	jmp    c000080c <strcpy>
c0013d9b:	90                   	nop

c0013d9c <Device::Device(char const*)>:
c0013d9c:	83 ec 1c             	sub    esp,0x1c
c0013d9f:	ba 70 ab 02 c0       	mov    edx,0xc002ab70
c0013da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da8:	89 10                	mov    DWORD PTR [eax],edx
c0013daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dae:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dbc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dca:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013de2:	83 ec 08             	sub    esp,0x8
c0013de5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ded:	e8 9c ff ff ff       	call   c0013d8e <Device::setName(char const*)>
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013dfd:	83 ec 0c             	sub    esp,0xc
c0013e00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e04:	e8 90 b7 ff ff       	call   c000f599 <malloc>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e1d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e27:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e37:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e48:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e53:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e5e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e6c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e88:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013e92:	90                   	nop
c0013e93:	83 c4 1c             	add    esp,0x1c
c0013e96:	c3                   	ret    
c0013e97:	90                   	nop

c0013e98 <Device::getName()>:
c0013e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e9c:	05 d0 00 00 00       	add    eax,0xd0
c0013ea1:	c3                   	ret    

c0013ea2 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ea2:	83 ec 0c             	sub    esp,0xc
c0013ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea9:	83 ec 08             	sub    esp,0x8
c0013eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb0:	50                   	push   eax
c0013eb1:	e8 e6 fe ff ff       	call   c0013d9c <Device::Device(char const*)>
c0013eb6:	83 c4 10             	add    esp,0x10
c0013eb9:	ba 9c ab 02 c0       	mov    edx,0xc002ab9c
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	89 10                	mov    DWORD PTR [eax],edx
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ed2:	90                   	nop
c0013ed3:	83 c4 0c             	add    esp,0xc
c0013ed6:	c3                   	ret    
c0013ed7:	90                   	nop

c0013ed8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ed8:	57                   	push   edi
c0013ed9:	56                   	push   esi
c0013eda:	53                   	push   ebx
c0013edb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013edf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ee3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ee7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013eed:	75 0c                	jne    c0013efb <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013eef:	52                   	push   edx
c0013ef0:	52                   	push   edx
c0013ef1:	53                   	push   ebx
c0013ef2:	56                   	push   esi
c0013ef3:	e8 e8 47 01 00       	call   c00286e0 <LinkedList<Device>::addElement(Device*)>
c0013ef8:	83 c4 10             	add    esp,0x10
c0013efb:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f04:	74 12                	je     c0013f18 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f06:	50                   	push   eax
c0013f07:	57                   	push   edi
c0013f08:	56                   	push   esi
c0013f09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f0c:	e8 c7 ff ff ff       	call   c0013ed8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f13:	83 c4 10             	add    esp,0x10
c0013f16:	eb e9                	jmp    c0013f01 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f18:	5b                   	pop    ebx
c0013f19:	5e                   	pop    esi
c0013f1a:	5f                   	pop    edi
c0013f1b:	c3                   	ret    

c0013f1c <getDevicesOfType(DeviceType)>:
c0013f1c:	53                   	push   ebx
c0013f1d:	83 ec 14             	sub    esp,0x14
c0013f20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f24:	53                   	push   ebx
c0013f25:	e8 92 48 01 00       	call   c00287bc <LinkedList<Device>::LinkedList()>
c0013f2a:	83 c4 0c             	add    esp,0xc
c0013f2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f31:	53                   	push   ebx
c0013f32:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c0013f38:	e8 9b ff ff ff       	call   c0013ed8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f3d:	89 d8                	mov    eax,ebx
c0013f3f:	83 c4 18             	add    esp,0x18
c0013f42:	5b                   	pop    ebx
c0013f43:	c2 04 00             	ret    0x4

c0013f46 <HardDiskController::HardDiskController(char const*)>:
c0013f46:	83 ec 0c             	sub    esp,0xc
c0013f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4d:	83 ec 08             	sub    esp,0x8
c0013f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f54:	50                   	push   eax
c0013f55:	e8 42 fe ff ff       	call   c0013d9c <Device::Device(char const*)>
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c0013f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f66:	89 10                	mov    DWORD PTR [eax],edx
c0013f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f76:	90                   	nop
c0013f77:	83 c4 0c             	add    esp,0xc
c0013f7a:	c3                   	ret    
c0013f7b:	90                   	nop

c0013f7c <HardDiskController::~HardDiskController()>:
c0013f7c:	83 ec 0c             	sub    esp,0xc
c0013f7f:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c0013f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f88:	89 10                	mov    DWORD PTR [eax],edx
c0013f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8e:	83 ec 0c             	sub    esp,0xc
c0013f91:	50                   	push   eax
c0013f92:	e8 cf fa ff ff       	call   c0013a66 <Device::~Device()>
c0013f97:	83 c4 10             	add    esp,0x10
c0013f9a:	90                   	nop
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <HardDiskController::~HardDiskController()>:
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	83 ec 0c             	sub    esp,0xc
c0013fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013faa:	e8 cd ff ff ff       	call   c0013f7c <HardDiskController::~HardDiskController()>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	83 ec 08             	sub    esp,0x8
c0013fb5:	68 58 01 00 00       	push   0x158
c0013fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fbe:	e8 c4 e6 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	83 c4 0c             	add    esp,0xc
c0013fc9:	c3                   	ret    

c0013fca <PhysicalDisk::eject()>:
c0013fca:	83 c8 ff             	or     eax,0xffffffff
c0013fcd:	c3                   	ret    

c0013fce <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013fce:	83 ec 0c             	sub    esp,0xc
c0013fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd5:	83 ec 08             	sub    esp,0x8
c0013fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fdc:	50                   	push   eax
c0013fdd:	e8 ba fd ff ff       	call   c0013d9c <Device::Device(char const*)>
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0013fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fee:	89 10                	mov    DWORD PTR [eax],edx
c0013ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fff:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014018:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001401c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014026:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014030:	90                   	nop
c0014031:	83 c4 0c             	add    esp,0xc
c0014034:	c3                   	ret    
c0014035:	90                   	nop

c0014036 <PhysicalDisk::startCache()>:
c0014036:	56                   	push   esi
c0014037:	53                   	push   ebx
c0014038:	83 ec 10             	sub    esp,0x10
c001403b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001403f:	6a 44                	push   0x44
c0014041:	e8 53 b5 ff ff       	call   c000f599 <malloc>
c0014046:	89 c6                	mov    esi,eax
c0014048:	58                   	pop    eax
c0014049:	5a                   	pop    edx
c001404a:	53                   	push   ebx
c001404b:	56                   	push   esi
c001404c:	e8 71 28 00 00       	call   c00168c2 <VCache::VCache(PhysicalDisk*)>
c0014051:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014057:	83 c4 14             	add    esp,0x14
c001405a:	5b                   	pop    ebx
c001405b:	5e                   	pop    esi
c001405c:	c3                   	ret    
c001405d:	90                   	nop

c001405e <PhysicalDisk::~PhysicalDisk()>:
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	ba f4 ab 02 c0       	mov    edx,0xc002abf4
c0014066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406a:	89 10                	mov    DWORD PTR [eax],edx
c001406c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	50                   	push   eax
c0014074:	e8 ed f9 ff ff       	call   c0013a66 <Device::~Device()>
c0014079:	83 c4 10             	add    esp,0x10
c001407c:	90                   	nop
c001407d:	83 c4 0c             	add    esp,0xc
c0014080:	c3                   	ret    
c0014081:	90                   	nop

c0014082 <PhysicalDisk::~PhysicalDisk()>:
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408c:	e8 cd ff ff ff       	call   c001405e <PhysicalDisk::~PhysicalDisk()>
c0014091:	83 c4 10             	add    esp,0x10
c0014094:	83 ec 08             	sub    esp,0x8
c0014097:	68 6c 01 00 00       	push   0x16c
c001409c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140a0:	e8 e2 e5 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	83 c4 0c             	add    esp,0xc
c00140ab:	c3                   	ret    

c00140ac <FPU::FPU(char const*)>:
c00140ac:	83 ec 0c             	sub    esp,0xc
c00140af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b3:	83 ec 08             	sub    esp,0x8
c00140b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ba:	50                   	push   eax
c00140bb:	e8 dc fc ff ff       	call   c0013d9c <Device::Device(char const*)>
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	ba 38 ac 02 c0       	mov    edx,0xc002ac38
c00140c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140cc:	89 10                	mov    DWORD PTR [eax],edx
c00140ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00140dc:	90                   	nop
c00140dd:	83 c4 0c             	add    esp,0xc
c00140e0:	c3                   	ret    
c00140e1:	90                   	nop

c00140e2 <FPU::~FPU()>:
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	ba 38 ac 02 c0       	mov    edx,0xc002ac38
c00140ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ee:	89 10                	mov    DWORD PTR [eax],edx
c00140f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f4:	83 ec 0c             	sub    esp,0xc
c00140f7:	50                   	push   eax
c00140f8:	e8 69 f9 ff ff       	call   c0013a66 <Device::~Device()>
c00140fd:	83 c4 10             	add    esp,0x10
c0014100:	90                   	nop
c0014101:	83 c4 0c             	add    esp,0xc
c0014104:	c3                   	ret    
c0014105:	90                   	nop

c0014106 <FPU::~FPU()>:
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014110:	e8 cd ff ff ff       	call   c00140e2 <FPU::~FPU()>
c0014115:	83 c4 10             	add    esp,0x10
c0014118:	83 ec 08             	sub    esp,0x8
c001411b:	68 58 01 00 00       	push   0x158
c0014120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014124:	e8 5e e5 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	83 c4 0c             	add    esp,0xc
c001412f:	c3                   	ret    

c0014130 <setupFPU()>:
c0014130:	53                   	push   ebx
c0014131:	83 ec 08             	sub    esp,0x8
c0014134:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c001413a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014141:	74 19                	je     c001415c <setupFPU()+0x2c>
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	68 58 01 00 00       	push   0x158
c001414b:	e8 49 b4 ff ff       	call   c000f599 <malloc>
c0014150:	89 c3                	mov    ebx,eax
c0014152:	89 04 24             	mov    DWORD PTR [esp],eax
c0014155:	e8 cc 11 01 00       	call   c0025326 <AVX::AVX()>
c001415a:	eb 5b                	jmp    c00141b7 <setupFPU()+0x87>
c001415c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014162:	84 c0                	test   al,al
c0014164:	79 19                	jns    c001417f <setupFPU()+0x4f>
c0014166:	83 ec 0c             	sub    esp,0xc
c0014169:	68 58 01 00 00       	push   0x158
c001416e:	e8 26 b4 ff ff       	call   c000f599 <malloc>
c0014173:	89 c3                	mov    ebx,eax
c0014175:	89 04 24             	mov    DWORD PTR [esp],eax
c0014178:	e8 cf 12 01 00       	call   c002544c <SSE::SSE()>
c001417d:	eb 38                	jmp    c00141b7 <setupFPU()+0x87>
c001417f:	a8 20                	test   al,0x20
c0014181:	74 19                	je     c001419c <setupFPU()+0x6c>
c0014183:	83 ec 0c             	sub    esp,0xc
c0014186:	68 58 01 00 00       	push   0x158
c001418b:	e8 09 b4 ff ff       	call   c000f599 <malloc>
c0014190:	89 c3                	mov    ebx,eax
c0014192:	89 04 24             	mov    DWORD PTR [esp],eax
c0014195:	e8 1c 12 01 00       	call   c00253b6 <MMX::MMX()>
c001419a:	eb 1b                	jmp    c00141b7 <setupFPU()+0x87>
c001419c:	a8 10                	test   al,0x10
c001419e:	74 1c                	je     c00141bc <setupFPU()+0x8c>
c00141a0:	83 ec 0c             	sub    esp,0xc
c00141a3:	68 58 01 00 00       	push   0x158
c00141a8:	e8 ec b3 ff ff       	call   c000f599 <malloc>
c00141ad:	89 c3                	mov    ebx,eax
c00141af:	89 04 24             	mov    DWORD PTR [esp],eax
c00141b2:	e8 23 13 01 00       	call   c00254da <x87::x87()>
c00141b7:	83 c4 10             	add    esp,0x10
c00141ba:	eb 24                	jmp    c00141e0 <setupFPU()+0xb0>
c00141bc:	83 e0 ef             	and    eax,0xffffffef
c00141bf:	83 ec 0c             	sub    esp,0xc
c00141c2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141c8:	68 24 ac 02 c0       	push   0xc002ac24
c00141cd:	e8 8d e5 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00141d2:	0f 20 c0             	mov    eax,cr0
c00141d5:	83 c8 04             	or     eax,0x4
c00141d8:	0f 22 c0             	mov    cr0,eax
c00141db:	31 db                	xor    ebx,ebx
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	89 d8                	mov    eax,ebx
c00141e2:	83 c4 08             	add    esp,0x8
c00141e5:	5b                   	pop    ebx
c00141e6:	c3                   	ret    
c00141e7:	90                   	nop

c00141e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141f0:	c1 e0 04             	shl    eax,0x4
c00141f3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141f7:	8d 50 10             	lea    edx,[eax+0x10]
c00141fa:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014200:	74 08                	je     c001420a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014202:	83 c0 04             	add    eax,0x4
c0014205:	39 d0                	cmp    eax,edx
c0014207:	75 f1                	jne    c00141fa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014209:	c3                   	ret    
c001420a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014214:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001421e:	eb e2                	jmp    c0014202 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014220 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014220:	57                   	push   edi
c0014221:	31 c0                	xor    eax,eax
c0014223:	56                   	push   esi
c0014224:	53                   	push   ebx
c0014225:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014229:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001422d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014231:	89 da                	mov    edx,ebx
c0014233:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014237:	c1 e2 04             	shl    edx,0x4
c001423a:	01 ca                	add    edx,ecx
c001423c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014244:	74 16                	je     c001425c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014246:	40                   	inc    eax
c0014247:	83 f8 04             	cmp    eax,0x4
c001424a:	75 f0                	jne    c001423c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001424c:	c7 44 24 10 68 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac68
c0014254:	5b                   	pop    ebx
c0014255:	5e                   	pop    esi
c0014256:	5f                   	pop    edi
c0014257:	e9 6f 5c 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c001425c:	8d 04 98             	lea    eax,[eax+ebx*4]
c001425f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014262:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014268:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001426e:	5b                   	pop    ebx
c001426f:	5e                   	pop    esi
c0014270:	5f                   	pop    edi
c0014271:	c3                   	ret    

c0014272 <doubleFault(regs*, void*)>:
c0014272:	55                   	push   ebp
c0014273:	89 e5                	mov    ebp,esp
c0014275:	83 ec 08             	sub    esp,0x8
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	68 75 ac 02 c0       	push   0xc002ac75
c0014280:	e8 46 5c 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	90                   	nop
c0014289:	c9                   	leave  
c001428a:	c3                   	ret    
c001428b:	90                   	nop

c001428c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001428c:	56                   	push   esi
c001428d:	53                   	push   ebx
c001428e:	50                   	push   eax
c001428f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014293:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014297:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001429c:	75 35                	jne    c00142d3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001429e:	8d 43 20             	lea    eax,[ebx+0x20]
c00142a1:	31 d2                	xor    edx,edx
c00142a3:	89 c1                	mov    ecx,eax
c00142a5:	c1 e1 04             	shl    ecx,0x4
c00142a8:	01 f1                	add    ecx,esi
c00142aa:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142b2:	74 3e                	je     c00142f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142b4:	42                   	inc    edx
c00142b5:	83 fa 04             	cmp    edx,0x4
c00142b8:	75 f0                	jne    c00142aa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142ba:	83 ec 0c             	sub    esp,0xc
c00142bd:	68 8f ac 02 c0       	push   0xc002ac8f
c00142c2:	e8 04 5c 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00142c7:	83 c4 10             	add    esp,0x10
c00142ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142cf:	5a                   	pop    edx
c00142d0:	5b                   	pop    ebx
c00142d1:	5e                   	pop    esi
c00142d2:	c3                   	ret    
c00142d3:	83 ec 0c             	sub    esp,0xc
c00142d6:	56                   	push   esi
c00142d7:	e8 bc fb ff ff       	call   c0013e98 <Device::getName()>
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142e2:	75 ba                	jne    c001429e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142e4:	83 fb 0f             	cmp    ebx,0xf
c00142e7:	7f 29                	jg     c0014312 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142e9:	0f b6 9b c0 cc 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3340]
c00142f0:	eb ac                	jmp    c001429e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142f2:	8d 04 82             	lea    eax,[edx+eax*4]
c00142f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142f9:	8d 04 86             	lea    eax,[esi+eax*4]
c00142fc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014302:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014306:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001430c:	89 d8                	mov    eax,ebx
c001430e:	5a                   	pop    edx
c001430f:	5b                   	pop    ebx
c0014310:	5e                   	pop    esi
c0014311:	c3                   	ret    
c0014312:	83 ec 0c             	sub    esp,0xc
c0014315:	68 82 ac 02 c0       	push   0xc002ac82
c001431a:	e8 ac 5b 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c001431f:	83 c4 10             	add    esp,0x10
c0014322:	e9 77 ff ff ff       	jmp    c001429e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014327:	90                   	nop

c0014328 <InterruptController::clearAllHandlers(int, bool)>:
c0014328:	56                   	push   esi
c0014329:	53                   	push   ebx
c001432a:	52                   	push   edx
c001432b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001432f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014333:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014338:	75 61                	jne    c001439b <InterruptController::clearAllHandlers(int, bool)+0x73>
c001433a:	8d 46 20             	lea    eax,[esi+0x20]
c001433d:	c1 e6 04             	shl    esi,0x4
c0014340:	c1 e0 04             	shl    eax,0x4
c0014343:	01 de                	add    esi,ebx
c0014345:	01 d8                	add    eax,ebx
c0014347:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014351:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001435b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014365:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001436f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014379:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014383:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001438d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014397:	58                   	pop    eax
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	c3                   	ret    
c001439b:	83 ec 0c             	sub    esp,0xc
c001439e:	53                   	push   ebx
c001439f:	e8 f4 fa ff ff       	call   c0013e98 <Device::getName()>
c00143a4:	83 c4 10             	add    esp,0x10
c00143a7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143aa:	75 8e                	jne    c001433a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ac:	83 fe 0f             	cmp    esi,0xf
c00143af:	7f 09                	jg     c00143ba <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143b1:	0f b6 b6 c0 cc 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3340]
c00143b8:	eb 80                	jmp    c001433a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ba:	83 ec 0c             	sub    esp,0xc
c00143bd:	68 9c ac 02 c0       	push   0xc002ac9c
c00143c2:	e8 04 5b 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00143c7:	83 c4 10             	add    esp,0x10
c00143ca:	e9 6b ff ff ff       	jmp    c001433a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143cf:	90                   	nop

c00143d0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143d0:	56                   	push   esi
c00143d1:	53                   	push   ebx
c00143d2:	52                   	push   edx
c00143d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143db:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143e0:	75 3a                	jne    c001441c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00143e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143e6:	8d 50 20             	lea    edx,[eax+0x20]
c00143e9:	c1 e2 04             	shl    edx,0x4
c00143ec:	8d 04 16             	lea    eax,[esi+edx*1]
c00143ef:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143f3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143f9:	74 0b                	je     c0014406 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143fb:	83 c0 04             	add    eax,0x4
c00143fe:	39 d0                	cmp    eax,edx
c0014400:	75 f1                	jne    c00143f3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014402:	58                   	pop    eax
c0014403:	5b                   	pop    ebx
c0014404:	5e                   	pop    esi
c0014405:	c3                   	ret    
c0014406:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014410:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001441a:	eb df                	jmp    c00143fb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	56                   	push   esi
c0014420:	e8 73 fa ff ff       	call   c0013e98 <Device::getName()>
c0014425:	83 c4 10             	add    esp,0x10
c0014428:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001442b:	75 b5                	jne    c00143e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001442d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014432:	7f 11                	jg     c0014445 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014434:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014438:	0f b6 80 c0 cc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3340]
c001443f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014443:	eb 9d                	jmp    c00143e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014445:	83 ec 0c             	sub    esp,0xc
c0014448:	68 a9 ac 02 c0       	push   0xc002aca9
c001444d:	e8 79 5a 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	eb 8b                	jmp    c00143e2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014457 <nmiHandler(regs*, void*)>:
c0014457:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001445c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014460:	e9 9b a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014465 <int_handler>:
c0014465:	55                   	push   ebp
c0014466:	57                   	push   edi
c0014467:	56                   	push   esi
c0014468:	53                   	push   ebx
c0014469:	83 ec 0c             	sub    esp,0xc
c001446c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014470:	80 3d a4 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305a4,0x0
c0014477:	74 0b                	je     c0014484 <int_handler+0x1f>
c0014479:	fa                   	cli    
c001447a:	f4                   	hlt    
c001447b:	80 3d a4 05 03 c0 00 	cmp    BYTE PTR ds:0xc00305a4,0x0
c0014482:	75 f5                	jne    c0014479 <int_handler+0x14>
c0014484:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0014489:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001448c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014492:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014498:	8d 43 e0             	lea    eax,[ebx-0x20]
c001449b:	83 f8 17             	cmp    eax,0x17
c001449e:	77 13                	ja     c00144b3 <int_handler+0x4e>
c00144a0:	83 ec 08             	sub    esp,0x8
c00144a3:	8b 17                	mov    edx,DWORD PTR [edi]
c00144a5:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144a8:	0f b6 c0             	movzx  eax,al
c00144ab:	50                   	push   eax
c00144ac:	57                   	push   edi
c00144ad:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	83 c3 15             	add    ebx,0x15
c00144b6:	c1 e3 04             	shl    ebx,0x4
c00144b9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144bd:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00144c4:	31 db                	xor    ebx,ebx
c00144c6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00144ca:	85 c0                	test   eax,eax
c00144cc:	74 13                	je     c00144e1 <int_handler+0x7c>
c00144ce:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00144d1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00144d5:	74 1c                	je     c00144f3 <int_handler+0x8e>
c00144d7:	83 ec 08             	sub    esp,0x8
c00144da:	52                   	push   edx
c00144db:	56                   	push   esi
c00144dc:	ff d0                	call   eax
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	43                   	inc    ebx
c00144e2:	83 fb 04             	cmp    ebx,0x4
c00144e5:	75 df                	jne    c00144c6 <int_handler+0x61>
c00144e7:	83 c4 0c             	add    esp,0xc
c00144ea:	31 c0                	xor    eax,eax
c00144ec:	5b                   	pop    ebx
c00144ed:	31 d2                	xor    edx,edx
c00144ef:	5e                   	pop    esi
c00144f0:	5f                   	pop    edi
c00144f1:	5d                   	pop    ebp
c00144f2:	c3                   	ret    
c00144f3:	83 ec 08             	sub    esp,0x8
c00144f6:	52                   	push   edx
c00144f7:	56                   	push   esi
c00144f8:	ff d0                	call   eax
c00144fa:	83 c4 10             	add    esp,0x10
c00144fd:	83 c4 0c             	add    esp,0xc
c0014500:	5b                   	pop    ebx
c0014501:	5e                   	pop    esi
c0014502:	5f                   	pop    edi
c0014503:	5d                   	pop    ebp
c0014504:	c3                   	ret    
c0014505:	90                   	nop

c0014506 <InterruptController::InterruptController(char const*)>:
c0014506:	83 ec 1c             	sub    esp,0x1c
c0014509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450d:	83 ec 08             	sub    esp,0x8
c0014510:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014514:	50                   	push   eax
c0014515:	e8 82 f8 ff ff       	call   c0013d9c <Device::Device(char const*)>
c001451a:	83 c4 10             	add    esp,0x10
c001451d:	ba 64 af 02 c0       	mov    edx,0xc002af64
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	89 10                	mov    DWORD PTR [eax],edx
c0014528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014536:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001453e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014546:	7f 5e                	jg     c00145a6 <InterruptController::InterruptController(char const*)+0xa0>
c0014548:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014550:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014555:	7f 49                	jg     c00145a0 <InterruptController::InterruptController(char const*)+0x9a>
c0014557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001455f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001456a:	01 ca                	add    edx,ecx
c001456c:	83 c2 54             	add    edx,0x54
c001456f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001457f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001458a:	01 ca                	add    edx,ecx
c001458c:	81 c2 54 04 00 00    	add    edx,0x454
c0014592:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001459a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001459e:	eb b0                	jmp    c0014550 <InterruptController::InterruptController(char const*)+0x4a>
c00145a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00145a4:	eb 98                	jmp    c001453e <InterruptController::InterruptController(char const*)+0x38>
c00145a6:	90                   	nop
c00145a7:	83 c4 1c             	add    esp,0x1c
c00145aa:	c3                   	ret    
c00145ab:	90                   	nop

c00145ac <InterruptController::~InterruptController()>:
c00145ac:	83 ec 0c             	sub    esp,0xc
c00145af:	ba 64 af 02 c0       	mov    edx,0xc002af64
c00145b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b8:	89 10                	mov    DWORD PTR [eax],edx
c00145ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145be:	83 ec 0c             	sub    esp,0xc
c00145c1:	50                   	push   eax
c00145c2:	e8 9f f4 ff ff       	call   c0013a66 <Device::~Device()>
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	90                   	nop
c00145cb:	83 c4 0c             	add    esp,0xc
c00145ce:	c3                   	ret    
c00145cf:	90                   	nop

c00145d0 <InterruptController::~InterruptController()>:
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	83 ec 0c             	sub    esp,0xc
c00145d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145da:	e8 cd ff ff ff       	call   c00145ac <InterruptController::~InterruptController()>
c00145df:	83 c4 10             	add    esp,0x10
c00145e2:	83 ec 08             	sub    esp,0x8
c00145e5:	68 58 21 00 00       	push   0x2158
c00145ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ee:	e8 94 e0 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	83 c4 0c             	add    esp,0xc
c00145f9:	c3                   	ret    

c00145fa <displayDebugInfo(regs*)>:
c00145fa:	55                   	push   ebp
c00145fb:	57                   	push   edi
c00145fc:	56                   	push   esi
c00145fd:	53                   	push   ebx
c00145fe:	83 ec 24             	sub    esp,0x24
c0014601:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014605:	0f 20 c2             	mov    edx,cr0
c0014608:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001460c:	0f 20 d7             	mov    edi,cr2
c001460f:	0f 20 de             	mov    esi,cr3
c0014612:	0f 20 e5             	mov    ebp,cr4
c0014615:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014618:	68 b6 ac 02 c0       	push   0xc002acb6
c001461d:	e8 3d e1 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014622:	59                   	pop    ecx
c0014623:	58                   	pop    eax
c0014624:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014627:	68 c1 ac 02 c0       	push   0xc002acc1
c001462c:	e8 2e e1 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014631:	58                   	pop    eax
c0014632:	5a                   	pop    edx
c0014633:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014636:	68 cc ac 02 c0       	push   0xc002accc
c001463b:	e8 1f e1 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014640:	59                   	pop    ecx
c0014641:	58                   	pop    eax
c0014642:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014645:	68 d7 ac 02 c0       	push   0xc002acd7
c001464a:	e8 10 e1 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001464f:	58                   	pop    eax
c0014650:	5a                   	pop    edx
c0014651:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014654:	68 e2 ac 02 c0       	push   0xc002ace2
c0014659:	e8 01 e1 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001465e:	59                   	pop    ecx
c001465f:	58                   	pop    eax
c0014660:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014663:	68 ed ac 02 c0       	push   0xc002aced
c0014668:	e8 f2 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001466d:	58                   	pop    eax
c001466e:	5a                   	pop    edx
c001466f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014672:	68 f8 ac 02 c0       	push   0xc002acf8
c0014677:	e8 e3 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001467c:	59                   	pop    ecx
c001467d:	58                   	pop    eax
c001467e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014681:	68 03 ad 02 c0       	push   0xc002ad03
c0014686:	e8 d4 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001468b:	58                   	pop    eax
c001468c:	5a                   	pop    edx
c001468d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014690:	68 0e ad 02 c0       	push   0xc002ad0e
c0014695:	e8 c5 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001469a:	59                   	pop    ecx
c001469b:	58                   	pop    eax
c001469c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001469f:	68 1d ad 02 c0       	push   0xc002ad1d
c00146a4:	e8 b6 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00146a9:	58                   	pop    eax
c00146aa:	5a                   	pop    edx
c00146ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146ae:	68 28 ad 02 c0       	push   0xc002ad28
c00146b3:	e8 a7 e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00146b8:	59                   	pop    ecx
c00146b9:	58                   	pop    eax
c00146ba:	57                   	push   edi
c00146bb:	68 33 ad 02 c0       	push   0xc002ad33
c00146c0:	e8 9a e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00146c5:	58                   	pop    eax
c00146c6:	5a                   	pop    edx
c00146c7:	56                   	push   esi
c00146c8:	68 3e ad 02 c0       	push   0xc002ad3e
c00146cd:	e8 8d e0 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00146d2:	59                   	pop    ecx
c00146d3:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00146d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146de:	e8 70 bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00146e3:	58                   	pop    eax
c00146e4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146e7:	5a                   	pop    edx
c00146e8:	c1 e0 05             	shl    eax,0x5
c00146eb:	05 20 ca 02 c0       	add    eax,0xc002ca20
c00146f0:	50                   	push   eax
c00146f1:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00146f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fc:	e8 5f c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014701:	59                   	pop    ecx
c0014702:	58                   	pop    eax
c0014703:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014708:	68 49 ad 02 c0       	push   0xc002ad49
c001470d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014713:	e8 48 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014718:	58                   	pop    eax
c0014719:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001471e:	5a                   	pop    edx
c001471f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014722:	83 c0 0c             	add    eax,0xc
c0014725:	50                   	push   eax
c0014726:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001472b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014731:	e8 2a c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014736:	59                   	pop    ecx
c0014737:	58                   	pop    eax
c0014738:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001473d:	68 52 ad 02 c0       	push   0xc002ad52
c0014742:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014748:	e8 13 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001474d:	58                   	pop    eax
c001474e:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014753:	5a                   	pop    edx
c0014754:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014757:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475d:	e8 b8 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014762:	59                   	pop    ecx
c0014763:	58                   	pop    eax
c0014764:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014769:	68 5a ad 02 c0       	push   0xc002ad5a
c001476e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014774:	e8 e7 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014779:	58                   	pop    eax
c001477a:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001477f:	5a                   	pop    edx
c0014780:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014783:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014789:	e8 8c c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001478e:	59                   	pop    ecx
c001478f:	58                   	pop    eax
c0014790:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014795:	68 62 ad 02 c0       	push   0xc002ad62
c001479a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a0:	e8 bb c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147a5:	58                   	pop    eax
c00147a6:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00147ab:	5a                   	pop    edx
c00147ac:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b5:	e8 60 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147ba:	59                   	pop    ecx
c00147bb:	58                   	pop    eax
c00147bc:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00147c1:	68 6a ad 02 c0       	push   0xc002ad6a
c00147c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147cc:	e8 8f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147d1:	58                   	pop    eax
c00147d2:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00147d7:	5a                   	pop    edx
c00147d8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00147db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e1:	e8 34 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147e6:	59                   	pop    ecx
c00147e7:	58                   	pop    eax
c00147e8:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00147ed:	68 72 ad 02 c0       	push   0xc002ad72
c00147f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f8:	e8 63 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147fd:	58                   	pop    eax
c00147fe:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014803:	5a                   	pop    edx
c0014804:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014807:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480d:	e8 08 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014812:	59                   	pop    ecx
c0014813:	58                   	pop    eax
c0014814:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014819:	68 7a ad 02 c0       	push   0xc002ad7a
c001481e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014824:	e8 37 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014829:	58                   	pop    eax
c001482a:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001482f:	5a                   	pop    edx
c0014830:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014839:	e8 dc bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001483e:	59                   	pop    ecx
c001483f:	58                   	pop    eax
c0014840:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014845:	68 82 ad 02 c0       	push   0xc002ad82
c001484a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014850:	e8 0b c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014855:	58                   	pop    eax
c0014856:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001485b:	5a                   	pop    edx
c001485c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014860:	52                   	push   edx
c0014861:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014867:	e8 ae bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001486c:	59                   	pop    ecx
c001486d:	58                   	pop    eax
c001486e:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014873:	68 8b ad 02 c0       	push   0xc002ad8b
c0014878:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487e:	e8 dd bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014883:	58                   	pop    eax
c0014884:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014889:	5a                   	pop    edx
c001488a:	57                   	push   edi
c001488b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014891:	e8 84 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014896:	59                   	pop    ecx
c0014897:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001489c:	5f                   	pop    edi
c001489d:	68 93 ad 02 c0       	push   0xc002ad93
c00148a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a8:	e8 b3 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148ad:	58                   	pop    eax
c00148ae:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00148b3:	5a                   	pop    edx
c00148b4:	56                   	push   esi
c00148b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bb:	e8 5a bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148c0:	59                   	pop    ecx
c00148c1:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00148c6:	5e                   	pop    esi
c00148c7:	68 9b ad 02 c0       	push   0xc002ad9b
c00148cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d2:	e8 89 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148d7:	5f                   	pop    edi
c00148d8:	58                   	pop    eax
c00148d9:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00148de:	55                   	push   ebp
c00148df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e5:	e8 30 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ea:	58                   	pop    eax
c00148eb:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00148f0:	5a                   	pop    edx
c00148f1:	68 a3 ad 02 c0       	push   0xc002ada3
c00148f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148fc:	e8 5f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014901:	0f 21 c0             	mov    eax,db0
c0014904:	59                   	pop    ecx
c0014905:	5e                   	pop    esi
c0014906:	50                   	push   eax
c0014907:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001490c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014912:	e8 03 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014917:	5f                   	pop    edi
c0014918:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001491d:	5d                   	pop    ebp
c001491e:	68 ac ad 02 c0       	push   0xc002adac
c0014923:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014929:	e8 32 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001492e:	0f 21 c8             	mov    eax,db1
c0014931:	5a                   	pop    edx
c0014932:	59                   	pop    ecx
c0014933:	50                   	push   eax
c0014934:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014939:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001493f:	e8 d6 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014944:	5e                   	pop    esi
c0014945:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001494a:	5f                   	pop    edi
c001494b:	68 b4 ad 02 c0       	push   0xc002adb4
c0014950:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014956:	e8 05 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001495b:	0f 21 d0             	mov    eax,db2
c001495e:	5d                   	pop    ebp
c001495f:	5a                   	pop    edx
c0014960:	50                   	push   eax
c0014961:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014966:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001496c:	e8 a9 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014971:	59                   	pop    ecx
c0014972:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014977:	5e                   	pop    esi
c0014978:	68 bc ad 02 c0       	push   0xc002adbc
c001497d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014983:	e8 d8 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014988:	0f 21 d8             	mov    eax,db3
c001498b:	5f                   	pop    edi
c001498c:	5d                   	pop    ebp
c001498d:	50                   	push   eax
c001498e:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014993:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014999:	e8 7c be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001499e:	58                   	pop    eax
c001499f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00149a4:	5a                   	pop    edx
c00149a5:	68 c4 ad 02 c0       	push   0xc002adc4
c00149aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b0:	e8 ab be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149b5:	0f 21 f0             	mov    eax,db6
c00149b8:	59                   	pop    ecx
c00149b9:	5e                   	pop    esi
c00149ba:	50                   	push   eax
c00149bb:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00149c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c6:	e8 4f be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149cb:	5f                   	pop    edi
c00149cc:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00149d1:	5d                   	pop    ebp
c00149d2:	68 cc ad 02 c0       	push   0xc002adcc
c00149d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149dd:	e8 7e be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149e2:	0f 21 f8             	mov    eax,db7
c00149e5:	5a                   	pop    edx
c00149e6:	59                   	pop    ecx
c00149e7:	50                   	push   eax
c00149e8:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00149ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f3:	e8 22 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149f8:	5e                   	pop    esi
c00149f9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149fc:	e8 43 86 00 00       	call   c001d044 <Thr::getDriverNameFromAddress(unsigned long)>
c0014a01:	83 c4 10             	add    esp,0x10
c0014a04:	85 c0                	test   eax,eax
c0014a06:	74 7d                	je     c0014a85 <displayDebugInfo(regs*)+0x48b>
c0014a08:	89 c6                	mov    esi,eax
c0014a0a:	50                   	push   eax
c0014a0b:	50                   	push   eax
c0014a0c:	56                   	push   esi
c0014a0d:	68 d4 ad 02 c0       	push   0xc002add4
c0014a12:	e8 48 dd ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014a17:	5a                   	pop    edx
c0014a18:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014a1d:	59                   	pop    ecx
c0014a1e:	68 e2 ad 02 c0       	push   0xc002ade2
c0014a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a29:	e8 32 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a2e:	5f                   	pop    edi
c0014a2f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014a34:	5d                   	pop    ebp
c0014a35:	56                   	push   esi
c0014a36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3c:	e8 1f be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a41:	58                   	pop    eax
c0014a42:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014a47:	5a                   	pop    edx
c0014a48:	68 ee ad 02 c0       	push   0xc002adee
c0014a4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a53:	e8 08 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a58:	59                   	pop    ecx
c0014a59:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0014a5e:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014a64:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a67:	e8 0f 86 00 00       	call   c001d07b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014a6c:	5b                   	pop    ebx
c0014a6d:	5d                   	pop    ebp
c0014a6e:	50                   	push   eax
c0014a6f:	57                   	push   edi
c0014a70:	e8 a5 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a75:	58                   	pop    eax
c0014a76:	5a                   	pop    edx
c0014a77:	56                   	push   esi
c0014a78:	68 fa ad 02 c0       	push   0xc002adfa
c0014a7d:	e8 dd dc ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014a82:	83 c4 10             	add    esp,0x10
c0014a85:	fa                   	cli    
c0014a86:	f4                   	hlt    
c0014a87:	eb fe                	jmp    c0014a87 <displayDebugInfo(regs*)+0x48d>

c0014a89 <x87EmulHandler(regs*, void*)>:
c0014a89:	83 ec 0c             	sub    esp,0xc
c0014a8c:	0f 20 c2             	mov    edx,cr0
c0014a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a94:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014a98:	75 4b                	jne    c0014ae5 <x87EmulHandler(regs*, void*)+0x5c>
c0014a9a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0014a9f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014aa5:	85 c0                	test   eax,eax
c0014aa7:	74 05                	je     c0014aae <x87EmulHandler(regs*, void*)+0x25>
c0014aa9:	83 e2 08             	and    edx,0x8
c0014aac:	75 17                	jne    c0014ac5 <x87EmulHandler(regs*, void*)+0x3c>
c0014aae:	83 ec 0c             	sub    esp,0xc
c0014ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ab5:	e8 61 a9 00 00       	call   c001f41b <Vm::x87Handler(regs*)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	84 c0                	test   al,al
c0014abf:	74 24                	je     c0014ae5 <x87EmulHandler(regs*, void*)+0x5c>
c0014ac1:	83 c4 0c             	add    esp,0xc
c0014ac4:	c3                   	ret    
c0014ac5:	83 ec 0c             	sub    esp,0xc
c0014ac8:	68 20 ae 02 c0       	push   0xc002ae20
c0014acd:	e8 8d dc ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014ad2:	0f 06                	clts   
c0014ad4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad9:	83 c4 10             	add    esp,0x10
c0014adc:	a3 e8 db 02 c0       	mov    ds:0xc002dbe8,eax
c0014ae1:	83 c4 0c             	add    esp,0xc
c0014ae4:	c3                   	ret    
c0014ae5:	83 ec 0c             	sub    esp,0xc
c0014ae8:	68 0a ae 02 c0       	push   0xc002ae0a
c0014aed:	e8 6d dc ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014af2:	5a                   	pop    edx
c0014af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014af7:	e8 fe fa ff ff       	call   c00145fa <displayDebugInfo(regs*)>

c0014afc <gpFault(regs*, void*)>:
c0014afc:	53                   	push   ebx
c0014afd:	83 ec 14             	sub    esp,0x14
c0014b00:	c7 05 e4 db 02 c0 f4 e8 01 c0 	mov    DWORD PTR ds:0xc002dbe4,0xc001e8f4
c0014b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b0e:	53                   	push   ebx
c0014b0f:	e8 e0 9d 00 00       	call   c001e8f4 <Vm::faultHandler(regs*)>
c0014b14:	83 c4 10             	add    esp,0x10
c0014b17:	84 c0                	test   al,al
c0014b19:	74 05                	je     c0014b20 <gpFault(regs*, void*)+0x24>
c0014b1b:	83 c4 08             	add    esp,0x8
c0014b1e:	5b                   	pop    ebx
c0014b1f:	c3                   	ret    
c0014b20:	83 ec 0c             	sub    esp,0xc
c0014b23:	68 2d ae 02 c0       	push   0xc002ae2d
c0014b28:	e8 32 dc ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014b2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b30:	e8 c5 fa ff ff       	call   c00145fa <displayDebugInfo(regs*)>

c0014b35 <pgFault(regs*, void*)>:
c0014b35:	83 ec 18             	sub    esp,0x18
c0014b38:	68 48 ae 02 c0       	push   0xc002ae48
c0014b3d:	e8 1d dc ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014b42:	0f 20 d0             	mov    eax,cr2
c0014b45:	5a                   	pop    edx
c0014b46:	59                   	pop    ecx
c0014b47:	50                   	push   eax
c0014b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b50:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b56:	e8 2d d7 ff ff       	call   c0012288 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	84 c0                	test   al,al
c0014b60:	74 04                	je     c0014b66 <pgFault(regs*, void*)+0x31>
c0014b62:	83 c4 0c             	add    esp,0xc
c0014b65:	c3                   	ret    
c0014b66:	83 ec 0c             	sub    esp,0xc
c0014b69:	68 52 ae 02 c0       	push   0xc002ae52
c0014b6e:	e8 ec db ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014b73:	58                   	pop    eax
c0014b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b78:	e8 7d fa ff ff       	call   c00145fa <displayDebugInfo(regs*)>

c0014b7d <otherISRHandler(regs*, void*)>:
c0014b7d:	53                   	push   ebx
c0014b7e:	83 ec 0c             	sub    esp,0xc
c0014b81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b85:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014b88:	50                   	push   eax
c0014b89:	50                   	push   eax
c0014b8a:	68 5f ae 02 c0       	push   0xc002ae5f
c0014b8f:	e8 cb db ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014b94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b97:	e8 5e fa ff ff       	call   c00145fa <displayDebugInfo(regs*)>

c0014b9c <opcodeFault(regs*, void*)>:
c0014b9c:	55                   	push   ebp
c0014b9d:	89 e5                	mov    ebp,esp
c0014b9f:	56                   	push   esi
c0014ba0:	53                   	push   ebx
c0014ba1:	83 ec 40             	sub    esp,0x40
c0014ba4:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0014ba9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014baf:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bb5:	84 c0                	test   al,al
c0014bb7:	74 24                	je     c0014bdd <opcodeFault(regs*, void*)+0x41>
c0014bb9:	83 ec 0c             	sub    esp,0xc
c0014bbc:	68 7c ae 02 c0       	push   0xc002ae7c
c0014bc1:	e8 99 db ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bcc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcf:	8d 50 19             	lea    edx,[eax+0x19]
c0014bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd8:	e9 d5 05 00 00       	jmp    c00151b2 <opcodeFault(regs*, void*)+0x616>
c0014bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014be3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014be6:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014bea:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014bee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bf4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014bf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfa:	8a 00                	mov    al,BYTE PTR [eax]
c0014bfc:	3c f0                	cmp    al,0xf0
c0014bfe:	75 17                	jne    c0014c17 <opcodeFault(regs*, void*)+0x7b>
c0014c00:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c06:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c09:	8d 50 01             	lea    edx,[eax+0x1]
c0014c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c12:	e9 da 00 00 00       	jmp    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c1c:	3c f2                	cmp    al,0xf2
c0014c1e:	74 09                	je     c0014c29 <opcodeFault(regs*, void*)+0x8d>
c0014c20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c23:	8a 00                	mov    al,BYTE PTR [eax]
c0014c25:	3c f3                	cmp    al,0xf3
c0014c27:	75 1b                	jne    c0014c44 <opcodeFault(regs*, void*)+0xa8>
c0014c29:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c2d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c36:	8d 50 01             	lea    edx,[eax+0x1]
c0014c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c3f:	e9 ad 00 00 00       	jmp    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014c44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c47:	8a 00                	mov    al,BYTE PTR [eax]
c0014c49:	3c 66                	cmp    al,0x66
c0014c4b:	75 1f                	jne    c0014c6c <opcodeFault(regs*, void*)+0xd0>
c0014c4d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c51:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c55:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c5e:	8d 50 01             	lea    edx,[eax+0x1]
c0014c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c64:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c67:	e9 85 00 00 00       	jmp    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014c6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c71:	3c 67                	cmp    al,0x67
c0014c73:	75 18                	jne    c0014c8d <opcodeFault(regs*, void*)+0xf1>
c0014c75:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c79:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c82:	8d 50 01             	lea    edx,[eax+0x1]
c0014c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c8b:	eb 64                	jmp    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c90:	8a 00                	mov    al,BYTE PTR [eax]
c0014c92:	3c 2e                	cmp    al,0x2e
c0014c94:	74 09                	je     c0014c9f <opcodeFault(regs*, void*)+0x103>
c0014c96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c99:	8a 00                	mov    al,BYTE PTR [eax]
c0014c9b:	3c 3e                	cmp    al,0x3e
c0014c9d:	75 18                	jne    c0014cb7 <opcodeFault(regs*, void*)+0x11b>
c0014c9f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ca3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cac:	8d 50 01             	lea    edx,[eax+0x1]
c0014caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cb5:	eb 3a                	jmp    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cba:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbc:	3c 36                	cmp    al,0x36
c0014cbe:	74 1b                	je     c0014cdb <opcodeFault(regs*, void*)+0x13f>
c0014cc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc5:	3c 26                	cmp    al,0x26
c0014cc7:	74 12                	je     c0014cdb <opcodeFault(regs*, void*)+0x13f>
c0014cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccc:	8a 00                	mov    al,BYTE PTR [eax]
c0014cce:	3c 64                	cmp    al,0x64
c0014cd0:	74 09                	je     c0014cdb <opcodeFault(regs*, void*)+0x13f>
c0014cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd7:	3c 65                	cmp    al,0x65
c0014cd9:	75 16                	jne    c0014cf1 <opcodeFault(regs*, void*)+0x155>
c0014cdb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cdf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce8:	8d 50 01             	lea    edx,[eax+0x1]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf6:	3c 0f                	cmp    al,0xf
c0014cf8:	0f 85 ad 00 00 00    	jne    c0014dab <opcodeFault(regs*, void*)+0x20f>
c0014cfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d01:	40                   	inc    eax
c0014d02:	8a 00                	mov    al,BYTE PTR [eax]
c0014d04:	3c c2                	cmp    al,0xc2
c0014d06:	74 0e                	je     c0014d16 <opcodeFault(regs*, void*)+0x17a>
c0014d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0b:	40                   	inc    eax
c0014d0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0e:	3c c3                	cmp    al,0xc3
c0014d10:	0f 85 95 00 00 00    	jne    c0014dab <opcodeFault(regs*, void*)+0x20f>
c0014d16:	83 ec 0c             	sub    esp,0xc
c0014d19:	68 9f ae 02 c0       	push   0xc002ae9f
c0014d1e:	e8 3c da ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d2c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d32:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d35:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d3d:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d43:	88 10                	mov    BYTE PTR [eax],dl
c0014d45:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d48:	50                   	push   eax
c0014d49:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d4c:	50                   	push   eax
c0014d4d:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d50:	50                   	push   eax
c0014d51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d54:	e8 8b 48 00 00       	call   c00195e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d59:	83 c4 10             	add    esp,0x10
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d62:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d65:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d68:	01 d0                	add    eax,edx
c0014d6a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d73:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d76:	48                   	dec    eax
c0014d77:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014d80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	83 ec 04             	sub    esp,0x4
c0014d89:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014d8c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014d8f:	50                   	push   eax
c0014d90:	e8 1f b4 fe ff       	call   c00001b4 <voodooXADD>
c0014d95:	83 c4 10             	add    esp,0x10
c0014d98:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014d9b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014d9e:	01 c2                	add    edx,eax
c0014da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014da6:	e9 07 04 00 00       	jmp    c00151b2 <opcodeFault(regs*, void*)+0x616>
c0014dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dae:	8a 00                	mov    al,BYTE PTR [eax]
c0014db0:	3c 0f                	cmp    al,0xf
c0014db2:	0f 85 8b 01 00 00    	jne    c0014f43 <opcodeFault(regs*, void*)+0x3a7>
c0014db8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbb:	40                   	inc    eax
c0014dbc:	8a 00                	mov    al,BYTE PTR [eax]
c0014dbe:	3c c7                	cmp    al,0xc7
c0014dc0:	0f 86 7d 01 00 00    	jbe    c0014f43 <opcodeFault(regs*, void*)+0x3a7>
c0014dc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc9:	40                   	inc    eax
c0014dca:	8a 00                	mov    al,BYTE PTR [eax]
c0014dcc:	3c cf                	cmp    al,0xcf
c0014dce:	0f 87 6f 01 00 00    	ja     c0014f43 <opcodeFault(regs*, void*)+0x3a7>
c0014dd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd7:	40                   	inc    eax
c0014dd8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dda:	83 c0 38             	add    eax,0x38
c0014ddd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014de0:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014de4:	75 0b                	jne    c0014df1 <opcodeFault(regs*, void*)+0x255>
c0014de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014dec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014def:	eb 75                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014df1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014df5:	75 0b                	jne    c0014e02 <opcodeFault(regs*, void*)+0x266>
c0014df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014dfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e00:	eb 64                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e02:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e06:	75 0b                	jne    c0014e13 <opcodeFault(regs*, void*)+0x277>
c0014e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e0e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e11:	eb 53                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e13:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e17:	75 0b                	jne    c0014e24 <opcodeFault(regs*, void*)+0x288>
c0014e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e22:	eb 42                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e24:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e28:	75 0b                	jne    c0014e35 <opcodeFault(regs*, void*)+0x299>
c0014e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e33:	eb 31                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e35:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e39:	75 0b                	jne    c0014e46 <opcodeFault(regs*, void*)+0x2aa>
c0014e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e44:	eb 20                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e46:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e4a:	75 0b                	jne    c0014e57 <opcodeFault(regs*, void*)+0x2bb>
c0014e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e52:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e55:	eb 0f                	jmp    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e57:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e5b:	75 09                	jne    c0014e66 <opcodeFault(regs*, void*)+0x2ca>
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e66:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e6a:	74 10                	je     c0014e7c <opcodeFault(regs*, void*)+0x2e0>
c0014e6c:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014e73:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014e7a:	eb 2d                	jmp    c0014ea9 <opcodeFault(regs*, void*)+0x30d>
c0014e7c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e7f:	c1 e0 18             	shl    eax,0x18
c0014e82:	89 c2                	mov    edx,eax
c0014e84:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e87:	c1 e0 08             	shl    eax,0x8
c0014e8a:	25 00 00 ff 00       	and    eax,0xff0000
c0014e8f:	09 c2                	or     edx,eax
c0014e91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014e94:	c1 e8 08             	shr    eax,0x8
c0014e97:	25 00 ff 00 00       	and    eax,0xff00
c0014e9c:	09 c2                	or     edx,eax
c0014e9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ea1:	c1 e8 18             	shr    eax,0x18
c0014ea4:	09 d0                	or     eax,edx
c0014ea6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea9:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ead:	75 0b                	jne    c0014eba <opcodeFault(regs*, void*)+0x31e>
c0014eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014eb5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014eb8:	eb 75                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014eba:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ebe:	75 0b                	jne    c0014ecb <opcodeFault(regs*, void*)+0x32f>
c0014ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ec6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014ec9:	eb 64                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014ecb:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ecf:	75 0b                	jne    c0014edc <opcodeFault(regs*, void*)+0x340>
c0014ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ed7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014eda:	eb 53                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014edc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014ee0:	75 0b                	jne    c0014eed <opcodeFault(regs*, void*)+0x351>
c0014ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ee8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014eeb:	eb 42                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014eed:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ef1:	75 0b                	jne    c0014efe <opcodeFault(regs*, void*)+0x362>
c0014ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014efc:	eb 31                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014efe:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f02:	75 0b                	jne    c0014f0f <opcodeFault(regs*, void*)+0x373>
c0014f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f07:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f0a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f0d:	eb 20                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014f0f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f13:	75 0b                	jne    c0014f20 <opcodeFault(regs*, void*)+0x384>
c0014f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f18:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f1b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f1e:	eb 0f                	jmp    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014f20:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f24:	75 09                	jne    c0014f2f <opcodeFault(regs*, void*)+0x393>
c0014f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f29:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f35:	8d 50 02             	lea    edx,[eax+0x2]
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f3e:	e9 6f 02 00 00       	jmp    c00151b2 <opcodeFault(regs*, void*)+0x616>
c0014f43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f46:	8a 00                	mov    al,BYTE PTR [eax]
c0014f48:	3c 0f                	cmp    al,0xf
c0014f4a:	0f 85 8d 01 00 00    	jne    c00150dd <opcodeFault(regs*, void*)+0x541>
c0014f50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f53:	40                   	inc    eax
c0014f54:	8a 00                	mov    al,BYTE PTR [eax]
c0014f56:	3c c7                	cmp    al,0xc7
c0014f58:	0f 85 7f 01 00 00    	jne    c00150dd <opcodeFault(regs*, void*)+0x541>
c0014f5e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f64:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f67:	8d 50 01             	lea    edx,[eax+0x1]
c0014f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f70:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014f73:	50                   	push   eax
c0014f74:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014f77:	50                   	push   eax
c0014f78:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014f7b:	50                   	push   eax
c0014f7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f7f:	e8 60 46 00 00       	call   c00195e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014f8a:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014f8d:	83 f0 01             	xor    eax,0x1
c0014f90:	84 c0                	test   al,al
c0014f92:	0f 84 45 01 00 00    	je     c00150dd <opcodeFault(regs*, void*)+0x541>
c0014f98:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014f9b:	3c 01                	cmp    al,0x1
c0014f9d:	0f 85 3a 01 00 00    	jne    c00150dd <opcodeFault(regs*, void*)+0x541>
c0014fa3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014fa6:	83 f0 01             	xor    eax,0x1
c0014fa9:	84 c0                	test   al,al
c0014fab:	0f 84 2c 01 00 00    	je     c00150dd <opcodeFault(regs*, void*)+0x541>
c0014fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014fb7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fba:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014fc1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fc4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fc7:	89 c2                	mov    edx,eax
c0014fc9:	b8 00 00 00 00       	mov    eax,0x0
c0014fce:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fd1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014fda:	ba 00 00 00 00       	mov    edx,0x0
c0014fdf:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014fe2:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014feb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014fee:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ff5:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ff8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ffb:	89 c2                	mov    edx,eax
c0014ffd:	b8 00 00 00 00       	mov    eax,0x0
c0015002:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015005:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001500e:	ba 00 00 00 00       	mov    edx,0x0
c0015013:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015016:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015019:	fa                   	cli    
c001501a:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001501f:	40                   	inc    eax
c0015020:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0015025:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015028:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001502b:	8b 00                	mov    eax,DWORD PTR [eax]
c001502d:	89 c1                	mov    ecx,eax
c001502f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015032:	89 cb                	mov    ebx,ecx
c0015034:	89 d0                	mov    eax,edx
c0015036:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015039:	89 c6                	mov    esi,eax
c001503b:	89 f0                	mov    eax,esi
c001503d:	09 d8                	or     eax,ebx
c001503f:	85 c0                	test   eax,eax
c0015041:	75 21                	jne    c0015064 <opcodeFault(regs*, void*)+0x4c8>
c0015043:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015046:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015049:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001504c:	89 01                	mov    DWORD PTR [ecx],eax
c001504e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015054:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015057:	83 c8 40             	or     eax,0x40
c001505a:	89 c2                	mov    edx,eax
c001505c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015062:	eb 3e                	jmp    c00150a2 <opcodeFault(regs*, void*)+0x506>
c0015064:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015067:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001506a:	8b 00                	mov    eax,DWORD PTR [eax]
c001506c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001506f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015072:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015078:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001507b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001507e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015081:	89 d0                	mov    eax,edx
c0015083:	31 d2                	xor    edx,edx
c0015085:	89 c3                	mov    ebx,eax
c0015087:	89 d6                	mov    esi,edx
c0015089:	89 da                	mov    edx,ebx
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015097:	83 e0 bf             	and    eax,0xffffffbf
c001509a:	89 c2                	mov    edx,eax
c001509c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150a2:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00150a7:	48                   	dec    eax
c00150a8:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00150ad:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00150b2:	85 c0                	test   eax,eax
c00150b4:	75 01                	jne    c00150b7 <opcodeFault(regs*, void*)+0x51b>
c00150b6:	fb                   	sti    
c00150b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150bd:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150c0:	01 c2                	add    edx,eax
c00150c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c8:	83 ec 0c             	sub    esp,0xc
c00150cb:	68 ae ae 02 c0       	push   0xc002aeae
c00150d0:	e8 8a d6 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00150d5:	83 c4 10             	add    esp,0x10
c00150d8:	e9 d5 00 00 00       	jmp    c00151b2 <opcodeFault(regs*, void*)+0x616>
c00150dd:	83 ec 0c             	sub    esp,0xc
c00150e0:	68 c1 ae 02 c0       	push   0xc002aec1
c00150e5:	e8 75 d6 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150f9:	c1 e0 04             	shl    eax,0x4
c00150fc:	01 d0                	add    eax,edx
c00150fe:	83 c0 03             	add    eax,0x3
c0015101:	8a 00                	mov    al,BYTE PTR [eax]
c0015103:	0f b6 d8             	movzx  ebx,al
c0015106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015109:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001510c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015112:	c1 e0 04             	shl    eax,0x4
c0015115:	01 d0                	add    eax,edx
c0015117:	83 c0 02             	add    eax,0x2
c001511a:	8a 00                	mov    al,BYTE PTR [eax]
c001511c:	0f b6 c8             	movzx  ecx,al
c001511f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015122:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001512b:	c1 e0 04             	shl    eax,0x4
c001512e:	01 d0                	add    eax,edx
c0015130:	40                   	inc    eax
c0015131:	8a 00                	mov    al,BYTE PTR [eax]
c0015133:	0f b6 d0             	movzx  edx,al
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001513c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015142:	c1 e0 04             	shl    eax,0x4
c0015145:	01 f0                	add    eax,esi
c0015147:	8a 00                	mov    al,BYTE PTR [eax]
c0015149:	0f b6 c0             	movzx  eax,al
c001514c:	83 ec 0c             	sub    esp,0xc
c001514f:	53                   	push   ebx
c0015150:	51                   	push   ecx
c0015151:	52                   	push   edx
c0015152:	50                   	push   eax
c0015153:	68 d4 ae 02 c0       	push   0xc002aed4
c0015158:	e8 02 d6 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001515d:	83 c4 20             	add    esp,0x20
c0015160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015163:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015166:	83 c0 03             	add    eax,0x3
c0015169:	8a 00                	mov    al,BYTE PTR [eax]
c001516b:	0f b6 d8             	movzx  ebx,al
c001516e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015171:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015174:	83 c0 02             	add    eax,0x2
c0015177:	8a 00                	mov    al,BYTE PTR [eax]
c0015179:	0f b6 c8             	movzx  ecx,al
c001517c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015182:	40                   	inc    eax
c0015183:	8a 00                	mov    al,BYTE PTR [eax]
c0015185:	0f b6 d0             	movzx  edx,al
c0015188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001518e:	8a 00                	mov    al,BYTE PTR [eax]
c0015190:	0f b6 c0             	movzx  eax,al
c0015193:	83 ec 0c             	sub    esp,0xc
c0015196:	53                   	push   ebx
c0015197:	51                   	push   ecx
c0015198:	52                   	push   edx
c0015199:	50                   	push   eax
c001519a:	68 fc ae 02 c0       	push   0xc002aefc
c001519f:	e8 bb d5 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00151a4:	83 c4 20             	add    esp,0x20
c00151a7:	83 ec 0c             	sub    esp,0xc
c00151aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151ad:	e8 48 f4 ff ff       	call   c00145fa <displayDebugInfo(regs*)>
c00151b2:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151b5:	5b                   	pop    ebx
c00151b6:	5e                   	pop    esi
c00151b7:	5d                   	pop    ebp
c00151b8:	c3                   	ret    

c00151b9 <displayProgramFault(char const*)>:
c00151b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151c1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151c7:	85 c0                	test   eax,eax
c00151c9:	74 15                	je     c00151e0 <displayProgramFault(char const*)+0x27>
c00151cb:	83 ec 0c             	sub    esp,0xc
c00151ce:	6a 04                	push   0x4
c00151d0:	6a 0f                	push   0xf
c00151d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151d6:	50                   	push   eax
c00151d7:	e8 80 b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00151dc:	83 c4 1c             	add    esp,0x1c
c00151df:	c3                   	ret    
c00151e0:	c3                   	ret    

c00151e1 <setupInterruptController()>:
c00151e1:	55                   	push   ebp
c00151e2:	89 e5                	mov    ebp,esp
c00151e4:	53                   	push   ebx
c00151e5:	83 ec 24             	sub    esp,0x24
c00151e8:	b8 00 00 00 00       	mov    eax,0x0
c00151ed:	85 c0                	test   eax,eax
c00151ef:	0f 95 c0             	setne  al
c00151f2:	84 c0                	test   al,al
c00151f4:	74 5b                	je     c0015251 <setupInterruptController()+0x70>
c00151f6:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151fd:	83 ec 0c             	sub    esp,0xc
c0015200:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015203:	e8 91 a3 ff ff       	call   c000f599 <malloc>
c0015208:	83 c4 10             	add    esp,0x10
c001520b:	89 c3                	mov    ebx,eax
c001520d:	83 ec 0c             	sub    esp,0xc
c0015210:	53                   	push   ebx
c0015211:	e8 02 05 01 00       	call   c0025718 <APIC::APIC()>
c0015216:	83 c4 10             	add    esp,0x10
c0015219:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001521c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001521f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015222:	8b 00                	mov    eax,DWORD PTR [eax]
c0015224:	83 c0 08             	add    eax,0x8
c0015227:	8b 00                	mov    eax,DWORD PTR [eax]
c0015229:	6a 00                	push   0x0
c001522b:	6a 00                	push   0x0
c001522d:	6a 00                	push   0x0
c001522f:	52                   	push   edx
c0015230:	ff d0                	call   eax
c0015232:	83 c4 10             	add    esp,0x10
c0015235:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001523a:	83 ec 08             	sub    esp,0x8
c001523d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015240:	50                   	push   eax
c0015241:	e8 52 e9 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001524c:	e9 79 03 00 00       	jmp    c00155ca <setupInterruptController()+0x3e9>
c0015251:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c0015256:	84 c0                	test   al,al
c0015258:	75 14                	jne    c001526e <setupInterruptController()+0x8d>
c001525a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001525f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015265:	83 e2 fe             	and    edx,0xfffffffe
c0015268:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001526e:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0015273:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015279:	83 e0 01             	and    eax,0x1
c001527c:	84 c0                	test   al,al
c001527e:	0f 95 c0             	setne  al
c0015281:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015284:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001528b:	83 ec 0c             	sub    esp,0xc
c001528e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015291:	e8 03 a3 ff ff       	call   c000f599 <malloc>
c0015296:	83 c4 10             	add    esp,0x10
c0015299:	89 c3                	mov    ebx,eax
c001529b:	83 ec 0c             	sub    esp,0xc
c001529e:	53                   	push   ebx
c001529f:	e8 cc 09 01 00       	call   c0025c70 <PIC::PIC()>
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b2:	83 c0 08             	add    eax,0x8
c00152b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b7:	6a 00                	push   0x0
c00152b9:	6a 00                	push   0x0
c00152bb:	6a 00                	push   0x0
c00152bd:	52                   	push   edx
c00152be:	ff d0                	call   eax
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00152c7:	74 73                	je     c001533c <setupInterruptController()+0x15b>
c00152c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	83 c0 0c             	add    eax,0xc
c00152d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d6:	6a 00                	push   0x0
c00152d8:	6a 00                	push   0x0
c00152da:	6a 00                	push   0x0
c00152dc:	52                   	push   edx
c00152dd:	ff d0                	call   eax
c00152df:	83 c4 10             	add    esp,0x10
c00152e2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152e6:	74 15                	je     c00152fd <setupInterruptController()+0x11c>
c00152e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ed:	83 c0 04             	add    eax,0x4
c00152f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f2:	83 ec 0c             	sub    esp,0xc
c00152f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f8:	ff d0                	call   eax
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015304:	83 ec 0c             	sub    esp,0xc
c0015307:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001530a:	e8 8a a2 ff ff       	call   c000f599 <malloc>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	89 c3                	mov    ebx,eax
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	53                   	push   ebx
c0015318:	e8 fb 03 01 00       	call   c0025718 <APIC::APIC()>
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015323:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	83 c0 08             	add    eax,0x8
c001532e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015330:	6a 00                	push   0x0
c0015332:	6a 00                	push   0x0
c0015334:	6a 00                	push   0x0
c0015336:	52                   	push   edx
c0015337:	ff d0                	call   eax
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0015341:	83 ec 08             	sub    esp,0x8
c0015344:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015347:	50                   	push   eax
c0015348:	e8 4b e8 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c001534d:	83 c4 10             	add    esp,0x10
c0015350:	c7 05 e8 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dbe8,0x0
c001535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535d:	8b 00                	mov    eax,DWORD PTR [eax]
c001535f:	83 c0 24             	add    eax,0x24
c0015362:	8b 00                	mov    eax,DWORD PTR [eax]
c0015364:	6a 00                	push   0x0
c0015366:	68 7d 4b 01 c0       	push   0xc0014b7d
c001536b:	6a 00                	push   0x0
c001536d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015370:	ff d0                	call   eax
c0015372:	83 c4 10             	add    esp,0x10
c0015375:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015378:	8b 00                	mov    eax,DWORD PTR [eax]
c001537a:	83 c0 24             	add    eax,0x24
c001537d:	8b 00                	mov    eax,DWORD PTR [eax]
c001537f:	6a 00                	push   0x0
c0015381:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015386:	6a 01                	push   0x1
c0015388:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538b:	ff d0                	call   eax
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015393:	8b 00                	mov    eax,DWORD PTR [eax]
c0015395:	83 c0 24             	add    eax,0x24
c0015398:	8b 00                	mov    eax,DWORD PTR [eax]
c001539a:	6a 00                	push   0x0
c001539c:	68 57 44 01 c0       	push   0xc0014457
c00153a1:	6a 02                	push   0x2
c00153a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a6:	ff d0                	call   eax
c00153a8:	83 c4 10             	add    esp,0x10
c00153ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b0:	83 c0 24             	add    eax,0x24
c00153b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b5:	6a 00                	push   0x0
c00153b7:	68 7d 4b 01 c0       	push   0xc0014b7d
c00153bc:	6a 03                	push   0x3
c00153be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c1:	ff d0                	call   eax
c00153c3:	83 c4 10             	add    esp,0x10
c00153c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cb:	83 c0 24             	add    eax,0x24
c00153ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d0:	6a 00                	push   0x0
c00153d2:	68 7d 4b 01 c0       	push   0xc0014b7d
c00153d7:	6a 04                	push   0x4
c00153d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153dc:	ff d0                	call   eax
c00153de:	83 c4 10             	add    esp,0x10
c00153e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e6:	83 c0 24             	add    eax,0x24
c00153e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153eb:	6a 00                	push   0x0
c00153ed:	68 7d 4b 01 c0       	push   0xc0014b7d
c00153f2:	6a 05                	push   0x5
c00153f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f7:	ff d0                	call   eax
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015401:	83 c0 24             	add    eax,0x24
c0015404:	8b 00                	mov    eax,DWORD PTR [eax]
c0015406:	6a 00                	push   0x0
c0015408:	68 9c 4b 01 c0       	push   0xc0014b9c
c001540d:	6a 06                	push   0x6
c001540f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015412:	ff d0                	call   eax
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541a:	8b 00                	mov    eax,DWORD PTR [eax]
c001541c:	83 c0 24             	add    eax,0x24
c001541f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015421:	6a 00                	push   0x0
c0015423:	68 89 4a 01 c0       	push   0xc0014a89
c0015428:	6a 07                	push   0x7
c001542a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542d:	ff d0                	call   eax
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015435:	8b 00                	mov    eax,DWORD PTR [eax]
c0015437:	83 c0 24             	add    eax,0x24
c001543a:	8b 00                	mov    eax,DWORD PTR [eax]
c001543c:	6a 00                	push   0x0
c001543e:	68 72 42 01 c0       	push   0xc0014272
c0015443:	6a 08                	push   0x8
c0015445:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015448:	ff d0                	call   eax
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015450:	8b 00                	mov    eax,DWORD PTR [eax]
c0015452:	83 c0 24             	add    eax,0x24
c0015455:	8b 00                	mov    eax,DWORD PTR [eax]
c0015457:	6a 00                	push   0x0
c0015459:	68 7d 4b 01 c0       	push   0xc0014b7d
c001545e:	6a 09                	push   0x9
c0015460:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015463:	ff d0                	call   eax
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546b:	8b 00                	mov    eax,DWORD PTR [eax]
c001546d:	83 c0 24             	add    eax,0x24
c0015470:	8b 00                	mov    eax,DWORD PTR [eax]
c0015472:	6a 00                	push   0x0
c0015474:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015479:	6a 0a                	push   0xa
c001547b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547e:	ff d0                	call   eax
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8b 00                	mov    eax,DWORD PTR [eax]
c0015488:	83 c0 24             	add    eax,0x24
c001548b:	8b 00                	mov    eax,DWORD PTR [eax]
c001548d:	6a 00                	push   0x0
c001548f:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015494:	6a 0b                	push   0xb
c0015496:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015499:	ff d0                	call   eax
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a3:	83 c0 24             	add    eax,0x24
c00154a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a8:	6a 00                	push   0x0
c00154aa:	68 7d 4b 01 c0       	push   0xc0014b7d
c00154af:	6a 0c                	push   0xc
c00154b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b4:	ff d0                	call   eax
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154be:	83 c0 24             	add    eax,0x24
c00154c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c3:	6a 00                	push   0x0
c00154c5:	68 fc 4a 01 c0       	push   0xc0014afc
c00154ca:	6a 0d                	push   0xd
c00154cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cf:	ff d0                	call   eax
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d9:	83 c0 24             	add    eax,0x24
c00154dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154de:	6a 00                	push   0x0
c00154e0:	68 35 4b 01 c0       	push   0xc0014b35
c00154e5:	6a 0e                	push   0xe
c00154e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ea:	ff d0                	call   eax
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f4:	83 c0 24             	add    eax,0x24
c00154f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f9:	6a 00                	push   0x0
c00154fb:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015500:	6a 0f                	push   0xf
c0015502:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015505:	ff d0                	call   eax
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	83 c0 24             	add    eax,0x24
c0015512:	8b 00                	mov    eax,DWORD PTR [eax]
c0015514:	6a 00                	push   0x0
c0015516:	68 7d 4b 01 c0       	push   0xc0014b7d
c001551b:	6a 10                	push   0x10
c001551d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015520:	ff d0                	call   eax
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 24             	add    eax,0x24
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015536:	6a 11                	push   0x11
c0015538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553b:	ff d0                	call   eax
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015543:	8b 00                	mov    eax,DWORD PTR [eax]
c0015545:	83 c0 24             	add    eax,0x24
c0015548:	8b 00                	mov    eax,DWORD PTR [eax]
c001554a:	6a 00                	push   0x0
c001554c:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015551:	6a 12                	push   0x12
c0015553:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015556:	ff d0                	call   eax
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015560:	83 c0 24             	add    eax,0x24
c0015563:	8b 00                	mov    eax,DWORD PTR [eax]
c0015565:	6a 00                	push   0x0
c0015567:	68 7d 4b 01 c0       	push   0xc0014b7d
c001556c:	6a 13                	push   0x13
c001556e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015571:	ff d0                	call   eax
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015579:	8b 00                	mov    eax,DWORD PTR [eax]
c001557b:	83 c0 24             	add    eax,0x24
c001557e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015580:	6a 00                	push   0x0
c0015582:	68 7d 4b 01 c0       	push   0xc0014b7d
c0015587:	6a 14                	push   0x14
c0015589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558c:	ff d0                	call   eax
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015594:	8b 00                	mov    eax,DWORD PTR [eax]
c0015596:	83 c0 24             	add    eax,0x24
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	6a 00                	push   0x0
c001559d:	68 7d 4b 01 c0       	push   0xc0014b7d
c00155a2:	6a 1e                	push   0x1e
c00155a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155af:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b1:	83 c0 24             	add    eax,0x24
c00155b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b6:	6a 00                	push   0x0
c00155b8:	68 ba c0 01 c0       	push   0xc001c0ba
c00155bd:	6a 60                	push   0x60
c00155bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c2:	ff d0                	call   eax
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155cd:	c9                   	leave  
c00155ce:	c3                   	ret    
c00155cf:	90                   	nop

c00155d0 <InterruptController::convertLegacyIRQNumber(int)>:
c00155d0:	55                   	push   ebp
c00155d1:	89 e5                	mov    ebp,esp
c00155d3:	83 ec 08             	sub    esp,0x8
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	83 ec 0c             	sub    esp,0xc
c00155dc:	50                   	push   eax
c00155dd:	e8 b6 e8 ff ff       	call   c0013e98 <Device::getName()>
c00155e2:	83 c4 10             	add    esp,0x10
c00155e5:	8a 00                	mov    al,BYTE PTR [eax]
c00155e7:	3c 41                	cmp    al,0x41
c00155e9:	0f 94 c0             	sete   al
c00155ec:	84 c0                	test   al,al
c00155ee:	74 28                	je     c0015618 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155f0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00155f4:	7f 12                	jg     c0015608 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00155f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155f9:	05 c0 cc 02 c0       	add    eax,0xc002ccc0
c00155fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015600:	0f b6 c0             	movzx  eax,al
c0015603:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015606:	eb 10                	jmp    c0015618 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015608:	83 ec 0c             	sub    esp,0xc
c001560b:	68 24 af 02 c0       	push   0xc002af24
c0015610:	e8 b6 48 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001561b:	c9                   	leave  
c001561c:	c3                   	ret    
c001561d:	90                   	nop

c001561e <startGUI(void*)>:
c001561e:	55                   	push   ebp
c001561f:	89 e5                	mov    ebp,esp
c0015621:	53                   	push   ebx
c0015622:	83 ec 04             	sub    esp,0x4
c0015625:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001562a:	48                   	dec    eax
c001562b:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0015630:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015635:	85 c0                	test   eax,eax
c0015637:	75 01                	jne    c001563a <startGUI(void*)+0x1c>
c0015639:	fb                   	sti    
c001563a:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c0015640:	83 ec 08             	sub    esp,0x8
c0015643:	6a 01                	push   0x1
c0015645:	68 a4 af 02 c0       	push   0xc002afa4
c001564a:	e8 46 7a 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c001564f:	83 c4 10             	add    esp,0x10
c0015652:	83 ec 08             	sub    esp,0x8
c0015655:	53                   	push   ebx
c0015656:	50                   	push   eax
c0015657:	e8 6a 7c 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c0015665:	83 ec 08             	sub    esp,0x8
c0015668:	6a 01                	push   0x1
c001566a:	68 be af 02 c0       	push   0xc002afbe
c001566f:	e8 21 7a 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c0015674:	83 c4 10             	add    esp,0x10
c0015677:	83 ec 08             	sub    esp,0x8
c001567a:	53                   	push   ebx
c001567b:	50                   	push   eax
c001567c:	e8 45 7c 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	90                   	nop
c0015685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015688:	c9                   	leave  
c0015689:	c3                   	ret    

c001568a <startGUIVESA(void*)>:
c001568a:	55                   	push   ebp
c001568b:	89 e5                	mov    ebp,esp
c001568d:	53                   	push   ebx
c001568e:	83 ec 04             	sub    esp,0x4
c0015691:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015696:	48                   	dec    eax
c0015697:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001569c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00156a1:	85 c0                	test   eax,eax
c00156a3:	75 01                	jne    c00156a6 <startGUIVESA(void*)+0x1c>
c00156a5:	fb                   	sti    
c00156a6:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c00156ac:	83 ec 08             	sub    esp,0x8
c00156af:	6a 01                	push   0x1
c00156b1:	68 d8 af 02 c0       	push   0xc002afd8
c00156b6:	e8 da 79 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c00156bb:	83 c4 10             	add    esp,0x10
c00156be:	83 ec 08             	sub    esp,0x8
c00156c1:	53                   	push   ebx
c00156c2:	50                   	push   eax
c00156c3:	e8 fe 7b 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c00156d1:	83 ec 08             	sub    esp,0x8
c00156d4:	6a 01                	push   0x1
c00156d6:	68 be af 02 c0       	push   0xc002afbe
c00156db:	e8 b5 79 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c00156e0:	83 c4 10             	add    esp,0x10
c00156e3:	83 ec 08             	sub    esp,0x8
c00156e6:	53                   	push   ebx
c00156e7:	50                   	push   eax
c00156e8:	e8 d9 7b 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	90                   	nop
c00156f1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156f4:	c9                   	leave  
c00156f5:	c3                   	ret    

c00156f6 <sendKeyToTerminal(unsigned char)>:
c00156f6:	55                   	push   ebp
c00156f7:	89 e5                	mov    ebp,esp
c00156f9:	83 ec 28             	sub    esp,0x28
c00156fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ff:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015702:	a1 24 db 02 c0       	mov    eax,ds:0xc002db24
c0015707:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001570b:	83 ec 08             	sub    esp,0x8
c001570e:	52                   	push   edx
c001570f:	50                   	push   eax
c0015710:	e8 ed b2 ff ff       	call   c0010a02 <VgaText::receiveKey(unsigned char)>
c0015715:	83 c4 10             	add    esp,0x10
c0015718:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001571c:	0f 85 8f 00 00 00    	jne    c00157b1 <sendKeyToTerminal(unsigned char)+0xbb>
c0015722:	fa                   	cli    
c0015723:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015728:	40                   	inc    eax
c0015729:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001572e:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c0015733:	40                   	inc    eax
c0015734:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c0015739:	a1 00 dc 02 c0       	mov    eax,ds:0xc002dc00
c001573e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015741:	c7 05 00 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc00,0x0
c001574b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001574f:	74 1f                	je     c0015770 <sendKeyToTerminal(unsigned char)+0x7a>
c0015751:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015754:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015757:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001575a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001575d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015766:	e8 73 87 00 00       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	eb db                	jmp    c001574b <sendKeyToTerminal(unsigned char)+0x55>
c0015770:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c0015775:	48                   	dec    eax
c0015776:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001577b:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c0015780:	85 c0                	test   eax,eax
c0015782:	75 18                	jne    c001579c <sendKeyToTerminal(unsigned char)+0xa6>
c0015784:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c0015789:	85 c0                	test   eax,eax
c001578b:	74 0f                	je     c001579c <sendKeyToTerminal(unsigned char)+0xa6>
c001578d:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c0015797:	e8 bf 82 00 00       	call   c001da5b <schedule()>
c001579c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00157a1:	48                   	dec    eax
c00157a2:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00157a7:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00157ac:	85 c0                	test   eax,eax
c00157ae:	75 01                	jne    c00157b1 <sendKeyToTerminal(unsigned char)+0xbb>
c00157b0:	fb                   	sti    
c00157b1:	90                   	nop
c00157b2:	c9                   	leave  
c00157b3:	c3                   	ret    

c00157b4 <sendKeyboardToken(KeyboardToken)>:
c00157b4:	55                   	push   ebp
c00157b5:	89 e5                	mov    ebp,esp
c00157b7:	83 ec 18             	sub    esp,0x18
c00157ba:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c0:	0f b7 c0             	movzx  eax,ax
c00157c3:	83 f2 01             	xor    edx,0x1
c00157c6:	88 90 20 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd23e0],dl
c00157cc:	a1 08 dc 02 c0       	mov    eax,ds:0xc002dc08
c00157d1:	85 c0                	test   eax,eax
c00157d3:	74 24                	je     c00157f9 <sendKeyboardToken(KeyboardToken)+0x45>
c00157d5:	8b 0d 08 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc08
c00157db:	83 ec 04             	sub    esp,0x4
c00157de:	68 20 dc 02 c0       	push   0xc002dc20
c00157e3:	83 ec 08             	sub    esp,0x8
c00157e6:	89 e2                	mov    edx,esp
c00157e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157eb:	89 02                	mov    DWORD PTR [edx],eax
c00157ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00157f0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00157f4:	ff d1                	call   ecx
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fc:	66 3d 03 02          	cmp    ax,0x203
c0015800:	75 07                	jne    c0015809 <sendKeyboardToken(KeyboardToken)+0x55>
c0015802:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c0015807:	84 c0                	test   al,al
c0015809:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001580d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015810:	a0 28 e0 02 c0       	mov    al,ds:0xc002e028
c0015815:	38 c2                	cmp    dl,al
c0015817:	74 1c                	je     c0015835 <sendKeyboardToken(KeyboardToken)+0x81>
c0015819:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001581c:	a2 28 e0 02 c0       	mov    ds:0xc002e028,al
c0015821:	a0 28 e0 02 c0       	mov    al,ds:0xc002e028
c0015826:	0f b6 c0             	movzx  eax,al
c0015829:	83 ec 0c             	sub    esp,0xc
c001582c:	50                   	push   eax
c001582d:	e8 12 a8 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015838:	84 c0                	test   al,al
c001583a:	0f 84 ae 00 00 00    	je     c00158ee <sendKeyboardToken(KeyboardToken)+0x13a>
c0015840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015843:	66 3d 10 03          	cmp    ax,0x310
c0015847:	75 06                	jne    c001584f <sendKeyboardToken(KeyboardToken)+0x9b>
c0015849:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001584f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015852:	66 3d 11 03          	cmp    ax,0x311
c0015856:	75 06                	jne    c001585e <sendKeyboardToken(KeyboardToken)+0xaa>
c0015858:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	66 3d 12 03          	cmp    ax,0x312
c0015865:	75 06                	jne    c001586d <sendKeyboardToken(KeyboardToken)+0xb9>
c0015867:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	66 3d 13 03          	cmp    ax,0x313
c0015874:	75 06                	jne    c001587c <sendKeyboardToken(KeyboardToken)+0xc8>
c0015876:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587f:	66 3d 14 03          	cmp    ax,0x314
c0015883:	75 06                	jne    c001588b <sendKeyboardToken(KeyboardToken)+0xd7>
c0015885:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001588b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588e:	66 3d 15 03          	cmp    ax,0x315
c0015892:	75 06                	jne    c001589a <sendKeyboardToken(KeyboardToken)+0xe6>
c0015894:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001589a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589d:	66 3d 16 03          	cmp    ax,0x316
c00158a1:	75 06                	jne    c00158a9 <sendKeyboardToken(KeyboardToken)+0xf5>
c00158a3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	66 3d 17 03          	cmp    ax,0x317
c00158b0:	75 06                	jne    c00158b8 <sendKeyboardToken(KeyboardToken)+0x104>
c00158b2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bb:	66 3d 18 03          	cmp    ax,0x318
c00158bf:	75 06                	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x113>
c00158c1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	66 3d 19 03          	cmp    ax,0x319
c00158ce:	75 06                	jne    c00158d6 <sendKeyboardToken(KeyboardToken)+0x122>
c00158d0:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00158d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d9:	66 3d 1a 03          	cmp    ax,0x31a
c00158dd:	0f 85 c9 00 00 00    	jne    c00159ac <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158e3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00158e9:	e9 be 00 00 00       	jmp    c00159ac <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f1:	66 3d 10 03          	cmp    ax,0x310
c00158f5:	75 0a                	jne    c0015901 <sendKeyboardToken(KeyboardToken)+0x14d>
c00158f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00158fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015904:	66 3d 11 03          	cmp    ax,0x311
c0015908:	75 0a                	jne    c0015914 <sendKeyboardToken(KeyboardToken)+0x160>
c001590a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015910:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015917:	66 3d 12 03          	cmp    ax,0x312
c001591b:	75 0a                	jne    c0015927 <sendKeyboardToken(KeyboardToken)+0x173>
c001591d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015923:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592a:	66 3d 13 03          	cmp    ax,0x313
c001592e:	75 0a                	jne    c001593a <sendKeyboardToken(KeyboardToken)+0x186>
c0015930:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015936:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001593a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593d:	66 3d 14 03          	cmp    ax,0x314
c0015941:	75 0a                	jne    c001594d <sendKeyboardToken(KeyboardToken)+0x199>
c0015943:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015949:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	66 3d 15 03          	cmp    ax,0x315
c0015954:	75 0a                	jne    c0015960 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015956:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001595c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015963:	66 3d 16 03          	cmp    ax,0x316
c0015967:	75 0a                	jne    c0015973 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015969:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001596f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015976:	66 3d 17 03          	cmp    ax,0x317
c001597a:	75 0a                	jne    c0015986 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001597c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015982:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	66 3d 18 03          	cmp    ax,0x318
c001598d:	75 0a                	jne    c0015999 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001598f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015995:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599c:	66 3d 19 03          	cmp    ax,0x319
c00159a0:	75 0a                	jne    c00159ac <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159a2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159af:	66 3d 00 02          	cmp    ax,0x200
c00159b3:	75 2c                	jne    c00159e1 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159b5:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c00159ba:	83 f0 01             	xor    eax,0x1
c00159bd:	84 c0                	test   al,al
c00159bf:	74 20                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159c1:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00159c6:	6a 01                	push   0x1
c00159c8:	6a 00                	push   0x0
c00159ca:	68 1e 56 01 c0       	push   0xc001561e
c00159cf:	50                   	push   eax
c00159d0:	e8 61 7e 00 00       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	c6 05 20 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e020,0x1
c00159df:	eb 33                	jmp    c0015a14 <sendKeyboardToken(KeyboardToken)+0x260>
c00159e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e4:	66 3d 01 02          	cmp    ax,0x201
c00159e8:	75 2a                	jne    c0015a14 <sendKeyboardToken(KeyboardToken)+0x260>
c00159ea:	a0 20 e0 02 c0       	mov    al,ds:0xc002e020
c00159ef:	83 f0 01             	xor    eax,0x1
c00159f2:	84 c0                	test   al,al
c00159f4:	74 1e                	je     c0015a14 <sendKeyboardToken(KeyboardToken)+0x260>
c00159f6:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00159fb:	6a 01                	push   0x1
c00159fd:	6a 00                	push   0x0
c00159ff:	68 8a 56 01 c0       	push   0xc001568a
c0015a04:	50                   	push   eax
c0015a05:	e8 2c 7e 00 00       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	c6 05 20 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e020,0x1
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 3d 1d 03          	cmp    ax,0x31d
c0015a1b:	75 06                	jne    c0015a23 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a1d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a26:	66 3d 1c 03          	cmp    ax,0x31c
c0015a2a:	75 06                	jne    c0015a32 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a2c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a35:	66 3d 1b 03          	cmp    ax,0x31b
c0015a39:	75 06                	jne    c0015a41 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a3b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a44:	66 3d 1e 03          	cmp    ax,0x31e
c0015a48:	75 06                	jne    c0015a50 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a4a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a53:	66 3d 1f 03          	cmp    ax,0x31f
c0015a57:	75 06                	jne    c0015a5f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a59:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a62:	66 3d 1a 03          	cmp    ax,0x31a
c0015a66:	75 06                	jne    c0015a6e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015a68:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015a6e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015a72:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a75:	83 f0 01             	xor    eax,0x1
c0015a78:	84 c0                	test   al,al
c0015a7a:	74 77                	je     c0015af3 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015a7c:	a0 21 dd 02 c0       	mov    al,ds:0xc002dd21
c0015a81:	84 c0                	test   al,al
c0015a83:	74 41                	je     c0015ac6 <sendKeyboardToken(KeyboardToken)+0x312>
c0015a85:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a89:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015a8d:	74 2b                	je     c0015aba <sendKeyboardToken(KeyboardToken)+0x306>
c0015a8f:	8b 15 24 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e024
c0015a95:	89 d0                	mov    eax,edx
c0015a97:	c1 e0 02             	shl    eax,0x2
c0015a9a:	01 d0                	add    eax,edx
c0015a9c:	01 c0                	add    eax,eax
c0015a9e:	a3 24 e0 02 c0       	mov    ds:0xc002e024,eax
c0015aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa6:	0f b7 c0             	movzx  eax,ax
c0015aa9:	8d 50 d0             	lea    edx,[eax-0x30]
c0015aac:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015ab1:	01 d0                	add    eax,edx
c0015ab3:	a3 24 e0 02 c0       	mov    ds:0xc002e024,eax
c0015ab8:	eb 6d                	jmp    c0015b27 <sendKeyboardToken(KeyboardToken)+0x373>
c0015aba:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015ac4:	eb 61                	jmp    c0015b27 <sendKeyboardToken(KeyboardToken)+0x373>
c0015ac6:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015acb:	85 c0                	test   eax,eax
c0015acd:	74 18                	je     c0015ae7 <sendKeyboardToken(KeyboardToken)+0x333>
c0015acf:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015ad4:	0f b6 c0             	movzx  eax,al
c0015ad7:	83 ec 0c             	sub    esp,0xc
c0015ada:	50                   	push   eax
c0015adb:	e8 16 fc ff ff       	call   c00156f6 <sendKeyToTerminal(unsigned char)>
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ae7:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015af1:	eb 34                	jmp    c0015b27 <sendKeyboardToken(KeyboardToken)+0x373>
c0015af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af6:	66 3d 01 01          	cmp    ax,0x101
c0015afa:	75 2b                	jne    c0015b27 <sendKeyboardToken(KeyboardToken)+0x373>
c0015afc:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015b01:	85 c0                	test   eax,eax
c0015b03:	74 18                	je     c0015b1d <sendKeyboardToken(KeyboardToken)+0x369>
c0015b05:	a1 24 e0 02 c0       	mov    eax,ds:0xc002e024
c0015b0a:	0f b6 c0             	movzx  eax,al
c0015b0d:	83 ec 0c             	sub    esp,0xc
c0015b10:	50                   	push   eax
c0015b11:	e8 e0 fb ff ff       	call   c00156f6 <sendKeyToTerminal(unsigned char)>
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b1d:	c7 05 24 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e024,0x0
c0015b27:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b2a:	83 f0 01             	xor    eax,0x1
c0015b2d:	84 c0                	test   al,al
c0015b2f:	74 4c                	je     c0015b7d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b31:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b34:	83 f0 01             	xor    eax,0x1
c0015b37:	84 c0                	test   al,al
c0015b39:	74 42                	je     c0015b7d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b3b:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c0015b40:	83 f0 01             	xor    eax,0x1
c0015b43:	84 c0                	test   al,al
c0015b45:	74 36                	je     c0015b7d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4a:	66 83 f8 1f          	cmp    ax,0x1f
c0015b4e:	76 09                	jbe    c0015b59 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b53:	66 83 f8 7e          	cmp    ax,0x7e
c0015b57:	76 12                	jbe    c0015b6b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5c:	66 83 f8 0a          	cmp    ax,0xa
c0015b60:	74 09                	je     c0015b6b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b65:	66 83 f8 08          	cmp    ax,0x8
c0015b69:	75 12                	jne    c0015b7d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6e:	0f b6 c0             	movzx  eax,al
c0015b71:	83 ec 0c             	sub    esp,0xc
c0015b74:	50                   	push   eax
c0015b75:	e8 7c fb ff ff       	call   c00156f6 <sendKeyToTerminal(unsigned char)>
c0015b7a:	83 c4 10             	add    esp,0x10
c0015b7d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b80:	83 f0 01             	xor    eax,0x1
c0015b83:	84 c0                	test   al,al
c0015b85:	74 4f                	je     c0015bd6 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b87:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b8a:	83 f0 01             	xor    eax,0x1
c0015b8d:	84 c0                	test   al,al
c0015b8f:	74 45                	je     c0015bd6 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b91:	a0 20 dd 02 c0       	mov    al,ds:0xc002dd20
c0015b96:	84 c0                	test   al,al
c0015b98:	74 3c                	je     c0015bd6 <sendKeyboardToken(KeyboardToken)+0x422>
c0015b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9d:	66 83 f8 3f          	cmp    ax,0x3f
c0015ba1:	76 33                	jbe    c0015bd6 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba6:	66 83 f8 7f          	cmp    ax,0x7f
c0015baa:	77 2a                	ja     c0015bd6 <sendKeyboardToken(KeyboardToken)+0x422>
c0015bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015baf:	88 c2                	mov    dl,al
c0015bb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb4:	66 83 f8 5f          	cmp    ax,0x5f
c0015bb8:	76 04                	jbe    c0015bbe <sendKeyboardToken(KeyboardToken)+0x40a>
c0015bba:	b0 20                	mov    al,0x20
c0015bbc:	eb 02                	jmp    c0015bc0 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015bbe:	b0 00                	mov    al,0x0
c0015bc0:	29 c2                	sub    edx,eax
c0015bc2:	88 d0                	mov    al,dl
c0015bc4:	83 e8 40             	sub    eax,0x40
c0015bc7:	0f b6 c0             	movzx  eax,al
c0015bca:	83 ec 0c             	sub    esp,0xc
c0015bcd:	50                   	push   eax
c0015bce:	e8 23 fb ff ff       	call   c00156f6 <sendKeyToTerminal(unsigned char)>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd9:	66 3d 00 03          	cmp    ax,0x300
c0015bdd:	75 0f                	jne    c0015bee <sendKeyboardToken(KeyboardToken)+0x43a>
c0015bdf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015be2:	83 f0 01             	xor    eax,0x1
c0015be5:	84 c0                	test   al,al
c0015be7:	74 05                	je     c0015bee <sendKeyboardToken(KeyboardToken)+0x43a>
c0015be9:	e8 c7 a7 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015bee:	90                   	nop
c0015bef:	c9                   	leave  
c0015bf0:	c3                   	ret    

c0015bf1 <clearInternalKeybuffer(VgaText*)>:
c0015bf1:	55                   	push   ebp
c0015bf2:	89 e5                	mov    ebp,esp
c0015bf4:	83 ec 08             	sub    esp,0x8
c0015bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bfa:	05 98 01 00 00       	add    eax,0x198
c0015bff:	83 ec 0c             	sub    esp,0xc
c0015c02:	50                   	push   eax
c0015c03:	e8 64 ab fe ff       	call   c000076c <strlen>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c0e:	81 c2 98 01 00 00    	add    edx,0x198
c0015c14:	83 ec 04             	sub    esp,0x4
c0015c17:	50                   	push   eax
c0015c18:	6a 00                	push   0x0
c0015c1a:	52                   	push   edx
c0015c1b:	e8 30 ab fe ff       	call   c0000750 <memset>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	90                   	nop
c0015c24:	c9                   	leave  
c0015c25:	c3                   	ret    

c0015c26 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c26:	55                   	push   ebp
c0015c27:	89 e5                	mov    ebp,esp
c0015c29:	83 ec 18             	sub    esp,0x18
c0015c2c:	a1 08 dc 02 c0       	mov    eax,ds:0xc002dc08
c0015c31:	85 c0                	test   eax,eax
c0015c33:	74 2a                	je     c0015c5f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015c35:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015c3b:	8b 0d 08 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc08
c0015c41:	83 ec 04             	sub    esp,0x4
c0015c44:	68 20 dc 02 c0       	push   0xc002dc20
c0015c49:	83 ec 08             	sub    esp,0x8
c0015c4c:	89 e2                	mov    edx,esp
c0015c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c51:	89 02                	mov    DWORD PTR [edx],eax
c0015c53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c56:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c5a:	ff d1                	call   ecx
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	fb                   	sti    
c0015c60:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c67:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c6b:	0f 84 a1 00 00 00    	je     c0015d12 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c74:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c7a:	84 c0                	test   al,al
c0015c7c:	75 28                	jne    c0015ca6 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015c7e:	fa                   	cli    
c0015c7f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015c84:	40                   	inc    eax
c0015c85:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0015c8a:	e8 cc 7d 00 00       	call   c001da5b <schedule()>
c0015c8f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015c94:	48                   	dec    eax
c0015c95:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0015c9a:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c0015c9f:	85 c0                	test   eax,eax
c0015ca1:	75 ce                	jne    c0015c71 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015ca3:	fb                   	sti    
c0015ca4:	eb cb                	jmp    c0015c71 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015ca6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ca9:	8d 50 01             	lea    edx,[eax+0x1]
c0015cac:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015caf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cb2:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015cb8:	88 10                	mov    BYTE PTR [eax],dl
c0015cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbd:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cc3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc9:	05 98 01 00 00       	add    eax,0x198
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	50                   	push   eax
c0015cd2:	e8 95 aa fe ff       	call   c000076c <strlen>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015cdd:	81 c2 98 01 00 00    	add    edx,0x198
c0015ce3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ce6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ce9:	81 c2 98 01 00 00    	add    edx,0x198
c0015cef:	83 ec 04             	sub    esp,0x4
c0015cf2:	50                   	push   eax
c0015cf3:	51                   	push   ecx
c0015cf4:	52                   	push   edx
c0015cf5:	e8 8e a9 fe ff       	call   c0000688 <memmove>
c0015cfa:	83 c4 10             	add    esp,0x10
c0015cfd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015d00:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015d03:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015d07:	0f 85 5a ff ff ff    	jne    c0015c67 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015d0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d10:	eb 03                	jmp    c0015d15 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d15:	c9                   	leave  
c0015d16:	c3                   	ret    
c0015d17:	90                   	nop

c0015d18 <Keyboard::Keyboard(char const*)>:
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d1f:	83 ec 08             	sub    esp,0x8
c0015d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d26:	50                   	push   eax
c0015d27:	e8 70 e0 ff ff       	call   c0013d9c <Device::Device(char const*)>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	ba fc af 02 c0       	mov    edx,0xc002affc
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	89 10                	mov    DWORD PTR [eax],edx
c0015d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d48:	c6 05 04 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc04,0x1
c0015d4f:	90                   	nop
c0015d50:	83 c4 0c             	add    esp,0xc
c0015d53:	c3                   	ret    

c0015d54 <Keyboard::~Keyboard()>:
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	ba fc af 02 c0       	mov    edx,0xc002affc
c0015d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d60:	89 10                	mov    DWORD PTR [eax],edx
c0015d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d66:	83 ec 0c             	sub    esp,0xc
c0015d69:	50                   	push   eax
c0015d6a:	e8 f7 dc ff ff       	call   c0013a66 <Device::~Device()>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	90                   	nop
c0015d73:	83 c4 0c             	add    esp,0xc
c0015d76:	c3                   	ret    
c0015d77:	90                   	nop

c0015d78 <Keyboard::~Keyboard()>:
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	83 ec 0c             	sub    esp,0xc
c0015d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d82:	e8 cd ff ff ff       	call   c0015d54 <Keyboard::~Keyboard()>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	83 ec 08             	sub    esp,0x8
c0015d8d:	68 5c 01 00 00       	push   0x15c
c0015d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d96:	e8 ec c8 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 c4 0c             	add    esp,0xc
c0015da1:	c3                   	ret    

c0015da2 <LogicalDisk::close(int, int, void*)>:
c0015da2:	83 c8 ff             	or     eax,0xffffffff
c0015da5:	c3                   	ret    

c0015da6 <LogicalDisk::~LogicalDisk()>:
c0015da6:	83 ec 0c             	sub    esp,0xc
c0015da9:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c0015dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db2:	89 10                	mov    DWORD PTR [eax],edx
c0015db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db8:	83 ec 0c             	sub    esp,0xc
c0015dbb:	50                   	push   eax
c0015dbc:	e8 a5 dc ff ff       	call   c0013a66 <Device::~Device()>
c0015dc1:	83 c4 10             	add    esp,0x10
c0015dc4:	90                   	nop
c0015dc5:	83 c4 0c             	add    esp,0xc
c0015dc8:	c3                   	ret    
c0015dc9:	90                   	nop

c0015dca <LogicalDisk::~LogicalDisk()>:
c0015dca:	83 ec 0c             	sub    esp,0xc
c0015dcd:	83 ec 0c             	sub    esp,0xc
c0015dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dd4:	e8 cd ff ff ff       	call   c0015da6 <LogicalDisk::~LogicalDisk()>
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	83 ec 08             	sub    esp,0x8
c0015ddf:	68 74 01 00 00       	push   0x174
c0015de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de8:	e8 9a c8 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	83 c4 0c             	add    esp,0xc
c0015df3:	c3                   	ret    

c0015df4 <LogicalDisk::open(int, int, void*)>:
c0015df4:	83 ec 18             	sub    esp,0x18
c0015df7:	68 28 b0 02 c0       	push   0xc002b028
c0015dfc:	e8 ca 40 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0015e01:	83 c8 ff             	or     eax,0xffffffff
c0015e04:	83 c4 1c             	add    esp,0x1c
c0015e07:	c3                   	ret    

c0015e08 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015e08:	53                   	push   ebx
c0015e09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e15:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015e1b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015e21:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015e27:	77 10                	ja     c0015e39 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015e29:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e2f:	89 d3                	mov    ebx,edx
c0015e31:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e37:	72 05                	jb     c0015e3e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e39:	83 c8 ff             	or     eax,0xffffffff
c0015e3c:	89 c2                	mov    edx,eax
c0015e3e:	5b                   	pop    ebx
c0015e3f:	c3                   	ret    

c0015e40 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e40:	56                   	push   esi
c0015e41:	83 c8 ff             	or     eax,0xffffffff
c0015e44:	53                   	push   ebx
c0015e45:	89 c2                	mov    edx,eax
c0015e47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e4b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e4f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e59:	77 27                	ja     c0015e82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e5b:	89 d8                	mov    eax,ebx
c0015e5d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e63:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e6e:	89 c2                	mov    edx,eax
c0015e70:	73 10                	jae    c0015e82 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e72:	89 c8                	mov    eax,ecx
c0015e74:	89 da                	mov    edx,ebx
c0015e76:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015e7c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015e82:	5b                   	pop    ebx
c0015e83:	5e                   	pop    esi
c0015e84:	c3                   	ret    
c0015e85:	90                   	nop

c0015e86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015e86:	83 ec 1c             	sub    esp,0x1c
c0015e89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015e91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015e9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ea0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ea4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eac:	83 ec 08             	sub    esp,0x8
c0015eaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015eb3:	50                   	push   eax
c0015eb4:	e8 e3 de ff ff       	call   c0013d9c <Device::Device(char const*)>
c0015eb9:	83 c4 10             	add    esp,0x10
c0015ebc:	ba 74 b0 02 c0       	mov    edx,0xc002b074
c0015ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec5:	89 10                	mov    DWORD PTR [eax],edx
c0015ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ecb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ed6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015eeb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015eef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ef3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ef7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015efd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015f03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f0e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015f14:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f22:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f2c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f36:	90                   	nop
c0015f37:	83 c4 1c             	add    esp,0x1c
c0015f3a:	c3                   	ret    
c0015f3b:	90                   	nop

c0015f3c <LogicalDisk::assignDriveLetter()>:
c0015f3c:	55                   	push   ebp
c0015f3d:	57                   	push   edi
c0015f3e:	56                   	push   esi
c0015f3f:	53                   	push   ebx
c0015f40:	83 ec 14             	sub    esp,0x14
c0015f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f47:	8b 3d 40 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e040
c0015f4d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f53:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f57:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f5d:	8b 3d 44 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e044
c0015f63:	3c 01                	cmp    al,0x1
c0015f65:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015f6d:	19 c0                	sbb    eax,eax
c0015f6f:	83 e0 02             	and    eax,0x2
c0015f72:	83 c0 41             	add    eax,0x41
c0015f75:	0f be e8             	movsx  ebp,al
c0015f78:	3c 43                	cmp    al,0x43
c0015f7a:	75 10                	jne    c0015f8c <LogicalDisk::assignDriveLetter()+0x50>
c0015f7c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015f83:	75 5d                	jne    c0015fe2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f85:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f8a:	75 56                	jne    c0015fe2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f8c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015f8f:	ba 01 00 00 00       	mov    edx,0x1
c0015f94:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015f98:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015f9c:	d3 e2                	shl    edx,cl
c0015f9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fa2:	89 d7                	mov    edi,edx
c0015fa4:	89 d6                	mov    esi,edx
c0015fa6:	c1 ff 1f             	sar    edi,0x1f
c0015fa9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015fad:	21 f9                	and    ecx,edi
c0015faf:	09 d1                	or     ecx,edx
c0015fb1:	75 2f                	jne    c0015fe2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fb3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fbb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015fc1:	09 f2                	or     edx,esi
c0015fc3:	89 15 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,edx
c0015fc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fcd:	09 fa                	or     edx,edi
c0015fcf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015fd3:	89 15 44 e0 02 c0    	mov    DWORD PTR ds:0xc002e044,edx
c0015fd9:	89 1c bd 60 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1fa0],ebx
c0015fe0:	eb 08                	jmp    c0015fea <LogicalDisk::assignDriveLetter()+0xae>
c0015fe2:	45                   	inc    ebp
c0015fe3:	40                   	inc    eax
c0015fe4:	3c 5b                	cmp    al,0x5b
c0015fe6:	75 90                	jne    c0015f78 <LogicalDisk::assignDriveLetter()+0x3c>
c0015fe8:	31 c0                	xor    eax,eax
c0015fea:	83 c4 14             	add    esp,0x14
c0015fed:	5b                   	pop    ebx
c0015fee:	5e                   	pop    esi
c0015fef:	5f                   	pop    edi
c0015ff0:	5d                   	pop    ebp
c0015ff1:	c3                   	ret    

c0015ff2 <LogicalDisk::mount()>:
c0015ff2:	56                   	push   esi
c0015ff3:	53                   	push   ebx
c0015ff4:	53                   	push   ebx
c0015ff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ff9:	8b 1d d4 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd4
c0015fff:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016009:	85 db                	test   ebx,ebx
c001600b:	74 27                	je     c0016034 <LogicalDisk::mount()+0x42>
c001600d:	51                   	push   ecx
c001600e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016015:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016017:	83 e8 41             	sub    eax,0x41
c001601a:	50                   	push   eax
c001601b:	56                   	push   esi
c001601c:	53                   	push   ebx
c001601d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016020:	83 c4 10             	add    esp,0x10
c0016023:	84 c0                	test   al,al
c0016025:	74 08                	je     c001602f <LogicalDisk::mount()+0x3d>
c0016027:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001602d:	eb 07                	jmp    c0016036 <LogicalDisk::mount()+0x44>
c001602f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016032:	eb d5                	jmp    c0016009 <LogicalDisk::mount()+0x17>
c0016034:	31 c0                	xor    eax,eax
c0016036:	5a                   	pop    edx
c0016037:	5b                   	pop    ebx
c0016038:	5e                   	pop    esi
c0016039:	c3                   	ret    

c001603a <LogicalDisk::unmount()>:
c001603a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001603e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016048:	c3                   	ret    
c0016049:	90                   	nop

c001604a <LogicalDisk::eject()>:
c001604a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001604e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016054:	8b 10                	mov    edx,DWORD PTR [eax]
c0016056:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001605a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001605d:	90                   	nop

c001605e <LogicalDisk::unassignDriveLetter()>:
c001605e:	57                   	push   edi
c001605f:	56                   	push   esi
c0016060:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016064:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001606b:	84 c9                	test   cl,cl
c001606d:	75 0f                	jne    c001607e <LogicalDisk::unassignDriveLetter()+0x20>
c001606f:	c7 44 24 0c 4c b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b04c
c0016077:	5e                   	pop    esi
c0016078:	5f                   	pop    edi
c0016079:	e9 4d 3e 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c001607e:	83 e9 41             	sub    ecx,0x41
c0016081:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016088:	b8 01 00 00 00       	mov    eax,0x1
c001608d:	c7 04 8d 60 e0 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1fa0],0x0
c0016098:	d3 e0                	shl    eax,cl
c001609a:	89 c7                	mov    edi,eax
c001609c:	f7 d0                	not    eax
c001609e:	c1 ff 1f             	sar    edi,0x1f
c00160a1:	21 05 40 e0 02 c0    	and    DWORD PTR ds:0xc002e040,eax
c00160a7:	89 fe                	mov    esi,edi
c00160a9:	f7 d6                	not    esi
c00160ab:	21 35 44 e0 02 c0    	and    DWORD PTR ds:0xc002e044,esi
c00160b1:	5e                   	pop    esi
c00160b2:	5f                   	pop    edi
c00160b3:	c3                   	ret    

c00160b4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160b4:	57                   	push   edi
c00160b5:	56                   	push   esi
c00160b6:	53                   	push   ebx
c00160b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160cd:	77 41                	ja     c0016110 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00160cf:	99                   	cdq    
c00160d0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00160d6:	01 c8                	add    eax,ecx
c00160d8:	11 da                	adc    edx,ebx
c00160da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160e0:	19 d7                	sbb    edi,edx
c00160e2:	72 33                	jb     c0016117 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00160e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016104:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016108:	5b                   	pop    ebx
c0016109:	5e                   	pop    esi
c001610a:	5f                   	pop    edi
c001610b:	e9 cc 0a 00 00       	jmp    c0016bdc <VCache::read(unsigned long long, int, void*)>
c0016110:	b8 05 00 00 00       	mov    eax,0x5
c0016115:	eb 05                	jmp    c001611c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016117:	b8 07 00 00 00       	mov    eax,0x7
c001611c:	5b                   	pop    ebx
c001611d:	5e                   	pop    esi
c001611e:	5f                   	pop    edi
c001611f:	c3                   	ret    

c0016120 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016120:	57                   	push   edi
c0016121:	56                   	push   esi
c0016122:	53                   	push   ebx
c0016123:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016127:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001612b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001612f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016133:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016139:	77 41                	ja     c001617c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001613b:	99                   	cdq    
c001613c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016142:	01 c8                	add    eax,ecx
c0016144:	11 da                	adc    edx,ebx
c0016146:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001614c:	19 d7                	sbb    edi,edx
c001614e:	72 33                	jb     c0016183 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016150:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016156:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001615c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016160:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016164:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001616a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016170:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016174:	5b                   	pop    ebx
c0016175:	5e                   	pop    esi
c0016176:	5f                   	pop    edi
c0016177:	e9 76 09 00 00       	jmp    c0016af2 <VCache::write(unsigned long long, int, void*)>
c001617c:	b8 05 00 00 00       	mov    eax,0x5
c0016181:	eb 05                	jmp    c0016188 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016183:	b8 07 00 00 00       	mov    eax,0x7
c0016188:	5b                   	pop    ebx
c0016189:	5e                   	pop    esi
c001618a:	5f                   	pop    edi
c001618b:	c3                   	ret    

c001618c <Mouse::Mouse(char const*)>:
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016193:	83 ec 08             	sub    esp,0x8
c0016196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619a:	50                   	push   eax
c001619b:	e8 fc db ff ff       	call   c0013d9c <Device::Device(char const*)>
c00161a0:	83 c4 10             	add    esp,0x10
c00161a3:	ba a0 b0 02 c0       	mov    edx,0xc002b0a0
c00161a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ac:	89 10                	mov    DWORD PTR [eax],edx
c00161ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161bc:	90                   	nop
c00161bd:	83 c4 0c             	add    esp,0xc
c00161c0:	c3                   	ret    
c00161c1:	90                   	nop

c00161c2 <Mouse::~Mouse()>:
c00161c2:	83 ec 0c             	sub    esp,0xc
c00161c5:	ba a0 b0 02 c0       	mov    edx,0xc002b0a0
c00161ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ce:	89 10                	mov    DWORD PTR [eax],edx
c00161d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161d4:	83 ec 0c             	sub    esp,0xc
c00161d7:	50                   	push   eax
c00161d8:	e8 89 d8 ff ff       	call   c0013a66 <Device::~Device()>
c00161dd:	83 c4 10             	add    esp,0x10
c00161e0:	90                   	nop
c00161e1:	83 c4 0c             	add    esp,0xc
c00161e4:	c3                   	ret    
c00161e5:	90                   	nop

c00161e6 <Mouse::~Mouse()>:
c00161e6:	83 ec 0c             	sub    esp,0xc
c00161e9:	83 ec 0c             	sub    esp,0xc
c00161ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161f0:	e8 cd ff ff ff       	call   c00161c2 <Mouse::~Mouse()>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	83 ec 08             	sub    esp,0x8
c00161fb:	68 58 01 00 00       	push   0x158
c0016200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016204:	e8 7e c4 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	83 c4 0c             	add    esp,0xc
c001620f:	c3                   	ret    

c0016210 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016210:	55                   	push   ebp
c0016211:	57                   	push   edi
c0016212:	56                   	push   esi
c0016213:	53                   	push   ebx
c0016214:	81 ec 28 01 00 00    	sub    esp,0x128
c001621a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016221:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016228:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001622f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016236:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001623a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001623e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016245:	e8 4e dc ff ff       	call   c0013e98 <Device::getName()>
c001624a:	5a                   	pop    edx
c001624b:	59                   	pop    ecx
c001624c:	50                   	push   eax
c001624d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016251:	55                   	push   ebp
c0016252:	e8 b5 a5 fe ff       	call   c000080c <strcpy>
c0016257:	5b                   	pop    ebx
c0016258:	58                   	pop    eax
c0016259:	68 c4 b0 02 c0       	push   0xc002b0c4
c001625e:	55                   	push   ebp
c001625f:	e8 e8 a6 fe ff       	call   c000094c <strcat>
c0016264:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001626b:	e8 29 93 ff ff       	call   c000f599 <malloc>
c0016270:	83 c4 0c             	add    esp,0xc
c0016273:	89 c3                	mov    ebx,eax
c0016275:	57                   	push   edi
c0016276:	56                   	push   esi
c0016277:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001627b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001627f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016286:	55                   	push   ebp
c0016287:	50                   	push   eax
c0016288:	e8 f9 fb ff ff       	call   c0015e86 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001628d:	83 c4 14             	add    esp,0x14
c0016290:	53                   	push   ebx
c0016291:	e8 a6 fc ff ff       	call   c0015f3c <LogicalDisk::assignDriveLetter()>
c0016296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016299:	e8 54 fd ff ff       	call   c0015ff2 <LogicalDisk::mount()>
c001629e:	58                   	pop    eax
c001629f:	5a                   	pop    edx
c00162a0:	53                   	push   ebx
c00162a1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162a8:	e8 eb d8 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c00162ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162b3:	5b                   	pop    ebx
c00162b4:	5e                   	pop    esi
c00162b5:	5f                   	pop    edi
c00162b6:	5d                   	pop    ebp
c00162b7:	c3                   	ret    

c00162b8 <createPartitionsForDisk(PhysicalDisk*)>:
c00162b8:	55                   	push   ebp
c00162b9:	57                   	push   edi
c00162ba:	56                   	push   esi
c00162bb:	53                   	push   ebx
c00162bc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162c2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00162cf:	3d 00 02 00 00       	cmp    eax,0x200
c00162d4:	74 27                	je     c00162fd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00162d6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00162dc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00162e2:	83 ec 10             	sub    esp,0x10
c00162e5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00162e9:	99                   	cdq    
c00162ea:	c1 e6 0a             	shl    esi,0xa
c00162ed:	52                   	push   edx
c00162ee:	89 fd                	mov    ebp,edi
c00162f0:	50                   	push   eax
c00162f1:	55                   	push   ebp
c00162f2:	56                   	push   esi
c00162f3:	e8 ac 04 01 00       	call   c00267a4 <__udivdi3>
c00162f8:	e9 b1 00 00 00       	jmp    c00163ae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162fd:	83 ec 0c             	sub    esp,0xc
c0016300:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016302:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016306:	56                   	push   esi
c0016307:	6a 01                	push   0x1
c0016309:	6a 00                	push   0x0
c001630b:	6a 00                	push   0x0
c001630d:	53                   	push   ebx
c001630e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016311:	83 c4 20             	add    esp,0x20
c0016314:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001631c:	75 0a                	jne    c0016328 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001631e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016326:	74 2c                	je     c0016354 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016328:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001632e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016334:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001633a:	83 ec 10             	sub    esp,0x10
c001633d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016341:	89 f7                	mov    edi,esi
c0016343:	c1 e0 0a             	shl    eax,0xa
c0016346:	c1 ff 1f             	sar    edi,0x1f
c0016349:	57                   	push   edi
c001634a:	56                   	push   esi
c001634b:	52                   	push   edx
c001634c:	50                   	push   eax
c001634d:	e8 52 04 01 00       	call   c00267a4 <__udivdi3>
c0016352:	eb 5a                	jmp    c00163ae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016354:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001635b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016362:	83 e1 7f             	and    ecx,0x7f
c0016365:	83 e0 7f             	and    eax,0x7f
c0016368:	01 c1                	add    ecx,eax
c001636a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016371:	83 e0 7f             	and    eax,0x7f
c0016374:	01 c1                	add    ecx,eax
c0016376:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001637d:	83 e0 7f             	and    eax,0x7f
c0016380:	00 c1                	add    cl,al
c0016382:	74 41                	je     c00163c5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016384:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001638a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016390:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016396:	83 ec 10             	sub    esp,0x10
c0016399:	0f a4 c2 0a          	shld   edx,eax,0xa
c001639d:	89 f7                	mov    edi,esi
c001639f:	c1 e0 0a             	shl    eax,0xa
c00163a2:	c1 ff 1f             	sar    edi,0x1f
c00163a5:	57                   	push   edi
c00163a6:	56                   	push   esi
c00163a7:	52                   	push   edx
c00163a8:	50                   	push   eax
c00163a9:	e8 f6 03 01 00       	call   c00267a4 <__udivdi3>
c00163ae:	83 c4 14             	add    esp,0x14
c00163b1:	52                   	push   edx
c00163b2:	50                   	push   eax
c00163b3:	6a 00                	push   0x0
c00163b5:	6a 00                	push   0x0
c00163b7:	53                   	push   ebx
c00163b8:	e8 53 fe ff ff       	call   c0016210 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163bd:	83 c4 20             	add    esp,0x20
c00163c0:	e9 79 01 00 00       	jmp    c001653e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163c5:	89 f0                	mov    eax,esi
c00163c7:	31 f6                	xor    esi,esi
c00163c9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00163d0:	75 02                	jne    c00163d4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00163d2:	89 f1                	mov    ecx,esi
c00163d4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00163db:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00163e2:	c1 e2 08             	shl    edx,0x8
c00163e5:	c1 e7 10             	shl    edi,0x10
c00163e8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00163f0:	09 fa                	or     edx,edi
c00163f2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00163fa:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016401:	83 c0 10             	add    eax,0x10
c0016404:	09 fa                	or     edx,edi
c0016406:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001640d:	c1 e7 18             	shl    edi,0x18
c0016410:	09 fa                	or     edx,edi
c0016412:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016419:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001641d:	c1 e7 10             	shl    edi,0x10
c0016420:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016427:	c1 e2 08             	shl    edx,0x8
c001642a:	09 fa                	or     edx,edi
c001642c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016433:	09 fa                	or     edx,edi
c0016435:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001643c:	c1 e7 18             	shl    edi,0x18
c001643f:	09 fa                	or     edx,edi
c0016441:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016445:	46                   	inc    esi
c0016446:	83 fe 04             	cmp    esi,0x4
c0016449:	0f 85 7a ff ff ff    	jne    c00163c9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001644f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016453:	83 f0 01             	xor    eax,0x1
c0016456:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001645a:	75 57                	jne    c00164b3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001645c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016460:	83 f0 01             	xor    eax,0x1
c0016463:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016467:	75 4a                	jne    c00164b3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016469:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001646d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016475:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001647d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016483:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016489:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001648f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016493:	89 f7                	mov    edi,esi
c0016495:	c1 e0 0a             	shl    eax,0xa
c0016498:	c1 ff 1f             	sar    edi,0x1f
c001649b:	57                   	push   edi
c001649c:	56                   	push   esi
c001649d:	52                   	push   edx
c001649e:	50                   	push   eax
c001649f:	e8 00 03 01 00       	call   c00267a4 <__udivdi3>
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164ab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164af:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164b3:	84 c9                	test   cl,cl
c00164b5:	74 53                	je     c001650a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164b7:	0f b6 c9             	movzx  ecx,cl
c00164ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164c2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164c6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00164ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164d2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00164d6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00164da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00164e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ea:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00164ee:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00164f2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00164f6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00164fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164fe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016502:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016506:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001650a:	31 ed                	xor    ebp,ebp
c001650c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016510:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016514:	89 f8                	mov    eax,edi
c0016516:	09 f0                	or     eax,esi
c0016518:	74 1e                	je     c0016538 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001651a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001651e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016522:	89 d1                	mov    ecx,edx
c0016524:	09 c1                	or     ecx,eax
c0016526:	74 10                	je     c0016538 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	57                   	push   edi
c001652c:	56                   	push   esi
c001652d:	52                   	push   edx
c001652e:	50                   	push   eax
c001652f:	53                   	push   ebx
c0016530:	e8 db fc ff ff       	call   c0016210 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016535:	83 c4 20             	add    esp,0x20
c0016538:	45                   	inc    ebp
c0016539:	83 fd 04             	cmp    ebp,0x4
c001653c:	75 ce                	jne    c001650c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001653e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016544:	5b                   	pop    ebx
c0016545:	5e                   	pop    esi
c0016546:	5f                   	pop    edi
c0016547:	5d                   	pop    ebp
c0016548:	c3                   	ret    
c0016549:	90                   	nop

c001654a <Serial::Serial(char const*)>:
c001654a:	83 ec 0c             	sub    esp,0xc
c001654d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016551:	83 ec 08             	sub    esp,0x8
c0016554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016558:	50                   	push   eax
c0016559:	e8 3e d8 ff ff       	call   c0013d9c <Device::Device(char const*)>
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c0016566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656a:	89 10                	mov    DWORD PTR [eax],edx
c001656c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016570:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001657a:	90                   	nop
c001657b:	83 c4 0c             	add    esp,0xc
c001657e:	c3                   	ret    
c001657f:	90                   	nop

c0016580 <Serial::~Serial()>:
c0016580:	83 ec 0c             	sub    esp,0xc
c0016583:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c0016588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001658c:	89 10                	mov    DWORD PTR [eax],edx
c001658e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016592:	83 ec 0c             	sub    esp,0xc
c0016595:	50                   	push   eax
c0016596:	e8 cb d4 ff ff       	call   c0013a66 <Device::~Device()>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	90                   	nop
c001659f:	83 c4 0c             	add    esp,0xc
c00165a2:	c3                   	ret    
c00165a3:	90                   	nop

c00165a4 <Serial::~Serial()>:
c00165a4:	83 ec 0c             	sub    esp,0xc
c00165a7:	83 ec 0c             	sub    esp,0xc
c00165aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ae:	e8 cd ff ff ff       	call   c0016580 <Serial::~Serial()>
c00165b3:	83 c4 10             	add    esp,0x10
c00165b6:	83 ec 08             	sub    esp,0x8
c00165b9:	68 58 01 00 00       	push   0x158
c00165be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c2:	e8 c0 c0 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	83 c4 0c             	add    esp,0xc
c00165cd:	c3                   	ret    

c00165ce <Timer::Timer(char const*)>:
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d5:	83 ec 08             	sub    esp,0x8
c00165d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165dc:	50                   	push   eax
c00165dd:	e8 ba d7 ff ff       	call   c0013d9c <Device::Device(char const*)>
c00165e2:	83 c4 10             	add    esp,0x10
c00165e5:	ba 1c b1 02 c0       	mov    edx,0xc002b11c
c00165ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ee:	89 10                	mov    DWORD PTR [eax],edx
c00165f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00165fe:	90                   	nop
c00165ff:	83 c4 0c             	add    esp,0xc
c0016602:	c3                   	ret    
c0016603:	90                   	nop

c0016604 <Timer::~Timer()>:
c0016604:	83 ec 0c             	sub    esp,0xc
c0016607:	ba 1c b1 02 c0       	mov    edx,0xc002b11c
c001660c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016610:	89 10                	mov    DWORD PTR [eax],edx
c0016612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016616:	83 ec 0c             	sub    esp,0xc
c0016619:	50                   	push   eax
c001661a:	e8 47 d4 ff ff       	call   c0013a66 <Device::~Device()>
c001661f:	83 c4 10             	add    esp,0x10
c0016622:	90                   	nop
c0016623:	83 c4 0c             	add    esp,0xc
c0016626:	c3                   	ret    
c0016627:	90                   	nop

c0016628 <Timer::~Timer()>:
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	83 ec 0c             	sub    esp,0xc
c001662e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016632:	e8 cd ff ff ff       	call   c0016604 <Timer::~Timer()>
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	83 ec 08             	sub    esp,0x8
c001663d:	68 5c 01 00 00       	push   0x15c
c0016642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016646:	e8 3c c0 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	83 c4 0c             	add    esp,0xc
c0016651:	c3                   	ret    

c0016652 <Timer::read()>:
c0016652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016656:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001665c:	c3                   	ret    

c001665d <timerHandler(unsigned long long)>:
c001665d:	55                   	push   ebp
c001665e:	57                   	push   edi
c001665f:	56                   	push   esi
c0016660:	53                   	push   ebx
c0016661:	83 ec 0c             	sub    esp,0xc
c0016664:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016668:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001666c:	01 35 d0 e0 02 c0    	add    DWORD PTR ds:0xc002e0d0,esi
c0016672:	11 3d d4 e0 02 c0    	adc    DWORD PTR ds:0xc002e0d4,edi
c0016678:	80 3d 6d da 02 c0 00 	cmp    BYTE PTR ds:0xc002da6d,0x0
c001667f:	0f 84 42 01 00 00    	je     c00167c7 <timerHandler(unsigned long long)+0x16a>
c0016685:	fa                   	cli    
c0016686:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	ff 05 84 0f 03 c0    	inc    DWORD PTR ds:0xc0030f84
c0016695:	68 98 0f 03 c0       	push   0xc0030f98
c001669a:	e8 5f 21 01 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001669f:	83 c4 10             	add    esp,0x10
c00166a2:	84 c0                	test   al,al
c00166a4:	0f 85 a2 00 00 00    	jne    c001674c <timerHandler(unsigned long long)+0xef>
c00166aa:	83 ec 0c             	sub    esp,0xc
c00166ad:	68 98 0f 03 c0       	push   0xc0030f98
c00166b2:	e8 63 21 01 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166b7:	83 c4 10             	add    esp,0x10
c00166ba:	89 c3                	mov    ebx,eax
c00166bc:	83 ec 0c             	sub    esp,0xc
c00166bf:	68 98 0f 03 c0       	push   0xc0030f98
c00166c4:	e8 51 21 01 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166c9:	c7 04 24 98 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f98
c00166d0:	89 c5                	mov    ebp,eax
c00166d2:	e8 4b 21 01 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166d7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00166da:	83 c4 10             	add    esp,0x10
c00166dd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00166e0:	39 15 d0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0d0,edx
c00166e6:	a1 d4 e0 02 c0       	mov    eax,ds:0xc002e0d4
c00166eb:	19 c8                	sbb    eax,ecx
c00166ed:	72 21                	jb     c0016710 <timerHandler(unsigned long long)+0xb3>
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	55                   	push   ebp
c00166f3:	e8 e6 77 00 00       	call   c001dede <unblockTask(ThreadControlBlock*)>
c00166f8:	83 c4 10             	add    esp,0x10
c00166fb:	39 eb                	cmp    ebx,ebp
c00166fd:	75 21                	jne    c0016720 <timerHandler(unsigned long long)+0xc3>
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	68 98 0f 03 c0       	push   0xc0030f98
c0016707:	e8 0e 21 01 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001670c:	89 c3                	mov    ebx,eax
c001670e:	eb 0d                	jmp    c001671d <timerHandler(unsigned long long)+0xc0>
c0016710:	50                   	push   eax
c0016711:	50                   	push   eax
c0016712:	55                   	push   ebp
c0016713:	68 98 0f 03 c0       	push   0xc0030f98
c0016718:	e8 b3 21 01 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	83 ec 0c             	sub    esp,0xc
c0016723:	68 98 0f 03 c0       	push   0xc0030f98
c0016728:	e8 d1 20 01 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	84 c0                	test   al,al
c0016732:	75 18                	jne    c001674c <timerHandler(unsigned long long)+0xef>
c0016734:	83 ec 0c             	sub    esp,0xc
c0016737:	68 98 0f 03 c0       	push   0xc0030f98
c001673c:	e8 d9 20 01 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016741:	83 c4 10             	add    esp,0x10
c0016744:	39 d8                	cmp    eax,ebx
c0016746:	0f 85 70 ff ff ff    	jne    c00166bc <timerHandler(unsigned long long)+0x5f>
c001674c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016751:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016755:	74 3d                	je     c0016794 <timerHandler(unsigned long long)+0x137>
c0016757:	80 3d 6c da 02 c0 00 	cmp    BYTE PTR ds:0xc002da6c,0x0
c001675e:	74 34                	je     c0016794 <timerHandler(unsigned long long)+0x137>
c0016760:	fa                   	cli    
c0016761:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c0016767:	31 d2                	xor    edx,edx
c0016769:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676e:	89 f9                	mov    ecx,edi
c0016770:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016778:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001677b:	39 c6                	cmp    esi,eax
c001677d:	19 d1                	sbb    ecx,edx
c001677f:	72 05                	jb     c0016786 <timerHandler(unsigned long long)+0x129>
c0016781:	e8 d5 72 00 00       	call   c001da5b <schedule()>
c0016786:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001678b:	48                   	dec    eax
c001678c:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c0016791:	75 01                	jne    c0016794 <timerHandler(unsigned long long)+0x137>
c0016793:	fb                   	sti    
c0016794:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c0016799:	48                   	dec    eax
c001679a:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001679f:	75 18                	jne    c00167b9 <timerHandler(unsigned long long)+0x15c>
c00167a1:	83 3d 80 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f80,0x0
c00167a8:	74 0f                	je     c00167b9 <timerHandler(unsigned long long)+0x15c>
c00167aa:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c00167b4:	e8 a2 72 00 00       	call   c001da5b <schedule()>
c00167b9:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00167be:	48                   	dec    eax
c00167bf:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00167c4:	75 01                	jne    c00167c7 <timerHandler(unsigned long long)+0x16a>
c00167c6:	fb                   	sti    
c00167c7:	83 c4 0c             	add    esp,0xc
c00167ca:	5b                   	pop    ebx
c00167cb:	5e                   	pop    esi
c00167cc:	5f                   	pop    edi
c00167cd:	5d                   	pop    ebp
c00167ce:	c3                   	ret    

c00167cf <setupTimer(int)>:
c00167cf:	57                   	push   edi
c00167d0:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00167d5:	56                   	push   esi
c00167d6:	53                   	push   ebx
c00167d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167e1:	83 ec 0c             	sub    esp,0xc
c00167e4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167ea:	e8 a9 d6 ff ff       	call   c0013e98 <Device::getName()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00167f5:	0f 85 8d 00 00 00    	jne    c0016888 <setupTimer(int)+0xb9>
c00167fb:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0016800:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016807:	74 7f                	je     c0016888 <setupTimer(int)+0xb9>
c0016809:	83 ec 0c             	sub    esp,0xc
c001680c:	68 5c 01 00 00       	push   0x15c
c0016811:	e8 83 8d ff ff       	call   c000f599 <malloc>
c0016816:	89 04 24             	mov    DWORD PTR [esp],eax
c0016819:	89 c3                	mov    ebx,eax
c001681b:	e8 5a fb 00 00       	call   c002637a <PIT::PIT()>
c0016820:	59                   	pop    ecx
c0016821:	5f                   	pop    edi
c0016822:	53                   	push   ebx
c0016823:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c0016829:	e8 6a d3 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c001682e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016830:	6a 00                	push   0x0
c0016832:	6a 00                	push   0x0
c0016834:	56                   	push   esi
c0016835:	53                   	push   ebx
c0016836:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016839:	83 c4 14             	add    esp,0x14
c001683c:	68 60 01 00 00       	push   0x160
c0016841:	e8 53 8d ff ff       	call   c000f599 <malloc>
c0016846:	89 04 24             	mov    DWORD PTR [esp],eax
c0016849:	89 c7                	mov    edi,eax
c001684b:	e8 da f9 00 00       	call   c002622a <APICTimer::APICTimer()>
c0016850:	6a 00                	push   0x0
c0016852:	6a 00                	push   0x0
c0016854:	56                   	push   esi
c0016855:	57                   	push   edi
c0016856:	e8 d1 f8 00 00       	call   c002612c <APICTimer::open(int, int, void*)>
c001685b:	83 c4 20             	add    esp,0x20
c001685e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016860:	6a 00                	push   0x0
c0016862:	6a 00                	push   0x0
c0016864:	6a 00                	push   0x0
c0016866:	53                   	push   ebx
c0016867:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001686a:	58                   	pop    eax
c001686b:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0016870:	5a                   	pop    edx
c0016871:	57                   	push   edi
c0016872:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016878:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001687e:	e8 15 d3 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	eb 33                	jmp    c00168bb <setupTimer(int)+0xec>
c0016888:	83 ec 0c             	sub    esp,0xc
c001688b:	68 5c 01 00 00       	push   0x15c
c0016890:	e8 04 8d ff ff       	call   c000f599 <malloc>
c0016895:	89 04 24             	mov    DWORD PTR [esp],eax
c0016898:	89 c3                	mov    ebx,eax
c001689a:	e8 db fa 00 00       	call   c002637a <PIT::PIT()>
c001689f:	58                   	pop    eax
c00168a0:	5a                   	pop    edx
c00168a1:	53                   	push   ebx
c00168a2:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c00168a8:	e8 eb d2 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c00168ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168af:	6a 00                	push   0x0
c00168b1:	6a 00                	push   0x0
c00168b3:	56                   	push   esi
c00168b4:	53                   	push   ebx
c00168b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168b8:	83 c4 20             	add    esp,0x20
c00168bb:	89 d8                	mov    eax,ebx
c00168bd:	5b                   	pop    ebx
c00168be:	5e                   	pop    esi
c00168bf:	5f                   	pop    edi
c00168c0:	c3                   	ret    
c00168c1:	90                   	nop

c00168c2 <VCache::VCache(PhysicalDisk*)>:
c00168c2:	53                   	push   ebx
c00168c3:	83 ec 18             	sub    esp,0x18
c00168c6:	ba 4c b1 02 c0       	mov    edx,0xc002b14c
c00168cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cf:	89 10                	mov    DWORD PTR [eax],edx
c00168d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00168dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00168e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168eb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00168f2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00168f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168fd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016904:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001690b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001691e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016922:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016929:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016934:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016944:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016953:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016962:	e8 32 8c ff ff       	call   c000f599 <malloc>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	89 c3                	mov    ebx,eax
c001696c:	83 ec 0c             	sub    esp,0xc
c001696f:	53                   	push   ebx
c0016970:	e8 af 6e 00 00       	call   c001d824 <Mutex::Mutex()>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001697f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016983:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016987:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001698a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016995:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016999:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001699f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00169a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169aa:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00169b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00169ba:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00169bd:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00169c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00169c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169d2:	05 00 01 00 00       	add    eax,0x100
c00169d7:	c1 e0 04             	shl    eax,0x4
c00169da:	83 ec 0c             	sub    esp,0xc
c00169dd:	50                   	push   eax
c00169de:	e8 b6 8b ff ff       	call   c000f599 <malloc>
c00169e3:	83 c4 10             	add    esp,0x10
c00169e6:	89 c2                	mov    edx,eax
c00169e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00169ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f3:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00169fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169fe:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a02:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a06:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a0c:	c1 e0 07             	shl    eax,0x7
c0016a0f:	83 ec 0c             	sub    esp,0xc
c0016a12:	50                   	push   eax
c0016a13:	e8 81 8b ff ff       	call   c000f599 <malloc>
c0016a18:	83 c4 10             	add    esp,0x10
c0016a1b:	89 c2                	mov    edx,eax
c0016a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a21:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016a24:	90                   	nop
c0016a25:	83 c4 18             	add    esp,0x18
c0016a28:	5b                   	pop    ebx
c0016a29:	c3                   	ret    

c0016a2a <VCache::invalidateReadBuffer()>:
c0016a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a2e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016a34:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a38:	c3                   	ret    
c0016a39:	90                   	nop

c0016a3a <VCache::writeWriteBuffer()>:
c0016a3a:	53                   	push   ebx
c0016a3b:	83 ec 14             	sub    esp,0x14
c0016a3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a42:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a45:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a47:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a4d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a50:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a53:	50                   	push   eax
c0016a54:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a57:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a5e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a65:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a69:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016a70:	83 c4 28             	add    esp,0x28
c0016a73:	5b                   	pop    ebx
c0016a74:	c3                   	ret    
c0016a75:	90                   	nop

c0016a76 <VCache::~VCache()>:
c0016a76:	83 ec 0c             	sub    esp,0xc
c0016a79:	ba 4c b1 02 c0       	mov    edx,0xc002b14c
c0016a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a82:	89 10                	mov    DWORD PTR [eax],edx
c0016a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a88:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016a8b:	84 c0                	test   al,al
c0016a8d:	74 0f                	je     c0016a9e <VCache::~VCache()+0x28>
c0016a8f:	83 ec 0c             	sub    esp,0xc
c0016a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a96:	e8 9f ff ff ff       	call   c0016a3a <VCache::writeWriteBuffer()>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aa2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016aa5:	83 ec 0c             	sub    esp,0xc
c0016aa8:	50                   	push   eax
c0016aa9:	e8 fb 8a ff ff       	call   c000f5a9 <free>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	50                   	push   eax
c0016abc:	e8 e8 8a ff ff       	call   c000f5a9 <free>
c0016ac1:	83 c4 10             	add    esp,0x10
c0016ac4:	90                   	nop
c0016ac5:	83 c4 0c             	add    esp,0xc
c0016ac8:	c3                   	ret    
c0016ac9:	90                   	nop

c0016aca <VCache::~VCache()>:
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	83 ec 0c             	sub    esp,0xc
c0016ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ad4:	e8 9d ff ff ff       	call   c0016a76 <VCache::~VCache()>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	83 ec 08             	sub    esp,0x8
c0016adf:	6a 44                	push   0x44
c0016ae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ae5:	e8 9d bb ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	83 c4 0c             	add    esp,0xc
c0016af0:	c3                   	ret    
c0016af1:	90                   	nop

c0016af2 <VCache::write(unsigned long long, int, void*)>:
c0016af2:	55                   	push   ebp
c0016af3:	57                   	push   edi
c0016af4:	56                   	push   esi
c0016af5:	53                   	push   ebx
c0016af6:	83 ec 18             	sub    esp,0x18
c0016af9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016afd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b08:	e8 5d 72 00 00       	call   c001dd6a <Semaphore::acquire()>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b14:	74 0c                	je     c0016b22 <VCache::write(unsigned long long, int, void*)+0x30>
c0016b16:	83 ec 0c             	sub    esp,0xc
c0016b19:	53                   	push   ebx
c0016b1a:	e8 0b ff ff ff       	call   c0016a2a <VCache::invalidateReadBuffer()>
c0016b1f:	83 c4 10             	add    esp,0x10
c0016b22:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b26:	74 5c                	je     c0016b84 <VCache::write(unsigned long long, int, void*)+0x92>
c0016b28:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016b2b:	89 e8                	mov    eax,ebp
c0016b2d:	99                   	cdq    
c0016b2e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b31:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b34:	89 c1                	mov    ecx,eax
c0016b36:	89 d0                	mov    eax,edx
c0016b38:	31 f1                	xor    ecx,esi
c0016b3a:	31 f8                	xor    eax,edi
c0016b3c:	09 c1                	or     ecx,eax
c0016b3e:	75 38                	jne    c0016b78 <VCache::write(unsigned long long, int, void*)+0x86>
c0016b40:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016b45:	75 31                	jne    c0016b78 <VCache::write(unsigned long long, int, void*)+0x86>
c0016b47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b4a:	89 ef                	mov    edi,ebp
c0016b4c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b52:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b56:	0f af f9             	imul   edi,ecx
c0016b59:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016b5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b61:	40                   	inc    eax
c0016b62:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b65:	83 c0 80             	add    eax,0xffffff80
c0016b68:	75 5c                	jne    c0016bc6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b6a:	83 ec 0c             	sub    esp,0xc
c0016b6d:	53                   	push   ebx
c0016b6e:	e8 c7 fe ff ff       	call   c0016a3a <VCache::writeWriteBuffer()>
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	eb 4e                	jmp    c0016bc6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b78:	83 ec 0c             	sub    esp,0xc
c0016b7b:	53                   	push   ebx
c0016b7c:	e8 b9 fe ff ff       	call   c0016a3a <VCache::writeWriteBuffer()>
c0016b81:	83 c4 10             	add    esp,0x10
c0016b84:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b87:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016b8c:	7f 22                	jg     c0016bb0 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016b8e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016b91:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016b94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b98:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016b9c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016b9f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016ba2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ba8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bae:	eb 16                	jmp    c0016bc6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016bb0:	83 ec 0c             	sub    esp,0xc
c0016bb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bbd:	57                   	push   edi
c0016bbe:	56                   	push   esi
c0016bbf:	50                   	push   eax
c0016bc0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bc3:	83 c4 20             	add    esp,0x20
c0016bc6:	83 ec 0c             	sub    esp,0xc
c0016bc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bcc:	e8 f5 77 00 00       	call   c001e3c6 <Semaphore::release()>
c0016bd1:	83 c4 1c             	add    esp,0x1c
c0016bd4:	31 c0                	xor    eax,eax
c0016bd6:	5b                   	pop    ebx
c0016bd7:	5e                   	pop    esi
c0016bd8:	5f                   	pop    edi
c0016bd9:	5d                   	pop    ebp
c0016bda:	c3                   	ret    
c0016bdb:	90                   	nop

c0016bdc <VCache::read(unsigned long long, int, void*)>:
c0016bdc:	55                   	push   ebp
c0016bdd:	57                   	push   edi
c0016bde:	56                   	push   esi
c0016bdf:	53                   	push   ebx
c0016be0:	83 ec 28             	sub    esp,0x28
c0016be3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016be7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016beb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016bef:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016bf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016bf6:	e8 6f 71 00 00       	call   c001dd6a <Semaphore::acquire()>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c02:	74 0c                	je     c0016c10 <VCache::read(unsigned long long, int, void*)+0x34>
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	53                   	push   ebx
c0016c08:	e8 2d fe ff ff       	call   c0016a3a <VCache::writeWriteBuffer()>
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	83 fd 01             	cmp    ebp,0x1
c0016c13:	0f 85 80 00 00 00    	jne    c0016c99 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c20:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c27:	75 70                	jne    c0016c99 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c29:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016c2c:	89 e9                	mov    ecx,ebp
c0016c2e:	f7 d9                	neg    ecx
c0016c30:	89 c8                	mov    eax,ecx
c0016c32:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016c36:	c1 f8 1f             	sar    eax,0x1f
c0016c39:	21 f1                	and    ecx,esi
c0016c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c3f:	89 c8                	mov    eax,ecx
c0016c41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c45:	21 f9                	and    ecx,edi
c0016c47:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c4b:	89 ca                	mov    edx,ecx
c0016c4d:	74 0a                	je     c0016c59 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c4f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016c52:	75 05                	jne    c0016c59 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c54:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016c57:	74 23                	je     c0016c7c <VCache::read(unsigned long long, int, void*)+0xa0>
c0016c59:	83 ec 0c             	sub    esp,0xc
c0016c5c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c64:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016c67:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c6a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016c6c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016c6f:	55                   	push   ebp
c0016c70:	52                   	push   edx
c0016c71:	50                   	push   eax
c0016c72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c76:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016c79:	83 c4 20             	add    esp,0x20
c0016c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c7f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c83:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016c89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c8c:	48                   	dec    eax
c0016c8d:	21 c6                	and    esi,eax
c0016c8f:	0f af f1             	imul   esi,ecx
c0016c92:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016c95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c97:	eb 1d                	jmp    c0016cb6 <VCache::read(unsigned long long, int, void*)+0xda>
c0016c99:	83 ec 0c             	sub    esp,0xc
c0016c9c:	53                   	push   ebx
c0016c9d:	e8 88 fd ff ff       	call   c0016a2a <VCache::invalidateReadBuffer()>
c0016ca2:	5a                   	pop    edx
c0016ca3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ca6:	8b 10                	mov    edx,DWORD PTR [eax]
c0016ca8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016cac:	55                   	push   ebp
c0016cad:	57                   	push   edi
c0016cae:	56                   	push   esi
c0016caf:	50                   	push   eax
c0016cb0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016cb3:	83 c4 20             	add    esp,0x20
c0016cb6:	83 ec 0c             	sub    esp,0xc
c0016cb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cbc:	e8 05 77 00 00       	call   c001e3c6 <Semaphore::release()>
c0016cc1:	83 c4 2c             	add    esp,0x2c
c0016cc4:	31 c0                	xor    eax,eax
c0016cc6:	5b                   	pop    ebx
c0016cc7:	5e                   	pop    esi
c0016cc8:	5f                   	pop    edi
c0016cc9:	5d                   	pop    ebp
c0016cca:	c3                   	ret    
c0016ccb:	90                   	nop

c0016ccc <Video::putrect(int, int, int, int, unsigned int)>:
c0016ccc:	55                   	push   ebp
c0016ccd:	57                   	push   edi
c0016cce:	56                   	push   esi
c0016ccf:	53                   	push   ebx
c0016cd0:	83 ec 1c             	sub    esp,0x1c
c0016cd3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016cd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016cdb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016cdf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ce3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ceb:	01 df                	add    edi,ebx
c0016ced:	39 fb                	cmp    ebx,edi
c0016cef:	7d 1f                	jge    c0016d10 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016cf1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016cf5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016cf9:	7d 12                	jge    c0016d0d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016cfb:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d01:	53                   	push   ebx
c0016d02:	55                   	push   ebp
c0016d03:	45                   	inc    ebp
c0016d04:	56                   	push   esi
c0016d05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d08:	83 c4 10             	add    esp,0x10
c0016d0b:	eb e8                	jmp    c0016cf5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d0d:	43                   	inc    ebx
c0016d0e:	eb dd                	jmp    c0016ced <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d10:	83 c4 1c             	add    esp,0x1c
c0016d13:	5b                   	pop    ebx
c0016d14:	5e                   	pop    esi
c0016d15:	5f                   	pop    edi
c0016d16:	5d                   	pop    ebp
c0016d17:	c3                   	ret    

c0016d18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d18:	55                   	push   ebp
c0016d19:	57                   	push   edi
c0016d1a:	31 ff                	xor    edi,edi
c0016d1c:	56                   	push   esi
c0016d1d:	53                   	push   ebx
c0016d1e:	83 ec 1c             	sub    esp,0x1c
c0016d21:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016d25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d29:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016d30:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016d35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d39:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016d3d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d41:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016d44:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d48:	01 f9                	add    ecx,edi
c0016d4a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016d4e:	7d 2f                	jge    c0016d7f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016d50:	31 f6                	xor    esi,esi
c0016d52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d56:	01 f2                	add    edx,esi
c0016d58:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016d5c:	7d 1a                	jge    c0016d78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016d5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d61:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016d64:	46                   	inc    esi
c0016d65:	51                   	push   ecx
c0016d66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d6a:	52                   	push   edx
c0016d6b:	55                   	push   ebp
c0016d6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016d76:	eb da                	jmp    c0016d52 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016d78:	47                   	inc    edi
c0016d79:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016d7d:	eb c5                	jmp    c0016d44 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016d7f:	83 c4 1c             	add    esp,0x1c
c0016d82:	5b                   	pop    ebx
c0016d83:	5e                   	pop    esi
c0016d84:	5f                   	pop    edi
c0016d85:	5d                   	pop    ebp
c0016d86:	c3                   	ret    
c0016d87:	90                   	nop

c0016d88 <Video::blit(unsigned int*, int, int, int, int)>:
c0016d88:	55                   	push   ebp
c0016d89:	57                   	push   edi
c0016d8a:	56                   	push   esi
c0016d8b:	53                   	push   ebx
c0016d8c:	83 ec 1c             	sub    esp,0x1c
c0016d8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d97:	85 c0                	test   eax,eax
c0016d99:	79 02                	jns    c0016d9d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016d9b:	31 c0                	xor    eax,eax
c0016d9d:	c1 e0 02             	shl    eax,0x2
c0016da0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016da4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016dac:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016db0:	39 d8                	cmp    eax,ebx
c0016db2:	7e 49                	jle    c0016dfd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016db4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016dba:	7c 41                	jl     c0016dfd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016dbc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016dc0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016dc4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dc8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016dcc:	39 f9                	cmp    ecx,edi
c0016dce:	7e 22                	jle    c0016df2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016dd0:	83 c5 04             	add    ebp,0x4
c0016dd3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016dd9:	7c 14                	jl     c0016def <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016ddb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016ddd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016de0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016de4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016de8:	56                   	push   esi
c0016de9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016dec:	83 c4 10             	add    esp,0x10
c0016def:	47                   	inc    edi
c0016df0:	eb d2                	jmp    c0016dc4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016df6:	43                   	inc    ebx
c0016df7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016dfb:	eb ab                	jmp    c0016da8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016dfd:	83 c4 1c             	add    esp,0x1c
c0016e00:	5b                   	pop    ebx
c0016e01:	5e                   	pop    esi
c0016e02:	5f                   	pop    edi
c0016e03:	5d                   	pop    ebp
c0016e04:	c3                   	ret    
c0016e05:	90                   	nop

c0016e06 <Video::clearScreen(unsigned int)>:
c0016e06:	57                   	push   edi
c0016e07:	56                   	push   esi
c0016e08:	53                   	push   ebx
c0016e09:	31 db                	xor    ebx,ebx
c0016e0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e0f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e15:	7e 1f                	jle    c0016e36 <Video::clearScreen(unsigned int)+0x30>
c0016e17:	31 ff                	xor    edi,edi
c0016e19:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e1f:	7e 12                	jle    c0016e33 <Video::clearScreen(unsigned int)+0x2d>
c0016e21:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e27:	53                   	push   ebx
c0016e28:	57                   	push   edi
c0016e29:	47                   	inc    edi
c0016e2a:	56                   	push   esi
c0016e2b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	eb e6                	jmp    c0016e19 <Video::clearScreen(unsigned int)+0x13>
c0016e33:	43                   	inc    ebx
c0016e34:	eb d9                	jmp    c0016e0f <Video::clearScreen(unsigned int)+0x9>
c0016e36:	5b                   	pop    ebx
c0016e37:	5e                   	pop    esi
c0016e38:	5f                   	pop    edi
c0016e39:	c3                   	ret    

c0016e3a <Video::putpixel(int, int, unsigned int)>:
c0016e3a:	c7 44 24 04 54 b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b154
c0016e42:	e9 84 30 00 00       	jmp    c0019ecb <Krnl::panic(char const*)>
c0016e47:	90                   	nop

c0016e48 <Video::Video(char const*)>:
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4f:	83 ec 08             	sub    esp,0x8
c0016e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e56:	50                   	push   eax
c0016e57:	e8 40 cf ff ff       	call   c0013d9c <Device::Device(char const*)>
c0016e5c:	83 c4 10             	add    esp,0x10
c0016e5f:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c0016e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e68:	89 10                	mov    DWORD PTR [eax],edx
c0016e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e6e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016e78:	90                   	nop
c0016e79:	83 c4 0c             	add    esp,0xc
c0016e7c:	c3                   	ret    
c0016e7d:	90                   	nop

c0016e7e <Video::~Video()>:
c0016e7e:	83 ec 0c             	sub    esp,0xc
c0016e81:	ba c4 b1 02 c0       	mov    edx,0xc002b1c4
c0016e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e8a:	89 10                	mov    DWORD PTR [eax],edx
c0016e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e90:	83 ec 0c             	sub    esp,0xc
c0016e93:	50                   	push   eax
c0016e94:	e8 cd cb ff ff       	call   c0013a66 <Device::~Device()>
c0016e99:	83 c4 10             	add    esp,0x10
c0016e9c:	90                   	nop
c0016e9d:	83 c4 0c             	add    esp,0xc
c0016ea0:	c3                   	ret    
c0016ea1:	90                   	nop

c0016ea2 <Video::~Video()>:
c0016ea2:	83 ec 0c             	sub    esp,0xc
c0016ea5:	83 ec 0c             	sub    esp,0xc
c0016ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eac:	e8 cd ff ff ff       	call   c0016e7e <Video::~Video()>
c0016eb1:	83 c4 10             	add    esp,0x10
c0016eb4:	83 ec 08             	sub    esp,0x8
c0016eb7:	68 64 01 00 00       	push   0x164
c0016ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ec0:	e8 c2 b7 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	83 c4 0c             	add    esp,0xc
c0016ecb:	c3                   	ret    

c0016ecc <Video::isMonochrome()>:
c0016ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ed0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ed6:	c3                   	ret    
c0016ed7:	90                   	nop

c0016ed8 <Video::getWidth()>:
c0016ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016edc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ee2:	c3                   	ret    
c0016ee3:	90                   	nop

c0016ee4 <Video::getHeight()>:
c0016ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ee8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016eee:	c3                   	ret    
c0016eef:	90                   	nop

c0016ef0 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ef0:	55                   	push   ebp
c0016ef1:	57                   	push   edi
c0016ef2:	56                   	push   esi
c0016ef3:	53                   	push   ebx
c0016ef4:	83 ec 2c             	sub    esp,0x2c
c0016ef7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016efb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016eff:	83 f8 01             	cmp    eax,0x1
c0016f02:	19 c9                	sbb    ecx,ecx
c0016f04:	31 db                	xor    ebx,ebx
c0016f06:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f0a:	89 cd                	mov    ebp,ecx
c0016f0c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f14:	f7 d5                	not    ebp
c0016f16:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f1c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f20:	01 d8                	add    eax,ebx
c0016f22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f26:	56                   	push   esi
c0016f27:	e8 b8 ff ff ff       	call   c0016ee4 <Video::getHeight()>
c0016f2c:	59                   	pop    ecx
c0016f2d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016f31:	7e 70                	jle    c0016fa3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016f33:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f37:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f3b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016f3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f42:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f46:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016f4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f51:	89 f8                	mov    eax,edi
c0016f53:	83 c0 20             	add    eax,0x20
c0016f56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f5a:	56                   	push   esi
c0016f5b:	e8 78 ff ff ff       	call   c0016ed8 <Video::getWidth()>
c0016f60:	5a                   	pop    edx
c0016f61:	39 c7                	cmp    edi,eax
c0016f63:	7d 34                	jge    c0016f99 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016f65:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f6a:	74 05                	je     c0016f71 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016f6c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f6e:	55                   	push   ebp
c0016f6f:	eb 0d                	jmp    c0016f7e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016f71:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016f76:	74 12                	je     c0016f8a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016f78:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f7e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f82:	57                   	push   edi
c0016f83:	56                   	push   esi
c0016f84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f87:	83 c4 10             	add    esp,0x10
c0016f8a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016f8e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016f92:	47                   	inc    edi
c0016f93:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016f97:	75 c1                	jne    c0016f5a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016f99:	43                   	inc    ebx
c0016f9a:	83 fb 20             	cmp    ebx,0x20
c0016f9d:	0f 85 79 ff ff ff    	jne    c0016f1c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016fa3:	83 c4 2c             	add    esp,0x2c
c0016fa6:	5b                   	pop    ebx
c0016fa7:	5e                   	pop    esi
c0016fa8:	5f                   	pop    edi
c0016fa9:	5d                   	pop    ebp
c0016faa:	c3                   	ret    
c0016fab:	90                   	nop

c0016fac <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016fac:	55                   	push   ebp
c0016fad:	57                   	push   edi
c0016fae:	56                   	push   esi
c0016faf:	53                   	push   ebx
c0016fb0:	83 ec 28             	sub    esp,0x28
c0016fb3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016fb7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016fbb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016fbf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016fc3:	c1 e6 08             	shl    esi,0x8
c0016fc6:	01 c6                	add    esi,eax
c0016fc8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016fcc:	c1 e0 08             	shl    eax,0x8
c0016fcf:	01 d0                	add    eax,edx
c0016fd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fd9:	0f af c6             	imul   eax,esi
c0016fdc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016fe3:	50                   	push   eax
c0016fe4:	e8 b0 85 ff ff       	call   c000f599 <malloc>
c0016fe9:	83 c4 10             	add    esp,0x10
c0016fec:	89 c7                	mov    edi,eax
c0016fee:	85 c0                	test   eax,eax
c0016ff0:	75 10                	jne    c0017002 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016ff2:	83 ec 0c             	sub    esp,0xc
c0016ff5:	68 75 b1 02 c0       	push   0xc002b175
c0016ffa:	e8 cc 2e 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0016fff:	83 c4 10             	add    esp,0x10
c0017002:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017005:	ba 12 00 00 00       	mov    edx,0x12
c001700a:	84 c0                	test   al,al
c001700c:	74 11                	je     c001701f <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001700e:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0017012:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0017016:	c1 fa 03             	sar    edx,0x3
c0017019:	0f af d1             	imul   edx,ecx
c001701c:	83 c2 12             	add    edx,0x12
c001701f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017023:	74 04                	je     c0017029 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017025:	85 f6                	test   esi,esi
c0017027:	75 12                	jne    c001703b <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0017029:	83 ec 0c             	sub    esp,0xc
c001702c:	68 85 b1 02 c0       	push   0xc002b185
c0017031:	e8 29 b7 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0017036:	e9 b8 00 00 00       	jmp    c00170f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001703b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001703f:	80 f9 02             	cmp    cl,0x2
c0017042:	0f 85 96 00 00 00    	jne    c00170de <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0017048:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001704d:	75 0e                	jne    c001705d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001704f:	84 c0                	test   al,al
c0017051:	75 0a                	jne    c001705d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017053:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017056:	83 e8 18             	sub    eax,0x18
c0017059:	a8 f7                	test   al,0xf7
c001705b:	74 0a                	je     c0017067 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	68 9a b1 02 c0       	push   0xc002b19a
c0017065:	eb 7f                	jmp    c00170e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0017067:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001706f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017077:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001707b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017083:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017087:	75 0c                	jne    c0017095 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017089:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001708e:	c1 e0 18             	shl    eax,0x18
c0017091:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017095:	45                   	inc    ebp
c0017096:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001709b:	c1 e1 10             	shl    ecx,0x10
c001709e:	89 c8                	mov    eax,ecx
c00170a0:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00170a5:	c1 e1 08             	shl    ecx,0x8
c00170a8:	09 c1                	or     ecx,eax
c00170aa:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00170ae:	09 c1                	or     ecx,eax
c00170b0:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00170b4:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00170b8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00170bc:	c1 f8 03             	sar    eax,0x3
c00170bf:	01 c2                	add    edx,eax
c00170c1:	89 e8                	mov    eax,ebp
c00170c3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00170c7:	39 c6                	cmp    esi,eax
c00170c9:	7f b0                	jg     c001707b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00170cb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00170cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170d3:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00170d6:	7e 22                	jle    c00170fa <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00170d8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00170dc:	eb 99                	jmp    c0017077 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00170de:	50                   	push   eax
c00170df:	50                   	push   eax
c00170e0:	51                   	push   ecx
c00170e1:	68 a8 b1 02 c0       	push   0xc002b1a8
c00170e6:	e8 74 b6 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00170eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00170ee:	e8 b6 84 ff ff       	call   c000f5a9 <free>
c00170f3:	83 c4 10             	add    esp,0x10
c00170f6:	31 ff                	xor    edi,edi
c00170f8:	eb 0f                	jmp    c0017109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00170fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170fe:	89 30                	mov    DWORD PTR [eax],esi
c0017100:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017104:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0017107:	89 30                	mov    DWORD PTR [eax],esi
c0017109:	83 c4 1c             	add    esp,0x1c
c001710c:	89 f8                	mov    eax,edi
c001710e:	5b                   	pop    ebx
c001710f:	5e                   	pop    esi
c0017110:	5f                   	pop    edi
c0017111:	5d                   	pop    ebp
c0017112:	c3                   	ret    
c0017113:	90                   	nop

c0017114 <Video::putTGA(int, int, unsigned char*, int)>:
c0017114:	55                   	push   ebp
c0017115:	57                   	push   edi
c0017116:	56                   	push   esi
c0017117:	53                   	push   ebx
c0017118:	83 ec 28             	sub    esp,0x28
c001711b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001711f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017123:	50                   	push   eax
c0017124:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017128:	50                   	push   eax
c0017129:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001712d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017131:	56                   	push   esi
c0017132:	e8 75 fe ff ff       	call   c0016fac <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017137:	83 c4 20             	add    esp,0x20
c001713a:	85 c0                	test   eax,eax
c001713c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017140:	74 35                	je     c0017177 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017142:	89 c7                	mov    edi,eax
c0017144:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017148:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001714c:	39 d8                	cmp    eax,ebx
c001714e:	7e 27                	jle    c0017177 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017150:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017154:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017158:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001715c:	39 e8                	cmp    eax,ebp
c001715e:	7e 14                	jle    c0017174 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017160:	8b 06                	mov    eax,DWORD PTR [esi]
c0017162:	83 c7 04             	add    edi,0x4
c0017165:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017168:	53                   	push   ebx
c0017169:	55                   	push   ebp
c001716a:	45                   	inc    ebp
c001716b:	56                   	push   esi
c001716c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	eb e0                	jmp    c0017154 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017174:	43                   	inc    ebx
c0017175:	eb cd                	jmp    c0017144 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017177:	83 c4 1c             	add    esp,0x1c
c001717a:	5b                   	pop    ebx
c001717b:	5e                   	pop    esi
c001717c:	5f                   	pop    edi
c001717d:	5d                   	pop    ebp
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <ACPI::close(int, int, void*)>:
c0017180:	83 ec 1c             	sub    esp,0x1c
c0017183:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001718b:	74 0a                	je     c0017197 <ACPI::close(int, int, void*)+0x17>
c001718d:	b8 00 00 00 00       	mov    eax,0x0
c0017192:	e9 8a 00 00 00       	jmp    c0017221 <ACPI::close(int, int, void*)+0xa1>
c0017197:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001719c:	75 27                	jne    c00171c5 <ACPI::close(int, int, void*)+0x45>
c001719e:	a1 08 01 03 c0       	mov    eax,ds:0xc0030108
c00171a3:	85 c0                	test   eax,eax
c00171a5:	74 07                	je     c00171ae <ACPI::close(int, int, void*)+0x2e>
c00171a7:	a1 08 01 03 c0       	mov    eax,ds:0xc0030108
c00171ac:	ff d0                	call   eax
c00171ae:	83 ec 0c             	sub    esp,0xc
c00171b1:	68 04 b2 02 c0       	push   0xc002b204
c00171b6:	e8 10 2d 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171c3:	eb 5c                	jmp    c0017221 <ACPI::close(int, int, void*)+0xa1>
c00171c5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00171ca:	75 50                	jne    c001721c <ACPI::close(int, int, void*)+0x9c>
c00171cc:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c00171d1:	85 c0                	test   eax,eax
c00171d3:	74 07                	je     c00171dc <ACPI::close(int, int, void*)+0x5c>
c00171d5:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c00171da:	ff d0                	call   eax
c00171dc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00171e1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00171e6:	83 e0 02             	and    eax,0x2
c00171e9:	74 1c                	je     c0017207 <ACPI::close(int, int, void*)+0x87>
c00171eb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00171f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171f6:	89 c2                	mov    edx,eax
c00171f8:	ec                   	in     al,dx
c00171f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00171fd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017201:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017205:	eb da                	jmp    c00171e1 <ACPI::close(int, int, void*)+0x61>
c0017207:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001720e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017213:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017217:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001721b:	ee                   	out    dx,al
c001721c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017221:	83 c4 1c             	add    esp,0x1c
c0017224:	c3                   	ret    

c0017225 <findRSDP()>:
c0017225:	83 ec 1c             	sub    esp,0x1c
c0017228:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001722d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017233:	83 e0 04             	and    eax,0x4
c0017236:	84 c0                	test   al,al
c0017238:	75 07                	jne    c0017241 <findRSDP()+0x1c>
c001723a:	b8 00 00 00 00       	mov    eax,0x0
c001723f:	eb 6a                	jmp    c00172ab <findRSDP()+0x86>
c0017241:	a1 b4 da 02 c0       	mov    eax,ds:0xc002dab4
c0017246:	3d ff 07 00 00       	cmp    eax,0x7ff
c001724b:	7f 1b                	jg     c0017268 <findRSDP()+0x43>
c001724d:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017252:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017258:	83 e2 fb             	and    edx,0xfffffffb
c001725b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017261:	b8 00 00 00 00       	mov    eax,0x0
c0017266:	eb 43                	jmp    c00172ab <findRSDP()+0x86>
c0017268:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017270:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017278:	77 2c                	ja     c00172a6 <findRSDP()+0x81>
c001727a:	83 ec 04             	sub    esp,0x4
c001727d:	6a 08                	push   0x8
c001727f:	68 9f b2 02 c0       	push   0xc002b29f
c0017284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017288:	e8 bf 93 fe ff       	call   c000064c <memcmp>
c001728d:	83 c4 10             	add    esp,0x10
c0017290:	85 c0                	test   eax,eax
c0017292:	0f 94 c0             	sete   al
c0017295:	84 c0                	test   al,al
c0017297:	74 06                	je     c001729f <findRSDP()+0x7a>
c0017299:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001729d:	eb 0c                	jmp    c00172ab <findRSDP()+0x86>
c001729f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00172a4:	eb ca                	jmp    c0017270 <findRSDP()+0x4b>
c00172a6:	b8 00 00 00 00       	mov    eax,0x0
c00172ab:	83 c4 1c             	add    esp,0x1c
c00172ae:	c3                   	ret    

c00172af <loadACPITables(unsigned char*)>:
c00172af:	57                   	push   edi
c00172b0:	56                   	push   esi
c00172b1:	53                   	push   ebx
c00172b2:	83 ec 60             	sub    esp,0x60
c00172b5:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00172ba:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172c0:	83 e0 04             	and    eax,0x4
c00172c3:	84 c0                	test   al,al
c00172c5:	0f 84 33 02 00 00    	je     c00174fe <loadACPITables(unsigned char*)+0x24f>
c00172cb:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c00172d0:	84 c0                	test   al,al
c00172d2:	74 75                	je     c0017349 <loadACPITables(unsigned char*)+0x9a>
c00172d4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172d8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00172dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00172e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172e3:	83 e8 24             	sub    eax,0x24
c00172e6:	c1 e8 03             	shr    eax,0x3
c00172e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00172ed:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00172f5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00172f9:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00172fd:	0f 8d b2 00 00 00    	jge    c00173b5 <loadACPITables(unsigned char*)+0x106>
c0017303:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017307:	83 c0 24             	add    eax,0x24
c001730a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001730e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017312:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017316:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001731a:	c1 e0 03             	shl    eax,0x3
c001731d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017321:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017328:	8b 00                	mov    eax,DWORD PTR [eax]
c001732a:	89 c1                	mov    ecx,eax
c001732c:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c0017331:	8d 50 01             	lea    edx,[eax+0x1]
c0017334:	89 15 0c 01 03 c0    	mov    DWORD PTR ds:0xc003010c,edx
c001733a:	89 ca                	mov    edx,ecx
c001733c:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c0017343:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017347:	eb ac                	jmp    c00172f5 <loadACPITables(unsigned char*)+0x46>
c0017349:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001734d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017351:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017355:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017358:	83 e8 24             	sub    eax,0x24
c001735b:	c1 e8 02             	shr    eax,0x2
c001735e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017362:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001736a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001736e:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017372:	7d 41                	jge    c00173b5 <loadACPITables(unsigned char*)+0x106>
c0017374:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017378:	83 c0 24             	add    eax,0x24
c001737b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001737f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017383:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017387:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001738b:	c1 e0 02             	shl    eax,0x2
c001738e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017392:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017396:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017398:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c001739d:	8d 50 01             	lea    edx,[eax+0x1]
c00173a0:	89 15 0c 01 03 c0    	mov    DWORD PTR ds:0xc003010c,edx
c00173a6:	89 ca                	mov    edx,ecx
c00173a8:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c00173af:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00173b3:	eb b5                	jmp    c001736a <loadACPITables(unsigned char*)+0xbb>
c00173b5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00173bd:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c00173c2:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00173c6:	0f 8d 33 01 00 00    	jge    c00174ff <loadACPITables(unsigned char*)+0x250>
c00173cc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00173d0:	8b 04 c5 24 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfedc]
c00173d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00173e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173e7:	25 ff 0f 00 00       	and    eax,0xfff
c00173ec:	89 c6                	mov    esi,eax
c00173ee:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c00173f4:	83 ec 0c             	sub    esp,0xc
c00173f7:	6a 01                	push   0x1
c00173f9:	e8 1f 9e ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00173fe:	83 c4 10             	add    esp,0x10
c0017401:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017405:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001740b:	83 ec 0c             	sub    esp,0xc
c001740e:	6a 01                	push   0x1
c0017410:	6a 01                	push   0x1
c0017412:	50                   	push   eax
c0017413:	52                   	push   edx
c0017414:	53                   	push   ebx
c0017415:	e8 00 a9 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001741a:	83 c4 20             	add    esp,0x20
c001741d:	09 f0                	or     eax,esi
c001741f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017423:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017427:	c1 e0 03             	shl    eax,0x3
c001742a:	05 20 01 03 c0       	add    eax,0xc0030120
c001742f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017437:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001743b:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017447:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001744b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001744f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017453:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017457:	89 c6                	mov    esi,eax
c0017459:	89 d7                	mov    edi,edx
c001745b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001745d:	89 c8                	mov    eax,ecx
c001745f:	89 fa                	mov    edx,edi
c0017461:	89 f3                	mov    ebx,esi
c0017463:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017467:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001746b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001746f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017473:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001747a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001747e:	05 00 10 00 00       	add    eax,0x1000
c0017483:	c1 e8 0c             	shr    eax,0xc
c0017486:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001748a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001748e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017492:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017496:	25 ff 0f 00 00       	and    eax,0xfff
c001749b:	89 c6                	mov    esi,eax
c001749d:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c00174a3:	83 ec 0c             	sub    esp,0xc
c00174a6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00174aa:	e8 6e 9d ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174b6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	6a 01                	push   0x1
c00174c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00174c5:	50                   	push   eax
c00174c6:	52                   	push   edx
c00174c7:	53                   	push   ebx
c00174c8:	e8 4d a8 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174cd:	83 c4 20             	add    esp,0x20
c00174d0:	09 f0                	or     eax,esi
c00174d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00174d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174da:	83 ec 0c             	sub    esp,0xc
c00174dd:	50                   	push   eax
c00174de:	e8 44 a1 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00174ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00174ee:	89 14 c5 24 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfedc],edx
c00174f5:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00174f9:	e9 bf fe ff ff       	jmp    c00173bd <loadACPITables(unsigned char*)+0x10e>
c00174fe:	90                   	nop
c00174ff:	83 c4 60             	add    esp,0x60
c0017502:	5b                   	pop    ebx
c0017503:	5e                   	pop    esi
c0017504:	5f                   	pop    edi
c0017505:	c3                   	ret    

c0017506 <findRSDT(unsigned char*)>:
c0017506:	57                   	push   edi
c0017507:	56                   	push   esi
c0017508:	53                   	push   ebx
c0017509:	83 ec 50             	sub    esp,0x50
c001750c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017511:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017517:	83 e0 04             	and    eax,0x4
c001751a:	84 c0                	test   al,al
c001751c:	75 0a                	jne    c0017528 <findRSDT(unsigned char*)+0x22>
c001751e:	b8 00 00 00 00       	mov    eax,0x0
c0017523:	e9 21 01 00 00       	jmp    c0017649 <findRSDT(unsigned char*)+0x143>
c0017528:	89 e0                	mov    eax,esp
c001752a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001752e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017532:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017536:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001753e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017542:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017546:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001754a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001754e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017552:	89 c6                	mov    esi,eax
c0017554:	89 d7                	mov    edi,edx
c0017556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017558:	89 c8                	mov    eax,ecx
c001755a:	89 fa                	mov    edx,edi
c001755c:	89 f3                	mov    ebx,esi
c001755e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017562:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017566:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001756a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001756e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017572:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001757a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001757e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017582:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001758e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017592:	25 ff 0f 00 00       	and    eax,0xfff
c0017597:	89 c6                	mov    esi,eax
c0017599:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c001759f:	83 ec 0c             	sub    esp,0xc
c00175a2:	6a 02                	push   0x2
c00175a4:	e8 74 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00175a9:	83 c4 10             	add    esp,0x10
c00175ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00175b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175b6:	83 ec 0c             	sub    esp,0xc
c00175b9:	6a 01                	push   0x1
c00175bb:	6a 02                	push   0x2
c00175bd:	50                   	push   eax
c00175be:	52                   	push   edx
c00175bf:	53                   	push   ebx
c00175c0:	e8 55 a7 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175c5:	83 c4 20             	add    esp,0x20
c00175c8:	09 f0                	or     eax,esi
c00175ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00175d2:	25 ff 0f 00 00       	and    eax,0xfff
c00175d7:	89 c6                	mov    esi,eax
c00175d9:	8b 1d d0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd0
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	6a 02                	push   0x2
c00175e4:	e8 34 9c ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00175f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175f6:	83 ec 0c             	sub    esp,0xc
c00175f9:	6a 01                	push   0x1
c00175fb:	6a 02                	push   0x2
c00175fd:	50                   	push   eax
c00175fe:	52                   	push   edx
c00175ff:	53                   	push   ebx
c0017600:	e8 15 a7 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017605:	83 c4 20             	add    esp,0x20
c0017608:	09 f0                	or     eax,esi
c001760a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001760e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017613:	75 11                	jne    c0017626 <findRSDT(unsigned char*)+0x120>
c0017615:	c6 05 20 03 03 c0 00 	mov    BYTE PTR ds:0xc0030320,0x0
c001761c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017620:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017624:	eb 1f                	jmp    c0017645 <findRSDT(unsigned char*)+0x13f>
c0017626:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001762b:	75 11                	jne    c001763e <findRSDT(unsigned char*)+0x138>
c001762d:	c6 05 20 03 03 c0 01 	mov    BYTE PTR ds:0xc0030320,0x1
c0017634:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017638:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001763c:	eb 07                	jmp    c0017645 <findRSDT(unsigned char*)+0x13f>
c001763e:	b8 00 00 00 00       	mov    eax,0x0
c0017643:	eb 04                	jmp    c0017649 <findRSDT(unsigned char*)+0x143>
c0017645:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017649:	83 c4 50             	add    esp,0x50
c001764c:	5b                   	pop    ebx
c001764d:	5e                   	pop    esi
c001764e:	5f                   	pop    edi
c001764f:	c3                   	ret    

c0017650 <findDataTable(unsigned char*, char*)>:
c0017650:	83 ec 1c             	sub    esp,0x1c
c0017653:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017658:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001765e:	83 e0 04             	and    eax,0x4
c0017661:	84 c0                	test   al,al
c0017663:	75 07                	jne    c001766c <findDataTable(unsigned char*, char*)+0x1c>
c0017665:	b8 00 00 00 00       	mov    eax,0x0
c001766a:	eb 52                	jmp    c00176be <findDataTable(unsigned char*, char*)+0x6e>
c001766c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017674:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c0017679:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001767d:	7d 3a                	jge    c00176b9 <findDataTable(unsigned char*, char*)+0x69>
c001767f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017683:	c1 e0 03             	shl    eax,0x3
c0017686:	05 20 01 03 c0       	add    eax,0xc0030120
c001768b:	83 ec 04             	sub    esp,0x4
c001768e:	6a 04                	push   0x4
c0017690:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017694:	50                   	push   eax
c0017695:	e8 b2 8f fe ff       	call   c000064c <memcmp>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	85 c0                	test   eax,eax
c001769f:	0f 94 c0             	sete   al
c00176a2:	84 c0                	test   al,al
c00176a4:	74 0d                	je     c00176b3 <findDataTable(unsigned char*, char*)+0x63>
c00176a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176aa:	8b 04 c5 24 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfedc]
c00176b1:	eb 0b                	jmp    c00176be <findDataTable(unsigned char*, char*)+0x6e>
c00176b3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176b7:	eb bb                	jmp    c0017674 <findDataTable(unsigned char*, char*)+0x24>
c00176b9:	b8 00 00 00 00       	mov    eax,0x0
c00176be:	83 c4 1c             	add    esp,0x1c
c00176c1:	c3                   	ret    

c00176c2 <scanMADT()>:
c00176c2:	53                   	push   ebx
c00176c3:	83 ec 38             	sub    esp,0x38
c00176c6:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00176cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176d1:	83 e0 04             	and    eax,0x4
c00176d4:	84 c0                	test   al,al
c00176d6:	0f 84 4a 04 00 00    	je     c0017b26 <scanMADT()+0x464>
c00176dc:	e8 44 fb ff ff       	call   c0017225 <findRSDP()>
c00176e1:	a3 2c 03 03 c0       	mov    ds:0xc003032c,eax
c00176e6:	a1 2c 03 03 c0       	mov    eax,ds:0xc003032c
c00176eb:	85 c0                	test   eax,eax
c00176ed:	75 19                	jne    c0017708 <scanMADT()+0x46>
c00176ef:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00176f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176fa:	83 e2 fb             	and    edx,0xfffffffb
c00176fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017703:	e9 22 04 00 00       	jmp    c0017b2a <scanMADT()+0x468>
c0017708:	a1 2c 03 03 c0       	mov    eax,ds:0xc003032c
c001770d:	83 ec 0c             	sub    esp,0xc
c0017710:	50                   	push   eax
c0017711:	e8 f0 fd ff ff       	call   c0017506 <findRSDT(unsigned char*)>
c0017716:	83 c4 10             	add    esp,0x10
c0017719:	a3 28 03 03 c0       	mov    ds:0xc0030328,eax
c001771e:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017723:	85 c0                	test   eax,eax
c0017725:	75 19                	jne    c0017740 <scanMADT()+0x7e>
c0017727:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001772c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017732:	83 e2 fb             	and    edx,0xfffffffb
c0017735:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001773b:	e9 ea 03 00 00       	jmp    c0017b2a <scanMADT()+0x468>
c0017740:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017745:	83 ec 0c             	sub    esp,0xc
c0017748:	50                   	push   eax
c0017749:	e8 61 fb ff ff       	call   c00172af <loadACPITables(unsigned char*)>
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017756:	83 ec 08             	sub    esp,0x8
c0017759:	68 a8 b2 02 c0       	push   0xc002b2a8
c001775e:	50                   	push   eax
c001775f:	e8 ec fe ff ff       	call   c0017650 <findDataTable(unsigned char*, char*)>
c0017764:	83 c4 10             	add    esp,0x10
c0017767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001776b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017770:	75 19                	jne    c001778b <scanMADT()+0xc9>
c0017772:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017777:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001777d:	83 e2 fe             	and    edx,0xfffffffe
c0017780:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017786:	e9 9f 03 00 00       	jmp    c0017b2a <scanMADT()+0x468>
c001778b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017793:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017797:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001779a:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001779e:	0f 87 86 03 00 00    	ja     c0017b2a <scanMADT()+0x468>
c00177a4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00177ac:	0f 87 78 03 00 00    	ja     c0017b2a <scanMADT()+0x468>
c00177b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177be:	8d 50 01             	lea    edx,[eax+0x1]
c00177c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177cd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d5:	8d 50 01             	lea    edx,[eax+0x1]
c00177d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177e0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177e4:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00177e8:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00177ed:	0f 86 36 03 00 00    	jbe    c0017b29 <scanMADT()+0x467>
c00177f3:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00177f8:	75 57                	jne    c0017851 <scanMADT()+0x18f>
c00177fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177fe:	8d 50 01             	lea    edx,[eax+0x1]
c0017801:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017805:	8a 15 20 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030520
c001780b:	0f b6 d2             	movzx  edx,dl
c001780e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017812:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017816:	88 82 60 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfaa0],al
c001781c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017820:	8d 50 01             	lea    edx,[eax+0x1]
c0017823:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017827:	8a 15 20 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030520
c001782d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017830:	88 0d 20 05 03 c0    	mov    BYTE PTR ds:0xc0030520,cl
c0017836:	0f b6 d2             	movzx  edx,dl
c0017839:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001783d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017841:	88 82 40 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfac0],al
c0017847:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001784c:	e9 c1 02 00 00       	jmp    c0017b12 <scanMADT()+0x450>
c0017851:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017856:	0f 85 14 01 00 00    	jne    c0017970 <scanMADT()+0x2ae>
c001785c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017860:	8d 50 01             	lea    edx,[eax+0x1]
c0017863:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017867:	8a 15 e0 03 03 c0    	mov    dl,BYTE PTR ds:0xc00303e0
c001786d:	0f b6 d2             	movzx  edx,dl
c0017870:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017874:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017878:	88 82 00 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfc00],al
c001787e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017882:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788a:	01 d0                	add    eax,edx
c001788c:	83 c0 2c             	add    eax,0x2c
c001788f:	8a 00                	mov    al,BYTE PTR [eax]
c0017891:	0f b6 d0             	movzx  edx,al
c0017894:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017898:	8d 48 01             	lea    ecx,[eax+0x1]
c001789b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001789f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178a3:	0f b6 c0             	movzx  eax,al
c00178a6:	c1 e0 08             	shl    eax,0x8
c00178a9:	89 d1                	mov    ecx,edx
c00178ab:	09 c1                	or     ecx,eax
c00178ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178b1:	8d 50 02             	lea    edx,[eax+0x2]
c00178b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178b8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178bc:	0f b6 c0             	movzx  eax,al
c00178bf:	c1 e0 10             	shl    eax,0x10
c00178c2:	09 c1                	or     ecx,eax
c00178c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178c8:	8d 50 03             	lea    edx,[eax+0x3]
c00178cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178cf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178d3:	0f b6 c0             	movzx  eax,al
c00178d6:	c1 e0 18             	shl    eax,0x18
c00178d9:	09 c1                	or     ecx,eax
c00178db:	89 ca                	mov    edx,ecx
c00178dd:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c00178e2:	0f b6 c0             	movzx  eax,al
c00178e5:	89 14 85 20 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfbe0],edx
c00178ec:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178f9:	01 d0                	add    eax,edx
c00178fb:	83 c0 2c             	add    eax,0x2c
c00178fe:	8a 00                	mov    al,BYTE PTR [eax]
c0017900:	0f b6 d0             	movzx  edx,al
c0017903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017907:	8d 48 01             	lea    ecx,[eax+0x1]
c001790a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001790e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017912:	0f b6 c0             	movzx  eax,al
c0017915:	c1 e0 08             	shl    eax,0x8
c0017918:	89 d1                	mov    ecx,edx
c001791a:	09 c1                	or     ecx,eax
c001791c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017920:	8d 50 02             	lea    edx,[eax+0x2]
c0017923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017927:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001792b:	0f b6 c0             	movzx  eax,al
c001792e:	c1 e0 10             	shl    eax,0x10
c0017931:	09 c1                	or     ecx,eax
c0017933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017937:	8d 50 03             	lea    edx,[eax+0x3]
c001793a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001793e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017942:	0f b6 c0             	movzx  eax,al
c0017945:	c1 e0 18             	shl    eax,0x18
c0017948:	09 c1                	or     ecx,eax
c001794a:	89 ca                	mov    edx,ecx
c001794c:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c0017951:	0f b6 c0             	movzx  eax,al
c0017954:	89 14 85 a0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb60],edx
c001795b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017960:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c0017965:	40                   	inc    eax
c0017966:	a2 e0 03 03 c0       	mov    ds:0xc00303e0,al
c001796b:	e9 a2 01 00 00       	jmp    c0017b12 <scanMADT()+0x450>
c0017970:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017975:	0f 85 e9 00 00 00    	jne    c0017a64 <scanMADT()+0x3a2>
c001797b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797f:	8d 50 01             	lea    edx,[eax+0x1]
c0017982:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017986:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001798a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001798e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017992:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017996:	8d 50 01             	lea    edx,[eax+0x1]
c0017999:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001799d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179a1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179a5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00179a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b1:	01 d0                	add    eax,edx
c00179b3:	83 c0 2c             	add    eax,0x2c
c00179b6:	8a 00                	mov    al,BYTE PTR [eax]
c00179b8:	0f b6 d0             	movzx  edx,al
c00179bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00179c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179ca:	0f b6 c0             	movzx  eax,al
c00179cd:	c1 e0 08             	shl    eax,0x8
c00179d0:	89 d1                	mov    ecx,edx
c00179d2:	09 c1                	or     ecx,eax
c00179d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d8:	8d 50 02             	lea    edx,[eax+0x2]
c00179db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179e3:	0f b6 c0             	movzx  eax,al
c00179e6:	c1 e0 10             	shl    eax,0x10
c00179e9:	09 c1                	or     ecx,eax
c00179eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ef:	8d 50 03             	lea    edx,[eax+0x3]
c00179f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179f6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00179fa:	0f b6 c0             	movzx  eax,al
c00179fd:	c1 e0 18             	shl    eax,0x18
c0017a00:	09 c8                	or     eax,ecx
c0017a02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a06:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a13:	01 d0                	add    eax,edx
c0017a15:	83 c0 2c             	add    eax,0x2c
c0017a18:	8a 00                	mov    al,BYTE PTR [eax]
c0017a1a:	0f b6 c0             	movzx  eax,al
c0017a1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a21:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a28:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017a2c:	0f b6 d2             	movzx  edx,dl
c0017a2f:	c1 e2 08             	shl    edx,0x8
c0017a32:	09 d0                	or     eax,edx
c0017a34:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017a39:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a3e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017a43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a47:	88 90 c0 cc 02 c0    	mov    BYTE PTR [eax-0x3ffd3340],dl
c0017a4d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017a52:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017a57:	66 89 84 12 c0 03 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfc40],ax
c0017a5f:	e9 ae 00 00 00       	jmp    c0017b12 <scanMADT()+0x450>
c0017a64:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017a69:	0f 85 97 00 00 00    	jne    c0017b06 <scanMADT()+0x444>
c0017a6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a73:	8d 50 01             	lea    edx,[eax+0x1]
c0017a76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a7e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a82:	0f b6 c0             	movzx  eax,al
c0017a85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a91:	01 d0                	add    eax,edx
c0017a93:	83 c0 2c             	add    eax,0x2c
c0017a96:	8a 00                	mov    al,BYTE PTR [eax]
c0017a98:	0f b6 d0             	movzx  edx,al
c0017a9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a9f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017aa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aaa:	0f b6 c0             	movzx  eax,al
c0017aad:	c1 e0 08             	shl    eax,0x8
c0017ab0:	09 d0                	or     eax,edx
c0017ab2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ab6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017abb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017abf:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ac6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ace:	0f b6 c0             	movzx  eax,al
c0017ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad9:	c1 e0 08             	shl    eax,0x8
c0017adc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ae0:	89 c1                	mov    ecx,eax
c0017ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ae6:	c1 e0 18             	shl    eax,0x18
c0017ae9:	89 c3                	mov    ebx,eax
c0017aeb:	a1 30 03 03 c0       	mov    eax,ds:0xc0030330
c0017af0:	8d 50 01             	lea    edx,[eax+0x1]
c0017af3:	89 15 30 03 03 c0    	mov    DWORD PTR ds:0xc0030330,edx
c0017af9:	09 d9                	or     ecx,ebx
c0017afb:	89 ca                	mov    edx,ecx
c0017afd:	89 14 85 40 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfcc0],edx
c0017b04:	eb 0c                	jmp    c0017b12 <scanMADT()+0x450>
c0017b06:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b0b:	75 05                	jne    c0017b12 <scanMADT()+0x450>
c0017b0d:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017b12:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017b17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b1b:	01 d0                	add    eax,edx
c0017b1d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b21:	e9 6d fc ff ff       	jmp    c0017793 <scanMADT()+0xd1>
c0017b26:	90                   	nop
c0017b27:	eb 01                	jmp    c0017b2a <scanMADT()+0x468>
c0017b29:	90                   	nop
c0017b2a:	83 c4 38             	add    esp,0x38
c0017b2d:	5b                   	pop    ebx
c0017b2e:	c3                   	ret    
c0017b2f:	90                   	nop

c0017b30 <ACPI::ACPI()>:
c0017b30:	83 ec 0c             	sub    esp,0xc
c0017b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b37:	83 ec 08             	sub    esp,0x8
c0017b3a:	68 ad b2 02 c0       	push   0xc002b2ad
c0017b3f:	50                   	push   eax
c0017b40:	e8 57 c2 ff ff       	call   c0013d9c <Device::Device(char const*)>
c0017b45:	83 c4 10             	add    esp,0x10
c0017b48:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c0017b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b51:	89 10                	mov    DWORD PTR [eax],edx
c0017b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b57:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b62:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b70:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017b7a:	e8 43 fb ff ff       	call   c00176c2 <scanMADT()>
c0017b7f:	90                   	nop
c0017b80:	83 c4 0c             	add    esp,0xc
c0017b83:	c3                   	ret    

c0017b84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017b84:	83 ec 2c             	sub    esp,0x2c
c0017b87:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017b8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b8f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017b93:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017b97:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017b9c:	88 d0                	mov    al,dl
c0017b9e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ba2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ba7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017baf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bb9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017bbd:	0f 8d 97 00 00 00    	jge    c0017c5a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017bc3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bcb:	83 c2 2a             	add    edx,0x2a
c0017bce:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017bd2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017bd7:	75 78                	jne    c0017c51 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017bd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bdd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017be1:	83 c2 2a             	add    edx,0x2a
c0017be4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017be8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017bec:	75 63                	jne    c0017c51 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017bee:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bf3:	74 3a                	je     c0017c2f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017bf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bfd:	83 c2 2a             	add    edx,0x2a
c0017c00:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c0b:	39 c2                	cmp    edx,eax
c0017c0d:	74 10                	je     c0017c1f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017c0f:	83 ec 0c             	sub    esp,0xc
c0017c12:	68 28 b2 02 c0       	push   0xc002b228
c0017c17:	e8 af 22 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	68 b2 b2 02 c0       	push   0xc002b2b2
c0017c27:	e8 9f 22 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017c33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c3b:	83 c2 2a             	add    edx,0x2a
c0017c3e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017c42:	8b 02                	mov    eax,DWORD PTR [edx]
c0017c44:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017c47:	89 01                	mov    DWORD PTR [ecx],eax
c0017c49:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017c4c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c51:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017c55:	e9 55 ff ff ff       	jmp    c0017baf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017c5a:	90                   	nop
c0017c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c5f:	83 c4 2c             	add    esp,0x2c
c0017c62:	c2 04 00             	ret    0x4
c0017c65:	90                   	nop

c0017c66 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017c66:	83 ec 1c             	sub    esp,0x1c
c0017c69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c6d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c75:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017c7a:	88 c8                	mov    al,cl
c0017c7c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017c80:	88 d0                	mov    al,dl
c0017c82:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c8a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c94:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c97:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017c9b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ca9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cad:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017cb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cb4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cbd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cc3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017cc7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cce:	83 c2 2a             	add    edx,0x2a
c0017cd1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cd9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ce3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ce6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017cea:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0017cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cff:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d09:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d0f:	3d 00 02 00 00       	cmp    eax,0x200
c0017d14:	75 10                	jne    c0017d26 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017d16:	83 ec 0c             	sub    esp,0xc
c0017d19:	68 c1 b2 02 c0       	push   0xc002b2c1
c0017d1e:	e8 a8 21 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0017d23:	83 c4 10             	add    esp,0x10
c0017d26:	90                   	nop
c0017d27:	83 c4 1c             	add    esp,0x1c
c0017d2a:	c3                   	ret    
c0017d2b:	90                   	nop

c0017d2c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017d2c:	b8 00 00 00 00       	mov    eax,0x0
c0017d31:	c3                   	ret    

c0017d32 <ACPI::detectPCI()>:
c0017d32:	53                   	push   ebx
c0017d33:	83 ec 28             	sub    esp,0x28
c0017d36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017d3b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017d40:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017d45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d4b:	83 e0 04             	and    eax,0x4
c0017d4e:	84 c0                	test   al,al
c0017d50:	74 2b                	je     c0017d7d <ACPI::detectPCI()+0x4b>
c0017d52:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c0017d57:	83 ec 08             	sub    esp,0x8
c0017d5a:	68 de b2 02 c0       	push   0xc002b2de
c0017d5f:	50                   	push   eax
c0017d60:	e8 eb f8 ff ff       	call   c0017650 <findDataTable(unsigned char*, char*)>
c0017d65:	83 c4 10             	add    esp,0x10
c0017d68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017d71:	74 0a                	je     c0017d7d <ACPI::detectPCI()+0x4b>
c0017d73:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d78:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d7d:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017d85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d89:	8a 00                	mov    al,BYTE PTR [eax]
c0017d8b:	3c 01                	cmp    al,0x1
c0017d8d:	75 0c                	jne    c0017d9b <ACPI::detectPCI()+0x69>
c0017d8f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d94:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d99:	eb 26                	jmp    c0017dc1 <ACPI::detectPCI()+0x8f>
c0017d9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d9f:	8a 00                	mov    al,BYTE PTR [eax]
c0017da1:	3c 02                	cmp    al,0x2
c0017da3:	75 1c                	jne    c0017dc1 <ACPI::detectPCI()+0x8f>
c0017da5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017daa:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017daf:	74 10                	je     c0017dc1 <ACPI::detectPCI()+0x8f>
c0017db1:	83 ec 0c             	sub    esp,0xc
c0017db4:	68 58 b2 02 c0       	push   0xc002b258
c0017db9:	e8 0d 21 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017dc5:	83 f0 01             	xor    eax,0x1
c0017dc8:	84 c0                	test   al,al
c0017dca:	74 3f                	je     c0017e0b <ACPI::detectPCI()+0xd9>
c0017dcc:	e8 7f 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017dd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017dd5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017dda:	75 0c                	jne    c0017de8 <ACPI::detectPCI()+0xb6>
c0017ddc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017de1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017de6:	eb 23                	jmp    c0017e0b <ACPI::detectPCI()+0xd9>
c0017de8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017ded:	75 1c                	jne    c0017e0b <ACPI::detectPCI()+0xd9>
c0017def:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017df4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017df9:	74 10                	je     c0017e0b <ACPI::detectPCI()+0xd9>
c0017dfb:	83 ec 0c             	sub    esp,0xc
c0017dfe:	68 58 b2 02 c0       	push   0xc002b258
c0017e03:	e8 c3 20 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0017e08:	83 c4 10             	add    esp,0x10
c0017e0b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e10:	74 7e                	je     c0017e90 <ACPI::detectPCI()+0x15e>
c0017e12:	83 ec 0c             	sub    esp,0xc
c0017e15:	68 e3 b2 02 c0       	push   0xc002b2e3
c0017e1a:	e8 d4 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e1f:	83 c4 10             	add    esp,0x10
c0017e22:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017e2a:	83 ec 0c             	sub    esp,0xc
c0017e2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e31:	e8 63 77 ff ff       	call   c000f599 <malloc>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	89 c3                	mov    ebx,eax
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	53                   	push   ebx
c0017e3f:	e8 b0 a5 00 00       	call   c00223f4 <PCI::PCI()>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e4f:	83 ec 08             	sub    esp,0x8
c0017e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e56:	50                   	push   eax
c0017e57:	e8 3c bd ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e65:	83 c0 08             	add    eax,0x8
c0017e68:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e6a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e6f:	74 07                	je     c0017e78 <ACPI::detectPCI()+0x146>
c0017e71:	ba 01 00 00 00       	mov    edx,0x1
c0017e76:	eb 05                	jmp    c0017e7d <ACPI::detectPCI()+0x14b>
c0017e78:	ba 02 00 00 00       	mov    edx,0x2
c0017e7d:	6a 00                	push   0x0
c0017e7f:	6a 00                	push   0x0
c0017e81:	52                   	push   edx
c0017e82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e86:	ff d0                	call   eax
c0017e88:	83 c4 10             	add    esp,0x10
c0017e8b:	e9 9e 00 00 00       	jmp    c0017f2e <ACPI::detectPCI()+0x1fc>
c0017e90:	83 ec 0c             	sub    esp,0xc
c0017e93:	68 fb b2 02 c0       	push   0xc002b2fb
c0017e98:	e8 c2 a8 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	68 06 b3 02 c0       	push   0xc002b306
c0017ea8:	e8 46 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ebe:	e8 d6 76 ff ff       	call   c000f599 <malloc>
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	89 c3                	mov    ebx,eax
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	53                   	push   ebx
c0017ecc:	e8 8d b0 00 00       	call   c0022f5e <IDE::IDE()>
c0017ed1:	83 c4 10             	add    esp,0x10
c0017ed4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017edc:	83 ec 08             	sub    esp,0x8
c0017edf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ee3:	50                   	push   eax
c0017ee4:	e8 af bc ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ef0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017efe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017f07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f0b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017f14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f1a:	83 c0 08             	add    eax,0x8
c0017f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f1f:	6a 00                	push   0x0
c0017f21:	6a 00                	push   0x0
c0017f23:	6a 00                	push   0x0
c0017f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f29:	ff d0                	call   eax
c0017f2b:	83 c4 10             	add    esp,0x10
c0017f2e:	90                   	nop
c0017f2f:	83 c4 28             	add    esp,0x28
c0017f32:	5b                   	pop    ebx
c0017f33:	c3                   	ret    

c0017f34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f34:	83 ec 1c             	sub    esp,0x1c
c0017f37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f3b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f42:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017f47:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f4c:	83 ec 08             	sub    esp,0x8
c0017f4f:	52                   	push   edx
c0017f50:	50                   	push   eax
c0017f51:	e8 5a 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f5d:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0017f62:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f67:	83 ec 04             	sub    esp,0x4
c0017f6a:	6a 01                	push   0x1
c0017f6c:	52                   	push   edx
c0017f6d:	50                   	push   eax
c0017f6e:	e8 6f 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	90                   	nop
c0017f77:	83 c4 1c             	add    esp,0x1c
c0017f7a:	c3                   	ret    
c0017f7b:	90                   	nop

c0017f7c <ACPI::sleep()>:
c0017f7c:	83 ec 0c             	sub    esp,0xc
c0017f7f:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0017f84:	85 c0                	test   eax,eax
c0017f86:	74 07                	je     c0017f8f <ACPI::sleep()+0x13>
c0017f88:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c0017f8d:	ff d0                	call   eax
c0017f8f:	90                   	nop
c0017f90:	83 c4 0c             	add    esp,0xc
c0017f93:	c3                   	ret    

c0017f94 <ACPI::open(int, int, void*)>:
c0017f94:	57                   	push   edi
c0017f95:	56                   	push   esi
c0017f96:	53                   	push   ebx
c0017f97:	81 ec 60 01 00 00    	sub    esp,0x160
c0017f9d:	83 ec 0c             	sub    esp,0xc
c0017fa0:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017fa7:	e8 86 fd ff ff       	call   c0017d32 <ACPI::detectPCI()>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	83 ec 0c             	sub    esp,0xc
c0017fb2:	68 80 b2 02 c0       	push   0xc002b280
c0017fb7:	e8 37 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fbc:	83 c4 10             	add    esp,0x10
c0017fbf:	83 ec 0c             	sub    esp,0xc
c0017fc2:	68 1b b3 02 c0       	push   0xc002b31b
c0017fc7:	e8 52 46 00 00       	call   c001c61e <Thr::loadKernelSymbolTable(char const*)>
c0017fcc:	83 c4 10             	add    esp,0x10
c0017fcf:	83 ec 0c             	sub    esp,0xc
c0017fd2:	68 39 b3 02 c0       	push   0xc002b339
c0017fd7:	e8 17 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017fdc:	83 c4 10             	add    esp,0x10
c0017fdf:	83 ec 04             	sub    esp,0x4
c0017fe2:	6a 0c                	push   0xc
c0017fe4:	68 54 b3 02 c0       	push   0xc002b354
c0017fe9:	68 65 b3 02 c0       	push   0xc002b365
c0017fee:	e8 94 2c 00 00       	call   c001ac87 <Reg::readIntWithDefault(char*, char*, int)>
c0017ff3:	83 c4 10             	add    esp,0x10
c0017ff6:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017ffd:	83 ec 0c             	sub    esp,0xc
c0018000:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018007:	e8 1b 94 ff ff       	call   c0011427 <Virt::setupPageSwapping(int)>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	83 ec 0c             	sub    esp,0xc
c0018012:	68 95 9e 02 c0       	push   0xc0029e95
c0018017:	e8 d7 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c0018025:	83 ec 08             	sub    esp,0x8
c0018028:	6a 01                	push   0x1
c001802a:	68 6c b3 02 c0       	push   0xc002b36c
c001802f:	e8 61 50 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c0018034:	83 c4 10             	add    esp,0x10
c0018037:	83 ec 08             	sub    esp,0x8
c001803a:	53                   	push   ebx
c001803b:	50                   	push   eax
c001803c:	e8 85 52 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c0018041:	83 c4 10             	add    esp,0x10
c0018044:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001804b:	83 ec 08             	sub    esp,0x8
c001804e:	6a 12                	push   0x12
c0018050:	50                   	push   eax
c0018051:	e8 c6 be ff ff       	call   c0013f1c <getDevicesOfType(DeviceType)>
c0018056:	83 c4 0c             	add    esp,0xc
c0018059:	83 ec 0c             	sub    esp,0xc
c001805c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018063:	50                   	push   eax
c0018064:	e8 8b 09 01 00       	call   c00289f4 <LinkedList<Device>::isEmpty()>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	83 f0 01             	xor    eax,0x1
c001806f:	84 c0                	test   al,al
c0018071:	0f 84 43 01 00 00    	je     c00181ba <ACPI::open(int, int, void*)+0x226>
c0018077:	83 ec 0c             	sub    esp,0xc
c001807a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018081:	50                   	push   eax
c0018082:	e8 89 09 01 00       	call   c0028a10 <LinkedList<Device>::getFirstElement()>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018091:	83 ec 0c             	sub    esp,0xc
c0018094:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001809b:	50                   	push   eax
c001809c:	e8 77 09 01 00       	call   c0028a18 <LinkedList<Device>::removeFirst()>
c00180a1:	83 c4 10             	add    esp,0x10
c00180a4:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00180ab:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00180b2:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00180b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180bd:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00180c3:	ba 09 00 00 00       	mov    edx,0x9
c00180c8:	fc                   	cld    
c00180c9:	89 c7                	mov    edi,eax
c00180cb:	89 de                	mov    esi,ebx
c00180cd:	89 d1                	mov    ecx,edx
c00180cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00180d1:	83 ec 08             	sub    esp,0x8
c00180d4:	8d 44 24 38          	lea    eax,[esp+0x38]
c00180d8:	50                   	push   eax
c00180d9:	83 ec 24             	sub    esp,0x24
c00180dc:	89 e0                	mov    eax,esp
c00180de:	89 c3                	mov    ebx,eax
c00180e0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00180e4:	ba 09 00 00 00       	mov    edx,0x9
c00180e9:	89 df                	mov    edi,ebx
c00180eb:	89 c6                	mov    esi,eax
c00180ed:	89 d1                	mov    ecx,edx
c00180ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00180f1:	e8 dc a7 00 00       	call   c00228d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00180f6:	83 c4 30             	add    esp,0x30
c00180f9:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018100:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018108:	0f 84 4b ff ff ff    	je     c0018059 <ACPI::open(int, int, void*)+0xc5>
c001810e:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018119:	83 ec 0c             	sub    esp,0xc
c001811c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018123:	e8 71 74 ff ff       	call   c000f599 <malloc>
c0018128:	83 c4 10             	add    esp,0x10
c001812b:	89 c3                	mov    ebx,eax
c001812d:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0018132:	83 ec 04             	sub    esp,0x4
c0018135:	50                   	push   eax
c0018136:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001813d:	53                   	push   ebx
c001813e:	e8 7b ab ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001814d:	83 ec 0c             	sub    esp,0xc
c0018150:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018157:	e8 34 ae ff ff       	call   c0012f90 <File::exists()>
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	84 c0                	test   al,al
c0018161:	74 27                	je     c001818a <ACPI::open(int, int, void*)+0x1f6>
c0018163:	83 ec 08             	sub    esp,0x8
c0018166:	6a 01                	push   0x1
c0018168:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001816f:	e8 21 4f 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	83 ec 08             	sub    esp,0x8
c001817a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018181:	50                   	push   eax
c0018182:	e8 3f 51 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018192:	0f 84 c1 fe ff ff    	je     c0018059 <ACPI::open(int, int, void*)+0xc5>
c0018198:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001819f:	8b 00                	mov    eax,DWORD PTR [eax]
c00181a1:	83 c0 08             	add    eax,0x8
c00181a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00181a6:	83 ec 0c             	sub    esp,0xc
c00181a9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00181b0:	ff d0                	call   eax
c00181b2:	83 c4 10             	add    esp,0x10
c00181b5:	e9 9f fe ff ff       	jmp    c0018059 <ACPI::open(int, int, void*)+0xc5>
c00181ba:	83 ec 0c             	sub    esp,0xc
c00181bd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181c4:	50                   	push   eax
c00181c5:	e8 28 08 01 00       	call   c00289f2 <LinkedList<Device>::~LinkedList()>
c00181ca:	83 c4 10             	add    esp,0x10
c00181cd:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c00181d3:	83 ec 08             	sub    esp,0x8
c00181d6:	6a 01                	push   0x1
c00181d8:	68 87 b3 02 c0       	push   0xc002b387
c00181dd:	e8 b3 4e 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	83 ec 08             	sub    esp,0x8
c00181e8:	53                   	push   ebx
c00181e9:	50                   	push   eax
c00181ea:	e8 d7 50 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c00181ef:	83 c4 10             	add    esp,0x10
c00181f2:	8b 1d 68 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da68
c00181f8:	83 ec 08             	sub    esp,0x8
c00181fb:	6a 01                	push   0x1
c00181fd:	68 a4 b3 02 c0       	push   0xc002b3a4
c0018202:	e8 8e 4e 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	83 ec 08             	sub    esp,0x8
c001820d:	53                   	push   ebx
c001820e:	50                   	push   eax
c001820f:	e8 b2 50 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c0018214:	83 c4 10             	add    esp,0x10
c0018217:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001821c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018222:	83 e0 04             	and    eax,0x4
c0018225:	84 c0                	test   al,al
c0018227:	0f 84 0d 01 00 00    	je     c001833a <ACPI::open(int, int, void*)+0x3a6>
c001822d:	83 ec 0c             	sub    esp,0xc
c0018230:	68 c1 b3 02 c0       	push   0xc002b3c1
c0018235:	e8 b9 73 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001823a:	83 c4 10             	add    esp,0x10
c001823d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018248:	83 ec 0c             	sub    esp,0xc
c001824b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018252:	e8 42 73 ff ff       	call   c000f599 <malloc>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	89 c3                	mov    ebx,eax
c001825c:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0018261:	83 ec 04             	sub    esp,0x4
c0018264:	50                   	push   eax
c0018265:	68 de b3 02 c0       	push   0xc002b3de
c001826a:	53                   	push   ebx
c001826b:	e8 4e aa ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c0018270:	83 c4 10             	add    esp,0x10
c0018273:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001827a:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018282:	74 1a                	je     c001829e <ACPI::open(int, int, void*)+0x30a>
c0018284:	83 ec 0c             	sub    esp,0xc
c0018287:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001828e:	e8 fd ac ff ff       	call   c0012f90 <File::exists()>
c0018293:	83 c4 10             	add    esp,0x10
c0018296:	84 c0                	test   al,al
c0018298:	74 04                	je     c001829e <ACPI::open(int, int, void*)+0x30a>
c001829a:	b0 01                	mov    al,0x1
c001829c:	eb 02                	jmp    c00182a0 <ACPI::open(int, int, void*)+0x30c>
c001829e:	b0 00                	mov    al,0x0
c00182a0:	84 c0                	test   al,al
c00182a2:	74 25                	je     c00182c9 <ACPI::open(int, int, void*)+0x335>
c00182a4:	83 ec 08             	sub    esp,0x8
c00182a7:	6a 01                	push   0x1
c00182a9:	68 de b3 02 c0       	push   0xc002b3de
c00182ae:	e8 e2 4d 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c00182b3:	83 c4 10             	add    esp,0x10
c00182b6:	83 ec 08             	sub    esp,0x8
c00182b9:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00182c0:	50                   	push   eax
c00182c1:	e8 00 50 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c00182c6:	83 c4 10             	add    esp,0x10
c00182c9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00182d1:	74 27                	je     c00182fa <ACPI::open(int, int, void*)+0x366>
c00182d3:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00182db:	74 1d                	je     c00182fa <ACPI::open(int, int, void*)+0x366>
c00182dd:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00182e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00182e6:	83 c0 08             	add    eax,0x8
c00182e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00182f5:	ff d0                	call   eax
c00182f7:	83 c4 10             	add    esp,0x10
c00182fa:	a1 28 03 03 c0       	mov    eax,ds:0xc0030328
c00182ff:	83 ec 08             	sub    esp,0x8
c0018302:	68 fb b3 02 c0       	push   0xc002b3fb
c0018307:	50                   	push   eax
c0018308:	e8 43 f3 ff ff       	call   c0017650 <findDataTable(unsigned char*, char*)>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018317:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001831f:	74 19                	je     c001833a <ACPI::open(int, int, void*)+0x3a6>
c0018321:	83 ec 08             	sub    esp,0x8
c0018324:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001832b:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018332:	e8 fd fb ff ff       	call   c0017f34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	b8 00 00 00 00       	mov    eax,0x0
c001833f:	81 c4 60 01 00 00    	add    esp,0x160
c0018345:	5b                   	pop    ebx
c0018346:	5e                   	pop    esi
c0018347:	5f                   	pop    edi
c0018348:	c3                   	ret    
c0018349:	90                   	nop

c001834a <CPU::close(int, int, void*)>:
c001834a:	31 c0                	xor    eax,eax
c001834c:	c3                   	ret    
c001834d:	90                   	nop

c001834e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001834e:	55                   	push   ebp
c001834f:	57                   	push   edi
c0018350:	56                   	push   esi
c0018351:	53                   	push   ebx
c0018352:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018356:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001835a:	89 ce                	mov    esi,ecx
c001835c:	89 d5                	mov    ebp,edx
c001835e:	80 f9 04             	cmp    cl,0x4
c0018361:	75 28                	jne    c001838b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018363:	8d 42 f9             	lea    eax,[edx-0x7]
c0018366:	3c 03                	cmp    al,0x3
c0018368:	0f 86 63 01 00 00    	jbe    c00184d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001836e:	80 fa 03             	cmp    dl,0x3
c0018371:	0f 84 5a 01 00 00    	je     c00184d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018377:	8d 7a f2             	lea    edi,[edx-0xe]
c001837a:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c001837f:	89 fb                	mov    ebx,edi
c0018381:	80 fb 01             	cmp    bl,0x1
c0018384:	77 4e                	ja     c00183d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018386:	e9 52 01 00 00       	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001838b:	80 f9 05             	cmp    cl,0x5
c001838e:	75 4d                	jne    c00183dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018390:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c0018395:	80 fa 03             	cmp    dl,0x3
c0018398:	0f 86 3f 01 00 00    	jbe    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839e:	8d 7a fa             	lea    edi,[edx-0x6]
c00183a1:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c00183a6:	89 fb                	mov    ebx,edi
c00183a8:	80 fb 01             	cmp    bl,0x1
c00183ab:	0f 86 2c 01 00 00    	jbe    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b1:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00183b6:	80 fa 08             	cmp    dl,0x8
c00183b9:	0f 84 1e 01 00 00    	je     c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bf:	89 d7                	mov    edi,edx
c00183c1:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c00183c6:	83 e7 fb             	and    edi,0xfffffffb
c00183c9:	89 fb                	mov    ebx,edi
c00183cb:	80 fb 09             	cmp    bl,0x9
c00183ce:	0f 84 09 01 00 00    	je     c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d4:	31 c0                	xor    eax,eax
c00183d6:	89 eb                	mov    ebx,ebp
c00183d8:	0f b6 fb             	movzx  edi,bl
c00183db:	eb 30                	jmp    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00183dd:	31 c0                	xor    eax,eax
c00183df:	80 f9 06             	cmp    cl,0x6
c00183e2:	75 f2                	jne    c00183d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183e4:	80 fa 0a             	cmp    dl,0xa
c00183e7:	77 ed                	ja     c00183d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183e9:	bf de 05 00 00       	mov    edi,0x5de
c00183ee:	0f a3 d7             	bt     edi,edx
c00183f1:	73 e3                	jae    c00183d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183f3:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c00183f8:	e9 e0 00 00 00       	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fd:	39 c7                	cmp    edi,eax
c00183ff:	0f 84 d3 00 00 00    	je     c00184d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018405:	40                   	inc    eax
c0018406:	3d d0 00 00 00       	cmp    eax,0xd0
c001840b:	74 09                	je     c0018416 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001840d:	89 f3                	mov    ebx,esi
c001840f:	80 fb 0f             	cmp    bl,0xf
c0018412:	75 f1                	jne    c0018405 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018414:	eb e7                	jmp    c00183fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018416:	80 f9 10             	cmp    cl,0x10
c0018419:	75 14                	jne    c001842f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001841b:	8d 42 fc             	lea    eax,[edx-0x4]
c001841e:	83 e0 fb             	and    eax,0xfffffffb
c0018421:	3c 02                	cmp    al,0x2
c0018423:	76 34                	jbe    c0018459 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018425:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c001842a:	80 fa 02             	cmp    dl,0x2
c001842d:	eb 24                	jmp    c0018453 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001842f:	80 f9 11             	cmp    cl,0x11
c0018432:	75 13                	jne    c0018447 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018434:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018439:	80 fa 03             	cmp    dl,0x3
c001843c:	0f 85 9b 00 00 00    	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018442:	e9 91 00 00 00       	jmp    c00184d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018447:	80 f9 12             	cmp    cl,0x12
c001844a:	75 14                	jne    c0018460 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001844c:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018451:	fe ca                	dec    dl
c0018453:	0f 85 84 00 00 00    	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018459:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c001845e:	eb 7d                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018460:	80 f9 14             	cmp    cl,0x14
c0018463:	75 12                	jne    c0018477 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018465:	4a                   	dec    edx
c0018466:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c001846b:	80 fa 01             	cmp    dl,0x1
c001846e:	77 6d                	ja     c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018470:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c0018475:	eb 66                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018477:	80 f9 15             	cmp    cl,0x15
c001847a:	75 31                	jne    c00184ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001847c:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c0018481:	80 fa 01             	cmp    dl,0x1
c0018484:	74 57                	je     c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018486:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c001848b:	80 fa 13             	cmp    dl,0x13
c001848e:	76 0c                	jbe    c001849c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018490:	80 fa 30             	cmp    dl,0x30
c0018493:	75 48                	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018495:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c001849a:	eb 41                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001849c:	b9 04 00 09 00       	mov    ecx,0x90004
c00184a1:	0f a3 d1             	bt     ecx,edx
c00184a4:	73 37                	jae    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a6:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00184ab:	eb 30                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ad:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c00184b2:	80 f9 16             	cmp    cl,0x16
c00184b5:	75 26                	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b7:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c00184bc:	84 d2                	test   dl,dl
c00184be:	74 1d                	je     c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c0:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c00184c5:	80 fa 30             	cmp    dl,0x30
c00184c8:	75 13                	jne    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ca:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c00184cf:	eb 0c                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d1:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00184d6:	eb 05                	jmp    c00184dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d8:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c00184dd:	5b                   	pop    ebx
c00184de:	5e                   	pop    esi
c00184df:	5f                   	pop    edi
c00184e0:	5d                   	pop    ebp
c00184e1:	c3                   	ret    

c00184e2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184ea:	80 f9 04             	cmp    cl,0x4
c00184ed:	75 6b                	jne    c001855a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184ef:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00184f4:	80 fa 01             	cmp    dl,0x1
c00184f7:	0f 86 92 02 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fd:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018502:	80 fa 02             	cmp    dl,0x2
c0018505:	0f 84 84 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850b:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c0018510:	80 fa 03             	cmp    dl,0x3
c0018513:	0f 84 76 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018519:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c001851e:	80 fa 04             	cmp    dl,0x4
c0018521:	0f 84 68 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018527:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c001852c:	80 fa 05             	cmp    dl,0x5
c001852f:	0f 84 5a 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018535:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c001853a:	80 fa 07             	cmp    dl,0x7
c001853d:	0f 84 4c 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018543:	83 ea 08             	sub    edx,0x8
c0018546:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c001854b:	80 fa 01             	cmp    dl,0x1
c001854e:	0f 87 3b 02 00 00    	ja     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018554:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c0018559:	c3                   	ret    
c001855a:	80 f9 05             	cmp    cl,0x5
c001855d:	75 45                	jne    c00185a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001855f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018562:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018567:	80 f9 02             	cmp    cl,0x2
c001856a:	0f 86 1f 02 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018570:	80 fa 04             	cmp    dl,0x4
c0018573:	0f 84 f3 01 00 00    	je     c001876c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018579:	80 fa 07             	cmp    dl,0x7
c001857c:	0f 84 0d 02 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018582:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018587:	80 fa 08             	cmp    dl,0x8
c001858a:	0f 84 ff 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018590:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018595:	80 fa 09             	cmp    dl,0x9
c0018598:	0f 85 f1 01 00 00    	jne    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001859e:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00185a3:	c3                   	ret    
c00185a4:	80 f9 06             	cmp    cl,0x6
c00185a7:	0f 85 85 01 00 00    	jne    c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00185ad:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00185b2:	80 fa 01             	cmp    dl,0x1
c00185b5:	0f 84 d4 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	8d 42 fb             	lea    eax,[edx-0x5]
c00185be:	3c 01                	cmp    al,0x1
c00185c0:	0f 86 ac 01 00 00    	jbe    c0018772 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185c6:	80 fa 03             	cmp    dl,0x3
c00185c9:	0f 84 a3 01 00 00    	je     c0018772 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185cf:	8d 4a f9             	lea    ecx,[edx-0x7]
c00185d2:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00185d7:	80 f9 01             	cmp    cl,0x1
c00185da:	0f 86 af 01 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	80 fa 09             	cmp    dl,0x9
c00185e3:	0f 84 8f 01 00 00    	je     c0018778 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185e9:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185ec:	80 f9 01             	cmp    cl,0x1
c00185ef:	0f 86 9a 01 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f5:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00185fa:	80 fa 0d             	cmp    dl,0xd
c00185fd:	0f 84 8c 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018603:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018608:	80 fa 0e             	cmp    dl,0xe
c001860b:	0f 84 7e 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018611:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018616:	80 fa 0f             	cmp    dl,0xf
c0018619:	0f 84 70 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861f:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018624:	80 fa 15             	cmp    dl,0x15
c0018627:	0f 84 62 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018630:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018635:	80 f9 01             	cmp    cl,0x1
c0018638:	0f 86 51 01 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863e:	80 fa 1a             	cmp    dl,0x1a
c0018641:	0f 84 37 01 00 00    	je     c001877e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018647:	80 fa 1c             	cmp    dl,0x1c
c001864a:	0f 84 34 01 00 00    	je     c0018784 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018650:	80 fa 1d             	cmp    dl,0x1d
c0018653:	0f 84 36 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018659:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c001865e:	80 fa 25             	cmp    dl,0x25
c0018661:	0f 84 28 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018667:	8d 4a da             	lea    ecx,[edx-0x26]
c001866a:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001866f:	80 f9 01             	cmp    cl,0x1
c0018672:	0f 86 17 01 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018678:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c001867d:	80 fa 2a             	cmp    dl,0x2a
c0018680:	0f 84 09 01 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018686:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c001868b:	80 fa 2c             	cmp    dl,0x2c
c001868e:	0f 84 fb 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018694:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c0018699:	80 fa 2d             	cmp    dl,0x2d
c001869c:	0f 84 ed 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a2:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c00186a7:	80 fa 2e             	cmp    dl,0x2e
c00186aa:	0f 84 df 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b0:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00186b5:	80 fa 2f             	cmp    dl,0x2f
c00186b8:	0f 84 d1 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186be:	8d 4a cb             	lea    ecx,[edx-0x35]
c00186c1:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c00186c6:	80 f9 01             	cmp    cl,0x1
c00186c9:	0f 86 c0 00 00 00    	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cf:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00186d4:	80 fa 37             	cmp    dl,0x37
c00186d7:	0f 84 b2 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186dd:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00186e2:	80 fa 3a             	cmp    dl,0x3a
c00186e5:	0f 84 a4 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186eb:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00186f0:	80 fa 3c             	cmp    dl,0x3c
c00186f3:	0f 84 96 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f9:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00186fe:	80 fa 3d             	cmp    dl,0x3d
c0018701:	0f 84 88 00 00 00    	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018707:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c001870c:	80 fa 3e             	cmp    dl,0x3e
c001870f:	74 7e                	je     c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018711:	8d 42 bb             	lea    eax,[edx-0x45]
c0018714:	3c 01                	cmp    al,0x1
c0018716:	76 72                	jbe    c001878a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018718:	80 fa 3f             	cmp    dl,0x3f
c001871b:	74 6d                	je     c001878a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001871d:	80 fa 4a             	cmp    dl,0x4a
c0018720:	74 0a                	je     c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018722:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018727:	80 fa 4d             	cmp    dl,0x4d
c001872a:	75 63                	jne    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872c:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c0018731:	c3                   	ret    
c0018732:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018737:	80 f9 0b             	cmp    cl,0xb
c001873a:	75 0a                	jne    c0018746 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001873c:	fe ca                	dec    dl
c001873e:	75 4f                	jne    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018740:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018745:	c3                   	ret    
c0018746:	80 f9 0f             	cmp    cl,0xf
c0018749:	75 44                	jne    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874b:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018750:	80 fa 02             	cmp    dl,0x2
c0018753:	76 3a                	jbe    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018755:	8d 42 fd             	lea    eax,[edx-0x3]
c0018758:	3c 01                	cmp    al,0x1
c001875a:	76 0a                	jbe    c0018766 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001875c:	b8 81 b5 02 c0       	mov    eax,0xc002b581
c0018761:	80 fa 06             	cmp    dl,0x6
c0018764:	75 29                	jne    c001878f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018766:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c001876b:	c3                   	ret    
c001876c:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018771:	c3                   	ret    
c0018772:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018777:	c3                   	ret    
c0018778:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001877d:	c3                   	ret    
c001877e:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c0018783:	c3                   	ret    
c0018784:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c0018789:	c3                   	ret    
c001878a:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001878f:	c3                   	ret    

c0018790 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018790:	60                   	pusha  
c0018791:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018795:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018799:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001879d:	9c                   	pushf  
c001879e:	fa                   	cli    
c001879f:	0f 09                	wbinvd 
c00187a1:	0f 30                	wrmsr  
c00187a3:	9d                   	popf   
c00187a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187a8:	89 02                	mov    DWORD PTR [edx],eax
c00187aa:	61                   	popa   
c00187ab:	c3                   	ret    

c00187ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00187ac:	60                   	pusha  
c00187ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187b1:	9c                   	pushf  
c00187b2:	fa                   	cli    
c00187b3:	0f 09                	wbinvd 
c00187b5:	31 c0                	xor    eax,eax
c00187b7:	31 d2                	xor    edx,edx
c00187b9:	0f 32                	rdmsr  
c00187bb:	9d                   	popf   
c00187bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187c0:	89 02                	mov    DWORD PTR [edx],eax
c00187c2:	61                   	popa   
c00187c3:	c3                   	ret    

c00187c4 <CPU::AMD_K6_writeback(int, int, int)>:
c00187c4:	56                   	push   esi
c00187c5:	53                   	push   ebx
c00187c6:	83 ec 10             	sub    esp,0x10
c00187c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187cd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00187d2:	75 5d                	jne    c0018831 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187d4:	83 f8 08             	cmp    eax,0x8
c00187d7:	75 09                	jne    c00187e2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00187d9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00187de:	7e 13                	jle    c00187f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187e0:	eb 30                	jmp    c0018812 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187e2:	83 f8 06             	cmp    eax,0x6
c00187e5:	7c 4a                	jl     c0018831 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187e7:	83 f8 07             	cmp    eax,0x7
c00187ea:	7e 07                	jle    c00187f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187ec:	83 f8 09             	cmp    eax,0x9
c00187ef:	74 21                	je     c0018812 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187f1:	eb 3e                	jmp    c0018831 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187f3:	89 e6                	mov    esi,esp
c00187f5:	8b 1d a8 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002daa8
c00187fb:	56                   	push   esi
c00187fc:	c1 eb 15             	shr    ebx,0x15
c00187ff:	68 82 00 00 c0       	push   0xc0000082
c0018804:	83 e3 7e             	and    ebx,0x7e
c0018807:	e8 a0 ff ff ff       	call   c00187ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001880c:	56                   	push   esi
c001880d:	6a 00                	push   0x0
c001880f:	53                   	push   ebx
c0018810:	eb 12                	jmp    c0018824 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018812:	89 e3                	mov    ebx,esp
c0018814:	53                   	push   ebx
c0018815:	68 82 00 00 c0       	push   0xc0000082
c001881a:	e8 8d ff ff ff       	call   c00187ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001881f:	53                   	push   ebx
c0018820:	6a 00                	push   0x0
c0018822:	6a 00                	push   0x0
c0018824:	68 82 00 00 c0       	push   0xc0000082
c0018829:	e8 62 ff ff ff       	call   c0018790 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001882e:	83 c4 18             	add    esp,0x18
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	5b                   	pop    ebx
c0018835:	5e                   	pop    esi
c0018836:	c3                   	ret    
c0018837:	90                   	nop

c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018838:	55                   	push   ebp
c0018839:	57                   	push   edi
c001883a:	56                   	push   esi
c001883b:	53                   	push   ebx
c001883c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018840:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018848:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001884c:	39 05 80 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf80,eax
c0018852:	75 23                	jne    c0018877 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018854:	a1 8c 05 03 c0       	mov    eax,ds:0xc003058c
c0018859:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001885d:	89 06                	mov    DWORD PTR [esi],eax
c001885f:	a1 88 05 03 c0       	mov    eax,ds:0xc0030588
c0018864:	89 07                	mov    DWORD PTR [edi],eax
c0018866:	a1 84 05 03 c0       	mov    eax,ds:0xc0030584
c001886b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001886e:	a1 80 05 03 c0       	mov    eax,ds:0xc0030580
c0018873:	89 02                	mov    DWORD PTR [edx],eax
c0018875:	eb 3f                	jmp    c00188b6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018877:	31 c9                	xor    ecx,ecx
c0018879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001887d:	0f a2                	cpuid  
c001887f:	89 06                	mov    DWORD PTR [esi],eax
c0018881:	89 1f                	mov    DWORD PTR [edi],ebx
c0018883:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018887:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001888a:	89 10                	mov    DWORD PTR [eax],edx
c001888c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018890:	a3 80 cf 02 c0       	mov    ds:0xc002cf80,eax
c0018895:	8b 06                	mov    eax,DWORD PTR [esi]
c0018897:	a3 8c 05 03 c0       	mov    ds:0xc003058c,eax
c001889c:	8b 07                	mov    eax,DWORD PTR [edi]
c001889e:	a3 88 05 03 c0       	mov    ds:0xc0030588,eax
c00188a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188a6:	a3 84 05 03 c0       	mov    ds:0xc0030584,eax
c00188ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188af:	8b 00                	mov    eax,DWORD PTR [eax]
c00188b1:	a3 80 05 03 c0       	mov    ds:0xc0030580,eax
c00188b6:	5b                   	pop    ebx
c00188b7:	5e                   	pop    esi
c00188b8:	5f                   	pop    edi
c00188b9:	5d                   	pop    ebp
c00188ba:	c3                   	ret    
c00188bb:	90                   	nop

c00188bc <CPU::cpuidCheckEDX(unsigned int)>:
c00188bc:	83 ec 10             	sub    esp,0x10
c00188bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c3:	50                   	push   eax
c00188c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c8:	50                   	push   eax
c00188c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188cd:	50                   	push   eax
c00188ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188d2:	50                   	push   eax
c00188d3:	6a 01                	push   0x1
c00188d5:	e8 5e ff ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188de:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188e2:	0f 95 c0             	setne  al
c00188e5:	83 c4 24             	add    esp,0x24
c00188e8:	c3                   	ret    
c00188e9:	90                   	nop

c00188ea <CPU::cpuidCheckECX(unsigned int)>:
c00188ea:	83 ec 10             	sub    esp,0x10
c00188ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f1:	50                   	push   eax
c00188f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f6:	50                   	push   eax
c00188f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188fb:	50                   	push   eax
c00188fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018900:	50                   	push   eax
c0018901:	6a 01                	push   0x1
c0018903:	e8 30 ff ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018908:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001890c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018910:	0f 95 c0             	setne  al
c0018913:	83 c4 24             	add    esp,0x24
c0018916:	c3                   	ret    
c0018917:	90                   	nop

c0018918 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018918:	83 ec 10             	sub    esp,0x10
c001891b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891f:	50                   	push   eax
c0018920:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018924:	50                   	push   eax
c0018925:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018929:	50                   	push   eax
c001892a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001892e:	50                   	push   eax
c001892f:	6a 07                	push   0x7
c0018931:	e8 02 ff ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018936:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001893a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001893e:	0f 95 c0             	setne  al
c0018941:	83 c4 24             	add    esp,0x24
c0018944:	c3                   	ret    
c0018945:	90                   	nop

c0018946 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018946:	83 ec 10             	sub    esp,0x10
c0018949:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001894d:	50                   	push   eax
c001894e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018952:	50                   	push   eax
c0018953:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018957:	50                   	push   eax
c0018958:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001895c:	50                   	push   eax
c001895d:	6a 07                	push   0x7
c001895f:	e8 d4 fe ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018964:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018968:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001896c:	0f 95 c0             	setne  al
c001896f:	83 c4 24             	add    esp,0x24
c0018972:	c3                   	ret    
c0018973:	90                   	nop

c0018974 <CPU::CPU()>:
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897b:	83 ec 08             	sub    esp,0x8
c001897e:	68 81 b5 02 c0       	push   0xc002b581
c0018983:	50                   	push   eax
c0018984:	e8 13 b4 ff ff       	call   c0013d9c <Device::Device(char const*)>
c0018989:	83 c4 10             	add    esp,0x10
c001898c:	ba 58 b6 02 c0       	mov    edx,0xc002b658
c0018991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018995:	89 10                	mov    DWORD PTR [eax],edx
c0018997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001899b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00189a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189a9:	05 78 01 00 00       	add    eax,0x178
c00189ae:	83 ec 0c             	sub    esp,0xc
c00189b1:	50                   	push   eax
c00189b2:	e8 15 64 ff ff       	call   c000edcc <GDT::GDT()>
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189be:	05 7c 09 00 00       	add    eax,0x97c
c00189c3:	83 ec 0c             	sub    esp,0xc
c00189c6:	50                   	push   eax
c00189c7:	e8 50 66 ff ff       	call   c000f01c <IDT::IDT()>
c00189cc:	83 c4 10             	add    esp,0x10
c00189cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189d3:	05 7c 11 00 00       	add    eax,0x117c
c00189d8:	83 ec 0c             	sub    esp,0xc
c00189db:	50                   	push   eax
c00189dc:	e8 83 81 ff ff       	call   c0010b64 <TSS::TSS()>
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189e8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189fd:	90                   	nop
c00189fe:	83 c4 0c             	add    esp,0xc
c0018a01:	c3                   	ret    

c0018a02 <CPU::displayFeatures()>:
c0018a02:	c3                   	ret    
c0018a03:	90                   	nop

c0018a04 <CPU::detectFeatures()>:
c0018a04:	55                   	push   ebp
c0018a05:	57                   	push   edi
c0018a06:	56                   	push   esi
c0018a07:	53                   	push   ebx
c0018a08:	83 ec 50             	sub    esp,0x50
c0018a0b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018a0f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018a19:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018a20:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018a26:	6a 0d                	push   0xd
c0018a28:	6a 00                	push   0x0
c0018a2a:	55                   	push   ebp
c0018a2b:	e8 20 7d fe ff       	call   c0000750 <memset>
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0018a38:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018a3f:	0f 84 22 09 00 00    	je     c0019367 <CPU::detectFeatures()+0x963>
c0018a45:	83 ec 0c             	sub    esp,0xc
c0018a48:	89 ef                	mov    edi,ebp
c0018a4a:	6a 10                	push   0x10
c0018a4c:	e8 6b fe ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018a51:	83 e0 01             	and    eax,0x1
c0018a54:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a57:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a5d:	83 e0 fd             	and    eax,0xfffffffd
c0018a60:	09 d0                	or     eax,edx
c0018a62:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a68:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018a6f:	e8 48 fe ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018a74:	83 e0 01             	and    eax,0x1
c0018a77:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018a7e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a84:	83 e0 fb             	and    eax,0xfffffffb
c0018a87:	09 d0                	or     eax,edx
c0018a89:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a8f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018a96:	e8 21 fe ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018a9b:	83 e0 01             	and    eax,0x1
c0018a9e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018aa5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018aab:	83 e0 f7             	and    eax,0xfffffff7
c0018aae:	09 d0                	or     eax,edx
c0018ab0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ab6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018abd:	e8 fa fd ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018ac2:	83 e0 01             	and    eax,0x1
c0018ac5:	c1 e0 04             	shl    eax,0x4
c0018ac8:	88 c2                	mov    dl,al
c0018aca:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ad0:	83 e0 ef             	and    eax,0xffffffef
c0018ad3:	09 d0                	or     eax,edx
c0018ad5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018adb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ae2:	e8 d5 fd ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018ae7:	83 e0 01             	and    eax,0x1
c0018aea:	c1 e0 05             	shl    eax,0x5
c0018aed:	88 c2                	mov    dl,al
c0018aef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018af5:	83 e0 df             	and    eax,0xffffffdf
c0018af8:	09 d0                	or     eax,edx
c0018afa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b00:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018b07:	e8 b0 fd ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018b0c:	83 e0 01             	and    eax,0x1
c0018b0f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b12:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018b18:	83 e0 fd             	and    eax,0xfffffffd
c0018b1b:	09 d0                	or     eax,edx
c0018b1d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018b23:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018b2a:	e8 8d fd ff ff       	call   c00188bc <CPU::cpuidCheckEDX(unsigned int)>
c0018b2f:	83 e0 01             	and    eax,0x1
c0018b32:	c1 e0 06             	shl    eax,0x6
c0018b35:	88 c2                	mov    dl,al
c0018b37:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b3d:	83 e0 bf             	and    eax,0xffffffbf
c0018b40:	09 d0                	or     eax,edx
c0018b42:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b48:	58                   	pop    eax
c0018b49:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b4d:	50                   	push   eax
c0018b4e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b52:	50                   	push   eax
c0018b53:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018b57:	56                   	push   esi
c0018b58:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b5c:	50                   	push   eax
c0018b5d:	6a 00                	push   0x0
c0018b5f:	e8 d4 fc ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b64:	b8 04 00 00 00       	mov    eax,0x4
c0018b69:	89 c1                	mov    ecx,eax
c0018b6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b6d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018b73:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018b77:	89 c1                	mov    ecx,eax
c0018b79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b7b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018b81:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018b85:	89 c1                	mov    ecx,eax
c0018b87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b89:	83 c4 18             	add    esp,0x18
c0018b8c:	68 2c b4 02 c0       	push   0xc002b42c
c0018b91:	55                   	push   ebp
c0018b92:	e8 01 7d fe ff       	call   c0000898 <strcmp>
c0018b97:	83 c4 10             	add    esp,0x10
c0018b9a:	85 c0                	test   eax,eax
c0018b9c:	75 0f                	jne    c0018bad <CPU::detectFeatures()+0x1a9>
c0018b9e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018ba8:	e9 22 02 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018bad:	50                   	push   eax
c0018bae:	50                   	push   eax
c0018baf:	68 39 b4 02 c0       	push   0xc002b439
c0018bb4:	55                   	push   ebp
c0018bb5:	e8 de 7c fe ff       	call   c0000898 <strcmp>
c0018bba:	83 c4 10             	add    esp,0x10
c0018bbd:	85 c0                	test   eax,eax
c0018bbf:	74 dd                	je     c0018b9e <CPU::detectFeatures()+0x19a>
c0018bc1:	50                   	push   eax
c0018bc2:	50                   	push   eax
c0018bc3:	68 46 b4 02 c0       	push   0xc002b446
c0018bc8:	55                   	push   ebp
c0018bc9:	e8 ca 7c fe ff       	call   c0000898 <strcmp>
c0018bce:	83 c4 10             	add    esp,0x10
c0018bd1:	85 c0                	test   eax,eax
c0018bd3:	74 2a                	je     c0018bff <CPU::detectFeatures()+0x1fb>
c0018bd5:	50                   	push   eax
c0018bd6:	50                   	push   eax
c0018bd7:	68 53 b4 02 c0       	push   0xc002b453
c0018bdc:	55                   	push   ebp
c0018bdd:	e8 b6 7c fe ff       	call   c0000898 <strcmp>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	85 c0                	test   eax,eax
c0018be7:	74 16                	je     c0018bff <CPU::detectFeatures()+0x1fb>
c0018be9:	50                   	push   eax
c0018bea:	50                   	push   eax
c0018beb:	68 60 b4 02 c0       	push   0xc002b460
c0018bf0:	55                   	push   ebp
c0018bf1:	e8 a2 7c fe ff       	call   c0000898 <strcmp>
c0018bf6:	83 c4 10             	add    esp,0x10
c0018bf9:	85 c0                	test   eax,eax
c0018bfb:	74 48                	je     c0018c45 <CPU::detectFeatures()+0x241>
c0018bfd:	eb 0f                	jmp    c0018c0e <CPU::detectFeatures()+0x20a>
c0018bff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018c09:	e9 c1 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018c0e:	50                   	push   eax
c0018c0f:	50                   	push   eax
c0018c10:	68 6d b4 02 c0       	push   0xc002b46d
c0018c15:	55                   	push   ebp
c0018c16:	e8 7d 7c fe ff       	call   c0000898 <strcmp>
c0018c1b:	83 c4 10             	add    esp,0x10
c0018c1e:	85 c0                	test   eax,eax
c0018c20:	74 23                	je     c0018c45 <CPU::detectFeatures()+0x241>
c0018c22:	57                   	push   edi
c0018c23:	57                   	push   edi
c0018c24:	68 7a b4 02 c0       	push   0xc002b47a
c0018c29:	55                   	push   ebp
c0018c2a:	e8 69 7c fe ff       	call   c0000898 <strcmp>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	85 c0                	test   eax,eax
c0018c34:	75 1e                	jne    c0018c54 <CPU::detectFeatures()+0x250>
c0018c36:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018c40:	e9 8a 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018c45:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018c4f:	e9 7b 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018c54:	56                   	push   esi
c0018c55:	56                   	push   esi
c0018c56:	68 87 b4 02 c0       	push   0xc002b487
c0018c5b:	55                   	push   ebp
c0018c5c:	e8 37 7c fe ff       	call   c0000898 <strcmp>
c0018c61:	83 c4 10             	add    esp,0x10
c0018c64:	85 c0                	test   eax,eax
c0018c66:	75 0f                	jne    c0018c77 <CPU::detectFeatures()+0x273>
c0018c68:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018c72:	e9 58 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018c77:	51                   	push   ecx
c0018c78:	51                   	push   ecx
c0018c79:	68 46 b4 02 c0       	push   0xc002b446
c0018c7e:	55                   	push   ebp
c0018c7f:	e8 14 7c fe ff       	call   c0000898 <strcmp>
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	85 c0                	test   eax,eax
c0018c89:	75 0f                	jne    c0018c9a <CPU::detectFeatures()+0x296>
c0018c8b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018c95:	e9 35 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018c9a:	52                   	push   edx
c0018c9b:	52                   	push   edx
c0018c9c:	68 94 b4 02 c0       	push   0xc002b494
c0018ca1:	55                   	push   ebp
c0018ca2:	e8 f1 7b fe ff       	call   c0000898 <strcmp>
c0018ca7:	83 c4 10             	add    esp,0x10
c0018caa:	85 c0                	test   eax,eax
c0018cac:	75 0f                	jne    c0018cbd <CPU::detectFeatures()+0x2b9>
c0018cae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018cb8:	e9 12 01 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018cbd:	50                   	push   eax
c0018cbe:	50                   	push   eax
c0018cbf:	68 a1 b4 02 c0       	push   0xc002b4a1
c0018cc4:	55                   	push   ebp
c0018cc5:	e8 ce 7b fe ff       	call   c0000898 <strcmp>
c0018cca:	83 c4 10             	add    esp,0x10
c0018ccd:	85 c0                	test   eax,eax
c0018ccf:	75 0f                	jne    c0018ce0 <CPU::detectFeatures()+0x2dc>
c0018cd1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018cdb:	e9 ef 00 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018ce0:	50                   	push   eax
c0018ce1:	50                   	push   eax
c0018ce2:	68 ae b4 02 c0       	push   0xc002b4ae
c0018ce7:	55                   	push   ebp
c0018ce8:	e8 ab 7b fe ff       	call   c0000898 <strcmp>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	85 c0                	test   eax,eax
c0018cf2:	75 0f                	jne    c0018d03 <CPU::detectFeatures()+0x2ff>
c0018cf4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018cfe:	e9 cc 00 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018d03:	50                   	push   eax
c0018d04:	50                   	push   eax
c0018d05:	68 bb b4 02 c0       	push   0xc002b4bb
c0018d0a:	55                   	push   ebp
c0018d0b:	e8 88 7b fe ff       	call   c0000898 <strcmp>
c0018d10:	83 c4 10             	add    esp,0x10
c0018d13:	85 c0                	test   eax,eax
c0018d15:	75 0f                	jne    c0018d26 <CPU::detectFeatures()+0x322>
c0018d17:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018d21:	e9 a9 00 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018d26:	50                   	push   eax
c0018d27:	50                   	push   eax
c0018d28:	68 c8 b4 02 c0       	push   0xc002b4c8
c0018d2d:	55                   	push   ebp
c0018d2e:	e8 65 7b fe ff       	call   c0000898 <strcmp>
c0018d33:	83 c4 10             	add    esp,0x10
c0018d36:	85 c0                	test   eax,eax
c0018d38:	75 0f                	jne    c0018d49 <CPU::detectFeatures()+0x345>
c0018d3a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018d44:	e9 86 00 00 00       	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018d49:	50                   	push   eax
c0018d4a:	50                   	push   eax
c0018d4b:	68 d5 b4 02 c0       	push   0xc002b4d5
c0018d50:	55                   	push   ebp
c0018d51:	e8 42 7b fe ff       	call   c0000898 <strcmp>
c0018d56:	83 c4 10             	add    esp,0x10
c0018d59:	85 c0                	test   eax,eax
c0018d5b:	75 0c                	jne    c0018d69 <CPU::detectFeatures()+0x365>
c0018d5d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018d67:	eb 66                	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018d69:	50                   	push   eax
c0018d6a:	50                   	push   eax
c0018d6b:	68 e2 b4 02 c0       	push   0xc002b4e2
c0018d70:	55                   	push   ebp
c0018d71:	e8 22 7b fe ff       	call   c0000898 <strcmp>
c0018d76:	83 c4 10             	add    esp,0x10
c0018d79:	85 c0                	test   eax,eax
c0018d7b:	75 0c                	jne    c0018d89 <CPU::detectFeatures()+0x385>
c0018d7d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018d87:	eb 46                	jmp    c0018dcf <CPU::detectFeatures()+0x3cb>
c0018d89:	57                   	push   edi
c0018d8a:	57                   	push   edi
c0018d8b:	68 ef b4 02 c0       	push   0xc002b4ef
c0018d90:	55                   	push   ebp
c0018d91:	e8 02 7b fe ff       	call   c0000898 <strcmp>
c0018d96:	83 c4 10             	add    esp,0x10
c0018d99:	85 c0                	test   eax,eax
c0018d9b:	74 e0                	je     c0018d7d <CPU::detectFeatures()+0x379>
c0018d9d:	56                   	push   esi
c0018d9e:	56                   	push   esi
c0018d9f:	68 fc b4 02 c0       	push   0xc002b4fc
c0018da4:	55                   	push   ebp
c0018da5:	e8 ee 7a fe ff       	call   c0000898 <strcmp>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	85 c0                	test   eax,eax
c0018daf:	74 cc                	je     c0018d7d <CPU::detectFeatures()+0x379>
c0018db1:	51                   	push   ecx
c0018db2:	51                   	push   ecx
c0018db3:	68 09 b5 02 c0       	push   0xc002b509
c0018db8:	55                   	push   ebp
c0018db9:	e8 da 7a fe ff       	call   c0000898 <strcmp>
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	85 c0                	test   eax,eax
c0018dc3:	74 b8                	je     c0018d7d <CPU::detectFeatures()+0x379>
c0018dc5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018dcf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018dd4:	0f 86 be 00 00 00    	jbe    c0018e98 <CPU::detectFeatures()+0x494>
c0018dda:	83 ec 0c             	sub    esp,0xc
c0018ddd:	68 80 00 00 00       	push   0x80
c0018de2:	e8 31 fb ff ff       	call   c0018918 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018de7:	83 e0 01             	and    eax,0x1
c0018dea:	c1 e0 06             	shl    eax,0x6
c0018ded:	88 c2                	mov    dl,al
c0018def:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018df5:	83 e0 bf             	and    eax,0xffffffbf
c0018df8:	09 d0                	or     eax,edx
c0018dfa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e00:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018e07:	e8 0c fb ff ff       	call   c0018918 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e0c:	83 e0 01             	and    eax,0x1
c0018e0f:	c1 e0 04             	shl    eax,0x4
c0018e12:	88 c2                	mov    dl,al
c0018e14:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e1a:	83 e0 ef             	and    eax,0xffffffef
c0018e1d:	09 d0                	or     eax,edx
c0018e1f:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e25:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018e2c:	e8 e7 fa ff ff       	call   c0018918 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e31:	c1 e0 07             	shl    eax,0x7
c0018e34:	88 c2                	mov    dl,al
c0018e36:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e3c:	83 e0 7f             	and    eax,0x7f
c0018e3f:	09 d0                	or     eax,edx
c0018e41:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e47:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e4e:	e8 f3 fa ff ff       	call   c0018946 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e53:	83 e0 01             	and    eax,0x1
c0018e56:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e5d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e63:	83 e0 f7             	and    eax,0xfffffff7
c0018e66:	09 d0                	or     eax,edx
c0018e68:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e6e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018e75:	e8 cc fa ff ff       	call   c0018946 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e7a:	83 c4 10             	add    esp,0x10
c0018e7d:	83 e0 01             	and    eax,0x1
c0018e80:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e87:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018e8d:	83 e0 fb             	and    eax,0xfffffffb
c0018e90:	09 d0                	or     eax,edx
c0018e92:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018e98:	83 ec 0c             	sub    esp,0xc
c0018e9b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e9f:	50                   	push   eax
c0018ea0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ea4:	50                   	push   eax
c0018ea5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ea9:	56                   	push   esi
c0018eaa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018eae:	50                   	push   eax
c0018eaf:	6a 01                	push   0x1
c0018eb1:	e8 82 f9 ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018eb6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018eba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018ec0:	88 ca                	mov    dl,cl
c0018ec2:	83 e0 f0             	and    eax,0xfffffff0
c0018ec5:	83 e2 0f             	and    edx,0xf
c0018ec8:	09 d0                	or     eax,edx
c0018eca:	88 ca                	mov    dl,cl
c0018ecc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018ed2:	c0 ea 04             	shr    dl,0x4
c0018ed5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018ed9:	0f b6 c2             	movzx  eax,dl
c0018edc:	83 c4 20             	add    esp,0x20
c0018edf:	c1 e0 06             	shl    eax,0x6
c0018ee2:	89 c7                	mov    edi,eax
c0018ee4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eea:	66 25 3f c0          	and    ax,0xc03f
c0018eee:	09 f8                	or     eax,edi
c0018ef0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018ef7:	89 c8                	mov    eax,ecx
c0018ef9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018f00:	c1 e8 08             	shr    eax,0x8
c0018f03:	83 e5 3f             	and    ebp,0x3f
c0018f06:	83 e0 0f             	and    eax,0xf
c0018f09:	89 c7                	mov    edi,eax
c0018f0b:	c1 e7 06             	shl    edi,0x6
c0018f0e:	09 ef                	or     edi,ebp
c0018f10:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018f17:	89 fa                	mov    edx,edi
c0018f19:	83 e5 c0             	and    ebp,0xffffffc0
c0018f1c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018f22:	88 c2                	mov    dl,al
c0018f24:	c0 ea 02             	shr    dl,0x2
c0018f27:	89 d7                	mov    edi,edx
c0018f29:	09 ef                	or     edi,ebp
c0018f2b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018f31:	89 fa                	mov    edx,edi
c0018f33:	83 e5 cf             	and    ebp,0xffffffcf
c0018f36:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018f3c:	89 cf                	mov    edi,ecx
c0018f3e:	c1 ef 0c             	shr    edi,0xc
c0018f41:	83 e7 03             	and    edi,0x3
c0018f44:	c1 e7 04             	shl    edi,0x4
c0018f47:	09 ef                	or     edi,ebp
c0018f49:	3c 06                	cmp    al,0x6
c0018f4b:	89 fa                	mov    edx,edi
c0018f4d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018f53:	74 04                	je     c0018f59 <CPU::detectFeatures()+0x555>
c0018f55:	3c 0f                	cmp    al,0xf
c0018f57:	75 5c                	jne    c0018fb5 <CPU::detectFeatures()+0x5b1>
c0018f59:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f5d:	89 cf                	mov    edi,ecx
c0018f5f:	c1 ef 10             	shr    edi,0x10
c0018f62:	c1 e7 04             	shl    edi,0x4
c0018f65:	09 fa                	or     edx,edi
c0018f67:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018f6d:	0f b6 d2             	movzx  edx,dl
c0018f70:	66 81 e7 3f c0       	and    di,0xc03f
c0018f75:	c1 e2 06             	shl    edx,0x6
c0018f78:	09 fa                	or     edx,edi
c0018f7a:	3c 0f                	cmp    al,0xf
c0018f7c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018f83:	75 30                	jne    c0018fb5 <CPU::detectFeatures()+0x5b1>
c0018f85:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018f8b:	c1 e9 14             	shr    ecx,0x14
c0018f8e:	83 e0 3f             	and    eax,0x3f
c0018f91:	83 c1 0f             	add    ecx,0xf
c0018f94:	88 ca                	mov    dl,cl
c0018f96:	c0 e9 02             	shr    cl,0x2
c0018f99:	c1 e2 06             	shl    edx,0x6
c0018f9c:	09 d0                	or     eax,edx
c0018f9e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018fa4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018faa:	83 e0 c0             	and    eax,0xffffffc0
c0018fad:	09 c1                	or     ecx,eax
c0018faf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018fb5:	83 ec 0c             	sub    esp,0xc
c0018fb8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018fbf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fc3:	50                   	push   eax
c0018fc4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018fc8:	55                   	push   ebp
c0018fc9:	56                   	push   esi
c0018fca:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018fce:	57                   	push   edi
c0018fcf:	68 00 00 00 80       	push   0x80000000
c0018fd4:	e8 5f f8 ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fd9:	83 c4 20             	add    esp,0x20
c0018fdc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018fe4:	76 22                	jbe    c0019008 <CPU::detectFeatures()+0x604>
c0018fe6:	83 ec 0c             	sub    esp,0xc
c0018fe9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018fed:	50                   	push   eax
c0018fee:	55                   	push   ebp
c0018fef:	56                   	push   esi
c0018ff0:	57                   	push   edi
c0018ff1:	68 01 00 00 80       	push   0x80000001
c0018ff6:	e8 3d f8 ff ff       	call   c0018838 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ffb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019005:	83 c4 20             	add    esp,0x20
c0019008:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001900e:	83 f8 01             	cmp    eax,0x1
c0019011:	75 6f                	jne    c0019082 <CPU::detectFeatures()+0x67e>
c0019013:	51                   	push   ecx
c0019014:	51                   	push   ecx
c0019015:	68 15 b5 02 c0       	push   0xc002b515
c001901a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001901e:	56                   	push   esi
c001901f:	e8 e8 77 fe ff       	call   c000080c <strcpy>
c0019024:	5f                   	pop    edi
c0019025:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001902b:	5d                   	pop    ebp
c001902c:	66 c1 e8 06          	shr    ax,0x6
c0019030:	0f b6 c0             	movzx  eax,al
c0019033:	50                   	push   eax
c0019034:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001903a:	c1 e8 0e             	shr    eax,0xe
c001903d:	0f b6 c0             	movzx  eax,al
c0019040:	50                   	push   eax
c0019041:	e8 9c f4 ff ff       	call   c00184e2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019046:	5a                   	pop    edx
c0019047:	59                   	pop    ecx
c0019048:	50                   	push   eax
c0019049:	56                   	push   esi
c001904a:	e8 fd 78 fe ff       	call   c000094c <strcat>
c001904f:	5f                   	pop    edi
c0019050:	5d                   	pop    ebp
c0019051:	56                   	push   esi
c0019052:	53                   	push   ebx
c0019053:	e8 36 ad ff ff       	call   c0013d8e <Device::setName(char const*)>
c0019058:	58                   	pop    eax
c0019059:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001905f:	5a                   	pop    edx
c0019060:	68 1c b5 02 c0       	push   0xc002b51c
c0019065:	50                   	push   eax
c0019066:	e8 2d 78 fe ff       	call   c0000898 <strcmp>
c001906b:	83 c4 10             	add    esp,0x10
c001906e:	85 c0                	test   eax,eax
c0019070:	0f 85 71 03 00 00    	jne    c00193e7 <CPU::detectFeatures()+0x9e3>
c0019076:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001907d:	e9 65 03 00 00       	jmp    c00193e7 <CPU::detectFeatures()+0x9e3>
c0019082:	83 f8 02             	cmp    eax,0x2
c0019085:	0f 85 b5 00 00 00    	jne    c0019140 <CPU::detectFeatures()+0x73c>
c001908b:	57                   	push   edi
c001908c:	57                   	push   edi
c001908d:	68 2e b5 02 c0       	push   0xc002b52e
c0019092:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019096:	56                   	push   esi
c0019097:	e8 70 77 fe ff       	call   c000080c <strcpy>
c001909c:	5d                   	pop    ebp
c001909d:	58                   	pop    eax
c001909e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190a4:	66 c1 e8 06          	shr    ax,0x6
c00190a8:	0f b6 c0             	movzx  eax,al
c00190ab:	50                   	push   eax
c00190ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190b2:	c1 e8 0e             	shr    eax,0xe
c00190b5:	0f b6 c0             	movzx  eax,al
c00190b8:	50                   	push   eax
c00190b9:	e8 90 f2 ff ff       	call   c001834e <CPU::lookupAMDName(unsigned char, unsigned char)>
c00190be:	5a                   	pop    edx
c00190bf:	59                   	pop    ecx
c00190c0:	50                   	push   eax
c00190c1:	56                   	push   esi
c00190c2:	e8 85 78 fe ff       	call   c000094c <strcat>
c00190c7:	5f                   	pop    edi
c00190c8:	5d                   	pop    ebp
c00190c9:	56                   	push   esi
c00190ca:	53                   	push   ebx
c00190cb:	e8 be ac ff ff       	call   c0013d8e <Device::setName(char const*)>
c00190d0:	58                   	pop    eax
c00190d1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00190d7:	5a                   	pop    edx
c00190d8:	68 33 b5 02 c0       	push   0xc002b533
c00190dd:	50                   	push   eax
c00190de:	e8 b5 77 fe ff       	call   c0000898 <strcmp>
c00190e3:	83 c4 10             	add    esp,0x10
c00190e6:	85 c0                	test   eax,eax
c00190e8:	75 20                	jne    c001910a <CPU::detectFeatures()+0x706>
c00190ea:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c00190f0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00190f6:	a8 01                	test   al,0x1
c00190f8:	74 10                	je     c001910a <CPU::detectFeatures()+0x706>
c00190fa:	83 e0 fe             	and    eax,0xfffffffe
c00190fd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019103:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001910a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019110:	c1 e8 0e             	shr    eax,0xe
c0019113:	3c 05                	cmp    al,0x5
c0019115:	0f 85 cc 02 00 00    	jne    c00193e7 <CPU::detectFeatures()+0x9e3>
c001911b:	56                   	push   esi
c001911c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019122:	83 e0 0f             	and    eax,0xf
c0019125:	50                   	push   eax
c0019126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001912c:	66 c1 e8 06          	shr    ax,0x6
c0019130:	0f b6 c0             	movzx  eax,al
c0019133:	50                   	push   eax
c0019134:	6a 05                	push   0x5
c0019136:	e8 89 f6 ff ff       	call   c00187c4 <CPU::AMD_K6_writeback(int, int, int)>
c001913b:	e9 1f 02 00 00       	jmp    c001935f <CPU::detectFeatures()+0x95b>
c0019140:	8d 50 fd             	lea    edx,[eax-0x3]
c0019143:	83 fa 01             	cmp    edx,0x1
c0019146:	76 09                	jbe    c0019151 <CPU::detectFeatures()+0x74d>
c0019148:	83 f8 06             	cmp    eax,0x6
c001914b:	0f 85 91 01 00 00    	jne    c00192e2 <CPU::detectFeatures()+0x8de>
c0019151:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019157:	c1 ea 0e             	shr    edx,0xe
c001915a:	80 fa 05             	cmp    dl,0x5
c001915d:	75 7b                	jne    c00191da <CPU::detectFeatures()+0x7d6>
c001915f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019165:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001916a:	66 81 fa 00 01       	cmp    dx,0x100
c001916f:	75 0c                	jne    c001917d <CPU::detectFeatures()+0x779>
c0019171:	51                   	push   ecx
c0019172:	51                   	push   ecx
c0019173:	68 3a b5 02 c0       	push   0xc002b53a
c0019178:	e9 dc 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001917d:	66 81 fa 00 02       	cmp    dx,0x200
c0019182:	75 0c                	jne    c0019190 <CPU::detectFeatures()+0x78c>
c0019184:	52                   	push   edx
c0019185:	52                   	push   edx
c0019186:	68 4d b5 02 c0       	push   0xc002b54d
c001918b:	e9 c9 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019190:	66 81 fa 40 02       	cmp    dx,0x240
c0019195:	75 0c                	jne    c00191a3 <CPU::detectFeatures()+0x79f>
c0019197:	50                   	push   eax
c0019198:	50                   	push   eax
c0019199:	68 5f b5 02 c0       	push   0xc002b55f
c001919e:	e9 b6 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00191a3:	83 f8 06             	cmp    eax,0x6
c00191a6:	75 0c                	jne    c00191b4 <CPU::detectFeatures()+0x7b0>
c00191a8:	50                   	push   eax
c00191a9:	50                   	push   eax
c00191aa:	68 71 b5 02 c0       	push   0xc002b571
c00191af:	e9 a5 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00191b4:	83 f8 04             	cmp    eax,0x4
c00191b7:	75 0c                	jne    c00191c5 <CPU::detectFeatures()+0x7c1>
c00191b9:	50                   	push   eax
c00191ba:	50                   	push   eax
c00191bb:	68 7d b5 02 c0       	push   0xc002b57d
c00191c0:	e9 94 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00191c5:	83 f8 03             	cmp    eax,0x3
c00191c8:	0f 85 19 02 00 00    	jne    c00193e7 <CPU::detectFeatures()+0x9e3>
c00191ce:	50                   	push   eax
c00191cf:	50                   	push   eax
c00191d0:	68 85 b5 02 c0       	push   0xc002b585
c00191d5:	e9 7f 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00191da:	80 fa 06             	cmp    dl,0x6
c00191dd:	0f 85 db 00 00 00    	jne    c00192be <CPU::detectFeatures()+0x8ba>
c00191e3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00191e9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00191ee:	66 81 fa 80 01       	cmp    dx,0x180
c00191f3:	75 0c                	jne    c0019201 <CPU::detectFeatures()+0x7fd>
c00191f5:	50                   	push   eax
c00191f6:	50                   	push   eax
c00191f7:	68 90 b5 02 c0       	push   0xc002b590
c00191fc:	e9 58 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019201:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019207:	66 f7 c1 80 ff       	test   cx,0xff80
c001920c:	75 0c                	jne    c001921a <CPU::detectFeatures()+0x816>
c001920e:	50                   	push   eax
c001920f:	50                   	push   eax
c0019210:	68 a0 b5 02 c0       	push   0xc002b5a0
c0019215:	e9 3f 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001921a:	66 81 fa 40 02       	cmp    dx,0x240
c001921f:	75 0c                	jne    c001922d <CPU::detectFeatures()+0x829>
c0019221:	55                   	push   ebp
c0019222:	55                   	push   ebp
c0019223:	68 a7 b5 02 c0       	push   0xc002b5a7
c0019228:	e9 2c 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001922d:	66 81 fa 80 02       	cmp    dx,0x280
c0019232:	75 0c                	jne    c0019240 <CPU::detectFeatures()+0x83c>
c0019234:	57                   	push   edi
c0019235:	57                   	push   edi
c0019236:	68 b0 b5 02 c0       	push   0xc002b5b0
c001923b:	e9 19 01 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019240:	66 81 fa 40 03       	cmp    dx,0x340
c0019245:	74 ed                	je     c0019234 <CPU::detectFeatures()+0x830>
c0019247:	66 81 fa c0 03       	cmp    dx,0x3c0
c001924c:	75 0c                	jne    c001925a <CPU::detectFeatures()+0x856>
c001924e:	56                   	push   esi
c001924f:	56                   	push   esi
c0019250:	68 b7 b5 02 c0       	push   0xc002b5b7
c0019255:	e9 ff 00 00 00       	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001925a:	83 f8 06             	cmp    eax,0x6
c001925d:	0f 84 45 ff ff ff    	je     c00191a8 <CPU::detectFeatures()+0x7a4>
c0019263:	83 f8 04             	cmp    eax,0x4
c0019266:	0f 84 4d ff ff ff    	je     c00191b9 <CPU::detectFeatures()+0x7b5>
c001926c:	83 f8 03             	cmp    eax,0x3
c001926f:	0f 85 72 01 00 00    	jne    c00193e7 <CPU::detectFeatures()+0x9e3>
c0019275:	51                   	push   ecx
c0019276:	51                   	push   ecx
c0019277:	68 c0 b5 02 c0       	push   0xc002b5c0
c001927c:	53                   	push   ebx
c001927d:	e8 0c ab ff ff       	call   c0013d8e <Device::setName(char const*)>
c0019282:	b1 c1                	mov    cl,0xc1
c0019284:	88 c8                	mov    al,cl
c0019286:	e6 22                	out    0x22,al
c0019288:	e4 23                	in     al,0x23
c001928a:	88 c2                	mov    dl,al
c001928c:	88 c8                	mov    al,cl
c001928e:	e6 22                	out    0x22,al
c0019290:	88 d0                	mov    al,dl
c0019292:	83 c8 10             	or     eax,0x10
c0019295:	e6 23                	out    0x23,al
c0019297:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001929e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00192a1:	89 d0                	mov    eax,edx
c00192a3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00192a9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00192ad:	40                   	inc    eax
c00192ae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00192b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00192b9:	e9 a1 00 00 00       	jmp    c001935f <CPU::detectFeatures()+0x95b>
c00192be:	83 f8 06             	cmp    eax,0x6
c00192c1:	0f 84 e1 fe ff ff    	je     c00191a8 <CPU::detectFeatures()+0x7a4>
c00192c7:	83 f8 04             	cmp    eax,0x4
c00192ca:	0f 84 e9 fe ff ff    	je     c00191b9 <CPU::detectFeatures()+0x7b5>
c00192d0:	83 f8 03             	cmp    eax,0x3
c00192d3:	0f 85 0e 01 00 00    	jne    c00193e7 <CPU::detectFeatures()+0x9e3>
c00192d9:	52                   	push   edx
c00192da:	52                   	push   edx
c00192db:	68 cb b5 02 c0       	push   0xc002b5cb
c00192e0:	eb 77                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00192e2:	83 f8 07             	cmp    eax,0x7
c00192e5:	75 09                	jne    c00192f0 <CPU::detectFeatures()+0x8ec>
c00192e7:	50                   	push   eax
c00192e8:	50                   	push   eax
c00192e9:	68 d5 b5 02 c0       	push   0xc002b5d5
c00192ee:	eb 69                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00192f0:	83 f8 0a             	cmp    eax,0xa
c00192f3:	75 09                	jne    c00192fe <CPU::detectFeatures()+0x8fa>
c00192f5:	50                   	push   eax
c00192f6:	50                   	push   eax
c00192f7:	68 e0 b5 02 c0       	push   0xc002b5e0
c00192fc:	eb 5b                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c00192fe:	83 f8 0b             	cmp    eax,0xb
c0019301:	75 09                	jne    c001930c <CPU::detectFeatures()+0x908>
c0019303:	50                   	push   eax
c0019304:	50                   	push   eax
c0019305:	68 e8 b5 02 c0       	push   0xc002b5e8
c001930a:	eb 4d                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001930c:	83 f8 08             	cmp    eax,0x8
c001930f:	75 09                	jne    c001931a <CPU::detectFeatures()+0x916>
c0019311:	50                   	push   eax
c0019312:	50                   	push   eax
c0019313:	68 f1 b5 02 c0       	push   0xc002b5f1
c0019318:	eb 3f                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c001931a:	83 f8 09             	cmp    eax,0x9
c001931d:	75 09                	jne    c0019328 <CPU::detectFeatures()+0x924>
c001931f:	50                   	push   eax
c0019320:	50                   	push   eax
c0019321:	68 f9 b5 02 c0       	push   0xc002b5f9
c0019326:	eb 31                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019328:	83 f8 05             	cmp    eax,0x5
c001932b:	75 09                	jne    c0019336 <CPU::detectFeatures()+0x932>
c001932d:	50                   	push   eax
c001932e:	50                   	push   eax
c001932f:	68 01 b6 02 c0       	push   0xc002b601
c0019334:	eb 23                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019336:	83 f8 0c             	cmp    eax,0xc
c0019339:	75 09                	jne    c0019344 <CPU::detectFeatures()+0x940>
c001933b:	55                   	push   ebp
c001933c:	55                   	push   ebp
c001933d:	68 0f b6 02 c0       	push   0xc002b60f
c0019342:	eb 15                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019344:	83 f8 0d             	cmp    eax,0xd
c0019347:	75 09                	jne    c0019352 <CPU::detectFeatures()+0x94e>
c0019349:	57                   	push   edi
c001934a:	57                   	push   edi
c001934b:	68 1a b6 02 c0       	push   0xc002b61a
c0019350:	eb 07                	jmp    c0019359 <CPU::detectFeatures()+0x955>
c0019352:	56                   	push   esi
c0019353:	56                   	push   esi
c0019354:	68 2e b6 02 c0       	push   0xc002b62e
c0019359:	53                   	push   ebx
c001935a:	e8 2f aa ff ff       	call   c0013d8e <Device::setName(char const*)>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	e9 80 00 00 00       	jmp    c00193e7 <CPU::detectFeatures()+0x9e3>
c0019367:	51                   	push   ecx
c0019368:	51                   	push   ecx
c0019369:	68 7a b4 02 c0       	push   0xc002b47a
c001936e:	55                   	push   ebp
c001936f:	e8 98 74 fe ff       	call   c000080c <strcpy>
c0019374:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001937e:	e8 2b 6f fe ff       	call   c00002ae <is486>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	85 c0                	test   eax,eax
c0019388:	74 2b                	je     c00193b5 <CPU::detectFeatures()+0x9b1>
c001938a:	52                   	push   edx
c001938b:	52                   	push   edx
c001938c:	68 3a b6 02 c0       	push   0xc002b63a
c0019391:	53                   	push   ebx
c0019392:	e8 f7 a9 ff ff       	call   c0013d8e <Device::setName(char const*)>
c0019397:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001939e:	0f 20 c0             	mov    eax,cr0
c00193a1:	83 e0 14             	and    eax,0x14
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	83 f8 04             	cmp    eax,0x4
c00193aa:	75 1f                	jne    c00193cb <CPU::detectFeatures()+0x9c7>
c00193ac:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00193b3:	eb 32                	jmp    c00193e7 <CPU::detectFeatures()+0x9e3>
c00193b5:	50                   	push   eax
c00193b6:	50                   	push   eax
c00193b7:	68 45 b6 02 c0       	push   0xc002b645
c00193bc:	53                   	push   ebx
c00193bd:	e8 cc a9 ff ff       	call   c0013d8e <Device::setName(char const*)>
c00193c2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00193c9:	eb d3                	jmp    c001939e <CPU::detectFeatures()+0x99a>
c00193cb:	e8 b9 6e fe ff       	call   c0000289 <hasLegacyFPU>
c00193d0:	83 e0 01             	and    eax,0x1
c00193d3:	8d 14 00             	lea    edx,[eax+eax*1]
c00193d6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193dc:	83 e0 fd             	and    eax,0xfffffffd
c00193df:	09 d0                	or     eax,edx
c00193e1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193e7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00193ee:	83 c4 4c             	add    esp,0x4c
c00193f1:	5b                   	pop    ebx
c00193f2:	5e                   	pop    esi
c00193f3:	5f                   	pop    edi
c00193f4:	5d                   	pop    ebp
c00193f5:	c3                   	ret    

c00193f6 <CPU::setupSMEP()>:
c00193f6:	0f 20 e0             	mov    eax,cr4
c00193f9:	0d 00 00 10 00       	or     eax,0x100000
c00193fe:	0f 22 e0             	mov    cr4,eax
c0019401:	c3                   	ret    

c0019402 <CPU::setupUMIP()>:
c0019402:	0f 20 e0             	mov    eax,cr4
c0019405:	80 cc 08             	or     ah,0x8
c0019408:	0f 22 e0             	mov    cr4,eax
c001940b:	c3                   	ret    

c001940c <CPU::setupTSC()>:
c001940c:	0f 20 e0             	mov    eax,cr4
c001940f:	83 c8 04             	or     eax,0x4
c0019412:	0f 22 e0             	mov    cr4,eax
c0019415:	c3                   	ret    

c0019416 <CPU::setupLargePages()>:
c0019416:	0f 20 e0             	mov    eax,cr4
c0019419:	83 c8 10             	or     eax,0x10
c001941c:	0f 22 e0             	mov    cr4,eax
c001941f:	c3                   	ret    

c0019420 <CPU::setupPAT()>:
c0019420:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0019425:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001942c:	74 2c                	je     c001945a <CPU::setupPAT()+0x3a>
c001942e:	53                   	push   ebx
c001942f:	83 ec 10             	sub    esp,0x10
c0019432:	68 77 02 00 00       	push   0x277
c0019437:	50                   	push   eax
c0019438:	e8 03 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001943d:	83 e2 f8             	and    edx,0xfffffff8
c0019440:	83 ca 01             	or     edx,0x1
c0019443:	52                   	push   edx
c0019444:	50                   	push   eax
c0019445:	68 77 02 00 00       	push   0x277
c001944a:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c0019450:	e8 17 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019455:	83 c4 28             	add    esp,0x28
c0019458:	5b                   	pop    ebx
c0019459:	c3                   	ret    
c001945a:	c3                   	ret    
c001945b:	90                   	nop

c001945c <CPU::setupMTRR()>:
c001945c:	c3                   	ret    
c001945d:	90                   	nop

c001945e <CPU::setupGlobalPages()>:
c001945e:	0f 20 e0             	mov    eax,cr4
c0019461:	0c 80                	or     al,0x80
c0019463:	0f 22 e0             	mov    cr4,eax
c0019466:	c3                   	ret    
c0019467:	90                   	nop

c0019468 <CPU::allowUsermodeDataAccess()>:
c0019468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001946c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019473:	74 03                	je     c0019478 <CPU::allowUsermodeDataAccess()+0x10>
c0019475:	0f 01 cb             	stac   
c0019478:	c3                   	ret    
c0019479:	90                   	nop

c001947a <CPU::prohibitUsermodeDataAccess()>:
c001947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001947e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019485:	74 03                	je     c001948a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019487:	0f 01 ca             	clac   
c001948a:	c3                   	ret    
c001948b:	90                   	nop

c001948c <CPU::setupSMAP()>:
c001948c:	0f 20 e0             	mov    eax,cr4
c001948f:	0d 00 00 20 00       	or     eax,0x200000
c0019494:	0f 22 e0             	mov    cr4,eax
c0019497:	eb e1                	jmp    c001947a <CPU::prohibitUsermodeDataAccess()>
c0019499:	90                   	nop

c001949a <CPU::setupFeatures()>:
c001949a:	83 ec 0c             	sub    esp,0xc
c001949d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194a1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00194a8:	74 07                	je     c00194b1 <CPU::setupFeatures()+0x17>
c00194aa:	52                   	push   edx
c00194ab:	e8 46 ff ff ff       	call   c00193f6 <CPU::setupSMEP()>
c00194b0:	58                   	pop    eax
c00194b1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00194b8:	74 07                	je     c00194c1 <CPU::setupFeatures()+0x27>
c00194ba:	52                   	push   edx
c00194bb:	e8 cc ff ff ff       	call   c001948c <CPU::setupSMAP()>
c00194c0:	58                   	pop    eax
c00194c1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00194c8:	74 07                	je     c00194d1 <CPU::setupFeatures()+0x37>
c00194ca:	52                   	push   edx
c00194cb:	e8 32 ff ff ff       	call   c0019402 <CPU::setupUMIP()>
c00194d0:	58                   	pop    eax
c00194d1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00194d8:	74 07                	je     c00194e1 <CPU::setupFeatures()+0x47>
c00194da:	52                   	push   edx
c00194db:	e8 2c ff ff ff       	call   c001940c <CPU::setupTSC()>
c00194e0:	58                   	pop    eax
c00194e1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00194e8:	74 07                	je     c00194f1 <CPU::setupFeatures()+0x57>
c00194ea:	52                   	push   edx
c00194eb:	e8 26 ff ff ff       	call   c0019416 <CPU::setupLargePages()>
c00194f0:	59                   	pop    ecx
c00194f1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00194f8:	74 07                	je     c0019501 <CPU::setupFeatures()+0x67>
c00194fa:	52                   	push   edx
c00194fb:	e8 5e ff ff ff       	call   c001945e <CPU::setupGlobalPages()>
c0019500:	58                   	pop    eax
c0019501:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019508:	74 0c                	je     c0019516 <CPU::setupFeatures()+0x7c>
c001950a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001950e:	83 c4 0c             	add    esp,0xc
c0019511:	e9 0a ff ff ff       	jmp    c0019420 <CPU::setupPAT()>
c0019516:	83 c4 0c             	add    esp,0xc
c0019519:	c3                   	ret    

c001951a <CPU::open(int, int, void*)>:
c001951a:	57                   	push   edi
c001951b:	56                   	push   esi
c001951c:	53                   	push   ebx
c001951d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019521:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019525:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019534:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001953a:	50                   	push   eax
c001953b:	e8 ee 58 ff ff       	call   c000ee2e <GDT::setup()>
c0019540:	83 c4 0c             	add    esp,0xc
c0019543:	6a 00                	push   0x0
c0019545:	68 ef be ad de       	push   0xdeadbeef
c001954a:	57                   	push   edi
c001954b:	e8 54 76 ff ff       	call   c0010ba4 <TSS::setup(unsigned long, unsigned long)>
c0019550:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019553:	e8 2c 76 ff ff       	call   c0010b84 <TSS::flush()>
c0019558:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001955e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019561:	e8 2c 5b ff ff       	call   c000f092 <IDT::setup()>
c0019566:	b8 00 04 00 00       	mov    eax,0x400
c001956b:	0f 23 f8             	mov    db7,eax
c001956e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019578:	e8 18 64 ff ff       	call   c000f995 <Phys::allocatePage()>
c001957d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019583:	89 30                	mov    DWORD PTR [eax],esi
c0019585:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001958b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001958e:	58                   	pop    eax
c001958f:	5a                   	pop    edx
c0019590:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019596:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001959a:	e8 5f 87 ff ff       	call   c0011cfe <VAS::setCPUSpecific(unsigned long)>
c001959f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195a2:	e8 5d f4 ff ff       	call   c0018a04 <CPU::detectFeatures()>
c00195a7:	e8 35 bc ff ff       	call   c00151e1 <setupInterruptController()>
c00195ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00195b2:	a1 80 da 02 c0       	mov    eax,ds:0xc002da80
c00195b7:	83 e0 10             	and    eax,0x10
c00195ba:	83 f8 01             	cmp    eax,0x1
c00195bd:	19 c0                	sbb    eax,eax
c00195bf:	83 e0 46             	and    eax,0x46
c00195c2:	83 c0 1e             	add    eax,0x1e
c00195c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00195c8:	e8 02 d2 ff ff       	call   c00167cf <setupTimer(int)>
c00195cd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00195d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195d6:	e8 bf fe ff ff       	call   c001949a <CPU::setupFeatures()>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	31 c0                	xor    eax,eax
c00195e0:	5b                   	pop    ebx
c00195e1:	5e                   	pop    esi
c00195e2:	5f                   	pop    edi
c00195e3:	c3                   	ret    

c00195e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00195e4:	57                   	push   edi
c00195e5:	56                   	push   esi
c00195e6:	53                   	push   ebx
c00195e7:	51                   	push   ecx
c00195e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00195ec:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00195ef:	0f 02 c0             	lar    eax,ax
c00195f2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00195f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195f9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00195fc:	88 ca                	mov    dl,cl
c00195fe:	c0 ea 06             	shr    dl,0x6
c0019601:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019605:	89 ca                	mov    edx,ecx
c0019607:	66 c1 ea 03          	shr    dx,0x3
c001960b:	83 e2 07             	and    edx,0x7
c001960e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019613:	88 17                	mov    BYTE PTR [edi],dl
c0019615:	0f 84 a6 01 00 00    	je     c00197c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001961b:	83 e1 07             	and    ecx,0x7
c001961e:	80 f9 04             	cmp    cl,0x4
c0019621:	0f 84 98 00 00 00    	je     c00196bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019627:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001962c:	0f 95 c0             	setne  al
c001962f:	80 f9 05             	cmp    cl,0x5
c0019632:	0f 95 c2             	setne  dl
c0019635:	08 c2                	or     dl,al
c0019637:	74 79                	je     c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019639:	84 c9                	test   cl,cl
c001963b:	75 05                	jne    c0019642 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001963d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019640:	eb 3c                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019642:	80 f9 01             	cmp    cl,0x1
c0019645:	75 05                	jne    c001964c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019647:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001964a:	eb 32                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001964c:	80 f9 02             	cmp    cl,0x2
c001964f:	75 05                	jne    c0019656 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019651:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019654:	eb 28                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019656:	31 c0                	xor    eax,eax
c0019658:	80 f9 03             	cmp    cl,0x3
c001965b:	75 05                	jne    c0019662 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001965d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019660:	eb 1c                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019662:	80 f9 05             	cmp    cl,0x5
c0019665:	75 05                	jne    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019667:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001966a:	eb 12                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001966c:	80 f9 06             	cmp    cl,0x6
c001966f:	75 05                	jne    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019671:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019674:	eb 08                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019676:	80 f9 07             	cmp    cl,0x7
c0019679:	75 03                	jne    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001967b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001967e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019683:	75 10                	jne    c0019695 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019685:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019689:	b9 03 00 00 00       	mov    ecx,0x3
c001968e:	01 d0                	add    eax,edx
c0019690:	e9 37 01 00 00       	jmp    c00197cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019695:	b9 02 00 00 00       	mov    ecx,0x2
c001969a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001969f:	0f 85 27 01 00 00    	jne    c00197cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196a5:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00196a8:	b9 06 00 00 00       	mov    ecx,0x6
c00196ad:	e9 1a 01 00 00       	jmp    c00197cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196b2:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00196b5:	b9 06 00 00 00       	mov    ecx,0x6
c00196ba:	e9 0f 01 00 00       	jmp    c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196bf:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00196c2:	88 ca                	mov    dl,cl
c00196c4:	c0 ea 06             	shr    dl,0x6
c00196c7:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00196cb:	89 ca                	mov    edx,ecx
c00196cd:	66 c1 ea 03          	shr    dx,0x3
c00196d1:	83 e2 07             	and    edx,0x7
c00196d4:	80 e1 07             	and    cl,0x7
c00196d7:	75 05                	jne    c00196de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00196d9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00196dc:	eb 4c                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196de:	80 f9 01             	cmp    cl,0x1
c00196e1:	75 05                	jne    c00196e8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00196e3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00196e6:	eb 42                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196e8:	80 f9 02             	cmp    cl,0x2
c00196eb:	75 05                	jne    c00196f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00196ed:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00196f0:	eb 38                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196f2:	80 f9 03             	cmp    cl,0x3
c00196f5:	75 05                	jne    c00196fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00196f7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00196fa:	eb 2e                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00196fc:	80 f9 04             	cmp    cl,0x4
c00196ff:	75 12                	jne    c0019713 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019701:	f6 c4 60             	test   ah,0x60
c0019704:	75 08                	jne    c001970e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019706:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019709:	8d 78 14             	lea    edi,[eax+0x14]
c001970c:	eb 1c                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001970e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019711:	eb 17                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019713:	80 f9 05             	cmp    cl,0x5
c0019716:	75 05                	jne    c001971d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019718:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001971b:	eb 0d                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001971d:	80 f9 06             	cmp    cl,0x6
c0019720:	75 05                	jne    c0019727 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019722:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019725:	eb 03                	jmp    c001972a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019727:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001972a:	84 d2                	test   dl,dl
c001972c:	75 05                	jne    c0019733 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001972e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019731:	eb 3c                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019733:	80 fa 01             	cmp    dl,0x1
c0019736:	75 05                	jne    c001973d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019738:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001973b:	eb 32                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001973d:	80 fa 02             	cmp    dl,0x2
c0019740:	75 05                	jne    c0019747 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019742:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019745:	eb 28                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019747:	80 fa 03             	cmp    dl,0x3
c001974a:	75 05                	jne    c0019751 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001974c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001974f:	eb 1e                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019751:	31 c0                	xor    eax,eax
c0019753:	80 fa 04             	cmp    dl,0x4
c0019756:	74 17                	je     c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019758:	80 fa 05             	cmp    dl,0x5
c001975b:	75 05                	jne    c0019762 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001975d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019760:	eb 0d                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019762:	80 fa 06             	cmp    dl,0x6
c0019765:	75 05                	jne    c001976c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019767:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001976a:	eb 03                	jmp    c001976f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001976c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001976f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019774:	0f 94 c2             	sete   dl
c0019777:	80 f9 05             	cmp    cl,0x5
c001977a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001977e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019783:	d3 e0                	shl    eax,cl
c0019785:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019789:	74 0a                	je     c0019795 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001978b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001978e:	b9 07 00 00 00       	mov    ecx,0x7
c0019793:	eb 37                	jmp    c00197cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019795:	01 f8                	add    eax,edi
c0019797:	b9 03 00 00 00       	mov    ecx,0x3
c001979c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00197a1:	74 2b                	je     c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197a3:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00197a8:	75 0d                	jne    c00197b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00197aa:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00197ae:	01 c8                	add    eax,ecx
c00197b0:	b9 04 00 00 00       	mov    ecx,0x4
c00197b5:	eb 17                	jmp    c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197b7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00197ba:	b9 07 00 00 00       	mov    ecx,0x7
c00197bf:	eb 0d                	jmp    c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197c1:	b9 02 00 00 00       	mov    ecx,0x2
c00197c6:	b2 01                	mov    dl,0x1
c00197c8:	31 c0                	xor    eax,eax
c00197ca:	eb 02                	jmp    c00197ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197cc:	31 d2                	xor    edx,edx
c00197ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197d2:	89 0b                	mov    DWORD PTR [ebx],ecx
c00197d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197d8:	88 11                	mov    BYTE PTR [ecx],dl
c00197da:	5a                   	pop    edx
c00197db:	5b                   	pop    ebx
c00197dc:	5e                   	pop    esi
c00197dd:	5f                   	pop    edi
c00197de:	c3                   	ret    

c00197df <Krnl::smpEntry()>:
c00197df:	eb fe                	jmp    c00197df <Krnl::smpEntry()>

c00197e1 <Krnl::startCPU(int)>:
c00197e1:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00197e6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00197ed:	0f 84 36 01 00 00    	je     c0019929 <Krnl::startCPU(int)+0x148>
c00197f3:	53                   	push   ebx
c00197f4:	83 ec 10             	sub    esp,0x10
c00197f7:	fa                   	cli    
c00197f8:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c00197fe:	6a 1b                	push   0x1b
c0019800:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c0019806:	e8 35 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001980b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019810:	89 c3                	mov    ebx,eax
c0019812:	58                   	pop    eax
c0019813:	5a                   	pop    edx
c0019814:	53                   	push   ebx
c0019815:	68 7c b6 02 c0       	push   0xc002b67c
c001981a:	e8 40 8f ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001981f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001982d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019837:	c1 e0 18             	shl    eax,0x18
c001983a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019840:	83 c4 10             	add    esp,0x10
c0019843:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019849:	09 c2                	or     edx,eax
c001984b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019851:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019857:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001985d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019863:	80 cd c5             	or     ch,0xc5
c0019866:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001986c:	f3 90                	pause  
c001986e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019870:	0f ba e1 0c          	bt     ecx,0xc
c0019874:	72 f6                	jb     c001986c <Krnl::startCPU(int)+0x8b>
c0019876:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001987c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019882:	09 c1                	or     ecx,eax
c0019884:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001988a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019890:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019896:	80 cd 85             	or     ch,0x85
c0019899:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001989f:	f3 90                	pause  
c00198a1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198a3:	0f ba e1 0c          	bt     ecx,0xc
c00198a7:	72 f6                	jb     c001989f <Krnl::startCPU(int)+0xbe>
c00198a9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198b3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198b9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198bf:	09 c1                	or     ecx,eax
c00198c1:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00198c7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00198cd:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00198d3:	81 c9 02 06 00 00    	or     ecx,0x602
c00198d9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00198df:	f3 90                	pause  
c00198e1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198e3:	0f ba e1 0c          	bt     ecx,0xc
c00198e7:	72 f6                	jb     c00198df <Krnl::startCPU(int)+0xfe>
c00198e9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198f3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198f9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198ff:	09 c8                	or     eax,ecx
c0019901:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019907:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001990d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019912:	0d 02 06 00 00       	or     eax,0x602
c0019917:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001991d:	f3 90                	pause  
c001991f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019921:	0f ba e0 0c          	bt     eax,0xc
c0019925:	72 f6                	jb     c001991d <Krnl::startCPU(int)+0x13c>
c0019927:	eb fe                	jmp    c0019927 <Krnl::startCPU(int)+0x146>
c0019929:	c3                   	ret    

c001992a <Krnl::startCPUs()>:
c001992a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001992f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019935:	88 c2                	mov    dl,al
c0019937:	83 e2 0a             	and    edx,0xa
c001993a:	80 fa 0a             	cmp    dl,0xa
c001993d:	75 09                	jne    c0019948 <Krnl::startCPUs()+0x1e>
c001993f:	a8 01                	test   al,0x1
c0019941:	74 05                	je     c0019948 <Krnl::startCPUs()+0x1e>
c0019943:	e9 53 68 fe ff       	jmp    c000019b <prepareTramp>
c0019948:	c3                   	ret    
c0019949:	90                   	nop

c001994a <EnvVarContainer::getEnv(char const*)>:
c001994a:	57                   	push   edi
c001994b:	56                   	push   esi
c001994c:	53                   	push   ebx
c001994d:	31 db                	xor    ebx,ebx
c001994f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019953:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019955:	7e 2b                	jle    c0019982 <EnvVarContainer::getEnv(char const*)+0x38>
c0019957:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001995e:	50                   	push   eax
c001995f:	50                   	push   eax
c0019960:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019963:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019966:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001996a:	e8 29 6f fe ff       	call   c0000898 <strcmp>
c001996f:	83 c4 10             	add    esp,0x10
c0019972:	85 c0                	test   eax,eax
c0019974:	75 09                	jne    c001997f <EnvVarContainer::getEnv(char const*)+0x35>
c0019976:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019979:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001997d:	eb 05                	jmp    c0019984 <EnvVarContainer::getEnv(char const*)+0x3a>
c001997f:	43                   	inc    ebx
c0019980:	eb d1                	jmp    c0019953 <EnvVarContainer::getEnv(char const*)+0x9>
c0019982:	31 c0                	xor    eax,eax
c0019984:	5b                   	pop    ebx
c0019985:	5e                   	pop    esi
c0019986:	5f                   	pop    edi
c0019987:	c3                   	ret    

c0019988 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019988:	55                   	push   ebp
c0019989:	57                   	push   edi
c001998a:	56                   	push   esi
c001998b:	53                   	push   ebx
c001998c:	83 ec 28             	sub    esp,0x28
c001998f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019993:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019997:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001999b:	56                   	push   esi
c001999c:	e8 cb 6d fe ff       	call   c000076c <strlen>
c00199a1:	40                   	inc    eax
c00199a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00199a5:	e8 ef 5b ff ff       	call   c000f599 <malloc>
c00199aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199b1:	e8 b6 6d fe ff       	call   c000076c <strlen>
c00199b6:	40                   	inc    eax
c00199b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ba:	e8 da 5b ff ff       	call   c000f599 <malloc>
c00199bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00199c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199c6:	e8 a1 6d fe ff       	call   c000076c <strlen>
c00199cb:	83 c4 0c             	add    esp,0xc
c00199ce:	40                   	inc    eax
c00199cf:	50                   	push   eax
c00199d0:	6a 00                	push   0x0
c00199d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199d6:	e8 75 6d fe ff       	call   c0000750 <memset>
c00199db:	89 34 24             	mov    DWORD PTR [esp],esi
c00199de:	e8 89 6d fe ff       	call   c000076c <strlen>
c00199e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00199e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00199ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199ef:	89 de                	mov    esi,ebx
c00199f1:	e8 76 6d fe ff       	call   c000076c <strlen>
c00199f6:	83 c4 0c             	add    esp,0xc
c00199f9:	40                   	inc    eax
c00199fa:	50                   	push   eax
c00199fb:	6a 00                	push   0x0
c00199fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a01:	e8 4a 6d fe ff       	call   c0000750 <memset>
c0019a06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a09:	e8 5e 6d fe ff       	call   c000076c <strlen>
c0019a0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019a12:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a1a:	40                   	inc    eax
c0019a1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a1e:	c1 e0 03             	shl    eax,0x3
c0019a21:	5a                   	pop    edx
c0019a22:	59                   	pop    ecx
c0019a23:	50                   	push   eax
c0019a24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a27:	e8 59 5b ff ff       	call   c000f585 <realloc>
c0019a2c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a33:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a36:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a3a:	b9 08 00 00 00       	mov    ecx,0x8
c0019a3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a41:	83 c4 2c             	add    esp,0x2c
c0019a44:	5b                   	pop    ebx
c0019a45:	5e                   	pop    esi
c0019a46:	5f                   	pop    edi
c0019a47:	5d                   	pop    ebp
c0019a48:	c3                   	ret    
c0019a49:	90                   	nop

c0019a4a <EnvVarContainer::deleteEnv(char const*)>:
c0019a4a:	c3                   	ret    
c0019a4b:	90                   	nop

c0019a4c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019a4c:	55                   	push   ebp
c0019a4d:	57                   	push   edi
c0019a4e:	56                   	push   esi
c0019a4f:	53                   	push   ebx
c0019a50:	81 ec 38 01 00 00    	sub    esp,0x138
c0019a56:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019a5d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019a64:	68 14 01 00 00       	push   0x114
c0019a69:	e8 2b 5b ff ff       	call   c000f599 <malloc>
c0019a6e:	83 c4 0c             	add    esp,0xc
c0019a71:	89 c3                	mov    ebx,eax
c0019a73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a76:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019a7d:	50                   	push   eax
c0019a7e:	e8 3b 92 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c0019a83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a86:	e8 05 95 ff ff       	call   c0012f90 <File::exists()>
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	84 c0                	test   al,al
c0019a90:	75 31                	jne    c0019ac3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019a92:	50                   	push   eax
c0019a93:	50                   	push   eax
c0019a94:	6a 12                	push   0x12
c0019a96:	53                   	push   ebx
c0019a97:	e8 86 92 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c0019a9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a9e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019aa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019aa4:	e8 c3 6c fe ff       	call   c000076c <strlen>
c0019aa9:	5a                   	pop    edx
c0019aaa:	31 d2                	xor    edx,edx
c0019aac:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ab0:	51                   	push   ecx
c0019ab1:	56                   	push   esi
c0019ab2:	52                   	push   edx
c0019ab3:	50                   	push   eax
c0019ab4:	53                   	push   ebx
c0019ab5:	ff d7                	call   edi
c0019ab7:	83 c4 14             	add    esp,0x14
c0019aba:	53                   	push   ebx
c0019abb:	e8 c0 92 ff ff       	call   c0012d80 <File::close()>
c0019ac0:	83 c4 10             	add    esp,0x10
c0019ac3:	56                   	push   esi
c0019ac4:	31 f6                	xor    esi,esi
c0019ac6:	68 00 01 00 00       	push   0x100
c0019acb:	6a 00                	push   0x0
c0019acd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ad1:	50                   	push   eax
c0019ad2:	e8 79 6c fe ff       	call   c0000750 <memset>
c0019ad7:	5f                   	pop    edi
c0019ad8:	58                   	pop    eax
c0019ad9:	6a 01                	push   0x1
c0019adb:	53                   	push   ebx
c0019adc:	e8 41 92 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c0019ae1:	83 c4 10             	add    esp,0x10
c0019ae4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019aec:	83 ec 0c             	sub    esp,0xc
c0019aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019af5:	51                   	push   ecx
c0019af6:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019afa:	52                   	push   edx
c0019afb:	6a 00                	push   0x0
c0019afd:	6a 01                	push   0x1
c0019aff:	53                   	push   ebx
c0019b00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b03:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019b07:	83 c4 20             	add    esp,0x20
c0019b0a:	3c 0d                	cmp    al,0xd
c0019b0c:	0f 84 09 01 00 00    	je     c0019c1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019b17:	0f 84 ef 00 00 00    	je     c0019c0c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b1d:	3c 0a                	cmp    al,0xa
c0019b1f:	74 13                	je     c0019b34 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b26:	74 0c                	je     c0019b34 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b28:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019b2e:	0f 8e d8 00 00 00    	jle    c0019c0c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b38:	83 ec 0c             	sub    esp,0xc
c0019b3b:	8d 78 01             	lea    edi,[eax+0x1]
c0019b3e:	57                   	push   edi
c0019b3f:	e8 55 5a ff ff       	call   c000f599 <malloc>
c0019b44:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019b48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b4c:	8d 56 04             	lea    edx,[esi+0x4]
c0019b4f:	89 14 24             	mov    DWORD PTR [esp],edx
c0019b52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019b56:	e8 3e 5a ff ff       	call   c000f599 <malloc>
c0019b5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b5f:	83 c4 0c             	add    esp,0xc
c0019b62:	57                   	push   edi
c0019b63:	6a 00                	push   0x0
c0019b65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b69:	e8 e2 6b fe ff       	call   c0000750 <memset>
c0019b6e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b72:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019b76:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019b7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b7c:	83 c4 0c             	add    esp,0xc
c0019b7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b83:	52                   	push   edx
c0019b84:	6a 00                	push   0x0
c0019b86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b8a:	e8 c1 6b fe ff       	call   c0000750 <memset>
c0019b8f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019b93:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019b97:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b9a:	e8 cd 6b fe ff       	call   c000076c <strlen>
c0019b9f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019ba3:	89 c1                	mov    ecx,eax
c0019ba5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ba7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019baa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019bad:	40                   	inc    eax
c0019bae:	83 c4 10             	add    esp,0x10
c0019bb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019bb4:	85 d2                	test   edx,edx
c0019bb6:	75 0c                	jne    c0019bc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019bb8:	83 ec 0c             	sub    esp,0xc
c0019bbb:	6a 08                	push   0x8
c0019bbd:	e8 d7 59 ff ff       	call   c000f599 <malloc>
c0019bc2:	eb 0c                	jmp    c0019bd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019bc4:	c1 e0 03             	shl    eax,0x3
c0019bc7:	51                   	push   ecx
c0019bc8:	51                   	push   ecx
c0019bc9:	50                   	push   eax
c0019bca:	52                   	push   edx
c0019bcb:	e8 b5 59 ff ff       	call   c000f585 <realloc>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019bd6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019bd9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019bdc:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019be0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019be4:	b9 08 00 00 00       	mov    ecx,0x8
c0019be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019beb:	31 f6                	xor    esi,esi
c0019bed:	50                   	push   eax
c0019bee:	68 00 01 00 00       	push   0x100
c0019bf3:	6a 00                	push   0x0
c0019bf5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bf9:	50                   	push   eax
c0019bfa:	e8 51 6b fe ff       	call   c0000750 <memset>
c0019bff:	83 c4 10             	add    esp,0x10
c0019c02:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c0a:	eb 0f                	jmp    c0019c1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c0c:	3c 3d                	cmp    al,0x3d
c0019c0e:	74 07                	je     c0019c17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019c10:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019c14:	46                   	inc    esi
c0019c15:	eb 04                	jmp    c0019c1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c17:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019c1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c20:	0f 85 c6 fe ff ff    	jne    c0019aec <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019c26:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c2c:	5b                   	pop    ebx
c0019c2d:	5e                   	pop    esi
c0019c2e:	5f                   	pop    edi
c0019c2f:	5d                   	pop    ebp
c0019c30:	c3                   	ret    
c0019c31:	90                   	nop

c0019c32 <EnvVarContainer::__loadSystem()>:
c0019c32:	83 ec 10             	sub    esp,0x10
c0019c35:	68 a0 cf 02 c0       	push   0xc002cfa0
c0019c3a:	68 8d b6 02 c0       	push   0xc002b68d
c0019c3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c43:	e8 04 fe ff ff       	call   c0019a4c <EnvVarContainer::loadFrom(char const*, char const*)>
c0019c48:	83 c4 1c             	add    esp,0x1c
c0019c4b:	c3                   	ret    

c0019c4c <EnvVarContainer::__loadUser()>:
c0019c4c:	c3                   	ret    
c0019c4d:	90                   	nop

c0019c4e <EnvVarContainer::EnvVarContainer(Process*)>:
c0019c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019c6e:	90                   	nop
c0019c6f:	c3                   	ret    

c0019c70 <EnvVarContainer::~EnvVarContainer()>:
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c7a:	85 c0                	test   eax,eax
c0019c7c:	74 1d                	je     c0019c9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c84:	85 c0                	test   eax,eax
c0019c86:	74 13                	je     c0019c9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c8f:	83 ec 0c             	sub    esp,0xc
c0019c92:	50                   	push   eax
c0019c93:	e8 11 59 ff ff       	call   c000f5a9 <free>
c0019c98:	83 c4 10             	add    esp,0x10
c0019c9b:	90                   	nop
c0019c9c:	83 c4 0c             	add    esp,0xc
c0019c9f:	c3                   	ret    

c0019ca0 <Krnl::getEnv(Process*, char const*)>:
c0019ca0:	53                   	push   ebx
c0019ca1:	83 ec 08             	sub    esp,0x8
c0019ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019cac:	39 05 b0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fb0,eax
c0019cb2:	74 04                	je     c0019cb8 <Krnl::getEnv(Process*, char const*)+0x18>
c0019cb4:	85 c0                	test   eax,eax
c0019cb6:	75 0b                	jne    c0019cc3 <Krnl::getEnv(Process*, char const*)+0x23>
c0019cb8:	a1 94 05 03 c0       	mov    eax,ds:0xc0030594
c0019cbd:	85 c0                	test   eax,eax
c0019cbf:	75 19                	jne    c0019cda <Krnl::getEnv(Process*, char const*)+0x3a>
c0019cc1:	eb 27                	jmp    c0019cea <Krnl::getEnv(Process*, char const*)+0x4a>
c0019cc3:	52                   	push   edx
c0019cc4:	52                   	push   edx
c0019cc5:	53                   	push   ebx
c0019cc6:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019ccc:	e8 79 fc ff ff       	call   c001994a <EnvVarContainer::getEnv(char const*)>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	85 c0                	test   eax,eax
c0019cd6:	75 28                	jne    c0019d00 <Krnl::getEnv(Process*, char const*)+0x60>
c0019cd8:	eb de                	jmp    c0019cb8 <Krnl::getEnv(Process*, char const*)+0x18>
c0019cda:	52                   	push   edx
c0019cdb:	52                   	push   edx
c0019cdc:	53                   	push   ebx
c0019cdd:	50                   	push   eax
c0019cde:	e8 67 fc ff ff       	call   c001994a <EnvVarContainer::getEnv(char const*)>
c0019ce3:	83 c4 10             	add    esp,0x10
c0019ce6:	85 c0                	test   eax,eax
c0019ce8:	75 16                	jne    c0019d00 <Krnl::getEnv(Process*, char const*)+0x60>
c0019cea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019cee:	a1 98 05 03 c0       	mov    eax,ds:0xc0030598
c0019cf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019cf7:	83 c4 08             	add    esp,0x8
c0019cfa:	5b                   	pop    ebx
c0019cfb:	e9 4a fc ff ff       	jmp    c001994a <EnvVarContainer::getEnv(char const*)>
c0019d00:	83 c4 08             	add    esp,0x8
c0019d03:	5b                   	pop    ebx
c0019d04:	c3                   	ret    

c0019d05 <Krnl::setEnvSystem(char const*, char const*)>:
c0019d05:	83 ec 10             	sub    esp,0x10
c0019d08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d10:	ff 35 98 05 03 c0    	push   DWORD PTR ds:0xc0030598
c0019d16:	e8 6d fc ff ff       	call   c0019988 <EnvVarContainer::setEnv(char const*, char const*)>
c0019d1b:	83 c4 1c             	add    esp,0x1c
c0019d1e:	c3                   	ret    

c0019d1f <Krnl::setEnvUser(char const*, char const*)>:
c0019d1f:	a1 94 05 03 c0       	mov    eax,ds:0xc0030594
c0019d24:	85 c0                	test   eax,eax
c0019d26:	74 15                	je     c0019d3d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019d28:	83 ec 10             	sub    esp,0x10
c0019d2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d33:	50                   	push   eax
c0019d34:	e8 4f fc ff ff       	call   c0019988 <EnvVarContainer::setEnv(char const*, char const*)>
c0019d39:	83 c4 1c             	add    esp,0x1c
c0019d3c:	c3                   	ret    
c0019d3d:	c3                   	ret    

c0019d3e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019d3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d42:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019d48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d4c:	e9 37 fc ff ff       	jmp    c0019988 <EnvVarContainer::setEnv(char const*, char const*)>

c0019d51 <Krnl::deleteEnvSystem(char const*)>:
c0019d51:	c3                   	ret    

c0019d52 <Krnl::deleteEnvUser(char const*)>:
c0019d52:	c3                   	ret    

c0019d53 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019d53:	c3                   	ret    

c0019d54 <Krnl::newProcessEnv(Process*)>:
c0019d54:	83 ec 28             	sub    esp,0x28
c0019d57:	6a 0c                	push   0xc
c0019d59:	e8 3b 58 ff ff       	call   c000f599 <malloc>
c0019d5e:	5a                   	pop    edx
c0019d5f:	59                   	pop    ecx
c0019d60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d64:	50                   	push   eax
c0019d65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d69:	e8 e0 fe ff ff       	call   c0019c4e <EnvVarContainer::EnvVarContainer(Process*)>
c0019d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d72:	83 c4 2c             	add    esp,0x2c
c0019d75:	c3                   	ret    

c0019d76 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019d76:	57                   	push   edi
c0019d77:	56                   	push   esi
c0019d78:	53                   	push   ebx
c0019d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d7d:	83 ec 0c             	sub    esp,0xc
c0019d80:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019d86:	6a 0c                	push   0xc
c0019d88:	e8 0c 58 ff ff       	call   c000f599 <malloc>
c0019d8d:	89 c3                	mov    ebx,eax
c0019d8f:	58                   	pop    eax
c0019d90:	5a                   	pop    edx
c0019d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d95:	53                   	push   ebx
c0019d96:	e8 b3 fe ff ff       	call   c0019c4e <EnvVarContainer::EnvVarContainer(Process*)>
c0019d9b:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d9d:	89 03                	mov    DWORD PTR [ebx],eax
c0019d9f:	c1 e0 03             	shl    eax,0x3
c0019da2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da5:	e8 ef 57 ff ff       	call   c000f599 <malloc>
c0019daa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019dad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019daf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019db2:	c1 e1 03             	shl    ecx,0x3
c0019db5:	89 c7                	mov    edi,eax
c0019db7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	89 d8                	mov    eax,ebx
c0019dbe:	5b                   	pop    ebx
c0019dbf:	5e                   	pop    esi
c0019dc0:	5f                   	pop    edi
c0019dc1:	c3                   	ret    

c0019dc2 <Krnl::loadSystemEnv()>:
c0019dc2:	53                   	push   ebx
c0019dc3:	83 ec 14             	sub    esp,0x14
c0019dc6:	6a 0c                	push   0xc
c0019dc8:	e8 cc 57 ff ff       	call   c000f599 <malloc>
c0019dcd:	89 c3                	mov    ebx,eax
c0019dcf:	58                   	pop    eax
c0019dd0:	5a                   	pop    edx
c0019dd1:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c0019dd7:	53                   	push   ebx
c0019dd8:	e8 71 fe ff ff       	call   c0019c4e <EnvVarContainer::EnvVarContainer(Process*)>
c0019ddd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019de0:	89 1d 98 05 03 c0    	mov    DWORD PTR ds:0xc0030598,ebx
c0019de6:	e8 47 fe ff ff       	call   c0019c32 <EnvVarContainer::__loadSystem()>
c0019deb:	83 c4 18             	add    esp,0x18
c0019dee:	5b                   	pop    ebx
c0019def:	c3                   	ret    

c0019df0 <Krnl::loadUserEnv()>:
c0019df0:	53                   	push   ebx
c0019df1:	83 ec 14             	sub    esp,0x14
c0019df4:	6a 0c                	push   0xc
c0019df6:	e8 9e 57 ff ff       	call   c000f599 <malloc>
c0019dfb:	89 c3                	mov    ebx,eax
c0019dfd:	58                   	pop    eax
c0019dfe:	5a                   	pop    edx
c0019dff:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c0019e05:	53                   	push   ebx
c0019e06:	e8 43 fe ff ff       	call   c0019c4e <EnvVarContainer::EnvVarContainer(Process*)>
c0019e0b:	89 1d 94 05 03 c0    	mov    DWORD PTR ds:0xc0030594,ebx
c0019e11:	83 c4 18             	add    esp,0x18
c0019e14:	5b                   	pop    ebx
c0019e15:	c3                   	ret    

c0019e16 <Krnl::flushEnv()>:
c0019e16:	c3                   	ret    

c0019e17 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019e17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e1b:	8b 15 94 05 03 c0    	mov    edx,DWORD PTR ds:0xc0030594
c0019e21:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e27:	a1 98 05 03 c0       	mov    eax,ds:0xc0030598
c0019e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e2e:	03 01                	add    eax,DWORD PTR [ecx]
c0019e30:	85 d2                	test   edx,edx
c0019e32:	74 02                	je     c0019e36 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019e34:	03 02                	add    eax,DWORD PTR [edx]
c0019e36:	c3                   	ret    

c0019e37 <Krnl::getProcessEnvPair(Process*, int)>:
c0019e37:	57                   	push   edi
c0019e38:	56                   	push   esi
c0019e39:	8b 35 94 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030594
c0019e3f:	53                   	push   ebx
c0019e40:	85 f6                	test   esi,esi
c0019e42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e4a:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e54:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019e56:	75 16                	jne    c0019e6e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019e58:	39 c2                	cmp    edx,eax
c0019e5a:	7c 16                	jl     c0019e72 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e5c:	8b 0d 98 05 03 c0    	mov    ecx,DWORD PTR ds:0xc0030598
c0019e62:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019e64:	01 c6                	add    esi,eax
c0019e66:	39 d6                	cmp    esi,edx
c0019e68:	7e 3c                	jle    c0019ea6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e6a:	29 c2                	sub    edx,eax
c0019e6c:	eb 04                	jmp    c0019e72 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e6e:	39 c2                	cmp    edx,eax
c0019e70:	7d 05                	jge    c0019e77 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019e72:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019e75:	eb 20                	jmp    c0019e97 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019e77:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019e79:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019e7c:	39 d1                	cmp    ecx,edx
c0019e7e:	7e 04                	jle    c0019e84 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019e80:	29 c2                	sub    edx,eax
c0019e82:	eb 10                	jmp    c0019e94 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019e84:	8b 35 98 05 03 c0    	mov    esi,DWORD PTR ds:0xc0030598
c0019e8a:	03 0e                	add    ecx,DWORD PTR [esi]
c0019e8c:	39 d1                	cmp    ecx,edx
c0019e8e:	7e 16                	jle    c0019ea6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e90:	29 c2                	sub    edx,eax
c0019e92:	29 fa                	sub    edx,edi
c0019e94:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e97:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019e9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e9c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019e9f:	89 03                	mov    DWORD PTR [ebx],eax
c0019ea1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019ea4:	eb 1d                	jmp    c0019ec3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019ea6:	83 ec 0c             	sub    esp,0xc
c0019ea9:	68 af b6 02 c0       	push   0xc002b6af
c0019eae:	e8 18 00 00 00       	call   c0019ecb <Krnl::panic(char const*)>
c0019eb3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019eb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	89 d8                	mov    eax,ebx
c0019ec5:	5b                   	pop    ebx
c0019ec6:	5e                   	pop    esi
c0019ec7:	5f                   	pop    edi
c0019ec8:	c2 04 00             	ret    0x4

c0019ecb <Krnl::panic(char const*)>:
c0019ecb:	55                   	push   ebp
c0019ecc:	89 e5                	mov    ebp,esp
c0019ece:	53                   	push   ebx
c0019ecf:	83 ec 10             	sub    esp,0x10
c0019ed2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019ed5:	fa                   	cli    
c0019ed6:	c6 05 a4 05 03 c0 01 	mov    BYTE PTR ds:0xc00305a4,0x1
c0019edd:	53                   	push   ebx
c0019ede:	e8 10 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019ee3:	58                   	pop    eax
c0019ee4:	c6 05 a0 c9 02 c0 00 	mov    BYTE PTR ds:0xc002c9a0,0x0
c0019eeb:	5a                   	pop    edx
c0019eec:	53                   	push   ebx
c0019eed:	68 c9 b6 02 c0       	push   0xc002b6c9
c0019ef2:	e8 68 88 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0019ef7:	59                   	pop    ecx
c0019ef8:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f03:	e8 4b 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019f08:	83 c4 0c             	add    esp,0xc
c0019f0b:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f10:	6a 01                	push   0x1
c0019f12:	6a 0f                	push   0xf
c0019f14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1a:	e8 93 62 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f1f:	58                   	pop    eax
c0019f20:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2b:	e8 a4 67 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019f30:	58                   	pop    eax
c0019f31:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f36:	5a                   	pop    edx
c0019f37:	68 e2 b6 02 c0       	push   0xc002b6e2
c0019f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f42:	e8 19 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f47:	59                   	pop    ecx
c0019f48:	58                   	pop    eax
c0019f49:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f4e:	68 88 b7 02 c0       	push   0xc002b788
c0019f53:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f59:	e8 02 69 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f5e:	58                   	pop    eax
c0019f5f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f64:	5a                   	pop    edx
c0019f65:	68 fe b6 02 c0       	push   0xc002b6fe
c0019f6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f70:	e8 eb 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f75:	59                   	pop    ecx
c0019f76:	58                   	pop    eax
c0019f77:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f7c:	53                   	push   ebx
c0019f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f83:	e8 d8 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f88:	58                   	pop    eax
c0019f89:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019f8e:	5a                   	pop    edx
c0019f8f:	68 1e b7 02 c0       	push   0xc002b71e
c0019f94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9a:	e8 c1 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f9f:	a1 a0 05 03 c0       	mov    eax,ds:0xc00305a0
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	85 c0                	test   eax,eax
c0019fa9:	74 02                	je     c0019fad <Krnl::panic(char const*)+0xe2>
c0019fab:	ff d0                	call   eax
c0019fad:	83 ec 0c             	sub    esp,0xc
c0019fb0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fb3:	e8 8c 30 00 00       	call   c001d044 <Thr::getDriverNameFromAddress(unsigned long)>
c0019fb8:	83 c4 10             	add    esp,0x10
c0019fbb:	89 c3                	mov    ebx,eax
c0019fbd:	85 c0                	test   eax,eax
c0019fbf:	0f 84 4e 02 00 00    	je     c001a213 <Krnl::panic(char const*)+0x348>
c0019fc5:	83 ec 08             	sub    esp,0x8
c0019fc8:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019fcd:	68 c4 b7 02 c0       	push   0xc002b7c4
c0019fd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd8:	e8 83 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fdd:	58                   	pop    eax
c0019fde:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019fe3:	5a                   	pop    edx
c0019fe4:	68 fe b6 02 c0       	push   0xc002b6fe
c0019fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fef:	e8 6c 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019ff4:	59                   	pop    ecx
c0019ff5:	58                   	pop    eax
c0019ff6:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c0019ffb:	53                   	push   ebx
c0019ffc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a002:	e8 59 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a007:	83 c4 10             	add    esp,0x10
c001a00a:	83 ec 08             	sub    esp,0x8
c001a00d:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a012:	68 1d b7 02 c0       	push   0xc002b71d
c001a017:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a01d:	e8 3e 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a022:	58                   	pop    eax
c001a023:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a028:	5a                   	pop    edx
c001a029:	68 1c b8 02 c0       	push   0xc002b81c
c001a02e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a034:	e8 27 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a039:	59                   	pop    ecx
c001a03a:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a03f:	5b                   	pop    ebx
c001a040:	68 5c b8 02 c0       	push   0xc002b85c
c001a045:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a04b:	e8 10 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a050:	58                   	pop    eax
c001a051:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a056:	5a                   	pop    edx
c001a057:	68 09 b7 02 c0       	push   0xc002b709
c001a05c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a062:	e8 f9 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a067:	59                   	pop    ecx
c001a068:	5b                   	pop    ebx
c001a069:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a06c:	68 21 b7 02 c0       	push   0xc002b721
c001a071:	e8 e9 86 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001a076:	58                   	pop    eax
c001a077:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a07a:	5a                   	pop    edx
c001a07b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a07e:	68 2a b7 02 c0       	push   0xc002b72a
c001a083:	e8 d7 86 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001a088:	59                   	pop    ecx
c001a089:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a08c:	5b                   	pop    ebx
c001a08d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a08f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a092:	68 33 b7 02 c0       	push   0xc002b733
c001a097:	e8 c3 86 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001a09c:	58                   	pop    eax
c001a09d:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a0a2:	5a                   	pop    edx
c001a0a3:	68 a0 b8 02 c0       	push   0xc002b8a0
c001a0a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ae:	e8 ad 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0b3:	59                   	pop    ecx
c001a0b4:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a0b9:	5b                   	pop    ebx
c001a0ba:	68 3c b7 02 c0       	push   0xc002b73c
c001a0bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c5:	e8 96 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0ca:	0f 20 c0             	mov    eax,cr0
c001a0cd:	5a                   	pop    edx
c001a0ce:	59                   	pop    ecx
c001a0cf:	50                   	push   eax
c001a0d0:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a0d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0db:	e8 3a 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a0e0:	5b                   	pop    ebx
c001a0e1:	58                   	pop    eax
c001a0e2:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a0e7:	68 46 b7 02 c0       	push   0xc002b746
c001a0ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f2:	e8 69 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0f7:	0f 20 d0             	mov    eax,cr2
c001a0fa:	5a                   	pop    edx
c001a0fb:	59                   	pop    ecx
c001a0fc:	50                   	push   eax
c001a0fd:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a102:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a108:	e8 0d 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a10d:	5b                   	pop    ebx
c001a10e:	58                   	pop    eax
c001a10f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a114:	68 50 b7 02 c0       	push   0xc002b750
c001a119:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a11f:	e8 3c 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a124:	0f 20 d8             	mov    eax,cr3
c001a127:	5a                   	pop    edx
c001a128:	59                   	pop    ecx
c001a129:	50                   	push   eax
c001a12a:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a12f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a135:	e8 e0 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a13a:	5b                   	pop    ebx
c001a13b:	58                   	pop    eax
c001a13c:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a141:	68 63 b7 02 c0       	push   0xc002b763
c001a146:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a14c:	e8 0f 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a151:	0f 20 e0             	mov    eax,cr4
c001a154:	5a                   	pop    edx
c001a155:	59                   	pop    ecx
c001a156:	50                   	push   eax
c001a157:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a15c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a162:	e8 b3 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a167:	5b                   	pop    ebx
c001a168:	58                   	pop    eax
c001a169:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a16e:	68 6d b7 02 c0       	push   0xc002b76d
c001a173:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a179:	e8 e2 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a17e:	5a                   	pop    edx
c001a17f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a184:	59                   	pop    ecx
c001a185:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a18b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a18e:	50                   	push   eax
c001a18f:	e8 86 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a194:	5b                   	pop    ebx
c001a195:	58                   	pop    eax
c001a196:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a19b:	68 84 b7 02 c0       	push   0xc002b784
c001a1a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a6:	e8 b5 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1ab:	5a                   	pop    edx
c001a1ac:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a1b1:	59                   	pop    ecx
c001a1b2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1b8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1bb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1be:	50                   	push   eax
c001a1bf:	e8 56 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1c4:	5b                   	pop    ebx
c001a1c5:	58                   	pop    eax
c001a1c6:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a1cb:	68 84 b7 02 c0       	push   0xc002b784
c001a1d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1d6:	e8 85 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1db:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a1e0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1e9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a1eb:	59                   	pop    ecx
c001a1ec:	5b                   	pop    ebx
c001a1ed:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1f0:	50                   	push   eax
c001a1f1:	e8 24 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1f6:	83 c4 10             	add    esp,0x10
c001a1f9:	b2 fe                	mov    dl,0xfe
c001a1fb:	e4 60                	in     al,0x60
c001a1fd:	3c 1c                	cmp    al,0x1c
c001a1ff:	74 04                	je     c001a205 <Krnl::panic(char const*)+0x33a>
c001a201:	3c 5a                	cmp    al,0x5a
c001a203:	75 f6                	jne    c001a1fb <Krnl::panic(char const*)+0x330>
c001a205:	e4 64                	in     al,0x64
c001a207:	a8 02                	test   al,0x2
c001a209:	75 fa                	jne    c001a205 <Krnl::panic(char const*)+0x33a>
c001a20b:	88 d0                	mov    al,dl
c001a20d:	e6 64                	out    0x64,al
c001a20f:	fa                   	cli    
c001a210:	f4                   	hlt    
c001a211:	eb e8                	jmp    c001a1fb <Krnl::panic(char const*)+0x330>
c001a213:	50                   	push   eax
c001a214:	50                   	push   eax
c001a215:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a21a:	68 f0 b7 02 c0       	push   0xc002b7f0
c001a21f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a225:	e8 36 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a22a:	58                   	pop    eax
c001a22b:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a230:	5a                   	pop    edx
c001a231:	68 fe b6 02 c0       	push   0xc002b6fe
c001a236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a23c:	e8 1f 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a241:	59                   	pop    ecx
c001a242:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a247:	5b                   	pop    ebx
c001a248:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a24b:	83 c0 0c             	add    eax,0xc
c001a24e:	50                   	push   eax
c001a24f:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001a254:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a25a:	e8 01 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a25f:	83 c4 10             	add    esp,0x10
c001a262:	e9 a3 fd ff ff       	jmp    c001a00a <Krnl::panic(char const*)+0x13f>

c001a267 <Net::switchEndian16(unsigned short)>:
c001a267:	83 ec 04             	sub    esp,0x4
c001a26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a26e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a272:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a276:	c1 f8 08             	sar    eax,0x8
c001a279:	89 c2                	mov    edx,eax
c001a27b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a27f:	c1 e0 08             	shl    eax,0x8
c001a282:	09 d0                	or     eax,edx
c001a284:	83 c4 04             	add    esp,0x4
c001a287:	c3                   	ret    

c001a288 <Net::switchEndian32(unsigned int)>:
c001a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a28c:	c1 e8 18             	shr    eax,0x18
c001a28f:	89 c2                	mov    edx,eax
c001a291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a295:	c1 e0 08             	shl    eax,0x8
c001a298:	25 00 00 ff 00       	and    eax,0xff0000
c001a29d:	09 c2                	or     edx,eax
c001a29f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2a3:	c1 e8 08             	shr    eax,0x8
c001a2a6:	25 00 ff 00 00       	and    eax,0xff00
c001a2ab:	09 c2                	or     edx,eax
c001a2ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b1:	c1 e0 18             	shl    eax,0x18
c001a2b4:	09 d0                	or     eax,edx
c001a2b6:	c3                   	ret    

c001a2b7 <Net::crc32Calc(unsigned char*, int)>:
c001a2b7:	83 ec 10             	sub    esp,0x10
c001a2ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2bf:	75 07                	jne    c001a2c8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a2c1:	b8 00 00 00 00       	mov    eax,0x0
c001a2c6:	eb 7c                	jmp    c001a344 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a2c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a2cd:	7f 07                	jg     c001a2d6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a2cf:	b8 00 00 00 00       	mov    eax,0x0
c001a2d4:	eb 6e                	jmp    c001a344 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a2d6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a2de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2ea:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a2ee:	7d 4e                	jge    c001a33e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a2f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2f8:	01 d0                	add    eax,edx
c001a2fa:	8a 00                	mov    al,BYTE PTR [eax]
c001a2fc:	0f b6 c0             	movzx  eax,al
c001a2ff:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a303:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a30b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a310:	7f 26                	jg     c001a338 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a316:	83 e0 01             	and    eax,0x1
c001a319:	74 0d                	je     c001a328 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a31b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a31f:	d1 e8                	shr    eax,1
c001a321:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a326:	eb 06                	jmp    c001a32e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a32c:	d1 e8                	shr    eax,1
c001a32e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a332:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a336:	eb d3                	jmp    c001a30b <Net::crc32Calc(unsigned char*, int)+0x54>
c001a338:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a33c:	eb a8                	jmp    c001a2e6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a342:	f7 d0                	not    eax
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	c3                   	ret    

c001a348 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a348:	57                   	push   edi
c001a349:	56                   	push   esi
c001a34a:	53                   	push   ebx
c001a34b:	83 ec 60             	sub    esp,0x60
c001a34e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a355:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a359:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a361:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a366:	7f 1a                	jg     c001a382 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a368:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a36f:	8d 50 01             	lea    edx,[eax+0x1]
c001a372:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a379:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a37c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a380:	eb df                	jmp    c001a361 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a382:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a389:	8d 50 01             	lea    edx,[eax+0x1]
c001a38c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a393:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a396:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a39d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3a1:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a3a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3a9:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a3b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a3c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a3c5:	89 c6                	mov    esi,eax
c001a3c7:	89 d7                	mov    edi,edx
c001a3c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3cb:	89 c8                	mov    eax,ecx
c001a3cd:	89 fa                	mov    edx,edi
c001a3cf:	89 f3                	mov    ebx,esi
c001a3d1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a3d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a3d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3dc:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a3e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a3ef:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a3f7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a3ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a40b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a40f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a413:	89 c6                	mov    esi,eax
c001a415:	89 d7                	mov    edi,edx
c001a417:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a419:	89 c8                	mov    eax,ecx
c001a41b:	89 fa                	mov    edx,edi
c001a41d:	89 f3                	mov    ebx,esi
c001a41f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a423:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a427:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a42b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a433:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a43a:	0f b7 c0             	movzx  eax,ax
c001a43d:	c1 f8 08             	sar    eax,0x8
c001a440:	89 c1                	mov    ecx,eax
c001a442:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a449:	8d 50 01             	lea    edx,[eax+0x1]
c001a44c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a453:	88 ca                	mov    dl,cl
c001a455:	88 10                	mov    BYTE PTR [eax],dl
c001a457:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a45e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a465:	8d 48 01             	lea    ecx,[eax+0x1]
c001a468:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a46f:	88 10                	mov    BYTE PTR [eax],dl
c001a471:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a475:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a479:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a480:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a484:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a488:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a48c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a490:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a494:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a498:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a49c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a4a0:	89 c6                	mov    esi,eax
c001a4a2:	89 d7                	mov    edi,edx
c001a4a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4a6:	89 c8                	mov    eax,ecx
c001a4a8:	89 fa                	mov    edx,edi
c001a4aa:	89 f3                	mov    ebx,esi
c001a4ac:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a4b0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a4b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4b8:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4bc:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a4c3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4ca:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a4ce:	50                   	push   eax
c001a4cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a4d3:	e8 df fd ff ff       	call   c001a2b7 <Net::crc32Calc(unsigned char*, int)>
c001a4d8:	83 c4 08             	add    esp,0x8
c001a4db:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a4df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a4e3:	c1 e8 18             	shr    eax,0x18
c001a4e6:	89 c1                	mov    ecx,eax
c001a4e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4ef:	8d 50 01             	lea    edx,[eax+0x1]
c001a4f2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a4f9:	88 ca                	mov    dl,cl
c001a4fb:	88 10                	mov    BYTE PTR [eax],dl
c001a4fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a501:	c1 e8 10             	shr    eax,0x10
c001a504:	89 c1                	mov    ecx,eax
c001a506:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a50d:	8d 50 01             	lea    edx,[eax+0x1]
c001a510:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a517:	88 ca                	mov    dl,cl
c001a519:	88 10                	mov    BYTE PTR [eax],dl
c001a51b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a51f:	c1 e8 08             	shr    eax,0x8
c001a522:	89 c1                	mov    ecx,eax
c001a524:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a52b:	8d 50 01             	lea    edx,[eax+0x1]
c001a52e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a535:	88 ca                	mov    dl,cl
c001a537:	88 10                	mov    BYTE PTR [eax],dl
c001a539:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a540:	8d 50 01             	lea    edx,[eax+0x1]
c001a543:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a54a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a54e:	88 10                	mov    BYTE PTR [eax],dl
c001a550:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a554:	83 c4 60             	add    esp,0x60
c001a557:	5b                   	pop    ebx
c001a558:	5e                   	pop    esi
c001a559:	5f                   	pop    edi
c001a55a:	c3                   	ret    

c001a55b <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a55b:	57                   	push   edi
c001a55c:	56                   	push   esi
c001a55d:	53                   	push   ebx
c001a55e:	83 ec 70             	sub    esp,0x70
c001a561:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a568:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a56c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a574:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a57b:	83 c0 0e             	add    eax,0xe
c001a57e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a582:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a589:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a58d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a595:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a599:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a59d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5a5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a5a9:	89 c6                	mov    esi,eax
c001a5ab:	89 d7                	mov    edi,edx
c001a5ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5af:	89 c8                	mov    eax,ecx
c001a5b1:	89 fa                	mov    edx,edi
c001a5b3:	89 f3                	mov    ebx,esi
c001a5b5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a5b9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a5bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5c1:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5d0:	83 c0 08             	add    eax,0x8
c001a5d3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a5d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5de:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a5e2:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a5ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a5f6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a5fa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a5fe:	89 c6                	mov    esi,eax
c001a600:	89 d7                	mov    edi,edx
c001a602:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a604:	89 c8                	mov    eax,ecx
c001a606:	89 fa                	mov    edx,edi
c001a608:	89 f3                	mov    ebx,esi
c001a60a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a60e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a612:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a616:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a61e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a625:	8d 50 01             	lea    edx,[eax+0x1]
c001a628:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a62f:	8a 00                	mov    al,BYTE PTR [eax]
c001a631:	0f b6 c0             	movzx  eax,al
c001a634:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a639:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a640:	8d 50 01             	lea    edx,[eax+0x1]
c001a643:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a64a:	8a 00                	mov    al,BYTE PTR [eax]
c001a64c:	0f b6 c0             	movzx  eax,al
c001a64f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a654:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a659:	c1 e0 08             	shl    eax,0x8
c001a65c:	89 c2                	mov    edx,eax
c001a65e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a662:	09 d0                	or     eax,edx
c001a664:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a66b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a66f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a677:	75 46                	jne    c001a6bf <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a679:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a680:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a683:	66 3d dc 05          	cmp    ax,0x5dc
c001a687:	77 16                	ja     c001a69f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a689:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a690:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a693:	0f b7 c0             	movzx  eax,ax
c001a696:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a69d:	eb 20                	jmp    c001a6bf <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a69f:	83 ec 0c             	sub    esp,0xc
c001a6a2:	68 c8 b8 02 c0       	push   0xc002b8c8
c001a6a7:	e8 b3 80 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001a6ac:	83 c4 10             	add    esp,0x10
c001a6af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6b6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a6ba:	e9 17 01 00 00       	jmp    c001a7d6 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a6bf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6c6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a6cd:	8b 12                	mov    edx,DWORD PTR [edx]
c001a6cf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a6d3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a6da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a6de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a6f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6f6:	89 c6                	mov    esi,eax
c001a6f8:	89 d7                	mov    edi,edx
c001a6fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6fc:	89 c8                	mov    eax,ecx
c001a6fe:	89 fa                	mov    edx,edi
c001a700:	89 f3                	mov    ebx,esi
c001a702:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a706:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a70a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a70d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a714:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a71b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a722:	8d 50 01             	lea    edx,[eax+0x1]
c001a725:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a72c:	8a 00                	mov    al,BYTE PTR [eax]
c001a72e:	0f b6 c0             	movzx  eax,al
c001a731:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a735:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a73c:	8d 50 01             	lea    edx,[eax+0x1]
c001a73f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a746:	8a 00                	mov    al,BYTE PTR [eax]
c001a748:	0f b6 c0             	movzx  eax,al
c001a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a74f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a756:	8d 50 01             	lea    edx,[eax+0x1]
c001a759:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a760:	8a 00                	mov    al,BYTE PTR [eax]
c001a762:	0f b6 c0             	movzx  eax,al
c001a765:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a769:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a770:	8d 50 01             	lea    edx,[eax+0x1]
c001a773:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a77a:	8a 00                	mov    al,BYTE PTR [eax]
c001a77c:	0f b6 c0             	movzx  eax,al
c001a77f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a783:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a787:	c1 e0 18             	shl    eax,0x18
c001a78a:	89 c2                	mov    edx,eax
c001a78c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a790:	c1 e0 10             	shl    eax,0x10
c001a793:	09 c2                	or     edx,eax
c001a795:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a799:	c1 e0 08             	shl    eax,0x8
c001a79c:	09 d0                	or     eax,edx
c001a79e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a7a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a7a6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7ad:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a7b1:	83 e8 04             	sub    eax,0x4
c001a7b4:	83 ec 08             	sub    esp,0x8
c001a7b7:	50                   	push   eax
c001a7b8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a7bc:	e8 f6 fa ff ff       	call   c001a2b7 <Net::crc32Calc(unsigned char*, int)>
c001a7c1:	83 c4 10             	add    esp,0x10
c001a7c4:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a7c8:	0f 94 c2             	sete   dl
c001a7cb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7d2:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a7d5:	90                   	nop
c001a7d6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a7dd:	83 c4 70             	add    esp,0x70
c001a7e0:	5b                   	pop    ebx
c001a7e1:	5e                   	pop    esi
c001a7e2:	5f                   	pop    edi
c001a7e3:	c2 04 00             	ret    0x4

c001a7e6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a7e6:	55                   	push   ebp
c001a7e7:	57                   	push   edi
c001a7e8:	56                   	push   esi
c001a7e9:	53                   	push   ebx
c001a7ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7f0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a7f7:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a7f9:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a7fc:	80 fb 40             	cmp    bl,0x40
c001a7ff:	75 1b                	jne    c001a81c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a801:	8a 16                	mov    dl,BYTE PTR [esi]
c001a803:	84 d2                	test   dl,dl
c001a805:	0f 84 f1 00 00 00    	je     c001a8fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a80b:	8d 46 01             	lea    eax,[esi+0x1]
c001a80e:	80 fa 3a             	cmp    dl,0x3a
c001a811:	74 04                	je     c001a817 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a813:	89 c6                	mov    esi,eax
c001a815:	eb ea                	jmp    c001a801 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a817:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a81a:	89 c6                	mov    esi,eax
c001a81c:	50                   	push   eax
c001a81d:	6a 40                	push   0x40
c001a81f:	6a 00                	push   0x0
c001a821:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a825:	50                   	push   eax
c001a826:	e8 25 5f fe ff       	call   c0000750 <memset>
c001a82b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a832:	31 c0                	xor    eax,eax
c001a834:	83 c4 10             	add    esp,0x10
c001a837:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a839:	84 c9                	test   cl,cl
c001a83b:	0f 84 bb 00 00 00    	je     c001a8fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a841:	3d c7 00 00 00       	cmp    eax,0xc7
c001a846:	0f 8f b0 00 00 00    	jg     c001a8fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a84c:	80 f9 0a             	cmp    cl,0xa
c001a84f:	0f 85 98 00 00 00    	jne    c001a8ed <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a855:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a85a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a85e:	a8 df                	test   al,0xdf
c001a860:	0f 94 c1             	sete   cl
c001a863:	3c 23                	cmp    al,0x23
c001a865:	0f 94 c2             	sete   dl
c001a868:	08 d1                	or     cl,dl
c001a86a:	75 4a                	jne    c001a8b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a86c:	8d 50 f7             	lea    edx,[eax-0x9]
c001a86f:	80 fa 01             	cmp    dl,0x1
c001a872:	76 42                	jbe    c001a8b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a874:	3c 5b                	cmp    al,0x5b
c001a876:	75 42                	jne    c001a8ba <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a878:	80 fb 40             	cmp    bl,0x40
c001a87b:	75 39                	jne    c001a8b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a87d:	83 ec 0c             	sub    esp,0xc
c001a880:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a884:	52                   	push   edx
c001a885:	e8 e2 5e fe ff       	call   c000076c <strlen>
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	83 f8 3f             	cmp    eax,0x3f
c001a890:	77 6a                	ja     c001a8fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a892:	50                   	push   eax
c001a893:	50                   	push   eax
c001a894:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a898:	52                   	push   edx
c001a899:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a89d:	52                   	push   edx
c001a89e:	e8 69 5f fe ff       	call   c000080c <strcpy>
c001a8a3:	58                   	pop    eax
c001a8a4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a8a8:	52                   	push   edx
c001a8a9:	e8 be 5e fe ff       	call   c000076c <strlen>
c001a8ae:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a8b3:	83 c4 10             	add    esp,0x10
c001a8b6:	31 d2                	xor    edx,edx
c001a8b8:	eb 3a                	jmp    c001a8f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a8ba:	80 fb 40             	cmp    bl,0x40
c001a8bd:	74 06                	je     c001a8c5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a8bf:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a8c3:	eb 20                	jmp    c001a8e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a8c5:	50                   	push   eax
c001a8c6:	50                   	push   eax
c001a8c7:	55                   	push   ebp
c001a8c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8cc:	50                   	push   eax
c001a8cd:	e8 c6 5f fe ff       	call   c0000898 <strcmp>
c001a8d2:	83 c4 10             	add    esp,0x10
c001a8d5:	85 c0                	test   eax,eax
c001a8d7:	75 dd                	jne    c001a8b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8d9:	eb e4                	jmp    c001a8bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a8db:	8d 50 01             	lea    edx,[eax+0x1]
c001a8de:	80 f9 3d             	cmp    cl,0x3d
c001a8e1:	74 1d                	je     c001a900 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a8e3:	89 d0                	mov    eax,edx
c001a8e5:	8a 08                	mov    cl,BYTE PTR [eax]
c001a8e7:	84 c9                	test   cl,cl
c001a8e9:	75 f0                	jne    c001a8db <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a8eb:	eb 0f                	jmp    c001a8fc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8ed:	8d 50 01             	lea    edx,[eax+0x1]
c001a8f0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a8f4:	47                   	inc    edi
c001a8f5:	89 d0                	mov    eax,edx
c001a8f7:	e9 3b ff ff ff       	jmp    c001a837 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a8fc:	31 c0                	xor    eax,eax
c001a8fe:	eb 33                	jmp    c001a933 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a904:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a907:	50                   	push   eax
c001a908:	50                   	push   eax
c001a909:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a90d:	50                   	push   eax
c001a90e:	56                   	push   esi
c001a90f:	e8 84 5f fe ff       	call   c0000898 <strcmp>
c001a914:	83 c4 10             	add    esp,0x10
c001a917:	85 c0                	test   eax,eax
c001a919:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a91d:	75 97                	jne    c001a8b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a91f:	51                   	push   ecx
c001a920:	51                   	push   ecx
c001a921:	52                   	push   edx
c001a922:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a929:	e8 de 5e fe ff       	call   c000080c <strcpy>
c001a92e:	83 c4 10             	add    esp,0x10
c001a931:	b0 01                	mov    al,0x1
c001a933:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a939:	5b                   	pop    ebx
c001a93a:	5e                   	pop    esi
c001a93b:	5f                   	pop    edi
c001a93c:	5d                   	pop    ebp
c001a93d:	c3                   	ret    

c001a93e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a93e:	57                   	push   edi
c001a93f:	56                   	push   esi
c001a940:	53                   	push   ebx
c001a941:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a947:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a94e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a955:	53                   	push   ebx
c001a956:	e8 11 5e fe ff       	call   c000076c <strlen>
c001a95b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a95e:	89 c7                	mov    edi,eax
c001a960:	e8 07 5e fe ff       	call   c000076c <strlen>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a96c:	3d ff 00 00 00       	cmp    eax,0xff
c001a971:	0f 87 d3 00 00 00    	ja     c001aa4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a977:	57                   	push   edi
c001a978:	57                   	push   edi
c001a979:	56                   	push   esi
c001a97a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a97e:	56                   	push   esi
c001a97f:	e8 88 5e fe ff       	call   c000080c <strcpy>
c001a984:	58                   	pop    eax
c001a985:	5a                   	pop    edx
c001a986:	68 6a bc 02 c0       	push   0xc002bc6a
c001a98b:	56                   	push   esi
c001a98c:	e8 bb 5f fe ff       	call   c000094c <strcat>
c001a991:	59                   	pop    ecx
c001a992:	5f                   	pop    edi
c001a993:	53                   	push   ebx
c001a994:	56                   	push   esi
c001a995:	e8 b2 5f fe ff       	call   c000094c <strcat>
c001a99a:	58                   	pop    eax
c001a99b:	5a                   	pop    edx
c001a99c:	68 14 b9 02 c0       	push   0xc002b914
c001a9a1:	56                   	push   esi
c001a9a2:	e8 a5 5f fe ff       	call   c000094c <strcat>
c001a9a7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a9ae:	e8 e6 4b ff ff       	call   c000f599 <malloc>
c001a9b3:	83 c4 0c             	add    esp,0xc
c001a9b6:	89 c3                	mov    ebx,eax
c001a9b8:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c001a9be:	56                   	push   esi
c001a9bf:	50                   	push   eax
c001a9c0:	e8 f9 82 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001a9c5:	83 c4 10             	add    esp,0x10
c001a9c8:	85 db                	test   ebx,ebx
c001a9ca:	74 7e                	je     c001aa4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a9cc:	51                   	push   ecx
c001a9cd:	51                   	push   ecx
c001a9ce:	6a 01                	push   0x1
c001a9d0:	53                   	push   ebx
c001a9d1:	e8 4c 83 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001a9d6:	83 c4 10             	add    esp,0x10
c001a9d9:	85 c0                	test   eax,eax
c001a9db:	74 08                	je     c001a9e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a9dd:	83 ec 0c             	sub    esp,0xc
c001a9e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9e2:	53                   	push   ebx
c001a9e3:	eb 5f                	jmp    c001aa44 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a9e5:	52                   	push   edx
c001a9e6:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a9ea:	50                   	push   eax
c001a9eb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a9ef:	50                   	push   eax
c001a9f0:	53                   	push   ebx
c001a9f1:	e8 d8 85 ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c001a9f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a9fa:	83 c4 10             	add    esp,0x10
c001a9fd:	89 c1                	mov    ecx,eax
c001a9ff:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aa03:	74 31                	je     c001aa36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa05:	83 ec 0c             	sub    esp,0xc
c001aa08:	50                   	push   eax
c001aa09:	e8 8b 4b ff ff       	call   c000f599 <malloc>
c001aa0e:	89 c6                	mov    esi,eax
c001aa10:	58                   	pop    eax
c001aa11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa13:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aa17:	52                   	push   edx
c001aa18:	56                   	push   esi
c001aa19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa21:	53                   	push   ebx
c001aa22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa25:	83 c4 20             	add    esp,0x20
c001aa28:	85 c0                	test   eax,eax
c001aa2a:	75 0a                	jne    c001aa36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa30:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aa34:	74 18                	je     c001aa4e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aa36:	83 ec 0c             	sub    esp,0xc
c001aa39:	53                   	push   ebx
c001aa3a:	e8 41 83 ff ff       	call   c0012d80 <File::close()>
c001aa3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	31 c0                	xor    eax,eax
c001aa4c:	eb 3b                	jmp    c001aa89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aa4e:	83 ec 0c             	sub    esp,0xc
c001aa51:	53                   	push   ebx
c001aa52:	e8 29 83 ff ff       	call   c0012d80 <File::close()>
c001aa57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa5c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa5f:	83 c4 0c             	add    esp,0xc
c001aa62:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa69:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa70:	56                   	push   esi
c001aa71:	e8 70 fd ff ff       	call   c001a7e6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa76:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa79:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa7d:	e8 27 4b ff ff       	call   c000f5a9 <free>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa89:	81 c4 20 01 00 00    	add    esp,0x120
c001aa8f:	5b                   	pop    ebx
c001aa90:	5e                   	pop    esi
c001aa91:	5f                   	pop    edi
c001aa92:	c3                   	ret    

c001aa93 <Reg::getLine(char*, char*, char*)>:
c001aa93:	57                   	push   edi
c001aa94:	56                   	push   esi
c001aa95:	53                   	push   ebx
c001aa96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa9e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aaa2:	57                   	push   edi
c001aaa3:	56                   	push   esi
c001aaa4:	53                   	push   ebx
c001aaa5:	68 19 b9 02 c0       	push   0xc002b919
c001aaaa:	e8 8f fe ff ff       	call   c001a93e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aaaf:	83 c4 10             	add    esp,0x10
c001aab2:	84 c0                	test   al,al
c001aab4:	75 10                	jne    c001aac6 <Reg::getLine(char*, char*, char*)+0x33>
c001aab6:	57                   	push   edi
c001aab7:	56                   	push   esi
c001aab8:	53                   	push   ebx
c001aab9:	68 3e b9 02 c0       	push   0xc002b93e
c001aabe:	e8 7b fe ff ff       	call   c001a93e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aac3:	83 c4 10             	add    esp,0x10
c001aac6:	5b                   	pop    ebx
c001aac7:	5e                   	pop    esi
c001aac8:	5f                   	pop    edi
c001aac9:	c3                   	ret    

c001aaca <Reg::readInt(char*, char*, int*)>:
c001aaca:	55                   	push   ebp
c001aacb:	57                   	push   edi
c001aacc:	56                   	push   esi
c001aacd:	53                   	push   ebx
c001aace:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aad4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aad8:	57                   	push   edi
c001aad9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aae0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aae7:	e8 a7 ff ff ff       	call   c001aa93 <Reg::getLine(char*, char*, char*)>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	84 c0                	test   al,al
c001aaf1:	0f 84 b3 00 00 00    	je     c001abaa <Reg::readInt(char*, char*, int*)+0xe0>
c001aaf7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aafb:	80 fa 2b             	cmp    dl,0x2b
c001aafe:	74 0c                	je     c001ab0c <Reg::readInt(char*, char*, int*)+0x42>
c001ab00:	80 fa 2d             	cmp    dl,0x2d
c001ab03:	75 0e                	jne    c001ab13 <Reg::readInt(char*, char*, int*)+0x49>
c001ab05:	ba 01 00 00 00       	mov    edx,0x1
c001ab0a:	eb 0b                	jmp    c001ab17 <Reg::readInt(char*, char*, int*)+0x4d>
c001ab0c:	ba 01 00 00 00       	mov    edx,0x1
c001ab11:	eb 02                	jmp    c001ab15 <Reg::readInt(char*, char*, int*)+0x4b>
c001ab13:	31 d2                	xor    edx,edx
c001ab15:	31 c0                	xor    eax,eax
c001ab17:	be 0a 00 00 00       	mov    esi,0xa
c001ab1c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ab21:	75 20                	jne    c001ab43 <Reg::readInt(char*, char*, int*)+0x79>
c001ab23:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ab27:	80 f9 78             	cmp    cl,0x78
c001ab2a:	75 0a                	jne    c001ab36 <Reg::readInt(char*, char*, int*)+0x6c>
c001ab2c:	83 c2 02             	add    edx,0x2
c001ab2f:	be 10 00 00 00       	mov    esi,0x10
c001ab34:	eb 0d                	jmp    c001ab43 <Reg::readInt(char*, char*, int*)+0x79>
c001ab36:	80 f9 62             	cmp    cl,0x62
c001ab39:	75 08                	jne    c001ab43 <Reg::readInt(char*, char*, int*)+0x79>
c001ab3b:	83 c2 02             	add    edx,0x2
c001ab3e:	be 02 00 00 00       	mov    esi,0x2
c001ab43:	01 d7                	add    edi,edx
c001ab45:	31 d2                	xor    edx,edx
c001ab47:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ab49:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ab4d:	80 fb 0d             	cmp    bl,0xd
c001ab50:	0f 94 c3             	sete   bl
c001ab53:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ab58:	0f 94 c1             	sete   cl
c001ab5b:	08 cb                	or     bl,cl
c001ab5d:	75 3a                	jne    c001ab99 <Reg::readInt(char*, char*, int*)+0xcf>
c001ab5f:	0f af d6             	imul   edx,esi
c001ab62:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab67:	83 fe 10             	cmp    esi,0x10
c001ab6a:	75 26                	jne    c001ab92 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab6c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab70:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab73:	89 e9                	mov    ecx,ebp
c001ab75:	80 f9 05             	cmp    cl,0x5
c001ab78:	77 06                	ja     c001ab80 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab7a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab7e:	eb 16                	jmp    c001ab96 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab80:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab84:	83 e9 61             	sub    ecx,0x61
c001ab87:	80 f9 05             	cmp    cl,0x5
c001ab8a:	77 06                	ja     c001ab92 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab8c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab90:	eb 04                	jmp    c001ab96 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab92:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab96:	47                   	inc    edi
c001ab97:	eb ae                	jmp    c001ab47 <Reg::readInt(char*, char*, int*)+0x7d>
c001ab99:	84 c0                	test   al,al
c001ab9b:	74 02                	je     c001ab9f <Reg::readInt(char*, char*, int*)+0xd5>
c001ab9d:	f7 da                	neg    edx
c001ab9f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aba6:	89 10                	mov    DWORD PTR [eax],edx
c001aba8:	88 d8                	mov    al,bl
c001abaa:	81 c4 ec 00 00 00    	add    esp,0xec
c001abb0:	5b                   	pop    ebx
c001abb1:	5e                   	pop    esi
c001abb2:	5f                   	pop    edi
c001abb3:	5d                   	pop    ebp
c001abb4:	c3                   	ret    

c001abb5 <Reg::readString(char*, char*, char*, int)>:
c001abb5:	57                   	push   edi
c001abb6:	56                   	push   esi
c001abb7:	53                   	push   ebx
c001abb8:	81 ec d4 00 00 00    	sub    esp,0xd4
c001abbe:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001abc5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001abc9:	57                   	push   edi
c001abca:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001abd1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001abd8:	e8 b6 fe ff ff       	call   c001aa93 <Reg::getLine(char*, char*, char*)>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	89 c6                	mov    esi,eax
c001abe2:	84 c0                	test   al,al
c001abe4:	74 44                	je     c001ac2a <Reg::readString(char*, char*, char*, int)+0x75>
c001abe6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001abed:	31 c0                	xor    eax,eax
c001abef:	4a                   	dec    edx
c001abf0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001abf3:	84 c9                	test   cl,cl
c001abf5:	74 0f                	je     c001ac06 <Reg::readString(char*, char*, char*, int)+0x51>
c001abf7:	39 c2                	cmp    edx,eax
c001abf9:	7e 0b                	jle    c001ac06 <Reg::readString(char*, char*, char*, int)+0x51>
c001abfb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001abfe:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ac03:	40                   	inc    eax
c001ac04:	eb ea                	jmp    c001abf0 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ac06:	83 ec 0c             	sub    esp,0xc
c001ac09:	53                   	push   ebx
c001ac0a:	e8 5d 5b fe ff       	call   c000076c <strlen>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ac17:	75 11                	jne    c001ac2a <Reg::readString(char*, char*, char*, int)+0x75>
c001ac19:	83 ec 0c             	sub    esp,0xc
c001ac1c:	53                   	push   ebx
c001ac1d:	e8 4a 5b fe ff       	call   c000076c <strlen>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ac2a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ac30:	89 f0                	mov    eax,esi
c001ac32:	5b                   	pop    ebx
c001ac33:	5e                   	pop    esi
c001ac34:	5f                   	pop    edi
c001ac35:	c3                   	ret    

c001ac36 <Reg::readBool(char*, char*, bool*)>:
c001ac36:	83 ec 20             	sub    esp,0x20
c001ac39:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac3d:	50                   	push   eax
c001ac3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac46:	e8 7f fe ff ff       	call   c001aaca <Reg::readInt(char*, char*, int*)>
c001ac4b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac50:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac54:	0f 95 02             	setne  BYTE PTR [edx]
c001ac57:	83 c4 2c             	add    esp,0x2c
c001ac5a:	c3                   	ret    

c001ac5b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ac5b:	53                   	push   ebx
c001ac5c:	83 ec 1c             	sub    esp,0x1c
c001ac5f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac63:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac67:	50                   	push   eax
c001ac68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac70:	e8 c1 ff ff ff       	call   c001ac36 <Reg::readBool(char*, char*, bool*)>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	84 c0                	test   al,al
c001ac7a:	74 04                	je     c001ac80 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac7c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac80:	88 d8                	mov    al,bl
c001ac82:	83 c4 18             	add    esp,0x18
c001ac85:	5b                   	pop    ebx
c001ac86:	c3                   	ret    

c001ac87 <Reg::readIntWithDefault(char*, char*, int)>:
c001ac87:	53                   	push   ebx
c001ac88:	83 ec 1c             	sub    esp,0x1c
c001ac8b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac93:	50                   	push   eax
c001ac94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac9c:	e8 29 fe ff ff       	call   c001aaca <Reg::readInt(char*, char*, int*)>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	84 c0                	test   al,al
c001aca6:	74 04                	je     c001acac <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aca8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001acac:	89 d8                	mov    eax,ebx
c001acae:	83 c4 18             	add    esp,0x18
c001acb1:	5b                   	pop    ebx
c001acb2:	c3                   	ret    

c001acb3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001acb3:	57                   	push   edi
c001acb4:	56                   	push   esi
c001acb5:	56                   	push   esi
c001acb6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001acba:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001acbe:	56                   	push   esi
c001acbf:	57                   	push   edi
c001acc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acc8:	e8 e8 fe ff ff       	call   c001abb5 <Reg::readString(char*, char*, char*, int)>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	84 c0                	test   al,al
c001acd2:	75 1a                	jne    c001acee <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001acd4:	51                   	push   ecx
c001acd5:	56                   	push   esi
c001acd6:	6a 00                	push   0x0
c001acd8:	57                   	push   edi
c001acd9:	e8 72 5a fe ff       	call   c0000750 <memset>
c001acde:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ace1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ace5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001acee:	89 f8                	mov    eax,edi
c001acf0:	5a                   	pop    edx
c001acf1:	5e                   	pop    esi
c001acf2:	5f                   	pop    edi
c001acf3:	c3                   	ret    

c001acf4 <Sys::eject(regs*)>:
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	83 ca ff             	or     edx,0xffffffff
c001acfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ad01:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad06:	83 e9 41             	sub    ecx,0x41
c001ad09:	83 f9 19             	cmp    ecx,0x19
c001ad0c:	77 18                	ja     c001ad26 <Sys::eject(regs*)+0x32>
c001ad0e:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c001ad15:	85 c9                	test   ecx,ecx
c001ad17:	74 0d                	je     c001ad26 <Sys::eject(regs*)+0x32>
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	51                   	push   ecx
c001ad1d:	e8 28 b3 ff ff       	call   c001604a <LogicalDisk::eject()>
c001ad22:	83 c4 10             	add    esp,0x10
c001ad25:	99                   	cdq    
c001ad26:	83 c4 0c             	add    esp,0xc
c001ad29:	c3                   	ret    

c001ad2a <Sys::exit(regs*)>:
c001ad2a:	83 ec 18             	sub    esp,0x18
c001ad2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad31:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad34:	e8 c2 35 00 00       	call   c001e2fb <terminateTask(int)>
c001ad39:	83 c8 ff             	or     eax,0xffffffff
c001ad3c:	83 c4 1c             	add    esp,0x1c
c001ad3f:	89 c2                	mov    edx,eax
c001ad41:	c3                   	ret    

c001ad42 <Sys::getCwd(regs*)>:
c001ad42:	83 ec 10             	sub    esp,0x10
c001ad45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad49:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad4c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad54:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad57:	e8 64 7d ff ff       	call   c0012ac0 <Fs::getcwd(Process*, char*, int)>
c001ad5c:	83 c4 1c             	add    esp,0x1c
c001ad5f:	99                   	cdq    
c001ad60:	c3                   	ret    

c001ad61 <Sys::getPID(regs*)>:
c001ad61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad69:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad6b:	99                   	cdq    
c001ad6c:	c3                   	ret    

c001ad6d <Sys::getRAMData(regs*)>:
c001ad6d:	8b 0d b4 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dab4
c001ad73:	6b 05 b0 da 02 c0 64 	imul   eax,DWORD PTR ds:0xc002dab0,0x64
c001ad7a:	99                   	cdq    
c001ad7b:	f7 f9                	idiv   ecx
c001ad7d:	c1 e0 18             	shl    eax,0x18
c001ad80:	09 c8                	or     eax,ecx
c001ad82:	99                   	cdq    
c001ad83:	c3                   	ret    

c001ad84 <Sys::getVGAPtr(regs*)>:
c001ad84:	55                   	push   ebp
c001ad85:	57                   	push   edi
c001ad86:	56                   	push   esi
c001ad87:	53                   	push   ebx
c001ad88:	83 ec 18             	sub    esp,0x18
c001ad8b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad8f:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ad92:	e8 b0 30 00 00       	call   c001de47 <Thr::processFromPID(int)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	89 c1                	mov    ecx,eax
c001ad9c:	b8 01 00 00 00       	mov    eax,0x1
c001ada1:	85 c9                	test   ecx,ecx
c001ada3:	74 59                	je     c001adfe <Sys::getVGAPtr(regs*)+0x7a>
c001ada5:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001adab:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001adaf:	74 0c                	je     c001adbd <Sys::getVGAPtr(regs*)+0x39>
c001adb1:	83 ec 0c             	sub    esp,0xc
c001adb4:	53                   	push   ebx
c001adb5:	e8 99 55 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001adba:	83 c4 10             	add    esp,0x10
c001adbd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001adc0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001adc3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001adc8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001adcd:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001add0:	81 c3 82 00 00 00    	add    ebx,0x82
c001add6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001addc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001addf:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ade2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ade8:	50                   	push   eax
c001ade9:	50                   	push   eax
c001adea:	53                   	push   ebx
c001adeb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001adee:	05 a8 0f 00 00       	add    eax,0xfa8
c001adf3:	50                   	push   eax
c001adf4:	e8 13 5a fe ff       	call   c000080c <strcpy>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	31 c0                	xor    eax,eax
c001adfe:	83 c4 0c             	add    esp,0xc
c001ae01:	31 d2                	xor    edx,edx
c001ae03:	5b                   	pop    ebx
c001ae04:	5e                   	pop    esi
c001ae05:	5f                   	pop    edi
c001ae06:	5d                   	pop    ebp
c001ae07:	c3                   	ret    

c001ae08 <Sys::loadDLL(regs*)>:
c001ae08:	56                   	push   esi
c001ae09:	53                   	push   ebx
c001ae0a:	31 d2                	xor    edx,edx
c001ae0c:	51                   	push   ecx
c001ae0d:	b8 01 00 00 00       	mov    eax,0x1
c001ae12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae16:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ae1a:	0f 84 8c 00 00 00    	je     c001aeac <Sys::loadDLL(regs*)+0xa4>
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	68 14 01 00 00       	push   0x114
c001ae28:	e8 6c 47 ff ff       	call   c000f599 <malloc>
c001ae2d:	83 c4 0c             	add    esp,0xc
c001ae30:	89 c3                	mov    ebx,eax
c001ae32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae37:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae3a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae3d:	53                   	push   ebx
c001ae3e:	e8 7b 7e ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	31 d2                	xor    edx,edx
c001ae48:	b8 02 00 00 00       	mov    eax,0x2
c001ae4d:	85 db                	test   ebx,ebx
c001ae4f:	74 5b                	je     c001aeac <Sys::loadDLL(regs*)+0xa4>
c001ae51:	83 ec 0c             	sub    esp,0xc
c001ae54:	53                   	push   ebx
c001ae55:	e8 36 81 ff ff       	call   c0012f90 <File::exists()>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	84 c0                	test   al,al
c001ae5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae61:	75 11                	jne    c001ae74 <Sys::loadDLL(regs*)+0x6c>
c001ae63:	83 ec 0c             	sub    esp,0xc
c001ae66:	53                   	push   ebx
c001ae67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae6a:	83 c4 10             	add    esp,0x10
c001ae6d:	b8 03 00 00 00       	mov    eax,0x3
c001ae72:	eb 36                	jmp    c001aeaa <Sys::loadDLL(regs*)+0xa2>
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	53                   	push   ebx
c001ae78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae7b:	58                   	pop    eax
c001ae7c:	5a                   	pop    edx
c001ae7d:	6a 00                	push   0x0
c001ae7f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae82:	e8 0e 22 00 00       	call   c001d095 <Thr::loadDLL(char const*, bool)>
c001ae87:	83 c4 10             	add    esp,0x10
c001ae8a:	89 c1                	mov    ecx,eax
c001ae8c:	31 d2                	xor    edx,edx
c001ae8e:	b8 04 00 00 00       	mov    eax,0x4
c001ae93:	85 c9                	test   ecx,ecx
c001ae95:	74 15                	je     c001aeac <Sys::loadDLL(regs*)+0xa4>
c001ae97:	53                   	push   ebx
c001ae98:	53                   	push   ebx
c001ae99:	ff 35 68 da 02 c0    	push   DWORD PTR ds:0xc002da68
c001ae9f:	51                   	push   ecx
c001aea0:	e8 21 24 00 00       	call   c001d2c6 <Thr::executeDLL(unsigned long, void*)>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	31 c0                	xor    eax,eax
c001aeaa:	31 d2                	xor    edx,edx
c001aeac:	59                   	pop    ecx
c001aead:	5b                   	pop    ebx
c001aeae:	5e                   	pop    esi
c001aeaf:	c3                   	ret    

c001aeb0 <Sys::read(regs*)>:
c001aeb0:	57                   	push   edi
c001aeb1:	56                   	push   esi
c001aeb2:	53                   	push   ebx
c001aeb3:	83 ec 10             	sub    esp,0x10
c001aeb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aebd:	83 f8 02             	cmp    eax,0x2
c001aec0:	77 10                	ja     c001aed2 <Sys::read(regs*)+0x22>
c001aec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aec7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aeca:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001aed0:	eb 0e                	jmp    c001aee0 <Sys::read(regs*)+0x30>
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	50                   	push   eax
c001aed6:	e8 ec 61 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001aedb:	83 c4 10             	add    esp,0x10
c001aede:	89 c1                	mov    ecx,eax
c001aee0:	83 c8 ff             	or     eax,0xffffffff
c001aee3:	85 c9                	test   ecx,ecx
c001aee5:	89 c2                	mov    edx,eax
c001aee7:	74 28                	je     c001af11 <Sys::read(regs*)+0x61>
c001aee9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aef1:	31 ff                	xor    edi,edi
c001aef3:	83 ec 0c             	sub    esp,0xc
c001aef6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aef8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001aefc:	52                   	push   edx
c001aefd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af00:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af03:	57                   	push   edi
c001af04:	56                   	push   esi
c001af05:	51                   	push   ecx
c001af06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af0d:	83 c4 20             	add    esp,0x20
c001af10:	99                   	cdq    
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	5b                   	pop    ebx
c001af15:	5e                   	pop    esi
c001af16:	5f                   	pop    edi
c001af17:	c3                   	ret    

c001af18 <Sys::sbrk(regs*)>:
c001af18:	56                   	push   esi
c001af19:	53                   	push   ebx
c001af1a:	50                   	push   eax
c001af1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af27:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001af2a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001af30:	85 db                	test   ebx,ebx
c001af32:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001af35:	74 02                	je     c001af39 <Sys::sbrk(regs*)+0x21>
c001af37:	79 06                	jns    c001af3f <Sys::sbrk(regs*)+0x27>
c001af39:	89 f0                	mov    eax,esi
c001af3b:	31 d2                	xor    edx,edx
c001af3d:	eb 2a                	jmp    c001af69 <Sys::sbrk(regs*)+0x51>
c001af3f:	83 c8 ff             	or     eax,0xffffffff
c001af42:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001af48:	89 c2                	mov    edx,eax
c001af4a:	77 1d                	ja     c001af69 <Sys::sbrk(regs*)+0x51>
c001af4c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001af52:	50                   	push   eax
c001af53:	c1 ea 0c             	shr    edx,0xc
c001af56:	68 07 0c 00 00       	push   0xc07
c001af5b:	52                   	push   edx
c001af5c:	51                   	push   ecx
c001af5d:	e8 c4 6b ff ff       	call   c0011b26 <VAS::allocatePages(int, int)>
c001af62:	89 f0                	mov    eax,esi
c001af64:	31 d2                	xor    edx,edx
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	59                   	pop    ecx
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	c3                   	ret    

c001af6d <Sys::setCwd(regs*)>:
c001af6d:	83 ec 14             	sub    esp,0x14
c001af70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af74:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001af77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af7c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af7f:	e8 ab 80 ff ff       	call   c001302f <Fs::setcwd(Process*, char*)>
c001af84:	83 c4 1c             	add    esp,0x1c
c001af87:	99                   	cdq    
c001af88:	c3                   	ret    

c001af89 <Sys::setTime(regs*)>:
c001af89:	55                   	push   ebp
c001af8a:	31 c9                	xor    ecx,ecx
c001af8c:	57                   	push   edi
c001af8d:	bd 0c 00 00 00       	mov    ebp,0xc
c001af92:	56                   	push   esi
c001af93:	53                   	push   ebx
c001af94:	31 db                	xor    ebx,ebx
c001af96:	83 ec 10             	sub    esp,0x10
c001af99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af9d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001afa0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001afa3:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001afa6:	89 c2                	mov    edx,eax
c001afa8:	66 81 ef 6c 07       	sub    di,0x76c
c001afad:	83 e2 1f             	and    edx,0x1f
c001afb0:	c1 e7 10             	shl    edi,0x10
c001afb3:	42                   	inc    edx
c001afb4:	c1 e8 05             	shr    eax,0x5
c001afb7:	88 d1                	mov    cl,dl
c001afb9:	31 d2                	xor    edx,edx
c001afbb:	f7 f5                	div    ebp
c001afbd:	89 dd                	mov    ebp,ebx
c001afbf:	88 d5                	mov    ch,dl
c001afc1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001afc7:	0f b7 c1             	movzx  eax,cx
c001afca:	31 d2                	xor    edx,edx
c001afcc:	09 f8                	or     eax,edi
c001afce:	bf 3c 00 00 00       	mov    edi,0x3c
c001afd3:	89 c1                	mov    ecx,eax
c001afd5:	89 f0                	mov    eax,esi
c001afd7:	f7 f7                	div    edi
c001afd9:	c1 e2 10             	shl    edx,0x10
c001afdc:	09 d5                	or     ebp,edx
c001afde:	31 d2                	xor    edx,edx
c001afe0:	89 eb                	mov    ebx,ebp
c001afe2:	f7 f7                	div    edi
c001afe4:	bf 10 0e 00 00       	mov    edi,0xe10
c001afe9:	88 d7                	mov    bh,dl
c001afeb:	89 f0                	mov    eax,esi
c001afed:	31 d2                	xor    edx,edx
c001afef:	f7 f7                	div    edi
c001aff1:	bf 18 00 00 00       	mov    edi,0x18
c001aff6:	31 d2                	xor    edx,edx
c001aff8:	f7 f7                	div    edi
c001affa:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001afff:	88 d3                	mov    bl,dl
c001b001:	53                   	push   ebx
c001b002:	51                   	push   ecx
c001b003:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b009:	e8 6a 88 ff ff       	call   c0013878 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b00e:	83 c4 1c             	add    esp,0x1c
c001b011:	83 f0 01             	xor    eax,0x1
c001b014:	5b                   	pop    ebx
c001b015:	0f b6 c0             	movzx  eax,al
c001b018:	5e                   	pop    esi
c001b019:	31 d2                	xor    edx,edx
c001b01b:	5f                   	pop    edi
c001b01c:	5d                   	pop    ebp
c001b01d:	c3                   	ret    

c001b01e <Sys::timezone(regs*)>:
c001b01e:	53                   	push   ebx
c001b01f:	83 ec 08             	sub    esp,0x8
c001b022:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b026:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b02a:	75 17                	jne    c001b043 <Sys::timezone(regs*)+0x25>
c001b02c:	83 ec 0c             	sub    esp,0xc
c001b02f:	68 59 b9 02 c0       	push   0xc002b959
c001b034:	e8 26 77 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001b039:	83 c8 ff             	or     eax,0xffffffff
c001b03c:	83 c4 10             	add    esp,0x10
c001b03f:	89 c2                	mov    edx,eax
c001b041:	eb 20                	jmp    c001b063 <Sys::timezone(regs*)+0x45>
c001b043:	83 ec 0c             	sub    esp,0xc
c001b046:	68 6e b9 02 c0       	push   0xc002b96e
c001b04b:	e8 0f 77 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001b050:	58                   	pop    eax
c001b051:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b054:	e8 81 85 ff ff       	call   c00135da <User::loadClockSettings(int)>
c001b059:	83 c4 10             	add    esp,0x10
c001b05c:	b8 01 00 00 00       	mov    eax,0x1
c001b061:	31 d2                	xor    edx,edx
c001b063:	83 c4 08             	add    esp,0x8
c001b066:	5b                   	pop    ebx
c001b067:	c3                   	ret    

c001b068 <Sys::write(regs*)>:
c001b068:	57                   	push   edi
c001b069:	56                   	push   esi
c001b06a:	53                   	push   ebx
c001b06b:	83 ec 10             	sub    esp,0x10
c001b06e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b072:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b075:	83 f8 02             	cmp    eax,0x2
c001b078:	77 10                	ja     c001b08a <Sys::write(regs*)+0x22>
c001b07a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b07f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b082:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b088:	eb 0e                	jmp    c001b098 <Sys::write(regs*)+0x30>
c001b08a:	83 ec 0c             	sub    esp,0xc
c001b08d:	50                   	push   eax
c001b08e:	e8 34 60 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b093:	83 c4 10             	add    esp,0x10
c001b096:	89 c1                	mov    ecx,eax
c001b098:	83 c8 ff             	or     eax,0xffffffff
c001b09b:	85 c9                	test   ecx,ecx
c001b09d:	89 c2                	mov    edx,eax
c001b09f:	74 28                	je     c001b0c9 <Sys::write(regs*)+0x61>
c001b0a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0a9:	31 ff                	xor    edi,edi
c001b0ab:	83 ec 0c             	sub    esp,0xc
c001b0ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0b0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b0b4:	52                   	push   edx
c001b0b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0b8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b0bb:	57                   	push   edi
c001b0bc:	56                   	push   esi
c001b0bd:	51                   	push   ecx
c001b0be:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b0c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0c5:	83 c4 20             	add    esp,0x20
c001b0c8:	99                   	cdq    
c001b0c9:	83 c4 10             	add    esp,0x10
c001b0cc:	5b                   	pop    ebx
c001b0cd:	5e                   	pop    esi
c001b0ce:	5f                   	pop    edi
c001b0cf:	c3                   	ret    

c001b0d0 <Sys::wsbe(regs*)>:
c001b0d0:	57                   	push   edi
c001b0d1:	b9 0b 00 00 00       	mov    ecx,0xb
c001b0d6:	56                   	push   esi
c001b0d7:	be ad b9 02 c0       	mov    esi,0xc002b9ad
c001b0dc:	53                   	push   ebx
c001b0dd:	83 ec 30             	sub    esp,0x30
c001b0e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b0e4:	fc                   	cld    
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b0ea:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0f6:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b0fc:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0fe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b101:	57                   	push   edi
c001b102:	e8 65 56 fe ff       	call   c000076c <strlen>
c001b107:	5a                   	pop    edx
c001b108:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b10c:	52                   	push   edx
c001b10d:	31 d2                	xor    edx,edx
c001b10f:	57                   	push   edi
c001b110:	52                   	push   edx
c001b111:	50                   	push   eax
c001b112:	56                   	push   esi
c001b113:	ff d3                	call   ebx
c001b115:	83 c4 14             	add    esp,0x14
c001b118:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b11c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b11f:	e8 d7 31 00 00       	call   c001e2fb <terminateTask(int)>
c001b124:	83 c4 40             	add    esp,0x40
c001b127:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b12c:	5b                   	pop    ebx
c001b12d:	31 d2                	xor    edx,edx
c001b12f:	5e                   	pop    esi
c001b130:	5f                   	pop    edi
c001b131:	c3                   	ret    

c001b132 <Sys::yield(regs*)>:
c001b132:	57                   	push   edi
c001b133:	56                   	push   esi
c001b134:	53                   	push   ebx
c001b135:	fa                   	cli    
c001b136:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001b13c:	e8 1a 29 00 00       	call   c001da5b <schedule()>
c001b141:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001b146:	48                   	dec    eax
c001b147:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001b14c:	75 01                	jne    c001b14f <Sys::yield(regs*)+0x1d>
c001b14e:	fb                   	sti    
c001b14f:	8b 35 d0 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0d0
c001b155:	8b 3d d4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0d4
c001b15b:	89 f0                	mov    eax,esi
c001b15d:	89 fb                	mov    ebx,edi
c001b15f:	89 f1                	mov    ecx,esi
c001b161:	c1 e0 07             	shl    eax,0x7
c001b164:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b168:	25 80 30 0f 00       	and    eax,0xf3080
c001b16d:	c1 eb 17             	shr    ebx,0x17
c001b170:	31 c8                	xor    eax,ecx
c001b172:	89 da                	mov    edx,ebx
c001b174:	5b                   	pop    ebx
c001b175:	5e                   	pop    esi
c001b176:	5f                   	pop    edi
c001b177:	c3                   	ret    

c001b178 <sysCallSeekDir(regs*)>:
c001b178:	31 c0                	xor    eax,eax
c001b17a:	31 d2                	xor    edx,edx
c001b17c:	c3                   	ret    

c001b17d <sysCallTellDir(regs*)>:
c001b17d:	31 c0                	xor    eax,eax
c001b17f:	31 d2                	xor    edx,edx
c001b181:	c3                   	ret    

c001b182 <sysCallVerify(regs*)>:
c001b182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b186:	31 d2                	xor    edx,edx
c001b188:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b18b:	c3                   	ret    

c001b18c <sysCallGetArgc(regs*)>:
c001b18c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b191:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b194:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b19a:	99                   	cdq    
c001b19b:	c3                   	ret    

c001b19c <sysFormatDisk(regs*)>:
c001b19c:	56                   	push   esi
c001b19d:	53                   	push   ebx
c001b19e:	53                   	push   ebx
c001b19f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1a3:	8b 1d d4 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbd4
c001b1a9:	eb 25                	jmp    c001b1d0 <sysFormatDisk(regs*)+0x34>
c001b1ab:	83 ec 0c             	sub    esp,0xc
c001b1ae:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b1b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1b3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b1b6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b1b9:	50                   	push   eax
c001b1ba:	ff 34 85 60 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1fa0]
c001b1c1:	53                   	push   ebx
c001b1c2:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b1c5:	83 c4 20             	add    esp,0x20
c001b1c8:	83 f8 08             	cmp    eax,0x8
c001b1cb:	75 12                	jne    c001b1df <sysFormatDisk(regs*)+0x43>
c001b1cd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b1d0:	85 db                	test   ebx,ebx
c001b1d2:	75 d7                	jne    c001b1ab <sysFormatDisk(regs*)+0xf>
c001b1d4:	59                   	pop    ecx
c001b1d5:	b8 03 00 00 00       	mov    eax,0x3
c001b1da:	31 d2                	xor    edx,edx
c001b1dc:	5b                   	pop    ebx
c001b1dd:	5e                   	pop    esi
c001b1de:	c3                   	ret    
c001b1df:	85 c0                	test   eax,eax
c001b1e1:	74 1b                	je     c001b1fe <sysFormatDisk(regs*)+0x62>
c001b1e3:	83 f8 09             	cmp    eax,0x9
c001b1e6:	74 0b                	je     c001b1f3 <sysFormatDisk(regs*)+0x57>
c001b1e8:	59                   	pop    ecx
c001b1e9:	b8 02 00 00 00       	mov    eax,0x2
c001b1ee:	31 d2                	xor    edx,edx
c001b1f0:	5b                   	pop    ebx
c001b1f1:	5e                   	pop    esi
c001b1f2:	c3                   	ret    
c001b1f3:	59                   	pop    ecx
c001b1f4:	b8 01 00 00 00       	mov    eax,0x1
c001b1f9:	31 d2                	xor    edx,edx
c001b1fb:	5b                   	pop    ebx
c001b1fc:	5e                   	pop    esi
c001b1fd:	c3                   	ret    
c001b1fe:	59                   	pop    ecx
c001b1ff:	31 c0                	xor    eax,eax
c001b201:	31 d2                	xor    edx,edx
c001b203:	5b                   	pop    ebx
c001b204:	5e                   	pop    esi
c001b205:	c3                   	ret    

c001b206 <sysSetDiskVolumeLabel(regs*)>:
c001b206:	56                   	push   esi
c001b207:	53                   	push   ebx
c001b208:	53                   	push   ebx
c001b209:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b20d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b210:	83 f8 19             	cmp    eax,0x19
c001b213:	77 29                	ja     c001b23e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b215:	8b 0c 85 60 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1fa0]
c001b21c:	85 c9                	test   ecx,ecx
c001b21e:	74 1e                	je     c001b23e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b220:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b223:	85 d2                	test   edx,edx
c001b225:	74 17                	je     c001b23e <sysSetDiskVolumeLabel(regs*)+0x38>
c001b227:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b22d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b22f:	52                   	push   edx
c001b230:	50                   	push   eax
c001b231:	51                   	push   ecx
c001b232:	53                   	push   ebx
c001b233:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b236:	83 c4 10             	add    esp,0x10
c001b239:	99                   	cdq    
c001b23a:	59                   	pop    ecx
c001b23b:	5b                   	pop    ebx
c001b23c:	5e                   	pop    esi
c001b23d:	c3                   	ret    
c001b23e:	59                   	pop    ecx
c001b23f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b244:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b249:	5b                   	pop    ebx
c001b24a:	5e                   	pop    esi
c001b24b:	c3                   	ret    

c001b24c <sysGetDiskVolumeLabel(regs*)>:
c001b24c:	57                   	push   edi
c001b24d:	56                   	push   esi
c001b24e:	53                   	push   ebx
c001b24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b253:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b256:	83 fa 19             	cmp    edx,0x19
c001b259:	77 34                	ja     c001b28f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b25b:	8b 0c 95 60 e0 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1fa0]
c001b262:	85 c9                	test   ecx,ecx
c001b264:	74 29                	je     c001b28f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b266:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b269:	85 db                	test   ebx,ebx
c001b26b:	74 22                	je     c001b28f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b26d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b270:	85 c0                	test   eax,eax
c001b272:	74 1b                	je     c001b28f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b274:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b27a:	83 ec 0c             	sub    esp,0xc
c001b27d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b27f:	50                   	push   eax
c001b280:	53                   	push   ebx
c001b281:	52                   	push   edx
c001b282:	51                   	push   ecx
c001b283:	56                   	push   esi
c001b284:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b287:	83 c4 20             	add    esp,0x20
c001b28a:	99                   	cdq    
c001b28b:	5b                   	pop    ebx
c001b28c:	5e                   	pop    esi
c001b28d:	5f                   	pop    edi
c001b28e:	c3                   	ret    
c001b28f:	5b                   	pop    ebx
c001b290:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b295:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b29a:	5e                   	pop    esi
c001b29b:	5f                   	pop    edi
c001b29c:	c3                   	ret    

c001b29d <sysShutdown(regs*)>:
c001b29d:	83 ec 0c             	sub    esp,0xc
c001b2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2a7:	85 c0                	test   eax,eax
c001b2a9:	74 18                	je     c001b2c3 <sysShutdown(regs*)+0x26>
c001b2ab:	83 f8 01             	cmp    eax,0x1
c001b2ae:	74 38                	je     c001b2e8 <sysShutdown(regs*)+0x4b>
c001b2b0:	83 f8 02             	cmp    eax,0x2
c001b2b3:	74 24                	je     c001b2d9 <sysShutdown(regs*)+0x3c>
c001b2b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2bf:	83 c4 0c             	add    esp,0xc
c001b2c2:	c3                   	ret    
c001b2c3:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001b2c8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2ca:	6a 00                	push   0x0
c001b2cc:	6a 00                	push   0x0
c001b2ce:	6a 00                	push   0x0
c001b2d0:	50                   	push   eax
c001b2d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2d4:	83 c4 10             	add    esp,0x10
c001b2d7:	eb dc                	jmp    c001b2b5 <sysShutdown(regs*)+0x18>
c001b2d9:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001b2de:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2e0:	6a 00                	push   0x0
c001b2e2:	6a 00                	push   0x0
c001b2e4:	6a 01                	push   0x1
c001b2e6:	eb e8                	jmp    c001b2d0 <sysShutdown(regs*)+0x33>
c001b2e8:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001b2ed:	85 c0                	test   eax,eax
c001b2ef:	74 02                	je     c001b2f3 <sysShutdown(regs*)+0x56>
c001b2f1:	ff d0                	call   eax
c001b2f3:	31 c0                	xor    eax,eax
c001b2f5:	31 d2                	xor    edx,edx
c001b2f7:	83 c4 0c             	add    esp,0xc
c001b2fa:	c3                   	ret    

c001b2fb <sysCallRealpath(regs*)>:
c001b2fb:	83 ec 0c             	sub    esp,0xc
c001b2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b302:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b305:	85 d2                	test   edx,edx
c001b307:	74 07                	je     c001b310 <sysCallRealpath(regs*)+0x15>
c001b309:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b30c:	85 c0                	test   eax,eax
c001b30e:	75 0b                	jne    c001b31b <sysCallRealpath(regs*)+0x20>
c001b310:	b8 01 00 00 00       	mov    eax,0x1
c001b315:	31 d2                	xor    edx,edx
c001b317:	83 c4 0c             	add    esp,0xc
c001b31a:	c3                   	ret    
c001b31b:	51                   	push   ecx
c001b31c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b322:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b325:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b32b:	51                   	push   ecx
c001b32c:	52                   	push   edx
c001b32d:	50                   	push   eax
c001b32e:	e8 e1 77 ff ff       	call   c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b333:	83 c4 10             	add    esp,0x10
c001b336:	31 c0                	xor    eax,eax
c001b338:	31 d2                	xor    edx,edx
c001b33a:	83 c4 0c             	add    esp,0xc
c001b33d:	c3                   	ret    

c001b33e <sysCallReadDir(regs*)>:
c001b33e:	53                   	push   ebx
c001b33f:	83 ec 18             	sub    esp,0x18
c001b342:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b346:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b349:	83 f8 02             	cmp    eax,0x2
c001b34c:	76 60                	jbe    c001b3ae <sysCallReadDir(regs*)+0x70>
c001b34e:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b355:	77 48                	ja     c001b39f <sysCallReadDir(regs*)+0x61>
c001b357:	83 ec 0c             	sub    esp,0xc
c001b35a:	50                   	push   eax
c001b35b:	e8 67 5d ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b360:	83 c4 10             	add    esp,0x10
c001b363:	85 c0                	test   eax,eax
c001b365:	74 38                	je     c001b39f <sysCallReadDir(regs*)+0x61>
c001b367:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b36f:	83 ec 0c             	sub    esp,0xc
c001b372:	8b 10                	mov    edx,DWORD PTR [eax]
c001b374:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b378:	51                   	push   ecx
c001b379:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b37c:	6a 00                	push   0x0
c001b37e:	68 10 01 00 00       	push   0x110
c001b383:	50                   	push   eax
c001b384:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b387:	83 c4 20             	add    esp,0x20
c001b38a:	85 c0                	test   eax,eax
c001b38c:	74 29                	je     c001b3b7 <sysCallReadDir(regs*)+0x79>
c001b38e:	83 f8 07             	cmp    eax,0x7
c001b391:	74 1b                	je     c001b3ae <sysCallReadDir(regs*)+0x70>
c001b393:	b8 02 00 00 00       	mov    eax,0x2
c001b398:	31 d2                	xor    edx,edx
c001b39a:	83 c4 18             	add    esp,0x18
c001b39d:	5b                   	pop    ebx
c001b39e:	c3                   	ret    
c001b39f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3a9:	83 c4 18             	add    esp,0x18
c001b3ac:	5b                   	pop    ebx
c001b3ad:	c3                   	ret    
c001b3ae:	b8 01 00 00 00       	mov    eax,0x1
c001b3b3:	31 d2                	xor    edx,edx
c001b3b5:	eb e3                	jmp    c001b39a <sysCallReadDir(regs*)+0x5c>
c001b3b7:	31 c0                	xor    eax,eax
c001b3b9:	31 d2                	xor    edx,edx
c001b3bb:	eb dd                	jmp    c001b39a <sysCallReadDir(regs*)+0x5c>

c001b3bd <sysCallIsATTY(regs*)>:
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3c7:	83 f8 02             	cmp    eax,0x2
c001b3ca:	76 07                	jbe    c001b3d3 <sysCallIsATTY(regs*)+0x16>
c001b3cc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3d1:	75 26                	jne    c001b3f9 <sysCallIsATTY(regs*)+0x3c>
c001b3d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3db:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b3e1:	85 c0                	test   eax,eax
c001b3e3:	74 24                	je     c001b409 <sysCallIsATTY(regs*)+0x4c>
c001b3e5:	83 ec 0c             	sub    esp,0xc
c001b3e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3ea:	50                   	push   eax
c001b3eb:	ff 12                	call   DWORD PTR [edx]
c001b3ed:	31 d2                	xor    edx,edx
c001b3ef:	0f b6 c0             	movzx  eax,al
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	83 c4 0c             	add    esp,0xc
c001b3f8:	c3                   	ret    
c001b3f9:	83 ec 0c             	sub    esp,0xc
c001b3fc:	50                   	push   eax
c001b3fd:	e8 c5 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	85 c0                	test   eax,eax
c001b407:	75 dc                	jne    c001b3e5 <sysCallIsATTY(regs*)+0x28>
c001b409:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b40e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b413:	83 c4 0c             	add    esp,0xc
c001b416:	c3                   	ret    

c001b417 <sysCallSeek(regs*)>:
c001b417:	53                   	push   ebx
c001b418:	83 ec 08             	sub    esp,0x8
c001b41b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b41f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b422:	8d 50 fd             	lea    edx,[eax-0x3]
c001b425:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b42b:	77 32                	ja     c001b45f <sysCallSeek(regs*)+0x48>
c001b42d:	83 ec 0c             	sub    esp,0xc
c001b430:	50                   	push   eax
c001b431:	e8 91 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b436:	83 c4 0c             	add    esp,0xc
c001b439:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b43c:	31 db                	xor    ebx,ebx
c001b43e:	53                   	push   ebx
c001b43f:	51                   	push   ecx
c001b440:	50                   	push   eax
c001b441:	e8 9a 79 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	85 c0                	test   eax,eax
c001b44b:	0f 95 c0             	setne  al
c001b44e:	31 d2                	xor    edx,edx
c001b450:	0f b6 c0             	movzx  eax,al
c001b453:	f7 d8                	neg    eax
c001b455:	83 d2 00             	adc    edx,0x0
c001b458:	83 c4 08             	add    esp,0x8
c001b45b:	f7 da                	neg    edx
c001b45d:	5b                   	pop    ebx
c001b45e:	c3                   	ret    
c001b45f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b464:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b469:	83 c4 08             	add    esp,0x8
c001b46c:	5b                   	pop    ebx
c001b46d:	c3                   	ret    

c001b46e <sysCallTell(regs*)>:
c001b46e:	53                   	push   ebx
c001b46f:	83 ec 08             	sub    esp,0x8
c001b472:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b476:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b479:	83 f8 02             	cmp    eax,0x2
c001b47c:	76 4d                	jbe    c001b4cb <sysCallTell(regs*)+0x5d>
c001b47e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b483:	76 19                	jbe    c001b49e <sysCallTell(regs*)+0x30>
c001b485:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b488:	31 d2                	xor    edx,edx
c001b48a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b490:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b497:	31 c0                	xor    eax,eax
c001b499:	83 c4 08             	add    esp,0x8
c001b49c:	5b                   	pop    ebx
c001b49d:	c3                   	ret    
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	50                   	push   eax
c001b4a2:	e8 20 5c ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b4a7:	5a                   	pop    edx
c001b4a8:	59                   	pop    ecx
c001b4a9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4ac:	50                   	push   eax
c001b4ad:	e8 84 79 ff ff       	call   c0012e36 <File::tell(unsigned long long*)>
c001b4b2:	83 c4 10             	add    esp,0x10
c001b4b5:	85 c0                	test   eax,eax
c001b4b7:	0f 95 c0             	setne  al
c001b4ba:	31 d2                	xor    edx,edx
c001b4bc:	0f b6 c0             	movzx  eax,al
c001b4bf:	f7 d8                	neg    eax
c001b4c1:	83 d2 00             	adc    edx,0x0
c001b4c4:	83 c4 08             	add    esp,0x8
c001b4c7:	f7 da                	neg    edx
c001b4c9:	5b                   	pop    ebx
c001b4ca:	c3                   	ret    
c001b4cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4d5:	83 c4 08             	add    esp,0x8
c001b4d8:	5b                   	pop    ebx
c001b4d9:	c3                   	ret    

c001b4da <sysCallSize(regs*)>:
c001b4da:	53                   	push   ebx
c001b4db:	83 ec 18             	sub    esp,0x18
c001b4de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4e5:	83 f8 02             	cmp    eax,0x2
c001b4e8:	76 53                	jbe    c001b53d <sysCallSize(regs*)+0x63>
c001b4ea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4ef:	76 19                	jbe    c001b50a <sysCallSize(regs*)+0x30>
c001b4f1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b4f4:	31 d2                	xor    edx,edx
c001b4f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b503:	31 c0                	xor    eax,eax
c001b505:	83 c4 18             	add    esp,0x18
c001b508:	5b                   	pop    ebx
c001b509:	c3                   	ret    
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	50                   	push   eax
c001b50e:	e8 b4 5b ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b513:	83 c4 0c             	add    esp,0xc
c001b516:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b51a:	52                   	push   edx
c001b51b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b51e:	50                   	push   eax
c001b51f:	e8 aa 7a ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c001b524:	83 c4 10             	add    esp,0x10
c001b527:	85 c0                	test   eax,eax
c001b529:	0f 95 c0             	setne  al
c001b52c:	31 d2                	xor    edx,edx
c001b52e:	0f b6 c0             	movzx  eax,al
c001b531:	f7 d8                	neg    eax
c001b533:	83 d2 00             	adc    edx,0x0
c001b536:	83 c4 18             	add    esp,0x18
c001b539:	f7 da                	neg    edx
c001b53b:	5b                   	pop    ebx
c001b53c:	c3                   	ret    
c001b53d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b542:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b547:	83 c4 18             	add    esp,0x18
c001b54a:	5b                   	pop    ebx
c001b54b:	c3                   	ret    

c001b54c <sysCallSizeFromFilename(regs*)>:
c001b54c:	57                   	push   edi
c001b54d:	56                   	push   esi
c001b54e:	53                   	push   ebx
c001b54f:	83 ec 20             	sub    esp,0x20
c001b552:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b556:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b559:	83 fb 02             	cmp    ebx,0x2
c001b55c:	0f 86 88 00 00 00    	jbe    c001b5ea <sysCallSizeFromFilename(regs*)+0x9e>
c001b562:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b568:	76 1b                	jbe    c001b585 <sysCallSizeFromFilename(regs*)+0x39>
c001b56a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b56d:	31 d2                	xor    edx,edx
c001b56f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b575:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b57c:	83 c4 20             	add    esp,0x20
c001b57f:	31 c0                	xor    eax,eax
c001b581:	5b                   	pop    ebx
c001b582:	5e                   	pop    esi
c001b583:	5f                   	pop    edi
c001b584:	c3                   	ret    
c001b585:	83 ec 0c             	sub    esp,0xc
c001b588:	68 14 01 00 00       	push   0x114
c001b58d:	e8 07 40 ff ff       	call   c000f599 <malloc>
c001b592:	83 c4 0c             	add    esp,0xc
c001b595:	89 c7                	mov    edi,eax
c001b597:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b59c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b59f:	53                   	push   ebx
c001b5a0:	57                   	push   edi
c001b5a1:	e8 18 77 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001b5a6:	83 c4 0c             	add    esp,0xc
c001b5a9:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b5ad:	50                   	push   eax
c001b5ae:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5b1:	57                   	push   edi
c001b5b2:	e8 17 7a ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	85 ff                	test   edi,edi
c001b5bc:	74 14                	je     c001b5d2 <sysCallSizeFromFilename(regs*)+0x86>
c001b5be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5c2:	8b 17                	mov    edx,DWORD PTR [edi]
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	57                   	push   edi
c001b5c8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5cb:	83 c4 10             	add    esp,0x10
c001b5ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5d2:	85 c0                	test   eax,eax
c001b5d4:	0f 95 c0             	setne  al
c001b5d7:	31 d2                	xor    edx,edx
c001b5d9:	0f b6 c0             	movzx  eax,al
c001b5dc:	f7 d8                	neg    eax
c001b5de:	83 d2 00             	adc    edx,0x0
c001b5e1:	83 c4 20             	add    esp,0x20
c001b5e4:	f7 da                	neg    edx
c001b5e6:	5b                   	pop    ebx
c001b5e7:	5e                   	pop    esi
c001b5e8:	5f                   	pop    edi
c001b5e9:	c3                   	ret    
c001b5ea:	83 c4 20             	add    esp,0x20
c001b5ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5f2:	5b                   	pop    ebx
c001b5f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5f8:	5e                   	pop    esi
c001b5f9:	5f                   	pop    edi
c001b5fa:	c3                   	ret    

c001b5fb <sysCallClose(regs*)>:
c001b5fb:	53                   	push   ebx
c001b5fc:	83 ec 08             	sub    esp,0x8
c001b5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b603:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b606:	83 f8 02             	cmp    eax,0x2
c001b609:	76 41                	jbe    c001b64c <sysCallClose(regs*)+0x51>
c001b60b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b611:	83 fa 01             	cmp    edx,0x1
c001b614:	76 2d                	jbe    c001b643 <sysCallClose(regs*)+0x48>
c001b616:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b61b:	77 2f                	ja     c001b64c <sysCallClose(regs*)+0x51>
c001b61d:	83 ec 0c             	sub    esp,0xc
c001b620:	50                   	push   eax
c001b621:	e8 a1 5a ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b626:	89 c3                	mov    ebx,eax
c001b628:	89 04 24             	mov    DWORD PTR [esp],eax
c001b62b:	e8 50 77 ff ff       	call   c0012d80 <File::close()>
c001b630:	83 c4 10             	add    esp,0x10
c001b633:	85 db                	test   ebx,ebx
c001b635:	74 0c                	je     c001b643 <sysCallClose(regs*)+0x48>
c001b637:	83 ec 0c             	sub    esp,0xc
c001b63a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b63c:	53                   	push   ebx
c001b63d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	31 c0                	xor    eax,eax
c001b645:	31 d2                	xor    edx,edx
c001b647:	83 c4 08             	add    esp,0x8
c001b64a:	5b                   	pop    ebx
c001b64b:	c3                   	ret    
c001b64c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b651:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b656:	83 c4 08             	add    esp,0x8
c001b659:	5b                   	pop    ebx
c001b65a:	c3                   	ret    

c001b65b <sysCallOpenDir(regs*)>:
c001b65b:	56                   	push   esi
c001b65c:	53                   	push   ebx
c001b65d:	53                   	push   ebx
c001b65e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b662:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b665:	85 f6                	test   esi,esi
c001b667:	74 59                	je     c001b6c2 <sysCallOpenDir(regs*)+0x67>
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	68 14 01 00 00       	push   0x114
c001b671:	e8 23 3f ff ff       	call   c000f599 <malloc>
c001b676:	83 c4 0c             	add    esp,0xc
c001b679:	89 c6                	mov    esi,eax
c001b67b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b680:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b683:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b686:	56                   	push   esi
c001b687:	e8 de 7a ff ff       	call   c001316a <Directory::Directory(char const*, Process*)>
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	85 f6                	test   esi,esi
c001b691:	74 2f                	je     c001b6c2 <sysCallOpenDir(regs*)+0x67>
c001b693:	83 ec 0c             	sub    esp,0xc
c001b696:	56                   	push   esi
c001b697:	e8 32 7b ff ff       	call   c00131ce <Directory::open()>
c001b69c:	83 c4 10             	add    esp,0x10
c001b69f:	85 c0                	test   eax,eax
c001b6a1:	75 1f                	jne    c001b6c2 <sysCallOpenDir(regs*)+0x67>
c001b6a3:	83 ec 0c             	sub    esp,0xc
c001b6a6:	56                   	push   esi
c001b6a7:	e8 26 57 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001b6ac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	89 02                	mov    DWORD PTR [edx],eax
c001b6b4:	c1 f8 1f             	sar    eax,0x1f
c001b6b7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b6ba:	31 c0                	xor    eax,eax
c001b6bc:	59                   	pop    ecx
c001b6bd:	31 d2                	xor    edx,edx
c001b6bf:	5b                   	pop    ebx
c001b6c0:	5e                   	pop    esi
c001b6c1:	c3                   	ret    
c001b6c2:	59                   	pop    ecx
c001b6c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6cd:	5b                   	pop    ebx
c001b6ce:	5e                   	pop    esi
c001b6cf:	c3                   	ret    

c001b6d0 <sysCallCloseDir(regs*)>:
c001b6d0:	53                   	push   ebx
c001b6d1:	83 ec 08             	sub    esp,0x8
c001b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b6db:	8d 50 fd             	lea    edx,[eax-0x3]
c001b6de:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b6e4:	77 2f                	ja     c001b715 <sysCallCloseDir(regs*)+0x45>
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	50                   	push   eax
c001b6ea:	e8 d8 59 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b6ef:	89 c3                	mov    ebx,eax
c001b6f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6f4:	e8 31 7b ff ff       	call   c001322a <Directory::close()>
c001b6f9:	83 c4 10             	add    esp,0x10
c001b6fc:	85 db                	test   ebx,ebx
c001b6fe:	74 0c                	je     c001b70c <sysCallCloseDir(regs*)+0x3c>
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b705:	53                   	push   ebx
c001b706:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b709:	83 c4 10             	add    esp,0x10
c001b70c:	31 c0                	xor    eax,eax
c001b70e:	31 d2                	xor    edx,edx
c001b710:	83 c4 08             	add    esp,0x8
c001b713:	5b                   	pop    ebx
c001b714:	c3                   	ret    
c001b715:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b71a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b71f:	83 c4 08             	add    esp,0x8
c001b722:	5b                   	pop    ebx
c001b723:	c3                   	ret    

c001b724 <sysCallMakeDir(regs*)>:
c001b724:	56                   	push   esi
c001b725:	53                   	push   ebx
c001b726:	83 ec 10             	sub    esp,0x10
c001b729:	68 14 01 00 00       	push   0x114
c001b72e:	e8 66 3e ff ff       	call   c000f599 <malloc>
c001b733:	83 c4 0c             	add    esp,0xc
c001b736:	89 c3                	mov    ebx,eax
c001b738:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b744:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b747:	53                   	push   ebx
c001b748:	e8 1d 7a ff ff       	call   c001316a <Directory::Directory(char const*, Process*)>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	85 db                	test   ebx,ebx
c001b752:	74 32                	je     c001b786 <sysCallMakeDir(regs*)+0x62>
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	53                   	push   ebx
c001b758:	e8 51 7c ff ff       	call   c00133ae <Directory::create()>
c001b75d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b760:	89 c6                	mov    esi,eax
c001b762:	e8 c3 7a ff ff       	call   c001322a <Directory::close()>
c001b767:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b769:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b76c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b76f:	83 c4 10             	add    esp,0x10
c001b772:	31 c0                	xor    eax,eax
c001b774:	59                   	pop    ecx
c001b775:	85 f6                	test   esi,esi
c001b777:	5b                   	pop    ebx
c001b778:	0f 95 c0             	setne  al
c001b77b:	5e                   	pop    esi
c001b77c:	31 d2                	xor    edx,edx
c001b77e:	f7 d8                	neg    eax
c001b780:	83 d2 00             	adc    edx,0x0
c001b783:	f7 da                	neg    edx
c001b785:	c3                   	ret    
c001b786:	59                   	pop    ecx
c001b787:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b78c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b791:	5b                   	pop    ebx
c001b792:	5e                   	pop    esi
c001b793:	c3                   	ret    

c001b794 <sysCallWait(regs*)>:
c001b794:	83 ec 10             	sub    esp,0x10
c001b797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b79b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b79e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7a1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7a4:	e8 b5 24 00 00       	call   c001dc5e <waitTask(int, int*, int)>
c001b7a9:	83 c4 1c             	add    esp,0x1c
c001b7ac:	99                   	cdq    
c001b7ad:	c3                   	ret    

c001b7ae <sysCallNotImpl(regs*)>:
c001b7ae:	83 ec 18             	sub    esp,0x18
c001b7b1:	68 d9 b9 02 c0       	push   0xc002b9d9
c001b7b6:	e8 10 e7 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001b7bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c5:	83 c4 1c             	add    esp,0x1c
c001b7c8:	c3                   	ret    

c001b7c9 <sysPanic(regs*)>:
c001b7c9:	83 ec 18             	sub    esp,0x18
c001b7cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7d0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7d3:	e8 f3 e6 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001b7d8:	b8 01 00 00 00       	mov    eax,0x1
c001b7dd:	31 d2                	xor    edx,edx
c001b7df:	83 c4 1c             	add    esp,0x1c
c001b7e2:	c3                   	ret    

c001b7e3 <sysCallRmdir(regs*)>:
c001b7e3:	56                   	push   esi
c001b7e4:	53                   	push   ebx
c001b7e5:	83 ec 20             	sub    esp,0x20
c001b7e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7ec:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7ef:	68 14 01 00 00       	push   0x114
c001b7f4:	e8 a0 3d ff ff       	call   c000f599 <malloc>
c001b7f9:	83 c4 0c             	add    esp,0xc
c001b7fc:	89 c3                	mov    ebx,eax
c001b7fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b803:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b806:	56                   	push   esi
c001b807:	53                   	push   ebx
c001b808:	e8 b1 74 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001b80d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b810:	e8 85 76 ff ff       	call   c0012e9a <File::unlink()>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	85 db                	test   ebx,ebx
c001b81a:	74 14                	je     c001b830 <sysCallRmdir(regs*)+0x4d>
c001b81c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b820:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b822:	83 ec 0c             	sub    esp,0xc
c001b825:	53                   	push   ebx
c001b826:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b829:	83 c4 10             	add    esp,0x10
c001b82c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b830:	85 c0                	test   eax,eax
c001b832:	0f 95 c0             	setne  al
c001b835:	31 d2                	xor    edx,edx
c001b837:	0f b6 c0             	movzx  eax,al
c001b83a:	f7 d8                	neg    eax
c001b83c:	83 d2 00             	adc    edx,0x0
c001b83f:	83 c4 14             	add    esp,0x14
c001b842:	f7 da                	neg    edx
c001b844:	5b                   	pop    ebx
c001b845:	5e                   	pop    esi
c001b846:	c3                   	ret    

c001b847 <sysCallUnlink(regs*)>:
c001b847:	56                   	push   esi
c001b848:	53                   	push   ebx
c001b849:	83 ec 20             	sub    esp,0x20
c001b84c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b850:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b853:	68 14 01 00 00       	push   0x114
c001b858:	e8 3c 3d ff ff       	call   c000f599 <malloc>
c001b85d:	83 c4 0c             	add    esp,0xc
c001b860:	89 c3                	mov    ebx,eax
c001b862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b867:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b86a:	56                   	push   esi
c001b86b:	53                   	push   ebx
c001b86c:	e8 4d 74 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001b871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b874:	e8 21 76 ff ff       	call   c0012e9a <File::unlink()>
c001b879:	83 c4 10             	add    esp,0x10
c001b87c:	85 db                	test   ebx,ebx
c001b87e:	74 14                	je     c001b894 <sysCallUnlink(regs*)+0x4d>
c001b880:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b884:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b886:	83 ec 0c             	sub    esp,0xc
c001b889:	53                   	push   ebx
c001b88a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b88d:	83 c4 10             	add    esp,0x10
c001b890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b894:	85 c0                	test   eax,eax
c001b896:	0f 95 c0             	setne  al
c001b899:	31 d2                	xor    edx,edx
c001b89b:	0f b6 c0             	movzx  eax,al
c001b89e:	f7 d8                	neg    eax
c001b8a0:	83 d2 00             	adc    edx,0x0
c001b8a3:	83 c4 14             	add    esp,0x14
c001b8a6:	f7 da                	neg    edx
c001b8a8:	5b                   	pop    ebx
c001b8a9:	5e                   	pop    esi
c001b8aa:	c3                   	ret    

c001b8ab <sysCallGetArgv(regs*)>:
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8b2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b8b5:	85 c0                	test   eax,eax
c001b8b7:	78 2b                	js     c001b8e4 <sysCallGetArgv(regs*)+0x39>
c001b8b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8bf:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8c2:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b8c8:	7d 1a                	jge    c001b8e4 <sysCallGetArgv(regs*)+0x39>
c001b8ca:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b8d1:	85 c0                	test   eax,eax
c001b8d3:	74 17                	je     c001b8ec <sysCallGetArgv(regs*)+0x41>
c001b8d5:	83 ec 08             	sub    esp,0x8
c001b8d8:	50                   	push   eax
c001b8d9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b8dc:	e8 2b 4f fe ff       	call   c000080c <strcpy>
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	31 c0                	xor    eax,eax
c001b8e6:	31 d2                	xor    edx,edx
c001b8e8:	83 c4 0c             	add    esp,0xc
c001b8eb:	c3                   	ret    
c001b8ec:	b8 01 00 00 00       	mov    eax,0x1
c001b8f1:	31 d2                	xor    edx,edx
c001b8f3:	83 c4 0c             	add    esp,0xc
c001b8f6:	c3                   	ret    

c001b8f7 <sysCallTTYName(regs*)>:
c001b8f7:	56                   	push   esi
c001b8f8:	53                   	push   ebx
c001b8f9:	53                   	push   ebx
c001b8fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8fe:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b901:	85 c0                	test   eax,eax
c001b903:	74 5f                	je     c001b964 <sysCallTTYName(regs*)+0x6d>
c001b905:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b908:	83 f8 02             	cmp    eax,0x2
c001b90b:	77 3e                	ja     c001b94b <sysCallTTYName(regs*)+0x54>
c001b90d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b912:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b915:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b91b:	85 db                	test   ebx,ebx
c001b91d:	74 45                	je     c001b964 <sysCallTTYName(regs*)+0x6d>
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b924:	53                   	push   ebx
c001b925:	ff 10                	call   DWORD PTR [eax]
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	84 c0                	test   al,al
c001b92c:	74 41                	je     c001b96f <sysCallTTYName(regs*)+0x78>
c001b92e:	83 ec 08             	sub    esp,0x8
c001b931:	81 c3 82 00 00 00    	add    ebx,0x82
c001b937:	53                   	push   ebx
c001b938:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b93b:	e8 cc 4e fe ff       	call   c000080c <strcpy>
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	31 c0                	xor    eax,eax
c001b945:	59                   	pop    ecx
c001b946:	31 d2                	xor    edx,edx
c001b948:	5b                   	pop    ebx
c001b949:	5e                   	pop    esi
c001b94a:	c3                   	ret    
c001b94b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b950:	74 bb                	je     c001b90d <sysCallTTYName(regs*)+0x16>
c001b952:	83 ec 0c             	sub    esp,0xc
c001b955:	50                   	push   eax
c001b956:	e8 6c 57 ff ff       	call   c00110c7 <getFromFileDescriptor(int)>
c001b95b:	83 c4 10             	add    esp,0x10
c001b95e:	89 c3                	mov    ebx,eax
c001b960:	85 db                	test   ebx,ebx
c001b962:	75 bb                	jne    c001b91f <sysCallTTYName(regs*)+0x28>
c001b964:	59                   	pop    ecx
c001b965:	b8 01 00 00 00       	mov    eax,0x1
c001b96a:	31 d2                	xor    edx,edx
c001b96c:	5b                   	pop    ebx
c001b96d:	5e                   	pop    esi
c001b96e:	c3                   	ret    
c001b96f:	59                   	pop    ecx
c001b970:	b8 02 00 00 00       	mov    eax,0x2
c001b975:	31 d2                	xor    edx,edx
c001b977:	5b                   	pop    ebx
c001b978:	5e                   	pop    esi
c001b979:	c3                   	ret    

c001b97a <sysCallUSleep(regs*)>:
c001b97a:	83 ec 14             	sub    esp,0x14
c001b97d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b986:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b98d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b990:	01 ca                	add    edx,ecx
c001b992:	52                   	push   edx
c001b993:	50                   	push   eax
c001b994:	e8 9c 23 00 00       	call   c001dd35 <nanoSleep(unsigned long long)>
c001b999:	31 c0                	xor    eax,eax
c001b99b:	31 d2                	xor    edx,edx
c001b99d:	83 c4 1c             	add    esp,0x1c
c001b9a0:	c3                   	ret    

c001b9a1 <sysCallSpawn(regs*)>:
c001b9a1:	56                   	push   esi
c001b9a2:	53                   	push   ebx
c001b9a3:	50                   	push   eax
c001b9a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b9ab:	85 c0                	test   eax,eax
c001b9ad:	75 08                	jne    c001b9b7 <sysCallSpawn(regs*)+0x16>
c001b9af:	59                   	pop    ecx
c001b9b0:	31 c0                	xor    eax,eax
c001b9b2:	31 d2                	xor    edx,edx
c001b9b4:	5b                   	pop    ebx
c001b9b5:	5e                   	pop    esi
c001b9b6:	c3                   	ret    
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	68 3f 07 00 00       	push   0x73f
c001b9bf:	e8 d5 3b ff ff       	call   c000f599 <malloc>
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	89 c6                	mov    esi,eax
c001b9c9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b9cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9cf:	85 c0                	test   eax,eax
c001b9d1:	75 32                	jne    c001ba05 <sysCallSpawn(regs*)+0x64>
c001b9d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9db:	52                   	push   edx
c001b9dc:	50                   	push   eax
c001b9dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9e0:	56                   	push   esi
c001b9e1:	e8 74 1a 00 00       	call   c001d45a <Process::Process(char const*, Process*, char**)>
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b9f0:	75 bd                	jne    c001b9af <sysCallSpawn(regs*)+0xe>
c001b9f2:	83 ec 0c             	sub    esp,0xc
c001b9f5:	56                   	push   esi
c001b9f6:	e8 41 1f 00 00       	call   c001d93c <Process::createUserThread()>
c001b9fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	99                   	cdq    
c001ba01:	59                   	pop    ecx
c001ba02:	5b                   	pop    ebx
c001ba03:	5e                   	pop    esi
c001ba04:	c3                   	ret    
c001ba05:	31 c0                	xor    eax,eax
c001ba07:	eb d2                	jmp    c001b9db <sysCallSpawn(regs*)+0x3a>

c001ba09 <sysCallGetEnv(regs*)>:
c001ba09:	57                   	push   edi
c001ba0a:	56                   	push   esi
c001ba0b:	53                   	push   ebx
c001ba0c:	83 ec 1c             	sub    esp,0x1c
c001ba0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba18:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001ba1b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001ba1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba21:	e8 f1 e3 ff ff       	call   c0019e17 <Krnl::getProcessTotalEnvCount(Process*)>
c001ba26:	83 c4 10             	add    esp,0x10
c001ba29:	39 c7                	cmp    edi,eax
c001ba2b:	7c 14                	jl     c001ba41 <sysCallGetEnv(regs*)+0x38>
c001ba2d:	85 f6                	test   esi,esi
c001ba2f:	75 0b                	jne    c001ba3c <sysCallGetEnv(regs*)+0x33>
c001ba31:	83 c4 10             	add    esp,0x10
c001ba34:	31 c0                	xor    eax,eax
c001ba36:	5b                   	pop    ebx
c001ba37:	31 d2                	xor    edx,edx
c001ba39:	5e                   	pop    esi
c001ba3a:	5f                   	pop    edi
c001ba3b:	c3                   	ret    
c001ba3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba3f:	eb f0                	jmp    c001ba31 <sysCallGetEnv(regs*)+0x28>
c001ba41:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba45:	52                   	push   edx
c001ba46:	57                   	push   edi
c001ba47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ba4d:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001ba50:	50                   	push   eax
c001ba51:	e8 e1 e3 ff ff       	call   c0019e37 <Krnl::getProcessEnvPair(Process*, int)>
c001ba56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba5d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba61:	83 c4 0c             	add    esp,0xc
c001ba64:	85 c9                	test   ecx,ecx
c001ba66:	75 23                	jne    c001ba8b <sysCallGetEnv(regs*)+0x82>
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	50                   	push   eax
c001ba6c:	e8 fb 4c fe ff       	call   c000076c <strlen>
c001ba71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba74:	89 c3                	mov    ebx,eax
c001ba76:	e8 f1 4c fe ff       	call   c000076c <strlen>
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	31 d2                	xor    edx,edx
c001ba87:	5b                   	pop    ebx
c001ba88:	5e                   	pop    esi
c001ba89:	5f                   	pop    edi
c001ba8a:	c3                   	ret    
c001ba8b:	83 ec 08             	sub    esp,0x8
c001ba8e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba91:	50                   	push   eax
c001ba92:	56                   	push   esi
c001ba93:	e8 74 4d fe ff       	call   c000080c <strcpy>
c001ba98:	58                   	pop    eax
c001ba99:	5a                   	pop    edx
c001ba9a:	68 f3 b9 02 c0       	push   0xc002b9f3
c001ba9f:	56                   	push   esi
c001baa0:	e8 a7 4e fe ff       	call   c000094c <strcat>
c001baa5:	59                   	pop    ecx
c001baa6:	5b                   	pop    ebx
c001baa7:	57                   	push   edi
c001baa8:	56                   	push   esi
c001baa9:	e8 9e 4e fe ff       	call   c000094c <strcat>
c001baae:	83 c4 10             	add    esp,0x10
c001bab1:	e9 7b ff ff ff       	jmp    c001ba31 <sysCallGetEnv(regs*)+0x28>

c001bab6 <sysAppSettings(regs*)>:
c001bab6:	57                   	push   edi
c001bab7:	56                   	push   esi
c001bab8:	56                   	push   esi
c001bab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bac0:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bac6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bacb:	66 3d c0 09          	cmp    ax,0x9c0
c001bacf:	75 2e                	jne    c001baff <sysAppSettings(regs*)+0x49>
c001bad1:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bad7:	83 e0 1f             	and    eax,0x1f
c001bada:	3c 01                	cmp    al,0x1
c001badc:	74 2c                	je     c001bb0a <sysAppSettings(regs*)+0x54>
c001bade:	3c 07                	cmp    al,0x7
c001bae0:	0f 84 b3 00 00 00    	je     c001bb99 <sysAppSettings(regs*)+0xe3>
c001bae6:	84 c0                	test   al,al
c001bae8:	0f 84 d2 00 00 00    	je     c001bbc0 <sysAppSettings(regs*)+0x10a>
c001baee:	3c 08                	cmp    al,0x8
c001baf0:	74 63                	je     c001bb55 <sysAppSettings(regs*)+0x9f>
c001baf2:	59                   	pop    ecx
c001baf3:	0f b6 c0             	movzx  eax,al
c001baf6:	5e                   	pop    esi
c001baf7:	05 e8 03 00 00       	add    eax,0x3e8
c001bafc:	5f                   	pop    edi
c001bafd:	99                   	cdq    
c001bafe:	c3                   	ret    
c001baff:	b8 01 00 00 00       	mov    eax,0x1
c001bb04:	59                   	pop    ecx
c001bb05:	31 d2                	xor    edx,edx
c001bb07:	5e                   	pop    esi
c001bb08:	5f                   	pop    edi
c001bb09:	c3                   	ret    
c001bb0a:	50                   	push   eax
c001bb0b:	68 00 01 00 00       	push   0x100
c001bb10:	6a 00                	push   0x0
c001bb12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb1a:	83 c0 0c             	add    eax,0xc
c001bb1d:	50                   	push   eax
c001bb1e:	e8 2d 4c fe ff       	call   c0000750 <memset>
c001bb23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb28:	b9 ff 00 00 00       	mov    ecx,0xff
c001bb2d:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bb30:	83 c7 0c             	add    edi,0xc
c001bb33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb3a:	5a                   	pop    edx
c001bb3b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb3e:	59                   	pop    ecx
c001bb3f:	8d 50 0c             	lea    edx,[eax+0xc]
c001bb42:	52                   	push   edx
c001bb43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb49:	e8 a4 46 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	31 c0                	xor    eax,eax
c001bb53:	eb af                	jmp    c001bb04 <sysAppSettings(regs*)+0x4e>
c001bb55:	83 ec 08             	sub    esp,0x8
c001bb58:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb5e:	83 e0 0f             	and    eax,0xf
c001bb61:	50                   	push   eax
c001bb62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb70:	e8 6d 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bb75:	5f                   	pop    edi
c001bb76:	58                   	pop    eax
c001bb77:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb7d:	c1 e8 04             	shr    eax,0x4
c001bb80:	83 e0 0f             	and    eax,0xf
c001bb83:	50                   	push   eax
c001bb84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb92:	e8 3b 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bb97:	eb b5                	jmp    c001bb4e <sysAppSettings(regs*)+0x98>
c001bb99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bba1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bba7:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bbad:	c0 e8 06             	shr    al,0x6
c001bbb0:	83 e0 01             	and    eax,0x1
c001bbb3:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bbb9:	31 c0                	xor    eax,eax
c001bbbb:	e9 44 ff ff ff       	jmp    c001bb04 <sysAppSettings(regs*)+0x4e>
c001bbc0:	b8 02 00 00 00       	mov    eax,0x2
c001bbc5:	e9 3a ff ff ff       	jmp    c001bb04 <sysAppSettings(regs*)+0x4e>

c001bbca <sysSetFatAttrib(regs*)>:
c001bbca:	57                   	push   edi
c001bbcb:	56                   	push   esi
c001bbcc:	53                   	push   ebx
c001bbcd:	83 ec 1c             	sub    esp,0x1c
c001bbd0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bbd4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bbd7:	68 14 01 00 00       	push   0x114
c001bbdc:	e8 b8 39 ff ff       	call   c000f599 <malloc>
c001bbe1:	83 c4 0c             	add    esp,0xc
c001bbe4:	89 c3                	mov    ebx,eax
c001bbe6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbeb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbee:	57                   	push   edi
c001bbef:	53                   	push   ebx
c001bbf0:	e8 c9 70 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001bbf5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bbf8:	83 c4 0c             	add    esp,0xc
c001bbfb:	0f b6 d4             	movzx  edx,ah
c001bbfe:	0f b6 c0             	movzx  eax,al
c001bc01:	52                   	push   edx
c001bc02:	50                   	push   eax
c001bc03:	53                   	push   ebx
c001bc04:	e8 2b 73 ff ff       	call   c0012f34 <File::chfatattr(unsigned char, unsigned char)>
c001bc09:	83 c4 10             	add    esp,0x10
c001bc0c:	85 db                	test   ebx,ebx
c001bc0e:	74 14                	je     c001bc24 <sysSetFatAttrib(regs*)+0x5a>
c001bc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc14:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	53                   	push   ebx
c001bc1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc24:	85 c0                	test   eax,eax
c001bc26:	0f 95 c0             	setne  al
c001bc29:	31 d2                	xor    edx,edx
c001bc2b:	0f b6 c0             	movzx  eax,al
c001bc2e:	f7 d8                	neg    eax
c001bc30:	83 d2 00             	adc    edx,0x0
c001bc33:	83 c4 10             	add    esp,0x10
c001bc36:	f7 da                	neg    edx
c001bc38:	5b                   	pop    ebx
c001bc39:	5e                   	pop    esi
c001bc3a:	5f                   	pop    edi
c001bc3b:	c3                   	ret    

c001bc3c <sysPipe(regs*)>:
c001bc3c:	57                   	push   edi
c001bc3d:	56                   	push   esi
c001bc3e:	53                   	push   ebx
c001bc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc43:	83 ec 0c             	sub    esp,0xc
c001bc46:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc49:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc4c:	6a 20                	push   0x20
c001bc4e:	e8 46 39 ff ff       	call   c000f599 <malloc>
c001bc53:	89 c3                	mov    ebx,eax
c001bc55:	58                   	pop    eax
c001bc56:	5a                   	pop    edx
c001bc57:	68 00 50 00 00       	push   0x5000
c001bc5c:	53                   	push   ebx
c001bc5d:	e8 08 43 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bc62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc65:	e8 68 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bc6a:	89 07                	mov    DWORD PTR [edi],eax
c001bc6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc6f:	e8 5e 51 ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	89 06                	mov    DWORD PTR [esi],eax
c001bc79:	31 d2                	xor    edx,edx
c001bc7b:	5b                   	pop    ebx
c001bc7c:	31 c0                	xor    eax,eax
c001bc7e:	5e                   	pop    esi
c001bc7f:	5f                   	pop    edi
c001bc80:	c3                   	ret    

c001bc81 <sysGetUnixTime(regs*)>:
c001bc81:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001bc86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc90:	e9 1b 7a ff ff       	jmp    c00136b0 <Clock::timeInSecondsLocal()>

c001bc95 <string_ends_with(char const*, char const*)>:
c001bc95:	57                   	push   edi
c001bc96:	56                   	push   esi
c001bc97:	53                   	push   ebx
c001bc98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc9c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	53                   	push   ebx
c001bca4:	e8 c3 4a fe ff       	call   c000076c <strlen>
c001bca9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bcac:	89 c6                	mov    esi,eax
c001bcae:	e8 b9 4a fe ff       	call   c000076c <strlen>
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	39 c6                	cmp    esi,eax
c001bcb8:	7d 06                	jge    c001bcc0 <string_ends_with(char const*, char const*)+0x2b>
c001bcba:	5b                   	pop    ebx
c001bcbb:	31 c0                	xor    eax,eax
c001bcbd:	5e                   	pop    esi
c001bcbe:	5f                   	pop    edi
c001bcbf:	c3                   	ret    
c001bcc0:	83 ec 08             	sub    esp,0x8
c001bcc3:	29 c6                	sub    esi,eax
c001bcc5:	57                   	push   edi
c001bcc6:	01 f3                	add    ebx,esi
c001bcc8:	53                   	push   ebx
c001bcc9:	e8 ca 4b fe ff       	call   c0000898 <strcmp>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	85 c0                	test   eax,eax
c001bcd3:	5b                   	pop    ebx
c001bcd4:	0f 94 c0             	sete   al
c001bcd7:	5e                   	pop    esi
c001bcd8:	0f b6 c0             	movzx  eax,al
c001bcdb:	5f                   	pop    edi
c001bcdc:	c3                   	ret    

c001bcdd <sysCallOpen(regs*)>:
c001bcdd:	56                   	push   esi
c001bcde:	53                   	push   ebx
c001bcdf:	81 ec 04 01 00 00    	sub    esp,0x104
c001bce5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bcec:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bcef:	85 c9                	test   ecx,ecx
c001bcf1:	0f 84 ad 01 00 00    	je     c001bea4 <sysCallOpen(regs*)+0x1c7>
c001bcf7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bcfa:	85 c0                	test   eax,eax
c001bcfc:	0f 84 a2 01 00 00    	je     c001bea4 <sysCallOpen(regs*)+0x1c7>
c001bd02:	52                   	push   edx
c001bd03:	68 f5 b9 02 c0       	push   0xc002b9f5
c001bd08:	50                   	push   eax
c001bd09:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bd0d:	56                   	push   esi
c001bd0e:	e8 01 6e ff ff       	call   c0012b14 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bd13:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd16:	e8 51 4a fe ff       	call   c000076c <strlen>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	48                   	dec    eax
c001bd1f:	74 1d                	je     c001bd3e <sysCallOpen(regs*)+0x61>
c001bd21:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bd24:	eb 0f                	jmp    c001bd35 <sysCallOpen(regs*)+0x58>
c001bd26:	80 fa 3a             	cmp    dl,0x3a
c001bd29:	74 0f                	je     c001bd3a <sysCallOpen(regs*)+0x5d>
c001bd2b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bd2f:	48                   	dec    eax
c001bd30:	74 0c                	je     c001bd3e <sysCallOpen(regs*)+0x61>
c001bd32:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bd35:	80 fa 2e             	cmp    dl,0x2e
c001bd38:	75 ec                	jne    c001bd26 <sysCallOpen(regs*)+0x49>
c001bd3a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bd3e:	83 ec 08             	sub    esp,0x8
c001bd41:	68 f9 b9 02 c0       	push   0xc002b9f9
c001bd46:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd49:	e8 47 ff ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	85 c0                	test   eax,eax
c001bd53:	74 1d                	je     c001bd72 <sysCallOpen(regs*)+0x95>
c001bd55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd58:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd65:	81 c4 04 01 00 00    	add    esp,0x104
c001bd6b:	31 c0                	xor    eax,eax
c001bd6d:	31 d2                	xor    edx,edx
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	c3                   	ret    
c001bd72:	83 ec 08             	sub    esp,0x8
c001bd75:	68 fe b9 02 c0       	push   0xc002b9fe
c001bd7a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd7d:	e8 13 ff ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001bd82:	83 c4 10             	add    esp,0x10
c001bd85:	85 c0                	test   eax,eax
c001bd87:	75 cc                	jne    c001bd55 <sysCallOpen(regs*)+0x78>
c001bd89:	83 ec 08             	sub    esp,0x8
c001bd8c:	68 fa b9 02 c0       	push   0xc002b9fa
c001bd91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd94:	e8 ff 4a fe ff       	call   c0000898 <strcmp>
c001bd99:	83 c4 10             	add    esp,0x10
c001bd9c:	85 c0                	test   eax,eax
c001bd9e:	74 b5                	je     c001bd55 <sysCallOpen(regs*)+0x78>
c001bda0:	83 ec 08             	sub    esp,0x8
c001bda3:	68 f9 b9 02 c0       	push   0xc002b9f9
c001bda8:	56                   	push   esi
c001bda9:	e8 e7 fe ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	85 c0                	test   eax,eax
c001bdb3:	75 a0                	jne    c001bd55 <sysCallOpen(regs*)+0x78>
c001bdb5:	83 ec 08             	sub    esp,0x8
c001bdb8:	68 03 ba 02 c0       	push   0xc002ba03
c001bdbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdc0:	e8 d0 fe ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	85 c0                	test   eax,eax
c001bdca:	0f 85 e7 00 00 00    	jne    c001beb7 <sysCallOpen(regs*)+0x1da>
c001bdd0:	83 ec 08             	sub    esp,0x8
c001bdd3:	68 08 ba 02 c0       	push   0xc002ba08
c001bdd8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bddb:	e8 b5 fe ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	85 c0                	test   eax,eax
c001bde5:	0f 85 cc 00 00 00    	jne    c001beb7 <sysCallOpen(regs*)+0x1da>
c001bdeb:	83 ec 08             	sub    esp,0x8
c001bdee:	68 04 ba 02 c0       	push   0xc002ba04
c001bdf3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdf6:	e8 9d 4a fe ff       	call   c0000898 <strcmp>
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	85 c0                	test   eax,eax
c001be00:	0f 84 b1 00 00 00    	je     c001beb7 <sysCallOpen(regs*)+0x1da>
c001be06:	83 ec 08             	sub    esp,0x8
c001be09:	68 03 ba 02 c0       	push   0xc002ba03
c001be0e:	56                   	push   esi
c001be0f:	e8 81 fe ff ff       	call   c001bc95 <string_ends_with(char const*, char const*)>
c001be14:	83 c4 10             	add    esp,0x10
c001be17:	85 c0                	test   eax,eax
c001be19:	0f 85 98 00 00 00    	jne    c001beb7 <sysCallOpen(regs*)+0x1da>
c001be1f:	83 ec 0c             	sub    esp,0xc
c001be22:	68 14 01 00 00       	push   0x114
c001be27:	e8 6d 37 ff ff       	call   c000f599 <malloc>
c001be2c:	83 c4 0c             	add    esp,0xc
c001be2f:	89 c6                	mov    esi,eax
c001be31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be3c:	56                   	push   esi
c001be3d:	e8 7c 6e ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001be42:	83 c4 10             	add    esp,0x10
c001be45:	85 f6                	test   esi,esi
c001be47:	74 5b                	je     c001bea4 <sysCallOpen(regs*)+0x1c7>
c001be49:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be4c:	0f b6 c2             	movzx  eax,dl
c001be4f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be52:	89 d0                	mov    eax,edx
c001be54:	83 e0 01             	and    eax,0x1
c001be57:	f6 c2 02             	test   dl,0x2
c001be5a:	74 03                	je     c001be5f <sysCallOpen(regs*)+0x182>
c001be5c:	83 c8 02             	or     eax,0x2
c001be5f:	f6 c2 04             	test   dl,0x4
c001be62:	74 03                	je     c001be67 <sysCallOpen(regs*)+0x18a>
c001be64:	83 c8 04             	or     eax,0x4
c001be67:	f6 c2 08             	test   dl,0x8
c001be6a:	74 03                	je     c001be6f <sysCallOpen(regs*)+0x192>
c001be6c:	83 c8 0a             	or     eax,0xa
c001be6f:	83 e2 10             	and    edx,0x10
c001be72:	74 03                	je     c001be77 <sysCallOpen(regs*)+0x19a>
c001be74:	83 c8 12             	or     eax,0x12
c001be77:	83 ec 08             	sub    esp,0x8
c001be7a:	50                   	push   eax
c001be7b:	56                   	push   esi
c001be7c:	e8 a1 6e ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	85 c0                	test   eax,eax
c001be86:	75 1c                	jne    c001bea4 <sysCallOpen(regs*)+0x1c7>
c001be88:	83 ec 0c             	sub    esp,0xc
c001be8b:	56                   	push   esi
c001be8c:	e8 41 4f ff ff       	call   c0010dd2 <UnixFile::getFileDescriptor()>
c001be91:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be94:	83 c4 10             	add    esp,0x10
c001be97:	89 02                	mov    DWORD PTR [edx],eax
c001be99:	c1 f8 1f             	sar    eax,0x1f
c001be9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001be9f:	e9 c1 fe ff ff       	jmp    c001bd65 <sysCallOpen(regs*)+0x88>
c001bea4:	81 c4 04 01 00 00    	add    esp,0x104
c001beaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001beaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beb4:	5b                   	pop    ebx
c001beb5:	5e                   	pop    esi
c001beb6:	c3                   	ret    
c001beb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001beba:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bec0:	e9 99 fe ff ff       	jmp    c001bd5e <sysCallOpen(regs*)+0x81>

c001bec5 <Sys::loadSyscalls()>:
c001bec5:	c7 05 c0 05 03 c0 32 b1 01 c0 	mov    DWORD PTR ds:0xc00305c0,0xc001b132
c001becf:	c7 05 c4 05 03 c0 2a ad 01 c0 	mov    DWORD PTR ds:0xc00305c4,0xc001ad2a
c001bed9:	c7 05 c8 05 03 c0 18 af 01 c0 	mov    DWORD PTR ds:0xc00305c8,0xc001af18
c001bee3:	c7 05 cc 05 03 c0 68 b0 01 c0 	mov    DWORD PTR ds:0xc00305cc,0xc001b068
c001beed:	c7 05 d0 05 03 c0 b0 ae 01 c0 	mov    DWORD PTR ds:0xc00305d0,0xc001aeb0
c001bef7:	c7 05 d4 05 03 c0 61 ad 01 c0 	mov    DWORD PTR ds:0xc00305d4,0xc001ad61
c001bf01:	c7 05 d8 05 03 c0 42 ad 01 c0 	mov    DWORD PTR ds:0xc00305d8,0xc001ad42
c001bf0b:	c7 05 dc 05 03 c0 6d af 01 c0 	mov    DWORD PTR ds:0xc00305dc,0xc001af6d
c001bf15:	c7 05 e4 05 03 c0 fb b5 01 c0 	mov    DWORD PTR ds:0xc00305e4,0xc001b5fb
c001bf1f:	c7 05 e0 05 03 c0 dd bc 01 c0 	mov    DWORD PTR ds:0xc00305e0,0xc001bcdd
c001bf29:	c7 05 e8 05 03 c0 5b b6 01 c0 	mov    DWORD PTR ds:0xc00305e8,0xc001b65b
c001bf33:	c7 05 ec 05 03 c0 3e b3 01 c0 	mov    DWORD PTR ds:0xc00305ec,0xc001b33e
c001bf3d:	c7 05 f0 05 03 c0 78 b1 01 c0 	mov    DWORD PTR ds:0xc00305f0,0xc001b178
c001bf47:	c7 05 f4 05 03 c0 7d b1 01 c0 	mov    DWORD PTR ds:0xc00305f4,0xc001b17d
c001bf51:	c7 05 f8 05 03 c0 24 b7 01 c0 	mov    DWORD PTR ds:0xc00305f8,0xc001b724
c001bf5b:	c7 05 fc 05 03 c0 d0 b6 01 c0 	mov    DWORD PTR ds:0xc00305fc,0xc001b6d0
c001bf65:	c7 05 00 06 03 c0 17 b4 01 c0 	mov    DWORD PTR ds:0xc0030600,0xc001b417
c001bf6f:	c7 05 04 06 03 c0 6e b4 01 c0 	mov    DWORD PTR ds:0xc0030604,0xc001b46e
c001bf79:	c7 05 08 06 03 c0 da b4 01 c0 	mov    DWORD PTR ds:0xc0030608,0xc001b4da
c001bf83:	c7 05 0c 06 03 c0 82 b1 01 c0 	mov    DWORD PTR ds:0xc003060c,0xc001b182
c001bf8d:	c7 05 10 06 03 c0 94 b7 01 c0 	mov    DWORD PTR ds:0xc0030610,0xc001b794
c001bf97:	c7 05 14 06 03 c0 ae b7 01 c0 	mov    DWORD PTR ds:0xc0030614,0xc001b7ae
c001bfa1:	c7 05 18 06 03 c0 ae b7 01 c0 	mov    DWORD PTR ds:0xc0030618,0xc001b7ae
c001bfab:	c7 05 1c 06 03 c0 e3 b7 01 c0 	mov    DWORD PTR ds:0xc003061c,0xc001b7e3
c001bfb5:	c7 05 20 06 03 c0 47 b8 01 c0 	mov    DWORD PTR ds:0xc0030620,0xc001b847
c001bfbf:	c7 05 24 06 03 c0 8c b1 01 c0 	mov    DWORD PTR ds:0xc0030624,0xc001b18c
c001bfc9:	c7 05 28 06 03 c0 ab b8 01 c0 	mov    DWORD PTR ds:0xc0030628,0xc001b8ab
c001bfd3:	c7 05 2c 06 03 c0 fb b2 01 c0 	mov    DWORD PTR ds:0xc003062c,0xc001b2fb
c001bfdd:	c7 05 30 06 03 c0 f7 b8 01 c0 	mov    DWORD PTR ds:0xc0030630,0xc001b8f7
c001bfe7:	c7 05 34 06 03 c0 bd b3 01 c0 	mov    DWORD PTR ds:0xc0030634,0xc001b3bd
c001bff1:	c7 05 38 06 03 c0 7a b9 01 c0 	mov    DWORD PTR ds:0xc0030638,0xc001b97a
c001bffb:	c7 05 3c 06 03 c0 4c b5 01 c0 	mov    DWORD PTR ds:0xc003063c,0xc001b54c
c001c005:	c7 05 40 06 03 c0 a1 b9 01 c0 	mov    DWORD PTR ds:0xc0030640,0xc001b9a1
c001c00f:	c7 05 44 06 03 c0 09 ba 01 c0 	mov    DWORD PTR ds:0xc0030644,0xc001ba09
c001c019:	c7 05 48 06 03 c0 b6 ba 01 c0 	mov    DWORD PTR ds:0xc0030648,0xc001bab6
c001c023:	c7 05 4c 06 03 c0 9c b1 01 c0 	mov    DWORD PTR ds:0xc003064c,0xc001b19c
c001c02d:	c7 05 50 06 03 c0 06 b2 01 c0 	mov    DWORD PTR ds:0xc0030650,0xc001b206
c001c037:	c7 05 54 06 03 c0 4c b2 01 c0 	mov    DWORD PTR ds:0xc0030654,0xc001b24c
c001c041:	c7 05 58 06 03 c0 ca bb 01 c0 	mov    DWORD PTR ds:0xc0030658,0xc001bbca
c001c04b:	c7 05 5c 06 03 c0 c9 b7 01 c0 	mov    DWORD PTR ds:0xc003065c,0xc001b7c9
c001c055:	c7 05 60 06 03 c0 9d b2 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001b29d
c001c05f:	c7 05 64 06 03 c0 3c bc 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001bc3c
c001c069:	c7 05 68 06 03 c0 81 bc 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001bc81
c001c073:	c7 05 6c 06 03 c0 08 ae 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001ae08
c001c07d:	c7 05 70 06 03 c0 89 af 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001af89
c001c087:	c7 05 74 06 03 c0 1e b0 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001b01e
c001c091:	c7 05 78 06 03 c0 f4 ac 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001acf4
c001c09b:	c7 05 7c 06 03 c0 d0 b0 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001b0d0
c001c0a5:	c7 05 80 06 03 c0 6d ad 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001ad6d
c001c0af:	c7 05 84 06 03 c0 84 ad 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001ad84
c001c0b9:	c3                   	ret    

c001c0ba <Sys::systemCall(regs*, void*)>:
c001c0ba:	53                   	push   ebx
c001c0bb:	83 ec 08             	sub    esp,0x8
c001c0be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0c2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c0c5:	83 f8 7f             	cmp    eax,0x7f
c001c0c8:	77 16                	ja     c001c0e0 <Sys::systemCall(regs*, void*)+0x26>
c001c0ca:	8b 14 85 c0 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa40]
c001c0d1:	85 d2                	test   edx,edx
c001c0d3:	74 0b                	je     c001c0e0 <Sys::systemCall(regs*, void*)+0x26>
c001c0d5:	83 ec 0c             	sub    esp,0xc
c001c0d8:	53                   	push   ebx
c001c0d9:	ff d2                	call   edx
c001c0db:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c0de:	eb 0d                	jmp    c001c0ed <Sys::systemCall(regs*, void*)+0x33>
c001c0e0:	52                   	push   edx
c001c0e1:	52                   	push   edx
c001c0e2:	50                   	push   eax
c001c0e3:	68 0d ba 02 c0       	push   0xc002ba0d
c001c0e8:	e8 72 66 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c0ed:	83 c4 10             	add    esp,0x10
c001c0f0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c0f5:	31 d2                	xor    edx,edx
c001c0f7:	83 c4 08             	add    esp,0x8
c001c0fa:	5b                   	pop    ebx
c001c0fb:	c3                   	ret    

c001c0fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c0fc:	55                   	push   ebp
c001c0fd:	57                   	push   edi
c001c0fe:	56                   	push   esi
c001c0ff:	53                   	push   ebx
c001c100:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c106:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c10d:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c114:	85 c0                	test   eax,eax
c001c116:	0f 95 c1             	setne  cl
c001c119:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c121:	0f 94 c2             	sete   dl
c001c124:	84 d1                	test   cl,dl
c001c126:	74 23                	je     c001c14b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c128:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c12e:	74 1b                	je     c001c14b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c130:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c136:	89 da                	mov    edx,ebx
c001c138:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c13e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c144:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c14b:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c152:	05 ff 0f 00 00       	add    eax,0xfff
c001c157:	83 ec 0c             	sub    esp,0xc
c001c15a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c15e:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c164:	c1 e8 0c             	shr    eax,0xc
c001c167:	89 fe                	mov    esi,edi
c001c169:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c16d:	c1 ee 0c             	shr    esi,0xc
c001c170:	6a 01                	push   0x1
c001c172:	e8 a6 50 ff ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c001c177:	89 c5                	mov    ebp,eax
c001c179:	58                   	pop    eax
c001c17a:	5a                   	pop    edx
c001c17b:	56                   	push   esi
c001c17c:	68 21 ba 02 c0       	push   0xc002ba21
c001c181:	e8 d9 65 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c186:	59                   	pop    ecx
c001c187:	58                   	pop    eax
c001c188:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c18c:	68 33 ba 02 c0       	push   0xc002ba33
c001c191:	e8 c9 65 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c19f:	0f 86 31 01 00 00    	jbe    c001c2d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c1a5:	c1 e6 0c             	shl    esi,0xc
c001c1a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1ab:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c1ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1b2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c1b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c1bc:	01 df                	add    edi,ebx
c001c1be:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c1c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c1c5:	0f 84 08 01 00 00    	je     c001c2d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c1cb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c1d1:	76 05                	jbe    c001c1d8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c1d3:	bf 00 10 00 00       	mov    edi,0x1000
c001c1d8:	83 ec 0c             	sub    esp,0xc
c001c1db:	31 d2                	xor    edx,edx
c001c1dd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c1e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c1e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c1ea:	50                   	push   eax
c001c1eb:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c1ef:	56                   	push   esi
c001c1f0:	52                   	push   edx
c001c1f1:	57                   	push   edi
c001c1f2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c1f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1fc:	83 c4 20             	add    esp,0x20
c001c1ff:	85 c0                	test   eax,eax
c001c201:	74 0a                	je     c001c20d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c203:	53                   	push   ebx
c001c204:	53                   	push   ebx
c001c205:	50                   	push   eax
c001c206:	68 45 ba 02 c0       	push   0xc002ba45
c001c20b:	eb 0f                	jmp    c001c21c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c20d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c211:	74 20                	je     c001c233 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c213:	51                   	push   ecx
c001c214:	51                   	push   ecx
c001c215:	6a 00                	push   0x0
c001c217:	68 70 ba 02 c0       	push   0xc002ba70
c001c21c:	e8 3e 65 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c221:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c224:	e8 fe 53 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c001c229:	83 c4 10             	add    esp,0x10
c001c22c:	31 c0                	xor    eax,eax
c001c22e:	e9 68 01 00 00       	jmp    c001c39b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c233:	fa                   	cli    
c001c234:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001c23a:	e8 56 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c23f:	6a 07                	push   0x7
c001c241:	89 c7                	mov    edi,eax
c001c243:	55                   	push   ebp
c001c244:	50                   	push   eax
c001c245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c24a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c24d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c253:	e8 cc 57 ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c258:	83 c4 0c             	add    esp,0xc
c001c25b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c262:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c268:	6a 00                	push   0x0
c001c26a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c272:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c278:	e8 01 56 ff ff       	call   c001187e <VAS::mapOtherVASIn(bool, VAS*)>
c001c27d:	58                   	pop    eax
c001c27e:	5a                   	pop    edx
c001c27f:	68 07 0c 00 00       	push   0xc07
c001c284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c288:	57                   	push   edi
c001c289:	89 ef                	mov    edi,ebp
c001c28b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c292:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c298:	6a 00                	push   0x0
c001c29a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c29f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2a8:	e8 33 5b ff ff       	call   c0011de0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2ad:	b9 00 10 00 00       	mov    ecx,0x1000
c001c2b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2b4:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001c2b9:	83 c4 20             	add    esp,0x20
c001c2bc:	48                   	dec    eax
c001c2bd:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001c2c2:	85 c0                	test   eax,eax
c001c2c4:	75 01                	jne    c001c2c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c2c6:	fb                   	sti    
c001c2c7:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c2ce:	e9 df fe ff ff       	jmp    c001c1b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c2d3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c2d6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c2de:	0f 86 a9 00 00 00    	jbe    c001c38d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2e4:	fa                   	cli    
c001c2e5:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001c2eb:	51                   	push   ecx
c001c2ec:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c2f3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2f9:	6a 00                	push   0x0
c001c2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c300:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c303:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c309:	e8 70 55 ff ff       	call   c001187e <VAS::mapOtherVASIn(bool, VAS*)>
c001c30e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c312:	c1 e6 0c             	shl    esi,0xc
c001c315:	01 de                	add    esi,ebx
c001c317:	83 c4 10             	add    esp,0x10
c001c31a:	39 de                	cmp    esi,ebx
c001c31c:	74 61                	je     c001c37f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c31e:	e8 72 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c323:	6a 07                	push   0x7
c001c325:	89 c7                	mov    edi,eax
c001c327:	55                   	push   ebp
c001c328:	50                   	push   eax
c001c329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c32e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c331:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c337:	e8 e8 56 ff ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c33c:	58                   	pop    eax
c001c33d:	5a                   	pop    edx
c001c33e:	68 07 0c 00 00       	push   0xc07
c001c343:	53                   	push   ebx
c001c344:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c34a:	57                   	push   edi
c001c34b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c352:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c358:	6a 00                	push   0x0
c001c35a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c35f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c362:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c368:	e8 73 5a ff ff       	call   c0011de0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c36d:	83 c4 1c             	add    esp,0x1c
c001c370:	68 00 10 00 00       	push   0x1000
c001c375:	6a 00                	push   0x0
c001c377:	55                   	push   ebp
c001c378:	e8 d3 43 fe ff       	call   c0000750 <memset>
c001c37d:	eb 98                	jmp    c001c317 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c37f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001c384:	48                   	dec    eax
c001c385:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001c38a:	75 01                	jne    c001c38d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c38c:	fb                   	sti    
c001c38d:	83 ec 0c             	sub    esp,0xc
c001c390:	55                   	push   ebp
c001c391:	e8 91 52 ff ff       	call   c0011627 <Virt::freeKernelVirtualPages(unsigned long)>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	b0 01                	mov    al,0x1
c001c39b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c3a1:	5b                   	pop    ebx
c001c3a2:	5e                   	pop    esi
c001c3a3:	5f                   	pop    edi
c001c3a4:	5d                   	pop    ebp
c001c3a5:	c3                   	ret    

c001c3a6 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c3a6:	55                   	push   ebp
c001c3a7:	57                   	push   edi
c001c3a8:	56                   	push   esi
c001c3a9:	53                   	push   ebx
c001c3aa:	83 ec 48             	sub    esp,0x48
c001c3ad:	68 14 01 00 00       	push   0x114
c001c3b2:	e8 e2 31 ff ff       	call   c000f599 <malloc>
c001c3b7:	83 c4 0c             	add    esp,0xc
c001c3ba:	89 c6                	mov    esi,eax
c001c3bc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c3c0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c3c4:	50                   	push   eax
c001c3c5:	e8 f4 68 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001c3ca:	58                   	pop    eax
c001c3cb:	5a                   	pop    edx
c001c3cc:	6a 01                	push   0x1
c001c3ce:	56                   	push   esi
c001c3cf:	e8 4e 69 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001c3d4:	83 c4 10             	add    esp,0x10
c001c3d7:	85 c0                	test   eax,eax
c001c3d9:	0f 85 47 01 00 00    	jne    c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3df:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c3e7:	83 ec 0c             	sub    esp,0xc
c001c3ea:	6a 34                	push   0x34
c001c3ec:	e8 a8 31 ff ff       	call   c000f599 <malloc>
c001c3f1:	89 c3                	mov    ebx,eax
c001c3f3:	58                   	pop    eax
c001c3f4:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3f6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c3fa:	57                   	push   edi
c001c3fb:	53                   	push   ebx
c001c3fc:	6a 00                	push   0x0
c001c3fe:	6a 34                	push   0x34
c001c400:	56                   	push   esi
c001c401:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c404:	83 c4 20             	add    esp,0x20
c001c407:	85 c0                	test   eax,eax
c001c409:	0f 85 17 01 00 00    	jne    c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c40f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c415:	0f 85 0b 01 00 00    	jne    c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c41b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c41e:	85 c0                	test   eax,eax
c001c420:	0f 84 00 01 00 00    	je     c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c426:	31 d2                	xor    edx,edx
c001c428:	55                   	push   ebp
c001c429:	52                   	push   edx
c001c42a:	50                   	push   eax
c001c42b:	56                   	push   esi
c001c42c:	e8 af 69 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c431:	83 c4 10             	add    esp,0x10
c001c434:	85 c0                	test   eax,eax
c001c436:	0f 85 ea 00 00 00    	jne    c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c43c:	83 ec 0c             	sub    esp,0xc
c001c43f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c442:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c446:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c44a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c44e:	0f af c2             	imul   eax,edx
c001c451:	50                   	push   eax
c001c452:	e8 42 31 ff ff       	call   c000f599 <malloc>
c001c457:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c459:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c45d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c460:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c464:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c468:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c46c:	0f af c2             	imul   eax,edx
c001c46f:	99                   	cdq    
c001c470:	52                   	push   edx
c001c471:	50                   	push   eax
c001c472:	56                   	push   esi
c001c473:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c476:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c479:	83 c4 20             	add    esp,0x20
c001c47c:	85 c0                	test   eax,eax
c001c47e:	0f 84 a2 00 00 00    	je     c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c484:	31 d2                	xor    edx,edx
c001c486:	51                   	push   ecx
c001c487:	52                   	push   edx
c001c488:	50                   	push   eax
c001c489:	56                   	push   esi
c001c48a:	e8 51 69 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	85 c0                	test   eax,eax
c001c494:	0f 85 8c 00 00 00    	jne    c001c526 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c49a:	83 ec 0c             	sub    esp,0xc
c001c49d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4a1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4a5:	31 ed                	xor    ebp,ebp
c001c4a7:	0f af c2             	imul   eax,edx
c001c4aa:	50                   	push   eax
c001c4ab:	e8 e9 30 ff ff       	call   c000f599 <malloc>
c001c4b0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c4b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4bd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4c1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4c5:	0f af c2             	imul   eax,edx
c001c4c8:	99                   	cdq    
c001c4c9:	52                   	push   edx
c001c4ca:	50                   	push   eax
c001c4cb:	56                   	push   esi
c001c4cc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4cf:	83 c4 20             	add    esp,0x20
c001c4d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c4da:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c4de:	0f 86 80 00 00 00    	jbe    c001c564 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c4e4:	0f b7 fd             	movzx  edi,bp
c001c4e7:	c1 e7 05             	shl    edi,0x5
c001c4ea:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c4ee:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c4f1:	75 6b                	jne    c001c55e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4f3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c4f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4fa:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c4fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c501:	52                   	push   edx
c001c502:	31 d2                	xor    edx,edx
c001c504:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c507:	52                   	push   edx
c001c508:	50                   	push   eax
c001c509:	56                   	push   esi
c001c50a:	e8 d1 68 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	85 c0                	test   eax,eax
c001c514:	74 17                	je     c001c52d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c516:	83 ec 0c             	sub    esp,0xc
c001c519:	68 9c ba 02 c0       	push   0xc002ba9c
c001c51e:	e8 3c 62 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c523:	83 c4 10             	add    esp,0x10
c001c526:	31 c0                	xor    eax,eax
c001c528:	e9 87 00 00 00       	jmp    c001c5b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c52d:	83 ec 0c             	sub    esp,0xc
c001c530:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c533:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c536:	50                   	push   eax
c001c537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c53b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c53f:	56                   	push   esi
c001c540:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c544:	e8 b3 fb ff ff       	call   c001c0fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c549:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c54d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c551:	83 c4 20             	add    esp,0x20
c001c554:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c558:	73 04                	jae    c001c55e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c55a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c55e:	45                   	inc    ebp
c001c55f:	e9 76 ff ff ff       	jmp    c001c4da <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c564:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c568:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c56c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c570:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c57f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c584:	05 00 10 00 00       	add    eax,0x1000
c001c589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c590:	e8 14 30 ff ff       	call   c000f5a9 <free>
c001c595:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c598:	e8 0c 30 ff ff       	call   c000f5a9 <free>
c001c59d:	58                   	pop    eax
c001c59e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5a2:	e8 02 30 ff ff       	call   c000f5a9 <free>
c001c5a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5aa:	e8 d1 67 ff ff       	call   c0012d80 <File::close()>
c001c5af:	83 c4 10             	add    esp,0x10
c001c5b2:	b0 01                	mov    al,0x1
c001c5b4:	83 c4 3c             	add    esp,0x3c
c001c5b7:	5b                   	pop    ebx
c001c5b8:	5e                   	pop    esi
c001c5b9:	5f                   	pop    edi
c001c5ba:	5d                   	pop    ebp
c001c5bb:	c3                   	ret    

c001c5bc <Thr::runtimeReferenceHelper()>:
c001c5bc:	83 ec 18             	sub    esp,0x18
c001c5bf:	68 a4 ba 02 c0       	push   0xc002baa4
c001c5c4:	e8 96 61 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001c5c9:	fa                   	cli    
c001c5ca:	83 c4 10             	add    esp,0x10
c001c5cd:	eb fe                	jmp    c001c5cd <Thr::runtimeReferenceHelper()+0x11>

c001c5cf <Thr::getAddressOfKernelSymbol(char const*)>:
c001c5cf:	57                   	push   edi
c001c5d0:	56                   	push   esi
c001c5d1:	53                   	push   ebx
c001c5d2:	31 db                	xor    ebx,ebx
c001c5d4:	39 1d 60 0f 03 c0    	cmp    DWORD PTR ds:0xc0030f60,ebx
c001c5da:	7e 3c                	jle    c001c618 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c5dc:	8b 34 9d e0 0e 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf120]
c001c5e3:	31 ff                	xor    edi,edi
c001c5e5:	39 3c 9d e0 0d 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf220],edi
c001c5ec:	7e 27                	jle    c001c615 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c5ee:	50                   	push   eax
c001c5ef:	50                   	push   eax
c001c5f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5f4:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5f6:	03 04 9d 60 0e 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf1a0]
c001c5fd:	50                   	push   eax
c001c5fe:	e8 95 42 fe ff       	call   c0000898 <strcmp>
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	85 c0                	test   eax,eax
c001c608:	75 05                	jne    c001c60f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c60a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c60d:	eb 0b                	jmp    c001c61a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c60f:	83 c6 10             	add    esi,0x10
c001c612:	47                   	inc    edi
c001c613:	eb d0                	jmp    c001c5e5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c615:	43                   	inc    ebx
c001c616:	eb bc                	jmp    c001c5d4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c618:	31 c0                	xor    eax,eax
c001c61a:	5b                   	pop    ebx
c001c61b:	5e                   	pop    esi
c001c61c:	5f                   	pop    edi
c001c61d:	c3                   	ret    

c001c61e <Thr::loadKernelSymbolTable(char const*)>:
c001c61e:	55                   	push   ebp
c001c61f:	57                   	push   edi
c001c620:	56                   	push   esi
c001c621:	53                   	push   ebx
c001c622:	83 ec 68             	sub    esp,0x68
c001c625:	8b 35 b0 0f 03 c0    	mov    esi,DWORD PTR ds:0xc0030fb0
c001c62b:	68 14 01 00 00       	push   0x114
c001c630:	e8 64 2f ff ff       	call   c000f599 <malloc>
c001c635:	83 c4 0c             	add    esp,0xc
c001c638:	89 c3                	mov    ebx,eax
c001c63a:	56                   	push   esi
c001c63b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c63f:	50                   	push   eax
c001c640:	e8 79 66 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001c645:	5e                   	pop    esi
c001c646:	5f                   	pop    edi
c001c647:	6a 01                	push   0x1
c001c649:	53                   	push   ebx
c001c64a:	e8 d3 66 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	85 c0                	test   eax,eax
c001c654:	74 0a                	je     c001c660 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	68 c6 ba 02 c0       	push   0xc002bac6
c001c65e:	eb 34                	jmp    c001c694 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c660:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	6a 34                	push   0x34
c001c66d:	e8 27 2f ff ff       	call   c000f599 <malloc>
c001c672:	59                   	pop    ecx
c001c673:	89 c7                	mov    edi,eax
c001c675:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c679:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c67b:	56                   	push   esi
c001c67c:	57                   	push   edi
c001c67d:	6a 00                	push   0x0
c001c67f:	6a 34                	push   0x34
c001c681:	53                   	push   ebx
c001c682:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c685:	83 c4 20             	add    esp,0x20
c001c688:	85 c0                	test   eax,eax
c001c68a:	74 17                	je     c001c6a3 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	68 dd ba 02 c0       	push   0xc002badd
c001c694:	e8 32 d8 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	31 c0                	xor    eax,eax
c001c69e:	e9 31 02 00 00       	jmp    c001c8d4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c6a3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c6a9:	75 e1                	jne    c001c68c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6ab:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c6ae:	85 c0                	test   eax,eax
c001c6b0:	74 da                	je     c001c68c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6b2:	52                   	push   edx
c001c6b3:	31 d2                	xor    edx,edx
c001c6b5:	52                   	push   edx
c001c6b6:	50                   	push   eax
c001c6b7:	53                   	push   ebx
c001c6b8:	e8 23 67 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	85 c0                	test   eax,eax
c001c6c2:	75 c8                	jne    c001c68c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6c4:	83 ec 0c             	sub    esp,0xc
c001c6c7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c6cb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c6cf:	31 ed                	xor    ebp,ebp
c001c6d1:	0f af c2             	imul   eax,edx
c001c6d4:	50                   	push   eax
c001c6d5:	e8 bf 2e ff ff       	call   c000f599 <malloc>
c001c6da:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c6dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c6e7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c6eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c6ef:	0f af c2             	imul   eax,edx
c001c6f2:	99                   	cdq    
c001c6f3:	52                   	push   edx
c001c6f4:	50                   	push   eax
c001c6f5:	53                   	push   ebx
c001c6f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6f9:	83 c4 20             	add    esp,0x20
c001c6fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c704:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c70c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c71c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c720:	0f 86 aa 00 00 00    	jbe    c001c7d0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c726:	0f b7 f5             	movzx  esi,bp
c001c729:	6b f6 28             	imul   esi,esi,0x28
c001c72c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c730:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c733:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c737:	50                   	push   eax
c001c738:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c73c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c740:	8b 16                	mov    edx,DWORD PTR [esi]
c001c742:	6b c0 28             	imul   eax,eax,0x28
c001c745:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c749:	89 d0                	mov    eax,edx
c001c74b:	31 d2                	xor    edx,edx
c001c74d:	52                   	push   edx
c001c74e:	50                   	push   eax
c001c74f:	53                   	push   ebx
c001c750:	e8 8b 66 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c755:	83 c4 0c             	add    esp,0xc
c001c758:	6a 20                	push   0x20
c001c75a:	6a 00                	push   0x0
c001c75c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c760:	52                   	push   edx
c001c761:	e8 ea 3f fe ff       	call   c0000750 <memset>
c001c766:	58                   	pop    eax
c001c767:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c769:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c76d:	51                   	push   ecx
c001c76e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c772:	52                   	push   edx
c001c773:	6a 00                	push   0x0
c001c775:	6a 1f                	push   0x1f
c001c777:	53                   	push   ebx
c001c778:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c77b:	83 c4 18             	add    esp,0x18
c001c77e:	68 f4 ba 02 c0       	push   0xc002baf4
c001c783:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c787:	52                   	push   edx
c001c788:	e8 0b 41 fe ff       	call   c0000898 <strcmp>
c001c78d:	83 c4 10             	add    esp,0x10
c001c790:	85 c0                	test   eax,eax
c001c792:	75 0f                	jne    c001c7a3 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c794:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c797:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c79b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c79f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7a3:	50                   	push   eax
c001c7a4:	50                   	push   eax
c001c7a5:	68 fc ba 02 c0       	push   0xc002bafc
c001c7aa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c7ae:	50                   	push   eax
c001c7af:	e8 e4 40 fe ff       	call   c0000898 <strcmp>
c001c7b4:	83 c4 10             	add    esp,0x10
c001c7b7:	85 c0                	test   eax,eax
c001c7b9:	75 0f                	jne    c001c7ca <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c7bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7ca:	45                   	inc    ebp
c001c7cb:	e9 4c ff ff ff       	jmp    c001c71c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c7d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c7d5:	75 10                	jne    c001c7e7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c7d7:	83 ec 0c             	sub    esp,0xc
c001c7da:	68 04 bb 02 c0       	push   0xc002bb04
c001c7df:	e8 e7 d6 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c7ec:	75 10                	jne    c001c7fe <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c7ee:	83 ec 0c             	sub    esp,0xc
c001c7f1:	68 04 bb 02 c0       	push   0xc002bb04
c001c7f6:	e8 d0 d6 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	31 d2                	xor    edx,edx
c001c800:	50                   	push   eax
c001c801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c805:	52                   	push   edx
c001c806:	50                   	push   eax
c001c807:	53                   	push   ebx
c001c808:	e8 d3 65 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c80d:	5a                   	pop    edx
c001c80e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c812:	e8 82 2d ff ff       	call   c000f599 <malloc>
c001c817:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c81b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c81f:	31 c9                	xor    ecx,ecx
c001c821:	5e                   	pop    esi
c001c822:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c824:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c828:	55                   	push   ebp
c001c829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c82d:	51                   	push   ecx
c001c82e:	52                   	push   edx
c001c82f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c833:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c837:	53                   	push   ebx
c001c838:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c83b:	83 c4 14             	add    esp,0x14
c001c83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c842:	e8 52 2d ff ff       	call   c000f599 <malloc>
c001c847:	89 c6                	mov    esi,eax
c001c849:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c84b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c84e:	56                   	push   esi
c001c84f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c853:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c857:	51                   	push   ecx
c001c858:	52                   	push   edx
c001c859:	53                   	push   ebx
c001c85a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c85d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c861:	8b 15 60 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f60
c001c867:	83 c4 1c             	add    esp,0x1c
c001c86a:	c1 e8 04             	shr    eax,0x4
c001c86d:	89 04 95 e0 0d 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf220],eax
c001c874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c878:	31 d2                	xor    edx,edx
c001c87a:	52                   	push   edx
c001c87b:	50                   	push   eax
c001c87c:	53                   	push   ebx
c001c87d:	e8 5e 65 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c882:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c884:	31 d2                	xor    edx,edx
c001c886:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c889:	56                   	push   esi
c001c88a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c88e:	52                   	push   edx
c001c88f:	50                   	push   eax
c001c890:	53                   	push   ebx
c001c891:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c894:	83 c4 14             	add    esp,0x14
c001c897:	53                   	push   ebx
c001c898:	e8 e3 64 ff ff       	call   c0012d80 <File::close()>
c001c89d:	5d                   	pop    ebp
c001c89e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8a2:	e8 02 2d ff ff       	call   c000f5a9 <free>
c001c8a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8aa:	e8 fa 2c ff ff       	call   c000f5a9 <free>
c001c8af:	a1 60 0f 03 c0       	mov    eax,ds:0xc0030f60
c001c8b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c8b8:	8d 50 01             	lea    edx,[eax+0x1]
c001c8bb:	89 0c 85 e0 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf120],ecx
c001c8c2:	89 34 85 60 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1a0],esi
c001c8c9:	89 15 60 0f 03 c0    	mov    DWORD PTR ds:0xc0030f60,edx
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	b0 01                	mov    al,0x1
c001c8d4:	83 c4 5c             	add    esp,0x5c
c001c8d7:	5b                   	pop    ebx
c001c8d8:	5e                   	pop    esi
c001c8d9:	5f                   	pop    edi
c001c8da:	5d                   	pop    ebp
c001c8db:	c3                   	ret    

c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c8dc:	55                   	push   ebp
c001c8dd:	57                   	push   edi
c001c8de:	56                   	push   esi
c001c8df:	53                   	push   ebx
c001c8e0:	81 ec 68 03 00 00    	sub    esp,0x368
c001c8e6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c8ed:	8b 1d b0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fb0
c001c8f3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c8f7:	68 14 01 00 00       	push   0x114
c001c8fc:	e8 98 2c ff ff       	call   c000f599 <malloc>
c001c901:	83 c4 0c             	add    esp,0xc
c001c904:	89 c5                	mov    ebp,eax
c001c906:	53                   	push   ebx
c001c907:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c90e:	50                   	push   eax
c001c90f:	e8 aa 63 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001c914:	5e                   	pop    esi
c001c915:	5f                   	pop    edi
c001c916:	6a 01                	push   0x1
c001c918:	55                   	push   ebp
c001c919:	e8 04 64 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001c91e:	83 c4 10             	add    esp,0x10
c001c921:	85 c0                	test   eax,eax
c001c923:	0f 85 a7 06 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c929:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	6a 34                	push   0x34
c001c936:	e8 5e 2c ff ff       	call   c000f599 <malloc>
c001c93b:	5b                   	pop    ebx
c001c93c:	89 c7                	mov    edi,eax
c001c93e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c942:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c945:	53                   	push   ebx
c001c946:	57                   	push   edi
c001c947:	6a 00                	push   0x0
c001c949:	6a 34                	push   0x34
c001c94b:	55                   	push   ebp
c001c94c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c94f:	83 c4 20             	add    esp,0x20
c001c952:	85 c0                	test   eax,eax
c001c954:	0f 85 76 06 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c95a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c960:	0f 85 6a 06 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c966:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c969:	85 c0                	test   eax,eax
c001c96b:	0f 84 5f 06 00 00    	je     c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c971:	31 d2                	xor    edx,edx
c001c973:	51                   	push   ecx
c001c974:	52                   	push   edx
c001c975:	50                   	push   eax
c001c976:	55                   	push   ebp
c001c977:	e8 64 64 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	85 c0                	test   eax,eax
c001c981:	0f 85 49 06 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c987:	83 ec 0c             	sub    esp,0xc
c001c98a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c98d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c991:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c995:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c999:	0f af c2             	imul   eax,edx
c001c99c:	50                   	push   eax
c001c99d:	e8 f7 2b ff ff       	call   c000f599 <malloc>
c001c9a2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9b0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9b4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9b8:	0f af c2             	imul   eax,edx
c001c9bb:	99                   	cdq    
c001c9bc:	52                   	push   edx
c001c9bd:	50                   	push   eax
c001c9be:	55                   	push   ebp
c001c9bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9c2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c9c5:	83 c4 20             	add    esp,0x20
c001c9c8:	85 c0                	test   eax,eax
c001c9ca:	0f 84 00 06 00 00    	je     c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9d0:	52                   	push   edx
c001c9d1:	31 d2                	xor    edx,edx
c001c9d3:	52                   	push   edx
c001c9d4:	50                   	push   eax
c001c9d5:	55                   	push   ebp
c001c9d6:	e8 05 64 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	85 c0                	test   eax,eax
c001c9e0:	0f 85 ea 05 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9e6:	83 ec 0c             	sub    esp,0xc
c001c9e9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9ed:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9f1:	31 f6                	xor    esi,esi
c001c9f3:	0f af c2             	imul   eax,edx
c001c9f6:	50                   	push   eax
c001c9f7:	e8 9d 2b ff ff       	call   c000f599 <malloc>
c001c9fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca0a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca0e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ca12:	0f af c2             	imul   eax,edx
c001ca15:	99                   	cdq    
c001ca16:	52                   	push   edx
c001ca17:	50                   	push   eax
c001ca18:	55                   	push   ebp
c001ca19:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca1c:	83 c4 20             	add    esp,0x20
c001ca1f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001ca23:	0f 86 8a 00 00 00    	jbe    c001cab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001ca29:	0f b7 de             	movzx  ebx,si
c001ca2c:	c1 e3 05             	shl    ebx,0x5
c001ca2f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001ca33:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ca36:	75 75                	jne    c001caad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001ca38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca3b:	31 d2                	xor    edx,edx
c001ca3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca41:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca48:	50                   	push   eax
c001ca49:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ca4c:	52                   	push   edx
c001ca4d:	50                   	push   eax
c001ca4e:	55                   	push   ebp
c001ca4f:	e8 8c 63 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	85 c0                	test   eax,eax
c001ca59:	0f 85 71 05 00 00    	jne    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca5f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca69:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca6d:	31 d2                	xor    edx,edx
c001ca6f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca73:	83 ec 0c             	sub    esp,0xc
c001ca76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca7a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca81:	50                   	push   eax
c001ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca8a:	52                   	push   edx
c001ca8b:	50                   	push   eax
c001ca8c:	55                   	push   ebp
c001ca8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca90:	83 c4 1c             	add    esp,0x1c
c001ca93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca96:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca99:	50                   	push   eax
c001ca9a:	6a 00                	push   0x0
c001ca9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001caa4:	50                   	push   eax
c001caa5:	e8 a6 3c fe ff       	call   c0000750 <memset>
c001caaa:	83 c4 10             	add    esp,0x10
c001caad:	46                   	inc    esi
c001caae:	e9 6c ff ff ff       	jmp    c001ca1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cab3:	53                   	push   ebx
c001cab4:	31 db                	xor    ebx,ebx
c001cab6:	68 00 01 00 00       	push   0x100
c001cabb:	6a 00                	push   0x0
c001cabd:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cac1:	50                   	push   eax
c001cac2:	e8 89 3c fe ff       	call   c0000750 <memset>
c001cac7:	83 c4 0c             	add    esp,0xc
c001caca:	68 00 01 00 00       	push   0x100
c001cacf:	6a 00                	push   0x0
c001cad1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cad8:	50                   	push   eax
c001cad9:	e8 72 3c fe ff       	call   c0000750 <memset>
c001cade:	83 c4 10             	add    esp,0x10
c001cae1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cae9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001caf1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001caf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb01:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cb09:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cb0d:	0f 86 30 01 00 00    	jbe    c001cc43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cb13:	0f b7 f3             	movzx  esi,bx
c001cb16:	6b f6 28             	imul   esi,esi,0x28
c001cb19:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cb1d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb24:	52                   	push   edx
c001cb25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb29:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cb2d:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb2f:	6b d2 28             	imul   edx,edx,0x28
c001cb32:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cb36:	31 d2                	xor    edx,edx
c001cb38:	52                   	push   edx
c001cb39:	50                   	push   eax
c001cb3a:	55                   	push   ebp
c001cb3b:	e8 a0 62 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001cb40:	83 c4 0c             	add    esp,0xc
c001cb43:	6a 20                	push   0x20
c001cb45:	6a 00                	push   0x0
c001cb47:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb4e:	51                   	push   ecx
c001cb4f:	e8 fc 3b fe ff       	call   c0000750 <memset>
c001cb54:	59                   	pop    ecx
c001cb55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb58:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb5c:	52                   	push   edx
c001cb5d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb64:	51                   	push   ecx
c001cb65:	6a 00                	push   0x0
c001cb67:	6a 1f                	push   0x1f
c001cb69:	55                   	push   ebp
c001cb6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb6d:	83 c4 1c             	add    esp,0x1c
c001cb70:	6a 09                	push   0x9
c001cb72:	68 1e bb 02 c0       	push   0xc002bb1e
c001cb77:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb7e:	51                   	push   ecx
c001cb7f:	e8 c8 3a fe ff       	call   c000064c <memcmp>
c001cb84:	83 c4 10             	add    esp,0x10
c001cb87:	85 c0                	test   eax,eax
c001cb89:	75 21                	jne    c001cbac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb93:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb9e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cba5:	89 d0                	mov    eax,edx
c001cba7:	40                   	inc    eax
c001cba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbac:	50                   	push   eax
c001cbad:	6a 09                	push   0x9
c001cbaf:	68 28 bb 02 c0       	push   0xc002bb28
c001cbb4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbbb:	50                   	push   eax
c001cbbc:	e8 8b 3a fe ff       	call   c000064c <memcmp>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	85 c0                	test   eax,eax
c001cbc6:	75 21                	jne    c001cbe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cbc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbd0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cbd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbd8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbdb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cbe2:	89 d0                	mov    eax,edx
c001cbe4:	40                   	inc    eax
c001cbe5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbe9:	50                   	push   eax
c001cbea:	50                   	push   eax
c001cbeb:	68 f4 ba 02 c0       	push   0xc002baf4
c001cbf0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbf7:	50                   	push   eax
c001cbf8:	e8 9b 3c fe ff       	call   c0000898 <strcmp>
c001cbfd:	83 c4 10             	add    esp,0x10
c001cc00:	85 c0                	test   eax,eax
c001cc02:	75 0f                	jne    c001cc13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cc04:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc13:	50                   	push   eax
c001cc14:	50                   	push   eax
c001cc15:	68 fc ba 02 c0       	push   0xc002bafc
c001cc1a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc21:	50                   	push   eax
c001cc22:	e8 71 3c fe ff       	call   c0000898 <strcmp>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	85 c0                	test   eax,eax
c001cc2c:	75 0f                	jne    c001cc3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cc2e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cc3d:	43                   	inc    ebx
c001cc3e:	e9 c6 fe ff ff       	jmp    c001cb09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cc43:	31 d2                	xor    edx,edx
c001cc45:	50                   	push   eax
c001cc46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc4a:	52                   	push   edx
c001cc4b:	50                   	push   eax
c001cc4c:	55                   	push   ebp
c001cc4d:	e8 8e 61 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001cc52:	58                   	pop    eax
c001cc53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc57:	e8 3d 29 ff ff       	call   c000f599 <malloc>
c001cc5c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc5f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc63:	31 d2                	xor    edx,edx
c001cc65:	58                   	pop    eax
c001cc66:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc6a:	53                   	push   ebx
c001cc6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc73:	52                   	push   edx
c001cc74:	50                   	push   eax
c001cc75:	55                   	push   ebp
c001cc76:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc79:	83 c4 14             	add    esp,0x14
c001cc7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc80:	e8 14 29 ff ff       	call   c000f599 <malloc>
c001cc85:	31 d2                	xor    edx,edx
c001cc87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc8b:	83 c4 0c             	add    esp,0xc
c001cc8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc92:	52                   	push   edx
c001cc93:	50                   	push   eax
c001cc94:	55                   	push   ebp
c001cc95:	e8 46 61 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001cc9a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc9d:	31 d2                	xor    edx,edx
c001cc9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cca2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cca6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccaa:	52                   	push   edx
c001ccab:	50                   	push   eax
c001ccac:	55                   	push   ebp
c001ccad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb0:	83 c4 20             	add    esp,0x20
c001ccb3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ccbb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ccbf:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ccc3:	0f 84 0b 03 00 00    	je     c001cfd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ccc9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ccd0:	31 d2                	xor    edx,edx
c001ccd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccd6:	c1 e8 03             	shr    eax,0x3
c001ccd9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ccdd:	51                   	push   ecx
c001ccde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cce2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cce6:	52                   	push   edx
c001cce7:	50                   	push   eax
c001cce8:	55                   	push   ebp
c001cce9:	e8 f2 60 ff ff       	call   c0012de0 <File::seek(unsigned long long)>
c001ccee:	5b                   	pop    ebx
c001ccef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccf3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001ccfa:	e8 9a 28 ff ff       	call   c000f599 <malloc>
c001ccff:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd06:	31 d2                	xor    edx,edx
c001cd08:	5e                   	pop    esi
c001cd09:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cd0d:	50                   	push   eax
c001cd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd16:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cd1d:	52                   	push   edx
c001cd1e:	50                   	push   eax
c001cd1f:	55                   	push   ebp
c001cd20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd23:	83 c4 20             	add    esp,0x20
c001cd26:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cd2e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cd32:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cd36:	0f 8d 7c 02 00 00    	jge    c001cfb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cd3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd44:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cd49:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cd4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cd50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd54:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cd58:	89 d8                	mov    eax,ebx
c001cd5a:	c1 e8 08             	shr    eax,0x8
c001cd5d:	89 c6                	mov    esi,eax
c001cd5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd63:	c1 e6 04             	shl    esi,0x4
c001cd66:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd6a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd6d:	85 d2                	test   edx,edx
c001cd6f:	0f 85 bf 00 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd75:	83 ec 0c             	sub    esp,0xc
c001cd78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd7c:	03 06                	add    eax,DWORD PTR [esi]
c001cd7e:	50                   	push   eax
c001cd7f:	e8 4b f8 ff ff       	call   c001c5cf <Thr::getAddressOfKernelSymbol(char const*)>
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	89 c2                	mov    edx,eax
c001cd89:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd8e:	85 c0                	test   eax,eax
c001cd90:	0f 85 9e 00 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd9d:	03 06                	add    eax,DWORD PTR [esi]
c001cd9f:	50                   	push   eax
c001cda0:	e8 9a 17 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cda5:	83 c4 10             	add    esp,0x10
c001cda8:	89 c2                	mov    edx,eax
c001cdaa:	85 c0                	test   eax,eax
c001cdac:	0f 85 82 00 00 00    	jne    c001ce34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cdb2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cdb6:	50                   	push   eax
c001cdb7:	50                   	push   eax
c001cdb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdbc:	03 06                	add    eax,DWORD PTR [esi]
c001cdbe:	50                   	push   eax
c001cdbf:	68 32 bb 02 c0       	push   0xc002bb32
c001cdc4:	e8 96 59 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001cdc9:	58                   	pop    eax
c001cdca:	5a                   	pop    edx
c001cdcb:	68 4c bb 02 c0       	push   0xc002bb4c
c001cdd0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdd7:	50                   	push   eax
c001cdd8:	e8 2f 3a fe ff       	call   c000080c <strcpy>
c001cddd:	59                   	pop    ecx
c001cdde:	58                   	pop    eax
c001cddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde3:	03 06                	add    eax,DWORD PTR [esi]
c001cde5:	50                   	push   eax
c001cde6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cded:	50                   	push   eax
c001cdee:	e8 59 3b fe ff       	call   c000094c <strcat>
c001cdf3:	58                   	pop    eax
c001cdf4:	5a                   	pop    edx
c001cdf5:	68 e2 bb 02 c0       	push   0xc002bbe2
c001cdfa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce01:	50                   	push   eax
c001ce02:	e8 45 3b fe ff       	call   c000094c <strcat>
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce0f:	0f 84 5d 01 00 00    	je     c001cf72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce15:	83 ec 0c             	sub    esp,0xc
c001ce18:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce1f:	50                   	push   eax
c001ce20:	e8 a6 d0 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ce2c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce30:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ce34:	80 fb 01             	cmp    bl,0x1
c001ce37:	0f 85 88 00 00 00    	jne    c001cec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ce3d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ce44:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce48:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ce4c:	01 ce                	add    esi,ecx
c001ce4e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce54:	0f 94 c0             	sete   al
c001ce57:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce5d:	0f 94 c3             	sete   bl
c001ce60:	09 c3                	or     ebx,eax
c001ce62:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce64:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce69:	74 41                	je     c001ceac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001ce6b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce6e:	84 db                	test   bl,bl
c001ce70:	75 15                	jne    c001ce87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ce72:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce76:	66 83 f8 0c          	cmp    ax,0xc
c001ce7a:	76 05                	jbe    c001ce81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ce7c:	b8 0c 00 00 00       	mov    eax,0xc
c001ce81:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce85:	76 37                	jbe    c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce87:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce8b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce90:	0f 84 dc 00 00 00    	je     c001cf72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	68 63 bb 02 c0       	push   0xc002bb63
c001ce9e:	e8 28 d0 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001cea3:	83 c4 10             	add    esp,0x10
c001cea6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ceaa:	eb 12                	jmp    c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ceac:	01 c1                	add    ecx,eax
c001ceae:	84 db                	test   bl,bl
c001ceb0:	75 0c                	jne    c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ceb2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceb6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ceba:	77 02                	ja     c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cebc:	01 d1                	add    ecx,edx
c001cebe:	89 0e                	mov    DWORD PTR [esi],ecx
c001cec0:	e9 ea 00 00 00       	jmp    c001cfaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cec5:	80 fb 02             	cmp    bl,0x2
c001cec8:	75 7c                	jne    c001cf46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ceca:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ced1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ced5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ced9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cedf:	74 20                	je     c001cf01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cee1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cee7:	74 18                	je     c001cf01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cee9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceed:	b9 0a 00 00 00       	mov    ecx,0xa
c001cef2:	66 83 f8 0e          	cmp    ax,0xe
c001cef6:	77 03                	ja     c001cefb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cef8:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cefb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ceff:	76 1f                	jbe    c001cf20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cf01:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cf05:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf0a:	74 66                	je     c001cf72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	68 7f bb 02 c0       	push   0xc002bb7f
c001cf14:	e8 b2 cf ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001cf19:	83 c4 10             	add    esp,0x10
c001cf1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf20:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf22:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf27:	74 13                	je     c001cf3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cf29:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cf2d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cf34:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cf38:	01 c8                	add    eax,ecx
c001cf3a:	eb 04                	jmp    c001cf40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cf3c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cf40:	01 c2                	add    edx,eax
c001cf42:	89 16                	mov    DWORD PTR [esi],edx
c001cf44:	eb 69                	jmp    c001cfaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf46:	0f b6 db             	movzx  ebx,bl
c001cf49:	50                   	push   eax
c001cf4a:	50                   	push   eax
c001cf4b:	53                   	push   ebx
c001cf4c:	68 9b bb 02 c0       	push   0xc002bb9b
c001cf51:	e8 09 58 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf5e:	74 12                	je     c001cf72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	68 a6 bb 02 c0       	push   0xc002bba6
c001cf68:	e8 5e cf ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	eb 3d                	jmp    c001cfaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	55                   	push   ebp
c001cf76:	e8 05 5e ff ff       	call   c0012d80 <File::close()>
c001cf7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf84:	59                   	pop    ecx
c001cf85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf89:	e8 1b 26 ff ff       	call   c000f5a9 <free>
c001cf8e:	5b                   	pop    ebx
c001cf8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf93:	e8 11 26 ff ff       	call   c000f5a9 <free>
c001cf98:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf9b:	e8 09 26 ff ff       	call   c000f5a9 <free>
c001cfa0:	5e                   	pop    esi
c001cfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfa5:	e8 ff 25 ff ff       	call   c000f5a9 <free>
c001cfaa:	83 c4 10             	add    esp,0x10
c001cfad:	eb 21                	jmp    c001cfd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfaf:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cfb3:	e9 76 fd ff ff       	jmp    c001cd2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfbf:	e8 e5 25 ff ff       	call   c000f5a9 <free>
c001cfc4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cfc8:	83 c4 10             	add    esp,0x10
c001cfcb:	e9 eb fc ff ff       	jmp    c001ccbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cfd0:	31 c0                	xor    eax,eax
c001cfd2:	eb 33                	jmp    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	55                   	push   ebp
c001cfd8:	e8 a3 5d ff ff       	call   c0012d80 <File::close()>
c001cfdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfe0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfe3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfe6:	58                   	pop    eax
c001cfe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfeb:	e8 b9 25 ff ff       	call   c000f5a9 <free>
c001cff0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cff3:	e8 b1 25 ff ff       	call   c000f5a9 <free>
c001cff8:	5a                   	pop    edx
c001cff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cffd:	e8 a7 25 ff ff       	call   c000f5a9 <free>
c001d002:	83 c4 10             	add    esp,0x10
c001d005:	b0 01                	mov    al,0x1
c001d007:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d00d:	5b                   	pop    ebx
c001d00e:	5e                   	pop    esi
c001d00f:	5f                   	pop    edi
c001d010:	5d                   	pop    ebp
c001d011:	c3                   	ret    

c001d012 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d012:	56                   	push   esi
c001d013:	31 d2                	xor    edx,edx
c001d015:	53                   	push   ebx
c001d016:	8b 1d c0 07 03 c0    	mov    ebx,DWORD PTR ds:0xc00307c0
c001d01c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d020:	39 d3                	cmp    ebx,edx
c001d022:	7e 1b                	jle    c001d03f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d024:	8b 04 95 e0 09 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf620]
c001d02b:	39 c8                	cmp    eax,ecx
c001d02d:	77 0d                	ja     c001d03c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d02f:	8b 34 95 e0 07 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf820]
c001d036:	01 c6                	add    esi,eax
c001d038:	39 ce                	cmp    esi,ecx
c001d03a:	77 05                	ja     c001d041 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d03c:	42                   	inc    edx
c001d03d:	eb e1                	jmp    c001d020 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d03f:	31 c0                	xor    eax,eax
c001d041:	5b                   	pop    ebx
c001d042:	5e                   	pop    esi
c001d043:	c3                   	ret    

c001d044 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d044:	53                   	push   ebx
c001d045:	31 c0                	xor    eax,eax
c001d047:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d04b:	8b 1d c0 07 03 c0    	mov    ebx,DWORD PTR ds:0xc00307c0
c001d051:	39 c3                	cmp    ebx,eax
c001d053:	7e 22                	jle    c001d077 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d055:	8b 14 85 e0 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf620]
c001d05c:	39 ca                	cmp    edx,ecx
c001d05e:	77 14                	ja     c001d074 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d060:	03 14 85 e0 07 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf820]
c001d067:	39 ca                	cmp    edx,ecx
c001d069:	76 09                	jbe    c001d074 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d06b:	8b 04 85 e0 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf420]
c001d072:	eb 05                	jmp    c001d079 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d074:	40                   	inc    eax
c001d075:	eb da                	jmp    c001d051 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d077:	31 c0                	xor    eax,eax
c001d079:	5b                   	pop    ebx
c001d07a:	c3                   	ret    

c001d07b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d07b:	53                   	push   ebx
c001d07c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d080:	53                   	push   ebx
c001d081:	e8 8c ff ff ff       	call   c001d012 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d086:	5a                   	pop    edx
c001d087:	31 d2                	xor    edx,edx
c001d089:	85 c0                	test   eax,eax
c001d08b:	74 04                	je     c001d091 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d08d:	89 da                	mov    edx,ebx
c001d08f:	29 c2                	sub    edx,eax
c001d091:	89 d0                	mov    eax,edx
c001d093:	5b                   	pop    ebx
c001d094:	c3                   	ret    

c001d095 <Thr::loadDLL(char const*, bool)>:
c001d095:	55                   	push   ebp
c001d096:	57                   	push   edi
c001d097:	56                   	push   esi
c001d098:	53                   	push   ebx
c001d099:	81 ec 34 01 00 00    	sub    esp,0x134
c001d09f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d0a6:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d0ad:	56                   	push   esi
c001d0ae:	68 be bb 02 c0       	push   0xc002bbbe
c001d0b3:	e8 a7 56 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001d0b8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d0bf:	e8 d5 24 ff ff       	call   c000f599 <malloc>
c001d0c4:	83 c4 0c             	add    esp,0xc
c001d0c7:	89 c3                	mov    ebx,eax
c001d0c9:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c001d0cf:	56                   	push   esi
c001d0d0:	50                   	push   eax
c001d0d1:	e8 e8 5b ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001d0d6:	83 c4 10             	add    esp,0x10
c001d0d9:	85 db                	test   ebx,ebx
c001d0db:	75 3c                	jne    c001d119 <Thr::loadDLL(char const*, bool)+0x84>
c001d0dd:	89 f8                	mov    eax,edi
c001d0df:	84 c0                	test   al,al
c001d0e1:	0f 84 d2 01 00 00    	je     c001d2b9 <Thr::loadDLL(char const*, bool)+0x224>
c001d0e7:	55                   	push   ebp
c001d0e8:	55                   	push   ebp
c001d0e9:	68 cf bb 02 c0       	push   0xc002bbcf
c001d0ee:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d0f2:	55                   	push   ebp
c001d0f3:	e8 14 37 fe ff       	call   c000080c <strcpy>
c001d0f8:	58                   	pop    eax
c001d0f9:	5a                   	pop    edx
c001d0fa:	56                   	push   esi
c001d0fb:	55                   	push   ebp
c001d0fc:	e8 4b 38 fe ff       	call   c000094c <strcat>
c001d101:	59                   	pop    ecx
c001d102:	58                   	pop    eax
c001d103:	68 e2 bb 02 c0       	push   0xc002bbe2
c001d108:	55                   	push   ebp
c001d109:	e8 3e 38 fe ff       	call   c000094c <strcat>
c001d10e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d111:	e8 b5 cd ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001d116:	83 c4 10             	add    esp,0x10
c001d119:	51                   	push   ecx
c001d11a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d11e:	50                   	push   eax
c001d11f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d123:	50                   	push   eax
c001d124:	53                   	push   ebx
c001d125:	e8 a4 5e ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c001d12a:	83 c4 10             	add    esp,0x10
c001d12d:	85 db                	test   ebx,ebx
c001d12f:	74 0c                	je     c001d13d <Thr::loadDLL(char const*, bool)+0xa8>
c001d131:	83 ec 0c             	sub    esp,0xc
c001d134:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d136:	53                   	push   ebx
c001d137:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d13a:	83 c4 10             	add    esp,0x10
c001d13d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d142:	75 0a                	jne    c001d14e <Thr::loadDLL(char const*, bool)+0xb9>
c001d144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d148:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d14c:	75 3c                	jne    c001d18a <Thr::loadDLL(char const*, bool)+0xf5>
c001d14e:	89 f8                	mov    eax,edi
c001d150:	84 c0                	test   al,al
c001d152:	0f 84 49 01 00 00    	je     c001d2a1 <Thr::loadDLL(char const*, bool)+0x20c>
c001d158:	51                   	push   ecx
c001d159:	51                   	push   ecx
c001d15a:	68 cf bb 02 c0       	push   0xc002bbcf
c001d15f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d163:	53                   	push   ebx
c001d164:	e8 a3 36 fe ff       	call   c000080c <strcpy>
c001d169:	5d                   	pop    ebp
c001d16a:	58                   	pop    eax
c001d16b:	56                   	push   esi
c001d16c:	53                   	push   ebx
c001d16d:	e8 da 37 fe ff       	call   c000094c <strcat>
c001d172:	58                   	pop    eax
c001d173:	5a                   	pop    edx
c001d174:	68 e2 bb 02 c0       	push   0xc002bbe2
c001d179:	53                   	push   ebx
c001d17a:	e8 cd 37 fe ff       	call   c000094c <strcat>
c001d17f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d182:	e8 44 cd ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	52                   	push   edx
c001d18b:	6a 03                	push   0x3
c001d18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d191:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d195:	05 ff 0f 00 00       	add    eax,0xfff
c001d19a:	83 d2 00             	adc    edx,0x0
c001d19d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1a1:	50                   	push   eax
c001d1a2:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c001d1a8:	e8 79 49 ff ff       	call   c0011b26 <VAS::allocatePages(int, int)>
c001d1ad:	59                   	pop    ecx
c001d1ae:	89 c3                	mov    ebx,eax
c001d1b0:	5d                   	pop    ebp
c001d1b1:	50                   	push   eax
c001d1b2:	68 31 a1 02 c0       	push   0xc002a131
c001d1b7:	e8 a3 55 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001d1bc:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1bf:	e8 a8 35 fe ff       	call   c000076c <strlen>
c001d1c4:	8b 2d c0 07 03 c0    	mov    ebp,DWORD PTR ds:0xc00307c0
c001d1ca:	40                   	inc    eax
c001d1cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1ce:	e8 c6 23 ff ff       	call   c000f599 <malloc>
c001d1d3:	89 04 ad e0 0b 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf420],eax
c001d1da:	58                   	pop    eax
c001d1db:	a1 c0 07 03 c0       	mov    eax,ds:0xc00307c0
c001d1e0:	5a                   	pop    edx
c001d1e1:	56                   	push   esi
c001d1e2:	ff 34 85 e0 0b 03 c0 	push   DWORD PTR [eax*4-0x3ffcf420]
c001d1e9:	e8 1e 36 fe ff       	call   c000080c <strcpy>
c001d1ee:	a1 c0 07 03 c0       	mov    eax,ds:0xc00307c0
c001d1f3:	8d 50 01             	lea    edx,[eax+0x1]
c001d1f6:	89 1c 85 e0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf620],ebx
c001d1fd:	89 15 c0 07 03 c0    	mov    DWORD PTR ds:0xc00307c0,edx
c001d203:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d207:	83 c4 0c             	add    esp,0xc
c001d20a:	89 14 85 e0 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf820],edx
c001d211:	6a 01                	push   0x1
c001d213:	53                   	push   ebx
c001d214:	56                   	push   esi
c001d215:	e8 c2 f6 ff ff       	call   c001c8dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d21a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d21e:	83 c4 10             	add    esp,0x10
c001d221:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d226:	0f 85 89 00 00 00    	jne    c001d2b5 <Thr::loadDLL(char const*, bool)+0x220>
c001d22c:	89 f8                	mov    eax,edi
c001d22e:	84 c0                	test   al,al
c001d230:	74 73                	je     c001d2a5 <Thr::loadDLL(char const*, bool)+0x210>
c001d232:	83 ec 0c             	sub    esp,0xc
c001d235:	68 e4 bb 02 c0       	push   0xc002bbe4
c001d23a:	e8 8c cc ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001d23f:	83 c4 10             	add    esp,0x10
c001d242:	eb 61                	jmp    c001d2a5 <Thr::loadDLL(char const*, bool)+0x210>
c001d244:	50                   	push   eax
c001d245:	50                   	push   eax
c001d246:	89 e8                	mov    eax,ebp
c001d248:	c1 e0 0c             	shl    eax,0xc
c001d24b:	01 d8                	add    eax,ebx
c001d24d:	50                   	push   eax
c001d24e:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c001d254:	e8 af 43 ff ff       	call   c0011608 <VAS::getPageTableEntry(unsigned long)>
c001d259:	83 c4 10             	add    esp,0x10
c001d25c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d25e:	a8 60                	test   al,0x60
c001d260:	75 11                	jne    c001d273 <Thr::loadDLL(char const*, bool)+0x1de>
c001d262:	83 ec 0c             	sub    esp,0xc
c001d265:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d26a:	50                   	push   eax
c001d26b:	e8 b4 26 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d270:	83 c4 10             	add    esp,0x10
c001d273:	45                   	inc    ebp
c001d274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d27c:	05 ff 0f 00 00       	add    eax,0xfff
c001d281:	bf 00 00 00 00       	mov    edi,0x0
c001d286:	83 d2 00             	adc    edx,0x0
c001d289:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d28d:	c1 ea 0c             	shr    edx,0xc
c001d290:	39 c5                	cmp    ebp,eax
c001d292:	89 d1                	mov    ecx,edx
c001d294:	89 f8                	mov    eax,edi
c001d296:	19 c8                	sbb    eax,ecx
c001d298:	72 aa                	jb     c001d244 <Thr::loadDLL(char const*, bool)+0x1af>
c001d29a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d29f:	75 18                	jne    c001d2b9 <Thr::loadDLL(char const*, bool)+0x224>
c001d2a1:	31 db                	xor    ebx,ebx
c001d2a3:	eb 14                	jmp    c001d2b9 <Thr::loadDLL(char const*, bool)+0x224>
c001d2a5:	83 ec 0c             	sub    esp,0xc
c001d2a8:	68 03 bc 02 c0       	push   0xc002bc03
c001d2ad:	e8 19 cc ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001d2b2:	83 c4 10             	add    esp,0x10
c001d2b5:	31 ed                	xor    ebp,ebp
c001d2b7:	eb bb                	jmp    c001d274 <Thr::loadDLL(char const*, bool)+0x1df>
c001d2b9:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2bf:	89 d8                	mov    eax,ebx
c001d2c1:	5b                   	pop    ebx
c001d2c2:	5e                   	pop    esi
c001d2c3:	5f                   	pop    edi
c001d2c4:	5d                   	pop    ebp
c001d2c5:	c3                   	ret    

c001d2c6 <Thr::executeDLL(unsigned long, void*)>:
c001d2c6:	56                   	push   esi
c001d2c7:	53                   	push   ebx
c001d2c8:	52                   	push   edx
c001d2c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d2d1:	85 db                	test   ebx,ebx
c001d2d3:	75 10                	jne    c001d2e5 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d2d5:	83 ec 0c             	sub    esp,0xc
c001d2d8:	68 1f bc 02 c0       	push   0xc002bc1f
c001d2dd:	e8 e9 cb ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	50                   	push   eax
c001d2e6:	50                   	push   eax
c001d2e7:	53                   	push   ebx
c001d2e8:	68 49 bc 02 c0       	push   0xc002bc49
c001d2ed:	e8 6d 54 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001d2f2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d2f6:	89 d8                	mov    eax,ebx
c001d2f8:	83 c4 14             	add    esp,0x14
c001d2fb:	5b                   	pop    ebx
c001d2fc:	5e                   	pop    esi
c001d2fd:	ff e0                	jmp    eax
c001d2ff:	90                   	nop

c001d300 <userModeEntryPoint(void*)>:
c001d300:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001d305:	48                   	dec    eax
c001d306:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001d30b:	75 01                	jne    c001d30e <userModeEntryPoint(void*)+0xe>
c001d30d:	fb                   	sti    
c001d30e:	fb                   	sti    
c001d30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d314:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d317:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d31d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d321:	e9 04 30 fe ff       	jmp    c000032a <goToUsermode>

c001d326 <changeTSS>:
c001d326:	83 ec 14             	sub    esp,0x14
c001d329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d32e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d331:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d336:	c1 e2 15             	shl    edx,0x15
c001d339:	29 d0                	sub    eax,edx
c001d33b:	50                   	push   eax
c001d33c:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001d341:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d347:	05 7c 11 00 00       	add    eax,0x117c
c001d34c:	50                   	push   eax
c001d34d:	e8 20 38 ff ff       	call   c0010b72 <TSS::setESP(unsigned long)>
c001d352:	83 c4 1c             	add    esp,0x1c
c001d355:	c3                   	ret    

c001d356 <switchToThread(ThreadControlBlock*)>:
c001d356:	57                   	push   edi
c001d357:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001d35c:	56                   	push   esi
c001d35d:	85 c0                	test   eax,eax
c001d35f:	53                   	push   ebx
c001d360:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d364:	0f 85 88 00 00 00    	jne    c001d3f2 <switchToThread(ThreadControlBlock*)+0x9c>
c001d36a:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d36d:	3c ff                	cmp    al,0xff
c001d36f:	74 7d                	je     c001d3ee <switchToThread(ThreadControlBlock*)+0x98>
c001d371:	0f b6 d0             	movzx  edx,al
c001d374:	b8 84 03 00 00       	mov    eax,0x384
c001d379:	29 d0                	sub    eax,edx
c001d37b:	c1 e0 10             	shl    eax,0x10
c001d37e:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d381:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d384:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c001d389:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d38f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d396:	74 4a                	je     c001d3e2 <switchToThread(ThreadControlBlock*)+0x8c>
c001d398:	0f 31                	rdtsc  
c001d39a:	a3 c8 0f 03 c0       	mov    ds:0xc0030fc8,eax
c001d39f:	89 c6                	mov    esi,eax
c001d3a1:	89 d7                	mov    edi,edx
c001d3a3:	2b 35 b8 0f 03 c0    	sub    esi,DWORD PTR ds:0xc0030fb8
c001d3a9:	89 15 cc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fcc,edx
c001d3af:	1b 3d bc 0f 03 c0    	sbb    edi,DWORD PTR ds:0xc0030fbc
c001d3b5:	89 35 c0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc0,esi
c001d3bb:	a3 b8 0f 03 c0       	mov    ds:0xc0030fb8,eax
c001d3c0:	89 3d c4 0f 03 c0    	mov    DWORD PTR ds:0xc0030fc4,edi
c001d3c6:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d3cc:	89 15 bc 0f 03 c0    	mov    DWORD PTR ds:0xc0030fbc,edx
c001d3d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d3d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d3d8:	01 c6                	add    esi,eax
c001d3da:	11 d7                	adc    edi,edx
c001d3dc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d3df:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d3e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d3e6:	5b                   	pop    ebx
c001d3e7:	5e                   	pop    esi
c001d3e8:	5f                   	pop    edi
c001d3e9:	e9 74 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d3ee:	31 c0                	xor    eax,eax
c001d3f0:	eb 8f                	jmp    c001d381 <switchToThread(ThreadControlBlock*)+0x2b>
c001d3f2:	5b                   	pop    ebx
c001d3f3:	c7 05 80 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x1
c001d3fd:	5e                   	pop    esi
c001d3fe:	5f                   	pop    edi
c001d3ff:	c3                   	ret    

c001d400 <Process::addArgs(char**)>:
c001d400:	57                   	push   edi
c001d401:	56                   	push   esi
c001d402:	53                   	push   ebx
c001d403:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d407:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d40b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d415:	85 ff                	test   edi,edi
c001d417:	74 3d                	je     c001d456 <Process::addArgs(char**)+0x56>
c001d419:	8b 07                	mov    eax,DWORD PTR [edi]
c001d41b:	85 c0                	test   eax,eax
c001d41d:	74 37                	je     c001d456 <Process::addArgs(char**)+0x56>
c001d41f:	31 db                	xor    ebx,ebx
c001d421:	83 ec 0c             	sub    esp,0xc
c001d424:	50                   	push   eax
c001d425:	e8 42 33 fe ff       	call   c000076c <strlen>
c001d42a:	40                   	inc    eax
c001d42b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d42e:	e8 66 21 ff ff       	call   c000f599 <malloc>
c001d433:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d43a:	5a                   	pop    edx
c001d43b:	59                   	pop    ecx
c001d43c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d43f:	43                   	inc    ebx
c001d440:	50                   	push   eax
c001d441:	e8 c6 33 fe ff       	call   c000080c <strcpy>
c001d446:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d44c:	83 c4 10             	add    esp,0x10
c001d44f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d452:	85 c0                	test   eax,eax
c001d454:	75 cb                	jne    c001d421 <Process::addArgs(char**)+0x21>
c001d456:	5b                   	pop    ebx
c001d457:	5e                   	pop    esi
c001d458:	5f                   	pop    edi
c001d459:	c3                   	ret    

c001d45a <Process::Process(char const*, Process*, char**)>:
c001d45a:	56                   	push   esi
c001d45b:	53                   	push   ebx
c001d45c:	83 ec 14             	sub    esp,0x14
c001d45f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d463:	05 0c 02 00 00       	add    eax,0x20c
c001d468:	bb 07 00 00 00       	mov    ebx,0x7
c001d46d:	89 c6                	mov    esi,eax
c001d46f:	85 db                	test   ebx,ebx
c001d471:	78 12                	js     c001d485 <Process::Process(char const*, Process*, char**)+0x2b>
c001d473:	83 ec 0c             	sub    esp,0xc
c001d476:	56                   	push   esi
c001d477:	e8 9a b6 00 00       	call   c0028b16 <ThreadControlBlock::ThreadControlBlock()>
c001d47c:	83 c4 10             	add    esp,0x10
c001d47f:	83 c6 63             	add    esi,0x63
c001d482:	4b                   	dec    ebx
c001d483:	eb ea                	jmp    c001d46f <Process::Process(char const*, Process*, char**)+0x15>
c001d485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d489:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d490:	83 ec 0c             	sub    esp,0xc
c001d493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d497:	e8 b8 c8 ff ff       	call   c0019d54 <Krnl::newProcessEnv(Process*)>
c001d49c:	83 c4 10             	add    esp,0x10
c001d49f:	89 c2                	mov    edx,eax
c001d4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4af:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4b8:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c001d4bd:	8d 50 01             	lea    edx,[eax+0x1]
c001d4c0:	89 15 f0 cf 02 c0    	mov    DWORD PTR ds:0xc002cff0,edx
c001d4c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d4ca:	89 02                	mov    DWORD PTR [edx],eax
c001d4cc:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4db:	e8 b9 20 ff ff       	call   c000f599 <malloc>
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	89 c3                	mov    ebx,eax
c001d4e5:	83 ec 08             	sub    esp,0x8
c001d4e8:	6a 00                	push   0x0
c001d4ea:	53                   	push   ebx
c001d4eb:	e8 de 49 ff ff       	call   c0011ece <VAS::VAS(bool)>
c001d4f0:	83 c4 10             	add    esp,0x10
c001d4f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4f7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d4fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d501:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d50f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d513:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d523:	85 c0                	test   eax,eax
c001d525:	74 42                	je     c001d569 <Process::Process(char const*, Process*, char**)+0x10f>
c001d527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d531:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d53b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d545:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d54b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d551:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d555:	05 0c 01 00 00       	add    eax,0x10c
c001d55a:	83 ec 08             	sub    esp,0x8
c001d55d:	52                   	push   edx
c001d55e:	50                   	push   eax
c001d55f:	e8 a8 32 fe ff       	call   c000080c <strcpy>
c001d564:	83 c4 10             	add    esp,0x10
c001d567:	eb 63                	jmp    c001d5cc <Process::Process(char const*, Process*, char**)+0x172>
c001d569:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d571:	83 ec 0c             	sub    esp,0xc
c001d574:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d578:	e8 1c 20 ff ff       	call   c000f599 <malloc>
c001d57d:	83 c4 10             	add    esp,0x10
c001d580:	89 c3                	mov    ebx,eax
c001d582:	83 ec 08             	sub    esp,0x8
c001d585:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d589:	53                   	push   ebx
c001d58a:	e8 f7 32 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d596:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	50                   	push   eax
c001d5aa:	e8 96 2a ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d5af:	83 c4 10             	add    esp,0x10
c001d5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b6:	05 0c 01 00 00       	add    eax,0x10c
c001d5bb:	83 ec 08             	sub    esp,0x8
c001d5be:	68 68 bc 02 c0       	push   0xc002bc68
c001d5c3:	50                   	push   eax
c001d5c4:	e8 43 32 fe ff       	call   c000080c <strcpy>
c001d5c9:	83 c4 10             	add    esp,0x10
c001d5cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d0:	83 c0 0c             	add    eax,0xc
c001d5d3:	83 ec 08             	sub    esp,0x8
c001d5d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5da:	50                   	push   eax
c001d5db:	e8 2c 32 fe ff       	call   c000080c <strcpy>
c001d5e0:	83 c4 10             	add    esp,0x10
c001d5e3:	83 ec 08             	sub    esp,0x8
c001d5e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d5ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5ee:	e8 0d fe ff ff       	call   c001d400 <Process::addArgs(char**)>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	83 ec 08             	sub    esp,0x8
c001d5f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d601:	e8 a0 ed ff ff       	call   c001c3a6 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d606:	83 c4 10             	add    esp,0x10
c001d609:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d60d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d611:	83 f0 01             	xor    eax,0x1
c001d614:	88 c2                	mov    dl,al
c001d616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d61a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d620:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d625:	83 ec 08             	sub    esp,0x8
c001d628:	50                   	push   eax
c001d629:	68 c0 bc 02 c0       	push   0xc002bcc0
c001d62e:	e8 2c 51 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001d633:	83 c4 10             	add    esp,0x10
c001d636:	90                   	nop
c001d637:	83 c4 14             	add    esp,0x14
c001d63a:	5b                   	pop    ebx
c001d63b:	5e                   	pop    esi
c001d63c:	c3                   	ret    
c001d63d:	90                   	nop

c001d63e <Process::Process(bool, char const*, Process*, char**)>:
c001d63e:	56                   	push   esi
c001d63f:	53                   	push   ebx
c001d640:	83 ec 24             	sub    esp,0x24
c001d643:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d647:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d64b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d64f:	05 0c 02 00 00       	add    eax,0x20c
c001d654:	bb 07 00 00 00       	mov    ebx,0x7
c001d659:	89 c6                	mov    esi,eax
c001d65b:	85 db                	test   ebx,ebx
c001d65d:	78 12                	js     c001d671 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	56                   	push   esi
c001d663:	e8 ae b4 00 00       	call   c0028b16 <ThreadControlBlock::ThreadControlBlock()>
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	83 c6 63             	add    esi,0x63
c001d66e:	4b                   	dec    ebx
c001d66f:	eb ea                	jmp    c001d65b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d671:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d675:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d67c:	83 ec 0c             	sub    esp,0xc
c001d67f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d683:	e8 cc c6 ff ff       	call   c0019d54 <Krnl::newProcessEnv(Process*)>
c001d688:	83 c4 10             	add    esp,0x10
c001d68b:	89 c2                	mov    edx,eax
c001d68d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d691:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d69b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6a4:	a1 f0 cf 02 c0       	mov    eax,ds:0xc002cff0
c001d6a9:	8d 50 01             	lea    edx,[eax+0x1]
c001d6ac:	89 15 f0 cf 02 c0    	mov    DWORD PTR ds:0xc002cff0,edx
c001d6b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6b6:	89 02                	mov    DWORD PTR [edx],eax
c001d6b8:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d6c0:	83 ec 0c             	sub    esp,0xc
c001d6c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6c7:	e8 cd 1e ff ff       	call   c000f599 <malloc>
c001d6cc:	83 c4 10             	add    esp,0x10
c001d6cf:	89 c3                	mov    ebx,eax
c001d6d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6d6:	83 ec 08             	sub    esp,0x8
c001d6d9:	50                   	push   eax
c001d6da:	53                   	push   ebx
c001d6db:	e8 ee 47 ff ff       	call   c0011ece <VAS::VAS(bool)>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6e7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d6ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d6fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d703:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d713:	85 c0                	test   eax,eax
c001d715:	74 42                	je     c001d759 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d71b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d721:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d727:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d72b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d735:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d73b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d741:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d745:	05 0c 01 00 00       	add    eax,0x10c
c001d74a:	83 ec 08             	sub    esp,0x8
c001d74d:	52                   	push   edx
c001d74e:	50                   	push   eax
c001d74f:	e8 b8 30 fe ff       	call   c000080c <strcpy>
c001d754:	83 c4 10             	add    esp,0x10
c001d757:	eb 63                	jmp    c001d7bc <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d759:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d761:	83 ec 0c             	sub    esp,0xc
c001d764:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d768:	e8 2c 1e ff ff       	call   c000f599 <malloc>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	89 c3                	mov    ebx,eax
c001d772:	83 ec 08             	sub    esp,0x8
c001d775:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d779:	53                   	push   ebx
c001d77a:	e8 07 31 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d77f:	83 c4 10             	add    esp,0x10
c001d782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d786:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d78c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d790:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d796:	83 ec 0c             	sub    esp,0xc
c001d799:	50                   	push   eax
c001d79a:	e8 a6 28 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d79f:	83 c4 10             	add    esp,0x10
c001d7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7a6:	05 0c 01 00 00       	add    eax,0x10c
c001d7ab:	83 ec 08             	sub    esp,0x8
c001d7ae:	68 68 bc 02 c0       	push   0xc002bc68
c001d7b3:	50                   	push   eax
c001d7b4:	e8 53 30 fe ff       	call   c000080c <strcpy>
c001d7b9:	83 c4 10             	add    esp,0x10
c001d7bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7c0:	83 c0 0c             	add    eax,0xc
c001d7c3:	83 ec 08             	sub    esp,0x8
c001d7c6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7ca:	50                   	push   eax
c001d7cb:	e8 3c 30 fe ff       	call   c000080c <strcpy>
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	83 ec 08             	sub    esp,0x8
c001d7d6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d7da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d7de:	e8 1d fc ff ff       	call   c001d400 <Process::addArgs(char**)>
c001d7e3:	83 c4 10             	add    esp,0x10
c001d7e6:	90                   	nop
c001d7e7:	83 c4 24             	add    esp,0x24
c001d7ea:	5b                   	pop    ebx
c001d7eb:	5e                   	pop    esi
c001d7ec:	c3                   	ret    

c001d7ed <taskStartupFunction>:
c001d7ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7f2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d7f5:	c3                   	ret    

c001d7f6 <Semaphore::Semaphore(int)>:
c001d7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7fe:	89 10                	mov    DWORD PTR [eax],edx
c001d800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d804:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d80b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d80f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d81a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d821:	90                   	nop
c001d822:	c3                   	ret    
c001d823:	90                   	nop

c001d824 <Mutex::Mutex()>:
c001d824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d828:	6a 01                	push   0x1
c001d82a:	50                   	push   eax
c001d82b:	e8 c6 ff ff ff       	call   c001d7f6 <Semaphore::Semaphore(int)>
c001d830:	83 c4 08             	add    esp,0x8
c001d833:	90                   	nop
c001d834:	c3                   	ret    
c001d835:	90                   	nop

c001d836 <Process::createThread(void (*)(void*), void*, int)>:
c001d836:	55                   	push   ebp
c001d837:	31 c9                	xor    ecx,ecx
c001d839:	57                   	push   edi
c001d83a:	56                   	push   esi
c001d83b:	53                   	push   ebx
c001d83c:	83 ec 1c             	sub    esp,0x1c
c001d83f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d843:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d84a:	89 f2                	mov    edx,esi
c001d84c:	0f b7 c2             	movzx  eax,dx
c001d84f:	83 e2 01             	and    edx,0x1
c001d852:	74 16                	je     c001d86a <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d854:	d1 f8                	sar    eax,1
c001d856:	41                   	inc    ecx
c001d857:	89 c2                	mov    edx,eax
c001d859:	83 f9 10             	cmp    ecx,0x10
c001d85c:	75 ee                	jne    c001d84c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d85e:	83 c4 1c             	add    esp,0x1c
c001d861:	31 db                	xor    ebx,ebx
c001d863:	89 d8                	mov    eax,ebx
c001d865:	5b                   	pop    ebx
c001d866:	5e                   	pop    esi
c001d867:	5f                   	pop    edi
c001d868:	5d                   	pop    ebp
c001d869:	c3                   	ret    
c001d86a:	b8 01 00 00 00       	mov    eax,0x1
c001d86f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d872:	d3 e0                	shl    eax,cl
c001d874:	09 c6                	or     esi,eax
c001d876:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d879:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d880:	89 c6                	mov    esi,eax
c001d882:	c1 e6 05             	shl    esi,0x5
c001d885:	01 f0                	add    eax,esi
c001d887:	01 d8                	add    eax,ebx
c001d889:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d890:	75 0a                	jne    c001d89c <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d892:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d89c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d8a2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d8a6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d8a9:	01 ca                	add    edx,ecx
c001d8ab:	83 ec 08             	sub    esp,0x8
c001d8ae:	89 d0                	mov    eax,edx
c001d8b0:	c1 e0 05             	shl    eax,0x5
c001d8b3:	01 d0                	add    eax,edx
c001d8b5:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d8b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8bd:	01 d8                	add    eax,ebx
c001d8bf:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d8c5:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d8cb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d8d1:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d8d7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d8dd:	89 cd                	mov    ebp,ecx
c001d8df:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d8e3:	f7 dd                	neg    ebp
c001d8e5:	c1 e5 15             	shl    ebp,0x15
c001d8e8:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d8ee:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d8f4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d8fe:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d904:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d90e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d918:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d91c:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d923:	53                   	push   ebx
c001d924:	68 a4 0f 03 c0       	push   0xc0030fa4
c001d929:	e8 a2 af 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d92e:	89 d8                	mov    eax,ebx
c001d930:	83 c4 10             	add    esp,0x10
c001d933:	83 c4 1c             	add    esp,0x1c
c001d936:	5b                   	pop    ebx
c001d937:	5e                   	pop    esi
c001d938:	5f                   	pop    edi
c001d939:	5d                   	pop    ebp
c001d93a:	c3                   	ret    
c001d93b:	90                   	nop

c001d93c <Process::createUserThread()>:
c001d93c:	83 ec 0c             	sub    esp,0xc
c001d93f:	68 80 00 00 00       	push   0x80
c001d944:	6a 00                	push   0x0
c001d946:	68 00 d3 01 c0       	push   0xc001d300
c001d94b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d94f:	e8 e2 fe ff ff       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c001d954:	83 c4 1c             	add    esp,0x1c
c001d957:	c3                   	ret    

c001d958 <setupMultitasking(void (*)())>:
c001d958:	56                   	push   esi
c001d959:	53                   	push   ebx
c001d95a:	51                   	push   ecx
c001d95b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d95f:	eb 10                	jmp    c001d971 <setupMultitasking(void (*)())+0x19>
c001d961:	83 ec 0c             	sub    esp,0xc
c001d964:	68 a4 0f 03 c0       	push   0xc0030fa4
c001d969:	e8 b4 ae 00 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d96e:	83 c4 10             	add    esp,0x10
c001d971:	83 ec 0c             	sub    esp,0xc
c001d974:	68 a4 0f 03 c0       	push   0xc0030fa4
c001d979:	e8 80 ae 00 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d97e:	83 c4 10             	add    esp,0x10
c001d981:	84 c0                	test   al,al
c001d983:	74 dc                	je     c001d961 <setupMultitasking(void (*)())+0x9>
c001d985:	83 ec 0c             	sub    esp,0xc
c001d988:	68 3f 07 00 00       	push   0x73f
c001d98d:	e8 07 1c ff ff       	call   c000f599 <malloc>
c001d992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d999:	89 c3                	mov    ebx,eax
c001d99b:	6a 00                	push   0x0
c001d99d:	68 6c bc 02 c0       	push   0xc002bc6c
c001d9a2:	6a 01                	push   0x1
c001d9a4:	50                   	push   eax
c001d9a5:	e8 94 fc ff ff       	call   c001d63e <Process::Process(bool, char const*, Process*, char**)>
c001d9aa:	83 c4 14             	add    esp,0x14
c001d9ad:	89 1d b0 0f 03 c0    	mov    DWORD PTR ds:0xc0030fb0,ebx
c001d9b3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d9b9:	e8 95 29 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d9be:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d9c6:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d9d0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d9d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d9d9:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d9e3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d9e9:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d9ef:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d9f9:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001da03:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001da0d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001da13:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001da1d:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001da23:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001da2d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001da33:	58                   	pop    eax
c001da34:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001da3a:	5a                   	pop    edx
c001da3b:	68 68 bc 02 c0       	push   0xc002bc68
c001da40:	50                   	push   eax
c001da41:	e8 c6 2d fe ff       	call   c000080c <strcpy>
c001da46:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001da4d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da51:	83 c4 14             	add    esp,0x14
c001da54:	5b                   	pop    ebx
c001da55:	5e                   	pop    esi
c001da56:	e9 f9 28 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001da5b <schedule()>:
c001da5b:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001da60:	85 c0                	test   eax,eax
c001da62:	74 0b                	je     c001da6f <schedule()+0x14>
c001da64:	c7 05 80 0f 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x1
c001da6e:	c3                   	ret    
c001da6f:	53                   	push   ebx
c001da70:	83 ec 14             	sub    esp,0x14
c001da73:	68 a4 0f 03 c0       	push   0xc0030fa4
c001da78:	e8 81 ad 00 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	84 c0                	test   al,al
c001da82:	75 38                	jne    c001dabc <schedule()+0x61>
c001da84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da89:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da8c:	4a                   	dec    edx
c001da8d:	74 32                	je     c001dac1 <schedule()+0x66>
c001da8f:	83 ec 0c             	sub    esp,0xc
c001da92:	68 a4 0f 03 c0       	push   0xc0030fa4
c001da97:	e8 7e ad 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da9c:	c7 04 24 a4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa4
c001daa3:	89 c3                	mov    ebx,eax
c001daa5:	e8 78 ad 00 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001daaa:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dab1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dab4:	e8 9d f8 ff ff       	call   c001d356 <switchToThread(ThreadControlBlock*)>
c001dab9:	83 c4 10             	add    esp,0x10
c001dabc:	83 c4 08             	add    esp,0x8
c001dabf:	5b                   	pop    ebx
c001dac0:	c3                   	ret    
c001dac1:	83 ec 08             	sub    esp,0x8
c001dac4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dacb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dad1:	68 a4 0f 03 c0       	push   0xc0030fa4
c001dad6:	e8 f5 ad 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dadb:	83 c4 10             	add    esp,0x10
c001dade:	eb af                	jmp    c001da8f <schedule()+0x34>

c001dae0 <Semaphore::tryAcquire()>:
c001dae0:	53                   	push   ebx
c001dae1:	83 ec 08             	sub    esp,0x8
c001dae4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dae8:	fa                   	cli    
c001dae9:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001daee:	8d 50 01             	lea    edx,[eax+0x1]
c001daf1:	89 15 88 0f 03 c0    	mov    DWORD PTR ds:0xc0030f88,edx
c001daf7:	8b 15 84 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f84
c001dafd:	8d 5a 01             	lea    ebx,[edx+0x1]
c001db00:	89 1d 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,ebx
c001db06:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001db09:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001db0b:	7c 2a                	jl     c001db37 <Semaphore::tryAcquire()+0x57>
c001db0d:	89 15 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,edx
c001db13:	85 d2                	test   edx,edx
c001db15:	75 0a                	jne    c001db21 <Semaphore::tryAcquire()+0x41>
c001db17:	8b 15 80 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f80
c001db1d:	85 d2                	test   edx,edx
c001db1f:	75 5b                	jne    c001db7c <Semaphore::tryAcquire()+0x9c>
c001db21:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001db26:	85 c0                	test   eax,eax
c001db28:	74 07                	je     c001db31 <Semaphore::tryAcquire()+0x51>
c001db2a:	31 c0                	xor    eax,eax
c001db2c:	83 c4 08             	add    esp,0x8
c001db2f:	5b                   	pop    ebx
c001db30:	c3                   	ret    
c001db31:	fb                   	sti    
c001db32:	83 c4 08             	add    esp,0x8
c001db35:	5b                   	pop    ebx
c001db36:	c3                   	ret    
c001db37:	43                   	inc    ebx
c001db38:	89 15 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,edx
c001db3e:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001db41:	85 d2                	test   edx,edx
c001db43:	75 1f                	jne    c001db64 <Semaphore::tryAcquire()+0x84>
c001db45:	8b 0d 80 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f80
c001db4b:	85 c9                	test   ecx,ecx
c001db4d:	74 15                	je     c001db64 <Semaphore::tryAcquire()+0x84>
c001db4f:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001db59:	e8 fd fe ff ff       	call   c001da5b <schedule()>
c001db5e:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001db63:	48                   	dec    eax
c001db64:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001db69:	85 c0                	test   eax,eax
c001db6b:	75 08                	jne    c001db75 <Semaphore::tryAcquire()+0x95>
c001db6d:	fb                   	sti    
c001db6e:	b0 01                	mov    al,0x1
c001db70:	83 c4 08             	add    esp,0x8
c001db73:	5b                   	pop    ebx
c001db74:	c3                   	ret    
c001db75:	b0 01                	mov    al,0x1
c001db77:	83 c4 08             	add    esp,0x8
c001db7a:	5b                   	pop    ebx
c001db7b:	c3                   	ret    
c001db7c:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001db86:	e8 d0 fe ff ff       	call   c001da5b <schedule()>
c001db8b:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001db90:	48                   	dec    eax
c001db91:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001db96:	85 c0                	test   eax,eax
c001db98:	75 90                	jne    c001db2a <Semaphore::tryAcquire()+0x4a>
c001db9a:	eb 95                	jmp    c001db31 <Semaphore::tryAcquire()+0x51>

c001db9c <Semaphore::assertLocked(char const*)>:
c001db9c:	83 ec 0c             	sub    esp,0xc
c001db9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dba3:	fa                   	cli    
c001dba4:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001dbaa:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001dbaf:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbb2:	89 0d 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,ecx
c001dbb8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dbba:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dbbd:	7c 24                	jl     c001dbe3 <Semaphore::assertLocked(char const*)+0x47>
c001dbbf:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001dbc4:	85 c0                	test   eax,eax
c001dbc6:	75 09                	jne    c001dbd1 <Semaphore::assertLocked(char const*)+0x35>
c001dbc8:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001dbcd:	85 c0                	test   eax,eax
c001dbcf:	75 29                	jne    c001dbfa <Semaphore::assertLocked(char const*)+0x5e>
c001dbd1:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001dbd6:	48                   	dec    eax
c001dbd7:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001dbdc:	75 01                	jne    c001dbdf <Semaphore::assertLocked(char const*)+0x43>
c001dbde:	fb                   	sti    
c001dbdf:	83 c4 0c             	add    esp,0xc
c001dbe2:	c3                   	ret    
c001dbe3:	83 ec 0c             	sub    esp,0xc
c001dbe6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dbea:	e8 dc c2 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001dbef:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	48                   	dec    eax
c001dbf8:	eb c5                	jmp    c001dbbf <Semaphore::assertLocked(char const*)+0x23>
c001dbfa:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001dc04:	e8 52 fe ff ff       	call   c001da5b <schedule()>
c001dc09:	eb c6                	jmp    c001dbd1 <Semaphore::assertLocked(char const*)+0x35>

c001dc0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dc0b:	83 ec 0c             	sub    esp,0xc
c001dc0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc17:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc1a:	e8 3c fe ff ff       	call   c001da5b <schedule()>
c001dc1f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001dc24:	48                   	dec    eax
c001dc25:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001dc2a:	75 01                	jne    c001dc2d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dc2c:	fb                   	sti    
c001dc2d:	83 c4 0c             	add    esp,0xc
c001dc30:	c3                   	ret    

c001dc31 <blockTask(TaskState)>:
c001dc31:	83 ec 0c             	sub    esp,0xc
c001dc34:	fa                   	cli    
c001dc35:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001dc3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc44:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc47:	e8 0f fe ff ff       	call   c001da5b <schedule()>
c001dc4c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001dc51:	48                   	dec    eax
c001dc52:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001dc57:	75 01                	jne    c001dc5a <blockTask(TaskState)+0x29>
c001dc59:	fb                   	sti    
c001dc5a:	83 c4 0c             	add    esp,0xc
c001dc5d:	c3                   	ret    

c001dc5e <waitTask(int, int*, int)>:
c001dc5e:	83 ec 18             	sub    esp,0x18
c001dc61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc6a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dc6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc76:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dc79:	6a 07                	push   0x7
c001dc7b:	e8 b1 ff ff ff       	call   c001dc31 <blockTask(TaskState)>
c001dc80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc85:	83 c4 10             	add    esp,0x10
c001dc88:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dc8b:	85 d2                	test   edx,edx
c001dc8d:	74 0a                	je     c001dc99 <waitTask(int, int*, int)+0x3b>
c001dc8f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dc92:	89 02                	mov    DWORD PTR [edx],eax
c001dc94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc99:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dc9c:	83 c4 0c             	add    esp,0xc
c001dc9f:	c3                   	ret    

c001dca0 <nanoSleepUntil(unsigned long long)>:
c001dca0:	83 ec 0c             	sub    esp,0xc
c001dca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcab:	3b 05 d0 e0 02 c0    	cmp    eax,DWORD PTR ds:0xc002e0d0
c001dcb1:	89 d1                	mov    ecx,edx
c001dcb3:	1b 0d d4 e0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e0d4
c001dcb9:	73 04                	jae    c001dcbf <nanoSleepUntil(unsigned long long)+0x1f>
c001dcbb:	83 c4 0c             	add    esp,0xc
c001dcbe:	c3                   	ret    
c001dcbf:	fa                   	cli    
c001dcc0:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001dcc6:	83 ec 08             	sub    esp,0x8
c001dcc9:	ff 05 84 0f 03 c0    	inc    DWORD PTR ds:0xc0030f84
c001dccf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dcd5:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dcd8:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dcdb:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dce1:	68 98 0f 03 c0       	push   0xc0030f98
c001dce6:	e8 e5 ab 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dceb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dcf2:	e8 3a ff ff ff       	call   c001dc31 <blockTask(TaskState)>
c001dcf7:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	48                   	dec    eax
c001dd00:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001dd05:	85 c0                	test   eax,eax
c001dd07:	75 09                	jne    c001dd12 <nanoSleepUntil(unsigned long long)+0x72>
c001dd09:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001dd0e:	85 c0                	test   eax,eax
c001dd10:	75 12                	jne    c001dd24 <nanoSleepUntil(unsigned long long)+0x84>
c001dd12:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001dd17:	48                   	dec    eax
c001dd18:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001dd1d:	75 9c                	jne    c001dcbb <nanoSleepUntil(unsigned long long)+0x1b>
c001dd1f:	fb                   	sti    
c001dd20:	83 c4 0c             	add    esp,0xc
c001dd23:	c3                   	ret    
c001dd24:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001dd2e:	e8 28 fd ff ff       	call   c001da5b <schedule()>
c001dd33:	eb dd                	jmp    c001dd12 <nanoSleepUntil(unsigned long long)+0x72>

c001dd35 <nanoSleep(unsigned long long)>:
c001dd35:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c001dd3a:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c001dd40:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dd44:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dd48:	e9 53 ff ff ff       	jmp    c001dca0 <nanoSleepUntil(unsigned long long)>

c001dd4d <sleep(unsigned long long)>:
c001dd4d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dd55:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dd5a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dd5e:	01 ca                	add    edx,ecx
c001dd60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd64:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd68:	eb cb                	jmp    c001dd35 <nanoSleep(unsigned long long)>

c001dd6a <Semaphore::acquire()>:
c001dd6a:	83 ec 0c             	sub    esp,0xc
c001dd6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd71:	fa                   	cli    
c001dd72:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001dd77:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001dd7d:	8d 48 01             	lea    ecx,[eax+0x1]
c001dd80:	89 0d 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,ecx
c001dd86:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dd89:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dd8b:	7d 28                	jge    c001ddb5 <Semaphore::acquire()+0x4b>
c001dd8d:	41                   	inc    ecx
c001dd8e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dd91:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001dd96:	85 c0                	test   eax,eax
c001dd98:	75 09                	jne    c001dda3 <Semaphore::acquire()+0x39>
c001dd9a:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001dd9f:	85 c0                	test   eax,eax
c001dda1:	75 4e                	jne    c001ddf1 <Semaphore::acquire()+0x87>
c001dda3:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001dda8:	48                   	dec    eax
c001dda9:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001ddae:	75 01                	jne    c001ddb1 <Semaphore::acquire()+0x47>
c001ddb0:	fb                   	sti    
c001ddb1:	83 c4 0c             	add    esp,0xc
c001ddb4:	c3                   	ret    
c001ddb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ddc1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ddc4:	85 c9                	test   ecx,ecx
c001ddc6:	74 3a                	je     c001de02 <Semaphore::acquire()+0x98>
c001ddc8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ddcb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ddd1:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ddd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddd9:	83 ec 0c             	sub    esp,0xc
c001dddc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dddf:	6a 05                	push   0x5
c001dde1:	e8 4b fe ff ff       	call   c001dc31 <blockTask(TaskState)>
c001dde6:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001ddeb:	83 c4 10             	add    esp,0x10
c001ddee:	48                   	dec    eax
c001ddef:	eb a0                	jmp    c001dd91 <Semaphore::acquire()+0x27>
c001ddf1:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001ddfb:	e8 5b fc ff ff       	call   c001da5b <schedule()>
c001de00:	eb a1                	jmp    c001dda3 <Semaphore::acquire()+0x39>
c001de02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de07:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001de0a:	eb c8                	jmp    c001ddd4 <Semaphore::acquire()+0x6a>

c001de0c <taskReturned>:
c001de0c:	83 ec 18             	sub    esp,0x18
c001de0f:	68 e8 bc 02 c0       	push   0xc002bce8
c001de14:	e8 b2 c0 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001de19:	83 c4 10             	add    esp,0x10
c001de1c:	83 ec 0c             	sub    esp,0xc
c001de1f:	6a 02                	push   0x2
c001de21:	e8 0b fe ff ff       	call   c001dc31 <blockTask(TaskState)>
c001de26:	fa                   	cli    
c001de27:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001de2d:	e8 29 fc ff ff       	call   c001da5b <schedule()>
c001de32:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001de37:	83 c4 10             	add    esp,0x10
c001de3a:	48                   	dec    eax
c001de3b:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001de40:	85 c0                	test   eax,eax
c001de42:	75 d8                	jne    c001de1c <taskReturned+0x10>
c001de44:	fb                   	sti    
c001de45:	eb d5                	jmp    c001de1c <taskReturned+0x10>

c001de47 <Thr::processFromPID(int)>:
c001de47:	57                   	push   edi
c001de48:	56                   	push   esi
c001de49:	53                   	push   ebx
c001de4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de4e:	fa                   	cli    
c001de4f:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001de55:	83 ec 0c             	sub    esp,0xc
c001de58:	68 a4 0f 03 c0       	push   0xc0030fa4
c001de5d:	e8 b8 a9 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	89 c7                	mov    edi,eax
c001de67:	eb 14                	jmp    c001de7d <Thr::processFromPID(int)+0x36>
c001de69:	83 ec 0c             	sub    esp,0xc
c001de6c:	68 a4 0f 03 c0       	push   0xc0030fa4
c001de71:	e8 a4 a9 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de76:	83 c4 10             	add    esp,0x10
c001de79:	39 f8                	cmp    eax,edi
c001de7b:	74 49                	je     c001dec6 <Thr::processFromPID(int)+0x7f>
c001de7d:	83 ec 0c             	sub    esp,0xc
c001de80:	68 a4 0f 03 c0       	push   0xc0030fa4
c001de85:	e8 90 a9 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de8a:	c7 04 24 a4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa4
c001de91:	89 c3                	mov    ebx,eax
c001de93:	e8 8a a9 00 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de98:	58                   	pop    eax
c001de99:	5a                   	pop    edx
c001de9a:	53                   	push   ebx
c001de9b:	68 a4 0f 03 c0       	push   0xc0030fa4
c001dea0:	e8 2b aa 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dea5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	39 30                	cmp    DWORD PTR [eax],esi
c001dead:	75 ba                	jne    c001de69 <Thr::processFromPID(int)+0x22>
c001deaf:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001deb4:	48                   	dec    eax
c001deb5:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001deba:	74 07                	je     c001dec3 <Thr::processFromPID(int)+0x7c>
c001debc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001debf:	5b                   	pop    ebx
c001dec0:	5e                   	pop    esi
c001dec1:	5f                   	pop    edi
c001dec2:	c3                   	ret    
c001dec3:	fb                   	sti    
c001dec4:	eb f6                	jmp    c001debc <Thr::processFromPID(int)+0x75>
c001dec6:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001decb:	48                   	dec    eax
c001decc:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001ded1:	75 05                	jne    c001ded8 <Thr::processFromPID(int)+0x91>
c001ded3:	fb                   	sti    
c001ded4:	5b                   	pop    ebx
c001ded5:	5e                   	pop    esi
c001ded6:	5f                   	pop    edi
c001ded7:	c3                   	ret    
c001ded8:	5b                   	pop    ebx
c001ded9:	31 c0                	xor    eax,eax
c001dedb:	5e                   	pop    esi
c001dedc:	5f                   	pop    edi
c001dedd:	c3                   	ret    

c001dede <unblockTask(ThreadControlBlock*)>:
c001dede:	53                   	push   ebx
c001dedf:	83 ec 08             	sub    esp,0x8
c001dee2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dee6:	fa                   	cli    
c001dee7:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001deed:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001def0:	85 c0                	test   eax,eax
c001def2:	74 5a                	je     c001df4e <unblockTask(ThreadControlBlock*)+0x70>
c001def4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001def7:	48                   	dec    eax
c001def8:	74 31                	je     c001df2b <unblockTask(ThreadControlBlock*)+0x4d>
c001defa:	83 ec 0c             	sub    esp,0xc
c001defd:	68 a4 0f 03 c0       	push   0xc0030fa4
c001df02:	e8 13 a9 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df07:	83 c4 10             	add    esp,0x10
c001df0a:	85 c0                	test   eax,eax
c001df0c:	75 17                	jne    c001df25 <unblockTask(ThreadControlBlock*)+0x47>
c001df0e:	eb 50                	jmp    c001df60 <unblockTask(ThreadControlBlock*)+0x82>
c001df10:	83 ec 08             	sub    esp,0x8
c001df13:	50                   	push   eax
c001df14:	68 a4 0f 03 c0       	push   0xc0030fa4
c001df19:	e8 84 ac 00 00       	call   c0028ba2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001df1e:	83 c4 10             	add    esp,0x10
c001df21:	85 c0                	test   eax,eax
c001df23:	74 3b                	je     c001df60 <unblockTask(ThreadControlBlock*)+0x82>
c001df25:	39 c3                	cmp    ebx,eax
c001df27:	75 e7                	jne    c001df10 <unblockTask(ThreadControlBlock*)+0x32>
c001df29:	eb 10                	jmp    c001df3b <unblockTask(ThreadControlBlock*)+0x5d>
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	68 8a bc 02 c0       	push   0xc002bc8a
c001df33:	e8 27 48 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001df38:	83 c4 10             	add    esp,0x10
c001df3b:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001df40:	48                   	dec    eax
c001df41:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001df46:	75 01                	jne    c001df49 <unblockTask(ThreadControlBlock*)+0x6b>
c001df48:	fb                   	sti    
c001df49:	83 c4 08             	add    esp,0x8
c001df4c:	5b                   	pop    ebx
c001df4d:	c3                   	ret    
c001df4e:	83 ec 0c             	sub    esp,0xc
c001df51:	68 73 bc 02 c0       	push   0xc002bc73
c001df56:	e8 04 48 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001df5b:	83 c4 10             	add    esp,0x10
c001df5e:	eb db                	jmp    c001df3b <unblockTask(ThreadControlBlock*)+0x5d>
c001df60:	83 ec 08             	sub    esp,0x8
c001df63:	53                   	push   ebx
c001df64:	68 a4 0f 03 c0       	push   0xc0030fa4
c001df69:	e8 62 a9 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6e:	83 c4 10             	add    esp,0x10
c001df71:	eb c8                	jmp    c001df3b <unblockTask(ThreadControlBlock*)+0x5d>

c001df73 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001df73:	55                   	push   ebp
c001df74:	57                   	push   edi
c001df75:	56                   	push   esi
c001df76:	53                   	push   ebx
c001df77:	83 ec 1c             	sub    esp,0x1c
c001df7a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df7e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df81:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001df87:	85 ff                	test   edi,edi
c001df89:	7e 20                	jle    c001dfab <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001df8b:	31 f6                	xor    esi,esi
c001df8d:	83 ec 0c             	sub    esp,0xc
c001df90:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001df97:	46                   	inc    esi
c001df98:	e8 0c 16 ff ff       	call   c000f5a9 <free>
c001df9d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfa0:	83 c4 10             	add    esp,0x10
c001dfa3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dfa9:	7f e2                	jg     c001df8d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dfab:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dfb5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dfba:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dfbd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dfc0:	d3 c0                	rol    eax,cl
c001dfc2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dfc9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfcc:	89 f7                	mov    edi,esi
c001dfce:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dfd6:	0f 85 64 01 00 00    	jne    c001e140 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dfdc:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dfe2:	85 ed                	test   ebp,ebp
c001dfe4:	74 1b                	je     c001e001 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	55                   	push   ebp
c001dfea:	e8 81 bc ff ff       	call   c0019c70 <EnvVarContainer::~EnvVarContainer()>
c001dfef:	59                   	pop    ecx
c001dff0:	5e                   	pop    esi
c001dff1:	6a 0c                	push   0xc
c001dff3:	55                   	push   ebp
c001dff4:	e8 8e 46 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001dff9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dffc:	83 c4 10             	add    esp,0x10
c001dfff:	89 f7                	mov    edi,esi
c001e001:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e007:	85 c0                	test   eax,eax
c001e009:	0f 84 aa 00 00 00    	je     c001e0b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e00f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e012:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e016:	31 c9                	xor    ecx,ecx
c001e018:	eb 10                	jmp    c001e02a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e01a:	41                   	inc    ecx
c001e01b:	83 f9 10             	cmp    ecx,0x10
c001e01e:	0f 84 95 00 00 00    	je     c001e0b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e024:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e02a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e031:	d3 fa                	sar    edx,cl
c001e033:	83 e2 01             	and    edx,0x1
c001e036:	74 e2                	je     c001e01a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e038:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e03b:	01 ca                	add    edx,ecx
c001e03d:	89 d5                	mov    ebp,edx
c001e03f:	c1 e5 05             	shl    ebp,0x5
c001e042:	01 ea                	add    edx,ebp
c001e044:	01 d0                	add    eax,edx
c001e046:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e04c:	83 fd 07             	cmp    ebp,0x7
c001e04f:	75 c9                	jne    c001e01a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e051:	05 40 02 00 00       	add    eax,0x240
c001e056:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e059:	83 fd ff             	cmp    ebp,0xffffffff
c001e05c:	0f 8c e6 00 00 00    	jl     c001e148 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e062:	0f 84 97 01 00 00    	je     c001e1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e068:	85 ed                	test   ebp,ebp
c001e06a:	0f 84 7e 01 00 00    	je     c001e1ee <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e070:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e072:	75 a6                	jne    c001e01a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e074:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e07a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e07e:	01 d0                	add    eax,edx
c001e080:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e084:	83 ec 0c             	sub    esp,0xc
c001e087:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e08d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e090:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e096:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e09d:	50                   	push   eax
c001e09e:	e8 3b fe ff ff       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001e0a3:	83 c4 10             	add    esp,0x10
c001e0a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0ad:	89 f7                	mov    edi,esi
c001e0af:	41                   	inc    ecx
c001e0b0:	83 f9 10             	cmp    ecx,0x10
c001e0b3:	0f 85 6b ff ff ff    	jne    c001e024 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e0b9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e0bf:	85 c0                	test   eax,eax
c001e0c1:	74 5d                	je     c001e120 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e0c3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e0c9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e0cf:	74 4f                	je     c001e120 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e0d1:	83 ec 0c             	sub    esp,0xc
c001e0d4:	68 a4 0f 03 c0       	push   0xc0030fa4
c001e0d9:	e8 3c a7 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0de:	c7 04 24 a4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa4
c001e0e5:	89 c7                	mov    edi,eax
c001e0e7:	e8 12 a7 00 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0ec:	83 c4 10             	add    esp,0x10
c001e0ef:	84 c0                	test   al,al
c001e0f1:	0f 84 c2 00 00 00    	je     c001e1b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e0f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0fa:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e100:	85 d2                	test   edx,edx
c001e102:	74 0f                	je     c001e113 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e104:	83 ec 0c             	sub    esp,0xc
c001e107:	8b 02                	mov    eax,DWORD PTR [edx]
c001e109:	52                   	push   edx
c001e10a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e10d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e110:	83 c4 10             	add    esp,0x10
c001e113:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e11d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e120:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e126:	85 db                	test   ebx,ebx
c001e128:	74 16                	je     c001e140 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e12a:	83 ec 0c             	sub    esp,0xc
c001e12d:	53                   	push   ebx
c001e12e:	e8 75 37 ff ff       	call   c00118a8 <VAS::~VAS()>
c001e133:	58                   	pop    eax
c001e134:	5a                   	pop    edx
c001e135:	6a 14                	push   0x14
c001e137:	53                   	push   ebx
c001e138:	e8 4a 45 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	83 c4 1c             	add    esp,0x1c
c001e143:	5b                   	pop    ebx
c001e144:	5e                   	pop    esi
c001e145:	5f                   	pop    edi
c001e146:	5d                   	pop    ebp
c001e147:	c3                   	ret    
c001e148:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	68 1c bd 02 c0       	push   0xc002bd1c
c001e154:	e8 72 bd ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001e159:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e15c:	83 c4 10             	add    esp,0x10
c001e15f:	89 f7                	mov    edi,esi
c001e161:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e165:	e9 b0 fe ff ff       	jmp    c001e01a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e16a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e170:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e176:	75 1c                	jne    c001e194 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e178:	83 ec 0c             	sub    esp,0xc
c001e17b:	68 84 bd 02 c0       	push   0xc002bd84
c001e180:	e8 da 45 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001e185:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e18c:	e8 a0 fa ff ff       	call   c001dc31 <blockTask(TaskState)>
c001e191:	83 c4 10             	add    esp,0x10
c001e194:	83 ec 08             	sub    esp,0x8
c001e197:	56                   	push   esi
c001e198:	68 a4 0f 03 c0       	push   0xc0030fa4
c001e19d:	e8 2e a7 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1a2:	c7 04 24 a4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa4
c001e1a9:	e8 6c a6 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	39 f8                	cmp    eax,edi
c001e1b3:	0f 84 3e ff ff ff    	je     c001e0f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e1b9:	83 ec 0c             	sub    esp,0xc
c001e1bc:	68 a4 0f 03 c0       	push   0xc0030fa4
c001e1c1:	e8 54 a6 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1c6:	c7 04 24 a4 0f 03 c0 	mov    DWORD PTR [esp],0xc0030fa4
c001e1cd:	89 c6                	mov    esi,eax
c001e1cf:	e8 4e a6 00 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1d4:	83 c4 10             	add    esp,0x10
c001e1d7:	39 f3                	cmp    ebx,esi
c001e1d9:	74 b9                	je     c001e194 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e1db:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e1de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1e1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e1e7:	75 ab                	jne    c001e194 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e1e9:	e9 7c ff ff ff       	jmp    c001e16a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e1ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	68 50 bd 02 c0       	push   0xc002bd50
c001e1fa:	e9 55 ff ff ff       	jmp    c001e154 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e1ff:	8b 36                	mov    esi,DWORD PTR [esi]
c001e201:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e205:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e208:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e20b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e211:	01 d7                	add    edi,edx
c001e213:	89 f8                	mov    eax,edi
c001e215:	e9 66 fe ff ff       	jmp    c001e080 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e21a <cleanerTaskFunction(void*)>:
c001e21a:	53                   	push   ebx
c001e21b:	83 ec 08             	sub    esp,0x8
c001e21e:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e223:	48                   	dec    eax
c001e224:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e229:	75 01                	jne    c001e22c <cleanerTaskFunction(void*)+0x12>
c001e22b:	fb                   	sti    
c001e22c:	fa                   	cli    
c001e22d:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e232:	80 3d 6c 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030f6c,0x0
c001e239:	8d 50 01             	lea    edx,[eax+0x1]
c001e23c:	89 15 88 0f 03 c0    	mov    DWORD PTR ds:0xc0030f88,edx
c001e242:	0f 84 a1 00 00 00    	je     c001e2e9 <cleanerTaskFunction(void*)+0xcf>
c001e248:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e24d:	85 c0                	test   eax,eax
c001e24f:	75 01                	jne    c001e252 <cleanerTaskFunction(void*)+0x38>
c001e251:	fb                   	sti    
c001e252:	c6 05 6c 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f6c,0x0
c001e259:	fa                   	cli    
c001e25a:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e260:	ff 05 84 0f 03 c0    	inc    DWORD PTR ds:0xc0030f84
c001e266:	fa                   	cli    
c001e267:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e26d:	eb 26                	jmp    c001e295 <cleanerTaskFunction(void*)+0x7b>
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	68 8c 0f 03 c0       	push   0xc0030f8c
c001e277:	e8 9e a5 00 00       	call   c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e27c:	c7 04 24 8c 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f8c
c001e283:	89 c3                	mov    ebx,eax
c001e285:	e8 98 a5 00 00       	call   c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e28d:	e8 e1 fc ff ff       	call   c001df73 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e292:	83 c4 10             	add    esp,0x10
c001e295:	83 ec 0c             	sub    esp,0xc
c001e298:	68 8c 0f 03 c0       	push   0xc0030f8c
c001e29d:	e8 5c a5 00 00       	call   c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e2a2:	83 c4 10             	add    esp,0x10
c001e2a5:	84 c0                	test   al,al
c001e2a7:	74 c6                	je     c001e26f <cleanerTaskFunction(void*)+0x55>
c001e2a9:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e2ae:	48                   	dec    eax
c001e2af:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e2b4:	75 01                	jne    c001e2b7 <cleanerTaskFunction(void*)+0x9d>
c001e2b6:	fb                   	sti    
c001e2b7:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001e2bc:	48                   	dec    eax
c001e2bd:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001e2c2:	0f 85 56 ff ff ff    	jne    c001e21e <cleanerTaskFunction(void*)+0x4>
c001e2c8:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001e2cd:	85 c0                	test   eax,eax
c001e2cf:	0f 84 49 ff ff ff    	je     c001e21e <cleanerTaskFunction(void*)+0x4>
c001e2d5:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001e2df:	e8 77 f7 ff ff       	call   c001da5b <schedule()>
c001e2e4:	e9 35 ff ff ff       	jmp    c001e21e <cleanerTaskFunction(void*)+0x4>
c001e2e9:	83 ec 0c             	sub    esp,0xc
c001e2ec:	6a 02                	push   0x2
c001e2ee:	e8 18 f9 ff ff       	call   c001dc0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e2f3:	83 c4 10             	add    esp,0x10
c001e2f6:	e9 57 ff ff ff       	jmp    c001e252 <cleanerTaskFunction(void*)+0x38>

c001e2fb <terminateTask(int)>:
c001e2fb:	83 ec 14             	sub    esp,0x14
c001e2fe:	fa                   	cli    
c001e2ff:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e305:	ff 05 84 0f 03 c0    	inc    DWORD PTR ds:0xc0030f84
c001e30b:	fa                   	cli    
c001e30c:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e312:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e323:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e326:	50                   	push   eax
c001e327:	68 8c 0f 03 c0       	push   0xc0030f8c
c001e32c:	e8 9f a5 00 00       	call   c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e340:	a1 68 0f 03 c0       	mov    eax,ds:0xc0030f68
c001e345:	85 c0                	test   eax,eax
c001e347:	74 53                	je     c001e39c <terminateTask(int)+0xa1>
c001e349:	83 ec 0c             	sub    esp,0xc
c001e34c:	c6 05 6c 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f6c,0x1
c001e353:	50                   	push   eax
c001e354:	e8 85 fb ff ff       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001e359:	83 c4 10             	add    esp,0x10
c001e35c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e361:	48                   	dec    eax
c001e362:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e367:	75 01                	jne    c001e36a <terminateTask(int)+0x6f>
c001e369:	fb                   	sti    
c001e36a:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001e36f:	48                   	dec    eax
c001e370:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001e375:	75 09                	jne    c001e380 <terminateTask(int)+0x85>
c001e377:	83 3d 80 0f 03 c0 00 	cmp    DWORD PTR ds:0xc0030f80,0x0
c001e37e:	75 2e                	jne    c001e3ae <terminateTask(int)+0xb3>
c001e380:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e385:	48                   	dec    eax
c001e386:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e38b:	75 01                	jne    c001e38e <terminateTask(int)+0x93>
c001e38d:	fb                   	sti    
c001e38e:	fa                   	cli    
c001e38f:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e395:	e8 c1 f6 ff ff       	call   c001da5b <schedule()>
c001e39a:	eb e4                	jmp    c001e380 <terminateTask(int)+0x85>
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	68 a1 bc 02 c0       	push   0xc002bca1
c001e3a4:	e8 b6 43 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001e3a9:	83 c4 10             	add    esp,0x10
c001e3ac:	eb ae                	jmp    c001e35c <terminateTask(int)+0x61>
c001e3ae:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001e3b8:	eb db                	jmp    c001e395 <terminateTask(int)+0x9a>

c001e3ba <Thr::terminateFromIRQ(int)>:
c001e3ba:	83 ec 18             	sub    esp,0x18
c001e3bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3c1:	e8 35 ff ff ff       	call   c001e2fb <terminateTask(int)>

c001e3c6 <Semaphore::release()>:
c001e3c6:	83 ec 0c             	sub    esp,0xc
c001e3c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3cd:	fa                   	cli    
c001e3ce:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001e3d3:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e3d9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3dc:	89 0d 84 0f 03 c0    	mov    DWORD PTR ds:0xc0030f84,ecx
c001e3e2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e3e5:	85 c9                	test   ecx,ecx
c001e3e7:	74 3c                	je     c001e425 <Semaphore::release()+0x5f>
c001e3e9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e3f2:	51                   	push   ecx
c001e3f3:	e8 e6 fa ff ff       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001e3f8:	a1 84 0f 03 c0       	mov    eax,ds:0xc0030f84
c001e3fd:	83 c4 10             	add    esp,0x10
c001e400:	48                   	dec    eax
c001e401:	a3 84 0f 03 c0       	mov    ds:0xc0030f84,eax
c001e406:	85 c0                	test   eax,eax
c001e408:	75 09                	jne    c001e413 <Semaphore::release()+0x4d>
c001e40a:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001e40f:	85 c0                	test   eax,eax
c001e411:	75 17                	jne    c001e42a <Semaphore::release()+0x64>
c001e413:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e418:	48                   	dec    eax
c001e419:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e41e:	75 01                	jne    c001e421 <Semaphore::release()+0x5b>
c001e420:	fb                   	sti    
c001e421:	83 c4 0c             	add    esp,0xc
c001e424:	c3                   	ret    
c001e425:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e428:	eb d7                	jmp    c001e401 <Semaphore::release()+0x3b>
c001e42a:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c001e434:	e8 22 f6 ff ff       	call   c001da5b <schedule()>
c001e439:	eb d8                	jmp    c001e413 <Semaphore::release()+0x4d>

c001e43b <__static_initialization_and_destruction_0(int, int)>:
c001e43b:	83 ec 0c             	sub    esp,0xc
c001e43e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e443:	0f 85 88 00 00 00    	jne    c001e4d1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e449:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e451:	75 7e                	jne    c001e4d1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e453:	83 ec 0c             	sub    esp,0xc
c001e456:	68 a4 0f 03 c0       	push   0xc0030fa4
c001e45b:	e8 00 a7 00 00       	call   c0028b60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e460:	83 c4 10             	add    esp,0x10
c001e463:	83 ec 04             	sub    esp,0x4
c001e466:	68 38 c8 02 c0       	push   0xc002c838
c001e46b:	68 a4 0f 03 c0       	push   0xc0030fa4
c001e470:	68 14 8b 02 c0       	push   0xc0028b14
c001e475:	e8 87 41 ff ff       	call   c0012601 <__cxa_atexit>
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	83 ec 0c             	sub    esp,0xc
c001e480:	68 98 0f 03 c0       	push   0xc0030f98
c001e485:	e8 d6 a6 00 00       	call   c0028b60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e48a:	83 c4 10             	add    esp,0x10
c001e48d:	83 ec 04             	sub    esp,0x4
c001e490:	68 38 c8 02 c0       	push   0xc002c838
c001e495:	68 98 0f 03 c0       	push   0xc0030f98
c001e49a:	68 14 8b 02 c0       	push   0xc0028b14
c001e49f:	e8 5d 41 ff ff       	call   c0012601 <__cxa_atexit>
c001e4a4:	83 c4 10             	add    esp,0x10
c001e4a7:	83 ec 0c             	sub    esp,0xc
c001e4aa:	68 8c 0f 03 c0       	push   0xc0030f8c
c001e4af:	e8 ac a6 00 00       	call   c0028b60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	83 ec 04             	sub    esp,0x4
c001e4ba:	68 38 c8 02 c0       	push   0xc002c838
c001e4bf:	68 8c 0f 03 c0       	push   0xc0030f8c
c001e4c4:	68 14 8b 02 c0       	push   0xc0028b14
c001e4c9:	e8 33 41 ff ff       	call   c0012601 <__cxa_atexit>
c001e4ce:	83 c4 10             	add    esp,0x10
c001e4d1:	90                   	nop
c001e4d2:	83 c4 0c             	add    esp,0xc
c001e4d5:	c3                   	ret    

c001e4d6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e4d6:	83 ec 0c             	sub    esp,0xc
c001e4d9:	83 ec 08             	sub    esp,0x8
c001e4dc:	68 ff ff 00 00       	push   0xffff
c001e4e1:	6a 01                	push   0x1
c001e4e3:	e8 53 ff ff ff       	call   c001e43b <__static_initialization_and_destruction_0(int, int)>
c001e4e8:	83 c4 10             	add    esp,0x10
c001e4eb:	83 c4 0c             	add    esp,0xc
c001e4ee:	c3                   	ret    

c001e4ef <Vm::inbv(unsigned short)>:
c001e4ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4f3:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e4f8:	75 06                	jne    c001e500 <Vm::inbv(unsigned short)+0x11>
c001e4fa:	a0 ec 0f 03 c0       	mov    al,ds:0xc0030fec
c001e4ff:	c3                   	ret    
c001e500:	ec                   	in     al,dx
c001e501:	c3                   	ret    

c001e502 <Vm::outbv(unsigned short, unsigned char)>:
c001e502:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e50a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e50f:	75 25                	jne    c001e536 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e511:	8b 0d ec 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fec
c001e517:	8d 51 01             	lea    edx,[ecx+0x1]
c001e51a:	88 81 00 10 03 c0    	mov    BYTE PTR [ecx-0x3ffcf000],al
c001e520:	89 15 ec 0f 03 c0    	mov    DWORD PTR ds:0xc0030fec,edx
c001e526:	83 fa 20             	cmp    edx,0x20
c001e529:	75 0c                	jne    c001e537 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e52b:	c7 05 ec 0f 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x1f
c001e535:	c3                   	ret    
c001e536:	ee                   	out    dx,al
c001e537:	c3                   	ret    

c001e538 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e538:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e53d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e542:	c1 e0 04             	shl    eax,0x4
c001e545:	01 d0                	add    eax,edx
c001e547:	c3                   	ret    

c001e548 <Vm::getSegment(unsigned int)>:
c001e548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e54c:	c1 e8 10             	shr    eax,0x10
c001e54f:	c3                   	ret    

c001e550 <Vm::getOffset(unsigned int)>:
c001e550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e554:	c3                   	ret    

c001e555 <Vm::mainloop2()>:
c001e555:	83 ec 18             	sub    esp,0x18
c001e558:	fa                   	cli    
c001e559:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e55f:	6a 02                	push   0x2
c001e561:	c6 05 e5 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fe5,0x1
c001e568:	e8 9e f6 ff ff       	call   c001dc0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e56d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e572:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e576:	52                   	push   edx
c001e577:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e57b:	52                   	push   edx
c001e57c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e580:	52                   	push   edx
c001e581:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e585:	50                   	push   eax
c001e586:	e8 6f 1d fe ff       	call   c00002fa <goToVM86>
c001e58b:	83 c4 2c             	add    esp,0x2c
c001e58e:	c3                   	ret    

c001e58f <Vm::mainVm8086Loop(void*)>:
c001e58f:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e594:	48                   	dec    eax
c001e595:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e59a:	75 01                	jne    c001e59d <Vm::mainVm8086Loop(void*)+0xe>
c001e59c:	fb                   	sti    
c001e59d:	eb b6                	jmp    c001e555 <Vm::mainloop2()>

c001e59f <Vm::mainloop3(unsigned long)>:
c001e59f:	83 ec 18             	sub    esp,0x18
c001e5a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e5a6:	fa                   	cli    
c001e5a7:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e5ad:	6a 02                	push   0x2
c001e5af:	c6 05 e4 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030fe4,0x1
c001e5b6:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c001e5bb:	e8 4b f6 ff ff       	call   c001dc0b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e5c0:	83 c4 1c             	add    esp,0x1c
c001e5c3:	eb 90                	jmp    c001e555 <Vm::mainloop2()>

c001e5c5 <Vm::initialise8086()>:
c001e5c5:	83 ec 0c             	sub    esp,0xc
c001e5c8:	68 80 00 00 00       	push   0x80
c001e5cd:	6a 00                	push   0x0
c001e5cf:	68 8f e5 01 c0       	push   0xc001e58f
c001e5d4:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c001e5da:	e8 57 f2 ff ff       	call   c001d836 <Process::createThread(void (*)(void*), void*, int)>
c001e5df:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e5e6:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c001e5eb:	68 00 01 00 00       	push   0x100
c001e5f0:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c001e5f5:	6a 00                	push   0x0
c001e5f7:	6a 00                	push   0x0
c001e5f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e5ff:	e8 16 37 ff ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e604:	83 c4 2c             	add    esp,0x2c
c001e607:	c3                   	ret    

c001e608 <Vm::finish8086()>:
c001e608:	53                   	push   ebx
c001e609:	83 ec 08             	sub    esp,0x8
c001e60c:	fa                   	cli    
c001e60d:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e613:	80 3d e4 0f 03 c0 00 	cmp    BYTE PTR ds:0xc0030fe4,0x0
c001e61a:	75 15                	jne    c001e631 <Vm::finish8086()+0x29>
c001e61c:	e8 3a f4 ff ff       	call   c001da5b <schedule()>
c001e621:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e626:	48                   	dec    eax
c001e627:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e62c:	75 de                	jne    c001e60c <Vm::finish8086()+0x4>
c001e62e:	fb                   	sti    
c001e62f:	eb db                	jmp    c001e60c <Vm::finish8086()+0x4>
c001e631:	83 ec 0c             	sub    esp,0xc
c001e634:	8b 1d e0 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030fe0
c001e63a:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001e640:	c6 05 e4 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fe4,0x0
c001e647:	e8 92 f8 ff ff       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001e64c:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e651:	83 c4 10             	add    esp,0x10
c001e654:	8d 50 ff             	lea    edx,[eax-0x1]
c001e657:	89 15 88 0f 03 c0    	mov    DWORD PTR ds:0xc0030f88,edx
c001e65d:	85 d2                	test   edx,edx
c001e65f:	75 01                	jne    c001e662 <Vm::finish8086()+0x5a>
c001e661:	fb                   	sti    
c001e662:	89 d8                	mov    eax,ebx
c001e664:	83 c4 08             	add    esp,0x8
c001e667:	5b                   	pop    ebx
c001e668:	c3                   	ret    

c001e669 <Vm::getOutput8086(unsigned char*)>:
c001e669:	57                   	push   edi
c001e66a:	8b 0d ec 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030fec
c001e670:	56                   	push   esi
c001e671:	be 00 10 03 c0       	mov    esi,0xc0031000
c001e676:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e67a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e67c:	a1 ec 0f 03 c0       	mov    eax,ds:0xc0030fec
c001e681:	5e                   	pop    esi
c001e682:	c7 05 ec 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x0
c001e68c:	5f                   	pop    edi
c001e68d:	c3                   	ret    

c001e68e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e68e:	55                   	push   ebp
c001e68f:	57                   	push   edi
c001e690:	56                   	push   esi
c001e691:	53                   	push   ebx
c001e692:	83 ec 2c             	sub    esp,0x2c
c001e695:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e699:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e69d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e6a1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e6a5:	fa                   	cli    
c001e6a6:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c001e6ac:	0f b6 35 e5 0f 03 c0 	movzx  esi,BYTE PTR ds:0xc0030fe5
c001e6b3:	89 f0                	mov    eax,esi
c001e6b5:	84 c0                	test   al,al
c001e6b7:	75 1d                	jne    c001e6d6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e6b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e6bd:	e8 99 f3 ff ff       	call   c001da5b <schedule()>
c001e6c2:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e6c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e6cb:	48                   	dec    eax
c001e6cc:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e6d1:	75 d2                	jne    c001e6a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e6d3:	fb                   	sti    
c001e6d4:	eb cf                	jmp    c001e6a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e6d6:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c001e6db:	c7 05 ec 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fec,0x0
c001e6e5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e6e9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e6ed:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e6f1:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e6f5:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e6f9:	50                   	push   eax
c001e6fa:	6a 20                	push   0x20
c001e6fc:	6a 00                	push   0x0
c001e6fe:	68 00 10 03 c0       	push   0xc0031000
c001e703:	e8 48 20 fe ff       	call   c0000750 <memset>
c001e708:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e70f:	e8 85 0e ff ff       	call   c000f599 <malloc>
c001e714:	83 c4 0c             	add    esp,0xc
c001e717:	89 c3                	mov    ebx,eax
c001e719:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c001e71f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e723:	50                   	push   eax
c001e724:	e8 95 45 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c001e729:	83 c4 10             	add    esp,0x10
c001e72c:	85 db                	test   ebx,ebx
c001e72e:	75 0a                	jne    c001e73a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e730:	83 ec 0c             	sub    esp,0xc
c001e733:	68 ac bd 02 c0       	push   0xc002bdac
c001e738:	eb 3e                	jmp    c001e778 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e73a:	50                   	push   eax
c001e73b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e73f:	50                   	push   eax
c001e740:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e744:	50                   	push   eax
c001e745:	53                   	push   ebx
c001e746:	e8 83 48 ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c001e74b:	83 c4 10             	add    esp,0x10
c001e74e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e753:	74 0a                	je     c001e75f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e755:	83 ec 0c             	sub    esp,0xc
c001e758:	68 c0 bd 02 c0       	push   0xc002bdc0
c001e75d:	eb 19                	jmp    c001e778 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e75f:	51                   	push   ecx
c001e760:	51                   	push   ecx
c001e761:	6a 01                	push   0x1
c001e763:	53                   	push   ebx
c001e764:	e8 b9 45 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	85 c0                	test   eax,eax
c001e76e:	74 24                	je     c001e794 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e770:	83 ec 0c             	sub    esp,0xc
c001e773:	68 d9 bd 02 c0       	push   0xc002bdd9
c001e778:	e8 4e b7 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001e77d:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e782:	83 c4 10             	add    esp,0x10
c001e785:	48                   	dec    eax
c001e786:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e78b:	85 c0                	test   eax,eax
c001e78d:	75 01                	jne    c001e790 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e78f:	fb                   	sti    
c001e790:	31 f6                	xor    esi,esi
c001e792:	eb 58                	jmp    c001e7ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e794:	0f b7 ed             	movzx  ebp,bp
c001e797:	50                   	push   eax
c001e798:	0f b7 ff             	movzx  edi,di
c001e79b:	50                   	push   eax
c001e79c:	55                   	push   ebp
c001e79d:	57                   	push   edi
c001e79e:	e8 95 fd ff ff       	call   c001e538 <Vm::realToLinear(unsigned short, unsigned short)>
c001e7a3:	5a                   	pop    edx
c001e7a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e7a6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e7aa:	51                   	push   ecx
c001e7ab:	50                   	push   eax
c001e7ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7b4:	53                   	push   ebx
c001e7b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e7b8:	83 c4 14             	add    esp,0x14
c001e7bb:	53                   	push   ebx
c001e7bc:	e8 bf 45 ff ff       	call   c0012d80 <File::close()>
c001e7c1:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c001e7c6:	83 c4 10             	add    esp,0x10
c001e7c9:	48                   	dec    eax
c001e7ca:	c6 05 e5 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030fe5,0x0
c001e7d1:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c001e7d6:	85 c0                	test   eax,eax
c001e7d8:	75 01                	jne    c001e7db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e7da:	fb                   	sti    
c001e7db:	83 ec 0c             	sub    esp,0xc
c001e7de:	ff 35 e8 0f 03 c0    	push   DWORD PTR ds:0xc0030fe8
c001e7e4:	e8 f5 f6 ff ff       	call   c001dede <unblockTask(ThreadControlBlock*)>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	83 c4 2c             	add    esp,0x2c
c001e7ef:	89 f0                	mov    eax,esi
c001e7f1:	5b                   	pop    ebx
c001e7f2:	5e                   	pop    esi
c001e7f3:	5f                   	pop    edi
c001e7f4:	5d                   	pop    ebp
c001e7f5:	c3                   	ret    

c001e7f6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e7f6:	57                   	push   edi
c001e7f7:	56                   	push   esi
c001e7f8:	53                   	push   ebx
c001e7f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e801:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e805:	83 e8 06             	sub    eax,0x6
c001e808:	0f b7 c0             	movzx  eax,ax
c001e80b:	50                   	push   eax
c001e80c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e811:	50                   	push   eax
c001e812:	e8 21 fd ff ff       	call   c001e538 <Vm::realToLinear(unsigned short, unsigned short)>
c001e817:	5a                   	pop    edx
c001e818:	5e                   	pop    esi
c001e819:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e81c:	8d 56 fa             	lea    edx,[esi-0x6]
c001e81f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e825:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e828:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e82b:	83 c2 02             	add    edx,0x2
c001e82e:	66 89 10             	mov    WORD PTR [eax],dx
c001e831:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e834:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e838:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e83b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e83f:	89 d6                	mov    esi,edx
c001e841:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e847:	66 81 e6 ff fd       	and    si,0xfdff
c001e84c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e850:	74 07                	je     c001e859 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e852:	89 d6                	mov    esi,edx
c001e854:	66 81 ce 00 02       	or     si,0x200
c001e859:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e862:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e866:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e86e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e871:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e879:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e87c:	5b                   	pop    ebx
c001e87d:	5e                   	pop    esi
c001e87e:	5f                   	pop    edi
c001e87f:	c3                   	ret    

c001e880 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e880:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e885:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e88a:	c1 e0 04             	shl    eax,0x4
c001e88d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e890:	c3                   	ret    

c001e891 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e891:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e896:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e89b:	c1 e0 04             	shl    eax,0x4
c001e89e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e8a2:	c3                   	ret    

c001e8a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e8a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8ad:	c1 e0 04             	shl    eax,0x4
c001e8b0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e8b3:	c3                   	ret    

c001e8b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e8b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8be:	c1 e0 04             	shl    eax,0x4
c001e8c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8c5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e8c8:	c3                   	ret    

c001e8c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e8c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8d3:	c1 e0 04             	shl    eax,0x4
c001e8d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8da:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e8de:	c3                   	ret    

c001e8df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e8df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8e9:	c1 e0 04             	shl    eax,0x4
c001e8ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8f0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e8f3:	c3                   	ret    

c001e8f4 <Vm::faultHandler(regs*)>:
c001e8f4:	55                   	push   ebp
c001e8f5:	57                   	push   edi
c001e8f6:	56                   	push   esi
c001e8f7:	53                   	push   ebx
c001e8f8:	83 ec 1c             	sub    esp,0x1c
c001e8fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e8ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e902:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e906:	0f b7 f8             	movzx  edi,ax
c001e909:	52                   	push   edx
c001e90a:	0f b7 c0             	movzx  eax,ax
c001e90d:	50                   	push   eax
c001e90e:	e8 25 fc ff ff       	call   c001e538 <Vm::realToLinear(unsigned short, unsigned short)>
c001e913:	5a                   	pop    edx
c001e914:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e917:	59                   	pop    ecx
c001e918:	89 c1                	mov    ecx,eax
c001e91a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e91d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e921:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e926:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e92a:	0f b7 c5             	movzx  eax,bp
c001e92d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e931:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e935:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e939:	e8 fa fb ff ff       	call   c001e538 <Vm::realToLinear(unsigned short, unsigned short)>
c001e93e:	5e                   	pop    esi
c001e93f:	be 06 00 00 00       	mov    esi,0x6
c001e944:	5a                   	pop    edx
c001e945:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e94a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e94f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e952:	80 fa 9d             	cmp    dl,0x9d
c001e955:	0f 84 2c 02 00 00    	je     c001eb87 <Vm::faultHandler(regs*)+0x293>
c001e95b:	0f 87 91 00 00 00    	ja     c001e9f2 <Vm::faultHandler(regs*)+0xfe>
c001e961:	80 fa 66             	cmp    dl,0x66
c001e964:	0f 84 98 01 00 00    	je     c001eb02 <Vm::faultHandler(regs*)+0x20e>
c001e96a:	77 47                	ja     c001e9b3 <Vm::faultHandler(regs*)+0xbf>
c001e96c:	80 fa 36             	cmp    dl,0x36
c001e96f:	0f 84 80 01 00 00    	je     c001eaf5 <Vm::faultHandler(regs*)+0x201>
c001e975:	77 1a                	ja     c001e991 <Vm::faultHandler(regs*)+0x9d>
c001e977:	80 fa 26             	cmp    dl,0x26
c001e97a:	0f 84 4e 01 00 00    	je     c001eace <Vm::faultHandler(regs*)+0x1da>
c001e980:	80 fa 2e             	cmp    dl,0x2e
c001e983:	0f 85 e2 05 00 00    	jne    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001e989:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e98c:	31 f6                	xor    esi,esi
c001e98e:	41                   	inc    ecx
c001e98f:	eb be                	jmp    c001e94f <Vm::faultHandler(regs*)+0x5b>
c001e991:	80 fa 64             	cmp    dl,0x64
c001e994:	0f 84 41 01 00 00    	je     c001eadb <Vm::faultHandler(regs*)+0x1e7>
c001e99a:	0f 87 48 01 00 00    	ja     c001eae8 <Vm::faultHandler(regs*)+0x1f4>
c001e9a0:	80 fa 3e             	cmp    dl,0x3e
c001e9a3:	0f 85 c2 05 00 00    	jne    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001e9a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9ac:	be 01 00 00 00       	mov    esi,0x1
c001e9b1:	eb db                	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001e9b3:	80 fa 6d             	cmp    dl,0x6d
c001e9b6:	0f 84 ec 02 00 00    	je     c001eca8 <Vm::faultHandler(regs*)+0x3b4>
c001e9bc:	77 17                	ja     c001e9d5 <Vm::faultHandler(regs*)+0xe1>
c001e9be:	80 fa 67             	cmp    dl,0x67
c001e9c1:	0f 84 48 01 00 00    	je     c001eb0f <Vm::faultHandler(regs*)+0x21b>
c001e9c7:	80 fa 6c             	cmp    dl,0x6c
c001e9ca:	0f 84 69 02 00 00    	je     c001ec39 <Vm::faultHandler(regs*)+0x345>
c001e9d0:	e9 96 05 00 00       	jmp    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001e9d5:	80 fa 6f             	cmp    dl,0x6f
c001e9d8:	0f 84 f4 03 00 00    	je     c001edd2 <Vm::faultHandler(regs*)+0x4de>
c001e9de:	0f 82 59 03 00 00    	jb     c001ed3d <Vm::faultHandler(regs*)+0x449>
c001e9e4:	80 fa 9c             	cmp    dl,0x9c
c001e9e7:	0f 84 2f 01 00 00    	je     c001eb1c <Vm::faultHandler(regs*)+0x228>
c001e9ed:	e9 79 05 00 00       	jmp    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001e9f2:	80 fa ec             	cmp    dl,0xec
c001e9f5:	0f 84 14 05 00 00    	je     c001ef0f <Vm::faultHandler(regs*)+0x61b>
c001e9fb:	77 7b                	ja     c001ea78 <Vm::faultHandler(regs*)+0x184>
c001e9fd:	80 fa e4             	cmp    dl,0xe4
c001ea00:	0f 84 93 04 00 00    	je     c001ee99 <Vm::faultHandler(regs*)+0x5a5>
c001ea06:	77 53                	ja     c001ea5b <Vm::faultHandler(regs*)+0x167>
c001ea08:	80 fa cd             	cmp    dl,0xcd
c001ea0b:	0f 84 d9 01 00 00    	je     c001ebea <Vm::faultHandler(regs*)+0x2f6>
c001ea11:	80 fa cf             	cmp    dl,0xcf
c001ea14:	0f 85 51 05 00 00    	jne    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001ea1a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea1d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ea20:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ea24:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ea27:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ea2b:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea31:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea34:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ea38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea3e:	66 c1 e8 09          	shr    ax,0x9
c001ea42:	83 e0 01             	and    eax,0x1
c001ea45:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea48:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea4b:	83 c0 06             	add    eax,0x6
c001ea4e:	25 ff ff 00 00       	and    eax,0xffff
c001ea53:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea56:	e9 0c 05 00 00       	jmp    c001ef67 <Vm::faultHandler(regs*)+0x673>
c001ea5b:	80 fa e6             	cmp    dl,0xe6
c001ea5e:	0f 84 7f 04 00 00    	je     c001eee3 <Vm::faultHandler(regs*)+0x5ef>
c001ea64:	0f 82 4b 04 00 00    	jb     c001eeb5 <Vm::faultHandler(regs*)+0x5c1>
c001ea6a:	80 fa e7             	cmp    dl,0xe7
c001ea6d:	0f 84 87 04 00 00    	je     c001eefa <Vm::faultHandler(regs*)+0x606>
c001ea73:	e9 f3 04 00 00       	jmp    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001ea78:	80 fa ef             	cmp    dl,0xef
c001ea7b:	0f 84 d1 04 00 00    	je     c001ef52 <Vm::faultHandler(regs*)+0x65e>
c001ea81:	77 28                	ja     c001eaab <Vm::faultHandler(regs*)+0x1b7>
c001ea83:	80 fa ed             	cmp    dl,0xed
c001ea86:	0f 84 9f 04 00 00    	je     c001ef2b <Vm::faultHandler(regs*)+0x637>
c001ea8c:	80 fa ee             	cmp    dl,0xee
c001ea8f:	0f 85 d6 04 00 00    	jne    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001ea95:	50                   	push   eax
c001ea96:	50                   	push   eax
c001ea97:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ea9b:	50                   	push   eax
c001ea9c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eaa0:	50                   	push   eax
c001eaa1:	e8 5c fa ff ff       	call   c001e502 <Vm::outbv(unsigned short, unsigned char)>
c001eaa6:	e9 9f 04 00 00       	jmp    c001ef4a <Vm::faultHandler(regs*)+0x656>
c001eaab:	80 fa fa             	cmp    dl,0xfa
c001eaae:	0f 84 69 01 00 00    	je     c001ec1d <Vm::faultHandler(regs*)+0x329>
c001eab4:	80 fa fb             	cmp    dl,0xfb
c001eab7:	0f 84 6e 01 00 00    	je     c001ec2b <Vm::faultHandler(regs*)+0x337>
c001eabd:	80 fa f3             	cmp    dl,0xf3
c001eac0:	0f 85 a5 04 00 00    	jne    c001ef6b <Vm::faultHandler(regs*)+0x677>
c001eac6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eac9:	e9 c0 fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eace:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ead1:	be 02 00 00 00       	mov    esi,0x2
c001ead6:	e9 b3 fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eadb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eade:	be 03 00 00 00       	mov    esi,0x3
c001eae3:	e9 a6 fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eae8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaeb:	be 04 00 00 00       	mov    esi,0x4
c001eaf0:	e9 99 fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eaf5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaf8:	be 05 00 00 00       	mov    esi,0x5
c001eafd:	e9 8c fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eb02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb05:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eb0a:	e9 7f fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eb0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb12:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eb17:	e9 72 fe ff ff       	jmp    c001e98e <Vm::faultHandler(regs*)+0x9a>
c001eb1c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eb1f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eb23:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb28:	74 30                	je     c001eb5a <Vm::faultHandler(regs*)+0x266>
c001eb2a:	83 e9 04             	sub    ecx,0x4
c001eb2d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb33:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb39:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb3c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb45:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb49:	0f 84 15 04 00 00    	je     c001ef64 <Vm::faultHandler(regs*)+0x670>
c001eb4f:	80 ce 02             	or     dh,0x2
c001eb52:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb55:	e9 0a 04 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001eb5a:	83 e9 02             	sub    ecx,0x2
c001eb5d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb63:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb66:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb6a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb70:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb74:	74 05                	je     c001eb7b <Vm::faultHandler(regs*)+0x287>
c001eb76:	80 ce 02             	or     dh,0x2
c001eb79:	eb 03                	jmp    c001eb7e <Vm::faultHandler(regs*)+0x28a>
c001eb7b:	80 e6 fd             	and    dh,0xfd
c001eb7e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eb82:	e9 dd 03 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001eb87:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb8c:	74 2a                	je     c001ebb8 <Vm::faultHandler(regs*)+0x2c4>
c001eb8e:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb90:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb96:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb9c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eba7:	c1 e8 09             	shr    eax,0x9
c001ebaa:	83 e0 01             	and    eax,0x1
c001ebad:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebb0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ebb3:	83 c0 04             	add    eax,0x4
c001ebb6:	eb 25                	jmp    c001ebdd <Vm::faultHandler(regs*)+0x2e9>
c001ebb8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ebbb:	81 ca 00 02 02 00    	or     edx,0x20200
c001ebc1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ebc4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ebc7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebcd:	66 c1 e8 09          	shr    ax,0x9
c001ebd1:	83 e0 01             	and    eax,0x1
c001ebd4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebd7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ebda:	83 c0 02             	add    eax,0x2
c001ebdd:	25 ff ff 00 00       	and    eax,0xffff
c001ebe2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ebe5:	e9 7a 03 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ebea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebee:	3c ee                	cmp    al,0xee
c001ebf0:	75 10                	jne    c001ec02 <Vm::faultHandler(regs*)+0x30e>
c001ebf2:	83 ec 0c             	sub    esp,0xc
c001ebf5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ebf8:	e8 a2 f9 ff ff       	call   c001e59f <Vm::mainloop3(unsigned long)>
c001ebfd:	e9 4b 03 00 00       	jmp    c001ef4d <Vm::faultHandler(regs*)+0x659>
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec0d:	51                   	push   ecx
c001ec0e:	50                   	push   eax
c001ec0f:	53                   	push   ebx
c001ec10:	e8 e1 fb ff ff       	call   c001e7f6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ec15:	83 c4 20             	add    esp,0x20
c001ec18:	e9 4a 03 00 00       	jmp    c001ef67 <Vm::faultHandler(regs*)+0x673>
c001ec1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec22:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec26:	e9 39 03 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ec2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec30:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ec34:	e9 2b 03 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ec39:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec3c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec41:	74 2b                	je     c001ec6e <Vm::faultHandler(regs*)+0x37a>
c001ec43:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ec4a:	76 22                	jbe    c001ec6e <Vm::faultHandler(regs*)+0x37a>
c001ec4c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec50:	50                   	push   eax
c001ec51:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec55:	50                   	push   eax
c001ec56:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec5a:	50                   	push   eax
c001ec5b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec5f:	50                   	push   eax
c001ec60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec64:	50                   	push   eax
c001ec65:	6a 6c                	push   0x6c
c001ec67:	6a 6c                	push   0x6c
c001ec69:	e9 b9 01 00 00       	jmp    c001ee27 <Vm::faultHandler(regs*)+0x533>
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec75:	0f b7 f6             	movzx  esi,si
c001ec78:	50                   	push   eax
c001ec79:	e8 71 f8 ff ff       	call   c001e4ef <Vm::inbv(unsigned short)>
c001ec7e:	83 c4 0c             	add    esp,0xc
c001ec81:	0f b6 c0             	movzx  eax,al
c001ec84:	50                   	push   eax
c001ec85:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ec89:	50                   	push   eax
c001ec8a:	56                   	push   esi
c001ec8b:	e8 24 fc ff ff       	call   c001e8b4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ec90:	83 c4 10             	add    esp,0x10
c001ec93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec96:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec9a:	74 03                	je     c001ec9f <Vm::faultHandler(regs*)+0x3ab>
c001ec9c:	48                   	dec    eax
c001ec9d:	eb 01                	jmp    c001eca0 <Vm::faultHandler(regs*)+0x3ac>
c001ec9f:	40                   	inc    eax
c001eca0:	0f b7 c0             	movzx  eax,ax
c001eca3:	e9 8d 00 00 00       	jmp    c001ed35 <Vm::faultHandler(regs*)+0x441>
c001eca8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ecab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecb3:	74 29                	je     c001ecde <Vm::faultHandler(regs*)+0x3ea>
c001ecb5:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecba:	76 22                	jbe    c001ecde <Vm::faultHandler(regs*)+0x3ea>
c001ecbc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecc0:	50                   	push   eax
c001ecc1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecc5:	50                   	push   eax
c001ecc6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecca:	50                   	push   eax
c001eccb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eccf:	50                   	push   eax
c001ecd0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecd4:	50                   	push   eax
c001ecd5:	6a 6d                	push   0x6d
c001ecd7:	6a 6d                	push   0x6d
c001ecd9:	e9 49 01 00 00       	jmp    c001ee27 <Vm::faultHandler(regs*)+0x533>
c001ecde:	0f b7 c8             	movzx  ecx,ax
c001ece1:	0f b7 f6             	movzx  esi,si
c001ece4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ece7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecec:	74 20                	je     c001ed0e <Vm::faultHandler(regs*)+0x41a>
c001ecee:	ed                   	in     eax,dx
c001ecef:	55                   	push   ebp
c001ecf0:	50                   	push   eax
c001ecf1:	51                   	push   ecx
c001ecf2:	56                   	push   esi
c001ecf3:	e8 e7 fb ff ff       	call   c001e8df <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ecfe:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed02:	74 05                	je     c001ed09 <Vm::faultHandler(regs*)+0x415>
c001ed04:	83 e8 04             	sub    eax,0x4
c001ed07:	eb 27                	jmp    c001ed30 <Vm::faultHandler(regs*)+0x43c>
c001ed09:	83 c0 04             	add    eax,0x4
c001ed0c:	eb 22                	jmp    c001ed30 <Vm::faultHandler(regs*)+0x43c>
c001ed0e:	66 ed                	in     ax,dx
c001ed10:	0f b7 c0             	movzx  eax,ax
c001ed13:	57                   	push   edi
c001ed14:	50                   	push   eax
c001ed15:	51                   	push   ecx
c001ed16:	56                   	push   esi
c001ed17:	e8 ad fb ff ff       	call   c001e8c9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ed1c:	83 c4 10             	add    esp,0x10
c001ed1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed22:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed26:	74 05                	je     c001ed2d <Vm::faultHandler(regs*)+0x439>
c001ed28:	83 e8 02             	sub    eax,0x2
c001ed2b:	eb 03                	jmp    c001ed30 <Vm::faultHandler(regs*)+0x43c>
c001ed2d:	83 c0 02             	add    eax,0x2
c001ed30:	25 ff ff 00 00       	and    eax,0xffff
c001ed35:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ed38:	e9 27 02 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ed3d:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed40:	3c 05                	cmp    al,0x5
c001ed42:	77 24                	ja     c001ed68 <Vm::faultHandler(regs*)+0x474>
c001ed44:	0f b6 c0             	movzx  eax,al
c001ed47:	ff 24 85 4c be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd41b4]
c001ed4e:	0f b7 fd             	movzx  edi,bp
c001ed51:	eb 15                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x474>
c001ed53:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ed57:	eb 0f                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x474>
c001ed59:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ed5d:	eb 09                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x474>
c001ed5f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ed63:	eb 03                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x474>
c001ed65:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ed68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed70:	74 29                	je     c001ed9b <Vm::faultHandler(regs*)+0x4a7>
c001ed72:	3d ff ff 00 00       	cmp    eax,0xffff
c001ed77:	76 22                	jbe    c001ed9b <Vm::faultHandler(regs*)+0x4a7>
c001ed79:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed7d:	50                   	push   eax
c001ed7e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed82:	50                   	push   eax
c001ed83:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed87:	50                   	push   eax
c001ed88:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed8c:	50                   	push   eax
c001ed8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed91:	50                   	push   eax
c001ed92:	6a 6e                	push   0x6e
c001ed94:	6a 6e                	push   0x6e
c001ed96:	e9 8c 00 00 00       	jmp    c001ee27 <Vm::faultHandler(regs*)+0x533>
c001ed9b:	0f b7 c0             	movzx  eax,ax
c001ed9e:	52                   	push   edx
c001ed9f:	52                   	push   edx
c001eda0:	50                   	push   eax
c001eda1:	57                   	push   edi
c001eda2:	e8 d9 fa ff ff       	call   c001e880 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eda7:	59                   	pop    ecx
c001eda8:	0f b6 c0             	movzx  eax,al
c001edab:	5e                   	pop    esi
c001edac:	50                   	push   eax
c001edad:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001edb1:	50                   	push   eax
c001edb2:	e8 4b f7 ff ff       	call   c001e502 <Vm::outbv(unsigned short, unsigned char)>
c001edb7:	83 c4 10             	add    esp,0x10
c001edba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001edbd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edc1:	74 03                	je     c001edc6 <Vm::faultHandler(regs*)+0x4d2>
c001edc3:	48                   	dec    eax
c001edc4:	eb 01                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x4d3>
c001edc6:	40                   	inc    eax
c001edc7:	0f b7 c0             	movzx  eax,ax
c001edca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001edcd:	e9 92 01 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001edd2:	8d 46 ff             	lea    eax,[esi-0x1]
c001edd5:	3c 05                	cmp    al,0x5
c001edd7:	77 1f                	ja     c001edf8 <Vm::faultHandler(regs*)+0x504>
c001edd9:	0f b6 c0             	movzx  eax,al
c001eddc:	ff 24 85 64 be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd419c]
c001ede3:	89 ef                	mov    edi,ebp
c001ede5:	eb 11                	jmp    c001edf8 <Vm::faultHandler(regs*)+0x504>
c001ede7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001edea:	eb 0c                	jmp    c001edf8 <Vm::faultHandler(regs*)+0x504>
c001edec:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001edef:	eb 07                	jmp    c001edf8 <Vm::faultHandler(regs*)+0x504>
c001edf1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001edf4:	eb 02                	jmp    c001edf8 <Vm::faultHandler(regs*)+0x504>
c001edf6:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001edf8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001edfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee00:	74 37                	je     c001ee39 <Vm::faultHandler(regs*)+0x545>
c001ee02:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ee08:	76 2f                	jbe    c001ee39 <Vm::faultHandler(regs*)+0x545>
c001ee0a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee0e:	50                   	push   eax
c001ee0f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee13:	50                   	push   eax
c001ee14:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee18:	50                   	push   eax
c001ee19:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee1d:	50                   	push   eax
c001ee1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee22:	50                   	push   eax
c001ee23:	6a 6f                	push   0x6f
c001ee25:	6a 6f                	push   0x6f
c001ee27:	68 f2 bd 02 c0       	push   0xc002bdf2
c001ee2c:	e8 2e 39 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001ee31:	83 c4 20             	add    esp,0x20
c001ee34:	e9 86 01 00 00       	jmp    c001efbf <Vm::faultHandler(regs*)+0x6cb>
c001ee39:	0f b7 d7             	movzx  edx,di
c001ee3c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ee3f:	0f b7 c6             	movzx  eax,si
c001ee42:	81 e1 00 04 00 00    	and    ecx,0x400
c001ee48:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ee4b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee50:	74 1d                	je     c001ee6f <Vm::faultHandler(regs*)+0x57b>
c001ee52:	55                   	push   ebp
c001ee53:	55                   	push   ebp
c001ee54:	50                   	push   eax
c001ee55:	52                   	push   edx
c001ee56:	e8 48 fa ff ff       	call   c001e8a3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	89 fa                	mov    edx,edi
c001ee60:	ef                   	out    dx,eax
c001ee61:	85 c9                	test   ecx,ecx
c001ee63:	74 05                	je     c001ee6a <Vm::faultHandler(regs*)+0x576>
c001ee65:	83 ee 04             	sub    esi,0x4
c001ee68:	eb 21                	jmp    c001ee8b <Vm::faultHandler(regs*)+0x597>
c001ee6a:	83 c6 04             	add    esi,0x4
c001ee6d:	eb 1c                	jmp    c001ee8b <Vm::faultHandler(regs*)+0x597>
c001ee6f:	55                   	push   ebp
c001ee70:	55                   	push   ebp
c001ee71:	50                   	push   eax
c001ee72:	52                   	push   edx
c001ee73:	e8 19 fa ff ff       	call   c001e891 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ee78:	83 c4 10             	add    esp,0x10
c001ee7b:	89 fa                	mov    edx,edi
c001ee7d:	66 ef                	out    dx,ax
c001ee7f:	85 c9                	test   ecx,ecx
c001ee81:	74 05                	je     c001ee88 <Vm::faultHandler(regs*)+0x594>
c001ee83:	83 ee 02             	sub    esi,0x2
c001ee86:	eb 03                	jmp    c001ee8b <Vm::faultHandler(regs*)+0x597>
c001ee88:	83 c6 02             	add    esi,0x2
c001ee8b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ee91:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ee94:	e9 cb 00 00 00       	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ee99:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eea7:	50                   	push   eax
c001eea8:	e8 42 f6 ff ff       	call   c001e4ef <Vm::inbv(unsigned short)>
c001eead:	0f b6 c0             	movzx  eax,al
c001eeb0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eeb3:	eb 3f                	jmp    c001eef4 <Vm::faultHandler(regs*)+0x600>
c001eeb5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eeba:	74 07                	je     c001eec3 <Vm::faultHandler(regs*)+0x5cf>
c001eebc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001eec0:	ed                   	in     eax,dx
c001eec1:	eb 14                	jmp    c001eed7 <Vm::faultHandler(regs*)+0x5e3>
c001eec3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001eec6:	66 31 f6             	xor    si,si
c001eec9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001eecc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001eed0:	66 ed                	in     ax,dx
c001eed2:	0f b7 c0             	movzx  eax,ax
c001eed5:	09 f0                	or     eax,esi
c001eed7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001eeda:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eede:	e9 84 00 00 00       	jmp    c001ef67 <Vm::faultHandler(regs*)+0x673>
c001eee3:	52                   	push   edx
c001eee4:	52                   	push   edx
c001eee5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001eee9:	50                   	push   eax
c001eeea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eeee:	50                   	push   eax
c001eeef:	e8 0e f6 ff ff       	call   c001e502 <Vm::outbv(unsigned short, unsigned char)>
c001eef4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eef8:	eb 53                	jmp    c001ef4d <Vm::faultHandler(regs*)+0x659>
c001eefa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eefd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef01:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef06:	74 03                	je     c001ef0b <Vm::faultHandler(regs*)+0x617>
c001ef08:	ef                   	out    dx,eax
c001ef09:	eb cf                	jmp    c001eeda <Vm::faultHandler(regs*)+0x5e6>
c001ef0b:	66 ef                	out    dx,ax
c001ef0d:	eb cb                	jmp    c001eeda <Vm::faultHandler(regs*)+0x5e6>
c001ef0f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef1d:	50                   	push   eax
c001ef1e:	e8 cc f5 ff ff       	call   c001e4ef <Vm::inbv(unsigned short)>
c001ef23:	0f b6 c0             	movzx  eax,al
c001ef26:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ef29:	eb 1f                	jmp    c001ef4a <Vm::faultHandler(regs*)+0x656>
c001ef2b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef33:	74 03                	je     c001ef38 <Vm::faultHandler(regs*)+0x644>
c001ef35:	ed                   	in     eax,dx
c001ef36:	eb 0d                	jmp    c001ef45 <Vm::faultHandler(regs*)+0x651>
c001ef38:	66 ed                	in     ax,dx
c001ef3a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ef3d:	0f b7 c0             	movzx  eax,ax
c001ef40:	66 31 d2             	xor    dx,dx
c001ef43:	09 d0                	or     eax,edx
c001ef45:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef48:	eb 1a                	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ef4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef4d:	83 c4 10             	add    esp,0x10
c001ef50:	eb 15                	jmp    c001ef67 <Vm::faultHandler(regs*)+0x673>
c001ef52:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef58:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef5d:	74 03                	je     c001ef62 <Vm::faultHandler(regs*)+0x66e>
c001ef5f:	ef                   	out    dx,eax
c001ef60:	eb 02                	jmp    c001ef64 <Vm::faultHandler(regs*)+0x670>
c001ef62:	66 ef                	out    dx,ax
c001ef64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef67:	b0 01                	mov    al,0x1
c001ef69:	eb 56                	jmp    c001efc1 <Vm::faultHandler(regs*)+0x6cd>
c001ef6b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ef6f:	50                   	push   eax
c001ef70:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ef74:	50                   	push   eax
c001ef75:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ef79:	50                   	push   eax
c001ef7a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ef7e:	50                   	push   eax
c001ef7f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef83:	50                   	push   eax
c001ef84:	52                   	push   edx
c001ef85:	52                   	push   edx
c001ef86:	68 1f be 02 c0       	push   0xc002be1f
c001ef8b:	e8 cf 37 ff ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c001ef90:	83 c4 20             	add    esp,0x20
c001ef93:	83 ec 0c             	sub    esp,0xc
c001ef96:	6a 60                	push   0x60
c001ef98:	e8 52 f5 ff ff       	call   c001e4ef <Vm::inbv(unsigned short)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	3c 1c                	cmp    al,0x1c
c001efa2:	74 04                	je     c001efa8 <Vm::faultHandler(regs*)+0x6b4>
c001efa4:	3c 5a                	cmp    al,0x5a
c001efa6:	75 eb                	jne    c001ef93 <Vm::faultHandler(regs*)+0x69f>
c001efa8:	3c 5a                	cmp    al,0x5a
c001efaa:	74 04                	je     c001efb0 <Vm::faultHandler(regs*)+0x6bc>
c001efac:	3c 1c                	cmp    al,0x1c
c001efae:	75 0f                	jne    c001efbf <Vm::faultHandler(regs*)+0x6cb>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	6a 60                	push   0x60
c001efb5:	e8 35 f5 ff ff       	call   c001e4ef <Vm::inbv(unsigned short)>
c001efba:	83 c4 10             	add    esp,0x10
c001efbd:	eb e9                	jmp    c001efa8 <Vm::faultHandler(regs*)+0x6b4>
c001efbf:	31 c0                	xor    eax,eax
c001efc1:	83 c4 1c             	add    esp,0x1c
c001efc4:	5b                   	pop    ebx
c001efc5:	5e                   	pop    esi
c001efc6:	5f                   	pop    edi
c001efc7:	5d                   	pop    ebp
c001efc8:	c3                   	ret    

c001efc9 <Vm::fpuInternalTo32(unsigned long long)>:
c001efc9:	57                   	push   edi
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd4:	89 d6                	mov    esi,edx
c001efd6:	89 d7                	mov    edi,edx
c001efd8:	89 c1                	mov    ecx,eax
c001efda:	c1 ef 14             	shr    edi,0x14
c001efdd:	89 d3                	mov    ebx,edx
c001efdf:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001efe5:	31 d2                	xor    edx,edx
c001efe7:	89 f8                	mov    eax,edi
c001efe9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001efef:	bf ff 00 00 00       	mov    edi,0xff
c001eff4:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eff9:	83 d2 ff             	adc    edx,0xffffffff
c001effc:	39 c7                	cmp    edi,eax
c001effe:	bf 00 00 00 00       	mov    edi,0x0
c001f003:	19 d7                	sbb    edi,edx
c001f005:	72 15                	jb     c001f01c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f007:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f00b:	c1 e0 17             	shl    eax,0x17
c001f00e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f014:	09 f1                	or     ecx,esi
c001f016:	09 c1                	or     ecx,eax
c001f018:	89 cf                	mov    edi,ecx
c001f01a:	eb 02                	jmp    c001f01e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f01c:	31 ff                	xor    edi,edi
c001f01e:	89 f8                	mov    eax,edi
c001f020:	5b                   	pop    ebx
c001f021:	5e                   	pop    esi
c001f022:	5f                   	pop    edi
c001f023:	c3                   	ret    

c001f024 <Vm::fpuInternalTo64(unsigned long long)>:
c001f024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f02c:	c3                   	ret    

c001f02d <Vm::fpu32ToInternal(unsigned int)>:
c001f02d:	57                   	push   edi
c001f02e:	31 ff                	xor    edi,edi
c001f030:	56                   	push   esi
c001f031:	53                   	push   ebx
c001f032:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f036:	89 cb                	mov    ebx,ecx
c001f038:	89 ce                	mov    esi,ecx
c001f03a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f040:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f046:	c1 e9 17             	shr    ecx,0x17
c001f049:	89 f0                	mov    eax,esi
c001f04b:	0f b6 d1             	movzx  edx,cl
c001f04e:	81 c2 80 03 00 00    	add    edx,0x380
c001f054:	89 d1                	mov    ecx,edx
c001f056:	89 fa                	mov    edx,edi
c001f058:	c1 e1 14             	shl    ecx,0x14
c001f05b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f05f:	c1 e0 1d             	shl    eax,0x1d
c001f062:	89 d7                	mov    edi,edx
c001f064:	89 c6                	mov    esi,eax
c001f066:	89 ca                	mov    edx,ecx
c001f068:	89 f0                	mov    eax,esi
c001f06a:	09 fa                	or     edx,edi
c001f06c:	09 da                	or     edx,ebx
c001f06e:	5b                   	pop    ebx
c001f06f:	5e                   	pop    esi
c001f070:	5f                   	pop    edi
c001f071:	c3                   	ret    

c001f072 <Vm::fpu64ToInternal(unsigned long long)>:
c001f072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f07a:	c3                   	ret    

c001f07b <Vm::fpuFloatToLong(unsigned long long)>:
c001f07b:	57                   	push   edi
c001f07c:	31 c0                	xor    eax,eax
c001f07e:	56                   	push   esi
c001f07f:	31 d2                	xor    edx,edx
c001f081:	53                   	push   ebx
c001f082:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f086:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f08a:	89 d9                	mov    ecx,ebx
c001f08c:	c1 e9 14             	shr    ecx,0x14
c001f08f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f095:	89 cf                	mov    edi,ecx
c001f097:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f09d:	78 33                	js     c001f0d2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f09f:	89 d9                	mov    ecx,ebx
c001f0a1:	89 f0                	mov    eax,esi
c001f0a3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0a9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f0af:	89 ca                	mov    edx,ecx
c001f0b1:	b9 34 00 00 00       	mov    ecx,0x34
c001f0b6:	29 f9                	sub    ecx,edi
c001f0b8:	0f ad d0             	shrd   eax,edx,cl
c001f0bb:	d3 fa                	sar    edx,cl
c001f0bd:	f6 c1 20             	test   cl,0x20
c001f0c0:	74 05                	je     c001f0c7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f0c2:	89 d0                	mov    eax,edx
c001f0c4:	c1 fa 1f             	sar    edx,0x1f
c001f0c7:	85 db                	test   ebx,ebx
c001f0c9:	79 07                	jns    c001f0d2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f0cb:	f7 d8                	neg    eax
c001f0cd:	83 d2 00             	adc    edx,0x0
c001f0d0:	f7 da                	neg    edx
c001f0d2:	5b                   	pop    ebx
c001f0d3:	5e                   	pop    esi
c001f0d4:	5f                   	pop    edi
c001f0d5:	c3                   	ret    

c001f0d6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f0d6:	57                   	push   edi
c001f0d7:	31 c9                	xor    ecx,ecx
c001f0d9:	56                   	push   esi
c001f0da:	53                   	push   ebx
c001f0db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f0df:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f0e3:	0f ba e7 14          	bt     edi,0x14
c001f0e7:	72 07                	jb     c001f0f0 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f0e9:	01 f6                	add    esi,esi
c001f0eb:	11 ff                	adc    edi,edi
c001f0ed:	41                   	inc    ecx
c001f0ee:	eb f3                	jmp    c001f0e3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f0f0:	89 fa                	mov    edx,edi
c001f0f2:	89 f0                	mov    eax,esi
c001f0f4:	bb 33 04 00 00       	mov    ebx,0x433
c001f0f9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f0ff:	29 cb                	sub    ebx,ecx
c001f101:	89 d9                	mov    ecx,ebx
c001f103:	5b                   	pop    ebx
c001f104:	c1 e1 14             	shl    ecx,0x14
c001f107:	5e                   	pop    esi
c001f108:	09 ca                	or     edx,ecx
c001f10a:	5f                   	pop    edi
c001f10b:	c3                   	ret    

c001f10c <Vm::fpuLongToFloat(long long)>:
c001f10c:	56                   	push   esi
c001f10d:	31 c0                	xor    eax,eax
c001f10f:	53                   	push   ebx
c001f110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f114:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f118:	39 c8                	cmp    eax,ecx
c001f11a:	19 d8                	sbb    eax,ebx
c001f11c:	7d 04                	jge    c001f122 <Vm::fpuLongToFloat(long long)+0x16>
c001f11e:	31 f6                	xor    esi,esi
c001f120:	eb 0c                	jmp    c001f12e <Vm::fpuLongToFloat(long long)+0x22>
c001f122:	f7 d9                	neg    ecx
c001f124:	be 01 00 00 00       	mov    esi,0x1
c001f129:	83 d3 00             	adc    ebx,0x0
c001f12c:	f7 db                	neg    ebx
c001f12e:	31 c0                	xor    eax,eax
c001f130:	0f ba e3 14          	bt     ebx,0x14
c001f134:	72 07                	jb     c001f13d <Vm::fpuLongToFloat(long long)+0x31>
c001f136:	01 c9                	add    ecx,ecx
c001f138:	11 db                	adc    ebx,ebx
c001f13a:	40                   	inc    eax
c001f13b:	eb f3                	jmp    c001f130 <Vm::fpuLongToFloat(long long)+0x24>
c001f13d:	ba 33 04 00 00       	mov    edx,0x433
c001f142:	29 c2                	sub    edx,eax
c001f144:	89 c8                	mov    eax,ecx
c001f146:	c1 e2 14             	shl    edx,0x14
c001f149:	89 d9                	mov    ecx,ebx
c001f14b:	89 f3                	mov    ebx,esi
c001f14d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f153:	09 ca                	or     edx,ecx
c001f155:	84 db                	test   bl,bl
c001f157:	74 06                	je     c001f15f <Vm::fpuLongToFloat(long long)+0x53>
c001f159:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f15f:	5b                   	pop    ebx
c001f160:	5e                   	pop    esi
c001f161:	c3                   	ret    

c001f162 <Vm::fpuGet0()>:
c001f162:	31 c0                	xor    eax,eax
c001f164:	31 d2                	xor    edx,edx
c001f166:	c3                   	ret    

c001f167 <Vm::fpuGet1()>:
c001f167:	b8 01 00 00 00       	mov    eax,0x1
c001f16c:	31 d2                	xor    edx,edx
c001f16e:	c3                   	ret    

c001f16f <Vm::fpuGetPi()>:
c001f16f:	b8 03 00 00 00       	mov    eax,0x3
c001f174:	31 d2                	xor    edx,edx
c001f176:	c3                   	ret    

c001f177 <Vm::fpuGetLog2E()>:
c001f177:	83 ec 18             	sub    esp,0x18
c001f17a:	68 7c be 02 c0       	push   0xc002be7c
c001f17f:	e8 47 ad ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f184:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f189:	31 d2                	xor    edx,edx
c001f18b:	83 c4 1c             	add    esp,0x1c
c001f18e:	c3                   	ret    

c001f18f <Vm::fpuGetLogE2()>:
c001f18f:	83 ec 18             	sub    esp,0x18
c001f192:	68 88 be 02 c0       	push   0xc002be88
c001f197:	e8 2f ad ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f19c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1a1:	31 d2                	xor    edx,edx
c001f1a3:	83 c4 1c             	add    esp,0x1c
c001f1a6:	c3                   	ret    

c001f1a7 <Vm::fpuGetLog210()>:
c001f1a7:	83 ec 18             	sub    esp,0x18
c001f1aa:	68 94 be 02 c0       	push   0xc002be94
c001f1af:	e8 17 ad ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f1b4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1b9:	31 d2                	xor    edx,edx
c001f1bb:	83 c4 1c             	add    esp,0x1c
c001f1be:	c3                   	ret    

c001f1bf <Vm::fpuGetLog102()>:
c001f1bf:	83 ec 18             	sub    esp,0x18
c001f1c2:	68 a1 be 02 c0       	push   0xc002bea1
c001f1c7:	e8 ff ac ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f1cc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1d1:	31 d2                	xor    edx,edx
c001f1d3:	83 c4 1c             	add    esp,0x1c
c001f1d6:	c3                   	ret    

c001f1d7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f1d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1db:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f1df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1e3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f1e7:	0f 92 c0             	setb   al
c001f1ea:	c3                   	ret    

c001f1eb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f1eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f1f7:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f1fb:	09 c2                	or     edx,eax
c001f1fd:	0f 94 c0             	sete   al
c001f200:	c3                   	ret    

c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f201:	57                   	push   edi
c001f202:	56                   	push   esi
c001f203:	53                   	push   ebx
c001f204:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f208:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f20c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f210:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f214:	57                   	push   edi
c001f215:	56                   	push   esi
c001f216:	53                   	push   ebx
c001f217:	51                   	push   ecx
c001f218:	e8 ce ff ff ff       	call   c001f1eb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	88 c2                	mov    dl,al
c001f222:	31 c0                	xor    eax,eax
c001f224:	84 d2                	test   dl,dl
c001f226:	75 0c                	jne    c001f234 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f228:	57                   	push   edi
c001f229:	56                   	push   esi
c001f22a:	53                   	push   ebx
c001f22b:	51                   	push   ecx
c001f22c:	e8 a6 ff ff ff       	call   c001f1d7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f231:	83 c4 10             	add    esp,0x10
c001f234:	83 e0 01             	and    eax,0x1
c001f237:	5b                   	pop    ebx
c001f238:	88 c1                	mov    cl,al
c001f23a:	83 e2 01             	and    edx,0x1
c001f23d:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f242:	c1 e2 06             	shl    edx,0x6
c001f245:	83 e0 ba             	and    eax,0xffffffba
c001f248:	5e                   	pop    esi
c001f249:	09 c8                	or     eax,ecx
c001f24b:	5f                   	pop    edi
c001f24c:	09 d0                	or     eax,edx
c001f24e:	a2 21 10 03 c0       	mov    ds:0xc0031021,al
c001f253:	c3                   	ret    

c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f254:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f258:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f25c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f260:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f264:	c3                   	ret    

c001f265 <Vm::fpuAbs(unsigned long long)>:
c001f265:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f269:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f26d:	c3                   	ret    

c001f26e <Vm::fpuChs(unsigned long long)>:
c001f26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f276:	f7 d8                	neg    eax
c001f278:	83 d2 00             	adc    edx,0x0
c001f27b:	f7 da                	neg    edx
c001f27d:	c3                   	ret    

c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f27e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f282:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f287:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f28b:	eb c7                	jmp    c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f28d:	53                   	push   ebx
c001f28e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f292:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f296:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f29a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f29e:	0f af ca             	imul   ecx,edx
c001f2a1:	0f af d8             	imul   ebx,eax
c001f2a4:	f7 e2                	mul    edx
c001f2a6:	01 d9                	add    ecx,ebx
c001f2a8:	5b                   	pop    ebx
c001f2a9:	01 ca                	add    edx,ecx
c001f2ab:	c3                   	ret    

c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f2ac:	83 ec 0c             	sub    esp,0xc
c001f2af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2bf:	e8 e0 74 00 00       	call   c00267a4 <__udivdi3>
c001f2c4:	83 c4 1c             	add    esp,0x1c
c001f2c7:	c3                   	ret    

c001f2c8 <Vm::fpuSquare(unsigned long long)>:
c001f2c8:	50                   	push   eax
c001f2c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2d1:	52                   	push   edx
c001f2d2:	50                   	push   eax
c001f2d3:	52                   	push   edx
c001f2d4:	50                   	push   eax
c001f2d5:	e8 b3 ff ff ff       	call   c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f2da:	83 c4 14             	add    esp,0x14
c001f2dd:	c3                   	ret    

c001f2de <Vm::fpuGetReg(int)>:
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f2e6:	76 10                	jbe    c001f2f8 <Vm::fpuGetReg(int)+0x1a>
c001f2e8:	83 ec 0c             	sub    esp,0xc
c001f2eb:	68 ae be 02 c0       	push   0xc002beae
c001f2f0:	e8 d6 ab ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f2f5:	83 c4 10             	add    esp,0x10
c001f2f8:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f2fd:	b9 08 00 00 00       	mov    ecx,0x8
c001f302:	c0 e8 03             	shr    al,0x3
c001f305:	83 e0 07             	and    eax,0x7
c001f308:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f30c:	99                   	cdq    
c001f30d:	f7 f9                	idiv   ecx
c001f30f:	8b 04 d5 24 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcefdc]
c001f316:	8b 14 d5 28 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcefd8]
c001f31d:	83 c4 0c             	add    esp,0xc
c001f320:	c3                   	ret    

c001f321 <Vm::fpuSetReg(int, unsigned long long)>:
c001f321:	57                   	push   edi
c001f322:	56                   	push   esi
c001f323:	52                   	push   edx
c001f324:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f328:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f32c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f331:	76 10                	jbe    c001f343 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	68 c1 be 02 c0       	push   0xc002bec1
c001f33b:	e8 8b ab ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c001f340:	83 c4 10             	add    esp,0x10
c001f343:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f348:	b9 08 00 00 00       	mov    ecx,0x8
c001f34d:	c0 e8 03             	shr    al,0x3
c001f350:	83 e0 07             	and    eax,0x7
c001f353:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f357:	99                   	cdq    
c001f358:	f7 f9                	idiv   ecx
c001f35a:	89 34 d5 24 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcefdc],esi
c001f361:	89 3c d5 28 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcefd8],edi
c001f368:	58                   	pop    eax
c001f369:	5e                   	pop    esi
c001f36a:	5f                   	pop    edi
c001f36b:	c3                   	ret    

c001f36c <Vm::fpuPush(unsigned long long)>:
c001f36c:	a0 21 10 03 c0       	mov    al,ds:0xc0031021
c001f371:	c0 e8 03             	shr    al,0x3
c001f374:	83 e0 07             	and    eax,0x7
c001f377:	83 c0 07             	add    eax,0x7
c001f37a:	88 c2                	mov    dl,al
c001f37c:	83 e0 07             	and    eax,0x7
c001f37f:	83 e2 07             	and    edx,0x7
c001f382:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f389:	8a 15 21 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031021
c001f38f:	83 e2 c7             	and    edx,0xffffffc7
c001f392:	09 ca                	or     edx,ecx
c001f394:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f398:	88 15 21 10 03 c0    	mov    BYTE PTR ds:0xc0031021,dl
c001f39e:	89 0c c5 28 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcefd8],ecx
c001f3a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3a9:	89 14 c5 24 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcefdc],edx
c001f3b0:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c001f3b5:	83 f8 08             	cmp    eax,0x8
c001f3b8:	75 08                	jne    c001f3c2 <Vm::fpuPush(unsigned long long)+0x56>
c001f3ba:	80 0d 20 10 03 c0 40 	or     BYTE PTR ds:0xc0031020,0x40
c001f3c1:	c3                   	ret    
c001f3c2:	40                   	inc    eax
c001f3c3:	a3 64 10 03 c0       	mov    ds:0xc0031064,eax
c001f3c8:	c3                   	ret    

c001f3c9 <Vm::fpuPop()>:
c001f3c9:	8a 0d 21 10 03 c0    	mov    cl,BYTE PTR ds:0xc0031021
c001f3cf:	53                   	push   ebx
c001f3d0:	c0 e9 03             	shr    cl,0x3
c001f3d3:	8a 1d 21 10 03 c0    	mov    bl,BYTE PTR ds:0xc0031021
c001f3d9:	83 e1 07             	and    ecx,0x7
c001f3dc:	83 e3 c7             	and    ebx,0xffffffc7
c001f3df:	8b 04 cd 24 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcefdc]
c001f3e6:	8b 14 cd 28 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcefd8]
c001f3ed:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f3f4:	83 e1 38             	and    ecx,0x38
c001f3f7:	09 d9                	or     ecx,ebx
c001f3f9:	88 0d 21 10 03 c0    	mov    BYTE PTR ds:0xc0031021,cl
c001f3ff:	8b 0d 64 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031064
c001f405:	85 c9                	test   ecx,ecx
c001f407:	74 09                	je     c001f412 <Vm::fpuPop()+0x49>
c001f409:	49                   	dec    ecx
c001f40a:	89 0d 64 10 03 c0    	mov    DWORD PTR ds:0xc0031064,ecx
c001f410:	eb 07                	jmp    c001f419 <Vm::fpuPop()+0x50>
c001f412:	80 0d 20 10 03 c0 40 	or     BYTE PTR ds:0xc0031020,0x40
c001f419:	5b                   	pop    ebx
c001f41a:	c3                   	ret    

c001f41b <Vm::x87Handler(regs*)>:
c001f41b:	55                   	push   ebp
c001f41c:	57                   	push   edi
c001f41d:	56                   	push   esi
c001f41e:	53                   	push   ebx
c001f41f:	83 ec 1c             	sub    esp,0x1c
c001f422:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f426:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f42b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f42e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f436:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f43a:	50                   	push   eax
c001f43b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f43f:	50                   	push   eax
c001f440:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f444:	50                   	push   eax
c001f445:	53                   	push   ebx
c001f446:	e8 99 a1 ff ff       	call   c00195e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f44b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f44e:	83 c4 10             	add    esp,0x10
c001f451:	89 c6                	mov    esi,eax
c001f453:	80 fa d9             	cmp    dl,0xd9
c001f456:	0f 85 52 01 00 00    	jne    c001f5ae <Vm::x87Handler(regs*)+0x193>
c001f45c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f460:	8d 50 20             	lea    edx,[eax+0x20]
c001f463:	80 fa 0e             	cmp    dl,0xe
c001f466:	0f 87 86 00 00 00    	ja     c001f4f2 <Vm::x87Handler(regs*)+0xd7>
c001f46c:	0f b6 d2             	movzx  edx,dl
c001f46f:	ff 24 95 d4 be 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd412c]
c001f476:	e8 e7 fc ff ff       	call   c001f162 <Vm::fpuGet0()>
c001f47b:	eb 05                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f47d:	e8 e5 fc ff ff       	call   c001f167 <Vm::fpuGet1()>
c001f482:	57                   	push   edi
c001f483:	57                   	push   edi
c001f484:	52                   	push   edx
c001f485:	50                   	push   eax
c001f486:	e8 e1 fe ff ff       	call   c001f36c <Vm::fpuPush(unsigned long long)>
c001f48b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f48f:	83 c4 10             	add    esp,0x10
c001f492:	b0 01                	mov    al,0x1
c001f494:	e9 e3 09 00 00       	jmp    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	6a 00                	push   0x0
c001f49e:	e8 3b fe ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f4a3:	59                   	pop    ecx
c001f4a4:	5e                   	pop    esi
c001f4a5:	52                   	push   edx
c001f4a6:	50                   	push   eax
c001f4a7:	e8 c2 fd ff ff       	call   c001f26e <Vm::fpuChs(unsigned long long)>
c001f4ac:	eb 13                	jmp    c001f4c1 <Vm::x87Handler(regs*)+0xa6>
c001f4ae:	83 ec 0c             	sub    esp,0xc
c001f4b1:	6a 00                	push   0x0
c001f4b3:	e8 26 fe ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f4b8:	5f                   	pop    edi
c001f4b9:	5d                   	pop    ebp
c001f4ba:	52                   	push   edx
c001f4bb:	50                   	push   eax
c001f4bc:	e8 a4 fd ff ff       	call   c001f265 <Vm::fpuAbs(unsigned long long)>
c001f4c1:	83 c4 0c             	add    esp,0xc
c001f4c4:	52                   	push   edx
c001f4c5:	50                   	push   eax
c001f4c6:	6a 00                	push   0x0
c001f4c8:	e8 54 fe ff ff       	call   c001f321 <Vm::fpuSetReg(int, unsigned long long)>
c001f4cd:	eb bc                	jmp    c001f48b <Vm::x87Handler(regs*)+0x70>
c001f4cf:	e8 d3 fc ff ff       	call   c001f1a7 <Vm::fpuGetLog210()>
c001f4d4:	eb ac                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f4d6:	e8 9c fc ff ff       	call   c001f177 <Vm::fpuGetLog2E()>
c001f4db:	eb a5                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f4dd:	e8 8d fc ff ff       	call   c001f16f <Vm::fpuGetPi()>
c001f4e2:	eb 9e                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f4e4:	e8 d6 fc ff ff       	call   c001f1bf <Vm::fpuGetLog102()>
c001f4e9:	eb 97                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f4eb:	e8 9f fc ff ff       	call   c001f18f <Vm::fpuGetLogE2()>
c001f4f0:	eb 90                	jmp    c001f482 <Vm::x87Handler(regs*)+0x67>
c001f4f2:	8d 50 40             	lea    edx,[eax+0x40]
c001f4f5:	80 fa 07             	cmp    dl,0x7
c001f4f8:	77 15                	ja     c001f50f <Vm::x87Handler(regs*)+0xf4>
c001f4fa:	83 ec 0c             	sub    esp,0xc
c001f4fd:	2d c0 00 00 00       	sub    eax,0xc0
c001f502:	50                   	push   eax
c001f503:	e8 d6 fd ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f508:	59                   	pop    ecx
c001f509:	5e                   	pop    esi
c001f50a:	e9 75 ff ff ff       	jmp    c001f484 <Vm::x87Handler(regs*)+0x69>
c001f50f:	8d 50 38             	lea    edx,[eax+0x38]
c001f512:	80 fa 07             	cmp    dl,0x7
c001f515:	77 3c                	ja     c001f553 <Vm::x87Handler(regs*)+0x138>
c001f517:	83 ec 0c             	sub    esp,0xc
c001f51a:	2d c8 00 00 00       	sub    eax,0xc8
c001f51f:	50                   	push   eax
c001f520:	e8 b9 fd ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f525:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f52c:	89 c6                	mov    esi,eax
c001f52e:	89 d7                	mov    edi,edx
c001f530:	e8 a9 fd ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f535:	83 c4 0c             	add    esp,0xc
c001f538:	52                   	push   edx
c001f539:	50                   	push   eax
c001f53a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f53e:	2d c8 00 00 00       	sub    eax,0xc8
c001f543:	50                   	push   eax
c001f544:	e8 d8 fd ff ff       	call   c001f321 <Vm::fpuSetReg(int, unsigned long long)>
c001f549:	83 c4 0c             	add    esp,0xc
c001f54c:	57                   	push   edi
c001f54d:	56                   	push   esi
c001f54e:	e9 73 ff ff ff       	jmp    c001f4c6 <Vm::x87Handler(regs*)+0xab>
c001f553:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f557:	84 d2                	test   dl,dl
c001f559:	75 0f                	jne    c001f56a <Vm::x87Handler(regs*)+0x14f>
c001f55b:	83 ec 0c             	sub    esp,0xc
c001f55e:	ff 36                	push   DWORD PTR [esi]
c001f560:	e8 c8 fa ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001f565:	e9 bf 00 00 00       	jmp    c001f629 <Vm::x87Handler(regs*)+0x20e>
c001f56a:	80 fa 03             	cmp    dl,0x3
c001f56d:	75 13                	jne    c001f582 <Vm::x87Handler(regs*)+0x167>
c001f56f:	e8 55 fe ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001f574:	55                   	push   ebp
c001f575:	55                   	push   ebp
c001f576:	52                   	push   edx
c001f577:	50                   	push   eax
c001f578:	e8 4c fa ff ff       	call   c001efc9 <Vm::fpuInternalTo32(unsigned long long)>
c001f57d:	e9 88 00 00 00       	jmp    c001f60a <Vm::x87Handler(regs*)+0x1ef>
c001f582:	80 fa 05             	cmp    dl,0x5
c001f585:	75 0e                	jne    c001f595 <Vm::x87Handler(regs*)+0x17a>
c001f587:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f58a:	66 a3 22 10 03 c0    	mov    ds:0xc0031022,ax
c001f590:	e9 df 00 00 00       	jmp    c001f674 <Vm::x87Handler(regs*)+0x259>
c001f595:	31 c0                	xor    eax,eax
c001f597:	80 fa 07             	cmp    dl,0x7
c001f59a:	0f 85 dc 08 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001f5a0:	66 a1 22 10 03 c0    	mov    ax,ds:0xc0031022
c001f5a6:	66 89 06             	mov    WORD PTR [esi],ax
c001f5a9:	e9 c6 00 00 00       	jmp    c001f674 <Vm::x87Handler(regs*)+0x259>
c001f5ae:	80 fa d8             	cmp    dl,0xd8
c001f5b1:	0f 84 c9 00 00 00    	je     c001f680 <Vm::x87Handler(regs*)+0x265>
c001f5b7:	80 fa dc             	cmp    dl,0xdc
c001f5ba:	0f 84 0d 02 00 00    	je     c001f7cd <Vm::x87Handler(regs*)+0x3b2>
c001f5c0:	80 fa de             	cmp    dl,0xde
c001f5c3:	0f 84 cd 02 00 00    	je     c001f896 <Vm::x87Handler(regs*)+0x47b>
c001f5c9:	80 fa dd             	cmp    dl,0xdd
c001f5cc:	0f 84 5f 04 00 00    	je     c001fa31 <Vm::x87Handler(regs*)+0x616>
c001f5d2:	80 fa da             	cmp    dl,0xda
c001f5d5:	0f 84 24 05 00 00    	je     c001faff <Vm::x87Handler(regs*)+0x6e4>
c001f5db:	80 fa df             	cmp    dl,0xdf
c001f5de:	0f 84 68 05 00 00    	je     c001fb4c <Vm::x87Handler(regs*)+0x731>
c001f5e4:	31 c0                	xor    eax,eax
c001f5e6:	80 fa db             	cmp    dl,0xdb
c001f5e9:	0f 85 8d 08 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001f5ef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5f3:	80 fa 03             	cmp    dl,0x3
c001f5f6:	0f 85 70 06 00 00    	jne    c001fc6c <Vm::x87Handler(regs*)+0x851>
c001f5fc:	e8 c8 fd ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001f601:	55                   	push   ebp
c001f602:	55                   	push   ebp
c001f603:	52                   	push   edx
c001f604:	50                   	push   eax
c001f605:	e8 71 fa ff ff       	call   c001f07b <Vm::fpuFloatToLong(unsigned long long)>
c001f60a:	83 c4 10             	add    esp,0x10
c001f60d:	89 06                	mov    DWORD PTR [esi],eax
c001f60f:	eb 63                	jmp    c001f674 <Vm::x87Handler(regs*)+0x259>
c001f611:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f615:	84 d2                	test   dl,dl
c001f617:	0f 85 e6 05 00 00    	jne    c001fc03 <Vm::x87Handler(regs*)+0x7e8>
c001f61d:	57                   	push   edi
c001f61e:	57                   	push   edi
c001f61f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f622:	ff 36                	push   DWORD PTR [esi]
c001f624:	e8 49 fa ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001f629:	5e                   	pop    esi
c001f62a:	5f                   	pop    edi
c001f62b:	52                   	push   edx
c001f62c:	50                   	push   eax
c001f62d:	e8 3a fd ff ff       	call   c001f36c <Vm::fpuPush(unsigned long long)>
c001f632:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f636:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f639:	e9 51 fe ff ff       	jmp    c001f48f <Vm::x87Handler(regs*)+0x74>
c001f63e:	80 fa 03             	cmp    dl,0x3
c001f641:	0f 85 d7 06 00 00    	jne    c001fd1e <Vm::x87Handler(regs*)+0x903>
c001f647:	57                   	push   edi
c001f648:	57                   	push   edi
c001f649:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f64c:	ff 36                	push   DWORD PTR [esi]
c001f64e:	e8 1f fa ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001f653:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f65a:	89 c6                	mov    esi,eax
c001f65c:	89 d7                	mov    edi,edx
c001f65e:	e8 7b fc ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f663:	57                   	push   edi
c001f664:	56                   	push   esi
c001f665:	52                   	push   edx
c001f666:	50                   	push   eax
c001f667:	e8 95 fb ff ff       	call   c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f66c:	83 c4 20             	add    esp,0x20
c001f66f:	e8 55 fd ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001f674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f678:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f67b:	e9 12 fe ff ff       	jmp    c001f492 <Vm::x87Handler(regs*)+0x77>
c001f680:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f684:	8d 50 40             	lea    edx,[eax+0x40]
c001f687:	80 fa 07             	cmp    dl,0x7
c001f68a:	77 29                	ja     c001f6b5 <Vm::x87Handler(regs*)+0x29a>
c001f68c:	83 ec 0c             	sub    esp,0xc
c001f68f:	2d c0 00 00 00       	sub    eax,0xc0
c001f694:	50                   	push   eax
c001f695:	e8 44 fc ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f69a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6a1:	89 c6                	mov    esi,eax
c001f6a3:	89 d7                	mov    edi,edx
c001f6a5:	e8 34 fc ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f6aa:	57                   	push   edi
c001f6ab:	56                   	push   esi
c001f6ac:	52                   	push   edx
c001f6ad:	50                   	push   eax
c001f6ae:	e8 a1 fb ff ff       	call   c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6b3:	eb 2f                	jmp    c001f6e4 <Vm::x87Handler(regs*)+0x2c9>
c001f6b5:	8d 50 38             	lea    edx,[eax+0x38]
c001f6b8:	80 fa 07             	cmp    dl,0x7
c001f6bb:	77 2f                	ja     c001f6ec <Vm::x87Handler(regs*)+0x2d1>
c001f6bd:	83 ec 0c             	sub    esp,0xc
c001f6c0:	2d c8 00 00 00       	sub    eax,0xc8
c001f6c5:	50                   	push   eax
c001f6c6:	e8 13 fc ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f6cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d2:	89 c6                	mov    esi,eax
c001f6d4:	89 d7                	mov    edi,edx
c001f6d6:	e8 03 fc ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f6db:	57                   	push   edi
c001f6dc:	56                   	push   esi
c001f6dd:	52                   	push   edx
c001f6de:	50                   	push   eax
c001f6df:	e8 a9 fb ff ff       	call   c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6e4:	83 c4 1c             	add    esp,0x1c
c001f6e7:	e9 d8 fd ff ff       	jmp    c001f4c4 <Vm::x87Handler(regs*)+0xa9>
c001f6ec:	8d 50 30             	lea    edx,[eax+0x30]
c001f6ef:	80 fa 07             	cmp    dl,0x7
c001f6f2:	77 0d                	ja     c001f701 <Vm::x87Handler(regs*)+0x2e6>
c001f6f4:	83 ec 0c             	sub    esp,0xc
c001f6f7:	2d d0 00 00 00       	sub    eax,0xd0
c001f6fc:	e9 99 03 00 00       	jmp    c001fa9a <Vm::x87Handler(regs*)+0x67f>
c001f701:	8d 50 28             	lea    edx,[eax+0x28]
c001f704:	80 fa 07             	cmp    dl,0x7
c001f707:	77 0d                	ja     c001f716 <Vm::x87Handler(regs*)+0x2fb>
c001f709:	83 ec 0c             	sub    esp,0xc
c001f70c:	2d d8 00 00 00       	sub    eax,0xd8
c001f711:	e9 c0 03 00 00       	jmp    c001fad6 <Vm::x87Handler(regs*)+0x6bb>
c001f716:	8d 50 20             	lea    edx,[eax+0x20]
c001f719:	80 fa 07             	cmp    dl,0x7
c001f71c:	77 1b                	ja     c001f739 <Vm::x87Handler(regs*)+0x31e>
c001f71e:	83 ec 0c             	sub    esp,0xc
c001f721:	2d e0 00 00 00       	sub    eax,0xe0
c001f726:	50                   	push   eax
c001f727:	e8 b2 fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f72c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f733:	89 c6                	mov    esi,eax
c001f735:	89 d7                	mov    edi,edx
c001f737:	eb 22                	jmp    c001f75b <Vm::x87Handler(regs*)+0x340>
c001f739:	8d 50 18             	lea    edx,[eax+0x18]
c001f73c:	80 fa 07             	cmp    dl,0x7
c001f73f:	77 2d                	ja     c001f76e <Vm::x87Handler(regs*)+0x353>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	6a 00                	push   0x0
c001f746:	e8 93 fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f74b:	89 c6                	mov    esi,eax
c001f74d:	89 d7                	mov    edi,edx
c001f74f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f753:	2d e8 00 00 00       	sub    eax,0xe8
c001f758:	89 04 24             	mov    DWORD PTR [esp],eax
c001f75b:	e8 7e fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f760:	57                   	push   edi
c001f761:	56                   	push   esi
c001f762:	52                   	push   edx
c001f763:	50                   	push   eax
c001f764:	e8 15 fb ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f769:	e9 76 ff ff ff       	jmp    c001f6e4 <Vm::x87Handler(regs*)+0x2c9>
c001f76e:	8d 50 10             	lea    edx,[eax+0x10]
c001f771:	80 fa 07             	cmp    dl,0x7
c001f774:	77 1b                	ja     c001f791 <Vm::x87Handler(regs*)+0x376>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	2d f0 00 00 00       	sub    eax,0xf0
c001f77e:	50                   	push   eax
c001f77f:	e8 5a fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f784:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f78b:	89 c6                	mov    esi,eax
c001f78d:	89 d7                	mov    edi,edx
c001f78f:	eb 22                	jmp    c001f7b3 <Vm::x87Handler(regs*)+0x398>
c001f791:	3c f7                	cmp    al,0xf7
c001f793:	0f 86 d1 03 00 00    	jbe    c001fb6a <Vm::x87Handler(regs*)+0x74f>
c001f799:	83 ec 0c             	sub    esp,0xc
c001f79c:	6a 00                	push   0x0
c001f79e:	e8 3b fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f7a3:	89 c6                	mov    esi,eax
c001f7a5:	89 d7                	mov    edi,edx
c001f7a7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ab:	2d f8 00 00 00       	sub    eax,0xf8
c001f7b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7b3:	e8 26 fb ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f7b8:	57                   	push   edi
c001f7b9:	56                   	push   esi
c001f7ba:	52                   	push   edx
c001f7bb:	50                   	push   eax
c001f7bc:	e8 eb fa ff ff       	call   c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7c1:	83 c4 1c             	add    esp,0x1c
c001f7c4:	52                   	push   edx
c001f7c5:	50                   	push   eax
c001f7c6:	6a 00                	push   0x0
c001f7c8:	e9 51 02 00 00       	jmp    c001fa1e <Vm::x87Handler(regs*)+0x603>
c001f7cd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d1:	8d 50 40             	lea    edx,[eax+0x40]
c001f7d4:	80 fa 07             	cmp    dl,0x7
c001f7d7:	77 37                	ja     c001f810 <Vm::x87Handler(regs*)+0x3f5>
c001f7d9:	83 ec 0c             	sub    esp,0xc
c001f7dc:	2d c0 00 00 00       	sub    eax,0xc0
c001f7e1:	50                   	push   eax
c001f7e2:	e8 f7 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f7e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7ee:	89 c6                	mov    esi,eax
c001f7f0:	89 d7                	mov    edi,edx
c001f7f2:	e8 e7 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f7f7:	57                   	push   edi
c001f7f8:	56                   	push   esi
c001f7f9:	52                   	push   edx
c001f7fa:	50                   	push   eax
c001f7fb:	e8 54 fa ff ff       	call   c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f800:	83 c4 1c             	add    esp,0x1c
c001f803:	52                   	push   edx
c001f804:	50                   	push   eax
c001f805:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f809:	2d c0 00 00 00       	sub    eax,0xc0
c001f80e:	eb 3d                	jmp    c001f84d <Vm::x87Handler(regs*)+0x432>
c001f810:	8d 50 38             	lea    edx,[eax+0x38]
c001f813:	80 fa 07             	cmp    dl,0x7
c001f816:	77 3b                	ja     c001f853 <Vm::x87Handler(regs*)+0x438>
c001f818:	83 ec 0c             	sub    esp,0xc
c001f81b:	2d c8 00 00 00       	sub    eax,0xc8
c001f820:	50                   	push   eax
c001f821:	e8 b8 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f826:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f82d:	89 c6                	mov    esi,eax
c001f82f:	89 d7                	mov    edi,edx
c001f831:	e8 a8 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f836:	57                   	push   edi
c001f837:	56                   	push   esi
c001f838:	52                   	push   edx
c001f839:	50                   	push   eax
c001f83a:	e8 4e fa ff ff       	call   c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f83f:	83 c4 1c             	add    esp,0x1c
c001f842:	52                   	push   edx
c001f843:	50                   	push   eax
c001f844:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f848:	2d c8 00 00 00       	sub    eax,0xc8
c001f84d:	50                   	push   eax
c001f84e:	e9 75 fc ff ff       	jmp    c001f4c8 <Vm::x87Handler(regs*)+0xad>
c001f853:	83 c0 18             	add    eax,0x18
c001f856:	3c 07                	cmp    al,0x7
c001f858:	0f 87 3b 04 00 00    	ja     c001fc99 <Vm::x87Handler(regs*)+0x87e>
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	6a 00                	push   0x0
c001f863:	e8 76 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f868:	89 c6                	mov    esi,eax
c001f86a:	89 d7                	mov    edi,edx
c001f86c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f870:	2d e8 00 00 00       	sub    eax,0xe8
c001f875:	89 04 24             	mov    DWORD PTR [esp],eax
c001f878:	e8 61 fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f87d:	57                   	push   edi
c001f87e:	56                   	push   esi
c001f87f:	52                   	push   edx
c001f880:	50                   	push   eax
c001f881:	e8 f8 f9 ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f886:	83 c4 1c             	add    esp,0x1c
c001f889:	52                   	push   edx
c001f88a:	50                   	push   eax
c001f88b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f88f:	2d e8 00 00 00       	sub    eax,0xe8
c001f894:	eb b7                	jmp    c001f84d <Vm::x87Handler(regs*)+0x432>
c001f896:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89a:	8d 50 40             	lea    edx,[eax+0x40]
c001f89d:	80 fa 07             	cmp    dl,0x7
c001f8a0:	77 3a                	ja     c001f8dc <Vm::x87Handler(regs*)+0x4c1>
c001f8a2:	83 ec 0c             	sub    esp,0xc
c001f8a5:	2d c0 00 00 00       	sub    eax,0xc0
c001f8aa:	50                   	push   eax
c001f8ab:	e8 2e fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f8b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8b7:	89 c6                	mov    esi,eax
c001f8b9:	89 d7                	mov    edi,edx
c001f8bb:	e8 1e fa ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f8c0:	57                   	push   edi
c001f8c1:	56                   	push   esi
c001f8c2:	52                   	push   edx
c001f8c3:	50                   	push   eax
c001f8c4:	e8 8b f9 ff ff       	call   c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8c9:	83 c4 1c             	add    esp,0x1c
c001f8cc:	52                   	push   edx
c001f8cd:	50                   	push   eax
c001f8ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d2:	2d c0 00 00 00       	sub    eax,0xc0
c001f8d7:	e9 9e 01 00 00       	jmp    c001fa7a <Vm::x87Handler(regs*)+0x65f>
c001f8dc:	8d 50 20             	lea    edx,[eax+0x20]
c001f8df:	80 fa 07             	cmp    dl,0x7
c001f8e2:	77 3a                	ja     c001f91e <Vm::x87Handler(regs*)+0x503>
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	2d e0 00 00 00       	sub    eax,0xe0
c001f8ec:	50                   	push   eax
c001f8ed:	e8 ec f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f8f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8f9:	89 c6                	mov    esi,eax
c001f8fb:	89 d7                	mov    edi,edx
c001f8fd:	e8 dc f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f902:	57                   	push   edi
c001f903:	56                   	push   esi
c001f904:	52                   	push   edx
c001f905:	50                   	push   eax
c001f906:	e8 73 f9 ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f90b:	83 c4 1c             	add    esp,0x1c
c001f90e:	52                   	push   edx
c001f90f:	50                   	push   eax
c001f910:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f914:	2d e0 00 00 00       	sub    eax,0xe0
c001f919:	e9 5c 01 00 00       	jmp    c001fa7a <Vm::x87Handler(regs*)+0x65f>
c001f91e:	8d 50 18             	lea    edx,[eax+0x18]
c001f921:	80 fa 07             	cmp    dl,0x7
c001f924:	77 3b                	ja     c001f961 <Vm::x87Handler(regs*)+0x546>
c001f926:	83 ec 0c             	sub    esp,0xc
c001f929:	6a 00                	push   0x0
c001f92b:	e8 ae f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f930:	89 c6                	mov    esi,eax
c001f932:	89 d7                	mov    edi,edx
c001f934:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f938:	2d e8 00 00 00       	sub    eax,0xe8
c001f93d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f940:	e8 99 f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f945:	57                   	push   edi
c001f946:	56                   	push   esi
c001f947:	52                   	push   edx
c001f948:	50                   	push   eax
c001f949:	e8 30 f9 ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f94e:	83 c4 1c             	add    esp,0x1c
c001f951:	52                   	push   edx
c001f952:	50                   	push   eax
c001f953:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f957:	2d e8 00 00 00       	sub    eax,0xe8
c001f95c:	e9 19 01 00 00       	jmp    c001fa7a <Vm::x87Handler(regs*)+0x65f>
c001f961:	8d 50 38             	lea    edx,[eax+0x38]
c001f964:	80 fa 07             	cmp    dl,0x7
c001f967:	77 37                	ja     c001f9a0 <Vm::x87Handler(regs*)+0x585>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	2d c8 00 00 00       	sub    eax,0xc8
c001f971:	50                   	push   eax
c001f972:	e8 67 f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f977:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f97e:	89 c6                	mov    esi,eax
c001f980:	89 d7                	mov    edi,edx
c001f982:	e8 57 f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f987:	57                   	push   edi
c001f988:	56                   	push   esi
c001f989:	52                   	push   edx
c001f98a:	50                   	push   eax
c001f98b:	e8 fd f8 ff ff       	call   c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f990:	83 c4 1c             	add    esp,0x1c
c001f993:	52                   	push   edx
c001f994:	50                   	push   eax
c001f995:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f999:	2d c8 00 00 00       	sub    eax,0xc8
c001f99e:	eb 7d                	jmp    c001fa1d <Vm::x87Handler(regs*)+0x602>
c001f9a0:	3c f7                	cmp    al,0xf7
c001f9a2:	76 38                	jbe    c001f9dc <Vm::x87Handler(regs*)+0x5c1>
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	6a 00                	push   0x0
c001f9a9:	e8 30 f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f9ae:	89 c6                	mov    esi,eax
c001f9b0:	89 d7                	mov    edi,edx
c001f9b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9b6:	2d f8 00 00 00       	sub    eax,0xf8
c001f9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9be:	e8 1b f9 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f9c3:	57                   	push   edi
c001f9c4:	56                   	push   esi
c001f9c5:	52                   	push   edx
c001f9c6:	50                   	push   eax
c001f9c7:	e8 e0 f8 ff ff       	call   c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f9cc:	83 c4 1c             	add    esp,0x1c
c001f9cf:	52                   	push   edx
c001f9d0:	50                   	push   eax
c001f9d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9d5:	2d f8 00 00 00       	sub    eax,0xf8
c001f9da:	eb 41                	jmp    c001fa1d <Vm::x87Handler(regs*)+0x602>
c001f9dc:	8d 50 10             	lea    edx,[eax+0x10]
c001f9df:	80 fa 07             	cmp    dl,0x7
c001f9e2:	0f 87 5a 01 00 00    	ja     c001fb42 <Vm::x87Handler(regs*)+0x727>
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	2d f0 00 00 00       	sub    eax,0xf0
c001f9f0:	50                   	push   eax
c001f9f1:	e8 e8 f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001f9f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9fd:	89 c6                	mov    esi,eax
c001f9ff:	89 d7                	mov    edi,edx
c001fa01:	e8 d8 f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fa06:	57                   	push   edi
c001fa07:	56                   	push   esi
c001fa08:	52                   	push   edx
c001fa09:	50                   	push   eax
c001fa0a:	e8 9d f8 ff ff       	call   c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa0f:	83 c4 1c             	add    esp,0x1c
c001fa12:	52                   	push   edx
c001fa13:	50                   	push   eax
c001fa14:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa18:	2d f0 00 00 00       	sub    eax,0xf0
c001fa1d:	50                   	push   eax
c001fa1e:	e8 fe f8 ff ff       	call   c001f321 <Vm::fpuSetReg(int, unsigned long long)>
c001fa23:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa27:	e8 9d f9 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fa2c:	e9 5e fa ff ff       	jmp    c001f48f <Vm::x87Handler(regs*)+0x74>
c001fa31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa35:	8d 50 30             	lea    edx,[eax+0x30]
c001fa38:	80 fa 07             	cmp    dl,0x7
c001fa3b:	77 1d                	ja     c001fa5a <Vm::x87Handler(regs*)+0x63f>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	6a 00                	push   0x0
c001fa42:	e8 97 f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fa47:	83 c4 0c             	add    esp,0xc
c001fa4a:	52                   	push   edx
c001fa4b:	50                   	push   eax
c001fa4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa50:	2d d0 00 00 00       	sub    eax,0xd0
c001fa55:	e9 f3 fd ff ff       	jmp    c001f84d <Vm::x87Handler(regs*)+0x432>
c001fa5a:	8d 50 28             	lea    edx,[eax+0x28]
c001fa5d:	80 fa 07             	cmp    dl,0x7
c001fa60:	77 28                	ja     c001fa8a <Vm::x87Handler(regs*)+0x66f>
c001fa62:	83 ec 0c             	sub    esp,0xc
c001fa65:	6a 00                	push   0x0
c001fa67:	e8 72 f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fa6c:	83 c4 0c             	add    esp,0xc
c001fa6f:	52                   	push   edx
c001fa70:	50                   	push   eax
c001fa71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa75:	2d d8 00 00 00       	sub    eax,0xd8
c001fa7a:	50                   	push   eax
c001fa7b:	e8 a1 f8 ff ff       	call   c001f321 <Vm::fpuSetReg(int, unsigned long long)>
c001fa80:	e8 44 f9 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fa85:	e9 01 fa ff ff       	jmp    c001f48b <Vm::x87Handler(regs*)+0x70>
c001fa8a:	8d 50 20             	lea    edx,[eax+0x20]
c001fa8d:	80 fa 07             	cmp    dl,0x7
c001fa90:	77 30                	ja     c001fac2 <Vm::x87Handler(regs*)+0x6a7>
c001fa92:	83 ec 0c             	sub    esp,0xc
c001fa95:	2d e0 00 00 00       	sub    eax,0xe0
c001fa9a:	50                   	push   eax
c001fa9b:	e8 3e f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001faa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001faa7:	89 c6                	mov    esi,eax
c001faa9:	89 d7                	mov    edi,edx
c001faab:	e8 2e f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fab0:	57                   	push   edi
c001fab1:	56                   	push   esi
c001fab2:	52                   	push   edx
c001fab3:	50                   	push   eax
c001fab4:	e8 48 f7 ff ff       	call   c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fab9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fabd:	e9 54 02 00 00       	jmp    c001fd16 <Vm::x87Handler(regs*)+0x8fb>
c001fac2:	8d 50 18             	lea    edx,[eax+0x18]
c001fac5:	80 fa 07             	cmp    dl,0x7
c001fac8:	0f 87 43 fb ff ff    	ja     c001f611 <Vm::x87Handler(regs*)+0x1f6>
c001face:	83 ec 0c             	sub    esp,0xc
c001fad1:	2d e8 00 00 00       	sub    eax,0xe8
c001fad6:	50                   	push   eax
c001fad7:	e8 02 f8 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fadc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fae3:	89 c6                	mov    esi,eax
c001fae5:	89 d7                	mov    edi,edx
c001fae7:	e8 f2 f7 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001faec:	57                   	push   edi
c001faed:	56                   	push   esi
c001faee:	52                   	push   edx
c001faef:	50                   	push   eax
c001faf0:	e8 0c f7 ff ff       	call   c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001faf5:	83 c4 20             	add    esp,0x20
c001faf8:	e8 cc f8 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fafd:	eb 62                	jmp    c001fb61 <Vm::x87Handler(regs*)+0x746>
c001faff:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fb03:	0f 85 0f 01 00 00    	jne    c001fc18 <Vm::x87Handler(regs*)+0x7fd>
c001fb09:	83 ec 0c             	sub    esp,0xc
c001fb0c:	6a 01                	push   0x1
c001fb0e:	e8 cb f7 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fb13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb1a:	89 c6                	mov    esi,eax
c001fb1c:	89 d7                	mov    edi,edx
c001fb1e:	e8 bb f7 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fb23:	57                   	push   edi
c001fb24:	56                   	push   esi
c001fb25:	52                   	push   edx
c001fb26:	50                   	push   eax
c001fb27:	e8 d5 f6 ff ff       	call   c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb2c:	83 c4 20             	add    esp,0x20
c001fb2f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb33:	e8 91 f8 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fb38:	e8 8c f8 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fb3d:	e9 50 f9 ff ff       	jmp    c001f492 <Vm::x87Handler(regs*)+0x77>
c001fb42:	3c d9                	cmp    al,0xd9
c001fb44:	0f 85 b5 02 00 00    	jne    c001fdff <Vm::x87Handler(regs*)+0x9e4>
c001fb4a:	eb bd                	jmp    c001fb09 <Vm::x87Handler(regs*)+0x6ee>
c001fb4c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fb50:	0f 85 ea 02 00 00    	jne    c001fe40 <Vm::x87Handler(regs*)+0xa25>
c001fb56:	0f b7 05 20 10 03 c0 	movzx  eax,WORD PTR ds:0xc0031020
c001fb5d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fb61:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb65:	e9 28 f9 ff ff       	jmp    c001f492 <Vm::x87Handler(regs*)+0x77>
c001fb6a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb6e:	84 d2                	test   dl,dl
c001fb70:	75 0f                	jne    c001fb81 <Vm::x87Handler(regs*)+0x766>
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	ff 36                	push   DWORD PTR [esi]
c001fb77:	e8 b1 f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fb7c:	e9 2c 01 00 00       	jmp    c001fcad <Vm::x87Handler(regs*)+0x892>
c001fb81:	80 fa 01             	cmp    dl,0x1
c001fb84:	75 0f                	jne    c001fb95 <Vm::x87Handler(regs*)+0x77a>
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	ff 36                	push   DWORD PTR [esi]
c001fb8b:	e8 9d f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fb90:	e9 81 02 00 00       	jmp    c001fe16 <Vm::x87Handler(regs*)+0x9fb>
c001fb95:	80 fa 04             	cmp    dl,0x4
c001fb98:	75 0f                	jne    c001fba9 <Vm::x87Handler(regs*)+0x78e>
c001fb9a:	83 ec 0c             	sub    esp,0xc
c001fb9d:	ff 36                	push   DWORD PTR [esi]
c001fb9f:	e8 89 f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fba4:	e9 86 01 00 00       	jmp    c001fd2f <Vm::x87Handler(regs*)+0x914>
c001fba9:	80 fa 05             	cmp    dl,0x5
c001fbac:	75 1b                	jne    c001fbc9 <Vm::x87Handler(regs*)+0x7ae>
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	6a 00                	push   0x0
c001fbb3:	e8 26 f7 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fbb8:	89 c7                	mov    edi,eax
c001fbba:	89 d5                	mov    ebp,edx
c001fbbc:	58                   	pop    eax
c001fbbd:	ff 36                	push   DWORD PTR [esi]
c001fbbf:	e8 69 f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fbc4:	e9 a3 01 00 00       	jmp    c001fd6c <Vm::x87Handler(regs*)+0x951>
c001fbc9:	80 fa 06             	cmp    dl,0x6
c001fbcc:	75 0f                	jne    c001fbdd <Vm::x87Handler(regs*)+0x7c2>
c001fbce:	83 ec 0c             	sub    esp,0xc
c001fbd1:	ff 36                	push   DWORD PTR [esi]
c001fbd3:	e8 55 f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fbd8:	e9 ae 01 00 00       	jmp    c001fd8b <Vm::x87Handler(regs*)+0x970>
c001fbdd:	31 c0                	xor    eax,eax
c001fbdf:	80 fa 07             	cmp    dl,0x7
c001fbe2:	0f 85 94 02 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	6a 00                	push   0x0
c001fbed:	e8 ec f6 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fbf2:	89 c7                	mov    edi,eax
c001fbf4:	89 d5                	mov    ebp,edx
c001fbf6:	58                   	pop    eax
c001fbf7:	ff 36                	push   DWORD PTR [esi]
c001fbf9:	e8 2f f4 ff ff       	call   c001f02d <Vm::fpu32ToInternal(unsigned int)>
c001fbfe:	e9 cb 01 00 00       	jmp    c001fdce <Vm::x87Handler(regs*)+0x9b3>
c001fc03:	80 fa 03             	cmp    dl,0x3
c001fc06:	0f 85 d3 01 00 00    	jne    c001fddf <Vm::x87Handler(regs*)+0x9c4>
c001fc0c:	e8 b8 f7 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fc11:	51                   	push   ecx
c001fc12:	51                   	push   ecx
c001fc13:	e9 de 01 00 00       	jmp    c001fdf6 <Vm::x87Handler(regs*)+0x9db>
c001fc18:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc1c:	80 fa 01             	cmp    dl,0x1
c001fc1f:	75 09                	jne    c001fc2a <Vm::x87Handler(regs*)+0x80f>
c001fc21:	57                   	push   edi
c001fc22:	57                   	push   edi
c001fc23:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc25:	e9 e3 01 00 00       	jmp    c001fe0d <Vm::x87Handler(regs*)+0x9f2>
c001fc2a:	80 fa 04             	cmp    dl,0x4
c001fc2d:	75 12                	jne    c001fc41 <Vm::x87Handler(regs*)+0x826>
c001fc2f:	31 d2                	xor    edx,edx
c001fc31:	51                   	push   ecx
c001fc32:	51                   	push   ecx
c001fc33:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc35:	52                   	push   edx
c001fc36:	50                   	push   eax
c001fc37:	e8 d0 f4 ff ff       	call   c001f10c <Vm::fpuLongToFloat(long long)>
c001fc3c:	e9 ee 00 00 00       	jmp    c001fd2f <Vm::x87Handler(regs*)+0x914>
c001fc41:	31 c0                	xor    eax,eax
c001fc43:	80 fa 07             	cmp    dl,0x7
c001fc46:	0f 85 30 02 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	6a 00                	push   0x0
c001fc51:	e8 88 f6 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fc56:	89 c7                	mov    edi,eax
c001fc58:	89 d5                	mov    ebp,edx
c001fc5a:	58                   	pop    eax
c001fc5b:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc5d:	5a                   	pop    edx
c001fc5e:	31 d2                	xor    edx,edx
c001fc60:	52                   	push   edx
c001fc61:	50                   	push   eax
c001fc62:	e8 a5 f4 ff ff       	call   c001f10c <Vm::fpuLongToFloat(long long)>
c001fc67:	e9 62 01 00 00       	jmp    c001fdce <Vm::x87Handler(regs*)+0x9b3>
c001fc6c:	84 d2                	test   dl,dl
c001fc6e:	75 0d                	jne    c001fc7d <Vm::x87Handler(regs*)+0x862>
c001fc70:	31 d2                	xor    edx,edx
c001fc72:	55                   	push   ebp
c001fc73:	55                   	push   ebp
c001fc74:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc76:	52                   	push   edx
c001fc77:	50                   	push   eax
c001fc78:	e9 d3 01 00 00       	jmp    c001fe50 <Vm::x87Handler(regs*)+0xa35>
c001fc7d:	31 c0                	xor    eax,eax
c001fc7f:	80 fa 02             	cmp    dl,0x2
c001fc82:	0f 85 f4 01 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fc88:	83 ec 0c             	sub    esp,0xc
c001fc8b:	6a 00                	push   0x0
c001fc8d:	e8 4c f6 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fc92:	59                   	pop    ecx
c001fc93:	5f                   	pop    edi
c001fc94:	e9 6a f9 ff ff       	jmp    c001f603 <Vm::x87Handler(regs*)+0x1e8>
c001fc99:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc9d:	84 d2                	test   dl,dl
c001fc9f:	75 2a                	jne    c001fccb <Vm::x87Handler(regs*)+0x8b0>
c001fca1:	50                   	push   eax
c001fca2:	50                   	push   eax
c001fca3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fca6:	ff 36                	push   DWORD PTR [esi]
c001fca8:	e8 c5 f3 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fcad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb4:	89 c6                	mov    esi,eax
c001fcb6:	89 d7                	mov    edi,edx
c001fcb8:	e8 21 f6 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fcbd:	57                   	push   edi
c001fcbe:	56                   	push   esi
c001fcbf:	52                   	push   edx
c001fcc0:	50                   	push   eax
c001fcc1:	e8 8e f5 ff ff       	call   c001f254 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcc6:	e9 64 01 00 00       	jmp    c001fe2f <Vm::x87Handler(regs*)+0xa14>
c001fccb:	80 fa 01             	cmp    dl,0x1
c001fcce:	75 11                	jne    c001fce1 <Vm::x87Handler(regs*)+0x8c6>
c001fcd0:	50                   	push   eax
c001fcd1:	50                   	push   eax
c001fcd2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcd5:	ff 36                	push   DWORD PTR [esi]
c001fcd7:	e8 96 f3 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fcdc:	e9 35 01 00 00       	jmp    c001fe16 <Vm::x87Handler(regs*)+0x9fb>
c001fce1:	80 fa 02             	cmp    dl,0x2
c001fce4:	0f 85 54 f9 ff ff    	jne    c001f63e <Vm::x87Handler(regs*)+0x223>
c001fcea:	55                   	push   ebp
c001fceb:	55                   	push   ebp
c001fcec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcef:	ff 36                	push   DWORD PTR [esi]
c001fcf1:	e8 7c f3 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fcf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcfd:	89 c6                	mov    esi,eax
c001fcff:	89 d7                	mov    edi,edx
c001fd01:	e8 d8 f5 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fd06:	57                   	push   edi
c001fd07:	56                   	push   esi
c001fd08:	52                   	push   edx
c001fd09:	50                   	push   eax
c001fd0a:	e8 f2 f4 ff ff       	call   c001f201 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd13:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd16:	83 c4 20             	add    esp,0x20
c001fd19:	e9 74 f7 ff ff       	jmp    c001f492 <Vm::x87Handler(regs*)+0x77>
c001fd1e:	80 fa 04             	cmp    dl,0x4
c001fd21:	75 2a                	jne    c001fd4d <Vm::x87Handler(regs*)+0x932>
c001fd23:	51                   	push   ecx
c001fd24:	51                   	push   ecx
c001fd25:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd28:	ff 36                	push   DWORD PTR [esi]
c001fd2a:	e8 43 f3 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fd2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd36:	89 c6                	mov    esi,eax
c001fd38:	89 d7                	mov    edi,edx
c001fd3a:	e8 9f f5 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fd3f:	57                   	push   edi
c001fd40:	56                   	push   esi
c001fd41:	52                   	push   edx
c001fd42:	50                   	push   eax
c001fd43:	e8 36 f5 ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd48:	e9 e2 00 00 00       	jmp    c001fe2f <Vm::x87Handler(regs*)+0xa14>
c001fd4d:	80 fa 05             	cmp    dl,0x5
c001fd50:	75 28                	jne    c001fd7a <Vm::x87Handler(regs*)+0x95f>
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	6a 00                	push   0x0
c001fd57:	e8 82 f5 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fd5c:	89 c7                	mov    edi,eax
c001fd5e:	89 d5                	mov    ebp,edx
c001fd60:	58                   	pop    eax
c001fd61:	5a                   	pop    edx
c001fd62:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd65:	ff 36                	push   DWORD PTR [esi]
c001fd67:	e8 06 f3 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	55                   	push   ebp
c001fd70:	57                   	push   edi
c001fd71:	52                   	push   edx
c001fd72:	50                   	push   eax
c001fd73:	e8 06 f5 ff ff       	call   c001f27e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd78:	eb 60                	jmp    c001fdda <Vm::x87Handler(regs*)+0x9bf>
c001fd7a:	80 fa 06             	cmp    dl,0x6
c001fd7d:	75 2a                	jne    c001fda9 <Vm::x87Handler(regs*)+0x98e>
c001fd7f:	51                   	push   ecx
c001fd80:	51                   	push   ecx
c001fd81:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd84:	ff 36                	push   DWORD PTR [esi]
c001fd86:	e8 e7 f2 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fd8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd92:	89 c6                	mov    esi,eax
c001fd94:	89 d7                	mov    edi,edx
c001fd96:	e8 43 f5 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fd9b:	57                   	push   edi
c001fd9c:	56                   	push   esi
c001fd9d:	52                   	push   edx
c001fd9e:	50                   	push   eax
c001fd9f:	e8 08 f5 ff ff       	call   c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fda4:	e9 86 00 00 00       	jmp    c001fe2f <Vm::x87Handler(regs*)+0xa14>
c001fda9:	31 c0                	xor    eax,eax
c001fdab:	80 fa 07             	cmp    dl,0x7
c001fdae:	0f 85 c8 00 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	6a 00                	push   0x0
c001fdb9:	e8 20 f5 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fdbe:	89 c7                	mov    edi,eax
c001fdc0:	89 d5                	mov    ebp,edx
c001fdc2:	58                   	pop    eax
c001fdc3:	5a                   	pop    edx
c001fdc4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdc7:	ff 36                	push   DWORD PTR [esi]
c001fdc9:	e8 a4 f2 ff ff       	call   c001f072 <Vm::fpu64ToInternal(unsigned long long)>
c001fdce:	83 c4 10             	add    esp,0x10
c001fdd1:	55                   	push   ebp
c001fdd2:	57                   	push   edi
c001fdd3:	52                   	push   edx
c001fdd4:	50                   	push   eax
c001fdd5:	e8 d2 f4 ff ff       	call   c001f2ac <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdda:	83 c4 0c             	add    esp,0xc
c001fddd:	eb 53                	jmp    c001fe32 <Vm::x87Handler(regs*)+0xa17>
c001fddf:	31 c0                	xor    eax,eax
c001fde1:	80 fa 02             	cmp    dl,0x2
c001fde4:	0f 85 92 00 00 00    	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	6a 00                	push   0x0
c001fdef:	e8 ea f4 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fdf4:	59                   	pop    ecx
c001fdf5:	5f                   	pop    edi
c001fdf6:	52                   	push   edx
c001fdf7:	50                   	push   eax
c001fdf8:	e8 27 f2 ff ff       	call   c001f024 <Vm::fpuInternalTo64(unsigned long long)>
c001fdfd:	eb 70                	jmp    c001fe6f <Vm::x87Handler(regs*)+0xa54>
c001fdff:	31 c0                	xor    eax,eax
c001fe01:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fe06:	75 74                	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fe08:	50                   	push   eax
c001fe09:	50                   	push   eax
c001fe0a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fe0d:	31 d2                	xor    edx,edx
c001fe0f:	52                   	push   edx
c001fe10:	50                   	push   eax
c001fe11:	e8 f6 f2 ff ff       	call   c001f10c <Vm::fpuLongToFloat(long long)>
c001fe16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe1d:	89 c6                	mov    esi,eax
c001fe1f:	89 d7                	mov    edi,edx
c001fe21:	e8 b8 f4 ff ff       	call   c001f2de <Vm::fpuGetReg(int)>
c001fe26:	57                   	push   edi
c001fe27:	56                   	push   esi
c001fe28:	52                   	push   edx
c001fe29:	50                   	push   eax
c001fe2a:	e8 5e f4 ff ff       	call   c001f28d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe2f:	83 c4 1c             	add    esp,0x1c
c001fe32:	52                   	push   edx
c001fe33:	50                   	push   eax
c001fe34:	6a 00                	push   0x0
c001fe36:	e8 e6 f4 ff ff       	call   c001f321 <Vm::fpuSetReg(int, unsigned long long)>
c001fe3b:	e9 f2 f7 ff ff       	jmp    c001f632 <Vm::x87Handler(regs*)+0x217>
c001fe40:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe44:	80 fa 05             	cmp    dl,0x5
c001fe47:	75 11                	jne    c001fe5a <Vm::x87Handler(regs*)+0xa3f>
c001fe49:	55                   	push   ebp
c001fe4a:	55                   	push   ebp
c001fe4b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe4e:	ff 36                	push   DWORD PTR [esi]
c001fe50:	e8 81 f2 ff ff       	call   c001f0d6 <Vm::fpuULongToFloat(unsigned long long)>
c001fe55:	e9 cf f7 ff ff       	jmp    c001f629 <Vm::x87Handler(regs*)+0x20e>
c001fe5a:	31 c0                	xor    eax,eax
c001fe5c:	80 fa 07             	cmp    dl,0x7
c001fe5f:	75 1b                	jne    c001fe7c <Vm::x87Handler(regs*)+0xa61>
c001fe61:	e8 63 f5 ff ff       	call   c001f3c9 <Vm::fpuPop()>
c001fe66:	51                   	push   ecx
c001fe67:	51                   	push   ecx
c001fe68:	52                   	push   edx
c001fe69:	50                   	push   eax
c001fe6a:	e8 0c f2 ff ff       	call   c001f07b <Vm::fpuFloatToLong(unsigned long long)>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	89 06                	mov    DWORD PTR [esi],eax
c001fe74:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fe77:	e9 f8 f7 ff ff       	jmp    c001f674 <Vm::x87Handler(regs*)+0x259>
c001fe7c:	83 c4 1c             	add    esp,0x1c
c001fe7f:	5b                   	pop    ebx
c001fe80:	5e                   	pop    esi
c001fe81:	5f                   	pop    edi
c001fe82:	5d                   	pop    ebp
c001fe83:	c3                   	ret    

c001fe84 <__static_initialization_and_destruction_0(int, int)>:
c001fe84:	83 ec 0c             	sub    esp,0xc
c001fe87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fe8c:	75 1a                	jne    c001fea8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fe96:	75 10                	jne    c001fea8 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	68 20 10 03 c0       	push   0xc0031020
c001fea0:	e8 05 8d 00 00       	call   c0028baa <Vm::_FPUState::_FPUState()>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	90                   	nop
c001fea9:	83 c4 0c             	add    esp,0xc
c001feac:	c3                   	ret    

c001fead <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fead:	83 ec 0c             	sub    esp,0xc
c001feb0:	83 ec 08             	sub    esp,0x8
c001feb3:	68 ff ff 00 00       	push   0xffff
c001feb8:	6a 01                	push   0x1
c001feba:	e8 c5 ff ff ff       	call   c001fe84 <__static_initialization_and_destruction_0(int, int)>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	83 c4 0c             	add    esp,0xc
c001fec5:	c3                   	ret    

c001fec6 <FAT::getName()>:
c001fec6:	b8 10 bf 02 c0       	mov    eax,0xc002bf10
c001fecb:	c3                   	ret    

c001fecc <FAT::tell(void*, unsigned long long*)>:
c001fecc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fed1:	75 06                	jne    c001fed9 <FAT::tell(void*, unsigned long long*)+0xd>
c001fed3:	b8 04 00 00 00       	mov    eax,0x4
c001fed8:	c3                   	ret    
c001fed9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fede:	75 06                	jne    c001fee6 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fee0:	b8 04 00 00 00       	mov    eax,0x4
c001fee5:	c3                   	ret    
c001fee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feea:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001feed:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fef0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fef4:	89 01                	mov    DWORD PTR [ecx],eax
c001fef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fef9:	b8 00 00 00 00       	mov    eax,0x0
c001fefe:	c3                   	ret    
c001feff:	90                   	nop

c001ff00 <FAT::stat(void*, unsigned long long*)>:
c001ff00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff05:	75 06                	jne    c001ff0d <FAT::stat(void*, unsigned long long*)+0xd>
c001ff07:	b8 04 00 00 00       	mov    eax,0x4
c001ff0c:	c3                   	ret    
c001ff0d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff12:	75 06                	jne    c001ff1a <FAT::stat(void*, unsigned long long*)+0x1a>
c001ff14:	b8 04 00 00 00       	mov    eax,0x4
c001ff19:	c3                   	ret    
c001ff1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ff21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ff24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff28:	89 01                	mov    DWORD PTR [ecx],eax
c001ff2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ff2d:	b8 00 00 00 00       	mov    eax,0x0
c001ff32:	c3                   	ret    
c001ff33:	90                   	nop

c001ff34 <FAT::~FAT()>:
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	ba 5c bf 02 c0       	mov    edx,0xc002bf5c
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	89 10                	mov    DWORD PTR [eax],edx
c001ff42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	50                   	push   eax
c001ff4a:	e8 3f 2b ff ff       	call   c0012a8e <Filesystem::~Filesystem()>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	90                   	nop
c001ff53:	83 c4 0c             	add    esp,0xc
c001ff56:	c3                   	ret    
c001ff57:	90                   	nop

c001ff58 <FAT::~FAT()>:
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	83 ec 0c             	sub    esp,0xc
c001ff5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff62:	e8 cd ff ff ff       	call   c001ff34 <FAT::~FAT()>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	83 ec 08             	sub    esp,0x8
c001ff6d:	6a 08                	push   0x8
c001ff6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff73:	e8 0f 27 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c001ff78:	83 c4 10             	add    esp,0x10
c001ff7b:	83 c4 0c             	add    esp,0xc
c001ff7e:	c3                   	ret    
c001ff7f:	90                   	nop

c001ff80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ff80:	83 ec 1c             	sub    esp,0x1c
c001ff83:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ff8a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ff8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff93:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001ff9a:	83 f8 ff             	cmp    eax,0xffffffff
c001ff9d:	75 34                	jne    c001ffd3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ff9f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ffa3:	88 c2                	mov    dl,al
c001ffa5:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001ffaa:	01 d0                	add    eax,edx
c001ffac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ffb0:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c001ffb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffba:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c001ffc1:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001ffc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ffca:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c001ffd1:	eb 17                	jmp    c001ffea <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ffd3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ffd7:	88 c2                	mov    dl,al
c001ffd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffdd:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c001ffe4:	01 d0                	add    eax,edx
c001ffe6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ffea:	83 ec 04             	sub    esp,0x4
c001ffed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fff5:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fff9:	50                   	push   eax
c001fffa:	e8 ff 6c fe ff       	call   c0006cfe <f_getlabel>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020006:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002000b:	75 07                	jne    c0020014 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002000d:	b8 00 00 00 00       	mov    eax,0x0
c0020012:	eb 05                	jmp    c0020019 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020014:	b8 01 00 00 00       	mov    eax,0x1
c0020019:	83 c4 1c             	add    esp,0x1c
c002001c:	c3                   	ret    
c002001d:	90                   	nop

c002001e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002001e:	57                   	push   edi
c002001f:	83 ec 58             	sub    esp,0x58
c0020022:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002002a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002002e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020033:	b8 00 00 00 00       	mov    eax,0x0
c0020038:	fc                   	cld    
c0020039:	89 d7                	mov    edi,edx
c002003b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002003d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020041:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c0020048:	83 f8 ff             	cmp    eax,0xffffffff
c002004b:	75 34                	jne    c0020081 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002004d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020051:	88 c2                	mov    dl,al
c0020053:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c0020058:	01 d0                	add    eax,edx
c002005a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002005e:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c0020064:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020068:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c002006f:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c0020074:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020078:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c002007f:	eb 17                	jmp    c0020098 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020081:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020085:	88 c2                	mov    dl,al
c0020087:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002008b:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c0020092:	01 d0                	add    eax,edx
c0020094:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020098:	83 ec 08             	sub    esp,0x8
c002009b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002009f:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200a3:	50                   	push   eax
c00200a4:	e8 a3 08 fe ff       	call   c000094c <strcat>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	83 ec 0c             	sub    esp,0xc
c00200af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200b3:	50                   	push   eax
c00200b4:	e8 33 6e fe ff       	call   c0006eec <f_setlabel>
c00200b9:	83 c4 10             	add    esp,0x10
c00200bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00200c0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00200c5:	75 07                	jne    c00200ce <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00200c7:	b8 00 00 00 00       	mov    eax,0x0
c00200cc:	eb 05                	jmp    c00200d3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00200ce:	b8 01 00 00 00       	mov    eax,0x1
c00200d3:	83 c4 58             	add    esp,0x58
c00200d6:	5f                   	pop    edi
c00200d7:	c3                   	ret    

c00200d8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00200d8:	83 ec 2c             	sub    esp,0x2c
c00200db:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00200e3:	83 ec 08             	sub    esp,0x8
c00200e6:	68 34 bf 02 c0       	push   0xc002bf34
c00200eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200ef:	e8 a4 07 fe ff       	call   c0000898 <strcmp>
c00200f4:	83 c4 10             	add    esp,0x10
c00200f7:	85 c0                	test   eax,eax
c00200f9:	0f 94 c0             	sete   al
c00200fc:	84 c0                	test   al,al
c00200fe:	74 0d                	je     c002010d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020100:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020108:	e9 a6 00 00 00       	jmp    c00201b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002010d:	83 ec 08             	sub    esp,0x8
c0020110:	68 26 bf 02 c0       	push   0xc002bf26
c0020115:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020119:	e8 7a 07 fe ff       	call   c0000898 <strcmp>
c002011e:	83 c4 10             	add    esp,0x10
c0020121:	85 c0                	test   eax,eax
c0020123:	0f 94 c0             	sete   al
c0020126:	84 c0                	test   al,al
c0020128:	74 0a                	je     c0020134 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002012a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020132:	eb 7f                	jmp    c00201b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020134:	83 ec 08             	sub    esp,0x8
c0020137:	68 2c bf 02 c0       	push   0xc002bf2c
c002013c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020140:	e8 53 07 fe ff       	call   c0000898 <strcmp>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	85 c0                	test   eax,eax
c002014a:	0f 94 c0             	sete   al
c002014d:	84 c0                	test   al,al
c002014f:	74 0a                	je     c002015b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020151:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020159:	eb 58                	jmp    c00201b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002015b:	83 ec 08             	sub    esp,0x8
c002015e:	68 0c 93 02 c0       	push   0xc002930c
c0020163:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020167:	e8 2c 07 fe ff       	call   c0000898 <strcmp>
c002016c:	83 c4 10             	add    esp,0x10
c002016f:	85 c0                	test   eax,eax
c0020171:	0f 94 c0             	sete   al
c0020174:	84 c0                	test   al,al
c0020176:	74 0a                	je     c0020182 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020178:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020180:	eb 31                	jmp    c00201b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020182:	83 ec 08             	sub    esp,0x8
c0020185:	68 32 bf 02 c0       	push   0xc002bf32
c002018a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002018e:	e8 05 07 fe ff       	call   c0000898 <strcmp>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	85 c0                	test   eax,eax
c0020198:	0f 94 c0             	sete   al
c002019b:	84 c0                	test   al,al
c002019d:	74 0a                	je     c00201a9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002019f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00201a7:	eb 0a                	jmp    c00201b3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201a9:	b8 08 00 00 00       	mov    eax,0x8
c00201ae:	e9 df 00 00 00       	jmp    c0020292 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201b3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00201ba:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00201bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201c3:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c00201ca:	83 f8 ff             	cmp    eax,0xffffffff
c00201cd:	75 34                	jne    c0020203 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00201cf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00201d3:	88 c2                	mov    dl,al
c00201d5:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c00201da:	01 d0                	add    eax,edx
c00201dc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00201e0:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c00201e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201ea:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c00201f1:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c00201f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00201fa:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c0020201:	eb 17                	jmp    c002021a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020203:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020207:	88 c2                	mov    dl,al
c0020209:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002020d:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c0020214:	01 d0                	add    eax,edx
c0020216:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002021a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002021e:	88 04 24             	mov    BYTE PTR [esp],al
c0020221:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020225:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020229:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020231:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020236:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	68 00 20 00 00       	push   0x2000
c0020246:	e8 4e f3 fe ff       	call   c000f599 <malloc>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020252:	68 00 20 00 00       	push   0x2000
c0020257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002025f:	50                   	push   eax
c0020260:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020264:	50                   	push   eax
c0020265:	e8 cd 70 fe ff       	call   c0007337 <f_mkfs>
c002026a:	83 c4 10             	add    esp,0x10
c002026d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020271:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020276:	75 07                	jne    c002027f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020278:	b8 00 00 00 00       	mov    eax,0x0
c002027d:	eb 13                	jmp    c0020292 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002027f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020284:	75 07                	jne    c002028d <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020286:	b8 09 00 00 00       	mov    eax,0x9
c002028b:	eb 05                	jmp    c0020292 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002028d:	b8 01 00 00 00       	mov    eax,0x1
c0020292:	83 c4 2c             	add    esp,0x2c
c0020295:	c3                   	ret    

c0020296 <FAT::tryMount(LogicalDisk*, int)>:
c0020296:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002029c:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c00202a1:	83 f8 14             	cmp    eax,0x14
c00202a4:	75 17                	jne    c00202bd <FAT::tryMount(LogicalDisk*, int)+0x27>
c00202a6:	83 ec 0c             	sub    esp,0xc
c00202a9:	68 38 bf 02 c0       	push   0xc002bf38
c00202ae:	e8 18 9c ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00202b3:	83 c4 10             	add    esp,0x10
c00202b6:	b0 00                	mov    al,0x0
c00202b8:	e9 d7 01 00 00       	jmp    c0020494 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202bd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00202c4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00202ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00202d0:	3d 00 02 00 00       	cmp    eax,0x200
c00202d5:	74 07                	je     c00202de <FAT::tryMount(LogicalDisk*, int)+0x48>
c00202d7:	b0 00                	mov    al,0x0
c00202d9:	e9 b6 01 00 00       	jmp    c0020494 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202de:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00202e6:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202ed:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c00202f4:	83 f8 ff             	cmp    eax,0xffffffff
c00202f7:	74 07                	je     c0020300 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00202f9:	b0 01                	mov    al,0x1
c00202fb:	e9 94 01 00 00       	jmp    c0020494 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020300:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002030a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020312:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020319:	88 c2                	mov    dl,al
c002031b:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c0020320:	01 d0                	add    eax,edx
c0020322:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020329:	8b 15 80 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031080
c002032f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020336:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c002033d:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c0020342:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020349:	89 14 85 20 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceee0],edx
c0020350:	83 ec 0c             	sub    esp,0xc
c0020353:	68 54 02 00 00       	push   0x254
c0020358:	e8 3c f2 fe ff       	call   c000f599 <malloc>
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020367:	83 ec 04             	sub    esp,0x4
c002036a:	6a 00                	push   0x0
c002036c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020373:	50                   	push   eax
c0020374:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002037b:	e8 75 4b fe ff       	call   c0004ef5 <f_mount>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002038a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020392:	74 19                	je     c00203ad <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020394:	83 ec 0c             	sub    esp,0xc
c0020397:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002039e:	e8 16 f2 fe ff       	call   c000f5b9 <rfree>
c00203a3:	83 c4 10             	add    esp,0x10
c00203a6:	b0 00                	mov    al,0x0
c00203a8:	e9 e7 00 00 00       	jmp    c0020494 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ad:	83 ec 04             	sub    esp,0x4
c00203b0:	68 00 01 00 00       	push   0x100
c00203b5:	6a 00                	push   0x0
c00203b7:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203be:	50                   	push   eax
c00203bf:	e8 8c 03 fe ff       	call   c0000750 <memset>
c00203c4:	83 c4 10             	add    esp,0x10
c00203c7:	83 ec 08             	sub    esp,0x8
c00203ca:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203d1:	50                   	push   eax
c00203d2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203d9:	50                   	push   eax
c00203da:	e8 6d 05 fe ff       	call   c000094c <strcat>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 ec 08             	sub    esp,0x8
c00203e5:	68 46 bf 02 c0       	push   0xc002bf46
c00203ea:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203f1:	50                   	push   eax
c00203f2:	e8 55 05 fe ff       	call   c000094c <strcat>
c00203f7:	83 c4 10             	add    esp,0x10
c00203fa:	83 ec 04             	sub    esp,0x4
c00203fd:	6a 01                	push   0x1
c00203ff:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020406:	50                   	push   eax
c0020407:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002040b:	50                   	push   eax
c002040c:	e8 46 4b fe ff       	call   c0004f57 <f_open>
c0020411:	83 c4 10             	add    esp,0x10
c0020414:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002041b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020422:	85 c0                	test   eax,eax
c0020424:	74 0a                	je     c0020430 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020426:	78 2d                	js     c0020455 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020428:	83 e8 04             	sub    eax,0x4
c002042b:	83 f8 01             	cmp    eax,0x1
c002042e:	77 25                	ja     c0020455 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020430:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002043f:	50                   	push   eax
c0020440:	e8 64 56 fe ff       	call   c0005aa9 <f_close>
c0020445:	83 c4 10             	add    esp,0x10
c0020448:	90                   	nop
c0020449:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020451:	74 3a                	je     c002048d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020453:	eb 2d                	jmp    c0020482 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020455:	83 ec 0c             	sub    esp,0xc
c0020458:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002045f:	e8 55 f1 fe ff       	call   c000f5b9 <rfree>
c0020464:	83 c4 10             	add    esp,0x10
c0020467:	83 ec 04             	sub    esp,0x4
c002046a:	6a 00                	push   0x0
c002046c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020473:	50                   	push   eax
c0020474:	6a 00                	push   0x0
c0020476:	e8 7a 4a fe ff       	call   c0004ef5 <f_mount>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	b0 00                	mov    al,0x0
c0020480:	eb 12                	jmp    c0020494 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020482:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c0020487:	40                   	inc    eax
c0020488:	a3 80 10 03 c0       	mov    ds:0xc0031080,eax
c002048d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020494:	81 c4 6c 03 00 00    	add    esp,0x36c
c002049a:	c3                   	ret    
c002049b:	90                   	nop

c002049c <FAT::getFileFirstSector(char const*)>:
c002049c:	53                   	push   ebx
c002049d:	83 ec 28             	sub    esp,0x28
c00204a0:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00204a8:	83 ec 0c             	sub    esp,0xc
c00204ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204af:	e8 e5 f0 fe ff       	call   c000f599 <malloc>
c00204b4:	83 c4 10             	add    esp,0x10
c00204b7:	89 c3                	mov    ebx,eax
c00204b9:	a1 b0 0f 03 c0       	mov    eax,ds:0xc0030fb0
c00204be:	83 ec 04             	sub    esp,0x4
c00204c1:	50                   	push   eax
c00204c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204c6:	53                   	push   ebx
c00204c7:	e8 f2 27 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c00204cc:	83 c4 10             	add    esp,0x10
c00204cf:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00204d3:	83 ec 08             	sub    esp,0x8
c00204d6:	6a 01                	push   0x1
c00204d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00204dc:	e8 41 28 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c00204e1:	83 c4 10             	add    esp,0x10
c00204e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ea:	83 c0 0c             	add    eax,0xc
c00204ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ef:	83 ec 0c             	sub    esp,0xc
c00204f2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00204f6:	52                   	push   edx
c00204f7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00204fb:	52                   	push   edx
c00204fc:	6a 00                	push   0x0
c00204fe:	6a 04                	push   0x4
c0020500:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020504:	ff d0                	call   eax
c0020506:	83 c4 20             	add    esp,0x20
c0020509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002050d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020517:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002051b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002051e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020521:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002052c:	e8 4f 28 ff ff       	call   c0012d80 <File::close()>
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020538:	ba 00 00 00 00       	mov    edx,0x0
c002053d:	83 c4 28             	add    esp,0x28
c0020540:	5b                   	pop    ebx
c0020541:	c3                   	ret    

c0020542 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020542:	57                   	push   edi
c0020543:	56                   	push   esi
c0020544:	53                   	push   ebx
c0020545:	81 ec 50 02 00 00    	sub    esp,0x250
c002054b:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020553:	74 0a                	je     c002055f <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020555:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c002055d:	75 0a                	jne    c0020569 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c002055f:	b8 04 00 00 00       	mov    eax,0x4
c0020564:	e9 29 01 00 00       	jmp    c0020692 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020569:	83 ec 08             	sub    esp,0x8
c002056c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020573:	50                   	push   eax
c0020574:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002057b:	e8 33 5b fe ff       	call   c00060b3 <f_readdir>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002058a:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020591:	83 ec 0c             	sub    esp,0xc
c0020594:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002059b:	83 c0 1a             	add    eax,0x1a
c002059e:	50                   	push   eax
c002059f:	e8 c8 01 fe ff       	call   c000076c <strlen>
c00205a4:	83 c4 10             	add    esp,0x10
c00205a7:	ba 00 00 00 00       	mov    edx,0x0
c00205ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00205b4:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00205bb:	0f b6 c0             	movzx  eax,al
c00205be:	83 e0 10             	and    eax,0x10
c00205c1:	74 07                	je     c00205ca <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00205c3:	b8 02 00 00 00       	mov    eax,0x2
c00205c8:	eb 05                	jmp    c00205cf <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00205ca:	b8 01 00 00 00       	mov    eax,0x1
c00205cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00205d3:	83 ec 08             	sub    esp,0x8
c00205d6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00205dd:	83 c0 1a             	add    eax,0x1a
c00205e0:	50                   	push   eax
c00205e1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00205e5:	83 c0 10             	add    eax,0x10
c00205e8:	50                   	push   eax
c00205e9:	e8 1e 02 fe ff       	call   c000080c <strcpy>
c00205ee:	83 c4 10             	add    esp,0x10
c00205f1:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00205f8:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00205ff:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020603:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002060a:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020611:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020618:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002061f:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020626:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002062d:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020634:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002063b:	89 c6                	mov    esi,eax
c002063d:	89 d7                	mov    edi,edx
c002063f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020641:	89 c8                	mov    eax,ecx
c0020643:	89 fa                	mov    edx,edi
c0020645:	89 f3                	mov    ebx,esi
c0020647:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002064e:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020655:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002065c:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020663:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020669:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020670:	84 c0                	test   al,al
c0020672:	75 07                	jne    c002067b <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020674:	b8 07 00 00 00       	mov    eax,0x7
c0020679:	eb 17                	jmp    c0020692 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002067b:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020682:	85 c0                	test   eax,eax
c0020684:	75 07                	jne    c002068d <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020686:	b8 00 00 00 00       	mov    eax,0x0
c002068b:	eb 05                	jmp    c0020692 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002068d:	b8 01 00 00 00       	mov    eax,0x1
c0020692:	81 c4 50 02 00 00    	add    esp,0x250
c0020698:	5b                   	pop    ebx
c0020699:	5e                   	pop    esi
c002069a:	5f                   	pop    edi
c002069b:	c3                   	ret    

c002069c <FAT::read(void*, unsigned long, void*, int*)>:
c002069c:	83 ec 1c             	sub    esp,0x1c
c002069f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206a4:	74 07                	je     c00206ad <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00206a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206ab:	75 07                	jne    c00206b4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00206ad:	b8 04 00 00 00       	mov    eax,0x4
c00206b2:	eb 3d                	jmp    c00206f1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206b4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206b8:	50                   	push   eax
c00206b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206c5:	e8 c9 4c fe ff       	call   c0005393 <f_read>
c00206ca:	83 c4 10             	add    esp,0x10
c00206cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206d5:	89 c2                	mov    edx,eax
c00206d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00206db:	89 10                	mov    DWORD PTR [eax],edx
c00206dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206e1:	85 c0                	test   eax,eax
c00206e3:	75 07                	jne    c00206ec <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00206e5:	b8 00 00 00 00       	mov    eax,0x0
c00206ea:	eb 05                	jmp    c00206f1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206ec:	b8 01 00 00 00       	mov    eax,0x1
c00206f1:	83 c4 1c             	add    esp,0x1c
c00206f4:	c3                   	ret    
c00206f5:	90                   	nop

c00206f6 <FAT::write(void*, unsigned long, void*, int*)>:
c00206f6:	83 ec 1c             	sub    esp,0x1c
c00206f9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206fe:	74 07                	je     c0020707 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020700:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020705:	75 07                	jne    c002070e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020707:	b8 04 00 00 00       	mov    eax,0x4
c002070c:	eb 3d                	jmp    c002074b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002070e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020712:	50                   	push   eax
c0020713:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020717:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002071b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002071f:	e8 ef 4e fe ff       	call   c0005613 <f_write>
c0020724:	83 c4 10             	add    esp,0x10
c0020727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002072b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002072f:	89 c2                	mov    edx,eax
c0020731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020735:	89 10                	mov    DWORD PTR [eax],edx
c0020737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002073b:	85 c0                	test   eax,eax
c002073d:	75 07                	jne    c0020746 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002073f:	b8 00 00 00 00       	mov    eax,0x0
c0020744:	eb 05                	jmp    c002074b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020746:	b8 01 00 00 00       	mov    eax,0x1
c002074b:	83 c4 1c             	add    esp,0x1c
c002074e:	c3                   	ret    
c002074f:	90                   	nop

c0020750 <FAT::close(void*)>:
c0020750:	83 ec 1c             	sub    esp,0x1c
c0020753:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020758:	75 07                	jne    c0020761 <FAT::close(void*)+0x11>
c002075a:	b8 04 00 00 00       	mov    eax,0x4
c002075f:	eb 36                	jmp    c0020797 <FAT::close(void*)+0x47>
c0020761:	83 ec 0c             	sub    esp,0xc
c0020764:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020768:	e8 3c 53 fe ff       	call   c0005aa9 <f_close>
c002076d:	83 c4 10             	add    esp,0x10
c0020770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020774:	83 ec 0c             	sub    esp,0xc
c0020777:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002077b:	e8 29 ee fe ff       	call   c000f5a9 <free>
c0020780:	83 c4 10             	add    esp,0x10
c0020783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020787:	85 c0                	test   eax,eax
c0020789:	75 07                	jne    c0020792 <FAT::close(void*)+0x42>
c002078b:	b8 00 00 00 00       	mov    eax,0x0
c0020790:	eb 05                	jmp    c0020797 <FAT::close(void*)+0x47>
c0020792:	b8 01 00 00 00       	mov    eax,0x1
c0020797:	83 c4 1c             	add    esp,0x1c
c002079a:	c3                   	ret    
c002079b:	90                   	nop

c002079c <FAT::closeDir(void*)>:
c002079c:	83 ec 1c             	sub    esp,0x1c
c002079f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207a4:	75 07                	jne    c00207ad <FAT::closeDir(void*)+0x11>
c00207a6:	b8 04 00 00 00       	mov    eax,0x4
c00207ab:	eb 36                	jmp    c00207e3 <FAT::closeDir(void*)+0x47>
c00207ad:	83 ec 0c             	sub    esp,0xc
c00207b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207b4:	e8 d8 58 fe ff       	call   c0006091 <f_closedir>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207c0:	83 ec 0c             	sub    esp,0xc
c00207c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207c7:	e8 dd ed fe ff       	call   c000f5a9 <free>
c00207cc:	83 c4 10             	add    esp,0x10
c00207cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207d3:	85 c0                	test   eax,eax
c00207d5:	75 07                	jne    c00207de <FAT::closeDir(void*)+0x42>
c00207d7:	b8 00 00 00 00       	mov    eax,0x0
c00207dc:	eb 05                	jmp    c00207e3 <FAT::closeDir(void*)+0x47>
c00207de:	b8 01 00 00 00       	mov    eax,0x1
c00207e3:	83 c4 1c             	add    esp,0x1c
c00207e6:	c3                   	ret    
c00207e7:	90                   	nop

c00207e8 <FAT::seek(void*, unsigned long long)>:
c00207e8:	83 ec 2c             	sub    esp,0x2c
c00207eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207fb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020800:	75 07                	jne    c0020809 <FAT::seek(void*, unsigned long long)+0x21>
c0020802:	b8 04 00 00 00       	mov    eax,0x4
c0020807:	eb 2f                	jmp    c0020838 <FAT::seek(void*, unsigned long long)+0x50>
c0020809:	83 ec 04             	sub    esp,0x4
c002080c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020810:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020814:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020818:	e8 bb 52 fe ff       	call   c0005ad8 <f_lseek>
c002081d:	83 c4 10             	add    esp,0x10
c0020820:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020828:	85 c0                	test   eax,eax
c002082a:	75 07                	jne    c0020833 <FAT::seek(void*, unsigned long long)+0x4b>
c002082c:	b8 00 00 00 00       	mov    eax,0x0
c0020831:	eb 05                	jmp    c0020838 <FAT::seek(void*, unsigned long long)+0x50>
c0020833:	b8 01 00 00 00       	mov    eax,0x1
c0020838:	83 c4 2c             	add    esp,0x2c
c002083b:	c3                   	ret    

c002083c <fatWrapperReadDisk>:
c002083c:	83 ec 1c             	sub    esp,0x1c
c002083f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020843:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020847:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002084b:	89 04 24             	mov    DWORD PTR [esp],eax
c002084e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020852:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020856:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002085b:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0020862:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002086d:	52                   	push   edx
c002086e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020872:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020876:	50                   	push   eax
c0020877:	e8 38 58 ff ff       	call   c00160b4 <LogicalDisk::read(unsigned long long, int, void*)>
c002087c:	83 c4 20             	add    esp,0x20
c002087f:	83 c4 1c             	add    esp,0x1c
c0020882:	c3                   	ret    

c0020883 <fatWrapperWriteDisk>:
c0020883:	83 ec 1c             	sub    esp,0x1c
c0020886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002088a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002088e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020892:	89 04 24             	mov    DWORD PTR [esp],eax
c0020895:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020899:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002089d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208a2:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c00208a9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00208ad:	83 ec 0c             	sub    esp,0xc
c00208b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208b4:	52                   	push   edx
c00208b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208bd:	50                   	push   eax
c00208be:	e8 5d 58 ff ff       	call   c0016120 <LogicalDisk::write(unsigned long long, int, void*)>
c00208c3:	83 c4 20             	add    esp,0x20
c00208c6:	83 c4 1c             	add    esp,0x1c
c00208c9:	c3                   	ret    

c00208ca <fatWrapperIoctl>:
c00208ca:	53                   	push   ebx
c00208cb:	83 ec 28             	sub    esp,0x28
c00208ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00208d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00208d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00208da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00208de:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00208e3:	75 31                	jne    c0020916 <fatWrapperIoctl+0x4c>
c00208e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00208ed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208f2:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c00208f9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020905:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020909:	66 89 02             	mov    WORD PTR [edx],ax
c002090c:	b8 00 00 00 00       	mov    eax,0x0
c0020911:	e9 b2 00 00 00       	jmp    c00209c8 <fatWrapperIoctl+0xfe>
c0020916:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002091b:	75 6a                	jne    c0020987 <fatWrapperIoctl+0xbd>
c002091d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020925:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002092a:	8b 04 85 60 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1fa0]
c0020931:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020937:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002093d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020943:	89 c8                	mov    eax,ecx
c0020945:	89 da                	mov    edx,ebx
c0020947:	0f a4 c2 0a          	shld   edx,eax,0xa
c002094b:	c1 e0 0a             	shl    eax,0xa
c002094e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020953:	8b 0c 8d 60 e0 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1fa0]
c002095a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020960:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020966:	89 cb                	mov    ebx,ecx
c0020968:	c1 fb 1f             	sar    ebx,0x1f
c002096b:	53                   	push   ebx
c002096c:	51                   	push   ecx
c002096d:	52                   	push   edx
c002096e:	50                   	push   eax
c002096f:	e8 30 5e 00 00       	call   c00267a4 <__udivdi3>
c0020974:	83 c4 10             	add    esp,0x10
c0020977:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002097b:	89 01                	mov    DWORD PTR [ecx],eax
c002097d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020980:	b8 00 00 00 00       	mov    eax,0x0
c0020985:	eb 41                	jmp    c00209c8 <fatWrapperIoctl+0xfe>
c0020987:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002098c:	75 07                	jne    c0020995 <fatWrapperIoctl+0xcb>
c002098e:	b8 00 00 00 00       	mov    eax,0x0
c0020993:	eb 33                	jmp    c00209c8 <fatWrapperIoctl+0xfe>
c0020995:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002099a:	75 19                	jne    c00209b5 <fatWrapperIoctl+0xeb>
c002099c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209a8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00209ae:	b8 00 00 00 00       	mov    eax,0x0
c00209b3:	eb 13                	jmp    c00209c8 <fatWrapperIoctl+0xfe>
c00209b5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00209ba:	75 07                	jne    c00209c3 <fatWrapperIoctl+0xf9>
c00209bc:	b8 00 00 00 00       	mov    eax,0x0
c00209c1:	eb 05                	jmp    c00209c8 <fatWrapperIoctl+0xfe>
c00209c3:	b8 04 00 00 00       	mov    eax,0x4
c00209c8:	83 c4 28             	add    esp,0x28
c00209cb:	5b                   	pop    ebx
c00209cc:	c3                   	ret    
c00209cd:	90                   	nop

c00209ce <FAT::FAT()>:
c00209ce:	83 ec 1c             	sub    esp,0x1c
c00209d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209d5:	83 ec 0c             	sub    esp,0xc
c00209d8:	50                   	push   eax
c00209d9:	e8 8c 20 ff ff       	call   c0012a6a <Filesystem::Filesystem()>
c00209de:	83 c4 10             	add    esp,0x10
c00209e1:	ba 5c bf 02 c0       	mov    edx,0xc002bf5c
c00209e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209ea:	89 10                	mov    DWORD PTR [eax],edx
c00209ec:	c7 05 80 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031080,0x0
c00209f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00209fe:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020a03:	7f 15                	jg     c0020a1a <FAT::FAT()+0x4c>
c0020a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a09:	c7 04 85 a0 10 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcef60],0xffffffff
c0020a14:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020a18:	eb e4                	jmp    c00209fe <FAT::FAT()+0x30>
c0020a1a:	90                   	nop
c0020a1b:	83 c4 1c             	add    esp,0x1c
c0020a1e:	c3                   	ret    
c0020a1f:	90                   	nop

c0020a20 <FAT::fixFilepath(char*)>:
c0020a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a24:	8a 00                	mov    al,BYTE PTR [eax]
c0020a26:	3c 40                	cmp    al,0x40
c0020a28:	7e 2c                	jle    c0020a56 <FAT::fixFilepath(char*)+0x36>
c0020a2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a2e:	8a 00                	mov    al,BYTE PTR [eax]
c0020a30:	83 e8 41             	sub    eax,0x41
c0020a33:	88 c2                	mov    dl,al
c0020a35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a39:	88 10                	mov    BYTE PTR [eax],dl
c0020a3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a3f:	8a 00                	mov    al,BYTE PTR [eax]
c0020a41:	0f be c0             	movsx  eax,al
c0020a44:	8b 04 85 a0 10 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcef60]
c0020a4b:	83 c0 30             	add    eax,0x30
c0020a4e:	88 c2                	mov    dl,al
c0020a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a54:	88 10                	mov    BYTE PTR [eax],dl
c0020a56:	90                   	nop
c0020a57:	c3                   	ret    

c0020a58 <FAT::open(char const*, void**, FileOpenMode)>:
c0020a58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a66:	74 0a                	je     c0020a72 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a70:	75 0a                	jne    c0020a7c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020a72:	b8 04 00 00 00       	mov    eax,0x4
c0020a77:	e9 fd 00 00 00       	jmp    c0020b79 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a7c:	83 ec 08             	sub    esp,0x8
c0020a7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a8a:	50                   	push   eax
c0020a8b:	e8 7c fd fd ff       	call   c000080c <strcpy>
c0020a90:	83 c4 10             	add    esp,0x10
c0020a93:	83 ec 08             	sub    esp,0x8
c0020a96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020a9a:	50                   	push   eax
c0020a9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020aa2:	e8 79 ff ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ab2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ab9:	83 e0 01             	and    eax,0x1
c0020abc:	74 08                	je     c0020ac6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020abe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ac6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020acd:	83 e0 04             	and    eax,0x4
c0020ad0:	74 10                	je     c0020ae2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ad2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020ada:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020ae2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ae9:	83 e0 02             	and    eax,0x2
c0020aec:	74 08                	je     c0020af6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020aee:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020af6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020afd:	83 e0 08             	and    eax,0x8
c0020b00:	74 08                	je     c0020b0a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020b02:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020b0a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b11:	83 e0 10             	and    eax,0x10
c0020b14:	74 08                	je     c0020b1e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020b16:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020b1e:	83 ec 0c             	sub    esp,0xc
c0020b21:	68 50 02 00 00       	push   0x250
c0020b26:	e8 6e ea fe ff       	call   c000f599 <malloc>
c0020b2b:	83 c4 10             	add    esp,0x10
c0020b2e:	89 c2                	mov    edx,eax
c0020b30:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b37:	89 10                	mov    DWORD PTR [eax],edx
c0020b39:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020b41:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b4a:	83 ec 04             	sub    esp,0x4
c0020b4d:	52                   	push   edx
c0020b4e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b52:	52                   	push   edx
c0020b53:	50                   	push   eax
c0020b54:	e8 fe 43 fe ff       	call   c0004f57 <f_open>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b63:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020b6b:	74 07                	je     c0020b74 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020b6d:	b8 01 00 00 00       	mov    eax,0x1
c0020b72:	eb 05                	jmp    c0020b79 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020b74:	b8 00 00 00 00       	mov    eax,0x0
c0020b79:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b7f:	c3                   	ret    

c0020b80 <FAT::openDir(char const*, void**)>:
c0020b80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b86:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b8e:	74 0a                	je     c0020b9a <FAT::openDir(char const*, void**)+0x1a>
c0020b90:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020b98:	75 07                	jne    c0020ba1 <FAT::openDir(char const*, void**)+0x21>
c0020b9a:	b8 04 00 00 00       	mov    eax,0x4
c0020b9f:	eb 7d                	jmp    c0020c1e <FAT::openDir(char const*, void**)+0x9e>
c0020ba1:	83 ec 08             	sub    esp,0x8
c0020ba4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020baf:	50                   	push   eax
c0020bb0:	e8 57 fc fd ff       	call   c000080c <strcpy>
c0020bb5:	83 c4 10             	add    esp,0x10
c0020bb8:	83 ec 08             	sub    esp,0x8
c0020bbb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bbf:	50                   	push   eax
c0020bc0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bc7:	e8 54 fe ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020bcc:	83 c4 10             	add    esp,0x10
c0020bcf:	83 ec 0c             	sub    esp,0xc
c0020bd2:	6a 4c                	push   0x4c
c0020bd4:	e8 c0 e9 fe ff       	call   c000f599 <malloc>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	89 c2                	mov    edx,eax
c0020bde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020be5:	89 10                	mov    DWORD PTR [eax],edx
c0020be7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bf0:	83 ec 08             	sub    esp,0x8
c0020bf3:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020bf7:	52                   	push   edx
c0020bf8:	50                   	push   eax
c0020bf9:	e8 91 53 fe ff       	call   c0005f8f <f_opendir>
c0020bfe:	83 c4 10             	add    esp,0x10
c0020c01:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c08:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020c10:	74 07                	je     c0020c19 <FAT::openDir(char const*, void**)+0x99>
c0020c12:	b8 01 00 00 00       	mov    eax,0x1
c0020c17:	eb 05                	jmp    c0020c1e <FAT::openDir(char const*, void**)+0x9e>
c0020c19:	b8 00 00 00 00       	mov    eax,0x0
c0020c1e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c24:	c3                   	ret    
c0020c25:	90                   	nop

c0020c26 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020c26:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c2c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020c34:	75 0a                	jne    c0020c40 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020c36:	b8 04 00 00 00       	mov    eax,0x4
c0020c3b:	e9 c9 00 00 00       	jmp    c0020d09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c40:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020c48:	75 0a                	jne    c0020c54 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020c4a:	b8 04 00 00 00       	mov    eax,0x4
c0020c4f:	e9 b5 00 00 00       	jmp    c0020d09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c54:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020c5c:	75 0a                	jne    c0020c68 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020c5e:	b8 04 00 00 00       	mov    eax,0x4
c0020c63:	e9 a1 00 00 00       	jmp    c0020d09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c68:	83 ec 08             	sub    esp,0x8
c0020c6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c72:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020c79:	50                   	push   eax
c0020c7a:	e8 8d fb fd ff       	call   c000080c <strcpy>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	83 ec 08             	sub    esp,0x8
c0020c85:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020c8c:	50                   	push   eax
c0020c8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020c94:	e8 87 fd ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020c99:	83 c4 10             	add    esp,0x10
c0020c9c:	83 ec 08             	sub    esp,0x8
c0020c9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ca3:	50                   	push   eax
c0020ca4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020cab:	50                   	push   eax
c0020cac:	e8 9d 54 fe ff       	call   c000614e <f_stat>
c0020cb1:	83 c4 10             	add    esp,0x10
c0020cb4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020cbb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cc2:	85 c0                	test   eax,eax
c0020cc4:	74 07                	je     c0020ccd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020cc6:	83 f8 04             	cmp    eax,0x4
c0020cc9:	74 32                	je     c0020cfd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020ccb:	eb 37                	jmp    c0020d04 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020ccd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020cd1:	0f b6 c0             	movzx  eax,al
c0020cd4:	83 e0 10             	and    eax,0x10
c0020cd7:	0f 95 c2             	setne  dl
c0020cda:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020ce1:	88 10                	mov    BYTE PTR [eax],dl
c0020ce3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020cea:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020cf1:	89 01                	mov    DWORD PTR [ecx],eax
c0020cf3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020cf6:	b8 00 00 00 00       	mov    eax,0x0
c0020cfb:	eb 0c                	jmp    c0020d09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020cfd:	b8 02 00 00 00       	mov    eax,0x2
c0020d02:	eb 05                	jmp    c0020d09 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d04:	b8 01 00 00 00       	mov    eax,0x1
c0020d09:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020d0f:	c3                   	ret    

c0020d10 <FAT::unlink(char const*)>:
c0020d10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d1e:	75 07                	jne    c0020d27 <FAT::unlink(char const*)+0x17>
c0020d20:	b8 04 00 00 00       	mov    eax,0x4
c0020d25:	eb 5c                	jmp    c0020d83 <FAT::unlink(char const*)+0x73>
c0020d27:	83 ec 08             	sub    esp,0x8
c0020d2a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d31:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d35:	50                   	push   eax
c0020d36:	e8 d1 fa fd ff       	call   c000080c <strcpy>
c0020d3b:	83 c4 10             	add    esp,0x10
c0020d3e:	83 ec 08             	sub    esp,0x8
c0020d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d45:	50                   	push   eax
c0020d46:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d4d:	e8 ce fc ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020d52:	83 c4 10             	add    esp,0x10
c0020d55:	83 ec 0c             	sub    esp,0xc
c0020d58:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d5c:	50                   	push   eax
c0020d5d:	e8 3e 57 fe ff       	call   c00064a0 <f_unlink>
c0020d62:	83 c4 10             	add    esp,0x10
c0020d65:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020d6c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020d73:	85 c0                	test   eax,eax
c0020d75:	75 07                	jne    c0020d7e <FAT::unlink(char const*)+0x6e>
c0020d77:	b8 00 00 00 00       	mov    eax,0x0
c0020d7c:	eb 05                	jmp    c0020d83 <FAT::unlink(char const*)+0x73>
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d89:	c3                   	ret    

c0020d8a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020d8a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020d90:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020d97:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020d9e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020da2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020da6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020dae:	75 0a                	jne    c0020dba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020db0:	b8 04 00 00 00       	mov    eax,0x4
c0020db5:	e9 1c 01 00 00       	jmp    c0020ed6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020dba:	83 ec 08             	sub    esp,0x8
c0020dbd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020dc4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020dc8:	50                   	push   eax
c0020dc9:	e8 3e fa fd ff       	call   c000080c <strcpy>
c0020dce:	83 c4 10             	add    esp,0x10
c0020dd1:	83 ec 08             	sub    esp,0x8
c0020dd4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020dd8:	50                   	push   eax
c0020dd9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020de0:	e8 3b fc ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020de5:	83 c4 10             	add    esp,0x10
c0020de8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020df0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020df8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020dfd:	83 e0 01             	and    eax,0x1
c0020e00:	74 08                	je     c0020e0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020e02:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020e0a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e0f:	83 e0 02             	and    eax,0x2
c0020e12:	74 08                	je     c0020e1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020e14:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020e1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e21:	83 e0 04             	and    eax,0x4
c0020e24:	74 08                	je     c0020e2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020e26:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020e2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e33:	83 e0 08             	and    eax,0x8
c0020e36:	74 08                	je     c0020e40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020e38:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020e40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e45:	83 e0 01             	and    eax,0x1
c0020e48:	74 08                	je     c0020e52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020e4a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020e52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e57:	83 e0 02             	and    eax,0x2
c0020e5a:	74 08                	je     c0020e64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020e5c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e69:	83 e0 04             	and    eax,0x4
c0020e6c:	74 08                	je     c0020e76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020e6e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020e76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e7b:	83 e0 08             	and    eax,0x8
c0020e7e:	74 08                	je     c0020e88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020e80:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020e88:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020e8f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020e96:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020e9e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020ea6:	83 ec 04             	sub    esp,0x4
c0020ea9:	52                   	push   edx
c0020eaa:	50                   	push   eax
c0020eab:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020eaf:	50                   	push   eax
c0020eb0:	e8 8d 5c fe ff       	call   c0006b42 <f_chmod>
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020ebf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020ec6:	85 c0                	test   eax,eax
c0020ec8:	75 07                	jne    c0020ed1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020eca:	b8 00 00 00 00       	mov    eax,0x0
c0020ecf:	eb 05                	jmp    c0020ed6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020ed1:	b8 01 00 00 00       	mov    eax,0x1
c0020ed6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020edc:	c3                   	ret    
c0020edd:	90                   	nop

c0020ede <FAT::rename(char const*, char const*)>:
c0020ede:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ee4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020eec:	74 0a                	je     c0020ef8 <FAT::rename(char const*, char const*)+0x1a>
c0020eee:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020ef6:	75 0a                	jne    c0020f02 <FAT::rename(char const*, char const*)+0x24>
c0020ef8:	b8 04 00 00 00       	mov    eax,0x4
c0020efd:	e9 98 00 00 00       	jmp    c0020f9a <FAT::rename(char const*, char const*)+0xbc>
c0020f02:	83 ec 08             	sub    esp,0x8
c0020f05:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f0c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f13:	50                   	push   eax
c0020f14:	e8 f3 f8 fd ff       	call   c000080c <strcpy>
c0020f19:	83 c4 10             	add    esp,0x10
c0020f1c:	83 ec 08             	sub    esp,0x8
c0020f1f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020f26:	50                   	push   eax
c0020f27:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f2e:	e8 ed fa ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020f33:	83 c4 10             	add    esp,0x10
c0020f36:	83 ec 08             	sub    esp,0x8
c0020f39:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020f40:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f44:	50                   	push   eax
c0020f45:	e8 c2 f8 fd ff       	call   c000080c <strcpy>
c0020f4a:	83 c4 10             	add    esp,0x10
c0020f4d:	83 ec 08             	sub    esp,0x8
c0020f50:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f54:	50                   	push   eax
c0020f55:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f5c:	e8 bf fa ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020f61:	83 c4 10             	add    esp,0x10
c0020f64:	83 ec 08             	sub    esp,0x8
c0020f67:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f6b:	50                   	push   eax
c0020f6c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f73:	50                   	push   eax
c0020f74:	e8 d6 58 fe ff       	call   c000684f <f_rename>
c0020f79:	83 c4 10             	add    esp,0x10
c0020f7c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020f83:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020f8a:	85 c0                	test   eax,eax
c0020f8c:	75 07                	jne    c0020f95 <FAT::rename(char const*, char const*)+0xb7>
c0020f8e:	b8 00 00 00 00       	mov    eax,0x0
c0020f93:	eb 05                	jmp    c0020f9a <FAT::rename(char const*, char const*)+0xbc>
c0020f95:	b8 01 00 00 00       	mov    eax,0x1
c0020f9a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020fa0:	c3                   	ret    
c0020fa1:	90                   	nop

c0020fa2 <FAT::mkdir(char const*)>:
c0020fa2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fa8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fb0:	75 07                	jne    c0020fb9 <FAT::mkdir(char const*)+0x17>
c0020fb2:	b8 04 00 00 00       	mov    eax,0x4
c0020fb7:	eb 5c                	jmp    c0021015 <FAT::mkdir(char const*)+0x73>
c0020fb9:	83 ec 08             	sub    esp,0x8
c0020fbc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fc7:	50                   	push   eax
c0020fc8:	e8 3f f8 fd ff       	call   c000080c <strcpy>
c0020fcd:	83 c4 10             	add    esp,0x10
c0020fd0:	83 ec 08             	sub    esp,0x8
c0020fd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fd7:	50                   	push   eax
c0020fd8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fdf:	e8 3c fa ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c0020fe4:	83 c4 10             	add    esp,0x10
c0020fe7:	83 ec 0c             	sub    esp,0xc
c0020fea:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fee:	50                   	push   eax
c0020fef:	e8 2f 56 fe ff       	call   c0006623 <f_mkdir>
c0020ff4:	83 c4 10             	add    esp,0x10
c0020ff7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020ffe:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021005:	85 c0                	test   eax,eax
c0021007:	75 07                	jne    c0021010 <FAT::mkdir(char const*)+0x6e>
c0021009:	b8 00 00 00 00       	mov    eax,0x0
c002100e:	eb 05                	jmp    c0021015 <FAT::mkdir(char const*)+0x73>
c0021010:	b8 01 00 00 00       	mov    eax,0x1
c0021015:	81 c4 1c 01 00 00    	add    esp,0x11c
c002101b:	c3                   	ret    

c002101c <FAT::exists(char const*)>:
c002101c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021022:	83 ec 08             	sub    esp,0x8
c0021025:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002102c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021030:	50                   	push   eax
c0021031:	e8 d6 f7 fd ff       	call   c000080c <strcpy>
c0021036:	83 c4 10             	add    esp,0x10
c0021039:	83 ec 08             	sub    esp,0x8
c002103c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021040:	50                   	push   eax
c0021041:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021048:	e8 d3 f9 ff ff       	call   c0020a20 <FAT::fixFilepath(char*)>
c002104d:	83 c4 10             	add    esp,0x10
c0021050:	83 ec 08             	sub    esp,0x8
c0021053:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002105a:	50                   	push   eax
c002105b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002105f:	50                   	push   eax
c0021060:	e8 e9 50 fe ff       	call   c000614e <f_stat>
c0021065:	83 c4 10             	add    esp,0x10
c0021068:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002106f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021076:	85 c0                	test   eax,eax
c0021078:	75 04                	jne    c002107e <FAT::exists(char const*)+0x62>
c002107a:	b0 01                	mov    al,0x1
c002107c:	eb 02                	jmp    c0021080 <FAT::exists(char const*)+0x64>
c002107e:	b0 00                	mov    al,0x0
c0021080:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021086:	c3                   	ret    
c0021087:	90                   	nop

c0021088 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021088:	b8 08 00 00 00       	mov    eax,0x8
c002108d:	c3                   	ret    

c002108e <ISO9660::seek(void*, unsigned long long)>:
c002108e:	53                   	push   ebx
c002108f:	b8 04 00 00 00       	mov    eax,0x4
c0021094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021098:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002109c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00210a0:	85 d2                	test   edx,edx
c00210a2:	74 17                	je     c00210bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210a4:	89 c8                	mov    eax,ecx
c00210a6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00210a9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00210ac:	b8 01 00 00 00       	mov    eax,0x1
c00210b1:	73 08                	jae    c00210bb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210b3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00210b6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00210b9:	31 c0                	xor    eax,eax
c00210bb:	5b                   	pop    ebx
c00210bc:	c3                   	ret    
c00210bd:	90                   	nop

c00210be <ISO9660::tell(void*, unsigned long long*)>:
c00210be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210c6:	85 d2                	test   edx,edx
c00210c8:	74 12                	je     c00210dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00210ca:	85 c0                	test   eax,eax
c00210cc:	74 0e                	je     c00210dc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00210ce:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00210d1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00210d4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00210d7:	89 10                	mov    DWORD PTR [eax],edx
c00210d9:	31 c0                	xor    eax,eax
c00210db:	c3                   	ret    
c00210dc:	b8 04 00 00 00       	mov    eax,0x4
c00210e1:	c3                   	ret    

c00210e2 <ISO9660::getName()>:
c00210e2:	b8 bc bf 02 c0       	mov    eax,0xc002bfbc
c00210e7:	c3                   	ret    

c00210e8 <ISO9660::stat(void*, unsigned long long*)>:
c00210e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210f0:	85 d2                	test   edx,edx
c00210f2:	74 12                	je     c0021106 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210f4:	85 c0                	test   eax,eax
c00210f6:	74 0e                	je     c0021106 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00210f8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00210fb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00210fe:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021101:	89 10                	mov    DWORD PTR [eax],edx
c0021103:	31 c0                	xor    eax,eax
c0021105:	c3                   	ret    
c0021106:	b8 04 00 00 00       	mov    eax,0x4
c002110b:	c3                   	ret    

c002110c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002110c:	b8 01 00 00 00       	mov    eax,0x1
c0021111:	c3                   	ret    

c0021112 <ISO9660::unlink(char const*)>:
c0021112:	b8 01 00 00 00       	mov    eax,0x1
c0021117:	c3                   	ret    

c0021118 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021118:	b8 01 00 00 00       	mov    eax,0x1
c002111d:	c3                   	ret    

c002111e <ISO9660::rename(char const*, char const*)>:
c002111e:	b8 01 00 00 00       	mov    eax,0x1
c0021123:	c3                   	ret    

c0021124 <ISO9660::mkdir(char const*)>:
c0021124:	b8 01 00 00 00       	mov    eax,0x1
c0021129:	c3                   	ret    

c002112a <ISO9660::close(void*)>:
c002112a:	83 ec 0c             	sub    esp,0xc
c002112d:	b8 04 00 00 00       	mov    eax,0x4
c0021132:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021136:	85 d2                	test   edx,edx
c0021138:	74 0e                	je     c0021148 <ISO9660::close(void*)+0x1e>
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	52                   	push   edx
c002113e:	e8 66 e4 fe ff       	call   c000f5a9 <free>
c0021143:	83 c4 10             	add    esp,0x10
c0021146:	31 c0                	xor    eax,eax
c0021148:	83 c4 0c             	add    esp,0xc
c002114b:	c3                   	ret    

c002114c <ISO9660::closeDir(void*)>:
c002114c:	83 ec 0c             	sub    esp,0xc
c002114f:	b8 04 00 00 00       	mov    eax,0x4
c0021154:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021158:	85 d2                	test   edx,edx
c002115a:	74 0e                	je     c002116a <ISO9660::closeDir(void*)+0x1e>
c002115c:	83 ec 0c             	sub    esp,0xc
c002115f:	52                   	push   edx
c0021160:	e8 44 e4 fe ff       	call   c000f5a9 <free>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	31 c0                	xor    eax,eax
c002116a:	83 c4 0c             	add    esp,0xc
c002116d:	c3                   	ret    

c002116e <ISO9660::~ISO9660()>:
c002116e:	83 ec 0c             	sub    esp,0xc
c0021171:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c0021176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117a:	89 10                	mov    DWORD PTR [eax],edx
c002117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021180:	83 ec 0c             	sub    esp,0xc
c0021183:	50                   	push   eax
c0021184:	e8 05 19 ff ff       	call   c0012a8e <Filesystem::~Filesystem()>
c0021189:	83 c4 10             	add    esp,0x10
c002118c:	90                   	nop
c002118d:	83 c4 0c             	add    esp,0xc
c0021190:	c3                   	ret    
c0021191:	90                   	nop

c0021192 <ISO9660::~ISO9660()>:
c0021192:	83 ec 0c             	sub    esp,0xc
c0021195:	83 ec 0c             	sub    esp,0xc
c0021198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002119c:	e8 cd ff ff ff       	call   c002116e <ISO9660::~ISO9660()>
c00211a1:	83 c4 10             	add    esp,0x10
c00211a4:	83 ec 08             	sub    esp,0x8
c00211a7:	6a 08                	push   0x8
c00211a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211ad:	e8 d5 14 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00211b2:	83 c4 10             	add    esp,0x10
c00211b5:	83 c4 0c             	add    esp,0xc
c00211b8:	c3                   	ret    

c00211b9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00211b9:	55                   	push   ebp
c00211ba:	31 c9                	xor    ecx,ecx
c00211bc:	57                   	push   edi
c00211bd:	56                   	push   esi
c00211be:	53                   	push   ebx
c00211bf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00211c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00211c7:	89 eb                	mov    ebx,ebp
c00211c9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00211cd:	39 ce                	cmp    esi,ecx
c00211cf:	7e 17                	jle    c00211e8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00211d1:	31 d2                	xor    edx,edx
c00211d3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00211d7:	7d 13                	jge    c00211ec <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00211d9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00211dd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00211e0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00211e3:	75 0d                	jne    c00211f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00211e5:	42                   	inc    edx
c00211e6:	eb eb                	jmp    c00211d3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00211e8:	31 c0                	xor    eax,eax
c00211ea:	eb 0a                	jmp    c00211f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211ec:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00211f0:	eb 04                	jmp    c00211f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00211f2:	41                   	inc    ecx
c00211f3:	43                   	inc    ebx
c00211f4:	eb d7                	jmp    c00211cd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00211f6:	5b                   	pop    ebx
c00211f7:	5e                   	pop    esi
c00211f8:	5f                   	pop    edi
c00211f9:	5d                   	pop    ebp
c00211fa:	c3                   	ret    

c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00211fb:	57                   	push   edi
c00211fc:	56                   	push   esi
c00211fd:	53                   	push   ebx
c00211fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021202:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021206:	39 0d 80 11 03 c0    	cmp    DWORD PTR ds:0xc0031180,ecx
c002120c:	75 08                	jne    c0021216 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002120e:	38 05 f4 cf 02 c0    	cmp    BYTE PTR ds:0xc002cff4,al
c0021214:	74 2b                	je     c0021241 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	a2 f4 cf 02 c0       	mov    ds:0xc002cff4,al
c002121e:	68 a0 11 03 c0       	push   0xc00311a0
c0021223:	0f be c0             	movsx  eax,al
c0021226:	6a 01                	push   0x1
c0021228:	89 0d 80 11 03 c0    	mov    DWORD PTR ds:0xc0031180,ecx
c002122e:	31 db                	xor    ebx,ebx
c0021230:	53                   	push   ebx
c0021231:	51                   	push   ecx
c0021232:	ff 34 85 5c df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20a4]
c0021239:	e8 76 4e ff ff       	call   c00160b4 <LogicalDisk::read(unsigned long long, int, void*)>
c002123e:	83 c4 20             	add    esp,0x20
c0021241:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021245:	be a0 11 03 c0       	mov    esi,0xc00311a0
c002124a:	b9 00 08 00 00       	mov    ecx,0x800
c002124f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021251:	5b                   	pop    ebx
c0021252:	5e                   	pop    esi
c0021253:	5f                   	pop    edi
c0021254:	c3                   	ret    
c0021255:	90                   	nop

c0021256 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021256:	81 ec 10 08 00 00    	sub    esp,0x810
c002125c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021263:	83 c0 41             	add    eax,0x41
c0021266:	0f be c0             	movsx  eax,al
c0021269:	50                   	push   eax
c002126a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002126e:	50                   	push   eax
c002126f:	6a 10                	push   0x10
c0021271:	e8 85 ff ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021276:	83 c4 10             	add    esp,0x10
c0021279:	31 c0                	xor    eax,eax
c002127b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021280:	75 1d                	jne    c002129f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021282:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021287:	75 16                	jne    c002129f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021289:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002128e:	75 0f                	jne    c002129f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021290:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021295:	75 08                	jne    c002129f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021297:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002129c:	0f 94 c0             	sete   al
c002129f:	81 c4 0c 08 00 00    	add    esp,0x80c
c00212a5:	c3                   	ret    

c00212a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00212a6:	55                   	push   ebp
c00212a7:	57                   	push   edi
c00212a8:	56                   	push   esi
c00212a9:	53                   	push   ebx
c00212aa:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00212b0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00212b7:	85 ed                	test   ebp,ebp
c00212b9:	0f 84 da 01 00 00    	je     c0021499 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00212bf:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00212c7:	0f 84 cc 01 00 00    	je     c0021499 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00212cd:	b8 01 00 00 00       	mov    eax,0x1
c00212d2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00212d6:	0f 85 c2 01 00 00    	jne    c002149e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00212dc:	31 d2                	xor    edx,edx
c00212de:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00212e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00212e8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00212eb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00212ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00212f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00212f5:	01 c8                	add    eax,ecx
c00212f7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00212fa:	11 da                	adc    edx,ebx
c00212fc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021300:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021304:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021308:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002130c:	19 d7                	sbb    edi,edx
c002130e:	72 11                	jb     c0021321 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021310:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021313:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021317:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002131b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002131f:	eb 0c                	jmp    c002132d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021321:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021325:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021329:	29 ce                	sub    esi,ecx
c002132b:	19 df                	sbb    edi,ebx
c002132d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021330:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021333:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021337:	c1 e0 0b             	shl    eax,0xb
c002133a:	01 c8                	add    eax,ecx
c002133c:	11 da                	adc    edx,ebx
c002133e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021345:	51                   	push   ecx
c0021346:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002134a:	50                   	push   eax
c002134b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002134f:	53                   	push   ebx
c0021350:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021358:	0f ac d0 0b          	shrd   eax,edx,0xb
c002135c:	50                   	push   eax
c002135d:	e8 99 fe ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021362:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021365:	b8 00 08 00 00       	mov    eax,0x800
c002136a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021370:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021374:	29 d0                	sub    eax,edx
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	89 f9                	mov    ecx,edi
c002137b:	39 c6                	cmp    esi,eax
c002137d:	83 d9 00             	sbb    ecx,0x0
c0021380:	7d 1b                	jge    c002139d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021382:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021387:	75 12                	jne    c002139b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021389:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021396:	e9 fa 00 00 00       	jmp    c0021495 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002139b:	89 f0                	mov    eax,esi
c002139d:	01 d3                	add    ebx,edx
c002139f:	31 d2                	xor    edx,edx
c00213a1:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00213a5:	39 c2                	cmp    edx,eax
c00213a7:	7d 14                	jge    c00213bd <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00213a9:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00213b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00213b4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00213b7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00213ba:	42                   	inc    edx
c00213bb:	eb e8                	jmp    c00213a5 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00213bd:	89 c2                	mov    edx,eax
c00213bf:	85 c0                	test   eax,eax
c00213c1:	79 02                	jns    c00213c5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00213c3:	31 d2                	xor    edx,edx
c00213c5:	01 c2                	add    edx,eax
c00213c7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00213ca:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00213d1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00213d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00213d9:	99                   	cdq    
c00213da:	01 c1                	add    ecx,eax
c00213dc:	11 d3                	adc    ebx,edx
c00213de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00213e2:	29 c6                	sub    esi,eax
c00213e4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00213e8:	19 d7                	sbb    edi,edx
c00213ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00213ed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00213f1:	b8 ff 07 00 00       	mov    eax,0x7ff
c00213f6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00213f9:	b8 00 00 00 00       	mov    eax,0x0
c00213fe:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021402:	7d 43                	jge    c0021447 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021404:	52                   	push   edx
c0021405:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021409:	50                   	push   eax
c002140a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002140e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021412:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021416:	0f ac d0 0b          	shrd   eax,edx,0xb
c002141a:	50                   	push   eax
c002141b:	e8 db fd ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021420:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021428:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002142d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021435:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002143d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	eb aa                	jmp    c00213f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002144b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002144e:	74 2a                	je     c002147a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021450:	50                   	push   eax
c0021451:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021455:	50                   	push   eax
c0021456:	8d 74 24 28          	lea    esi,[esp+0x28]
c002145a:	56                   	push   esi
c002145b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002145f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021463:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021467:	51                   	push   ecx
c0021468:	e8 8e fd ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002146d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021471:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021475:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021477:	83 c4 10             	add    esp,0x10
c002147a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021481:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021485:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021489:	89 18                	mov    DWORD PTR [eax],ebx
c002148b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002148f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021492:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021495:	31 c0                	xor    eax,eax
c0021497:	eb 05                	jmp    c002149e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021499:	b8 04 00 00 00       	mov    eax,0x4
c002149e:	81 c4 2c 08 00 00    	add    esp,0x82c
c00214a4:	5b                   	pop    ebx
c00214a5:	5e                   	pop    esi
c00214a6:	5f                   	pop    edi
c00214a7:	5d                   	pop    ebp
c00214a8:	c3                   	ret    
c00214a9:	90                   	nop

c00214aa <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00214aa:	55                   	push   ebp
c00214ab:	57                   	push   edi
c00214ac:	56                   	push   esi
c00214ad:	53                   	push   ebx
c00214ae:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00214b4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00214bb:	85 ed                	test   ebp,ebp
c00214bd:	0f 84 51 02 00 00    	je     c0021714 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00214c3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00214cb:	0f 84 43 02 00 00    	je     c0021714 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00214d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214d4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00214d7:	75 0a                	jne    c00214e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00214d9:	b8 07 00 00 00       	mov    eax,0x7
c00214de:	e9 36 02 00 00       	jmp    c0021719 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00214e3:	50                   	push   eax
c00214e4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214e8:	50                   	push   eax
c00214e9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214f0:	53                   	push   ebx
c00214f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214f4:	c1 e0 0b             	shl    eax,0xb
c00214f7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00214fa:	c1 e8 0b             	shr    eax,0xb
c00214fd:	50                   	push   eax
c00214fe:	e8 f8 fc ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021503:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021506:	83 c4 10             	add    esp,0x10
c0021509:	89 c1                	mov    ecx,eax
c002150b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002150e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021514:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021517:	84 db                	test   bl,bl
c0021519:	0f 85 8b 00 00 00    	jne    c00215aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002151f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021525:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021528:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002152e:	29 c6                	sub    esi,eax
c0021530:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021534:	89 f3                	mov    ebx,esi
c0021536:	89 f1                	mov    ecx,esi
c0021538:	c1 fb 1f             	sar    ebx,0x1f
c002153b:	01 f0                	add    eax,esi
c002153d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021540:	11 da                	adc    edx,ebx
c0021542:	89 04 24             	mov    DWORD PTR [esp],eax
c0021545:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021549:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002154c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002154f:	89 d8                	mov    eax,ebx
c0021551:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021555:	ba 00 00 00 00       	mov    edx,0x0
c002155a:	19 f8                	sbb    eax,edi
c002155c:	b8 00 00 00 00       	mov    eax,0x0
c0021561:	73 08                	jae    c002156b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021563:	89 f0                	mov    eax,esi
c0021565:	89 fa                	mov    edx,edi
c0021567:	29 c8                	sub    eax,ecx
c0021569:	19 da                	sbb    edx,ebx
c002156b:	89 d7                	mov    edi,edx
c002156d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021570:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021573:	09 c7                	or     edi,eax
c0021575:	0f 84 5e ff ff ff    	je     c00214d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002157b:	57                   	push   edi
c002157c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021580:	50                   	push   eax
c0021581:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021588:	53                   	push   ebx
c0021589:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002158c:	c1 e0 0b             	shl    eax,0xb
c002158f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021593:	c1 e8 0b             	shr    eax,0xb
c0021596:	50                   	push   eax
c0021597:	e8 5f fc ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002159c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002159f:	83 c4 10             	add    esp,0x10
c00215a2:	25 ff 07 00 00       	and    eax,0x7ff
c00215a7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00215aa:	31 ff                	xor    edi,edi
c00215ac:	56                   	push   esi
c00215ad:	6a 28                	push   0x28
c00215af:	6a 00                	push   0x0
c00215b1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00215b5:	50                   	push   eax
c00215b6:	e8 95 f1 fd ff       	call   c0000750 <memset>
c00215bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215be:	25 ff 07 00 00       	and    eax,0x7ff
c00215c3:	89 c6                	mov    esi,eax
c00215c5:	83 c6 21             	add    esi,0x21
c00215c8:	83 d7 00             	adc    edi,0x0
c00215cb:	83 c4 10             	add    esp,0x10
c00215ce:	31 c9                	xor    ecx,ecx
c00215d0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00215d7:	83 f9 28             	cmp    ecx,0x28
c00215da:	88 04 24             	mov    BYTE PTR [esp],al
c00215dd:	0f 94 c2             	sete   dl
c00215e0:	88 d0                	mov    al,dl
c00215e2:	ba ff 07 00 00       	mov    edx,0x7ff
c00215e7:	39 f2                	cmp    edx,esi
c00215e9:	ba 00 00 00 00       	mov    edx,0x0
c00215ee:	19 fa                	sbb    edx,edi
c00215f0:	0f 92 c2             	setb   dl
c00215f3:	09 c2                	or     edx,eax
c00215f5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00215f9:	0f 94 c0             	sete   al
c00215fc:	08 d0                	or     al,dl
c00215fe:	75 16                	jne    c0021616 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021600:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021604:	74 10                	je     c0021616 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021606:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021609:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002160d:	41                   	inc    ecx
c002160e:	83 c6 01             	add    esi,0x1
c0021611:	83 d7 00             	adc    edi,0x0
c0021614:	eb ba                	jmp    c00215d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021616:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002161d:	83 ec 0c             	sub    esp,0xc
c0021620:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021624:	56                   	push   esi
c0021625:	e8 42 f1 fd ff       	call   c000076c <strlen>
c002162a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021631:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021635:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002163d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021640:	5a                   	pop    edx
c0021641:	25 ff 07 00 00       	and    eax,0x7ff
c0021646:	59                   	pop    ecx
c0021647:	01 f8                	add    eax,edi
c0021649:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002164f:	83 e0 02             	and    eax,0x2
c0021652:	3c 01                	cmp    al,0x1
c0021654:	19 c0                	sbb    eax,eax
c0021656:	83 c0 02             	add    eax,0x2
c0021659:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002165d:	56                   	push   esi
c002165e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021662:	50                   	push   eax
c0021663:	e8 a4 f1 fd ff       	call   c000080c <strcpy>
c0021668:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002166c:	83 c4 10             	add    esp,0x10
c002166f:	84 c0                	test   al,al
c0021671:	75 21                	jne    c0021694 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021673:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002167b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021683:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002168b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021692:	eb 28                	jmp    c00216bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021694:	fe c8                	dec    al
c0021696:	75 24                	jne    c00216bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021698:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00216a0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00216a8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00216b0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00216b7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00216bc:	8d 74 24 40          	lea    esi,[esp+0x40]
c00216c0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00216c7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00216ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216d0:	0f b6 f3             	movzx  esi,bl
c00216d3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00216da:	31 db                	xor    ebx,ebx
c00216dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00216e2:	89 df                	mov    edi,ebx
c00216e4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00216e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216ea:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00216ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00216f0:	39 c6                	cmp    esi,eax
c00216f2:	19 d7                	sbb    edi,edx
c00216f4:	72 10                	jb     c0021706 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00216f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00216fd:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021704:	eb 0a                	jmp    c0021710 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021706:	29 f0                	sub    eax,esi
c0021708:	19 da                	sbb    edx,ebx
c002170a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002170d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021710:	31 c0                	xor    eax,eax
c0021712:	eb 05                	jmp    c0021719 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021714:	b8 04 00 00 00       	mov    eax,0x4
c0021719:	81 c4 5c 09 00 00    	add    esp,0x95c
c002171f:	5b                   	pop    ebx
c0021720:	5e                   	pop    esi
c0021721:	5f                   	pop    edi
c0021722:	5d                   	pop    ebp
c0021723:	c3                   	ret    

c0021724 <readRoot(unsigned int*, unsigned int*, char)>:
c0021724:	57                   	push   edi
c0021725:	56                   	push   esi
c0021726:	81 ec 38 08 00 00    	sub    esp,0x838
c002172c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021734:	50                   	push   eax
c0021735:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021739:	50                   	push   eax
c002173a:	6a 10                	push   0x10
c002173c:	e8 ba fa ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021741:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021748:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002174c:	b9 22 00 00 00       	mov    ecx,0x22
c0021751:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021753:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002175a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002175e:	89 10                	mov    DWORD PTR [eax],edx
c0021760:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021767:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002176b:	89 10                	mov    DWORD PTR [eax],edx
c002176d:	81 c4 44 08 00 00    	add    esp,0x844
c0021773:	b0 01                	mov    al,0x1
c0021775:	5e                   	pop    esi
c0021776:	5f                   	pop    edi
c0021777:	c3                   	ret    

c0021778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021778:	55                   	push   ebp
c0021779:	57                   	push   edi
c002177a:	56                   	push   esi
c002177b:	53                   	push   ebx
c002177c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021782:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021789:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021794:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021798:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002179c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217a0:	75 03                	jne    c00217a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217a2:	83 c3 02             	add    ebx,0x2
c00217a5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00217a8:	75 03                	jne    c00217ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00217aa:	43                   	inc    ebx
c00217ab:	eb f8                	jmp    c00217a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217ad:	51                   	push   ecx
c00217ae:	68 00 01 00 00       	push   0x100
c00217b3:	6a 00                	push   0x0
c00217b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217b9:	50                   	push   eax
c00217ba:	e8 91 ef fd ff       	call   c0000750 <memset>
c00217bf:	83 c4 10             	add    esp,0x10
c00217c2:	31 d2                	xor    edx,edx
c00217c4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217c7:	84 c0                	test   al,al
c00217c9:	74 21                	je     c00217ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00217cb:	3c 2f                	cmp    al,0x2f
c00217cd:	75 0b                	jne    c00217da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00217cf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00217d3:	bd 01 00 00 00       	mov    ebp,0x1
c00217d8:	eb 14                	jmp    c00217ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00217da:	8d 48 9f             	lea    ecx,[eax-0x61]
c00217dd:	80 f9 19             	cmp    cl,0x19
c00217e0:	77 03                	ja     c00217e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00217e2:	83 e8 20             	sub    eax,0x20
c00217e5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00217e9:	42                   	inc    edx
c00217ea:	eb d8                	jmp    c00217c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00217ec:	31 ed                	xor    ebp,ebp
c00217ee:	83 ec 0c             	sub    esp,0xc
c00217f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00217f8:	e8 9c dd fe ff       	call   c000f599 <malloc>
c00217fd:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021804:	89 c6                	mov    esi,eax
c0021806:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002180c:	c1 ef 0b             	shr    edi,0xb
c002180f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021816:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021822:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021826:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002182d:	74 28                	je     c0021857 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002182f:	52                   	push   edx
c0021830:	57                   	push   edi
c0021831:	50                   	push   eax
c0021832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021836:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002183d:	e8 b9 f9 ff ff       	call   c00211fb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021842:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021846:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002184d:	05 00 08 00 00       	add    eax,0x800
c0021852:	83 c4 10             	add    esp,0x10
c0021855:	eb cb                	jmp    c0021822 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021857:	83 ec 0c             	sub    esp,0xc
c002185a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002185e:	57                   	push   edi
c002185f:	e8 08 ef fd ff       	call   c000076c <strlen>
c0021864:	50                   	push   eax
c0021865:	57                   	push   edi
c0021866:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002186d:	56                   	push   esi
c002186e:	e8 46 f9 ff ff       	call   c00211b9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021873:	83 c4 20             	add    esp,0x20
c0021876:	85 c0                	test   eax,eax
c0021878:	75 13                	jne    c002188d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002187a:	83 ec 0c             	sub    esp,0xc
c002187d:	56                   	push   esi
c002187e:	e8 26 dd fe ff       	call   c000f5a9 <free>
c0021883:	83 c4 10             	add    esp,0x10
c0021886:	31 c0                	xor    eax,eax
c0021888:	e9 b3 00 00 00       	jmp    c0021940 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002188d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021891:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021895:	c1 e7 08             	shl    edi,0x8
c0021898:	c1 e2 10             	shl    edx,0x10
c002189b:	09 d7                	or     edi,edx
c002189d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00218a1:	09 d7                	or     edi,edx
c00218a3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00218a7:	c1 e2 18             	shl    edx,0x18
c00218aa:	09 d7                	or     edi,edx
c00218ac:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00218b0:	89 d1                	mov    ecx,edx
c00218b2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00218b6:	c1 e1 08             	shl    ecx,0x8
c00218b9:	c1 e2 10             	shl    edx,0x10
c00218bc:	09 ca                	or     edx,ecx
c00218be:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00218c2:	09 ca                	or     edx,ecx
c00218c4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00218c8:	c1 e1 18             	shl    ecx,0x18
c00218cb:	09 ca                	or     edx,ecx
c00218cd:	89 e9                	mov    ecx,ebp
c00218cf:	84 c9                	test   cl,cl
c00218d1:	74 3c                	je     c002190f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00218d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00218d7:	83 ec 0c             	sub    esp,0xc
c00218da:	56                   	push   esi
c00218db:	e8 c9 dc fe ff       	call   c000f5a9 <free>
c00218e0:	83 c4 0c             	add    esp,0xc
c00218e3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218ea:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00218ef:	50                   	push   eax
c00218f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218f7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00218fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021902:	52                   	push   edx
c0021903:	57                   	push   edi
c0021904:	53                   	push   ebx
c0021905:	e8 6e fe ff ff       	call   c0021778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002190a:	83 c4 20             	add    esp,0x20
c002190d:	eb 31                	jmp    c0021940 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002190f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021912:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021919:	d0 e8                	shr    al,1
c002191b:	89 3b                	mov    DWORD PTR [ebx],edi
c002191d:	83 e0 01             	and    eax,0x1
c0021920:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021927:	83 ec 0c             	sub    esp,0xc
c002192a:	89 13                	mov    DWORD PTR [ebx],edx
c002192c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021933:	89 03                	mov    DWORD PTR [ebx],eax
c0021935:	56                   	push   esi
c0021936:	e8 6e dc fe ff       	call   c000f5a9 <free>
c002193b:	83 c4 10             	add    esp,0x10
c002193e:	b0 01                	mov    al,0x1
c0021940:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021946:	5b                   	pop    ebx
c0021947:	5e                   	pop    esi
c0021948:	5f                   	pop    edi
c0021949:	5d                   	pop    ebp
c002194a:	c3                   	ret    

c002194b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002194b:	55                   	push   ebp
c002194c:	57                   	push   edi
c002194d:	56                   	push   esi
c002194e:	53                   	push   ebx
c002194f:	83 ec 20             	sub    esp,0x20
c0021952:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021956:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002195a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002195e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021966:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002196e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021973:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021979:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002197f:	57                   	push   edi
c0021980:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021984:	50                   	push   eax
c0021985:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021989:	50                   	push   eax
c002198a:	e8 95 fd ff ff       	call   c0021724 <readRoot(unsigned int*, unsigned int*, char)>
c002198f:	5a                   	pop    edx
c0021990:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021994:	e8 d3 ed fd ff       	call   c000076c <strlen>
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	83 f8 03             	cmp    eax,0x3
c002199f:	77 17                	ja     c00219b8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00219a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a5:	89 03                	mov    DWORD PTR [ebx],eax
c00219a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219ab:	89 06                	mov    DWORD PTR [esi],eax
c00219ad:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00219b4:	b0 01                	mov    al,0x1
c00219b6:	eb 19                	jmp    c00219d1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00219b8:	50                   	push   eax
c00219b9:	55                   	push   ebp
c00219ba:	57                   	push   edi
c00219bb:	56                   	push   esi
c00219bc:	53                   	push   ebx
c00219bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00219c9:	e8 aa fd ff ff       	call   c0021778 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00219ce:	83 c4 20             	add    esp,0x20
c00219d1:	83 c4 1c             	add    esp,0x1c
c00219d4:	5b                   	pop    ebx
c00219d5:	5e                   	pop    esi
c00219d6:	5f                   	pop    edi
c00219d7:	5d                   	pop    ebp
c00219d8:	c3                   	ret    
c00219d9:	90                   	nop

c00219da <ISO9660::open(char const*, void**, FileOpenMode)>:
c00219da:	57                   	push   edi
c00219db:	56                   	push   esi
c00219dc:	53                   	push   ebx
c00219dd:	83 ec 10             	sub    esp,0x10
c00219e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219e8:	85 ff                	test   edi,edi
c00219ea:	0f 84 8b 00 00 00    	je     c0021a7b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00219f0:	85 f6                	test   esi,esi
c00219f2:	0f 84 83 00 00 00    	je     c0021a7b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00219f8:	b8 03 00 00 00       	mov    eax,0x3
c00219fd:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021a02:	75 7c                	jne    c0021a80 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a04:	83 ec 0c             	sub    esp,0xc
c0021a07:	6a 1c                	push   0x1c
c0021a09:	e8 8b db fe ff       	call   c000f599 <malloc>
c0021a0e:	89 07                	mov    DWORD PTR [edi],eax
c0021a10:	89 c3                	mov    ebx,eax
c0021a12:	58                   	pop    eax
c0021a13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a17:	50                   	push   eax
c0021a18:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a1b:	50                   	push   eax
c0021a1c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a20:	50                   	push   eax
c0021a21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a25:	50                   	push   eax
c0021a26:	56                   	push   esi
c0021a27:	e8 1f ff ff ff       	call   c002194b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a2c:	83 c4 20             	add    esp,0x20
c0021a2f:	84 c0                	test   al,al
c0021a31:	74 07                	je     c0021a3a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021a33:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a38:	74 0b                	je     c0021a45 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021a3a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a3e:	b8 01 00 00 00       	mov    eax,0x1
c0021a43:	eb 3b                	jmp    c0021a80 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a49:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a4d:	89 03                	mov    DWORD PTR [ebx],eax
c0021a4f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a5a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a72:	8a 06                	mov    al,BYTE PTR [esi]
c0021a74:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a77:	31 c0                	xor    eax,eax
c0021a79:	eb 05                	jmp    c0021a80 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a7b:	b8 04 00 00 00       	mov    eax,0x4
c0021a80:	83 c4 10             	add    esp,0x10
c0021a83:	5b                   	pop    ebx
c0021a84:	5e                   	pop    esi
c0021a85:	5f                   	pop    edi
c0021a86:	c3                   	ret    
c0021a87:	90                   	nop

c0021a88 <ISO9660::exists(char const*)>:
c0021a88:	83 ec 28             	sub    esp,0x28
c0021a8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a8f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021a93:	52                   	push   edx
c0021a94:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021a97:	52                   	push   edx
c0021a98:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021a9c:	52                   	push   edx
c0021a9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021aa1:	52                   	push   edx
c0021aa2:	50                   	push   eax
c0021aa3:	e8 a3 fe ff ff       	call   c002194b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021aa8:	83 c4 3c             	add    esp,0x3c
c0021aab:	c3                   	ret    

c0021aac <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021aac:	56                   	push   esi
c0021aad:	53                   	push   ebx
c0021aae:	83 ec 14             	sub    esp,0x14
c0021ab1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021ab5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ab9:	85 db                	test   ebx,ebx
c0021abb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021abf:	0f 94 c2             	sete   dl
c0021ac2:	85 f6                	test   esi,esi
c0021ac4:	0f 94 c0             	sete   al
c0021ac7:	08 c2                	or     dl,al
c0021ac9:	75 68                	jne    c0021b33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021acb:	85 c9                	test   ecx,ecx
c0021acd:	74 64                	je     c0021b33 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021acf:	83 ec 0c             	sub    esp,0xc
c0021ad2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021ad5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ad9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021adf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ae6:	50                   	push   eax
c0021ae7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021aea:	50                   	push   eax
c0021aeb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021aef:	50                   	push   eax
c0021af0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021af4:	50                   	push   eax
c0021af5:	51                   	push   ecx
c0021af6:	e8 50 fe ff ff       	call   c002194b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021afb:	83 c4 20             	add    esp,0x20
c0021afe:	ba 01 00 00 00       	mov    edx,0x1
c0021b03:	84 c0                	test   al,al
c0021b05:	74 31                	je     c0021b38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b12:	89 03                	mov    DWORD PTR [ebx],eax
c0021b14:	ba 00 00 00 00       	mov    edx,0x0
c0021b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b1d:	85 c0                	test   eax,eax
c0021b1f:	0f 95 06             	setne  BYTE PTR [esi]
c0021b22:	74 14                	je     c0021b38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b24:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b2a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b31:	eb 05                	jmp    c0021b38 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b33:	ba 04 00 00 00       	mov    edx,0x4
c0021b38:	83 c4 14             	add    esp,0x14
c0021b3b:	89 d0                	mov    eax,edx
c0021b3d:	5b                   	pop    ebx
c0021b3e:	5e                   	pop    esi
c0021b3f:	c3                   	ret    

c0021b40 <ISO9660::openDir(char const*, void**)>:
c0021b40:	57                   	push   edi
c0021b41:	56                   	push   esi
c0021b42:	53                   	push   ebx
c0021b43:	83 ec 10             	sub    esp,0x10
c0021b46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021b4a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b4e:	85 ff                	test   edi,edi
c0021b50:	74 7b                	je     c0021bcd <ISO9660::openDir(char const*, void**)+0x8d>
c0021b52:	85 f6                	test   esi,esi
c0021b54:	74 77                	je     c0021bcd <ISO9660::openDir(char const*, void**)+0x8d>
c0021b56:	83 ec 0c             	sub    esp,0xc
c0021b59:	6a 1c                	push   0x1c
c0021b5b:	e8 39 da fe ff       	call   c000f599 <malloc>
c0021b60:	89 07                	mov    DWORD PTR [edi],eax
c0021b62:	89 c3                	mov    ebx,eax
c0021b64:	58                   	pop    eax
c0021b65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b69:	50                   	push   eax
c0021b6a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021b6d:	50                   	push   eax
c0021b6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b72:	50                   	push   eax
c0021b73:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b77:	50                   	push   eax
c0021b78:	56                   	push   esi
c0021b79:	e8 cd fd ff ff       	call   c002194b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b7e:	83 c4 20             	add    esp,0x20
c0021b81:	84 c0                	test   al,al
c0021b83:	74 07                	je     c0021b8c <ISO9660::openDir(char const*, void**)+0x4c>
c0021b85:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021b8a:	75 0b                	jne    c0021b97 <ISO9660::openDir(char const*, void**)+0x57>
c0021b8c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021b90:	b8 01 00 00 00       	mov    eax,0x1
c0021b95:	eb 3b                	jmp    c0021bd2 <ISO9660::openDir(char const*, void**)+0x92>
c0021b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b9b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021b9f:	89 03                	mov    DWORD PTR [ebx],eax
c0021ba1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021bac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021bb3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021bbd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021bc4:	8a 06                	mov    al,BYTE PTR [esi]
c0021bc6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021bc9:	31 c0                	xor    eax,eax
c0021bcb:	eb 05                	jmp    c0021bd2 <ISO9660::openDir(char const*, void**)+0x92>
c0021bcd:	b8 04 00 00 00       	mov    eax,0x4
c0021bd2:	83 c4 10             	add    esp,0x10
c0021bd5:	5b                   	pop    ebx
c0021bd6:	5e                   	pop    esi
c0021bd7:	5f                   	pop    edi
c0021bd8:	c3                   	ret    
c0021bd9:	90                   	nop

c0021bda <ISO9660::ISO9660()>:
c0021bda:	83 ec 0c             	sub    esp,0xc
c0021bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be1:	83 ec 0c             	sub    esp,0xc
c0021be4:	50                   	push   eax
c0021be5:	e8 80 0e ff ff       	call   c0012a6a <Filesystem::Filesystem()>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c0021bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf6:	89 10                	mov    DWORD PTR [eax],edx
c0021bf8:	90                   	nop
c0021bf9:	83 c4 0c             	add    esp,0xc
c0021bfc:	c3                   	ret    
c0021bfd:	90                   	nop

c0021bfe <SoundChannel::SoundChannel(int, int, int, int)>:
c0021bfe:	83 ec 1c             	sub    esp,0x1c
c0021c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c05:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021c09:	89 10                	mov    DWORD PTR [eax],edx
c0021c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c0f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c13:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c1a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c21:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021c26:	75 23                	jne    c0021c4b <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021c2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c35:	0f af c2             	imul   eax,edx
c0021c38:	85 c0                	test   eax,eax
c0021c3a:	79 03                	jns    c0021c3f <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021c3c:	83 c0 03             	add    eax,0x3
c0021c3f:	c1 f8 02             	sar    eax,0x2
c0021c42:	05 a0 0f 00 00       	add    eax,0xfa0
c0021c47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021c53:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c5a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021c73:	c1 e0 02             	shl    eax,0x2
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	50                   	push   eax
c0021c7a:	e8 1a d9 fe ff       	call   c000f599 <malloc>
c0021c7f:	83 c4 10             	add    esp,0x10
c0021c82:	89 c2                	mov    edx,eax
c0021c84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c88:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021c8b:	83 ec 04             	sub    esp,0x4
c0021c8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c92:	50                   	push   eax
c0021c93:	6a 01                	push   0x1
c0021c95:	6a 04                	push   0x4
c0021c97:	e8 c9 6e fe ff       	call   c0008b65 <src_new>
c0021c9c:	83 c4 10             	add    esp,0x10
c0021c9f:	89 c2                	mov    edx,eax
c0021ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cac:	85 c0                	test   eax,eax
c0021cae:	74 10                	je     c0021cc0 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021cb0:	83 ec 0c             	sub    esp,0xc
c0021cb3:	68 40 c0 02 c0       	push   0xc002c040
c0021cb8:	e8 0e 82 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0021cbd:	83 c4 10             	add    esp,0x10
c0021cc0:	a0 a0 1d 03 c0       	mov    al,ds:0xc0031da0
c0021cc5:	83 f0 01             	xor    eax,0x1
c0021cc8:	84 c0                	test   al,al
c0021cca:	74 57                	je     c0021d23 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021ccc:	a1 5c c0 02 c0       	mov    eax,ds:0xc002c05c
c0021cd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021cd5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021cdd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021ce5:	7f 35                	jg     c0021d1c <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021ce7:	83 ec 0c             	sub    esp,0xc
c0021cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021cee:	e8 dc 53 00 00       	call   c00270cf <__floatsisf>
c0021cf3:	83 c4 10             	add    esp,0x10
c0021cf6:	8b 15 5c c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c05c
c0021cfc:	83 ec 08             	sub    esp,0x8
c0021cff:	52                   	push   edx
c0021d00:	50                   	push   eax
c0021d01:	e8 db 4f 00 00       	call   c0026ce1 <__mulsf3>
c0021d06:	83 c4 10             	add    esp,0x10
c0021d09:	89 c2                	mov    edx,eax
c0021d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d0f:	89 14 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],edx
c0021d16:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d1a:	eb c1                	jmp    c0021cdd <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021d1c:	c6 05 a0 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031da0,0x1
c0021d23:	90                   	nop
c0021d24:	83 c4 1c             	add    esp,0x1c
c0021d27:	c3                   	ret    

c0021d28 <SoundChannel::~SoundChannel()>:
c0021d28:	83 ec 0c             	sub    esp,0xc
c0021d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	50                   	push   eax
c0021d36:	e8 6e d8 fe ff       	call   c000f5a9 <free>
c0021d3b:	83 c4 10             	add    esp,0x10
c0021d3e:	90                   	nop
c0021d3f:	83 c4 0c             	add    esp,0xc
c0021d42:	c3                   	ret    
c0021d43:	90                   	nop

c0021d44 <SoundChannel::getSampleRate()>:
c0021d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4a:	c3                   	ret    
c0021d4b:	90                   	nop

c0021d4c <SoundChannel::getBits()>:
c0021d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d53:	c3                   	ret    

c0021d54 <SoundChannel::getBufferUsed()>:
c0021d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021d5b:	c3                   	ret    

c0021d5c <SoundChannel::getBufferSize()>:
c0021d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d63:	c3                   	ret    

c0021d64 <SoundChannel::unbuffer(float*, int, int)>:
c0021d64:	56                   	push   esi
c0021d65:	53                   	push   ebx
c0021d66:	83 ec 40             	sub    esp,0x40
c0021d69:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021d6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021d70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d74:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021d77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021d7b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021d7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021d83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021d87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021d8f:	e8 3b 53 00 00       	call   c00270cf <__floatsisf>
c0021d94:	5a                   	pop    edx
c0021d95:	89 c6                	mov    esi,eax
c0021d97:	ff 33                	push   DWORD PTR [ebx]
c0021d99:	e8 31 53 00 00       	call   c00270cf <__floatsisf>
c0021d9e:	59                   	pop    ecx
c0021d9f:	5a                   	pop    edx
c0021da0:	50                   	push   eax
c0021da1:	56                   	push   esi
c0021da2:	e8 fd 50 00 00       	call   c0026ea4 <__divsf3>
c0021da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021daa:	e8 f0 65 00 00       	call   c002839f <__extendsfdf2>
c0021daf:	59                   	pop    ecx
c0021db0:	5e                   	pop    esi
c0021db1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021db5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021db9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021dc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dc5:	50                   	push   eax
c0021dc6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021dc9:	e8 8c 69 fe ff       	call   c000875a <src_process>
c0021dce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021dd2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021dd5:	83 c4 0c             	add    esp,0xc
c0021dd8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021ddb:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021dde:	29 d0                	sub    eax,edx
c0021de0:	c1 e0 02             	shl    eax,0x2
c0021de3:	50                   	push   eax
c0021de4:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021de7:	50                   	push   eax
c0021de8:	51                   	push   ecx
c0021de9:	e8 9a e8 fd ff       	call   c0000688 <memmove>
c0021dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021df2:	83 c4 44             	add    esp,0x44
c0021df5:	5b                   	pop    ebx
c0021df6:	5e                   	pop    esi
c0021df7:	c3                   	ret    

c0021df8 <SoundChannel::buffer16(short*, int)>:
c0021df8:	55                   	push   ebp
c0021df9:	57                   	push   edi
c0021dfa:	56                   	push   esi
c0021dfb:	53                   	push   ebx
c0021dfc:	83 ec 1c             	sub    esp,0x1c
c0021dff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021e03:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e06:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e09:	0f 84 d2 00 00 00    	je     c0021ee1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021e13:	85 ed                	test   ebp,ebp
c0021e15:	0f 8e c6 00 00 00    	jle    c0021ee1 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e1b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e1f:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021e24:	83 ec 0c             	sub    esp,0xc
c0021e27:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021e2a:	50                   	push   eax
c0021e2b:	e8 9f 52 00 00       	call   c00270cf <__floatsisf>
c0021e30:	59                   	pop    ecx
c0021e31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e34:	5f                   	pop    edi
c0021e35:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e38:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e3b:	55                   	push   ebp
c0021e3c:	50                   	push   eax
c0021e3d:	e8 9f 4e 00 00       	call   c0026ce1 <__mulsf3>
c0021e42:	83 c4 10             	add    esp,0x10
c0021e45:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e48:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e4b:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e4e:	0f 84 99 00 00 00    	je     c0021eed <SoundChannel::buffer16(short*, int)+0xf5>
c0021e54:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021e59:	74 78                	je     c0021ed3 <SoundChannel::buffer16(short*, int)+0xdb>
c0021e5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021e66:	50                   	push   eax
c0021e67:	e8 63 52 00 00       	call   c00270cf <__floatsisf>
c0021e6c:	5f                   	pop    edi
c0021e6d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e70:	5a                   	pop    edx
c0021e71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e74:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e77:	55                   	push   ebp
c0021e78:	50                   	push   eax
c0021e79:	e8 63 4e 00 00       	call   c0026ce1 <__mulsf3>
c0021e7e:	83 c4 10             	add    esp,0x10
c0021e81:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e84:	be 02 00 00 00       	mov    esi,0x2
c0021e89:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e8c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e8f:	74 46                	je     c0021ed7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e91:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021e95:	eb 36                	jmp    c0021ecd <SoundChannel::buffer16(short*, int)+0xd5>
c0021e97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e9b:	83 ec 0c             	sub    esp,0xc
c0021e9e:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021ea2:	46                   	inc    esi
c0021ea3:	50                   	push   eax
c0021ea4:	e8 26 52 00 00       	call   c00270cf <__floatsisf>
c0021ea9:	5a                   	pop    edx
c0021eaa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021ead:	59                   	pop    ecx
c0021eae:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021eb1:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021eb8:	50                   	push   eax
c0021eb9:	e8 23 4e 00 00       	call   c0026ce1 <__mulsf3>
c0021ebe:	83 c4 10             	add    esp,0x10
c0021ec1:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021ec5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021ec8:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021ecb:	74 0a                	je     c0021ed7 <SoundChannel::buffer16(short*, int)+0xdf>
c0021ecd:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021ed1:	75 c4                	jne    c0021e97 <SoundChannel::buffer16(short*, int)+0x9f>
c0021ed3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021ed7:	83 c4 1c             	add    esp,0x1c
c0021eda:	89 f0                	mov    eax,esi
c0021edc:	5b                   	pop    ebx
c0021edd:	5e                   	pop    esi
c0021ede:	5f                   	pop    edi
c0021edf:	5d                   	pop    ebp
c0021ee0:	c3                   	ret    
c0021ee1:	83 c4 1c             	add    esp,0x1c
c0021ee4:	31 f6                	xor    esi,esi
c0021ee6:	5b                   	pop    ebx
c0021ee7:	89 f0                	mov    eax,esi
c0021ee9:	5e                   	pop    esi
c0021eea:	5f                   	pop    edi
c0021eeb:	5d                   	pop    ebp
c0021eec:	c3                   	ret    
c0021eed:	be 01 00 00 00       	mov    esi,0x1
c0021ef2:	eb e3                	jmp    c0021ed7 <SoundChannel::buffer16(short*, int)+0xdf>

c0021ef4 <SoundChannel::buffer8(unsigned char*, int)>:
c0021ef4:	55                   	push   ebp
c0021ef5:	57                   	push   edi
c0021ef6:	56                   	push   esi
c0021ef7:	53                   	push   ebx
c0021ef8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021efc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021f00:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f07:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f0a:	74 7a                	je     c0021f86 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f0c:	85 ff                	test   edi,edi
c0021f0e:	7e 76                	jle    c0021f86 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f10:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021f14:	8d 70 01             	lea    esi,[eax+0x1]
c0021f17:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f1a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f1d:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021f24:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f27:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f2a:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f2d:	74 5e                	je     c0021f8d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021f2f:	83 ff 01             	cmp    edi,0x1
c0021f32:	74 4b                	je     c0021f7f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021f34:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021f38:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f3b:	8d 70 01             	lea    esi,[eax+0x1]
c0021f3e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f41:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021f48:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f4b:	b8 02 00 00 00       	mov    eax,0x2
c0021f50:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f53:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f56:	75 23                	jne    c0021f7b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021f58:	eb 27                	jmp    c0021f81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f5a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021f5f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f62:	40                   	inc    eax
c0021f63:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f66:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f69:	8b 1c 9d a0 19 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce660]
c0021f70:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021f73:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f76:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f79:	74 06                	je     c0021f81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f7b:	39 c7                	cmp    edi,eax
c0021f7d:	75 db                	jne    c0021f5a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021f7f:	89 f8                	mov    eax,edi
c0021f81:	5b                   	pop    ebx
c0021f82:	5e                   	pop    esi
c0021f83:	5f                   	pop    edi
c0021f84:	5d                   	pop    ebp
c0021f85:	c3                   	ret    
c0021f86:	5b                   	pop    ebx
c0021f87:	31 c0                	xor    eax,eax
c0021f89:	5e                   	pop    esi
c0021f8a:	5f                   	pop    edi
c0021f8b:	5d                   	pop    ebp
c0021f8c:	c3                   	ret    
c0021f8d:	b8 01 00 00 00       	mov    eax,0x1
c0021f92:	eb ed                	jmp    c0021f81 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021f94 <SoundDevice::SoundDevice(char const*)>:
c0021f94:	83 ec 1c             	sub    esp,0x1c
c0021f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f9b:	83 ec 08             	sub    esp,0x8
c0021f9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021fa2:	50                   	push   eax
c0021fa3:	e8 f4 1d ff ff       	call   c0013d9c <Device::Device(char const*)>
c0021fa8:	83 c4 10             	add    esp,0x10
c0021fab:	ba 68 c0 02 c0       	mov    edx,0xc002c068
c0021fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fb4:	89 10                	mov    DWORD PTR [eax],edx
c0021fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fba:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fc8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021fd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fda:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021fdf:	7f 19                	jg     c0021ffa <SoundDevice::SoundDevice(char const*)+0x66>
c0021fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fe9:	83 c2 54             	add    edx,0x54
c0021fec:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021ff4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ff8:	eb e0                	jmp    c0021fda <SoundDevice::SoundDevice(char const*)+0x46>
c0021ffa:	90                   	nop
c0021ffb:	83 c4 1c             	add    esp,0x1c
c0021ffe:	c3                   	ret    
c0021fff:	90                   	nop

c0022000 <SoundDevice::~SoundDevice()>:
c0022000:	53                   	push   ebx
c0022001:	83 ec 18             	sub    esp,0x18
c0022004:	ba 68 c0 02 c0       	mov    edx,0xc002c068
c0022009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002200d:	89 10                	mov    DWORD PTR [eax],edx
c002200f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022017:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002201c:	7f 46                	jg     c0022064 <SoundDevice::~SoundDevice()+0x64>
c002201e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022022:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022026:	83 c2 54             	add    edx,0x54
c0022029:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002202d:	85 c0                	test   eax,eax
c002202f:	74 2d                	je     c002205e <SoundDevice::~SoundDevice()+0x5e>
c0022031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022035:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022039:	83 c2 54             	add    edx,0x54
c002203c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022040:	85 db                	test   ebx,ebx
c0022042:	74 1a                	je     c002205e <SoundDevice::~SoundDevice()+0x5e>
c0022044:	83 ec 0c             	sub    esp,0xc
c0022047:	53                   	push   ebx
c0022048:	e8 db fc ff ff       	call   c0021d28 <SoundChannel::~SoundChannel()>
c002204d:	83 c4 10             	add    esp,0x10
c0022050:	83 ec 08             	sub    esp,0x8
c0022053:	6a 2c                	push   0x2c
c0022055:	53                   	push   ebx
c0022056:	e8 2c 06 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c002205b:	83 c4 10             	add    esp,0x10
c002205e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022062:	eb b3                	jmp    c0022017 <SoundDevice::~SoundDevice()+0x17>
c0022064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022068:	83 ec 0c             	sub    esp,0xc
c002206b:	50                   	push   eax
c002206c:	e8 f5 19 ff ff       	call   c0013a66 <Device::~Device()>
c0022071:	83 c4 10             	add    esp,0x10
c0022074:	90                   	nop
c0022075:	83 c4 18             	add    esp,0x18
c0022078:	5b                   	pop    ebx
c0022079:	c3                   	ret    

c002207a <SoundDevice::~SoundDevice()>:
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	83 ec 0c             	sub    esp,0xc
c0022080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022084:	e8 77 ff ff ff       	call   c0022000 <SoundDevice::~SoundDevice()>
c0022089:	83 c4 10             	add    esp,0x10
c002208c:	83 ec 08             	sub    esp,0x8
c002208f:	68 e4 01 00 00       	push   0x1e4
c0022094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022098:	e8 ea 05 ff ff       	call   c0012687 <operator delete(void*, unsigned long)>
c002209d:	83 c4 10             	add    esp,0x10
c00220a0:	83 c4 0c             	add    esp,0xc
c00220a3:	c3                   	ret    

c00220a4 <SoundDevice::getFreeChannelNum()>:
c00220a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220a8:	31 c0                	xor    eax,eax
c00220aa:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00220b2:	74 09                	je     c00220bd <SoundDevice::getFreeChannelNum()+0x19>
c00220b4:	40                   	inc    eax
c00220b5:	83 f8 20             	cmp    eax,0x20
c00220b8:	75 f0                	jne    c00220aa <SoundDevice::getFreeChannelNum()+0x6>
c00220ba:	83 c8 ff             	or     eax,0xffffffff
c00220bd:	c3                   	ret    

c00220be <SoundDevice::addChannel(SoundChannel*)>:
c00220be:	56                   	push   esi
c00220bf:	53                   	push   ebx
c00220c0:	51                   	push   ecx
c00220c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00220c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00220c9:	53                   	push   ebx
c00220ca:	e8 d5 ff ff ff       	call   c00220a4 <SoundDevice::getFreeChannelNum()>
c00220cf:	5a                   	pop    edx
c00220d0:	83 f8 ff             	cmp    eax,0xffffffff
c00220d3:	74 51                	je     c0022126 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00220d5:	85 f6                	test   esi,esi
c00220d7:	74 4d                	je     c0022126 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00220d9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00220e0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00220e7:	75 30                	jne    c0022119 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00220e9:	83 ec 0c             	sub    esp,0xc
c00220ec:	56                   	push   esi
c00220ed:	e8 52 fc ff ff       	call   c0021d44 <SoundChannel::getSampleRate()>
c00220f2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00220f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00220fb:	e8 4c fc ff ff       	call   c0021d4c <SoundChannel::getBits()>
c0022100:	83 c4 0c             	add    esp,0xc
c0022103:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022109:	8b 13                	mov    edx,DWORD PTR [ebx]
c002210b:	50                   	push   eax
c002210c:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022112:	53                   	push   ebx
c0022113:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022116:	83 c4 10             	add    esp,0x10
c0022119:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002211f:	b8 01 00 00 00       	mov    eax,0x1
c0022124:	eb 03                	jmp    c0022129 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022126:	83 c8 ff             	or     eax,0xffffffff
c0022129:	5a                   	pop    edx
c002212a:	5b                   	pop    ebx
c002212b:	5e                   	pop    esi
c002212c:	c3                   	ret    
c002212d:	90                   	nop

c002212e <SoundDevice::removeChannel(int)>:
c002212e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022136:	83 fa 1f             	cmp    edx,0x1f
c0022139:	77 23                	ja     c002215e <SoundDevice::removeChannel(int)+0x30>
c002213b:	8d 14 90             	lea    edx,[eax+edx*4]
c002213e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022145:	74 17                	je     c002215e <SoundDevice::removeChannel(int)+0x30>
c0022147:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022151:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022157:	75 05                	jne    c002215e <SoundDevice::removeChannel(int)+0x30>
c0022159:	8b 00                	mov    eax,DWORD PTR [eax]
c002215b:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002215e:	c3                   	ret    
c002215f:	90                   	nop

c0022160 <SoundDevice::floatTo16(float*, short*, int)>:
c0022160:	57                   	push   edi
c0022161:	56                   	push   esi
c0022162:	53                   	push   ebx
c0022163:	31 db                	xor    ebx,ebx
c0022165:	83 ec 10             	sub    esp,0x10
c0022168:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002216c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022170:	0f 8d d0 00 00 00    	jge    c0022246 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002217d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022180:	e8 1a 62 00 00       	call   c002839f <__extendsfdf2>
c0022185:	83 c4 10             	add    esp,0x10
c0022188:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002218c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022190:	68 00 00 f0 3f       	push   0x3ff00000
c0022195:	6a 00                	push   0x0
c0022197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002219b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002219f:	e8 87 51 00 00       	call   c002732b <__adddf3>
c00221a4:	83 c4 10             	add    esp,0x10
c00221a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221af:	68 00 00 e0 3f       	push   0x3fe00000
c00221b4:	6a 00                	push   0x0
c00221b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221be:	e8 e5 57 00 00       	call   c00279a8 <__muldf3>
c00221c3:	83 c4 10             	add    esp,0x10
c00221c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221ce:	68 c0 ff df 40       	push   0x40dfffc0
c00221d3:	6a 00                	push   0x0
c00221d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221dd:	e8 c6 57 00 00       	call   c00279a8 <__muldf3>
c00221e2:	59                   	pop    ecx
c00221e3:	5f                   	pop    edi
c00221e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00221e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00221ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f4:	e8 82 60 00 00       	call   c002827b <__truncdfsf2>
c00221f9:	5a                   	pop    edx
c00221fa:	89 c7                	mov    edi,eax
c00221fc:	59                   	pop    ecx
c00221fd:	68 00 fe ff 46       	push   0x46fffe00
c0022202:	50                   	push   eax
c0022203:	e8 1d 51 00 00       	call   c0027325 <__gesf2>
c0022208:	83 c4 10             	add    esp,0x10
c002220b:	85 c0                	test   eax,eax
c002220d:	78 08                	js     c0022217 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002220f:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022215:	eb 29                	jmp    c0022240 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022217:	50                   	push   eax
c0022218:	50                   	push   eax
c0022219:	6a 00                	push   0x0
c002221b:	57                   	push   edi
c002221c:	e8 08 51 00 00       	call   c0027329 <__lesf2>
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	85 c0                	test   eax,eax
c0022226:	7f 08                	jg     c0022230 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022228:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002222e:	eb 10                	jmp    c0022240 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022230:	83 ec 0c             	sub    esp,0xc
c0022233:	57                   	push   edi
c0022234:	e8 03 62 00 00       	call   c002843c <lrintf>
c0022239:	83 c4 10             	add    esp,0x10
c002223c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022240:	43                   	inc    ebx
c0022241:	e9 26 ff ff ff       	jmp    c002216c <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022246:	83 c4 10             	add    esp,0x10
c0022249:	5b                   	pop    ebx
c002224a:	5e                   	pop    esi
c002224b:	5f                   	pop    edi
c002224c:	c3                   	ret    
c002224d:	90                   	nop

c002224e <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002224e:	57                   	push   edi
c002224f:	56                   	push   esi
c0022250:	53                   	push   ebx
c0022251:	31 db                	xor    ebx,ebx
c0022253:	83 ec 10             	sub    esp,0x10
c0022256:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002225a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002225e:	0f 8d cb 00 00 00    	jge    c002232f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002226b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002226e:	e8 2c 61 00 00       	call   c002839f <__extendsfdf2>
c0022273:	83 c4 10             	add    esp,0x10
c0022276:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002227a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002227e:	68 00 00 f0 3f       	push   0x3ff00000
c0022283:	6a 00                	push   0x0
c0022285:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022289:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002228d:	e8 99 50 00 00       	call   c002732b <__adddf3>
c0022292:	83 c4 10             	add    esp,0x10
c0022295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022299:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002229d:	68 00 00 e0 3f       	push   0x3fe00000
c00222a2:	6a 00                	push   0x0
c00222a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222ac:	e8 f7 56 00 00       	call   c00279a8 <__muldf3>
c00222b1:	83 c4 10             	add    esp,0x10
c00222b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222bc:	68 00 00 60 40       	push   0x40600000
c00222c1:	6a 00                	push   0x0
c00222c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222cb:	e8 d8 56 00 00       	call   c00279a8 <__muldf3>
c00222d0:	59                   	pop    ecx
c00222d1:	5f                   	pop    edi
c00222d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00222d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00222da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222e2:	e8 94 5f 00 00       	call   c002827b <__truncdfsf2>
c00222e7:	5a                   	pop    edx
c00222e8:	89 c7                	mov    edi,eax
c00222ea:	59                   	pop    ecx
c00222eb:	68 00 00 fe 42       	push   0x42fe0000
c00222f0:	50                   	push   eax
c00222f1:	e8 2f 50 00 00       	call   c0027325 <__gesf2>
c00222f6:	83 c4 10             	add    esp,0x10
c00222f9:	85 c0                	test   eax,eax
c00222fb:	78 06                	js     c0022303 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00222fd:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022301:	eb 26                	jmp    c0022329 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022303:	50                   	push   eax
c0022304:	50                   	push   eax
c0022305:	6a 00                	push   0x0
c0022307:	57                   	push   edi
c0022308:	e8 1c 50 00 00       	call   c0027329 <__lesf2>
c002230d:	83 c4 10             	add    esp,0x10
c0022310:	85 c0                	test   eax,eax
c0022312:	7f 06                	jg     c002231a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022314:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022318:	eb 0f                	jmp    c0022329 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002231a:	83 ec 0c             	sub    esp,0xc
c002231d:	57                   	push   edi
c002231e:	e8 19 61 00 00       	call   c002843c <lrintf>
c0022323:	83 c4 10             	add    esp,0x10
c0022326:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022329:	43                   	inc    ebx
c002232a:	e9 2b ff ff ff       	jmp    c002225a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002232f:	83 c4 10             	add    esp,0x10
c0022332:	5b                   	pop    ebx
c0022333:	5e                   	pop    esi
c0022334:	5f                   	pop    edi
c0022335:	c3                   	ret    

c0022336 <SoundDevice::getAudio(int, float*, float*)>:
c0022336:	55                   	push   ebp
c0022337:	31 ed                	xor    ebp,ebp
c0022339:	57                   	push   edi
c002233a:	56                   	push   esi
c002233b:	31 f6                	xor    esi,esi
c002233d:	53                   	push   ebx
c002233e:	83 ec 20             	sub    esp,0x20
c0022341:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022345:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022349:	c1 e0 02             	shl    eax,0x2
c002234c:	50                   	push   eax
c002234d:	6a 00                	push   0x0
c002234f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022353:	e8 f8 e3 fd ff       	call   c0000750 <memset>
c0022358:	83 c4 10             	add    esp,0x10
c002235b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022363:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002236a:	85 c9                	test   ecx,ecx
c002236c:	74 52                	je     c00223c0 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c002236e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022372:	99                   	cdq    
c0022373:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022379:	50                   	push   eax
c002237a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022380:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022384:	51                   	push   ecx
c0022385:	e8 da f9 ff ff       	call   c0021d64 <SoundChannel::unbuffer(float*, int, int)>
c002238a:	31 d2                	xor    edx,edx
c002238c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022390:	83 c4 10             	add    esp,0x10
c0022393:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022397:	7d 1e                	jge    c00223b7 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022399:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c002239d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00223a1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00223a4:	89 cf                	mov    edi,ecx
c00223a6:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00223ac:	0f af ca             	imul   ecx,edx
c00223af:	42                   	inc    edx
c00223b0:	01 e9                	add    ecx,ebp
c00223b2:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00223b5:	eb dc                	jmp    c0022393 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00223b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00223bb:	45                   	inc    ebp
c00223bc:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00223c0:	46                   	inc    esi
c00223c1:	83 fe 20             	cmp    esi,0x20
c00223c4:	75 9d                	jne    c0022363 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00223c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223ca:	83 c4 1c             	add    esp,0x1c
c00223cd:	5b                   	pop    ebx
c00223ce:	5e                   	pop    esi
c00223cf:	5f                   	pop    edi
c00223d0:	5d                   	pop    ebp
c00223d1:	c3                   	ret    

c00223d2 <PCI::open(int, int, void*)>:
c00223d2:	83 ec 18             	sub    esp,0x18
c00223d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00223d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00223dd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00223e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00223e5:	50                   	push   eax
c00223e6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00223e9:	31 c0                	xor    eax,eax
c00223eb:	83 c4 1c             	add    esp,0x1c
c00223ee:	c3                   	ret    
c00223ef:	90                   	nop

c00223f0 <PCI::close(int, int, void*)>:
c00223f0:	31 c0                	xor    eax,eax
c00223f2:	c3                   	ret    
c00223f3:	90                   	nop

c00223f4 <PCI::PCI()>:
c00223f4:	83 ec 0c             	sub    esp,0xc
c00223f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223fb:	83 ec 08             	sub    esp,0x8
c00223fe:	68 98 c0 02 c0       	push   0xc002c098
c0022403:	50                   	push   eax
c0022404:	e8 f7 0f ff ff       	call   c0013400 <Bus::Bus(char const*)>
c0022409:	83 c4 10             	add    esp,0x10
c002240c:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0022411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022415:	89 10                	mov    DWORD PTR [eax],edx
c0022417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022429:	a3 a4 1d 03 c0       	mov    ds:0xc0031da4,eax
c002242e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022432:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022438:	0f b6 d0             	movzx  edx,al
c002243b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022450:	0f b6 d0             	movzx  edx,al
c0022453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022457:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002245c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022460:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022466:	8d 50 01             	lea    edx,[eax+0x1]
c0022469:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002246d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022473:	0f b6 d0             	movzx  edx,al
c0022476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002247e:	83 c9 c0             	or     ecx,0xffffffc0
c0022481:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022485:	90                   	nop
c0022486:	83 c4 0c             	add    esp,0xc
c0022489:	c3                   	ret    

c002248a <PCI::readBAR8(unsigned int, int)>:
c002248a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002248e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022492:	f6 c2 01             	test   dl,0x1
c0022495:	74 07                	je     c002249e <PCI::readBAR8(unsigned int, int)+0x14>
c0022497:	83 e2 fc             	and    edx,0xfffffffc
c002249a:	01 c2                	add    edx,eax
c002249c:	ec                   	in     al,dx
c002249d:	c3                   	ret    
c002249e:	83 e2 f0             	and    edx,0xfffffff0
c00224a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00224a4:	c3                   	ret    
c00224a5:	90                   	nop

c00224a6 <PCI::readBAR16(unsigned int, int)>:
c00224a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224ae:	f6 c2 01             	test   dl,0x1
c00224b1:	74 08                	je     c00224bb <PCI::readBAR16(unsigned int, int)+0x15>
c00224b3:	83 e2 fc             	and    edx,0xfffffffc
c00224b6:	01 c2                	add    edx,eax
c00224b8:	66 ed                	in     ax,dx
c00224ba:	c3                   	ret    
c00224bb:	83 e2 f0             	and    edx,0xfffffff0
c00224be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00224c2:	c3                   	ret    
c00224c3:	90                   	nop

c00224c4 <PCI::readBAR32(unsigned int, int)>:
c00224c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224cc:	f6 c2 01             	test   dl,0x1
c00224cf:	74 07                	je     c00224d8 <PCI::readBAR32(unsigned int, int)+0x14>
c00224d1:	83 e2 fc             	and    edx,0xfffffffc
c00224d4:	01 c2                	add    edx,eax
c00224d6:	ed                   	in     eax,dx
c00224d7:	c3                   	ret    
c00224d8:	83 e2 f0             	and    edx,0xfffffff0
c00224db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00224de:	c3                   	ret    
c00224df:	90                   	nop

c00224e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00224e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224ec:	f6 c2 01             	test   dl,0x1
c00224ef:	74 07                	je     c00224f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00224f1:	83 e2 fc             	and    edx,0xfffffffc
c00224f4:	01 ca                	add    edx,ecx
c00224f6:	ee                   	out    dx,al
c00224f7:	c3                   	ret    
c00224f8:	83 e2 f0             	and    edx,0xfffffff0
c00224fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00224fe:	c3                   	ret    
c00224ff:	90                   	nop

c0022500 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022508:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002250c:	f6 c2 01             	test   dl,0x1
c002250f:	74 08                	je     c0022519 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022511:	83 e2 fc             	and    edx,0xfffffffc
c0022514:	01 ca                	add    edx,ecx
c0022516:	66 ef                	out    dx,ax
c0022518:	c3                   	ret    
c0022519:	83 e2 f0             	and    edx,0xfffffff0
c002251c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022520:	c3                   	ret    
c0022521:	90                   	nop

c0022522 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002252a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002252e:	f6 c2 01             	test   dl,0x1
c0022531:	74 07                	je     c002253a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022533:	83 e2 fc             	and    edx,0xfffffffc
c0022536:	01 ca                	add    edx,ecx
c0022538:	ef                   	out    dx,eax
c0022539:	c3                   	ret    
c002253a:	83 e2 f0             	and    edx,0xfffffff0
c002253d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022540:	c3                   	ret    
c0022541:	90                   	nop

c0022542 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022542:	55                   	push   ebp
c0022543:	57                   	push   edi
c0022544:	56                   	push   esi
c0022545:	53                   	push   ebx
c0022546:	83 ec 0c             	sub    esp,0xc
c0022549:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002254d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022551:	89 f0                	mov    eax,esi
c0022553:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022557:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002255b:	3c 07                	cmp    al,0x7
c002255d:	76 10                	jbe    c002256f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002255f:	83 ec 0c             	sub    esp,0xc
c0022562:	68 a0 c0 02 c0       	push   0xc002c0a0
c0022567:	e8 5f 79 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002256c:	83 c4 10             	add    esp,0x10
c002256f:	80 fb 0f             	cmp    bl,0xf
c0022572:	76 10                	jbe    c0022584 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022574:	83 ec 0c             	sub    esp,0xc
c0022577:	68 d0 c0 02 c0       	push   0xc002c0d0
c002257c:	e8 4a 79 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0022581:	83 c4 10             	add    esp,0x10
c0022584:	8d 04 36             	lea    eax,[esi+esi*1]
c0022587:	ba f8 0c 00 00       	mov    edx,0xcf8
c002258c:	83 c8 f0             	or     eax,0xfffffff0
c002258f:	ee                   	out    dx,al
c0022590:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022595:	89 e8                	mov    eax,ebp
c0022597:	ee                   	out    dx,al
c0022598:	83 c4 0c             	add    esp,0xc
c002259b:	89 d8                	mov    eax,ebx
c002259d:	66 81 e7 fc 00       	and    di,0xfc
c00225a2:	5b                   	pop    ebx
c00225a3:	c1 e0 08             	shl    eax,0x8
c00225a6:	5e                   	pop    esi
c00225a7:	09 f8                	or     eax,edi
c00225a9:	5f                   	pop    edi
c00225aa:	66 0d 00 c0          	or     ax,0xc000
c00225ae:	5d                   	pop    ebp
c00225af:	c3                   	ret    

c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225b0:	57                   	push   edi
c00225b1:	56                   	push   esi
c00225b2:	53                   	push   ebx
c00225b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00225b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225bb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00225c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00225c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00225cd:	83 ff 01             	cmp    edi,0x1
c00225d0:	75 3e                	jne    c0022610 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00225d2:	89 de                	mov    esi,ebx
c00225d4:	0f b6 c0             	movzx  eax,al
c00225d7:	81 e6 fc 00 00 00    	and    esi,0xfc
c00225dd:	c1 e0 10             	shl    eax,0x10
c00225e0:	0f b6 c9             	movzx  ecx,cl
c00225e3:	09 f0                	or     eax,esi
c00225e5:	c1 e1 08             	shl    ecx,0x8
c00225e8:	0f b6 d2             	movzx  edx,dl
c00225eb:	09 c8                	or     eax,ecx
c00225ed:	c1 e2 0b             	shl    edx,0xb
c00225f0:	09 d0                	or     eax,edx
c00225f2:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225f7:	0d 00 00 00 80       	or     eax,0x80000000
c00225fc:	ef                   	out    dx,eax
c00225fd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022602:	ed                   	in     eax,dx
c0022603:	83 e3 02             	and    ebx,0x2
c0022606:	0f b6 cb             	movzx  ecx,bl
c0022609:	c1 e1 03             	shl    ecx,0x3
c002260c:	d3 e8                	shr    eax,cl
c002260e:	eb 43                	jmp    c0022653 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022610:	83 ff 02             	cmp    edi,0x2
c0022613:	75 2c                	jne    c0022641 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022615:	83 ec 0c             	sub    esp,0xc
c0022618:	0f b6 c9             	movzx  ecx,cl
c002261b:	0f b6 d2             	movzx  edx,dl
c002261e:	0f b6 fb             	movzx  edi,bl
c0022621:	0f b6 c0             	movzx  eax,al
c0022624:	57                   	push   edi
c0022625:	51                   	push   ecx
c0022626:	52                   	push   edx
c0022627:	50                   	push   eax
c0022628:	56                   	push   esi
c0022629:	e8 14 ff ff ff       	call   c0022542 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002262e:	89 c2                	mov    edx,eax
c0022630:	ed                   	in     eax,dx
c0022631:	83 e3 02             	and    ebx,0x2
c0022634:	83 c4 20             	add    esp,0x20
c0022637:	0f b6 cb             	movzx  ecx,bl
c002263a:	c1 e1 03             	shl    ecx,0x3
c002263d:	d3 e8                	shr    eax,cl
c002263f:	eb 12                	jmp    c0022653 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022641:	83 ec 0c             	sub    esp,0xc
c0022644:	68 00 c1 02 c0       	push   0xc002c100
c0022649:	e8 7d 78 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002264e:	83 c4 10             	add    esp,0x10
c0022651:	31 c0                	xor    eax,eax
c0022653:	5b                   	pop    ebx
c0022654:	5e                   	pop    esi
c0022655:	5f                   	pop    edi
c0022656:	c3                   	ret    
c0022657:	90                   	nop

c0022658 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022658:	83 ec 18             	sub    esp,0x18
c002265b:	6a 00                	push   0x0
c002265d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022662:	50                   	push   eax
c0022663:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022668:	50                   	push   eax
c0022669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266e:	50                   	push   eax
c002266f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022673:	e8 38 ff ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022678:	83 c4 2c             	add    esp,0x2c
c002267b:	c3                   	ret    

c002267c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002267c:	83 ec 18             	sub    esp,0x18
c002267f:	6a 0e                	push   0xe
c0022681:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022686:	50                   	push   eax
c0022687:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002268c:	50                   	push   eax
c002268d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022692:	50                   	push   eax
c0022693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022697:	e8 14 ff ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002269c:	83 c4 2c             	add    esp,0x2c
c002269f:	0f b6 c0             	movzx  eax,al
c00226a2:	c3                   	ret    
c00226a3:	90                   	nop

c00226a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00226a4:	55                   	push   ebp
c00226a5:	57                   	push   edi
c00226a6:	56                   	push   esi
c00226a7:	53                   	push   ebx
c00226a8:	83 ec 18             	sub    esp,0x18
c00226ab:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00226b0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00226b5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00226ba:	6a 0a                	push   0xa
c00226bc:	56                   	push   esi
c00226bd:	55                   	push   ebp
c00226be:	57                   	push   edi
c00226bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00226c3:	e8 e8 fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226c8:	83 c4 14             	add    esp,0x14
c00226cb:	89 c3                	mov    ebx,eax
c00226cd:	6a 0a                	push   0xa
c00226cf:	0f b6 db             	movzx  ebx,bl
c00226d2:	56                   	push   esi
c00226d3:	55                   	push   ebp
c00226d4:	57                   	push   edi
c00226d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00226d9:	e8 d2 fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226de:	83 c4 2c             	add    esp,0x2c
c00226e1:	25 00 ff 00 00       	and    eax,0xff00
c00226e6:	09 d8                	or     eax,ebx
c00226e8:	5b                   	pop    ebx
c00226e9:	5e                   	pop    esi
c00226ea:	5f                   	pop    edi
c00226eb:	5d                   	pop    ebp
c00226ec:	c3                   	ret    
c00226ed:	90                   	nop

c00226ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00226ee:	83 ec 18             	sub    esp,0x18
c00226f1:	6a 08                	push   0x8
c00226f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226f8:	50                   	push   eax
c00226f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226fe:	50                   	push   eax
c00226ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022704:	50                   	push   eax
c0022705:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022709:	e8 a2 fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002270e:	83 c4 2c             	add    esp,0x2c
c0022711:	0f b6 c4             	movzx  eax,ah
c0022714:	c3                   	ret    
c0022715:	90                   	nop

c0022716 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022716:	83 ec 18             	sub    esp,0x18
c0022719:	6a 08                	push   0x8
c002271b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022720:	50                   	push   eax
c0022721:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022726:	50                   	push   eax
c0022727:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002272c:	50                   	push   eax
c002272d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022731:	e8 7a fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022736:	83 c4 2c             	add    esp,0x2c
c0022739:	c3                   	ret    

c002273a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002273a:	83 ec 18             	sub    esp,0x18
c002273d:	6a 3c                	push   0x3c
c002273f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022744:	50                   	push   eax
c0022745:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002274a:	50                   	push   eax
c002274b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022750:	50                   	push   eax
c0022751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022755:	e8 56 fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002275a:	83 c4 2c             	add    esp,0x2c
c002275d:	c3                   	ret    

c002275e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002275e:	83 ec 18             	sub    esp,0x18
c0022761:	6a 18                	push   0x18
c0022763:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022768:	50                   	push   eax
c0022769:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002276e:	50                   	push   eax
c002276f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022774:	50                   	push   eax
c0022775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022779:	e8 32 fe ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002277e:	83 c4 2c             	add    esp,0x2c
c0022781:	0f b6 c4             	movzx  eax,ah
c0022784:	c3                   	ret    
c0022785:	90                   	nop

c0022786 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022786:	55                   	push   ebp
c0022787:	57                   	push   edi
c0022788:	56                   	push   esi
c0022789:	53                   	push   ebx
c002278a:	83 ec 28             	sub    esp,0x28
c002278d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022791:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022796:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002279b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00227a0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00227a7:	8d 43 12             	lea    eax,[ebx+0x12]
c00227aa:	83 c3 10             	add    ebx,0x10
c00227ad:	0f b6 c0             	movzx  eax,al
c00227b0:	0f b6 db             	movzx  ebx,bl
c00227b3:	50                   	push   eax
c00227b4:	51                   	push   ecx
c00227b5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00227b9:	57                   	push   edi
c00227ba:	55                   	push   ebp
c00227bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227bf:	e8 ec fd ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227c4:	83 c4 14             	add    esp,0x14
c00227c7:	89 c6                	mov    esi,eax
c00227c9:	53                   	push   ebx
c00227ca:	c1 e6 10             	shl    esi,0x10
c00227cd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00227d1:	51                   	push   ecx
c00227d2:	57                   	push   edi
c00227d3:	55                   	push   ebp
c00227d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227d8:	e8 d3 fd ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227dd:	83 c4 3c             	add    esp,0x3c
c00227e0:	0f b7 c0             	movzx  eax,ax
c00227e3:	5b                   	pop    ebx
c00227e4:	09 f0                	or     eax,esi
c00227e6:	5e                   	pop    esi
c00227e7:	5f                   	pop    edi
c00227e8:	5d                   	pop    ebp
c00227e9:	c3                   	ret    

c00227ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00227ea:	55                   	push   ebp
c00227eb:	57                   	push   edi
c00227ec:	56                   	push   esi
c00227ed:	53                   	push   ebx
c00227ee:	83 ec 0c             	sub    esp,0xc
c00227f1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227f5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00227f9:	89 f5                	mov    ebp,esi
c00227fb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022805:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022809:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002280d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022811:	83 f9 01             	cmp    ecx,0x1
c0022814:	75 5d                	jne    c0022873 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022816:	0f b6 c8             	movzx  ecx,al
c0022819:	0f b6 d2             	movzx  edx,dl
c002281c:	c1 e1 10             	shl    ecx,0x10
c002281f:	c1 e2 0b             	shl    edx,0xb
c0022822:	89 f0                	mov    eax,esi
c0022824:	25 fc 00 00 00       	and    eax,0xfc
c0022829:	09 c1                	or     ecx,eax
c002282b:	89 e8                	mov    eax,ebp
c002282d:	0f b6 c0             	movzx  eax,al
c0022830:	c1 e0 08             	shl    eax,0x8
c0022833:	09 c1                	or     ecx,eax
c0022835:	09 d1                	or     ecx,edx
c0022837:	ba f8 0c 00 00       	mov    edx,0xcf8
c002283c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022842:	89 c8                	mov    eax,ecx
c0022844:	ef                   	out    dx,eax
c0022845:	ba fc 0c 00 00       	mov    edx,0xcfc
c002284a:	ed                   	in     eax,dx
c002284b:	0f b7 db             	movzx  ebx,bx
c002284e:	83 e6 02             	and    esi,0x2
c0022851:	74 0a                	je     c002285d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022853:	0f b7 d0             	movzx  edx,ax
c0022856:	c1 e3 10             	shl    ebx,0x10
c0022859:	09 d3                	or     ebx,edx
c002285b:	eb 05                	jmp    c0022862 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002285d:	66 31 c0             	xor    ax,ax
c0022860:	09 c3                	or     ebx,eax
c0022862:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022867:	89 c8                	mov    eax,ecx
c0022869:	ef                   	out    dx,eax
c002286a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002286f:	89 d8                	mov    eax,ebx
c0022871:	eb 41                	jmp    c00228b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022873:	83 f9 02             	cmp    ecx,0x2
c0022876:	75 45                	jne    c00228bd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022878:	83 ec 0c             	sub    esp,0xc
c002287b:	0f b6 d2             	movzx  edx,dl
c002287e:	89 f1                	mov    ecx,esi
c0022880:	0f b6 c0             	movzx  eax,al
c0022883:	0f b6 f1             	movzx  esi,cl
c0022886:	89 e9                	mov    ecx,ebp
c0022888:	56                   	push   esi
c0022889:	0f b6 c9             	movzx  ecx,cl
c002288c:	51                   	push   ecx
c002288d:	52                   	push   edx
c002288e:	50                   	push   eax
c002288f:	57                   	push   edi
c0022890:	e8 ad fc ff ff       	call   c0022542 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022895:	89 c2                	mov    edx,eax
c0022897:	ed                   	in     eax,dx
c0022898:	83 c4 20             	add    esp,0x20
c002289b:	0f b7 db             	movzx  ebx,bx
c002289e:	f6 c2 02             	test   dl,0x2
c00228a1:	74 0c                	je     c00228af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00228a3:	0f b7 c8             	movzx  ecx,ax
c00228a6:	89 d8                	mov    eax,ebx
c00228a8:	c1 e0 10             	shl    eax,0x10
c00228ab:	09 c8                	or     eax,ecx
c00228ad:	eb 05                	jmp    c00228b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00228af:	66 31 c0             	xor    ax,ax
c00228b2:	09 d8                	or     eax,ebx
c00228b4:	ef                   	out    dx,eax
c00228b5:	83 c4 0c             	add    esp,0xc
c00228b8:	5b                   	pop    ebx
c00228b9:	5e                   	pop    esi
c00228ba:	5f                   	pop    edi
c00228bb:	5d                   	pop    ebp
c00228bc:	c3                   	ret    
c00228bd:	c7 44 24 20 00 c1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c100
c00228c5:	83 c4 0c             	add    esp,0xc
c00228c8:	5b                   	pop    ebx
c00228c9:	5e                   	pop    esi
c00228ca:	5f                   	pop    edi
c00228cb:	5d                   	pop    ebp
c00228cc:	e9 fa 75 ff ff       	jmp    c0019ecb <Krnl::panic(char const*)>
c00228d1:	90                   	nop

c00228d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00228d2:	55                   	push   ebp
c00228d3:	57                   	push   edi
c00228d4:	56                   	push   esi
c00228d5:	53                   	push   ebx
c00228d6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00228dc:	80 3d b0 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031db0,0x0
c00228e3:	0f 85 84 00 00 00    	jne    c002296d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00228e9:	83 ec 0c             	sub    esp,0xc
c00228ec:	68 14 01 00 00       	push   0x114
c00228f1:	e8 a3 cc fe ff       	call   c000f599 <malloc>
c00228f6:	83 c4 0c             	add    esp,0xc
c00228f9:	89 c3                	mov    ebx,eax
c00228fb:	ff 35 b0 0f 03 c0    	push   DWORD PTR ds:0xc0030fb0
c0022901:	68 06 c1 02 c0       	push   0xc002c106
c0022906:	50                   	push   eax
c0022907:	e8 b2 03 ff ff       	call   c0012cbe <File::File(char const*, Process*)>
c002290c:	5a                   	pop    edx
c002290d:	59                   	pop    ecx
c002290e:	6a 01                	push   0x1
c0022910:	53                   	push   ebx
c0022911:	e8 0c 04 ff ff       	call   c0012d22 <File::open(FileOpenMode)>
c0022916:	83 c4 0c             	add    esp,0xc
c0022919:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002291d:	50                   	push   eax
c002291e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022922:	50                   	push   eax
c0022923:	53                   	push   ebx
c0022924:	e8 a5 06 ff ff       	call   c0012fce <File::stat(unsigned long long*, bool*)>
c0022929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002292d:	40                   	inc    eax
c002292e:	89 04 24             	mov    DWORD PTR [esp],eax
c0022931:	e8 63 cc fe ff       	call   c000f599 <malloc>
c0022936:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002293a:	a3 ac 1d 03 c0       	mov    ds:0xc0031dac,eax
c002293f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022943:	5e                   	pop    esi
c0022944:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022946:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002294a:	51                   	push   ecx
c002294b:	50                   	push   eax
c002294c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022950:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022954:	53                   	push   ebx
c0022955:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022958:	83 c4 14             	add    esp,0x14
c002295b:	53                   	push   ebx
c002295c:	e8 1f 04 ff ff       	call   c0012d80 <File::close()>
c0022961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022965:	83 c4 10             	add    esp,0x10
c0022968:	a3 a8 1d 03 c0       	mov    ds:0xc0031da8,eax
c002296d:	a1 a8 1d 03 c0       	mov    eax,ds:0xc0031da8
c0022972:	8b 15 ac 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031dac
c0022978:	89 04 24             	mov    DWORD PTR [esp],eax
c002297b:	31 ff                	xor    edi,edi
c002297d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022985:	31 f6                	xor    esi,esi
c0022987:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002298c:	31 db                	xor    ebx,ebx
c002298e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022996:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002299b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00229a2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00229a6:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00229ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00229b1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229b4:	0f 8e 6b 01 00 00    	jle    c0022b25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00229ba:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229bd:	d4 40                	aam    0x40
c00229bf:	d5 39                	aad    0x39
c00229c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00229c5:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00229c9:	d4 40                	aam    0x40
c00229cb:	d5 39                	aad    0x39
c00229cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00229d1:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00229d5:	d4 40                	aam    0x40
c00229d7:	d5 39                	aad    0x39
c00229d9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00229dd:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00229e1:	d4 40                	aam    0x40
c00229e3:	d5 39                	aad    0x39
c00229e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00229e9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00229ed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00229f1:	3c 56                	cmp    al,0x56
c00229f3:	74 45                	je     c0022a3a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00229f5:	d4 40                	aam    0x40
c00229f7:	d5 39                	aad    0x39
c00229f9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00229fc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022a00:	0f b6 c9             	movzx  ecx,cl
c0022a03:	c1 e1 04             	shl    ecx,0x4
c0022a06:	d4 40                	aam    0x40
c0022a08:	d5 39                	aad    0x39
c0022a0a:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a0d:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022a11:	0f b6 db             	movzx  ebx,bl
c0022a14:	09 cb                	or     ebx,ecx
c0022a16:	c1 e3 04             	shl    ebx,0x4
c0022a19:	d4 40                	aam    0x40
c0022a1b:	d5 39                	aad    0x39
c0022a1d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022a20:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022a24:	0f b6 c9             	movzx  ecx,cl
c0022a27:	09 cb                	or     ebx,ecx
c0022a29:	c1 e3 04             	shl    ebx,0x4
c0022a2c:	89 d9                	mov    ecx,ebx
c0022a2e:	d4 40                	aam    0x40
c0022a30:	d5 39                	aad    0x39
c0022a32:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a35:	0f b6 db             	movzx  ebx,bl
c0022a38:	09 cb                	or     ebx,ecx
c0022a3a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022a3e:	80 f9 44             	cmp    cl,0x44
c0022a41:	74 47                	je     c0022a8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022a43:	88 c8                	mov    al,cl
c0022a45:	d4 40                	aam    0x40
c0022a47:	d5 39                	aad    0x39
c0022a49:	83 e8 30             	sub    eax,0x30
c0022a4c:	0f b6 e8             	movzx  ebp,al
c0022a4f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022a53:	c1 e5 04             	shl    ebp,0x4
c0022a56:	d4 40                	aam    0x40
c0022a58:	d5 39                	aad    0x39
c0022a5a:	83 e8 30             	sub    eax,0x30
c0022a5d:	0f b6 f0             	movzx  esi,al
c0022a60:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022a64:	09 ee                	or     esi,ebp
c0022a66:	c1 e6 04             	shl    esi,0x4
c0022a69:	d4 40                	aam    0x40
c0022a6b:	d5 39                	aad    0x39
c0022a6d:	83 e8 30             	sub    eax,0x30
c0022a70:	0f b6 e8             	movzx  ebp,al
c0022a73:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022a77:	09 ee                	or     esi,ebp
c0022a79:	c1 e6 04             	shl    esi,0x4
c0022a7c:	89 f5                	mov    ebp,esi
c0022a7e:	d4 40                	aam    0x40
c0022a80:	d5 39                	aad    0x39
c0022a82:	83 e8 30             	sub    eax,0x30
c0022a85:	0f b6 f0             	movzx  esi,al
c0022a88:	09 ee                	or     esi,ebp
c0022a8a:	83 c7 10             	add    edi,0x10
c0022a8d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022a91:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022a94:	3c 0a                	cmp    al,0xa
c0022a96:	74 09                	je     c0022aa1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022a98:	45                   	inc    ebp
c0022a99:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022a9c:	75 16                	jne    c0022ab4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022a9e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022aa1:	3c 0a                	cmp    al,0xa
c0022aa3:	0f 94 c0             	sete   al
c0022aa6:	0f b6 c0             	movzx  eax,al
c0022aa9:	01 c7                	add    edi,eax
c0022aab:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022ab0:	75 0c                	jne    c0022abe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022ab2:	eb 15                	jmp    c0022ac9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022ab4:	47                   	inc    edi
c0022ab5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022ab8:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022abc:	eb d3                	jmp    c0022a91 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022abe:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022ac3:	0f 85 e8 fe ff ff    	jne    c00229b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ac9:	80 f9 44             	cmp    cl,0x44
c0022acc:	74 0b                	je     c0022ad9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022ace:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022ad3:	0f 85 d8 fe ff ff    	jne    c00229b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022ad9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022add:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022ae1:	c1 e1 04             	shl    ecx,0x4
c0022ae4:	83 e8 30             	sub    eax,0x30
c0022ae7:	09 c8                	or     eax,ecx
c0022ae9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022aed:	0f 85 be fe ff ff    	jne    c00229b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022af3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022af7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022afb:	c1 e1 04             	shl    ecx,0x4
c0022afe:	83 e8 30             	sub    eax,0x30
c0022b01:	09 c8                	or     eax,ecx
c0022b03:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022b07:	0f 85 a4 fe ff ff    	jne    c00229b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b0d:	50                   	push   eax
c0022b0e:	50                   	push   eax
c0022b0f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022b13:	50                   	push   eax
c0022b14:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022b1b:	e8 ec dc fd ff       	call   c000080c <strcpy>
c0022b20:	83 c4 10             	add    esp,0x10
c0022b23:	eb 15                	jmp    c0022b3a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022b25:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b2c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022b37:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022b3a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b41:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b47:	5b                   	pop    ebx
c0022b48:	5e                   	pop    esi
c0022b49:	5f                   	pop    edi
c0022b4a:	5d                   	pop    ebp
c0022b4b:	c3                   	ret    

c0022b4c <PCI::checkBus(unsigned char)>:
c0022b4c:	56                   	push   esi
c0022b4d:	53                   	push   ebx
c0022b4e:	31 db                	xor    ebx,ebx
c0022b50:	51                   	push   ecx
c0022b51:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b56:	52                   	push   edx
c0022b57:	53                   	push   ebx
c0022b58:	43                   	inc    ebx
c0022b59:	56                   	push   esi
c0022b5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b5e:	e8 37 03 00 00       	call   c0022e9a <PCI::checkDevice(unsigned char, unsigned char)>
c0022b63:	83 c4 10             	add    esp,0x10
c0022b66:	83 fb 20             	cmp    ebx,0x20
c0022b69:	75 eb                	jne    c0022b56 <PCI::checkBus(unsigned char)+0xa>
c0022b6b:	58                   	pop    eax
c0022b6c:	5b                   	pop    ebx
c0022b6d:	5e                   	pop    esi
c0022b6e:	c3                   	ret    
c0022b6f:	90                   	nop

c0022b70 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b70:	55                   	push   ebp
c0022b71:	57                   	push   edi
c0022b72:	56                   	push   esi
c0022b73:	53                   	push   ebx
c0022b74:	83 ec 1c             	sub    esp,0x1c
c0022b77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b7b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b81:	0f 84 52 01 00 00    	je     c0022cd9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b87:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b8b:	66 81 f9 06 04       	cmp    cx,0x406
c0022b90:	75 2c                	jne    c0022bbe <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b92:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b97:	50                   	push   eax
c0022b98:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b9d:	50                   	push   eax
c0022b9e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022ba3:	50                   	push   eax
c0022ba4:	56                   	push   esi
c0022ba5:	e8 b4 fb ff ff       	call   c002275e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022baa:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022bae:	0f b6 c0             	movzx  eax,al
c0022bb1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022bb5:	83 c4 2c             	add    esp,0x2c
c0022bb8:	5b                   	pop    ebx
c0022bb9:	5e                   	pop    esi
c0022bba:	5f                   	pop    edi
c0022bbb:	5d                   	pop    ebp
c0022bbc:	eb 8e                	jmp    c0022b4c <PCI::checkBus(unsigned char)>
c0022bbe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bc2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022bcc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022bd0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022bd4:	88 d3                	mov    bl,dl
c0022bd6:	85 c0                	test   eax,eax
c0022bd8:	74 33                	je     c0022c0d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022bda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022bdd:	85 d2                	test   edx,edx
c0022bdf:	74 28                	je     c0022c09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022be1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022be7:	31 ef                	xor    edi,ebp
c0022be9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022bef:	75 18                	jne    c0022c09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bf1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bf5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bfb:	75 0c                	jne    c0022c09 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bfd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c03:	0f 84 d0 00 00 00    	je     c0022cd9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c0b:	eb c9                	jmp    c0022bd6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c0d:	66 81 f9 01 06       	cmp    cx,0x601
c0022c12:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c16:	75 19                	jne    c0022c31 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c18:	83 ec 0c             	sub    esp,0xc
c0022c1b:	68 64 01 00 00       	push   0x164
c0022c20:	e8 74 c9 fe ff       	call   c000f599 <malloc>
c0022c25:	89 c5                	mov    ebp,eax
c0022c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c2a:	e8 85 0e 00 00       	call   c0023ab4 <SATABus::SATABus()>
c0022c2f:	eb 1e                	jmp    c0022c4f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c31:	66 81 f9 01 01       	cmp    cx,0x101
c0022c36:	75 60                	jne    c0022c98 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c38:	83 ec 0c             	sub    esp,0xc
c0022c3b:	68 70 02 00 00       	push   0x270
c0022c40:	e8 54 c9 fe ff       	call   c000f599 <malloc>
c0022c45:	89 c5                	mov    ebp,eax
c0022c47:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c4a:	e8 0f 03 00 00       	call   c0022f5e <IDE::IDE()>
c0022c4f:	58                   	pop    eax
c0022c50:	5a                   	pop    edx
c0022c51:	55                   	push   ebp
c0022c52:	56                   	push   esi
c0022c53:	e8 40 0f ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0022c58:	83 ec 1c             	sub    esp,0x1c
c0022c5b:	b9 09 00 00 00       	mov    ecx,0x9
c0022c60:	fc                   	cld    
c0022c61:	89 e7                	mov    edi,esp
c0022c63:	89 de                	mov    esi,ebx
c0022c65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c67:	55                   	push   ebp
c0022c68:	e8 3d 0e ff ff       	call   c0013aaa <Device::preOpenPCI(PCIDeviceInfo)>
c0022c6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c70:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c74:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c7c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c84:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c8f:	83 c4 4c             	add    esp,0x4c
c0022c92:	5b                   	pop    ebx
c0022c93:	5e                   	pop    esi
c0022c94:	5f                   	pop    edi
c0022c95:	5d                   	pop    ebp
c0022c96:	ff e0                	jmp    eax
c0022c98:	83 ec 0c             	sub    esp,0xc
c0022c9b:	68 58 01 00 00       	push   0x158
c0022ca0:	e8 f4 c8 fe ff       	call   c000f599 <malloc>
c0022ca5:	89 c5                	mov    ebp,eax
c0022ca7:	58                   	pop    eax
c0022ca8:	5a                   	pop    edx
c0022ca9:	68 1f c1 02 c0       	push   0xc002c11f
c0022cae:	55                   	push   ebp
c0022caf:	e8 ee 11 ff ff       	call   c0013ea2 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cb4:	59                   	pop    ecx
c0022cb5:	5f                   	pop    edi
c0022cb6:	55                   	push   ebp
c0022cb7:	56                   	push   esi
c0022cb8:	e8 db 0e ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0022cbd:	b9 09 00 00 00       	mov    ecx,0x9
c0022cc2:	fc                   	cld    
c0022cc3:	89 df                	mov    edi,ebx
c0022cc5:	89 de                	mov    esi,ebx
c0022cc7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cc9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022ccd:	83 c4 2c             	add    esp,0x2c
c0022cd0:	5b                   	pop    ebx
c0022cd1:	5e                   	pop    esi
c0022cd2:	5f                   	pop    edi
c0022cd3:	5d                   	pop    ebp
c0022cd4:	e9 d1 0d ff ff       	jmp    c0013aaa <Device::preOpenPCI(PCIDeviceInfo)>
c0022cd9:	83 c4 1c             	add    esp,0x1c
c0022cdc:	5b                   	pop    ebx
c0022cdd:	5e                   	pop    esi
c0022cde:	5f                   	pop    edi
c0022cdf:	5d                   	pop    ebp
c0022ce0:	c3                   	ret    
c0022ce1:	90                   	nop

c0022ce2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ce2:	55                   	push   ebp
c0022ce3:	57                   	push   edi
c0022ce4:	56                   	push   esi
c0022ce5:	53                   	push   ebx
c0022ce6:	83 ec 68             	sub    esp,0x68
c0022ce9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022ced:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cf8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022cff:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022d04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022d0f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022d14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d18:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022d1d:	6a 0c                	push   0xc
c0022d1f:	57                   	push   edi
c0022d20:	53                   	push   ebx
c0022d21:	56                   	push   esi
c0022d22:	55                   	push   ebp
c0022d23:	e8 88 f8 ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d28:	83 c4 20             	add    esp,0x20
c0022d2b:	57                   	push   edi
c0022d2c:	53                   	push   ebx
c0022d2d:	56                   	push   esi
c0022d2e:	55                   	push   ebp
c0022d2f:	e8 70 f9 ff ff       	call   c00226a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d34:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022d39:	57                   	push   edi
c0022d3a:	53                   	push   ebx
c0022d3b:	56                   	push   esi
c0022d3c:	55                   	push   ebp
c0022d3d:	e8 f8 f9 ff ff       	call   c002273a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d42:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022d46:	83 c4 14             	add    esp,0x14
c0022d49:	6a 3c                	push   0x3c
c0022d4b:	57                   	push   edi
c0022d4c:	53                   	push   ebx
c0022d4d:	56                   	push   esi
c0022d4e:	55                   	push   ebp
c0022d4f:	e8 5c f8 ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d54:	0f b6 c4             	movzx  eax,ah
c0022d57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022d5b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022d5f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022d63:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0022d68:	83 c4 20             	add    esp,0x20
c0022d6b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d71:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d78:	74 7c                	je     c0022df6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d7a:	31 c0                	xor    eax,eax
c0022d7c:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c0022d82:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d88:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022d8e:	7e 66                	jle    c0022df6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022d90:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022d93:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d9a:	39 cb                	cmp    ebx,ecx
c0022d9c:	75 55                	jne    c0022df3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022d9e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022da5:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022da9:	75 48                	jne    c0022df3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022daf:	83 ec 0c             	sub    esp,0xc
c0022db2:	68 39 c1 02 c0       	push   0xc002c139
c0022db7:	e8 a3 f9 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0022dbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022dc0:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c0022dc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022dca:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dd0:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022dd8:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022ddc:	52                   	push   edx
c0022ddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022de1:	53                   	push   ebx
c0022de2:	68 5e c1 02 c0       	push   0xc002c15e
c0022de7:	e8 73 f9 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0022dec:	83 c4 20             	add    esp,0x20
c0022def:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022df3:	40                   	inc    eax
c0022df4:	eb 86                	jmp    c0022d7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022df6:	31 d2                	xor    edx,edx
c0022df8:	83 ec 0c             	sub    esp,0xc
c0022dfb:	57                   	push   edi
c0022dfc:	53                   	push   ebx
c0022dfd:	56                   	push   esi
c0022dfe:	52                   	push   edx
c0022dff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022e03:	55                   	push   ebp
c0022e04:	e8 7d f9 ff ff       	call   c0022786 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022e0d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e11:	42                   	inc    edx
c0022e12:	83 c4 20             	add    esp,0x20
c0022e15:	83 fa 06             	cmp    edx,0x6
c0022e18:	75 de                	jne    c0022df8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022e1a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022e1f:	83 ec 0c             	sub    esp,0xc
c0022e22:	86 e0                	xchg   al,ah
c0022e24:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022e29:	6a 02                	push   0x2
c0022e2b:	57                   	push   edi
c0022e2c:	53                   	push   ebx
c0022e2d:	56                   	push   esi
c0022e2e:	55                   	push   ebp
c0022e2f:	e8 7c f7 ff ff       	call   c00225b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e34:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022e39:	83 c4 20             	add    esp,0x20
c0022e3c:	57                   	push   edi
c0022e3d:	53                   	push   ebx
c0022e3e:	56                   	push   esi
c0022e3f:	55                   	push   ebp
c0022e40:	e8 a9 f8 ff ff       	call   c00226ee <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e45:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e49:	57                   	push   edi
c0022e4a:	53                   	push   ebx
c0022e4b:	56                   	push   esi
c0022e4c:	55                   	push   ebp
c0022e4d:	e8 06 f8 ff ff       	call   c0022658 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e52:	b9 09 00 00 00       	mov    ecx,0x9
c0022e57:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022e5c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022e60:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022e64:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e68:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022e6c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e70:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022e74:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022e78:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022e7c:	83 ec 0c             	sub    esp,0xc
c0022e7f:	fc                   	cld    
c0022e80:	89 e7                	mov    edi,esp
c0022e82:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022e86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e88:	55                   	push   ebp
c0022e89:	e8 e2 fc ff ff       	call   c0022b70 <PCI::foundDevice(PCIDeviceInfo)>
c0022e8e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e94:	5b                   	pop    ebx
c0022e95:	5e                   	pop    esi
c0022e96:	5f                   	pop    edi
c0022e97:	5d                   	pop    ebp
c0022e98:	c3                   	ret    
c0022e99:	90                   	nop

c0022e9a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e9a:	55                   	push   ebp
c0022e9b:	57                   	push   edi
c0022e9c:	56                   	push   esi
c0022e9d:	53                   	push   ebx
c0022e9e:	83 ec 0c             	sub    esp,0xc
c0022ea1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022ea5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022eaa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022eaf:	6a 00                	push   0x0
c0022eb1:	56                   	push   esi
c0022eb2:	57                   	push   edi
c0022eb3:	55                   	push   ebp
c0022eb4:	e8 9f f7 ff ff       	call   c0022658 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eb9:	6a 00                	push   0x0
c0022ebb:	56                   	push   esi
c0022ebc:	57                   	push   edi
c0022ebd:	55                   	push   ebp
c0022ebe:	e8 1f fe ff ff       	call   c0022ce2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ec3:	83 c4 20             	add    esp,0x20
c0022ec6:	6a 00                	push   0x0
c0022ec8:	56                   	push   esi
c0022ec9:	57                   	push   edi
c0022eca:	55                   	push   ebp
c0022ecb:	e8 ac f7 ff ff       	call   c002267c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ed0:	83 c4 10             	add    esp,0x10
c0022ed3:	84 c0                	test   al,al
c0022ed5:	79 27                	jns    c0022efe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022ed7:	bb 01 00 00 00       	mov    ebx,0x1
c0022edc:	53                   	push   ebx
c0022edd:	56                   	push   esi
c0022ede:	57                   	push   edi
c0022edf:	55                   	push   ebp
c0022ee0:	e8 73 f7 ff ff       	call   c0022658 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ee5:	83 c4 10             	add    esp,0x10
c0022ee8:	66 40                	inc    ax
c0022eea:	74 0c                	je     c0022ef8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022eec:	53                   	push   ebx
c0022eed:	56                   	push   esi
c0022eee:	57                   	push   edi
c0022eef:	55                   	push   ebp
c0022ef0:	e8 ed fd ff ff       	call   c0022ce2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef5:	83 c4 10             	add    esp,0x10
c0022ef8:	43                   	inc    ebx
c0022ef9:	83 fb 08             	cmp    ebx,0x8
c0022efc:	75 de                	jne    c0022edc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022efe:	83 c4 0c             	add    esp,0xc
c0022f01:	5b                   	pop    ebx
c0022f02:	5e                   	pop    esi
c0022f03:	5f                   	pop    edi
c0022f04:	5d                   	pop    ebp
c0022f05:	c3                   	ret    

c0022f06 <PCI::detect()>:
c0022f06:	56                   	push   esi
c0022f07:	53                   	push   ebx
c0022f08:	53                   	push   ebx
c0022f09:	31 db                	xor    ebx,ebx
c0022f0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f0f:	6a 00                	push   0x0
c0022f11:	6a 00                	push   0x0
c0022f13:	6a 00                	push   0x0
c0022f15:	56                   	push   esi
c0022f16:	e8 61 f7 ff ff       	call   c002267c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f1b:	83 c4 10             	add    esp,0x10
c0022f1e:	a8 80                	test   al,0x80
c0022f20:	75 21                	jne    c0022f43 <PCI::detect()+0x3d>
c0022f22:	51                   	push   ecx
c0022f23:	51                   	push   ecx
c0022f24:	6a 00                	push   0x0
c0022f26:	56                   	push   esi
c0022f27:	e8 20 fc ff ff       	call   c0022b4c <PCI::checkBus(unsigned char)>
c0022f2c:	83 c4 10             	add    esp,0x10
c0022f2f:	eb 24                	jmp    c0022f55 <PCI::detect()+0x4f>
c0022f31:	52                   	push   edx
c0022f32:	52                   	push   edx
c0022f33:	53                   	push   ebx
c0022f34:	43                   	inc    ebx
c0022f35:	56                   	push   esi
c0022f36:	e8 11 fc ff ff       	call   c0022b4c <PCI::checkBus(unsigned char)>
c0022f3b:	83 c4 10             	add    esp,0x10
c0022f3e:	83 fb 08             	cmp    ebx,0x8
c0022f41:	74 12                	je     c0022f55 <PCI::detect()+0x4f>
c0022f43:	53                   	push   ebx
c0022f44:	6a 00                	push   0x0
c0022f46:	6a 00                	push   0x0
c0022f48:	56                   	push   esi
c0022f49:	e8 0a f7 ff ff       	call   c0022658 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f4e:	83 c4 10             	add    esp,0x10
c0022f51:	66 40                	inc    ax
c0022f53:	74 dc                	je     c0022f31 <PCI::detect()+0x2b>
c0022f55:	58                   	pop    eax
c0022f56:	5b                   	pop    ebx
c0022f57:	5e                   	pop    esi
c0022f58:	c3                   	ret    
c0022f59:	90                   	nop

c0022f5a <IDE::close(int, int, void*)>:
c0022f5a:	83 c8 ff             	or     eax,0xffffffff
c0022f5d:	c3                   	ret    

c0022f5e <IDE::IDE()>:
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f65:	83 ec 08             	sub    esp,0x8
c0022f68:	68 a8 c1 02 c0       	push   0xc002c1a8
c0022f6d:	50                   	push   eax
c0022f6e:	e8 d3 0f ff ff       	call   c0013f46 <HardDiskController::HardDiskController(char const*)>
c0022f73:	83 c4 10             	add    esp,0x10
c0022f76:	ba 38 c2 02 c0       	mov    edx,0xc002c238
c0022f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7f:	89 10                	mov    DWORD PTR [eax],edx
c0022f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f85:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f8c:	90                   	nop
c0022f8d:	83 c4 0c             	add    esp,0xc
c0022f90:	c3                   	ret    
c0022f91:	90                   	nop

c0022f92 <IDE::prepareInterrupt(unsigned char)>:
c0022f92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f9b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fa3:	c3                   	ret    

c0022fa4 <selectDrive(unsigned char, unsigned char)>:
c0022fa4:	c3                   	ret    
c0022fa5:	90                   	nop

c0022fa6 <IDE::getBase(unsigned char)>:
c0022fa6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022faf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fb7:	c3                   	ret    

c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fb8:	55                   	push   ebp
c0022fb9:	57                   	push   edi
c0022fba:	56                   	push   esi
c0022fbb:	53                   	push   ebx
c0022fbc:	83 ec 1c             	sub    esp,0x1c
c0022fbf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fc3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fc7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022fca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022fd2:	80 f9 03             	cmp    cl,0x3
c0022fd5:	77 51                	ja     c0023028 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022fd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fdb:	0f b6 f2             	movzx  esi,dl
c0022fde:	0f b6 db             	movzx  ebx,bl
c0022fe1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fe4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fe8:	83 ca 80             	or     edx,0xffffff80
c0022feb:	0f b6 d2             	movzx  edx,dl
c0022fee:	52                   	push   edx
c0022fef:	6a 0c                	push   0xc
c0022ff1:	56                   	push   esi
c0022ff2:	57                   	push   edi
c0022ff3:	e8 c0 ff ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ff8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023001:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023005:	ee                   	out    dx,al
c0023006:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002300b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002300f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023013:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023017:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002301f:	83 c4 2c             	add    esp,0x2c
c0023022:	5b                   	pop    ebx
c0023023:	5e                   	pop    esi
c0023024:	5f                   	pop    edi
c0023025:	5d                   	pop    ebp
c0023026:	eb 90                	jmp    c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023028:	80 fb 07             	cmp    bl,0x7
c002302b:	77 12                	ja     c002303f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002302d:	0f b6 d2             	movzx  edx,dl
c0023030:	0f b6 db             	movzx  ebx,bl
c0023033:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002303b:	89 da                	mov    edx,ebx
c002303d:	eb 2f                	jmp    c002306e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002303f:	80 fb 0d             	cmp    bl,0xd
c0023042:	77 13                	ja     c0023057 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023044:	0f b6 d2             	movzx  edx,dl
c0023047:	0f b6 db             	movzx  ebx,bl
c002304a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023051:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023055:	eb 17                	jmp    c002306e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023057:	80 fb 15             	cmp    bl,0x15
c002305a:	77 13                	ja     c002306f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002305c:	0f b6 d2             	movzx  edx,dl
c002305f:	0f b6 db             	movzx  ebx,bl
c0023062:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002306a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002306e:	ee                   	out    dx,al
c002306f:	83 c4 1c             	add    esp,0x1c
c0023072:	5b                   	pop    ebx
c0023073:	5e                   	pop    esi
c0023074:	5f                   	pop    edi
c0023075:	5d                   	pop    ebp
c0023076:	c3                   	ret    
c0023077:	90                   	nop

c0023078 <IDE::read(unsigned char, unsigned char)>:
c0023078:	55                   	push   ebp
c0023079:	57                   	push   edi
c002307a:	56                   	push   esi
c002307b:	53                   	push   ebx
c002307c:	83 ec 1c             	sub    esp,0x1c
c002307f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023083:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023087:	8d 43 f8             	lea    eax,[ebx-0x8]
c002308a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002308e:	3c 03                	cmp    al,0x3
c0023090:	77 43                	ja     c00230d5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023092:	0f b6 f2             	movzx  esi,dl
c0023095:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023098:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002309c:	83 c8 80             	or     eax,0xffffff80
c002309f:	0f b6 c0             	movzx  eax,al
c00230a2:	50                   	push   eax
c00230a3:	6a 0c                	push   0xc
c00230a5:	56                   	push   esi
c00230a6:	57                   	push   edi
c00230a7:	e8 0c ff ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ac:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230b1:	0f b6 c3             	movzx  eax,bl
c00230b4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230b8:	ec                   	in     al,dx
c00230b9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230bd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230c2:	52                   	push   edx
c00230c3:	6a 0c                	push   0xc
c00230c5:	56                   	push   esi
c00230c6:	57                   	push   edi
c00230c7:	e8 ec fe ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230cc:	83 c4 20             	add    esp,0x20
c00230cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00230d3:	eb 49                	jmp    c002311e <IDE::read(unsigned char, unsigned char)+0xa6>
c00230d5:	80 fb 07             	cmp    bl,0x7
c00230d8:	77 12                	ja     c00230ec <IDE::read(unsigned char, unsigned char)+0x74>
c00230da:	0f b6 d2             	movzx  edx,dl
c00230dd:	0f b6 c3             	movzx  eax,bl
c00230e0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230e8:	89 c2                	mov    edx,eax
c00230ea:	eb 31                	jmp    c002311d <IDE::read(unsigned char, unsigned char)+0xa5>
c00230ec:	80 fb 0d             	cmp    bl,0xd
c00230ef:	77 13                	ja     c0023104 <IDE::read(unsigned char, unsigned char)+0x8c>
c00230f1:	0f b6 d2             	movzx  edx,dl
c00230f4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230fb:	0f b6 d3             	movzx  edx,bl
c00230fe:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023102:	eb 19                	jmp    c002311d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023104:	31 c0                	xor    eax,eax
c0023106:	80 fb 15             	cmp    bl,0x15
c0023109:	77 13                	ja     c002311e <IDE::read(unsigned char, unsigned char)+0xa6>
c002310b:	0f b6 d2             	movzx  edx,dl
c002310e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023116:	0f b6 d3             	movzx  edx,bl
c0023119:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002311d:	ec                   	in     al,dx
c002311e:	83 c4 1c             	add    esp,0x1c
c0023121:	5b                   	pop    ebx
c0023122:	5e                   	pop    esi
c0023123:	5f                   	pop    edi
c0023124:	5d                   	pop    ebp
c0023125:	c3                   	ret    

c0023126 <IDE::waitInterrupt(unsigned char)>:
c0023126:	55                   	push   ebp
c0023127:	57                   	push   edi
c0023128:	56                   	push   esi
c0023129:	53                   	push   ebx
c002312a:	31 db                	xor    ebx,ebx
c002312c:	83 ec 0c             	sub    esp,0xc
c002312f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023133:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023138:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023140:	89 e8                	mov    eax,ebp
c0023142:	84 c0                	test   al,al
c0023144:	75 34                	jne    c002317a <IDE::waitInterrupt(unsigned char)+0x54>
c0023146:	52                   	push   edx
c0023147:	6a 0c                	push   0xc
c0023149:	56                   	push   esi
c002314a:	57                   	push   edi
c002314b:	e8 28 ff ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023150:	83 c4 10             	add    esp,0x10
c0023153:	a8 01                	test   al,0x1
c0023155:	75 2b                	jne    c0023182 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023157:	f6 c3 04             	test   bl,0x4
c002315a:	75 16                	jne    c0023172 <IDE::waitInterrupt(unsigned char)+0x4c>
c002315c:	83 fb 32             	cmp    ebx,0x32
c002315f:	7e 11                	jle    c0023172 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023161:	50                   	push   eax
c0023162:	50                   	push   eax
c0023163:	6a 00                	push   0x0
c0023165:	68 80 96 98 00       	push   0x989680
c002316a:	e8 c6 ab ff ff       	call   c001dd35 <nanoSleep(unsigned long long)>
c002316f:	83 c4 10             	add    esp,0x10
c0023172:	83 fb 3c             	cmp    ebx,0x3c
c0023175:	74 0b                	je     c0023182 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023177:	43                   	inc    ebx
c0023178:	eb be                	jmp    c0023138 <IDE::waitInterrupt(unsigned char)+0x12>
c002317a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023182:	83 c4 0c             	add    esp,0xc
c0023185:	89 e8                	mov    eax,ebp
c0023187:	5b                   	pop    ebx
c0023188:	5e                   	pop    esi
c0023189:	5f                   	pop    edi
c002318a:	5d                   	pop    ebp
c002318b:	c3                   	ret    

c002318c <ideChannel0IRQHandler(regs*, void*)>:
c002318c:	83 ec 10             	sub    esp,0x10
c002318f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023193:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002319a:	6a 07                	push   0x7
c002319c:	6a 00                	push   0x0
c002319e:	50                   	push   eax
c002319f:	e8 d4 fe ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00231a4:	83 c4 1c             	add    esp,0x1c
c00231a7:	c3                   	ret    

c00231a8 <ideChannel1IRQHandler(regs*, void*)>:
c00231a8:	83 ec 10             	sub    esp,0x10
c00231ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231af:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231b6:	6a 07                	push   0x7
c00231b8:	6a 01                	push   0x1
c00231ba:	50                   	push   eax
c00231bb:	e8 b8 fe ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00231c0:	83 c4 1c             	add    esp,0x1c
c00231c3:	c3                   	ret    

c00231c4 <IDE::enableIRQs(unsigned char, bool)>:
c00231c4:	57                   	push   edi
c00231c5:	56                   	push   esi
c00231c6:	be 04 00 00 00       	mov    esi,0x4
c00231cb:	53                   	push   ebx
c00231cc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00231d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00231d5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00231da:	0f 94 c0             	sete   al
c00231dd:	d1 e0                	shl    eax,1
c00231df:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231e6:	0f b6 c0             	movzx  eax,al
c00231e9:	50                   	push   eax
c00231ea:	6a 0c                	push   0xc
c00231ec:	57                   	push   edi
c00231ed:	53                   	push   ebx
c00231ee:	e8 c5 fd ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231f3:	83 c4 10             	add    esp,0x10
c00231f6:	50                   	push   eax
c00231f7:	6a 0c                	push   0xc
c00231f9:	57                   	push   edi
c00231fa:	53                   	push   ebx
c00231fb:	e8 78 fe ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023200:	83 c4 10             	add    esp,0x10
c0023203:	4e                   	dec    esi
c0023204:	75 f0                	jne    c00231f6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023206:	5b                   	pop    ebx
c0023207:	5e                   	pop    esi
c0023208:	5f                   	pop    edi
c0023209:	c3                   	ret    

c002320a <IDE::open(int, int, void*)>:
c002320a:	55                   	push   ebp
c002320b:	57                   	push   edi
c002320c:	56                   	push   esi
c002320d:	53                   	push   ebx
c002320e:	83 ec 1c             	sub    esp,0x1c
c0023211:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023215:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002321e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023227:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002322e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023235:	0f 85 b0 02 00 00    	jne    c00234eb <IDE::open(int, int, void*)+0x2e1>
c002323b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023241:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023245:	83 e0 7f             	and    eax,0x7f
c0023248:	3c 05                	cmp    al,0x5
c002324a:	74 04                	je     c0023250 <IDE::open(int, int, void*)+0x46>
c002324c:	3c 0f                	cmp    al,0xf
c002324e:	75 32                	jne    c0023282 <IDE::open(int, int, void*)+0x78>
c0023250:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023256:	83 e0 fc             	and    eax,0xfffffffc
c0023259:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023260:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023266:	83 e0 fc             	and    eax,0xfffffffc
c0023269:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023270:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023276:	83 e0 fc             	and    eax,0xfffffffc
c0023279:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023280:	eb 14                	jmp    c0023296 <IDE::open(int, int, void*)+0x8c>
c0023282:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002328c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023296:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002329d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232a8:	89 c6                	mov    esi,eax
c00232aa:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232af:	c1 e6 10             	shl    esi,0x10
c00232b2:	89 e8                	mov    eax,ebp
c00232b4:	89 fa                	mov    edx,edi
c00232b6:	c1 e0 0b             	shl    eax,0xb
c00232b9:	09 f0                	or     eax,esi
c00232bb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232c2:	c1 e6 08             	shl    esi,0x8
c00232c5:	09 c6                	or     esi,eax
c00232c7:	89 f0                	mov    eax,esi
c00232c9:	0d 08 00 00 80       	or     eax,0x80000008
c00232ce:	ef                   	out    dx,eax
c00232cf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00232d4:	89 ca                	mov    edx,ecx
c00232d6:	ed                   	in     eax,dx
c00232d7:	c1 e8 10             	shr    eax,0x10
c00232da:	3d ff ff 00 00       	cmp    eax,0xffff
c00232df:	0f 84 f5 00 00 00    	je     c00233da <IDE::open(int, int, void*)+0x1d0>
c00232e5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232eb:	89 fa                	mov    edx,edi
c00232ed:	89 f0                	mov    eax,esi
c00232ef:	ef                   	out    dx,eax
c00232f0:	b0 fe                	mov    al,0xfe
c00232f2:	89 ca                	mov    edx,ecx
c00232f4:	ee                   	out    dx,al
c00232f5:	89 f0                	mov    eax,esi
c00232f7:	89 fa                	mov    edx,edi
c00232f9:	ef                   	out    dx,eax
c00232fa:	89 ca                	mov    edx,ecx
c00232fc:	ed                   	in     eax,dx
c00232fd:	3c fe                	cmp    al,0xfe
c00232ff:	0f 85 a9 00 00 00    	jne    c00233ae <IDE::open(int, int, void*)+0x1a4>
c0023305:	8b 15 68 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da68
c002330b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023312:	74 33                	je     c0023347 <IDE::open(int, int, void*)+0x13d>
c0023314:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002331a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002331e:	40                   	inc    eax
c002331f:	83 ec 0c             	sub    esp,0xc
c0023322:	0f b6 c0             	movzx  eax,al
c0023325:	50                   	push   eax
c0023326:	55                   	push   ebp
c0023327:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002332b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023331:	51                   	push   ecx
c0023332:	e8 4d 48 ff ff       	call   c0017b84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023337:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002333c:	83 c4 1c             	add    esp,0x1c
c002333f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023345:	eb 0a                	jmp    c0023351 <IDE::open(int, int, void*)+0x147>
c0023347:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023351:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023358:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002335f:	c1 e1 10             	shl    ecx,0x10
c0023362:	c1 e0 08             	shl    eax,0x8
c0023365:	bf f8 0c 00 00       	mov    edi,0xcf8
c002336a:	09 c1                	or     ecx,eax
c002336c:	89 fa                	mov    edx,edi
c002336e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023375:	c1 e0 0b             	shl    eax,0xb
c0023378:	09 c1                	or     ecx,eax
c002337a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023380:	89 c8                	mov    eax,ecx
c0023382:	ef                   	out    dx,eax
c0023383:	be fc 0c 00 00       	mov    esi,0xcfc
c0023388:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002338e:	89 f2                	mov    edx,esi
c0023390:	ee                   	out    dx,al
c0023391:	89 c8                	mov    eax,ecx
c0023393:	89 fa                	mov    edx,edi
c0023395:	ef                   	out    dx,eax
c0023396:	89 f2                	mov    edx,esi
c0023398:	ed                   	in     eax,dx
c0023399:	0f b6 c0             	movzx  eax,al
c002339c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233a2:	74 46                	je     c00233ea <IDE::open(int, int, void*)+0x1e0>
c00233a4:	83 ec 0c             	sub    esp,0xc
c00233a7:	68 c0 c1 02 c0       	push   0xc002c1c0
c00233ac:	eb 34                	jmp    c00233e2 <IDE::open(int, int, void*)+0x1d8>
c00233ae:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233b7:	75 17                	jne    c00233d0 <IDE::open(int, int, void*)+0x1c6>
c00233b9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233be:	74 07                	je     c00233c7 <IDE::open(int, int, void*)+0x1bd>
c00233c0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233c5:	75 09                	jne    c00233d0 <IDE::open(int, int, void*)+0x1c6>
c00233c7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233ce:	eb 1a                	jmp    c00233ea <IDE::open(int, int, void*)+0x1e0>
c00233d0:	83 ec 0c             	sub    esp,0xc
c00233d3:	68 c8 c1 02 c0       	push   0xc002c1c8
c00233d8:	eb 08                	jmp    c00233e2 <IDE::open(int, int, void*)+0x1d8>
c00233da:	83 ec 0c             	sub    esp,0xc
c00233dd:	68 f9 c1 02 c0       	push   0xc002c1f9
c00233e2:	e8 e4 6a ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00233e7:	83 c4 10             	add    esp,0x10
c00233ea:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233f1:	79 1a                	jns    c002340d <IDE::open(int, int, void*)+0x203>
c00233f3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233f9:	83 e0 fc             	and    eax,0xfffffffc
c00233fc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023403:	83 c0 08             	add    eax,0x8
c0023406:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002340d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023413:	89 c2                	mov    edx,eax
c0023415:	83 e2 0f             	and    edx,0xf
c0023418:	66 83 fa 08          	cmp    dx,0x8
c002341c:	75 0a                	jne    c0023428 <IDE::open(int, int, void*)+0x21e>
c002341e:	83 e8 02             	sub    eax,0x2
c0023421:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023428:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002342e:	89 c2                	mov    edx,eax
c0023430:	83 e2 0f             	and    edx,0xf
c0023433:	66 83 fa 08          	cmp    dx,0x8
c0023437:	75 0a                	jne    c0023443 <IDE::open(int, int, void*)+0x239>
c0023439:	83 e8 02             	sub    eax,0x2
c002343c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023443:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002344a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023451:	89 d0                	mov    eax,edx
c0023453:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023456:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002345a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002345e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023461:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023466:	0f b6 c9             	movzx  ecx,cl
c0023469:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023470:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023473:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023477:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002347b:	8d 50 02             	lea    edx,[eax+0x2]
c002347e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023483:	0f b6 d2             	movzx  edx,dl
c0023486:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002348c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002348f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023493:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023497:	8d 48 03             	lea    ecx,[eax+0x3]
c002349a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002349f:	0f b6 c9             	movzx  ecx,cl
c00234a2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234a8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234ab:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234af:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234b3:	8d 50 04             	lea    edx,[eax+0x4]
c00234b6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234bc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234c1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234c8:	66 85 f6             	test   si,si
c00234cb:	74 5b                	je     c0023528 <IDE::open(int, int, void*)+0x31e>
c00234cd:	0f b6 d2             	movzx  edx,dl
c00234d0:	83 c0 05             	add    eax,0x5
c00234d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234d6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234da:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00234de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00234e4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234e9:	eb 3d                	jmp    c0023528 <IDE::open(int, int, void*)+0x31e>
c00234eb:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00234f1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234f8:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00234ff:	66 05 06 02          	add    ax,0x206
c0023503:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002350a:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023511:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023518:	66 05 06 02          	add    ax,0x206
c002351c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023523:	e9 e5 fe ff ff       	jmp    c002340d <IDE::open(int, int, void*)+0x203>
c0023528:	50                   	push   eax
c0023529:	50                   	push   eax
c002352a:	6a 00                	push   0x0
c002352c:	53                   	push   ebx
c002352d:	e8 60 fa ff ff       	call   c0022f92 <IDE::prepareInterrupt(unsigned char)>
c0023532:	5a                   	pop    edx
c0023533:	59                   	pop    ecx
c0023534:	6a 01                	push   0x1
c0023536:	53                   	push   ebx
c0023537:	e8 56 fa ff ff       	call   c0022f92 <IDE::prepareInterrupt(unsigned char)>
c002353c:	83 c4 0c             	add    esp,0xc
c002353f:	6a 00                	push   0x0
c0023541:	6a 00                	push   0x0
c0023543:	53                   	push   ebx
c0023544:	e8 7b fc ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c0023549:	83 c4 0c             	add    esp,0xc
c002354c:	6a 00                	push   0x0
c002354e:	6a 01                	push   0x1
c0023550:	53                   	push   ebx
c0023551:	e8 6e fc ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c0023556:	83 c4 10             	add    esp,0x10
c0023559:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023560:	74 34                	je     c0023596 <IDE::open(int, int, void*)+0x38c>
c0023562:	83 ec 0c             	sub    esp,0xc
c0023565:	53                   	push   ebx
c0023566:	6a 01                	push   0x1
c0023568:	68 8c 31 02 c0       	push   0xc002318c
c002356d:	6a 0e                	push   0xe
c002356f:	53                   	push   ebx
c0023570:	e8 9b 05 ff ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023575:	83 c4 14             	add    esp,0x14
c0023578:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002357e:	53                   	push   ebx
c002357f:	6a 01                	push   0x1
c0023581:	68 a8 31 02 c0       	push   0xc00231a8
c0023586:	6a 0f                	push   0xf
c0023588:	53                   	push   ebx
c0023589:	e8 82 05 ff ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002358e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023594:	eb 38                	jmp    c00235ce <IDE::open(int, int, void*)+0x3c4>
c0023596:	83 ec 0c             	sub    esp,0xc
c0023599:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235a3:	53                   	push   ebx
c00235a4:	6a 00                	push   0x0
c00235a6:	68 8c 31 02 c0       	push   0xc002318c
c00235ab:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235b1:	53                   	push   ebx
c00235b2:	e8 59 05 ff ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235b7:	83 c4 14             	add    esp,0x14
c00235ba:	53                   	push   ebx
c00235bb:	6a 00                	push   0x0
c00235bd:	68 a8 31 02 c0       	push   0xc00231a8
c00235c2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235c8:	53                   	push   ebx
c00235c9:	e8 42 05 ff ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235d0:	83 c4 20             	add    esp,0x20
c00235d3:	83 ec 0c             	sub    esp,0xc
c00235d6:	53                   	push   ebx
c00235d7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00235da:	83 c4 0c             	add    esp,0xc
c00235dd:	6a 07                	push   0x7
c00235df:	6a 00                	push   0x0
c00235e1:	53                   	push   ebx
c00235e2:	e8 91 fa ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00235e7:	83 c4 0c             	add    esp,0xc
c00235ea:	6a 07                	push   0x7
c00235ec:	6a 01                	push   0x1
c00235ee:	53                   	push   ebx
c00235ef:	e8 84 fa ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00235f4:	83 c4 0c             	add    esp,0xc
c00235f7:	6a 01                	push   0x1
c00235f9:	6a 00                	push   0x0
c00235fb:	53                   	push   ebx
c00235fc:	e8 c3 fb ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c0023601:	83 c4 0c             	add    esp,0xc
c0023604:	6a 01                	push   0x1
c0023606:	6a 01                	push   0x1
c0023608:	53                   	push   ebx
c0023609:	e8 b6 fb ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c002360e:	83 c4 2c             	add    esp,0x2c
c0023611:	31 c0                	xor    eax,eax
c0023613:	5b                   	pop    ebx
c0023614:	5e                   	pop    esi
c0023615:	5f                   	pop    edi
c0023616:	5d                   	pop    ebp
c0023617:	c3                   	ret    

c0023618 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023618:	55                   	push   ebp
c0023619:	57                   	push   edi
c002361a:	56                   	push   esi
c002361b:	53                   	push   ebx
c002361c:	83 ec 1c             	sub    esp,0x1c
c002361f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023623:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023627:	8d 50 f8             	lea    edx,[eax-0x8]
c002362a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002362e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023632:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023636:	80 fa 03             	cmp    dl,0x3
c0023639:	77 5d                	ja     c0023698 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002363b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002363f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023643:	0f b6 db             	movzx  ebx,bl
c0023646:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023649:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002364d:	83 ca 80             	or     edx,0xffffff80
c0023650:	0f b6 d2             	movzx  edx,dl
c0023653:	52                   	push   edx
c0023654:	6a 0c                	push   0xc
c0023656:	53                   	push   ebx
c0023657:	56                   	push   esi
c0023658:	e8 5b f9 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002365d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023666:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002366a:	0f b6 c0             	movzx  eax,al
c002366d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023671:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023673:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023678:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002367c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023680:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023684:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002368c:	83 c4 2c             	add    esp,0x2c
c002368f:	5b                   	pop    ebx
c0023690:	5e                   	pop    esi
c0023691:	5f                   	pop    edi
c0023692:	5d                   	pop    ebp
c0023693:	e9 20 f9 ff ff       	jmp    c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023698:	3c 07                	cmp    al,0x7
c002369a:	77 10                	ja     c00236ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002369c:	0f b6 db             	movzx  ebx,bl
c002369f:	0f b6 d0             	movzx  edx,al
c00236a2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236aa:	eb 2d                	jmp    c00236d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236ac:	3c 0d                	cmp    al,0xd
c00236ae:	77 13                	ja     c00236c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236b0:	0f b6 db             	movzx  ebx,bl
c00236b3:	0f b6 c0             	movzx  eax,al
c00236b6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236bd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236c1:	eb 16                	jmp    c00236d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236c3:	3c 15                	cmp    al,0x15
c00236c5:	77 14                	ja     c00236db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236c7:	0f b6 db             	movzx  ebx,bl
c00236ca:	0f b6 c0             	movzx  eax,al
c00236cd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00236d5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00236d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236db:	83 c4 1c             	add    esp,0x1c
c00236de:	5b                   	pop    ebx
c00236df:	5e                   	pop    esi
c00236e0:	5f                   	pop    edi
c00236e1:	5d                   	pop    ebp
c00236e2:	c3                   	ret    
c00236e3:	90                   	nop

c00236e4 <IDE::detect()>:
c00236e4:	55                   	push   ebp
c00236e5:	57                   	push   edi
c00236e6:	56                   	push   esi
c00236e7:	53                   	push   ebx
c00236e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236ee:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236f5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236fc:	0f 85 9d 02 00 00    	jne    c002399f <IDE::detect()+0x2bb>
c0023702:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023709:	31 f6                	xor    esi,esi
c002370b:	31 ed                	xor    ebp,ebp
c002370d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023715:	89 e8                	mov    eax,ebp
c0023717:	c1 e0 06             	shl    eax,0x6
c002371a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023722:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023726:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002372a:	c1 e0 04             	shl    eax,0x4
c002372d:	83 c8 a0             	or     eax,0xffffffa0
c0023730:	0f b6 c0             	movzx  eax,al
c0023733:	50                   	push   eax
c0023734:	6a 06                	push   0x6
c0023736:	56                   	push   esi
c0023737:	53                   	push   ebx
c0023738:	e8 7b f8 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002373d:	83 c4 0c             	add    esp,0xc
c0023740:	6a 0c                	push   0xc
c0023742:	56                   	push   esi
c0023743:	53                   	push   ebx
c0023744:	e8 2f f9 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023749:	83 c4 0c             	add    esp,0xc
c002374c:	6a 0c                	push   0xc
c002374e:	56                   	push   esi
c002374f:	53                   	push   ebx
c0023750:	e8 23 f9 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023755:	83 c4 0c             	add    esp,0xc
c0023758:	6a 0c                	push   0xc
c002375a:	56                   	push   esi
c002375b:	53                   	push   ebx
c002375c:	e8 17 f9 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023761:	83 c4 0c             	add    esp,0xc
c0023764:	6a 0c                	push   0xc
c0023766:	56                   	push   esi
c0023767:	53                   	push   ebx
c0023768:	e8 0b f9 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c002376d:	68 ec 00 00 00       	push   0xec
c0023772:	6a 07                	push   0x7
c0023774:	56                   	push   esi
c0023775:	53                   	push   ebx
c0023776:	e8 3d f8 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002377b:	83 c4 1c             	add    esp,0x1c
c002377e:	6a 0c                	push   0xc
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	e8 f1 f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023787:	83 c4 0c             	add    esp,0xc
c002378a:	6a 0c                	push   0xc
c002378c:	56                   	push   esi
c002378d:	53                   	push   ebx
c002378e:	e8 e5 f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023793:	83 c4 0c             	add    esp,0xc
c0023796:	6a 0c                	push   0xc
c0023798:	56                   	push   esi
c0023799:	53                   	push   ebx
c002379a:	e8 d9 f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c002379f:	83 c4 0c             	add    esp,0xc
c00237a2:	6a 0c                	push   0xc
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 cd f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00237ab:	83 c4 0c             	add    esp,0xc
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 c1 f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 10             	add    esp,0x10
c00237ba:	84 c0                	test   al,al
c00237bc:	0f 84 63 01 00 00    	je     c0023925 <IDE::detect()+0x241>
c00237c2:	31 ff                	xor    edi,edi
c00237c4:	50                   	push   eax
c00237c5:	6a 0c                	push   0xc
c00237c7:	56                   	push   esi
c00237c8:	53                   	push   ebx
c00237c9:	e8 aa f8 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c00237ce:	83 c4 10             	add    esp,0x10
c00237d1:	a8 01                	test   al,0x1
c00237d3:	0f 85 6d 01 00 00    	jne    c0023946 <IDE::detect()+0x262>
c00237d9:	84 c0                	test   al,al
c00237db:	78 04                	js     c00237e1 <IDE::detect()+0xfd>
c00237dd:	a8 08                	test   al,0x8
c00237df:	75 27                	jne    c0023808 <IDE::detect()+0x124>
c00237e1:	47                   	inc    edi
c00237e2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237e8:	7e da                	jle    c00237c4 <IDE::detect()+0xe0>
c00237ea:	50                   	push   eax
c00237eb:	50                   	push   eax
c00237ec:	6a 00                	push   0x0
c00237ee:	68 40 4b 4c 00       	push   0x4c4b40
c00237f3:	e8 3d a5 ff ff       	call   c001dd35 <nanoSleep(unsigned long long)>
c00237f8:	83 c4 10             	add    esp,0x10
c00237fb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023801:	75 c1                	jne    c00237c4 <IDE::detect()+0xe0>
c0023803:	e9 3e 01 00 00       	jmp    c0023946 <IDE::detect()+0x262>
c0023808:	31 c9                	xor    ecx,ecx
c002380a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002380e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023812:	83 ec 0c             	sub    esp,0xc
c0023815:	68 80 00 00 00       	push   0x80
c002381a:	57                   	push   edi
c002381b:	6a 00                	push   0x0
c002381d:	56                   	push   esi
c002381e:	53                   	push   ebx
c002381f:	e8 f4 fd ff ff       	call   c0023618 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023824:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023829:	89 e8                	mov    eax,ebp
c002382b:	89 d1                	mov    ecx,edx
c002382d:	c1 e0 06             	shl    eax,0x6
c0023830:	01 d8                	add    eax,ebx
c0023832:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023839:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023840:	89 f2                	mov    edx,esi
c0023842:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023848:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002384c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023852:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023856:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002385d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023865:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002386c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023874:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002387a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023881:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023887:	8d 54 24 58          	lea    edx,[esp+0x58]
c002388b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002388f:	83 c4 20             	add    esp,0x20
c0023892:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023895:	83 c0 02             	add    eax,0x2
c0023898:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002389e:	83 c7 02             	add    edi,0x2
c00238a1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238a4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238aa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238ae:	75 e2                	jne    c0023892 <IDE::detect()+0x1ae>
c00238b0:	89 e8                	mov    eax,ebp
c00238b2:	c1 e0 06             	shl    eax,0x6
c00238b5:	01 d8                	add    eax,ebx
c00238b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238c4:	66 c1 ea 09          	shr    dx,0x9
c00238c8:	83 e2 01             	and    edx,0x1
c00238cb:	84 c9                	test   cl,cl
c00238cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00238d3:	75 22                	jne    c00238f7 <IDE::detect()+0x213>
c00238d5:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00238dc:	74 46                	je     c0023924 <IDE::detect()+0x240>
c00238de:	83 ec 0c             	sub    esp,0xc
c00238e1:	68 7c 01 00 00       	push   0x17c
c00238e6:	e8 ae bc fe ff       	call   c000f599 <malloc>
c00238eb:	89 c7                	mov    edi,eax
c00238ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00238f0:	e8 15 05 00 00       	call   c0023e0a <ATA::ATA()>
c00238f5:	eb 17                	jmp    c002390e <IDE::detect()+0x22a>
c00238f7:	83 ec 0c             	sub    esp,0xc
c00238fa:	68 80 01 00 00       	push   0x180
c00238ff:	e8 95 bc fe ff       	call   c000f599 <malloc>
c0023904:	89 c7                	mov    edi,eax
c0023906:	89 04 24             	mov    DWORD PTR [esp],eax
c0023909:	e8 04 0b 00 00       	call   c0024412 <ATAPI::ATAPI()>
c002390e:	5a                   	pop    edx
c002390f:	59                   	pop    ecx
c0023910:	57                   	push   edi
c0023911:	53                   	push   ebx
c0023912:	e8 81 02 ff ff       	call   c0013b98 <Device::addChild(Device*)>
c0023917:	8b 07                	mov    eax,DWORD PTR [edi]
c0023919:	53                   	push   ebx
c002391a:	55                   	push   ebp
c002391b:	6a 00                	push   0x0
c002391d:	57                   	push   edi
c002391e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023921:	83 c4 20             	add    esp,0x20
c0023924:	45                   	inc    ebp
c0023925:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002392a:	74 0d                	je     c0023939 <IDE::detect()+0x255>
c002392c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023934:	e9 dc fd ff ff       	jmp    c0023715 <IDE::detect()+0x31>
c0023939:	4e                   	dec    esi
c002393a:	74 63                	je     c002399f <IDE::detect()+0x2bb>
c002393c:	be 01 00 00 00       	mov    esi,0x1
c0023941:	e9 c7 fd ff ff       	jmp    c002370d <IDE::detect()+0x29>
c0023946:	50                   	push   eax
c0023947:	6a 04                	push   0x4
c0023949:	56                   	push   esi
c002394a:	53                   	push   ebx
c002394b:	e8 28 f7 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023950:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023954:	83 c4 0c             	add    esp,0xc
c0023957:	6a 05                	push   0x5
c0023959:	56                   	push   esi
c002395a:	53                   	push   ebx
c002395b:	e8 18 f7 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023960:	83 c4 10             	add    esp,0x10
c0023963:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023967:	80 fa 14             	cmp    dl,0x14
c002396a:	75 04                	jne    c0023970 <IDE::detect()+0x28c>
c002396c:	3c eb                	cmp    al,0xeb
c002396e:	eb 07                	jmp    c0023977 <IDE::detect()+0x293>
c0023970:	3c 96                	cmp    al,0x96
c0023972:	75 b1                	jne    c0023925 <IDE::detect()+0x241>
c0023974:	80 fa 69             	cmp    dl,0x69
c0023977:	75 ac                	jne    c0023925 <IDE::detect()+0x241>
c0023979:	68 a1 00 00 00       	push   0xa1
c002397e:	6a 07                	push   0x7
c0023980:	56                   	push   esi
c0023981:	53                   	push   ebx
c0023982:	e8 31 f6 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023987:	5f                   	pop    edi
c0023988:	58                   	pop    eax
c0023989:	6a 00                	push   0x0
c002398b:	68 40 42 0f 00       	push   0xf4240
c0023990:	e8 a0 a3 ff ff       	call   c001dd35 <nanoSleep(unsigned long long)>
c0023995:	83 c4 10             	add    esp,0x10
c0023998:	b1 01                	mov    cl,0x1
c002399a:	e9 6b fe ff ff       	jmp    c002380a <IDE::detect()+0x126>
c002399f:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239a5:	5b                   	pop    ebx
c00239a6:	5e                   	pop    esi
c00239a7:	5f                   	pop    edi
c00239a8:	5d                   	pop    ebp
c00239a9:	c3                   	ret    

c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239aa:	55                   	push   ebp
c00239ab:	57                   	push   edi
c00239ac:	56                   	push   esi
c00239ad:	53                   	push   ebx
c00239ae:	83 ec 1c             	sub    esp,0x1c
c00239b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239c1:	88 c3                	mov    bl,al
c00239c3:	84 c0                	test   al,al
c00239c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239c9:	0f 84 81 00 00 00    	je     c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00239cf:	83 ec 0c             	sub    esp,0xc
c00239d2:	68 23 c2 02 c0       	push   0xc002c223
c00239d7:	e8 83 ed fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00239dc:	83 c4 10             	add    esp,0x10
c00239df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239e3:	3c 01                	cmp    al,0x1
c00239e5:	74 63                	je     c0023a4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00239e7:	3c 02                	cmp    al,0x2
c00239e9:	75 53                	jne    c0023a3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00239eb:	d1 e6                	shl    esi,1
c00239ed:	09 ee                	or     esi,ebp
c00239ef:	50                   	push   eax
c00239f0:	89 f0                	mov    eax,esi
c00239f2:	6a 01                	push   0x1
c00239f4:	0f b6 f0             	movzx  esi,al
c00239f7:	c1 e6 06             	shl    esi,0x6
c00239fa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a02:	50                   	push   eax
c0023a03:	57                   	push   edi
c0023a04:	e8 6f f6 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023a09:	83 c4 10             	add    esp,0x10
c0023a0c:	a8 01                	test   al,0x1
c0023a0e:	74 02                	je     c0023a12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023a10:	b3 07                	mov    bl,0x7
c0023a12:	a8 02                	test   al,0x2
c0023a14:	74 02                	je     c0023a18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023a16:	b3 03                	mov    bl,0x3
c0023a18:	a8 04                	test   al,0x4
c0023a1a:	74 02                	je     c0023a1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023a1c:	b3 14                	mov    bl,0x14
c0023a1e:	a8 08                	test   al,0x8
c0023a20:	74 02                	je     c0023a24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023a22:	b3 03                	mov    bl,0x3
c0023a24:	a8 10                	test   al,0x10
c0023a26:	74 02                	je     c0023a2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023a28:	b3 15                	mov    bl,0x15
c0023a2a:	a8 20                	test   al,0x20
c0023a2c:	74 02                	je     c0023a30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023a2e:	b3 03                	mov    bl,0x3
c0023a30:	a8 40                	test   al,0x40
c0023a32:	74 02                	je     c0023a36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023a34:	b3 16                	mov    bl,0x16
c0023a36:	84 c0                	test   al,al
c0023a38:	79 16                	jns    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a3a:	b3 0d                	mov    bl,0xd
c0023a3c:	eb 12                	jmp    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a3e:	3c 03                	cmp    al,0x3
c0023a40:	74 0c                	je     c0023a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023a42:	3c 04                	cmp    al,0x4
c0023a44:	75 0a                	jne    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a46:	b3 08                	mov    bl,0x8
c0023a48:	eb 06                	jmp    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a4a:	b3 13                	mov    bl,0x13
c0023a4c:	eb 02                	jmp    c0023a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a4e:	b3 17                	mov    bl,0x17
c0023a50:	83 c4 1c             	add    esp,0x1c
c0023a53:	88 d8                	mov    al,bl
c0023a55:	5b                   	pop    ebx
c0023a56:	5e                   	pop    esi
c0023a57:	5f                   	pop    edi
c0023a58:	5d                   	pop    ebp
c0023a59:	c3                   	ret    

c0023a5a <IDE::polling(unsigned char, unsigned int)>:
c0023a5a:	57                   	push   edi
c0023a5b:	56                   	push   esi
c0023a5c:	53                   	push   ebx
c0023a5d:	bb 04 00 00 00       	mov    ebx,0x4
c0023a62:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a66:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a6b:	52                   	push   edx
c0023a6c:	6a 0c                	push   0xc
c0023a6e:	56                   	push   esi
c0023a6f:	57                   	push   edi
c0023a70:	e8 03 f6 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023a75:	83 c4 10             	add    esp,0x10
c0023a78:	4b                   	dec    ebx
c0023a79:	75 f0                	jne    c0023a6b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a7b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a80:	50                   	push   eax
c0023a81:	6a 0c                	push   0xc
c0023a83:	56                   	push   esi
c0023a84:	57                   	push   edi
c0023a85:	e8 ee f5 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023a8a:	83 c4 10             	add    esp,0x10
c0023a8d:	a8 01                	test   al,0x1
c0023a8f:	75 17                	jne    c0023aa8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a91:	a8 20                	test   al,0x20
c0023a93:	75 0f                	jne    c0023aa4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023a95:	4b                   	dec    ebx
c0023a96:	74 10                	je     c0023aa8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023a98:	84 c0                	test   al,al
c0023a9a:	78 e4                	js     c0023a80 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a9c:	a8 08                	test   al,0x8
c0023a9e:	74 e0                	je     c0023a80 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023aa0:	31 c0                	xor    eax,eax
c0023aa2:	eb 06                	jmp    c0023aaa <IDE::polling(unsigned char, unsigned int)+0x50>
c0023aa4:	b0 01                	mov    al,0x1
c0023aa6:	eb 02                	jmp    c0023aaa <IDE::polling(unsigned char, unsigned int)+0x50>
c0023aa8:	b0 02                	mov    al,0x2
c0023aaa:	5b                   	pop    ebx
c0023aab:	5e                   	pop    esi
c0023aac:	5f                   	pop    edi
c0023aad:	c3                   	ret    

c0023aae <SATABus::close(int, int, void*)>:
c0023aae:	31 c0                	xor    eax,eax
c0023ab0:	c3                   	ret    
c0023ab1:	90                   	nop

c0023ab2 <SATABus::detect()>:
c0023ab2:	c3                   	ret    
c0023ab3:	90                   	nop

c0023ab4 <SATABus::SATABus()>:
c0023ab4:	83 ec 0c             	sub    esp,0xc
c0023ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023abb:	83 ec 08             	sub    esp,0x8
c0023abe:	68 5c c2 02 c0       	push   0xc002c25c
c0023ac3:	50                   	push   eax
c0023ac4:	e8 7d 04 ff ff       	call   c0013f46 <HardDiskController::HardDiskController(char const*)>
c0023ac9:	83 c4 10             	add    esp,0x10
c0023acc:	ba b0 c2 02 c0       	mov    edx,0xc002c2b0
c0023ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad5:	89 10                	mov    DWORD PTR [eax],edx
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	6a 50                	push   0x50
c0023adc:	e8 ac bf fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023ae1:	83 c4 10             	add    esp,0x10
c0023ae4:	89 c2                	mov    edx,eax
c0023ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023af0:	83 ec 0c             	sub    esp,0xc
c0023af3:	6a 50                	push   0x50
c0023af5:	e8 23 d7 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0023afa:	83 c4 10             	add    esp,0x10
c0023afd:	89 c2                	mov    edx,eax
c0023aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b09:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c0023b0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b12:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b1c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b22:	83 ec 0c             	sub    esp,0xc
c0023b25:	6a 03                	push   0x3
c0023b27:	6a 50                	push   0x50
c0023b29:	51                   	push   ecx
c0023b2a:	52                   	push   edx
c0023b2b:	50                   	push   eax
c0023b2c:	e8 e9 e1 fe ff       	call   c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b31:	83 c4 20             	add    esp,0x20
c0023b34:	90                   	nop
c0023b35:	83 c4 0c             	add    esp,0xc
c0023b38:	c3                   	ret    
c0023b39:	90                   	nop

c0023b3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b3a:	83 ec 0c             	sub    esp,0xc
c0023b3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b41:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b47:	09 c2                	or     edx,eax
c0023b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b53:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b55:	31 c0                	xor    eax,eax
c0023b57:	c1 e9 08             	shr    ecx,0x8
c0023b5a:	83 e1 0f             	and    ecx,0xf
c0023b5d:	39 c8                	cmp    eax,ecx
c0023b5f:	74 0a                	je     c0023b6b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b61:	f6 c2 01             	test   dl,0x1
c0023b64:	74 18                	je     c0023b7e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b66:	d1 ea                	shr    edx,1
c0023b68:	40                   	inc    eax
c0023b69:	eb f2                	jmp    c0023b5d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b6b:	83 ec 0c             	sub    esp,0xc
c0023b6e:	68 80 c2 02 c0       	push   0xc002c280
c0023b73:	e8 53 63 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	83 c8 ff             	or     eax,0xffffffff
c0023b7e:	83 c4 0c             	add    esp,0xc
c0023b81:	c3                   	ret    

c0023b82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b86:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b89:	89 c2                	mov    edx,eax
c0023b8b:	c1 ea 08             	shr    edx,0x8
c0023b8e:	83 e2 0f             	and    edx,0xf
c0023b91:	fe ca                	dec    dl
c0023b93:	75 31                	jne    c0023bc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b95:	83 e0 0f             	and    eax,0xf
c0023b98:	3c 03                	cmp    al,0x3
c0023b9a:	75 2a                	jne    c0023bc6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b9c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023b9f:	b8 02 00 00 00       	mov    eax,0x2
c0023ba4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023baa:	74 1c                	je     c0023bc8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bac:	b8 04 00 00 00       	mov    eax,0x4
c0023bb1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bb7:	74 0f                	je     c0023bc8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bb9:	31 c0                	xor    eax,eax
c0023bbb:	83 fa 03             	cmp    edx,0x3
c0023bbe:	0f 94 c0             	sete   al
c0023bc1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bc5:	c3                   	ret    
c0023bc6:	31 c0                	xor    eax,eax
c0023bc8:	c3                   	ret    
c0023bc9:	90                   	nop

c0023bca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bd1:	0f ba e2 0f          	bt     edx,0xf
c0023bd5:	72 f7                	jb     c0023bce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023bd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bda:	83 ca 10             	or     edx,0x10
c0023bdd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023be0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023be3:	83 ca 01             	or     edx,0x1
c0023be6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023be9:	c3                   	ret    

c0023bea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bf1:	83 e2 fe             	and    edx,0xfffffffe
c0023bf4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bfa:	83 e2 ef             	and    edx,0xffffffef
c0023bfd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c03:	0f ba e2 0e          	bt     edx,0xe
c0023c07:	72 f7                	jb     c0023c00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c0c:	0f ba e2 0f          	bt     edx,0xf
c0023c10:	72 ee                	jb     c0023c00 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c12:	c3                   	ret    
c0023c13:	90                   	nop

c0023c14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c14:	55                   	push   ebp
c0023c15:	57                   	push   edi
c0023c16:	56                   	push   esi
c0023c17:	53                   	push   ebx
c0023c18:	83 ec 1c             	sub    esp,0x1c
c0023c1b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c27:	53                   	push   ebx
c0023c28:	89 fd                	mov    ebp,edi
c0023c2a:	56                   	push   esi
c0023c2b:	c1 e5 0a             	shl    ebp,0xa
c0023c2e:	e8 b7 ff ff ff       	call   c0023bea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c33:	83 ec 0c             	sub    esp,0xc
c0023c36:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c3c:	01 e8                	add    eax,ebp
c0023c3e:	89 03                	mov    DWORD PTR [ebx],eax
c0023c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c42:	68 00 04 00 00       	push   0x400
c0023c47:	6a 00                	push   0x0
c0023c49:	50                   	push   eax
c0023c4a:	e8 01 cb fd ff       	call   c0000750 <memset>
c0023c4f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c55:	89 fa                	mov    edx,edi
c0023c57:	01 e8                	add    eax,ebp
c0023c59:	c1 e7 0d             	shl    edi,0xd
c0023c5c:	89 03                	mov    DWORD PTR [ebx],eax
c0023c5e:	c1 e2 08             	shl    edx,0x8
c0023c61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c68:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c72:	89 d0                	mov    eax,edx
c0023c74:	83 c4 1c             	add    esp,0x1c
c0023c77:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c83:	68 00 01 00 00       	push   0x100
c0023c88:	6a 00                	push   0x0
c0023c8a:	50                   	push   eax
c0023c8b:	e8 c0 ca fd ff       	call   c0000750 <memset>
c0023c90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c94:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023c9a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ca0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ca4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ca7:	83 c4 10             	add    esp,0x10
c0023caa:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023cb1:	31 ff                	xor    edi,edi
c0023cb3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023cb9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cc3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cc9:	83 c5 20             	add    ebp,0x20
c0023ccc:	01 f8                	add    eax,edi
c0023cce:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023cd1:	52                   	push   edx
c0023cd2:	68 00 01 00 00       	push   0x100
c0023cd7:	6a 00                	push   0x0
c0023cd9:	50                   	push   eax
c0023cda:	e8 71 ca fd ff       	call   c0000750 <memset>
c0023cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023cec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023cf3:	01 f8                	add    eax,edi
c0023cf5:	81 c7 00 01 00 00    	add    edi,0x100
c0023cfb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023cfe:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d04:	75 b3                	jne    c0023cb9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d06:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d0a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d0e:	83 c4 1c             	add    esp,0x1c
c0023d11:	5b                   	pop    ebx
c0023d12:	5e                   	pop    esi
c0023d13:	5f                   	pop    edi
c0023d14:	5d                   	pop    ebp
c0023d15:	e9 b0 fe ff ff       	jmp    c0023bca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d1a:	55                   	push   ebp
c0023d1b:	57                   	push   edi
c0023d1c:	56                   	push   esi
c0023d1d:	53                   	push   ebx
c0023d1e:	31 db                	xor    ebx,ebx
c0023d20:	83 ec 0c             	sub    esp,0xc
c0023d23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d27:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d2b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d2e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d34:	74 7a                	je     c0023db0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023d3a:	89 d8                	mov    eax,ebx
c0023d3c:	c1 e0 07             	shl    eax,0x7
c0023d3f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023d46:	55                   	push   ebp
c0023d47:	56                   	push   esi
c0023d48:	e8 35 fe ff ff       	call   c0023b82 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d4d:	5a                   	pop    edx
c0023d4e:	83 f8 01             	cmp    eax,0x1
c0023d51:	59                   	pop    ecx
c0023d52:	75 21                	jne    c0023d75 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023d54:	50                   	push   eax
c0023d55:	53                   	push   ebx
c0023d56:	55                   	push   ebp
c0023d57:	56                   	push   esi
c0023d58:	e8 b7 fe ff ff       	call   c0023c14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d5d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d64:	e8 30 b8 fe ff       	call   c000f599 <malloc>
c0023d69:	89 c5                	mov    ebp,eax
c0023d6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d6e:	e8 03 0d 00 00       	call   c0024a76 <SATA::SATA()>
c0023d73:	eb 24                	jmp    c0023d99 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023d75:	83 f8 04             	cmp    eax,0x4
c0023d78:	75 36                	jne    c0023db0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d7a:	51                   	push   ecx
c0023d7b:	53                   	push   ebx
c0023d7c:	55                   	push   ebp
c0023d7d:	56                   	push   esi
c0023d7e:	e8 91 fe ff ff       	call   c0023c14 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d83:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023d8a:	e8 0a b8 fe ff       	call   c000f599 <malloc>
c0023d8f:	89 c5                	mov    ebp,eax
c0023d91:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d94:	e8 53 10 00 00       	call   c0024dec <SATAPI::SATAPI()>
c0023d99:	58                   	pop    eax
c0023d9a:	5a                   	pop    edx
c0023d9b:	55                   	push   ebp
c0023d9c:	56                   	push   esi
c0023d9d:	e8 f6 fd fe ff       	call   c0013b98 <Device::addChild(Device*)>
c0023da2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023da5:	56                   	push   esi
c0023da6:	6a 00                	push   0x0
c0023da8:	53                   	push   ebx
c0023da9:	55                   	push   ebp
c0023daa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023dad:	83 c4 20             	add    esp,0x20
c0023db0:	d1 ef                	shr    edi,1
c0023db2:	43                   	inc    ebx
c0023db3:	83 fb 20             	cmp    ebx,0x20
c0023db6:	0f 85 72 ff ff ff    	jne    c0023d2e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023dbc:	83 c4 0c             	add    esp,0xc
c0023dbf:	5b                   	pop    ebx
c0023dc0:	5e                   	pop    esi
c0023dc1:	5f                   	pop    edi
c0023dc2:	5d                   	pop    ebp
c0023dc3:	c3                   	ret    

c0023dc4 <SATABus::open(int, int, void*)>:
c0023dc4:	83 ec 14             	sub    esp,0x14
c0023dc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dcb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023dd1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023dd7:	52                   	push   edx
c0023dd8:	50                   	push   eax
c0023dd9:	e8 3c ff ff ff       	call   c0023d1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023dde:	31 c0                	xor    eax,eax
c0023de0:	83 c4 1c             	add    esp,0x1c
c0023de3:	c3                   	ret    

c0023de4 <ATA::close(int, int, void*)>:
c0023de4:	83 ec 0c             	sub    esp,0xc
c0023de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023deb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023df1:	85 c0                	test   eax,eax
c0023df3:	74 0c                	je     c0023e01 <ATA::close(int, int, void*)+0x1d>
c0023df5:	83 ec 0c             	sub    esp,0xc
c0023df8:	8b 10                	mov    edx,DWORD PTR [eax]
c0023dfa:	50                   	push   eax
c0023dfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023dfe:	83 c4 10             	add    esp,0x10
c0023e01:	31 c0                	xor    eax,eax
c0023e03:	83 c4 0c             	add    esp,0xc
c0023e06:	c3                   	ret    
c0023e07:	90                   	nop

c0023e08 <ATA::powerSaving(PowerSavingLevel)>:
c0023e08:	c3                   	ret    
c0023e09:	90                   	nop

c0023e0a <ATA::ATA()>:
c0023e0a:	83 ec 0c             	sub    esp,0xc
c0023e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e11:	83 ec 04             	sub    esp,0x4
c0023e14:	68 00 02 00 00       	push   0x200
c0023e19:	68 79 c3 02 c0       	push   0xc002c379
c0023e1e:	50                   	push   eax
c0023e1f:	e8 aa 01 ff ff       	call   c0013fce <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e24:	83 c4 10             	add    esp,0x10
c0023e27:	ba fc c2 02 c0       	mov    edx,0xc002c2fc
c0023e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e30:	89 10                	mov    DWORD PTR [eax],edx
c0023e32:	90                   	nop
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	c3                   	ret    
c0023e37:	90                   	nop

c0023e38 <ATA::flush(bool)>:
c0023e38:	53                   	push   ebx
c0023e39:	83 ec 08             	sub    esp,0x8
c0023e3c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e45:	19 c0                	sbb    eax,eax
c0023e47:	83 e0 fd             	and    eax,0xfffffffd
c0023e4a:	05 ea 00 00 00       	add    eax,0xea
c0023e4f:	50                   	push   eax
c0023e50:	6a 07                	push   0x7
c0023e52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e59:	50                   	push   eax
c0023e5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e60:	e8 53 f1 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e65:	83 c4 0c             	add    esp,0xc
c0023e68:	6a 00                	push   0x0
c0023e6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e71:	50                   	push   eax
c0023e72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e78:	e8 dd fb ff ff       	call   c0023a5a <IDE::polling(unsigned char, unsigned int)>
c0023e7d:	83 c4 18             	add    esp,0x18
c0023e80:	5b                   	pop    ebx
c0023e81:	c3                   	ret    

c0023e82 <ATA::readyForCommand()>:
c0023e82:	56                   	push   esi
c0023e83:	53                   	push   ebx
c0023e84:	31 db                	xor    ebx,ebx
c0023e86:	50                   	push   eax
c0023e87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023e8b:	50                   	push   eax
c0023e8c:	6a 0c                	push   0xc
c0023e8e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023e95:	50                   	push   eax
c0023e96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023e9c:	e8 d7 f1 ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0023ea1:	83 c4 10             	add    esp,0x10
c0023ea4:	a8 88                	test   al,0x88
c0023ea6:	74 23                	je     c0023ecb <ATA::readyForCommand()+0x49>
c0023ea8:	43                   	inc    ebx
c0023ea9:	83 fb 63             	cmp    ebx,0x63
c0023eac:	7e dd                	jle    c0023e8b <ATA::readyForCommand()+0x9>
c0023eae:	51                   	push   ecx
c0023eaf:	51                   	push   ecx
c0023eb0:	6a 00                	push   0x0
c0023eb2:	68 40 42 0f 00       	push   0xf4240
c0023eb7:	e8 79 9e ff ff       	call   c001dd35 <nanoSleep(unsigned long long)>
c0023ebc:	83 c4 10             	add    esp,0x10
c0023ebf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ec5:	75 c4                	jne    c0023e8b <ATA::readyForCommand()+0x9>
c0023ec7:	31 c0                	xor    eax,eax
c0023ec9:	eb 02                	jmp    c0023ecd <ATA::readyForCommand()+0x4b>
c0023ecb:	b0 01                	mov    al,0x1
c0023ecd:	5a                   	pop    edx
c0023ece:	5b                   	pop    ebx
c0023ecf:	5e                   	pop    esi
c0023ed0:	c3                   	ret    
c0023ed1:	90                   	nop

c0023ed2 <ATA::access(unsigned long long, int, void*, bool)>:
c0023ed2:	55                   	push   ebp
c0023ed3:	57                   	push   edi
c0023ed4:	56                   	push   esi
c0023ed5:	53                   	push   ebx
c0023ed6:	83 ec 2c             	sub    esp,0x2c
c0023ed9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023edd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023ee1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023ee5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ee9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023eed:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023ef1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023ef5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023efb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023eff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f09:	c1 e0 06             	shl    eax,0x6
c0023f0c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f14:	74 5d                	je     c0023f73 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f16:	89 fa                	mov    edx,edi
c0023f18:	89 f0                	mov    eax,esi
c0023f1a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f1e:	c1 ea 1c             	shr    edx,0x1c
c0023f21:	89 d1                	mov    ecx,edx
c0023f23:	09 c1                	or     ecx,eax
c0023f25:	74 25                	je     c0023f4c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f27:	31 ed                	xor    ebp,ebp
c0023f29:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f30:	89 fa                	mov    edx,edi
c0023f32:	89 f0                	mov    eax,esi
c0023f34:	0f ad d0             	shrd   eax,edx,cl
c0023f37:	d3 ea                	shr    edx,cl
c0023f39:	f6 c1 20             	test   cl,0x20
c0023f3c:	74 02                	je     c0023f40 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f3e:	89 d0                	mov    eax,edx
c0023f40:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f44:	45                   	inc    ebp
c0023f45:	83 fd 06             	cmp    ebp,0x6
c0023f48:	75 df                	jne    c0023f29 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f4a:	eb 76                	jmp    c0023fc2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f4c:	89 f0                	mov    eax,esi
c0023f4e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f53:	89 fa                	mov    edx,edi
c0023f55:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f5c:	0f ac d0 10          	shrd   eax,edx,0x10
c0023f60:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f65:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f69:	c1 ee 18             	shr    esi,0x18
c0023f6c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023f71:	eb 56                	jmp    c0023fc9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f73:	6a 00                	push   0x0
c0023f75:	6a 3f                	push   0x3f
c0023f77:	57                   	push   edi
c0023f78:	56                   	push   esi
c0023f79:	e8 26 29 00 00       	call   c00268a4 <__umoddi3>
c0023f7e:	83 c4 10             	add    esp,0x10
c0023f81:	40                   	inc    eax
c0023f82:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023f86:	6a 00                	push   0x0
c0023f88:	68 f0 03 00 00       	push   0x3f0
c0023f8d:	57                   	push   edi
c0023f8e:	56                   	push   esi
c0023f8f:	e8 10 28 00 00       	call   c00267a4 <__udivdi3>
c0023f94:	83 c4 10             	add    esp,0x10
c0023f97:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023f9c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fa3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fa8:	6a 00                	push   0x0
c0023faa:	6a 3f                	push   0x3f
c0023fac:	57                   	push   edi
c0023fad:	56                   	push   esi
c0023fae:	e8 f1 27 00 00       	call   c00267a4 <__udivdi3>
c0023fb3:	83 c4 10             	add    esp,0x10
c0023fb6:	89 c6                	mov    esi,eax
c0023fb8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023fbd:	83 e6 0f             	and    esi,0xf
c0023fc0:	eb 07                	jmp    c0023fc9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fc2:	31 f6                	xor    esi,esi
c0023fc4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023fc9:	bf 01 00 00 00       	mov    edi,0x1
c0023fce:	50                   	push   eax
c0023fcf:	6a 00                	push   0x0
c0023fd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fd8:	50                   	push   eax
c0023fd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023fdd:	e8 e2 f1 ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c0023fe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023fe5:	e8 98 fe ff ff       	call   c0023e82 <ATA::readyForCommand()>
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	84 c0                	test   al,al
c0023fef:	0f 84 5a 02 00 00    	je     c002424f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023ff5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023ffb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024001:	c1 e0 04             	shl    eax,0x4
c0024004:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002400b:	09 c6                	or     esi,eax
c002400d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024012:	75 05                	jne    c0024019 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024014:	83 ce a0             	or     esi,0xffffffa0
c0024017:	eb 03                	jmp    c002401c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024019:	83 ce e0             	or     esi,0xffffffe0
c002401c:	89 f0                	mov    eax,esi
c002401e:	0f b6 f0             	movzx  esi,al
c0024021:	56                   	push   esi
c0024022:	6a 06                	push   0x6
c0024024:	51                   	push   ecx
c0024025:	52                   	push   edx
c0024026:	e8 8d ef ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402b:	83 c4 10             	add    esp,0x10
c002402e:	6a 00                	push   0x0
c0024030:	6a 01                	push   0x1
c0024032:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024039:	50                   	push   eax
c002403a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024040:	e8 73 ef ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024045:	83 c4 10             	add    esp,0x10
c0024048:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002404d:	75 6e                	jne    c00240bd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002404f:	6a 00                	push   0x0
c0024051:	6a 08                	push   0x8
c0024053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002405a:	50                   	push   eax
c002405b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024061:	e8 52 ef ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024066:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002406b:	50                   	push   eax
c002406c:	6a 09                	push   0x9
c002406e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024075:	50                   	push   eax
c0024076:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002407c:	e8 37 ef ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024081:	83 c4 20             	add    esp,0x20
c0024084:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024089:	50                   	push   eax
c002408a:	6a 0a                	push   0xa
c002408c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024093:	50                   	push   eax
c0024094:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002409a:	e8 19 ef ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00240a4:	50                   	push   eax
c00240a5:	6a 0b                	push   0xb
c00240a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ae:	50                   	push   eax
c00240af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b5:	e8 fe ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ba:	83 c4 20             	add    esp,0x20
c00240bd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00240c2:	50                   	push   eax
c00240c3:	6a 02                	push   0x2
c00240c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240cc:	50                   	push   eax
c00240cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d3:	e8 e0 ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00240dd:	50                   	push   eax
c00240de:	6a 03                	push   0x3
c00240e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e7:	50                   	push   eax
c00240e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ee:	e8 c5 ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f3:	83 c4 20             	add    esp,0x20
c00240f6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00240fb:	50                   	push   eax
c00240fc:	6a 04                	push   0x4
c00240fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024105:	50                   	push   eax
c0024106:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410c:	e8 a7 ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024111:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024116:	50                   	push   eax
c0024117:	6a 05                	push   0x5
c0024119:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024120:	50                   	push   eax
c0024121:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024127:	e8 8c ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002412c:	83 c4 20             	add    esp,0x20
c002412f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024134:	0f 94 c0             	sete   al
c0024137:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002413c:	74 09                	je     c0024147 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002413e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024145:	eb 07                	jmp    c002414e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024147:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002414e:	0f b6 c0             	movzx  eax,al
c0024151:	50                   	push   eax
c0024152:	6a 07                	push   0x7
c0024154:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002415b:	50                   	push   eax
c002415c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024162:	e8 51 ee ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024167:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002416b:	83 c4 10             	add    esp,0x10
c002416e:	85 f6                	test   esi,esi
c0024170:	0f 84 ba 00 00 00    	je     c0024230 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024176:	50                   	push   eax
c0024177:	6a 01                	push   0x1
c0024179:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024180:	50                   	push   eax
c0024181:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024187:	e8 ce f8 ff ff       	call   c0023a5a <IDE::polling(unsigned char, unsigned int)>
c002418c:	83 c4 10             	add    esp,0x10
c002418f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024195:	84 c0                	test   al,al
c0024197:	74 2c                	je     c00241c5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024199:	0f b6 f8             	movzx  edi,al
c002419c:	0f b6 d2             	movzx  edx,dl
c002419f:	57                   	push   edi
c00241a0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00241a7:	50                   	push   eax
c00241a8:	52                   	push   edx
c00241a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241af:	e8 f6 f7 ff ff       	call   c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241b4:	c7 04 24 d4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2d4
c00241bb:	e8 9f e5 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00241c0:	e9 87 00 00 00       	jmp    c002424c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00241c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00241ca:	74 33                	je     c00241ff <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00241cc:	31 ed                	xor    ebp,ebp
c00241ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00241d2:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00241d6:	50                   	push   eax
c00241d7:	50                   	push   eax
c00241d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241df:	50                   	push   eax
c00241e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e6:	e8 bb ed ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c00241eb:	89 c2                	mov    edx,eax
c00241ed:	89 f8                	mov    eax,edi
c00241ef:	66 ef                	out    dx,ax
c00241f1:	45                   	inc    ebp
c00241f2:	83 c4 10             	add    esp,0x10
c00241f5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00241fb:	75 d1                	jne    c00241ce <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00241fd:	eb 23                	jmp    c0024222 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00241ff:	0f b6 d2             	movzx  edx,dl
c0024202:	51                   	push   ecx
c0024203:	51                   	push   ecx
c0024204:	52                   	push   edx
c0024205:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002420b:	e8 96 ed ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c0024210:	b9 00 01 00 00       	mov    ecx,0x100
c0024215:	89 c2                	mov    edx,eax
c0024217:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002421b:	fc                   	cld    
c002421c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002421f:	83 c4 10             	add    esp,0x10
c0024222:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002422a:	4e                   	dec    esi
c002422b:	e9 3e ff ff ff       	jmp    c002416e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024230:	31 ff                	xor    edi,edi
c0024232:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024237:	74 16                	je     c002424f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024239:	50                   	push   eax
c002423a:	50                   	push   eax
c002423b:	31 c0                	xor    eax,eax
c002423d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024242:	0f 94 c0             	sete   al
c0024245:	50                   	push   eax
c0024246:	53                   	push   ebx
c0024247:	e8 ec fb ff ff       	call   c0023e38 <ATA::flush(bool)>
c002424c:	83 c4 10             	add    esp,0x10
c002424f:	83 c4 2c             	add    esp,0x2c
c0024252:	89 f8                	mov    eax,edi
c0024254:	5b                   	pop    ebx
c0024255:	5e                   	pop    esi
c0024256:	5f                   	pop    edi
c0024257:	5d                   	pop    ebp
c0024258:	c3                   	ret    
c0024259:	90                   	nop

c002425a <ATA::read(unsigned long long, int, void*)>:
c002425a:	57                   	push   edi
c002425b:	b8 04 00 00 00       	mov    eax,0x4
c0024260:	56                   	push   esi
c0024261:	53                   	push   ebx
c0024262:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024266:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002426a:	8d 7a ff             	lea    edi,[edx-0x1]
c002426d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024271:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024275:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002427b:	77 25                	ja     c00242a2 <ATA::read(unsigned long long, int, void*)+0x48>
c002427d:	b8 06 00 00 00       	mov    eax,0x6
c0024282:	85 f6                	test   esi,esi
c0024284:	74 1c                	je     c00242a2 <ATA::read(unsigned long long, int, void*)+0x48>
c0024286:	50                   	push   eax
c0024287:	50                   	push   eax
c0024288:	6a 00                	push   0x0
c002428a:	56                   	push   esi
c002428b:	52                   	push   edx
c002428c:	53                   	push   ebx
c002428d:	51                   	push   ecx
c002428e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024292:	e8 3b fc ff ff       	call   c0023ed2 <ATA::access(unsigned long long, int, void*, bool)>
c0024297:	83 c4 20             	add    esp,0x20
c002429a:	85 c0                	test   eax,eax
c002429c:	0f 95 c0             	setne  al
c002429f:	0f b6 c0             	movzx  eax,al
c00242a2:	5b                   	pop    ebx
c00242a3:	5e                   	pop    esi
c00242a4:	5f                   	pop    edi
c00242a5:	c3                   	ret    

c00242a6 <ATA::write(unsigned long long, int, void*)>:
c00242a6:	57                   	push   edi
c00242a7:	b8 04 00 00 00       	mov    eax,0x4
c00242ac:	56                   	push   esi
c00242ad:	53                   	push   ebx
c00242ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00242b6:	8d 7a ff             	lea    edi,[edx-0x1]
c00242b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00242bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00242c7:	77 25                	ja     c00242ee <ATA::write(unsigned long long, int, void*)+0x48>
c00242c9:	b8 06 00 00 00       	mov    eax,0x6
c00242ce:	85 f6                	test   esi,esi
c00242d0:	74 1c                	je     c00242ee <ATA::write(unsigned long long, int, void*)+0x48>
c00242d2:	50                   	push   eax
c00242d3:	50                   	push   eax
c00242d4:	6a 01                	push   0x1
c00242d6:	56                   	push   esi
c00242d7:	52                   	push   edx
c00242d8:	53                   	push   ebx
c00242d9:	51                   	push   ecx
c00242da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00242de:	e8 ef fb ff ff       	call   c0023ed2 <ATA::access(unsigned long long, int, void*, bool)>
c00242e3:	83 c4 20             	add    esp,0x20
c00242e6:	85 c0                	test   eax,eax
c00242e8:	0f 95 c0             	setne  al
c00242eb:	0f b6 c0             	movzx  eax,al
c00242ee:	5b                   	pop    ebx
c00242ef:	5e                   	pop    esi
c00242f0:	5f                   	pop    edi
c00242f1:	c3                   	ret    

c00242f2 <ATA::detectCHS()>:
c00242f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00242f6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00242fc:	c1 e0 06             	shl    eax,0x6
c00242ff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024305:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002430f:	c7 44 24 04 df c2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c2df
c0024317:	e9 af 5b ff ff       	jmp    c0019ecb <Krnl::panic(char const*)>

c002431c <ATA::open(int, int, void*)>:
c002431c:	53                   	push   ebx
c002431d:	83 ec 08             	sub    esp,0x8
c0024320:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024324:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024328:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002432c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024332:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024338:	c1 e0 06             	shl    eax,0x6
c002433b:	01 d0                	add    eax,edx
c002433d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024344:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002434a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024351:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002435b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024361:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024368:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002436f:	75 0c                	jne    c002437d <ATA::open(int, int, void*)+0x61>
c0024371:	83 ec 0c             	sub    esp,0xc
c0024374:	53                   	push   ebx
c0024375:	e8 78 ff ff ff       	call   c00242f2 <ATA::detectCHS()>
c002437a:	83 c4 10             	add    esp,0x10
c002437d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024383:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024389:	c1 e0 06             	shl    eax,0x6
c002438c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024393:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002439d:	d1 e8                	shr    eax,1
c002439f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00243a5:	6a 04                	push   0x4
c00243a7:	6a 0c                	push   0xc
c00243a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243b0:	50                   	push   eax
c00243b1:	52                   	push   edx
c00243b2:	e8 01 ec ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	90                   	nop
c00243b8:	90                   	nop
c00243b9:	6a 00                	push   0x0
c00243bb:	6a 0c                	push   0xc
c00243bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c4:	50                   	push   eax
c00243c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cb:	e8 e8 eb ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d0:	83 c4 14             	add    esp,0x14
c00243d3:	53                   	push   ebx
c00243d4:	e8 5d fc fe ff       	call   c0014036 <PhysicalDisk::startCache()>
c00243d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00243dc:	e8 d7 1e ff ff       	call   c00162b8 <createPartitionsForDisk(PhysicalDisk*)>
c00243e1:	31 c0                	xor    eax,eax
c00243e3:	83 c4 18             	add    esp,0x18
c00243e6:	5b                   	pop    ebx
c00243e7:	c3                   	ret    

c00243e8 <ATAPI::write(unsigned long long, int, void*)>:
c00243e8:	b8 03 00 00 00       	mov    eax,0x3
c00243ed:	c3                   	ret    

c00243ee <ATAPI::close(int, int, void*)>:
c00243ee:	83 ec 0c             	sub    esp,0xc
c00243f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00243fb:	85 c0                	test   eax,eax
c00243fd:	74 0c                	je     c002440b <ATAPI::close(int, int, void*)+0x1d>
c00243ff:	83 ec 0c             	sub    esp,0xc
c0024402:	8b 10                	mov    edx,DWORD PTR [eax]
c0024404:	50                   	push   eax
c0024405:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024408:	83 c4 10             	add    esp,0x10
c002440b:	31 c0                	xor    eax,eax
c002440d:	83 c4 0c             	add    esp,0xc
c0024410:	c3                   	ret    
c0024411:	90                   	nop

c0024412 <ATAPI::ATAPI()>:
c0024412:	83 ec 0c             	sub    esp,0xc
c0024415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024419:	83 ec 04             	sub    esp,0x4
c002441c:	68 00 08 00 00       	push   0x800
c0024421:	68 19 c4 02 c0       	push   0xc002c419
c0024426:	50                   	push   eax
c0024427:	e8 a2 fb fe ff       	call   c0013fce <PhysicalDisk::PhysicalDisk(char const*, int)>
c002442c:	83 c4 10             	add    esp,0x10
c002442f:	ba 34 c3 02 c0       	mov    edx,0xc002c334
c0024434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024438:	89 10                	mov    DWORD PTR [eax],edx
c002443a:	90                   	nop
c002443b:	83 c4 0c             	add    esp,0xc
c002443e:	c3                   	ret    
c002443f:	90                   	nop

c0024440 <ATAPI::readyForCommand()>:
c0024440:	56                   	push   esi
c0024441:	53                   	push   ebx
c0024442:	31 db                	xor    ebx,ebx
c0024444:	50                   	push   eax
c0024445:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024449:	50                   	push   eax
c002444a:	6a 0c                	push   0xc
c002444c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024453:	50                   	push   eax
c0024454:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002445a:	e8 19 ec ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c002445f:	83 c4 10             	add    esp,0x10
c0024462:	a8 88                	test   al,0x88
c0024464:	74 23                	je     c0024489 <ATAPI::readyForCommand()+0x49>
c0024466:	43                   	inc    ebx
c0024467:	83 fb 63             	cmp    ebx,0x63
c002446a:	7e dd                	jle    c0024449 <ATAPI::readyForCommand()+0x9>
c002446c:	51                   	push   ecx
c002446d:	51                   	push   ecx
c002446e:	6a 00                	push   0x0
c0024470:	68 40 42 0f 00       	push   0xf4240
c0024475:	e8 bb 98 ff ff       	call   c001dd35 <nanoSleep(unsigned long long)>
c002447a:	83 c4 10             	add    esp,0x10
c002447d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024483:	75 c4                	jne    c0024449 <ATAPI::readyForCommand()+0x9>
c0024485:	31 c0                	xor    eax,eax
c0024487:	eb 02                	jmp    c002448b <ATAPI::readyForCommand()+0x4b>
c0024489:	b0 01                	mov    al,0x1
c002448b:	5a                   	pop    edx
c002448c:	5b                   	pop    ebx
c002448d:	5e                   	pop    esi
c002448e:	c3                   	ret    
c002448f:	90                   	nop

c0024490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024490:	55                   	push   ebp
c0024491:	57                   	push   edi
c0024492:	56                   	push   esi
c0024493:	53                   	push   ebx
c0024494:	83 ec 20             	sub    esp,0x20
c0024497:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002449b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002449f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00244a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00244a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00244ab:	6a 01                	push   0x1
c00244ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b4:	50                   	push   eax
c00244b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244bb:	e8 04 ed ff ff       	call   c00231c4 <IDE::enableIRQs(unsigned char, bool)>
c00244c0:	5e                   	pop    esi
c00244c1:	58                   	pop    eax
c00244c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244c9:	50                   	push   eax
c00244ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d0:	e8 bd ea ff ff       	call   c0022f92 <IDE::prepareInterrupt(unsigned char)>
c00244d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00244d8:	e8 63 ff ff ff       	call   c0024440 <ATAPI::readyForCommand()>
c00244dd:	83 c4 10             	add    esp,0x10
c00244e0:	84 c0                	test   al,al
c00244e2:	75 0a                	jne    c00244ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00244e4:	bb 01 00 00 00       	mov    ebx,0x1
c00244e9:	e9 57 02 00 00       	jmp    c0024745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00244ee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00244f4:	c1 e0 04             	shl    eax,0x4
c00244f7:	0f b6 c0             	movzx  eax,al
c00244fa:	50                   	push   eax
c00244fb:	6a 06                	push   0x6
c00244fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024504:	50                   	push   eax
c0024505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002450b:	e8 a8 ea ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024510:	6a 00                	push   0x0
c0024512:	6a 01                	push   0x1
c0024514:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002451b:	50                   	push   eax
c002451c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024522:	e8 91 ea ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024527:	83 c4 20             	add    esp,0x20
c002452a:	0f b6 c3             	movzx  eax,bl
c002452d:	0f b6 df             	movzx  ebx,bh
c0024530:	50                   	push   eax
c0024531:	6a 04                	push   0x4
c0024533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002453a:	50                   	push   eax
c002453b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024541:	e8 72 ea ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024546:	53                   	push   ebx
c0024547:	6a 05                	push   0x5
c0024549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024550:	50                   	push   eax
c0024551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024557:	e8 5c ea ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002455c:	83 c4 20             	add    esp,0x20
c002455f:	68 a0 00 00 00       	push   0xa0
c0024564:	6a 07                	push   0x7
c0024566:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002456d:	50                   	push   eax
c002456e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024574:	e8 3f ea ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024579:	83 c4 0c             	add    esp,0xc
c002457c:	6a 01                	push   0x1
c002457e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024585:	50                   	push   eax
c0024586:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458c:	e8 c9 f4 ff ff       	call   c0023a5a <IDE::polling(unsigned char, unsigned int)>
c0024591:	83 c4 10             	add    esp,0x10
c0024594:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002459a:	84 c0                	test   al,al
c002459c:	74 23                	je     c00245c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002459e:	0f b6 d8             	movzx  ebx,al
c00245a1:	0f b6 d2             	movzx  edx,dl
c00245a4:	53                   	push   ebx
c00245a5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00245ac:	50                   	push   eax
c00245ad:	52                   	push   edx
c00245ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245b4:	e8 f1 f3 ff ff       	call   c00239aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00245b9:	83 c4 10             	add    esp,0x10
c00245bc:	e9 84 01 00 00       	jmp    c0024745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245c1:	0f b6 d2             	movzx  edx,dl
c00245c4:	53                   	push   ebx
c00245c5:	53                   	push   ebx
c00245c6:	52                   	push   edx
c00245c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245cd:	e8 d4 e9 ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c00245d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00245d6:	b9 06 00 00 00       	mov    ecx,0x6
c00245db:	89 c2                	mov    edx,eax
c00245dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00245e0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00245e4:	83 c4 10             	add    esp,0x10
c00245e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245f4:	85 db                	test   ebx,ebx
c00245f6:	0f 84 ec 00 00 00    	je     c00246e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00245fc:	51                   	push   ecx
c00245fd:	51                   	push   ecx
c00245fe:	52                   	push   edx
c00245ff:	50                   	push   eax
c0024600:	e8 21 eb ff ff       	call   c0023126 <IDE::waitInterrupt(unsigned char)>
c0024605:	83 c4 10             	add    esp,0x10
c0024608:	84 c0                	test   al,al
c002460a:	0f 84 d4 fe ff ff    	je     c00244e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024610:	56                   	push   esi
c0024611:	56                   	push   esi
c0024612:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024619:	50                   	push   eax
c002461a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024620:	e8 6d e9 ff ff       	call   c0022f92 <IDE::prepareInterrupt(unsigned char)>
c0024625:	83 c4 0c             	add    esp,0xc
c0024628:	6a 04                	push   0x4
c002462a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024631:	50                   	push   eax
c0024632:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024638:	e8 3b ea ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c002463d:	83 c4 0c             	add    esp,0xc
c0024640:	89 c6                	mov    esi,eax
c0024642:	6a 05                	push   0x5
c0024644:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002464b:	50                   	push   eax
c002464c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024652:	e8 21 ea ff ff       	call   c0023078 <IDE::read(unsigned char, unsigned char)>
c0024657:	89 f1                	mov    ecx,esi
c0024659:	0f b6 c0             	movzx  eax,al
c002465c:	0f b6 f1             	movzx  esi,cl
c002465f:	c1 e0 08             	shl    eax,0x8
c0024662:	09 c6                	or     esi,eax
c0024664:	d1 fe                	sar    esi,1
c0024666:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002466a:	83 c4 10             	add    esp,0x10
c002466d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024672:	74 41                	je     c00246b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024674:	31 c9                	xor    ecx,ecx
c0024676:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002467c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024683:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024687:	75 0a                	jne    c0024693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024689:	01 c9                	add    ecx,ecx
c002468b:	01 cd                	add    ebp,ecx
c002468d:	4b                   	dec    ebx
c002468e:	e9 54 ff ff ff       	jmp    c00245e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024693:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024698:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002469c:	51                   	push   ecx
c002469d:	51                   	push   ecx
c002469e:	52                   	push   edx
c002469f:	50                   	push   eax
c00246a0:	e8 01 e9 ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c00246a5:	89 c2                	mov    edx,eax
c00246a7:	89 f0                	mov    eax,esi
c00246a9:	66 ef                	out    dx,ax
c00246ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00246af:	83 c4 10             	add    esp,0x10
c00246b2:	41                   	inc    ecx
c00246b3:	eb c1                	jmp    c0024676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00246b5:	31 f6                	xor    esi,esi
c00246b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246c4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00246c8:	75 06                	jne    c00246d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00246ca:	01 f6                	add    esi,esi
c00246cc:	01 f5                	add    ebp,esi
c00246ce:	eb bd                	jmp    c002468d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00246d0:	51                   	push   ecx
c00246d1:	51                   	push   ecx
c00246d2:	52                   	push   edx
c00246d3:	50                   	push   eax
c00246d4:	e8 cd e8 ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c00246d9:	89 c2                	mov    edx,eax
c00246db:	66 ed                	in     ax,dx
c00246dd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00246e2:	83 c4 10             	add    esp,0x10
c00246e5:	46                   	inc    esi
c00246e6:	eb cf                	jmp    c00246b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00246e8:	51                   	push   ecx
c00246e9:	51                   	push   ecx
c00246ea:	52                   	push   edx
c00246eb:	50                   	push   eax
c00246ec:	e8 35 ea ff ff       	call   c0023126 <IDE::waitInterrupt(unsigned char)>
c00246f1:	83 c4 10             	add    esp,0x10
c00246f4:	84 c0                	test   al,al
c00246f6:	0f 84 e8 fd ff ff    	je     c00244e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246fc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024701:	52                   	push   edx
c0024702:	52                   	push   edx
c0024703:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002470a:	50                   	push   eax
c002470b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024711:	e8 7c e8 ff ff       	call   c0022f92 <IDE::prepareInterrupt(unsigned char)>
c0024716:	83 c4 10             	add    esp,0x10
c0024719:	50                   	push   eax
c002471a:	50                   	push   eax
c002471b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024722:	50                   	push   eax
c0024723:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024729:	e8 78 e8 ff ff       	call   c0022fa6 <IDE::getBase(unsigned char)>
c002472e:	8d 50 07             	lea    edx,[eax+0x7]
c0024731:	ec                   	in     al,dx
c0024732:	83 c4 10             	add    esp,0x10
c0024735:	a8 88                	test   al,0x88
c0024737:	74 0a                	je     c0024743 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024739:	4b                   	dec    ebx
c002473a:	75 dd                	jne    c0024719 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002473c:	bb 02 00 00 00       	mov    ebx,0x2
c0024741:	eb 02                	jmp    c0024745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024743:	31 db                	xor    ebx,ebx
c0024745:	83 c4 1c             	add    esp,0x1c
c0024748:	89 d8                	mov    eax,ebx
c002474a:	5b                   	pop    ebx
c002474b:	5e                   	pop    esi
c002474c:	5f                   	pop    edi
c002474d:	5d                   	pop    ebp
c002474e:	c3                   	ret    
c002474f:	90                   	nop

c0024750 <ATAPI::diskRemoved()>:
c0024750:	83 ec 18             	sub    esp,0x18
c0024753:	68 25 c4 02 c0       	push   0xc002c425
c0024758:	e8 02 e0 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c002475d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024761:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024768:	83 c4 1c             	add    esp,0x1c
c002476b:	c3                   	ret    

c002476c <ATAPI::eject()>:
c002476c:	57                   	push   edi
c002476d:	b9 03 00 00 00       	mov    ecx,0x3
c0024772:	53                   	push   ebx
c0024773:	83 ec 14             	sub    esp,0x14
c0024776:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002477a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002477e:	fc                   	cld    
c002477f:	31 c0                	xor    eax,eax
c0024781:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024783:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024788:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002478d:	50                   	push   eax
c002478e:	50                   	push   eax
c002478f:	6a 00                	push   0x0
c0024791:	6a 00                	push   0x0
c0024793:	6a 00                	push   0x0
c0024795:	6a 02                	push   0x2
c0024797:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002479b:	50                   	push   eax
c002479c:	53                   	push   ebx
c002479d:	e8 ee fc ff ff       	call   c0024490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247a2:	83 c4 14             	add    esp,0x14
c00247a5:	53                   	push   ebx
c00247a6:	e8 a5 ff ff ff       	call   c0024750 <ATAPI::diskRemoved()>
c00247ab:	83 c4 24             	add    esp,0x24
c00247ae:	31 c0                	xor    eax,eax
c00247b0:	5b                   	pop    ebx
c00247b1:	5f                   	pop    edi
c00247b2:	c3                   	ret    
c00247b3:	90                   	nop

c00247b4 <ATAPI::diskInserted()>:
c00247b4:	53                   	push   ebx
c00247b5:	83 ec 14             	sub    esp,0x14
c00247b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247bc:	68 3c c4 02 c0       	push   0xc002c43c
c00247c1:	e8 99 df fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c00247c6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00247cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00247d0:	e8 61 f8 fe ff       	call   c0014036 <PhysicalDisk::startCache()>
c00247d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00247d9:	83 c4 18             	add    esp,0x18
c00247dc:	5b                   	pop    ebx
c00247dd:	e9 d6 1a ff ff       	jmp    c00162b8 <createPartitionsForDisk(PhysicalDisk*)>

c00247e2 <ATAPI::detectMedia()>:
c00247e2:	56                   	push   esi
c00247e3:	53                   	push   ebx
c00247e4:	83 ec 28             	sub    esp,0x28
c00247e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00247eb:	6a 0c                	push   0xc
c00247ed:	6a 00                	push   0x0
c00247ef:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00247f3:	56                   	push   esi
c00247f4:	e8 57 bf fd ff       	call   c0000750 <memset>
c00247f9:	58                   	pop    eax
c00247fa:	5a                   	pop    edx
c00247fb:	6a 00                	push   0x0
c00247fd:	6a 00                	push   0x0
c00247ff:	6a 00                	push   0x0
c0024801:	6a 00                	push   0x0
c0024803:	56                   	push   esi
c0024804:	53                   	push   ebx
c0024805:	e8 86 fc ff ff       	call   c0024490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002480a:	83 c4 1c             	add    esp,0x1c
c002480d:	6a 0c                	push   0xc
c002480f:	6a 00                	push   0x0
c0024811:	56                   	push   esi
c0024812:	e8 39 bf fd ff       	call   c0000750 <memset>
c0024817:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002481c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024821:	59                   	pop    ecx
c0024822:	58                   	pop    eax
c0024823:	6a 01                	push   0x1
c0024825:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024829:	50                   	push   eax
c002482a:	6a 00                	push   0x0
c002482c:	6a 12                	push   0x12
c002482e:	56                   	push   esi
c002482f:	53                   	push   ebx
c0024830:	e8 5b fc ff ff       	call   c0024490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024835:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024839:	83 c4 20             	add    esp,0x20
c002483c:	83 e0 7f             	and    eax,0x7f
c002483f:	3c 70                	cmp    al,0x70
c0024841:	74 15                	je     c0024858 <ATAPI::detectMedia()+0x76>
c0024843:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002484a:	75 0c                	jne    c0024858 <ATAPI::detectMedia()+0x76>
c002484c:	83 ec 0c             	sub    esp,0xc
c002484f:	53                   	push   ebx
c0024850:	e8 5f ff ff ff       	call   c00247b4 <ATAPI::diskInserted()>
c0024855:	83 c4 10             	add    esp,0x10
c0024858:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002485c:	83 e0 0f             	and    eax,0xf
c002485f:	3c 02                	cmp    al,0x2
c0024861:	75 1b                	jne    c002487e <ATAPI::detectMedia()+0x9c>
c0024863:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024868:	75 2d                	jne    c0024897 <ATAPI::detectMedia()+0xb5>
c002486a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024871:	74 24                	je     c0024897 <ATAPI::detectMedia()+0xb5>
c0024873:	83 ec 0c             	sub    esp,0xc
c0024876:	53                   	push   ebx
c0024877:	e8 d4 fe ff ff       	call   c0024750 <ATAPI::diskRemoved()>
c002487c:	eb 16                	jmp    c0024894 <ATAPI::detectMedia()+0xb2>
c002487e:	84 c0                	test   al,al
c0024880:	75 15                	jne    c0024897 <ATAPI::detectMedia()+0xb5>
c0024882:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024889:	75 0c                	jne    c0024897 <ATAPI::detectMedia()+0xb5>
c002488b:	83 ec 0c             	sub    esp,0xc
c002488e:	53                   	push   ebx
c002488f:	e8 20 ff ff ff       	call   c00247b4 <ATAPI::diskInserted()>
c0024894:	83 c4 10             	add    esp,0x10
c0024897:	83 c4 24             	add    esp,0x24
c002489a:	5b                   	pop    ebx
c002489b:	5e                   	pop    esi
c002489c:	c3                   	ret    
c002489d:	90                   	nop

c002489e <ATAPI::open(int, int, void*)>:
c002489e:	53                   	push   ebx
c002489f:	83 ec 08             	sub    esp,0x8
c00248a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248b4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00248ba:	c1 e0 06             	shl    eax,0x6
c00248bd:	01 d0                	add    eax,edx
c00248bf:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00248c6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00248cc:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00248d3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00248dd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00248e3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00248ea:	6a 04                	push   0x4
c00248ec:	6a 0c                	push   0xc
c00248ee:	51                   	push   ecx
c00248ef:	52                   	push   edx
c00248f0:	e8 c3 e6 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248f5:	90                   	nop
c00248f6:	90                   	nop
c00248f7:	6a 00                	push   0x0
c00248f9:	6a 0c                	push   0xc
c00248fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024902:	50                   	push   eax
c0024903:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024909:	e8 aa e6 ff ff       	call   c0022fb8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002490e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024915:	83 c4 14             	add    esp,0x14
c0024918:	53                   	push   ebx
c0024919:	e8 c4 fe ff ff       	call   c00247e2 <ATAPI::detectMedia()>
c002491e:	31 c0                	xor    eax,eax
c0024920:	83 c4 18             	add    esp,0x18
c0024923:	5b                   	pop    ebx
c0024924:	c3                   	ret    
c0024925:	90                   	nop

c0024926 <ATAPI::read(unsigned long long, int, void*)>:
c0024926:	55                   	push   ebp
c0024927:	57                   	push   edi
c0024928:	56                   	push   esi
c0024929:	53                   	push   ebx
c002492a:	83 ec 1c             	sub    esp,0x1c
c002492d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024931:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024935:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024939:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024940:	74 41                	je     c0024983 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024942:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024946:	b9 03 00 00 00       	mov    ecx,0x3
c002494b:	fc                   	cld    
c002494c:	31 c0                	xor    eax,eax
c002494e:	86 fb                	xchg   bl,bh
c0024950:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024952:	c1 c3 10             	rol    ebx,0x10
c0024955:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002495a:	89 e8                	mov    eax,ebp
c002495c:	86 fb                	xchg   bl,bh
c002495e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024962:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024966:	50                   	push   eax
c0024967:	50                   	push   eax
c0024968:	55                   	push   ebp
c0024969:	c1 e5 0b             	shl    ebp,0xb
c002496c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024970:	6a 00                	push   0x0
c0024972:	55                   	push   ebp
c0024973:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024977:	50                   	push   eax
c0024978:	56                   	push   esi
c0024979:	e8 12 fb ff ff       	call   c0024490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002497e:	83 c4 20             	add    esp,0x20
c0024981:	eb 1a                	jmp    c002499d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024983:	83 ec 0c             	sub    esp,0xc
c0024986:	56                   	push   esi
c0024987:	e8 56 fe ff ff       	call   c00247e2 <ATAPI::detectMedia()>
c002498c:	83 c4 10             	add    esp,0x10
c002498f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024996:	75 aa                	jne    c0024942 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024998:	b8 02 00 00 00       	mov    eax,0x2
c002499d:	83 c4 1c             	add    esp,0x1c
c00249a0:	5b                   	pop    ebx
c00249a1:	5e                   	pop    esi
c00249a2:	5f                   	pop    edi
c00249a3:	5d                   	pop    ebp
c00249a4:	c3                   	ret    
c00249a5:	90                   	nop

c00249a6 <SATA::close(int, int, void*)>:
c00249a6:	83 ec 0c             	sub    esp,0xc
c00249a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00249b3:	85 c0                	test   eax,eax
c00249b5:	74 0c                	je     c00249c3 <SATA::close(int, int, void*)+0x1d>
c00249b7:	83 ec 0c             	sub    esp,0xc
c00249ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00249bc:	50                   	push   eax
c00249bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00249c0:	83 c4 10             	add    esp,0x10
c00249c3:	31 c0                	xor    eax,eax
c00249c5:	83 c4 0c             	add    esp,0xc
c00249c8:	c3                   	ret    
c00249c9:	90                   	nop

c00249ca <SATA::powerSaving(PowerSavingLevel)>:
c00249ca:	c3                   	ret    
c00249cb:	90                   	nop

c00249cc <SATA::open(int, int, void*)>:
c00249cc:	56                   	push   esi
c00249cd:	53                   	push   ebx
c00249ce:	50                   	push   eax
c00249cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00249d7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00249e1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00249e7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00249f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00249f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00249ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024a05:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024a0c:	e8 84 af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a11:	89 c6                	mov    esi,eax
c0024a13:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a19:	81 c6 00 10 00 00    	add    esi,0x1000
c0024a1f:	e8 71 af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a24:	39 c6                	cmp    esi,eax
c0024a26:	74 10                	je     c0024a38 <SATA::open(int, int, void*)+0x6c>
c0024a28:	83 ec 0c             	sub    esp,0xc
c0024a2b:	68 64 c3 02 c0       	push   0xc002c364
c0024a30:	e8 96 54 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0024a35:	83 c4 10             	add    esp,0x10
c0024a38:	83 ec 0c             	sub    esp,0xc
c0024a3b:	6a 02                	push   0x2
c0024a3d:	e8 db c7 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c0024a42:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a48:	6a 03                	push   0x3
c0024a4a:	50                   	push   eax
c0024a4b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024a51:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c0024a57:	e8 c8 cf fe ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024a5c:	83 c4 14             	add    esp,0x14
c0024a5f:	53                   	push   ebx
c0024a60:	e8 d1 f5 fe ff       	call   c0014036 <PhysicalDisk::startCache()>
c0024a65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a68:	e8 4b 18 ff ff       	call   c00162b8 <createPartitionsForDisk(PhysicalDisk*)>
c0024a6d:	83 c4 14             	add    esp,0x14
c0024a70:	31 c0                	xor    eax,eax
c0024a72:	5b                   	pop    ebx
c0024a73:	5e                   	pop    esi
c0024a74:	c3                   	ret    
c0024a75:	90                   	nop

c0024a76 <SATA::SATA()>:
c0024a76:	83 ec 0c             	sub    esp,0xc
c0024a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a7d:	83 ec 04             	sub    esp,0x4
c0024a80:	68 00 02 00 00       	push   0x200
c0024a85:	68 78 c3 02 c0       	push   0xc002c378
c0024a8a:	50                   	push   eax
c0024a8b:	e8 3e f5 fe ff       	call   c0013fce <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a90:	83 c4 10             	add    esp,0x10
c0024a93:	ba e8 c3 02 c0       	mov    edx,0xc002c3e8
c0024a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a9c:	89 10                	mov    DWORD PTR [eax],edx
c0024a9e:	90                   	nop
c0024a9f:	83 c4 0c             	add    esp,0xc
c0024aa2:	c3                   	ret    
c0024aa3:	90                   	nop

c0024aa4 <SATA::access(unsigned long long, int, void*, bool)>:
c0024aa4:	55                   	push   ebp
c0024aa5:	57                   	push   edi
c0024aa6:	56                   	push   esi
c0024aa7:	53                   	push   ebx
c0024aa8:	83 ec 2c             	sub    esp,0x2c
c0024aab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024aaf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024ab7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024abb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024abf:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ac4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ac8:	7e 10                	jle    c0024ada <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024aca:	83 ec 0c             	sub    esp,0xc
c0024acd:	68 88 c3 02 c0       	push   0xc002c388
c0024ad2:	e8 f4 53 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0024ad7:	83 c4 10             	add    esp,0x10
c0024ada:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ae0:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024ae6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024aec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024af0:	89 d0                	mov    eax,edx
c0024af2:	c1 e0 07             	shl    eax,0x7
c0024af5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024af9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b03:	51                   	push   ecx
c0024b04:	8d 42 02             	lea    eax,[edx+0x2]
c0024b07:	51                   	push   ecx
c0024b08:	c1 e0 07             	shl    eax,0x7
c0024b0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024b0f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024b13:	50                   	push   eax
c0024b14:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024b1a:	e8 1b f0 ff ff       	call   c0023b3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024b1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024b23:	83 c4 10             	add    esp,0x10
c0024b26:	b8 01 00 00 00       	mov    eax,0x1
c0024b2b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024b30:	0f 84 cb 01 00 00    	je     c0024d01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b36:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b3e:	c1 e0 09             	shl    eax,0x9
c0024b41:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024b4a:	74 0e                	je     c0024b5a <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024b4c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024b52:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024b56:	89 c1                	mov    ecx,eax
c0024b58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024b5e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b64:	8d 42 02             	lea    eax,[edx+0x2]
c0024b67:	c1 e0 07             	shl    eax,0x7
c0024b6a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024b70:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024b76:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024b7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024b80:	c1 e1 05             	shl    ecx,0x5
c0024b83:	01 c8                	add    eax,ecx
c0024b85:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024b89:	83 e1 01             	and    ecx,0x1
c0024b8c:	89 ce                	mov    esi,ecx
c0024b8e:	8a 08                	mov    cl,BYTE PTR [eax]
c0024b90:	c1 e6 06             	shl    esi,0x6
c0024b93:	83 e1 bf             	and    ecx,0xffffffbf
c0024b96:	09 f1                	or     ecx,esi
c0024b98:	88 08                	mov    BYTE PTR [eax],cl
c0024b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024b9c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ba2:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024ba8:	89 08                	mov    DWORD PTR [eax],ecx
c0024baa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024bb0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024bb6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024bbc:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024bbf:	50                   	push   eax
c0024bc0:	68 90 00 00 00       	push   0x90
c0024bc5:	6a 00                	push   0x0
c0024bc7:	56                   	push   esi
c0024bc8:	e8 83 bb fd ff       	call   c0000750 <memset>
c0024bcd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024bd3:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024bd7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024bdd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024be1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024be5:	83 c4 10             	add    esp,0x10
c0024be8:	48                   	dec    eax
c0024be9:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024bee:	89 c1                	mov    ecx,eax
c0024bf0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024bf6:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024bfb:	09 c8                	or     eax,ecx
c0024bfd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024c03:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024c06:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024c0d:	66 25 00 7f          	and    ax,0x7f00
c0024c11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c15:	66 0d 27 80          	or     ax,0x8027
c0024c19:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024c1e:	66 89 06             	mov    WORD PTR [esi],ax
c0024c21:	19 c0                	sbb    eax,eax
c0024c23:	83 e0 f0             	and    eax,0xfffffff0
c0024c26:	83 c0 35             	add    eax,0x35
c0024c29:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024c2c:	89 e8                	mov    eax,ebp
c0024c2e:	c1 e8 10             	shr    eax,0x10
c0024c31:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024c34:	89 e8                	mov    eax,ebp
c0024c36:	c1 e8 18             	shr    eax,0x18
c0024c39:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024c3c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024c40:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c47:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024c4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c4e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024c52:	89 d6                	mov    esi,edx
c0024c54:	31 c0                	xor    eax,eax
c0024c56:	c1 e6 07             	shl    esi,0x7
c0024c59:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024c5d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024c63:	80 e1 88             	and    cl,0x88
c0024c66:	74 0a                	je     c0024c72 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024c68:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c6d:	74 0a                	je     c0024c79 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024c6f:	40                   	inc    eax
c0024c70:	eb eb                	jmp    c0024c5d <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024c72:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024c77:	75 0a                	jne    c0024c83 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024c79:	83 ec 0c             	sub    esp,0xc
c0024c7c:	68 c1 c3 02 c0       	push   0xc002c3c1
c0024c81:	eb 56                	jmp    c0024cd9 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024c83:	b8 01 00 00 00       	mov    eax,0x1
c0024c88:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c8c:	c1 e2 07             	shl    edx,0x7
c0024c8f:	d3 e0                	shl    eax,cl
c0024c91:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024c95:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024c9b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024ca1:	85 c8                	test   eax,ecx
c0024ca3:	74 20                	je     c0024cc5 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024ca5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024cab:	0f ba e1 1e          	bt     ecx,0x1e
c0024caf:	73 ea                	jae    c0024c9b <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024cb1:	83 ec 0c             	sub    esp,0xc
c0024cb4:	68 cf c3 02 c0       	push   0xc002c3cf
c0024cb9:	e8 0d 52 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0024cbe:	83 c4 10             	add    esp,0x10
c0024cc1:	31 c0                	xor    eax,eax
c0024cc3:	eb 3c                	jmp    c0024d01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cc5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024ccb:	0f ba e0 1e          	bt     eax,0x1e
c0024ccf:	73 17                	jae    c0024ce8 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024cd1:	83 ec 0c             	sub    esp,0xc
c0024cd4:	68 cf c3 02 c0       	push   0xc002c3cf
c0024cd9:	e8 ed 51 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0024cde:	83 c4 10             	add    esp,0x10
c0024ce1:	b8 01 00 00 00       	mov    eax,0x1
c0024ce6:	eb 19                	jmp    c0024d01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024ce8:	31 c0                	xor    eax,eax
c0024cea:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024cef:	75 10                	jne    c0024d01 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cf1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024cf7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024cfb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d01:	83 c4 2c             	add    esp,0x2c
c0024d04:	5b                   	pop    ebx
c0024d05:	5e                   	pop    esi
c0024d06:	5f                   	pop    edi
c0024d07:	5d                   	pop    ebp
c0024d08:	c3                   	ret    
c0024d09:	90                   	nop

c0024d0a <SATA::read(unsigned long long, int, void*)>:
c0024d0a:	57                   	push   edi
c0024d0b:	b8 04 00 00 00       	mov    eax,0x4
c0024d10:	56                   	push   esi
c0024d11:	53                   	push   ebx
c0024d12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d1a:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d25:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d2b:	77 25                	ja     c0024d52 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d2d:	b8 06 00 00 00       	mov    eax,0x6
c0024d32:	85 f6                	test   esi,esi
c0024d34:	74 1c                	je     c0024d52 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d36:	50                   	push   eax
c0024d37:	50                   	push   eax
c0024d38:	6a 00                	push   0x0
c0024d3a:	56                   	push   esi
c0024d3b:	52                   	push   edx
c0024d3c:	53                   	push   ebx
c0024d3d:	51                   	push   ecx
c0024d3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d42:	e8 5d fd ff ff       	call   c0024aa4 <SATA::access(unsigned long long, int, void*, bool)>
c0024d47:	83 c4 20             	add    esp,0x20
c0024d4a:	85 c0                	test   eax,eax
c0024d4c:	0f 95 c0             	setne  al
c0024d4f:	0f b6 c0             	movzx  eax,al
c0024d52:	5b                   	pop    ebx
c0024d53:	5e                   	pop    esi
c0024d54:	5f                   	pop    edi
c0024d55:	c3                   	ret    

c0024d56 <SATA::write(unsigned long long, int, void*)>:
c0024d56:	55                   	push   ebp
c0024d57:	b8 04 00 00 00       	mov    eax,0x4
c0024d5c:	57                   	push   edi
c0024d5d:	56                   	push   esi
c0024d5e:	53                   	push   ebx
c0024d5f:	83 ec 0c             	sub    esp,0xc
c0024d62:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024d6a:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024d6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024d71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d75:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024d7b:	77 3d                	ja     c0024dba <SATA::write(unsigned long long, int, void*)+0x64>
c0024d7d:	b8 06 00 00 00       	mov    eax,0x6
c0024d82:	85 ed                	test   ebp,ebp
c0024d84:	74 34                	je     c0024dba <SATA::write(unsigned long long, int, void*)+0x64>
c0024d86:	c1 e3 09             	shl    ebx,0x9
c0024d89:	01 eb                	add    ebx,ebp
c0024d8b:	89 d6                	mov    esi,edx
c0024d8d:	89 cf                	mov    edi,ecx
c0024d8f:	83 c6 01             	add    esi,0x1
c0024d92:	83 d7 00             	adc    edi,0x0
c0024d95:	50                   	push   eax
c0024d96:	50                   	push   eax
c0024d97:	6a 01                	push   0x1
c0024d99:	55                   	push   ebp
c0024d9a:	81 c5 00 02 00 00    	add    ebp,0x200
c0024da0:	6a 01                	push   0x1
c0024da2:	51                   	push   ecx
c0024da3:	52                   	push   edx
c0024da4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024da8:	e8 f7 fc ff ff       	call   c0024aa4 <SATA::access(unsigned long long, int, void*, bool)>
c0024dad:	83 c4 20             	add    esp,0x20
c0024db0:	89 f2                	mov    edx,esi
c0024db2:	89 f9                	mov    ecx,edi
c0024db4:	39 dd                	cmp    ebp,ebx
c0024db6:	75 d3                	jne    c0024d8b <SATA::write(unsigned long long, int, void*)+0x35>
c0024db8:	31 c0                	xor    eax,eax
c0024dba:	83 c4 0c             	add    esp,0xc
c0024dbd:	5b                   	pop    ebx
c0024dbe:	5e                   	pop    esi
c0024dbf:	5f                   	pop    edi
c0024dc0:	5d                   	pop    ebp
c0024dc1:	c3                   	ret    

c0024dc2 <SATAPI::write(unsigned long long, int, void*)>:
c0024dc2:	b8 03 00 00 00       	mov    eax,0x3
c0024dc7:	c3                   	ret    

c0024dc8 <SATAPI::close(int, int, void*)>:
c0024dc8:	83 ec 0c             	sub    esp,0xc
c0024dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dcf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024dd5:	85 c0                	test   eax,eax
c0024dd7:	74 0c                	je     c0024de5 <SATAPI::close(int, int, void*)+0x1d>
c0024dd9:	83 ec 0c             	sub    esp,0xc
c0024ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024dde:	50                   	push   eax
c0024ddf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024de2:	83 c4 10             	add    esp,0x10
c0024de5:	31 c0                	xor    eax,eax
c0024de7:	83 c4 0c             	add    esp,0xc
c0024dea:	c3                   	ret    
c0024deb:	90                   	nop

c0024dec <SATAPI::SATAPI()>:
c0024dec:	83 ec 0c             	sub    esp,0xc
c0024def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df3:	83 ec 04             	sub    esp,0x4
c0024df6:	68 00 08 00 00       	push   0x800
c0024dfb:	68 18 c4 02 c0       	push   0xc002c418
c0024e00:	50                   	push   eax
c0024e01:	e8 c8 f1 fe ff       	call   c0013fce <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e06:	83 c4 10             	add    esp,0x10
c0024e09:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0024e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e12:	89 10                	mov    DWORD PTR [eax],edx
c0024e14:	90                   	nop
c0024e15:	83 c4 0c             	add    esp,0xc
c0024e18:	c3                   	ret    
c0024e19:	90                   	nop

c0024e1a <SATAPI::diskRemoved()>:
c0024e1a:	83 ec 18             	sub    esp,0x18
c0024e1d:	68 24 c4 02 c0       	push   0xc002c424
c0024e22:	e8 38 d9 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0024e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e2b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024e32:	83 c4 1c             	add    esp,0x1c
c0024e35:	c3                   	ret    

c0024e36 <SATAPI::diskInserted()>:
c0024e36:	53                   	push   ebx
c0024e37:	83 ec 14             	sub    esp,0x14
c0024e3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024e3e:	68 3b c4 02 c0       	push   0xc002c43b
c0024e43:	e8 17 d9 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0024e48:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e52:	e8 df f1 fe ff       	call   c0014036 <PhysicalDisk::startCache()>
c0024e57:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e5b:	83 c4 18             	add    esp,0x18
c0024e5e:	5b                   	pop    ebx
c0024e5f:	e9 54 14 ff ff       	jmp    c00162b8 <createPartitionsForDisk(PhysicalDisk*)>

c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024e64:	55                   	push   ebp
c0024e65:	57                   	push   edi
c0024e66:	56                   	push   esi
c0024e67:	53                   	push   ebx
c0024e68:	83 ec 34             	sub    esp,0x34
c0024e6b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024e6f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024e73:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024e77:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e7b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024e7f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024e85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024e8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024e8f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024e95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024e99:	c1 e0 07             	shl    eax,0x7
c0024e9c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ea0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024ea4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024eae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024eb2:	8d 58 02             	lea    ebx,[eax+0x2]
c0024eb5:	c1 e3 07             	shl    ebx,0x7
c0024eb8:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024ebc:	53                   	push   ebx
c0024ebd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ec3:	e8 72 ec ff ff       	call   c0023b3a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ec8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ecc:	83 c4 10             	add    esp,0x10
c0024ecf:	b8 01 00 00 00       	mov    eax,0x1
c0024ed4:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024ed9:	0f 84 85 01 00 00    	je     c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024edf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024ee7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024eed:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ef3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ef7:	c1 e1 05             	shl    ecx,0x5
c0024efa:	01 c8                	add    eax,ecx
c0024efc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024efe:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024f04:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024f0a:	89 08                	mov    DWORD PTR [eax],ecx
c0024f0c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f12:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024f18:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024f1e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024f21:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024f24:	50                   	push   eax
c0024f25:	68 90 00 00 00       	push   0x90
c0024f2a:	6a 00                	push   0x0
c0024f2c:	53                   	push   ebx
c0024f2d:	e8 1e b8 fd ff       	call   c0000750 <memset>
c0024f32:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024f36:	b9 0c 00 00 00       	mov    ecx,0xc
c0024f3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f3d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024f43:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024f47:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f4d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f51:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024f55:	48                   	dec    eax
c0024f56:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024f5b:	89 c1                	mov    ecx,eax
c0024f5d:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f63:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f68:	09 c8                	or     eax,ecx
c0024f6a:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024f70:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024f73:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024f7a:	66 25 00 7f          	and    ax,0x7f00
c0024f7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024f82:	66 0d 27 80          	or     ax,0x8027
c0024f86:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024f8a:	66 89 03             	mov    WORD PTR [ebx],ax
c0024f8d:	89 d0                	mov    eax,edx
c0024f8f:	c1 ea 18             	shr    edx,0x18
c0024f92:	c1 e8 10             	shr    eax,0x10
c0024f95:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024f98:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f9b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024f9f:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024fa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024fa6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024fa9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024fad:	83 c4 10             	add    esp,0x10
c0024fb0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024fb4:	31 c0                	xor    eax,eax
c0024fb6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024fba:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024fc0:	80 e2 88             	and    dl,0x88
c0024fc3:	74 0a                	je     c0024fcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024fc5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024fca:	74 0a                	je     c0024fd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024fcc:	40                   	inc    eax
c0024fcd:	eb eb                	jmp    c0024fba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024fcf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024fd4:	75 0f                	jne    c0024fe5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024fd6:	83 ec 0c             	sub    esp,0xc
c0024fd9:	68 c1 c3 02 c0       	push   0xc002c3c1
c0024fde:	e8 e8 4e ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0024fe3:	eb 3f                	jmp    c0025024 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024fe5:	ba 01 00 00 00       	mov    edx,0x1
c0024fea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024fee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ff2:	d3 e2                	shl    edx,cl
c0024ff4:	c1 e0 07             	shl    eax,0x7
c0024ff7:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024ffd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025001:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025007:	85 ca                	test   edx,ecx
c0025009:	74 23                	je     c002502e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002500b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025011:	0f ba e1 1e          	bt     ecx,0x1e
c0025015:	73 ea                	jae    c0025001 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025017:	83 ec 0c             	sub    esp,0xc
c002501a:	68 53 c4 02 c0       	push   0xc002c453
c002501f:	e8 3b d7 fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0025024:	83 c4 10             	add    esp,0x10
c0025027:	b8 01 00 00 00       	mov    eax,0x1
c002502c:	eb 36                	jmp    c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002502e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025034:	0f ba e0 1e          	bt     eax,0x1e
c0025038:	73 0a                	jae    c0025044 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002503a:	83 ec 0c             	sub    esp,0xc
c002503d:	68 66 c4 02 c0       	push   0xc002c466
c0025042:	eb db                	jmp    c002501f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025044:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025049:	74 17                	je     c0025062 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002504b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025050:	74 10                	je     c0025062 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025052:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025058:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002505c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025060:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025062:	31 c0                	xor    eax,eax
c0025064:	83 c4 2c             	add    esp,0x2c
c0025067:	5b                   	pop    ebx
c0025068:	5e                   	pop    esi
c0025069:	5f                   	pop    edi
c002506a:	5d                   	pop    ebp
c002506b:	c3                   	ret    

c002506c <SATAPI::eject()>:
c002506c:	57                   	push   edi
c002506d:	b9 03 00 00 00       	mov    ecx,0x3
c0025072:	53                   	push   ebx
c0025073:	83 ec 14             	sub    esp,0x14
c0025076:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002507a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002507e:	fc                   	cld    
c002507f:	31 c0                	xor    eax,eax
c0025081:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025083:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025088:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002508d:	50                   	push   eax
c002508e:	6a 00                	push   0x0
c0025090:	6a 00                	push   0x0
c0025092:	6a 00                	push   0x0
c0025094:	6a 00                	push   0x0
c0025096:	6a 02                	push   0x2
c0025098:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002509c:	50                   	push   eax
c002509d:	53                   	push   ebx
c002509e:	e8 c1 fd ff ff       	call   c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250a3:	83 c4 14             	add    esp,0x14
c00250a6:	53                   	push   ebx
c00250a7:	e8 6e fd ff ff       	call   c0024e1a <SATAPI::diskRemoved()>
c00250ac:	83 c4 24             	add    esp,0x24
c00250af:	31 c0                	xor    eax,eax
c00250b1:	5b                   	pop    ebx
c00250b2:	5f                   	pop    edi
c00250b3:	c3                   	ret    

c00250b4 <SATAPI::detectMedia()>:
c00250b4:	56                   	push   esi
c00250b5:	53                   	push   ebx
c00250b6:	83 ec 28             	sub    esp,0x28
c00250b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250bd:	6a 0c                	push   0xc
c00250bf:	6a 00                	push   0x0
c00250c1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00250c5:	56                   	push   esi
c00250c6:	e8 85 b6 fd ff       	call   c0000750 <memset>
c00250cb:	83 c4 0c             	add    esp,0xc
c00250ce:	6a 00                	push   0x0
c00250d0:	6a 00                	push   0x0
c00250d2:	6a 00                	push   0x0
c00250d4:	6a 00                	push   0x0
c00250d6:	6a 00                	push   0x0
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	e8 85 fd ff ff       	call   c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250df:	83 c4 1c             	add    esp,0x1c
c00250e2:	6a 0c                	push   0xc
c00250e4:	6a 00                	push   0x0
c00250e6:	56                   	push   esi
c00250e7:	e8 64 b6 fd ff       	call   c0000750 <memset>
c00250ec:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00250f1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00250f6:	83 c4 0c             	add    esp,0xc
c00250f9:	6a 01                	push   0x1
c00250fb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00250ff:	50                   	push   eax
c0025100:	6a 00                	push   0x0
c0025102:	6a 00                	push   0x0
c0025104:	6a 12                	push   0x12
c0025106:	56                   	push   esi
c0025107:	53                   	push   ebx
c0025108:	e8 57 fd ff ff       	call   c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002510d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025111:	83 c4 20             	add    esp,0x20
c0025114:	83 e0 7f             	and    eax,0x7f
c0025117:	3c 70                	cmp    al,0x70
c0025119:	74 15                	je     c0025130 <SATAPI::detectMedia()+0x7c>
c002511b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025122:	75 0c                	jne    c0025130 <SATAPI::detectMedia()+0x7c>
c0025124:	83 ec 0c             	sub    esp,0xc
c0025127:	53                   	push   ebx
c0025128:	e8 09 fd ff ff       	call   c0024e36 <SATAPI::diskInserted()>
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025134:	83 e0 0f             	and    eax,0xf
c0025137:	3c 02                	cmp    al,0x2
c0025139:	75 1b                	jne    c0025156 <SATAPI::detectMedia()+0xa2>
c002513b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025140:	75 2d                	jne    c002516f <SATAPI::detectMedia()+0xbb>
c0025142:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025149:	74 24                	je     c002516f <SATAPI::detectMedia()+0xbb>
c002514b:	83 ec 0c             	sub    esp,0xc
c002514e:	53                   	push   ebx
c002514f:	e8 c6 fc ff ff       	call   c0024e1a <SATAPI::diskRemoved()>
c0025154:	eb 16                	jmp    c002516c <SATAPI::detectMedia()+0xb8>
c0025156:	84 c0                	test   al,al
c0025158:	75 15                	jne    c002516f <SATAPI::detectMedia()+0xbb>
c002515a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025161:	75 0c                	jne    c002516f <SATAPI::detectMedia()+0xbb>
c0025163:	83 ec 0c             	sub    esp,0xc
c0025166:	53                   	push   ebx
c0025167:	e8 ca fc ff ff       	call   c0024e36 <SATAPI::diskInserted()>
c002516c:	83 c4 10             	add    esp,0x10
c002516f:	83 c4 24             	add    esp,0x24
c0025172:	5b                   	pop    ebx
c0025173:	5e                   	pop    esi
c0025174:	c3                   	ret    
c0025175:	90                   	nop

c0025176 <SATAPI::open(int, int, void*)>:
c0025176:	56                   	push   esi
c0025177:	53                   	push   ebx
c0025178:	50                   	push   eax
c0025179:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002517d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025181:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002518b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025191:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002519b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002519f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00251a9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00251af:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00251b6:	e8 da a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c00251bb:	89 c6                	mov    esi,eax
c00251bd:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00251c3:	81 c6 00 10 00 00    	add    esi,0x1000
c00251c9:	e8 c7 a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c00251ce:	39 c6                	cmp    esi,eax
c00251d0:	74 10                	je     c00251e2 <SATAPI::open(int, int, void*)+0x6c>
c00251d2:	83 ec 0c             	sub    esp,0xc
c00251d5:	68 7b c4 02 c0       	push   0xc002c47b
c00251da:	e8 ec 4c ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00251df:	83 c4 10             	add    esp,0x10
c00251e2:	83 ec 0c             	sub    esp,0xc
c00251e5:	6a 02                	push   0x2
c00251e7:	e8 31 c0 fe ff       	call   c001121d <Virt::allocateKernelVirtualPages(int)>
c00251ec:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00251f2:	6a 03                	push   0x3
c00251f4:	50                   	push   eax
c00251f5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00251fb:	ff 35 d0 db 02 c0    	push   DWORD PTR ds:0xc002dbd0
c0025201:	e8 1e c8 fe ff       	call   c0011a24 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025206:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002520d:	83 c4 14             	add    esp,0x14
c0025210:	53                   	push   ebx
c0025211:	e8 9e fe ff ff       	call   c00250b4 <SATAPI::detectMedia()>
c0025216:	83 c4 14             	add    esp,0x14
c0025219:	31 c0                	xor    eax,eax
c002521b:	5b                   	pop    ebx
c002521c:	5e                   	pop    esi
c002521d:	c3                   	ret    

c002521e <SATAPI::read(unsigned long long, int, void*)>:
c002521e:	55                   	push   ebp
c002521f:	57                   	push   edi
c0025220:	56                   	push   esi
c0025221:	53                   	push   ebx
c0025222:	83 ec 1c             	sub    esp,0x1c
c0025225:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025229:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002522d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025231:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025238:	74 19                	je     c0025253 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002523a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002523f:	7e 2e                	jle    c002526f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	68 91 c4 02 c0       	push   0xc002c491
c0025249:	e8 7d 4c ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002524e:	83 c4 10             	add    esp,0x10
c0025251:	eb 1c                	jmp    c002526f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025253:	83 ec 0c             	sub    esp,0xc
c0025256:	55                   	push   ebp
c0025257:	e8 58 fe ff ff       	call   c00250b4 <SATAPI::detectMedia()>
c002525c:	83 c4 10             	add    esp,0x10
c002525f:	b8 02 00 00 00       	mov    eax,0x2
c0025264:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002526b:	75 cd                	jne    c002523a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002526d:	eb 49                	jmp    c00252b8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002526f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025273:	b9 03 00 00 00       	mov    ecx,0x3
c0025278:	fc                   	cld    
c0025279:	31 c0                	xor    eax,eax
c002527b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002527d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025282:	89 d8                	mov    eax,ebx
c0025284:	86 e0                	xchg   al,ah
c0025286:	c1 c0 10             	rol    eax,0x10
c0025289:	86 e0                	xchg   al,ah
c002528b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002528f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025293:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025297:	50                   	push   eax
c0025298:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002529c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00252a0:	56                   	push   esi
c00252a1:	53                   	push   ebx
c00252a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00252a6:	c1 e0 0b             	shl    eax,0xb
c00252a9:	50                   	push   eax
c00252aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252ae:	50                   	push   eax
c00252af:	55                   	push   ebp
c00252b0:	e8 af fb ff ff       	call   c0024e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252b5:	83 c4 20             	add    esp,0x20
c00252b8:	83 c4 1c             	add    esp,0x1c
c00252bb:	5b                   	pop    ebx
c00252bc:	5e                   	pop    esi
c00252bd:	5f                   	pop    edi
c00252be:	5d                   	pop    ebp
c00252bf:	c3                   	ret    

c00252c0 <AVX::open(int, int, void*)>:
c00252c0:	83 ec 0c             	sub    esp,0xc
c00252c3:	e8 40 11 00 00       	call   c0026408 <avxInit>
c00252c8:	b8 00 00 00 00       	mov    eax,0x0
c00252cd:	83 c4 0c             	add    esp,0xc
c00252d0:	c3                   	ret    
c00252d1:	90                   	nop

c00252d2 <AVX::close(int, int, void*)>:
c00252d2:	83 ec 0c             	sub    esp,0xc
c00252d5:	e8 2f 11 00 00       	call   c0026409 <avxClose>
c00252da:	b8 00 00 00 00       	mov    eax,0x0
c00252df:	83 c4 0c             	add    esp,0xc
c00252e2:	c3                   	ret    
c00252e3:	90                   	nop

c00252e4 <AVX::available()>:
c00252e4:	83 ec 0c             	sub    esp,0xc
c00252e7:	e8 14 11 00 00       	call   c0026400 <avxDetect>
c00252ec:	85 c0                	test   eax,eax
c00252ee:	0f 95 c0             	setne  al
c00252f1:	83 c4 0c             	add    esp,0xc
c00252f4:	c3                   	ret    
c00252f5:	90                   	nop

c00252f6 <AVX::save(void*)>:
c00252f6:	83 ec 0c             	sub    esp,0xc
c00252f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252fd:	83 ec 0c             	sub    esp,0xc
c0025300:	50                   	push   eax
c0025301:	e8 00 11 00 00       	call   c0026406 <avxSave>
c0025306:	83 c4 10             	add    esp,0x10
c0025309:	90                   	nop
c002530a:	83 c4 0c             	add    esp,0xc
c002530d:	c3                   	ret    

c002530e <AVX::load(void*)>:
c002530e:	83 ec 0c             	sub    esp,0xc
c0025311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025315:	83 ec 0c             	sub    esp,0xc
c0025318:	50                   	push   eax
c0025319:	e8 e9 10 00 00       	call   c0026407 <avxLoad>
c002531e:	83 c4 10             	add    esp,0x10
c0025321:	90                   	nop
c0025322:	83 c4 0c             	add    esp,0xc
c0025325:	c3                   	ret    

c0025326 <AVX::AVX()>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532d:	83 ec 08             	sub    esp,0x8
c0025330:	68 f4 c4 02 c0       	push   0xc002c4f4
c0025335:	50                   	push   eax
c0025336:	e8 71 ed fe ff       	call   c00140ac <FPU::FPU(char const*)>
c002533b:	83 c4 10             	add    esp,0x10
c002533e:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	89 10                	mov    DWORD PTR [eax],edx
c0025349:	90                   	nop
c002534a:	83 c4 0c             	add    esp,0xc
c002534d:	c3                   	ret    

c002534e <MMX::available()>:
c002534e:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0025353:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025359:	83 e0 20             	and    eax,0x20
c002535c:	84 c0                	test   al,al
c002535e:	0f 95 c0             	setne  al
c0025361:	c3                   	ret    

c0025362 <MMX::open(int, int, void*)>:
c0025362:	83 ec 0c             	sub    esp,0xc
c0025365:	e8 28 11 00 00       	call   c0026492 <x87Init>
c002536a:	b8 00 00 00 00       	mov    eax,0x0
c002536f:	83 c4 0c             	add    esp,0xc
c0025372:	c3                   	ret    
c0025373:	90                   	nop

c0025374 <MMX::close(int, int, void*)>:
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	e8 30 11 00 00       	call   c00264ac <x87Close>
c002537c:	b8 00 00 00 00       	mov    eax,0x0
c0025381:	83 c4 0c             	add    esp,0xc
c0025384:	c3                   	ret    
c0025385:	90                   	nop

c0025386 <MMX::save(void*)>:
c0025386:	83 ec 0c             	sub    esp,0xc
c0025389:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002538d:	83 ec 0c             	sub    esp,0xc
c0025390:	50                   	push   eax
c0025391:	e8 eb 10 00 00       	call   c0026481 <x87Save>
c0025396:	83 c4 10             	add    esp,0x10
c0025399:	90                   	nop
c002539a:	83 c4 0c             	add    esp,0xc
c002539d:	c3                   	ret    

c002539e <MMX::load(void*)>:
c002539e:	83 ec 0c             	sub    esp,0xc
c00253a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253a5:	83 ec 0c             	sub    esp,0xc
c00253a8:	50                   	push   eax
c00253a9:	e8 dc 10 00 00       	call   c002648a <x87Load>
c00253ae:	83 c4 10             	add    esp,0x10
c00253b1:	90                   	nop
c00253b2:	83 c4 0c             	add    esp,0xc
c00253b5:	c3                   	ret    

c00253b6 <MMX::MMX()>:
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253bd:	83 ec 08             	sub    esp,0x8
c00253c0:	68 34 c5 02 c0       	push   0xc002c534
c00253c5:	50                   	push   eax
c00253c6:	e8 e1 ec fe ff       	call   c00140ac <FPU::FPU(char const*)>
c00253cb:	83 c4 10             	add    esp,0x10
c00253ce:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c00253d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d7:	89 10                	mov    DWORD PTR [eax],edx
c00253d9:	90                   	nop
c00253da:	83 c4 0c             	add    esp,0xc
c00253dd:	c3                   	ret    

c00253de <SSE::open(int, int, void*)>:
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	e8 5e 10 00 00       	call   c0026444 <sseInit>
c00253e6:	b8 00 00 00 00       	mov    eax,0x0
c00253eb:	83 c4 0c             	add    esp,0xc
c00253ee:	c3                   	ret    
c00253ef:	90                   	nop

c00253f0 <SSE::close(int, int, void*)>:
c00253f0:	83 ec 0c             	sub    esp,0xc
c00253f3:	e8 5c 10 00 00       	call   c0026454 <sseClose>
c00253f8:	b8 00 00 00 00       	mov    eax,0x0
c00253fd:	83 c4 0c             	add    esp,0xc
c0025400:	c3                   	ret    
c0025401:	90                   	nop

c0025402 <SSE::available()>:
c0025402:	83 ec 1c             	sub    esp,0x1c
c0025405:	e8 16 10 00 00       	call   c0026420 <absolutelyNoChanceInHell>
c002540a:	85 c0                	test   eax,eax
c002540c:	0f 95 c0             	setne  al
c002540f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025413:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025417:	83 c4 1c             	add    esp,0x1c
c002541a:	c3                   	ret    
c002541b:	90                   	nop

c002541c <SSE::save(void*)>:
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025423:	83 ec 0c             	sub    esp,0xc
c0025426:	50                   	push   eax
c0025427:	e8 0c 10 00 00       	call   c0026438 <sseSave>
c002542c:	83 c4 10             	add    esp,0x10
c002542f:	90                   	nop
c0025430:	83 c4 0c             	add    esp,0xc
c0025433:	c3                   	ret    

c0025434 <SSE::load(void*)>:
c0025434:	83 ec 0c             	sub    esp,0xc
c0025437:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002543b:	83 ec 0c             	sub    esp,0xc
c002543e:	50                   	push   eax
c002543f:	e8 fa 0f 00 00       	call   c002643e <sseLoad>
c0025444:	83 c4 10             	add    esp,0x10
c0025447:	90                   	nop
c0025448:	83 c4 0c             	add    esp,0xc
c002544b:	c3                   	ret    

c002544c <SSE::SSE()>:
c002544c:	83 ec 0c             	sub    esp,0xc
c002544f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025453:	83 ec 08             	sub    esp,0x8
c0025456:	68 74 c5 02 c0       	push   0xc002c574
c002545b:	50                   	push   eax
c002545c:	e8 4b ec fe ff       	call   c00140ac <FPU::FPU(char const*)>
c0025461:	83 c4 10             	add    esp,0x10
c0025464:	ba 84 c5 02 c0       	mov    edx,0xc002c584
c0025469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002546d:	89 10                	mov    DWORD PTR [eax],edx
c002546f:	90                   	nop
c0025470:	83 c4 0c             	add    esp,0xc
c0025473:	c3                   	ret    

c0025474 <x87::open(int, int, void*)>:
c0025474:	83 ec 0c             	sub    esp,0xc
c0025477:	e8 16 10 00 00       	call   c0026492 <x87Init>
c002547c:	b8 00 00 00 00       	mov    eax,0x0
c0025481:	83 c4 0c             	add    esp,0xc
c0025484:	c3                   	ret    
c0025485:	90                   	nop

c0025486 <x87::close(int, int, void*)>:
c0025486:	83 ec 0c             	sub    esp,0xc
c0025489:	e8 1e 10 00 00       	call   c00264ac <x87Close>
c002548e:	b8 00 00 00 00       	mov    eax,0x0
c0025493:	83 c4 0c             	add    esp,0xc
c0025496:	c3                   	ret    
c0025497:	90                   	nop

c0025498 <x87::available()>:
c0025498:	83 ec 0c             	sub    esp,0xc
c002549b:	e8 c6 0f 00 00       	call   c0026466 <x87Detect>
c00254a0:	85 c0                	test   eax,eax
c00254a2:	0f 95 c0             	setne  al
c00254a5:	83 c4 0c             	add    esp,0xc
c00254a8:	c3                   	ret    
c00254a9:	90                   	nop

c00254aa <x87::save(void*)>:
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254b1:	83 ec 0c             	sub    esp,0xc
c00254b4:	50                   	push   eax
c00254b5:	e8 c7 0f 00 00       	call   c0026481 <x87Save>
c00254ba:	83 c4 10             	add    esp,0x10
c00254bd:	90                   	nop
c00254be:	83 c4 0c             	add    esp,0xc
c00254c1:	c3                   	ret    

c00254c2 <x87::load(void*)>:
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	50                   	push   eax
c00254cd:	e8 b8 0f 00 00       	call   c002648a <x87Load>
c00254d2:	83 c4 10             	add    esp,0x10
c00254d5:	90                   	nop
c00254d6:	83 c4 0c             	add    esp,0xc
c00254d9:	c3                   	ret    

c00254da <x87::x87()>:
c00254da:	83 ec 0c             	sub    esp,0xc
c00254dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254e1:	83 ec 08             	sub    esp,0x8
c00254e4:	68 b4 c5 02 c0       	push   0xc002c5b4
c00254e9:	50                   	push   eax
c00254ea:	e8 bd eb fe ff       	call   c00140ac <FPU::FPU(char const*)>
c00254ef:	83 c4 10             	add    esp,0x10
c00254f2:	ba c4 c5 02 c0       	mov    edx,0xc002c5c4
c00254f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254fb:	89 10                	mov    DWORD PTR [eax],edx
c00254fd:	90                   	nop
c00254fe:	83 c4 0c             	add    esp,0xc
c0025501:	c3                   	ret    

c0025502 <APIC::disable()>:
c0025502:	90                   	nop
c0025503:	c3                   	ret    

c0025504 <APIC::close(int, int, void*)>:
c0025504:	55                   	push   ebp
c0025505:	89 e5                	mov    ebp,esp
c0025507:	83 ec 08             	sub    esp,0x8
c002550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002550d:	8b 00                	mov    eax,DWORD PTR [eax]
c002550f:	83 c0 3c             	add    eax,0x3c
c0025512:	8b 00                	mov    eax,DWORD PTR [eax]
c0025514:	83 ec 0c             	sub    esp,0xc
c0025517:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002551a:	ff d0                	call   eax
c002551c:	83 c4 10             	add    esp,0x10
c002551f:	b8 00 00 00 00       	mov    eax,0x0
c0025524:	c9                   	leave  
c0025525:	c3                   	ret    

c0025526 <IOAPIC::close(int, int, void*)>:
c0025526:	b8 00 00 00 00       	mov    eax,0x0
c002552b:	c3                   	ret    

c002552c <APIC::io_wait()>:
c002552c:	eb 00                	jmp    c002552e <APIC::io_wait()+0x2>
c002552e:	eb 00                	jmp    c0025530 <APIC::io_wait()+0x4>
c0025530:	90                   	nop
c0025531:	c3                   	ret    

c0025532 <APIC::getBase()>:
c0025532:	55                   	push   ebp
c0025533:	89 e5                	mov    ebp,esp
c0025535:	83 ec 18             	sub    esp,0x18
c0025538:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c002553d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025543:	83 e0 08             	and    eax,0x8
c0025546:	84 c0                	test   al,al
c0025548:	75 07                	jne    c0025551 <APIC::getBase()+0x1f>
c002554a:	b8 00 00 00 00       	mov    eax,0x0
c002554f:	eb 21                	jmp    c0025572 <APIC::getBase()+0x40>
c0025551:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0025556:	83 ec 08             	sub    esp,0x8
c0025559:	6a 1b                	push   0x1b
c002555b:	50                   	push   eax
c002555c:	e8 df 95 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025561:	83 c4 10             	add    esp,0x10
c0025564:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025567:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002556a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002556d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025572:	c9                   	leave  
c0025573:	c3                   	ret    

c0025574 <APIC::eoi(unsigned char)>:
c0025574:	55                   	push   ebp
c0025575:	89 e5                	mov    ebp,esp
c0025577:	83 ec 28             	sub    esp,0x28
c002557a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002557d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025580:	83 ec 0c             	sub    esp,0xc
c0025583:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025586:	e8 a7 ff ff ff       	call   c0025532 <APIC::getBase()>
c002558b:	83 c4 10             	add    esp,0x10
c002558e:	05 b0 00 00 00       	add    eax,0xb0
c0025593:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025599:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002559f:	90                   	nop
c00255a0:	c9                   	leave  
c00255a1:	c3                   	ret    

c00255a2 <APIC::open(int, int, void*)>:
c00255a2:	55                   	push   ebp
c00255a3:	89 e5                	mov    ebp,esp
c00255a5:	57                   	push   edi
c00255a6:	56                   	push   esi
c00255a7:	53                   	push   ebx
c00255a8:	83 ec 2c             	sub    esp,0x2c
c00255ab:	83 ec 0c             	sub    esp,0xc
c00255ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255b1:	e8 7c ff ff ff       	call   c0025532 <APIC::getBase()>
c00255b6:	83 c4 10             	add    esp,0x10
c00255b9:	89 c2                	mov    edx,eax
c00255bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255be:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00255c4:	0f b6 f8             	movzx  edi,al
c00255c7:	89 d0                	mov    eax,edx
c00255c9:	ba 00 00 00 00       	mov    edx,0x0
c00255ce:	89 c1                	mov    ecx,eax
c00255d0:	80 e5 ff             	and    ch,0xff
c00255d3:	89 cb                	mov    ebx,ecx
c00255d5:	0f b6 f2             	movzx  esi,dl
c00255d8:	89 d8                	mov    eax,ebx
c00255da:	89 f2                	mov    edx,esi
c00255dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00255df:	8d 5f 08             	lea    ebx,[edi+0x8]
c00255e2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00255e6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00255ea:	83 e0 00             	and    eax,0x0
c00255ed:	09 d0                	or     eax,edx
c00255ef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00255f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00255fc:	8d 50 01             	lea    edx,[eax+0x1]
c00255ff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025602:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025608:	0f b6 d0             	movzx  edx,al
c002560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002560e:	83 c2 08             	add    edx,0x8
c0025611:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025615:	0f b6 c9             	movzx  ecx,cl
c0025618:	81 c9 00 00 01 00    	or     ecx,0x10000
c002561e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025622:	83 ec 0c             	sub    esp,0xc
c0025625:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025628:	e8 05 ff ff ff       	call   c0025532 <APIC::getBase()>
c002562d:	83 c4 10             	add    esp,0x10
c0025630:	05 f0 00 00 00       	add    eax,0xf0
c0025635:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025638:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002563b:	8b 00                	mov    eax,DWORD PTR [eax]
c002563d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025640:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025647:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002564e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025651:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025654:	89 10                	mov    DWORD PTR [eax],edx
c0025656:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002565d:	a1 30 03 03 c0       	mov    eax,ds:0xc0030330
c0025662:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025665:	7d 7c                	jge    c00256e3 <APIC::open(int, int, void*)+0x141>
c0025667:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002566a:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0025671:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025674:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025677:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c002567e:	c1 e8 08             	shr    eax,0x8
c0025681:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025685:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025688:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c002568f:	c1 e8 18             	shr    eax,0x18
c0025692:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025695:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025699:	75 40                	jne    c00256db <APIC::open(int, int, void*)+0x139>
c002569b:	83 ec 0c             	sub    esp,0xc
c002569e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256a1:	e8 8c fe ff ff       	call   c0025532 <APIC::getBase()>
c00256a6:	83 c4 10             	add    esp,0x10
c00256a9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00256ad:	75 07                	jne    c00256b6 <APIC::open(int, int, void*)+0x114>
c00256af:	ba 60 03 00 00       	mov    edx,0x360
c00256b4:	eb 05                	jmp    c00256bb <APIC::open(int, int, void*)+0x119>
c00256b6:	ba 50 03 00 00       	mov    edx,0x350
c00256bb:	01 d0                	add    eax,edx
c00256bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00256c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00256c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00256c5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00256c8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00256cf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00256d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00256d6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00256d9:	89 10                	mov    DWORD PTR [eax],edx
c00256db:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00256de:	e9 7a ff ff ff       	jmp    c002565d <APIC::open(int, int, void*)+0xbb>
c00256e3:	b8 00 00 00 00       	mov    eax,0x0
c00256e8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00256eb:	5b                   	pop    ebx
c00256ec:	5e                   	pop    esi
c00256ed:	5f                   	pop    edi
c00256ee:	5d                   	pop    ebp
c00256ef:	c3                   	ret    

c00256f0 <IOAPIC::IOAPIC()>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f7:	83 ec 08             	sub    esp,0x8
c00256fa:	68 f4 c5 02 c0       	push   0xc002c5f4
c00256ff:	50                   	push   eax
c0025700:	e8 97 e6 fe ff       	call   c0013d9c <Device::Device(char const*)>
c0025705:	83 c4 10             	add    esp,0x10
c0025708:	ba 1c c7 02 c0       	mov    edx,0xc002c71c
c002570d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025711:	89 10                	mov    DWORD PTR [eax],edx
c0025713:	90                   	nop
c0025714:	83 c4 0c             	add    esp,0xc
c0025717:	c3                   	ret    

c0025718 <APIC::APIC()>:
c0025718:	53                   	push   ebx
c0025719:	83 ec 18             	sub    esp,0x18
c002571c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025720:	83 ec 08             	sub    esp,0x8
c0025723:	68 fc c5 02 c0       	push   0xc002c5fc
c0025728:	50                   	push   eax
c0025729:	e8 d8 ed fe ff       	call   c0014506 <InterruptController::InterruptController(char const*)>
c002572e:	83 c4 10             	add    esp,0x10
c0025731:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c0025736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002573a:	89 10                	mov    DWORD PTR [eax],edx
c002573c:	a0 00 1e 03 c0       	mov    al,ds:0xc0031e00
c0025741:	83 f0 01             	xor    eax,0x1
c0025744:	84 c0                	test   al,al
c0025746:	0f 84 a1 00 00 00    	je     c00257ed <APIC::APIC()+0xd5>
c002574c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025751:	a0 e0 03 03 c0       	mov    al,ds:0xc00303e0
c0025756:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002575a:	0f 83 86 00 00 00    	jae    c00257e6 <APIC::APIC()+0xce>
c0025760:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025768:	83 ec 0c             	sub    esp,0xc
c002576b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002576f:	e8 25 9e fe ff       	call   c000f599 <malloc>
c0025774:	83 c4 10             	add    esp,0x10
c0025777:	89 c3                	mov    ebx,eax
c0025779:	83 ec 0c             	sub    esp,0xc
c002577c:	53                   	push   ebx
c002577d:	e8 6e ff ff ff       	call   c00256f0 <IOAPIC::IOAPIC()>
c0025782:	83 c4 10             	add    esp,0x10
c0025785:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025789:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002578e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025792:	89 14 85 e0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce220],edx
c0025799:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c002579e:	40                   	inc    eax
c002579f:	a3 c0 1d 03 c0       	mov    ds:0xc0031dc0,eax
c00257a4:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c00257a9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00257af:	83 ec 08             	sub    esp,0x8
c00257b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00257b6:	50                   	push   eax
c00257b7:	e8 dc e3 fe ff       	call   c0013b98 <Device::addChild(Device*)>
c00257bc:	83 c4 10             	add    esp,0x10
c00257bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00257c5:	83 c0 08             	add    eax,0x8
c00257c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00257ca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00257cf:	6a 00                	push   0x0
c00257d1:	6a 00                	push   0x0
c00257d3:	52                   	push   edx
c00257d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00257d8:	ff d0                	call   eax
c00257da:	83 c4 10             	add    esp,0x10
c00257dd:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00257e1:	e9 6b ff ff ff       	jmp    c0025751 <APIC::APIC()+0x39>
c00257e6:	c6 05 00 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e00,0x1
c00257ed:	90                   	nop
c00257ee:	83 c4 18             	add    esp,0x18
c00257f1:	5b                   	pop    ebx
c00257f2:	c3                   	ret    
c00257f3:	90                   	nop

c00257f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00257f4:	55                   	push   ebp
c00257f5:	89 e5                	mov    ebp,esp
c00257f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025800:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025803:	72 1d                	jb     c0025822 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025808:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025811:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025817:	01 d0                	add    eax,edx
c0025819:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002581c:	73 04                	jae    c0025822 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002581e:	b0 01                	mov    al,0x1
c0025820:	eb 02                	jmp    c0025824 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025822:	b0 00                	mov    al,0x0
c0025824:	5d                   	pop    ebp
c0025825:	c3                   	ret    

c0025826 <IOAPIC::read(int)>:
c0025826:	55                   	push   ebp
c0025827:	89 e5                	mov    ebp,esp
c0025829:	83 ec 10             	sub    esp,0x10
c002582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002582f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025838:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002583b:	0f b6 d0             	movzx  edx,al
c002583e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025841:	89 10                	mov    DWORD PTR [eax],edx
c0025843:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025846:	83 c0 10             	add    eax,0x10
c0025849:	8b 00                	mov    eax,DWORD PTR [eax]
c002584b:	c9                   	leave  
c002584c:	c3                   	ret    
c002584d:	90                   	nop

c002584e <IOAPIC::open(int, int, void*)>:
c002584e:	55                   	push   ebp
c002584f:	89 e5                	mov    ebp,esp
c0025851:	57                   	push   edi
c0025852:	56                   	push   esi
c0025853:	53                   	push   ebx
c0025854:	83 ec 0c             	sub    esp,0xc
c0025857:	83 ec 0c             	sub    esp,0xc
c002585a:	68 27 c6 02 c0       	push   0xc002c627
c002585f:	e8 fb ce fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0025864:	83 c4 10             	add    esp,0x10
c0025867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002586a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002586d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025876:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002587c:	8b 14 85 20 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfbe0]
c0025883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025886:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002588c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002588f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025895:	8b 14 85 a0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb60]
c002589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00258a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00258ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258b7:	0f b6 f8             	movzx  edi,al
c00258ba:	89 d0                	mov    eax,edx
c00258bc:	ba 00 00 00 00       	mov    edx,0x0
c00258c1:	89 c1                	mov    ecx,eax
c00258c3:	80 e5 ff             	and    ch,0xff
c00258c6:	89 cb                	mov    ebx,ecx
c00258c8:	0f b6 f2             	movzx  esi,dl
c00258cb:	89 d8                	mov    eax,ebx
c00258cd:	89 f2                	mov    edx,esi
c00258cf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258d2:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258d5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258d9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258dd:	83 e0 00             	and    eax,0x0
c00258e0:	09 d0                	or     eax,edx
c00258e2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258ef:	8d 50 01             	lea    edx,[eax+0x1]
c00258f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258f5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258fb:	0f b6 d0             	movzx  edx,al
c00258fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025901:	83 c2 08             	add    edx,0x8
c0025904:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025908:	0f b6 c9             	movzx  ecx,cl
c002590b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025911:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025915:	83 ec 08             	sub    esp,0x8
c0025918:	6a 01                	push   0x1
c002591a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002591d:	e8 04 ff ff ff       	call   c0025826 <IOAPIC::read(int)>
c0025922:	83 c4 10             	add    esp,0x10
c0025925:	c1 f8 10             	sar    eax,0x10
c0025928:	0f b6 c0             	movzx  eax,al
c002592b:	8d 50 01             	lea    edx,[eax+0x1]
c002592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025931:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025937:	b8 00 00 00 00       	mov    eax,0x0
c002593c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002593f:	5b                   	pop    ebx
c0025940:	5e                   	pop    esi
c0025941:	5f                   	pop    edi
c0025942:	5d                   	pop    ebp
c0025943:	c3                   	ret    

c0025944 <IOAPIC::write(int, int)>:
c0025944:	55                   	push   ebp
c0025945:	89 e5                	mov    ebp,esp
c0025947:	83 ec 10             	sub    esp,0x10
c002594a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025953:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025956:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025959:	0f b6 d0             	movzx  edx,al
c002595c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002595f:	89 10                	mov    DWORD PTR [eax],edx
c0025961:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025964:	8d 50 10             	lea    edx,[eax+0x10]
c0025967:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002596a:	89 02                	mov    DWORD PTR [edx],eax
c002596c:	90                   	nop
c002596d:	c9                   	leave  
c002596e:	c3                   	ret    
c002596f:	90                   	nop

c0025970 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025970:	55                   	push   ebp
c0025971:	89 e5                	mov    ebp,esp
c0025973:	53                   	push   ebx
c0025974:	83 ec 2c             	sub    esp,0x2c
c0025977:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002597a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002597d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025980:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025983:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025986:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025989:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002598c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002598f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025992:	88 d8                	mov    al,bl
c0025994:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025997:	88 c8                	mov    al,cl
c0025999:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002599c:	88 d0                	mov    al,dl
c002599e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00259a1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259a5:	83 c0 08             	add    eax,0x8
c00259a8:	01 c0                	add    eax,eax
c00259aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259b1:	83 c0 08             	add    eax,0x8
c00259b4:	01 c0                	add    eax,eax
c00259b6:	40                   	inc    eax
c00259b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00259ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00259bd:	50                   	push   eax
c00259be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c1:	e8 60 fe ff ff       	call   c0025826 <IOAPIC::read(int)>
c00259c6:	83 c4 08             	add    esp,0x8
c00259c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00259cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00259d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00259d6:	c1 e0 18             	shl    eax,0x18
c00259d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00259dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00259df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00259e2:	52                   	push   edx
c00259e3:	50                   	push   eax
c00259e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259e7:	e8 58 ff ff ff       	call   c0025944 <IOAPIC::write(int, int)>
c00259ec:	83 c4 0c             	add    esp,0xc
c00259ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259f2:	50                   	push   eax
c00259f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f6:	e8 2b fe ff ff       	call   c0025826 <IOAPIC::read(int)>
c00259fb:	83 c4 08             	add    esp,0x8
c00259fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a01:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025a08:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025a0f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025a16:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a1a:	74 09                	je     c0025a25 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025a1c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025a23:	eb 07                	jmp    c0025a2c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025a25:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025a2c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025a30:	74 09                	je     c0025a3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025a32:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025a39:	eb 07                	jmp    c0025a42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025a3b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025a42:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025a49:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025a4d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025a50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025a53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a56:	52                   	push   edx
c0025a57:	50                   	push   eax
c0025a58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a5b:	e8 e4 fe ff ff       	call   c0025944 <IOAPIC::write(int, int)>
c0025a60:	83 c4 0c             	add    esp,0xc
c0025a63:	90                   	nop
c0025a64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025a67:	c9                   	leave  
c0025a68:	c3                   	ret    
c0025a69:	90                   	nop

c0025a6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025a6a:	55                   	push   ebp
c0025a6b:	89 e5                	mov    ebp,esp
c0025a6d:	57                   	push   edi
c0025a6e:	56                   	push   esi
c0025a6f:	53                   	push   ebx
c0025a70:	83 ec 2c             	sub    esp,0x2c
c0025a73:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a76:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a79:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a7d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025a81:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a85:	74 5a                	je     c0025ae1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a87:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025a8b:	7f 44                	jg     c0025ad1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025a8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a90:	05 c0 cc 02 c0       	add    eax,0xc002ccc0
c0025a95:	8a 00                	mov    al,BYTE PTR [eax]
c0025a97:	0f b6 c0             	movzx  eax,al
c0025a9a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025a9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aa0:	66 8b 84 00 c0 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc40]
c0025aa8:	0f b7 c0             	movzx  eax,ax
c0025aab:	83 e0 02             	and    eax,0x2
c0025aae:	85 c0                	test   eax,eax
c0025ab0:	74 04                	je     c0025ab6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025ab2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025ab6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ab9:	66 8b 84 00 c0 03 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfc40]
c0025ac1:	0f b7 c0             	movzx  eax,ax
c0025ac4:	83 e0 08             	and    eax,0x8
c0025ac7:	85 c0                	test   eax,eax
c0025ac9:	74 16                	je     c0025ae1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025acb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025acf:	eb 10                	jmp    c0025ae1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025ad1:	83 ec 0c             	sub    esp,0xc
c0025ad4:	68 38 c6 02 c0       	push   0xc002c638
c0025ad9:	e8 ed 43 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0025ade:	83 c4 10             	add    esp,0x10
c0025ae1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025ae5:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c0025aea:	83 ec 08             	sub    esp,0x8
c0025aed:	50                   	push   eax
c0025aee:	68 70 c6 02 c0       	push   0xc002c670
c0025af3:	e8 67 cc fe ff       	call   c001275f <Dbg::kprintf(char const*, ...)>
c0025af8:	83 c4 10             	add    esp,0x10
c0025afb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025b02:	a1 c0 1d 03 c0       	mov    eax,ds:0xc0031dc0
c0025b07:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025b0a:	7d 67                	jge    c0025b73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b0f:	8b 04 85 e0 1d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce220]
c0025b16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b19:	83 ec 08             	sub    esp,0x8
c0025b1c:	52                   	push   edx
c0025b1d:	50                   	push   eax
c0025b1e:	e8 d1 fc ff ff       	call   c00257f4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	84 c0                	test   al,al
c0025b28:	74 44                	je     c0025b6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025b2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b2d:	8b 1c 85 e0 1d 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce220]
c0025b34:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025b38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025b3b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025b3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b42:	83 c0 20             	add    eax,0x20
c0025b45:	0f b6 f0             	movzx  esi,al
c0025b48:	b8 00 00 00 00       	mov    eax,0x0
c0025b4d:	99                   	cdq    
c0025b4e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025b51:	0f b6 c9             	movzx  ecx,cl
c0025b54:	83 ec 04             	sub    esp,0x4
c0025b57:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025b5a:	57                   	push   edi
c0025b5b:	56                   	push   esi
c0025b5c:	52                   	push   edx
c0025b5d:	50                   	push   eax
c0025b5e:	51                   	push   ecx
c0025b5f:	53                   	push   ebx
c0025b60:	e8 0b fe ff ff       	call   c0025970 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025b65:	83 c4 20             	add    esp,0x20
c0025b68:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025b6c:	eb 05                	jmp    c0025b73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b6e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025b71:	eb 8f                	jmp    c0025b02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025b73:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025b76:	83 f0 01             	xor    eax,0x1
c0025b79:	84 c0                	test   al,al
c0025b7b:	74 10                	je     c0025b8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025b7d:	83 ec 0c             	sub    esp,0xc
c0025b80:	68 87 c6 02 c0       	push   0xc002c687
c0025b85:	e8 41 43 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0025b8a:	83 c4 10             	add    esp,0x10
c0025b8d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025b91:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025b98:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025b9c:	7f 65                	jg     c0025c03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ba4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025bab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bae:	01 ca                	add    edx,ecx
c0025bb0:	83 c2 54             	add    edx,0x54
c0025bb3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025bb7:	85 c0                	test   eax,eax
c0025bb9:	75 43                	jne    c0025bfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025bc8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025bcb:	01 ca                	add    edx,ecx
c0025bcd:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025bd0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025bd3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bdd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025be4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025be7:	01 ca                	add    edx,ecx
c0025be9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025bef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025bf2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025bf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bf9:	83 e8 20             	sub    eax,0x20
c0025bfc:	eb 1a                	jmp    c0025c18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025bfe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025c01:	eb 95                	jmp    c0025b98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025c03:	83 ec 0c             	sub    esp,0xc
c0025c06:	68 94 c6 02 c0       	push   0xc002c694
c0025c0b:	e8 bb 42 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0025c10:	83 c4 10             	add    esp,0x10
c0025c13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025c18:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c1b:	5b                   	pop    ebx
c0025c1c:	5e                   	pop    esi
c0025c1d:	5f                   	pop    edi
c0025c1e:	5d                   	pop    ebp
c0025c1f:	c3                   	ret    

c0025c20 <PIC::disable()>:
c0025c20:	55                   	push   ebp
c0025c21:	89 e5                	mov    ebp,esp
c0025c23:	83 ec 10             	sub    esp,0x10
c0025c26:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025c2c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025c30:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c33:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c37:	ee                   	out    dx,al
c0025c38:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025c3e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025c42:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c45:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025c49:	ee                   	out    dx,al
c0025c4a:	90                   	nop
c0025c4b:	c9                   	leave  
c0025c4c:	c3                   	ret    
c0025c4d:	90                   	nop

c0025c4e <PIC::close(int, int, void*)>:
c0025c4e:	55                   	push   ebp
c0025c4f:	89 e5                	mov    ebp,esp
c0025c51:	83 ec 08             	sub    esp,0x8
c0025c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c59:	83 c0 3c             	add    eax,0x3c
c0025c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c5e:	83 ec 0c             	sub    esp,0xc
c0025c61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c64:	ff d0                	call   eax
c0025c66:	83 c4 10             	add    esp,0x10
c0025c69:	b8 00 00 00 00       	mov    eax,0x0
c0025c6e:	c9                   	leave  
c0025c6f:	c3                   	ret    

c0025c70 <PIC::PIC()>:
c0025c70:	83 ec 0c             	sub    esp,0xc
c0025c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c77:	83 ec 08             	sub    esp,0x8
c0025c7a:	68 40 c7 02 c0       	push   0xc002c740
c0025c7f:	50                   	push   eax
c0025c80:	e8 81 e8 fe ff       	call   c0014506 <InterruptController::InterruptController(char const*)>
c0025c85:	83 c4 10             	add    esp,0x10
c0025c88:	ba 6c c7 02 c0       	mov    edx,0xc002c76c
c0025c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c91:	89 10                	mov    DWORD PTR [eax],edx
c0025c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c9d:	0f b6 d0             	movzx  edx,al
c0025ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025caf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cb5:	0f b6 d0             	movzx  edx,al
c0025cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cbc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ccb:	8d 50 01             	lea    edx,[eax+0x1]
c0025cce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025cd2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025cd8:	0f b6 d0             	movzx  edx,al
c0025cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cdf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ce3:	83 e1 3f             	and    ecx,0x3f
c0025ce6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cf4:	0f b6 d0             	movzx  edx,al
c0025cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d0c:	0f b6 d0             	movzx  edx,al
c0025d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d13:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d22:	8d 50 01             	lea    edx,[eax+0x1]
c0025d25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d29:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d2f:	0f b6 d0             	movzx  edx,al
c0025d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d36:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d3a:	83 e1 3f             	and    ecx,0x3f
c0025d3d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d41:	90                   	nop
c0025d42:	83 c4 0c             	add    esp,0xc
c0025d45:	c3                   	ret    

c0025d46 <PIC::ioWait()>:
c0025d46:	eb 00                	jmp    c0025d48 <PIC::ioWait()+0x2>
c0025d48:	eb 00                	jmp    c0025d4a <PIC::ioWait()+0x4>
c0025d4a:	90                   	nop
c0025d4b:	c3                   	ret    

c0025d4c <PIC::getIRQReg(int)>:
c0025d4c:	55                   	push   ebp
c0025d4d:	89 e5                	mov    ebp,esp
c0025d4f:	83 ec 10             	sub    esp,0x10
c0025d52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d55:	0f b6 c0             	movzx  eax,al
c0025d58:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d5e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025d61:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d64:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d68:	ee                   	out    dx,al
c0025d69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d6c:	0f b6 c0             	movzx  eax,al
c0025d6f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d75:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025d78:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d7b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d7f:	ee                   	out    dx,al
c0025d80:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025d86:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025d8a:	89 c2                	mov    edx,eax
c0025d8c:	ec                   	in     al,dx
c0025d8d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025d90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d93:	0f b6 c0             	movzx  eax,al
c0025d96:	c1 e0 08             	shl    eax,0x8
c0025d99:	89 c1                	mov    ecx,eax
c0025d9b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025da1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025da5:	89 c2                	mov    edx,eax
c0025da7:	ec                   	in     al,dx
c0025da8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025dab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025dae:	0f b6 c0             	movzx  eax,al
c0025db1:	09 c8                	or     eax,ecx
c0025db3:	c9                   	leave  
c0025db4:	c3                   	ret    
c0025db5:	90                   	nop

c0025db6 <PIC::eoi(unsigned char)>:
c0025db6:	55                   	push   ebp
c0025db7:	89 e5                	mov    ebp,esp
c0025db9:	83 ec 14             	sub    esp,0x14
c0025dbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025dc2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025dc6:	75 1e                	jne    c0025de6 <PIC::eoi(unsigned char)+0x30>
c0025dc8:	6a 0b                	push   0xb
c0025dca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dcd:	e8 7a ff ff ff       	call   c0025d4c <PIC::getIRQReg(int)>
c0025dd2:	83 c4 08             	add    esp,0x8
c0025dd5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025dd9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ddd:	25 80 00 00 00       	and    eax,0x80
c0025de2:	85 c0                	test   eax,eax
c0025de4:	74 5f                	je     c0025e45 <PIC::eoi(unsigned char)+0x8f>
c0025de6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025dea:	75 2d                	jne    c0025e19 <PIC::eoi(unsigned char)+0x63>
c0025dec:	6a 0b                	push   0xb
c0025dee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025df1:	e8 56 ff ff ff       	call   c0025d4c <PIC::getIRQReg(int)>
c0025df6:	83 c4 08             	add    esp,0x8
c0025df9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025dfd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e00:	66 85 c0             	test   ax,ax
c0025e03:	78 14                	js     c0025e19 <PIC::eoi(unsigned char)+0x63>
c0025e05:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025e0b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025e0f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e12:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e16:	ee                   	out    dx,al
c0025e17:	eb 2d                	jmp    c0025e46 <PIC::eoi(unsigned char)+0x90>
c0025e19:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025e1d:	76 12                	jbe    c0025e31 <PIC::eoi(unsigned char)+0x7b>
c0025e1f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e25:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025e29:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e2c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e30:	ee                   	out    dx,al
c0025e31:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e37:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025e3b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e3e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e42:	ee                   	out    dx,al
c0025e43:	eb 01                	jmp    c0025e46 <PIC::eoi(unsigned char)+0x90>
c0025e45:	90                   	nop
c0025e46:	c9                   	leave  
c0025e47:	c3                   	ret    

c0025e48 <PIC::remap()>:
c0025e48:	55                   	push   ebp
c0025e49:	89 e5                	mov    ebp,esp
c0025e4b:	83 ec 48             	sub    esp,0x48
c0025e4e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025e55:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025e5c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025e62:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025e65:	89 c2                	mov    edx,eax
c0025e67:	ec                   	in     al,dx
c0025e68:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025e6b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025e6e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025e71:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025e77:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025e7a:	89 c2                	mov    edx,eax
c0025e7c:	ec                   	in     al,dx
c0025e7d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025e80:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025e83:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025e86:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025e8c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025e90:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025e93:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025e96:	ee                   	out    dx,al
c0025e97:	83 ec 0c             	sub    esp,0xc
c0025e9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e9d:	e8 a4 fe ff ff       	call   c0025d46 <PIC::ioWait()>
c0025ea2:	83 c4 10             	add    esp,0x10
c0025ea5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025eab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025eaf:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025eb2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025eb5:	ee                   	out    dx,al
c0025eb6:	83 ec 0c             	sub    esp,0xc
c0025eb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ebc:	e8 85 fe ff ff       	call   c0025d46 <PIC::ioWait()>
c0025ec1:	83 c4 10             	add    esp,0x10
c0025ec4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025ec7:	0f b6 c0             	movzx  eax,al
c0025eca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025ed0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025ed3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025ed6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025ed9:	ee                   	out    dx,al
c0025eda:	83 ec 0c             	sub    esp,0xc
c0025edd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ee0:	e8 61 fe ff ff       	call   c0025d46 <PIC::ioWait()>
c0025ee5:	83 c4 10             	add    esp,0x10
c0025ee8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025eeb:	0f b6 c0             	movzx  eax,al
c0025eee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025ef4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025ef7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025efa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025efd:	ee                   	out    dx,al
c0025efe:	83 ec 0c             	sub    esp,0xc
c0025f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f04:	e8 3d fe ff ff       	call   c0025d46 <PIC::ioWait()>
c0025f09:	83 c4 10             	add    esp,0x10
c0025f0c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025f12:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025f16:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025f19:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025f1c:	ee                   	out    dx,al
c0025f1d:	83 ec 0c             	sub    esp,0xc
c0025f20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f23:	e8 1e fe ff ff       	call   c0025d46 <PIC::ioWait()>
c0025f28:	83 c4 10             	add    esp,0x10
c0025f2b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025f31:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025f35:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025f38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f3b:	ee                   	out    dx,al
c0025f3c:	83 ec 0c             	sub    esp,0xc
c0025f3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f42:	e8 ff fd ff ff       	call   c0025d46 <PIC::ioWait()>
c0025f47:	83 c4 10             	add    esp,0x10
c0025f4a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025f50:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025f54:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025f57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025f5a:	ee                   	out    dx,al
c0025f5b:	83 ec 0c             	sub    esp,0xc
c0025f5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f61:	e8 e0 fd ff ff       	call   c0025d46 <PIC::ioWait()>
c0025f66:	83 c4 10             	add    esp,0x10
c0025f69:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025f6f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025f73:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025f76:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f79:	ee                   	out    dx,al
c0025f7a:	83 ec 0c             	sub    esp,0xc
c0025f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f80:	e8 c1 fd ff ff       	call   c0025d46 <PIC::ioWait()>
c0025f85:	83 c4 10             	add    esp,0x10
c0025f88:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025f8c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025f92:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025f95:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025f98:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025f9b:	ee                   	out    dx,al
c0025f9c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025fa0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025fa6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025fa9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025fac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025faf:	ee                   	out    dx,al
c0025fb0:	90                   	nop
c0025fb1:	c9                   	leave  
c0025fb2:	c3                   	ret    
c0025fb3:	90                   	nop

c0025fb4 <PIC::open(int, int, void*)>:
c0025fb4:	55                   	push   ebp
c0025fb5:	89 e5                	mov    ebp,esp
c0025fb7:	83 ec 18             	sub    esp,0x18
c0025fba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025fc0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025fc4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fc7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fcb:	ee                   	out    dx,al
c0025fcc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025fd2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025fd6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fd9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fdd:	ee                   	out    dx,al
c0025fde:	83 ec 0c             	sub    esp,0xc
c0025fe1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe4:	e8 5f fe ff ff       	call   c0025e48 <PIC::remap()>
c0025fe9:	83 c4 10             	add    esp,0x10
c0025fec:	b8 00 00 00 00       	mov    eax,0x0
c0025ff1:	c9                   	leave  
c0025ff2:	c3                   	ret    
c0025ff3:	90                   	nop

c0025ff4 <APICTimer::close(int, int, void*)>:
c0025ff4:	b8 00 00 00 00       	mov    eax,0x0
c0025ff9:	c3                   	ret    

c0025ffa <apicTimerHandler(regs*, void*)>:
c0025ffa:	83 ec 0c             	sub    esp,0xc
c0025ffd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026001:	8b 00                	mov    eax,DWORD PTR [eax]
c0026003:	99                   	cdq    
c0026004:	52                   	push   edx
c0026005:	50                   	push   eax
c0026006:	6a 00                	push   0x0
c0026008:	68 00 ca 9a 3b       	push   0x3b9aca00
c002600d:	e8 92 07 00 00       	call   c00267a4 <__udivdi3>
c0026012:	83 c4 10             	add    esp,0x10
c0026015:	83 ec 08             	sub    esp,0x8
c0026018:	52                   	push   edx
c0026019:	50                   	push   eax
c002601a:	e8 3e 06 ff ff       	call   c001665d <timerHandler(unsigned long long)>
c002601f:	83 c4 10             	add    esp,0x10
c0026022:	90                   	nop
c0026023:	83 c4 0c             	add    esp,0xc
c0026026:	c3                   	ret    
c0026027:	90                   	nop

c0026028 <APICTimer::write(int)>:
c0026028:	53                   	push   ebx
c0026029:	83 ec 28             	sub    esp,0x28
c002602c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026030:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026034:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002603a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c002603f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026045:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002604b:	83 ec 0c             	sub    esp,0xc
c002604e:	50                   	push   eax
c002604f:	e8 de f4 ff ff       	call   c0025532 <APIC::getBase()>
c0026054:	83 c4 10             	add    esp,0x10
c0026057:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002605b:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c0026060:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c0026066:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002606a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002606e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026072:	05 e0 03 00 00       	add    eax,0x3e0
c0026077:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002607d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026081:	05 80 03 00 00       	add    eax,0x380
c0026086:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002608c:	fb                   	sti    
c002608d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026091:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026095:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002609a:	83 d2 00             	adc    edx,0x0
c002609d:	89 c1                	mov    ecx,eax
c002609f:	89 d3                	mov    ebx,edx
c00260a1:	a1 d0 e0 02 c0       	mov    eax,ds:0xc002e0d0
c00260a6:	8b 15 d4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0d4
c00260ac:	39 c8                	cmp    eax,ecx
c00260ae:	89 d0                	mov    eax,edx
c00260b0:	19 d8                	sbb    eax,ebx
c00260b2:	73 02                	jae    c00260b6 <APICTimer::write(int)+0x8e>
c00260b4:	eb d7                	jmp    c002608d <APICTimer::write(int)+0x65>
c00260b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260ba:	05 20 03 00 00       	add    eax,0x320
c00260bf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00260c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260c9:	05 90 03 00 00       	add    eax,0x390
c00260ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d0:	f7 d0                	not    eax
c00260d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00260da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260de:	ba 00 00 00 00       	mov    edx,0x0
c00260e3:	f7 f3                	div    ebx
c00260e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00260e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00260ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00260f3:	0d 00 00 02 00       	or     eax,0x20000
c00260f8:	89 c2                	mov    edx,eax
c00260fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260fe:	05 20 03 00 00       	add    eax,0x320
c0026103:	89 10                	mov    DWORD PTR [eax],edx
c0026105:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026109:	05 e0 03 00 00       	add    eax,0x3e0
c002610e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026118:	05 80 03 00 00       	add    eax,0x380
c002611d:	89 c2                	mov    edx,eax
c002611f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026123:	89 02                	mov    DWORD PTR [edx],eax
c0026125:	90                   	nop
c0026126:	83 c4 28             	add    esp,0x28
c0026129:	5b                   	pop    ebx
c002612a:	c3                   	ret    
c002612b:	90                   	nop

c002612c <APICTimer::open(int, int, void*)>:
c002612c:	57                   	push   edi
c002612d:	56                   	push   esi
c002612e:	53                   	push   ebx
c002612f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026133:	8b 00                	mov    eax,DWORD PTR [eax]
c0026135:	83 c0 24             	add    eax,0x24
c0026138:	8b 00                	mov    eax,DWORD PTR [eax]
c002613a:	83 ec 08             	sub    esp,0x8
c002613d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026145:	ff d0                	call   eax
c0026147:	83 c4 10             	add    esp,0x10
c002614a:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c002614f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026155:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002615b:	83 ec 0c             	sub    esp,0xc
c002615e:	50                   	push   eax
c002615f:	e8 ce f3 ff ff       	call   c0025532 <APIC::getBase()>
c0026164:	83 c4 10             	add    esp,0x10
c0026167:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002616d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026171:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026177:	0f b6 f8             	movzx  edi,al
c002617a:	89 d0                	mov    eax,edx
c002617c:	ba 00 00 00 00       	mov    edx,0x0
c0026181:	89 c1                	mov    ecx,eax
c0026183:	80 e5 ff             	and    ch,0xff
c0026186:	89 cb                	mov    ebx,ecx
c0026188:	0f b6 f2             	movzx  esi,dl
c002618b:	89 d8                	mov    eax,ebx
c002618d:	89 f2                	mov    edx,esi
c002618f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026193:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026196:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002619a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002619e:	83 e0 00             	and    eax,0x0
c00261a1:	09 d0                	or     eax,edx
c00261a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00261a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261b1:	8d 50 01             	lea    edx,[eax+0x1]
c00261b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00261be:	0f b6 d0             	movzx  edx,al
c00261c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c5:	83 c2 08             	add    edx,0x8
c00261c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00261cc:	0f b6 c9             	movzx  ecx,cl
c00261cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00261d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00261d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00261e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00261ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00261f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00261f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00261ff:	83 ec 0c             	sub    esp,0xc
c0026202:	51                   	push   ecx
c0026203:	6a 01                	push   0x1
c0026205:	68 fa 5f 02 c0       	push   0xc0025ffa
c002620a:	52                   	push   edx
c002620b:	50                   	push   eax
c002620c:	e8 ff d8 fe ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026211:	83 c4 20             	add    esp,0x20
c0026214:	89 c2                	mov    edx,eax
c0026216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026220:	b8 00 00 00 00       	mov    eax,0x0
c0026225:	5b                   	pop    ebx
c0026226:	5e                   	pop    esi
c0026227:	5f                   	pop    edi
c0026228:	c3                   	ret    
c0026229:	90                   	nop

c002622a <APICTimer::APICTimer()>:
c002622a:	83 ec 0c             	sub    esp,0xc
c002622d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026231:	83 ec 08             	sub    esp,0x8
c0026234:	68 ac c7 02 c0       	push   0xc002c7ac
c0026239:	50                   	push   eax
c002623a:	e8 8f 03 ff ff       	call   c00165ce <Timer::Timer(char const*)>
c002623f:	83 c4 10             	add    esp,0x10
c0026242:	ba c0 c7 02 c0       	mov    edx,0xc002c7c0
c0026247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624b:	89 10                	mov    DWORD PTR [eax],edx
c002624d:	90                   	nop
c002624e:	83 c4 0c             	add    esp,0xc
c0026251:	c3                   	ret    

c0026252 <PIT::write(int)>:
c0026252:	83 ec 10             	sub    esp,0x10
c0026255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002625d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026263:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026267:	a3 04 1e 03 c0       	mov    ds:0xc0031e04,eax
c002626c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026271:	99                   	cdq    
c0026272:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026276:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002627a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026281:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026286:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002628a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002628f:	ee                   	out    dx,al
c0026290:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026294:	0f b6 c0             	movzx  eax,al
c0026297:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002629e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00262a2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00262a6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00262ab:	ee                   	out    dx,al
c00262ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262b0:	c1 f8 08             	sar    eax,0x8
c00262b3:	0f b6 c0             	movzx  eax,al
c00262b6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00262bd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00262c1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00262c5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00262ca:	ee                   	out    dx,al
c00262cb:	90                   	nop
c00262cc:	83 c4 10             	add    esp,0x10
c00262cf:	c3                   	ret    

c00262d0 <pitHandler(regs*, void*)>:
c00262d0:	83 ec 0c             	sub    esp,0xc
c00262d3:	a1 04 1e 03 c0       	mov    eax,ds:0xc0031e04
c00262d8:	99                   	cdq    
c00262d9:	52                   	push   edx
c00262da:	50                   	push   eax
c00262db:	6a 00                	push   0x0
c00262dd:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262e2:	e8 bd 04 00 00       	call   c00267a4 <__udivdi3>
c00262e7:	83 c4 10             	add    esp,0x10
c00262ea:	83 ec 08             	sub    esp,0x8
c00262ed:	52                   	push   edx
c00262ee:	50                   	push   eax
c00262ef:	e8 69 03 ff ff       	call   c001665d <timerHandler(unsigned long long)>
c00262f4:	83 c4 10             	add    esp,0x10
c00262f7:	90                   	nop
c00262f8:	83 c4 0c             	add    esp,0xc
c00262fb:	c3                   	ret    

c00262fc <PIT::open(int, int, void*)>:
c00262fc:	83 ec 0c             	sub    esp,0xc
c00262ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026303:	8b 00                	mov    eax,DWORD PTR [eax]
c0026305:	83 c0 24             	add    eax,0x24
c0026308:	8b 00                	mov    eax,DWORD PTR [eax]
c002630a:	83 ec 08             	sub    esp,0x8
c002630d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026315:	ff d0                	call   eax
c0026317:	83 c4 10             	add    esp,0x10
c002631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631e:	83 ec 0c             	sub    esp,0xc
c0026321:	6a 00                	push   0x0
c0026323:	6a 01                	push   0x1
c0026325:	68 d0 62 02 c0       	push   0xc00262d0
c002632a:	6a 00                	push   0x0
c002632c:	50                   	push   eax
c002632d:	e8 de d7 fe ff       	call   c0013b10 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026332:	83 c4 20             	add    esp,0x20
c0026335:	89 c2                	mov    edx,eax
c0026337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002633b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026341:	b8 00 00 00 00       	mov    eax,0x0
c0026346:	83 c4 0c             	add    esp,0xc
c0026349:	c3                   	ret    

c002634a <PIT::close(int, int, void*)>:
c002634a:	83 ec 0c             	sub    esp,0xc
c002634d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026351:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002635b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002635f:	6a 01                	push   0x1
c0026361:	68 d0 62 02 c0       	push   0xc00262d0
c0026366:	6a 00                	push   0x0
c0026368:	50                   	push   eax
c0026369:	e8 ec d7 fe ff       	call   c0013b5a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002636e:	83 c4 10             	add    esp,0x10
c0026371:	b8 00 00 00 00       	mov    eax,0x0
c0026376:	83 c4 0c             	add    esp,0xc
c0026379:	c3                   	ret    

c002637a <PIT::PIT()>:
c002637a:	83 ec 0c             	sub    esp,0xc
c002637d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026381:	83 ec 08             	sub    esp,0x8
c0026384:	68 e8 c7 02 c0       	push   0xc002c7e8
c0026389:	50                   	push   eax
c002638a:	e8 3f 02 ff ff       	call   c00165ce <Timer::Timer(char const*)>
c002638f:	83 c4 10             	add    esp,0x10
c0026392:	ba 10 c8 02 c0       	mov    edx,0xc002c810
c0026397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639b:	89 10                	mov    DWORD PTR [eax],edx
c002639d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263a7:	0f b6 d0             	movzx  edx,al
c00263aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00263b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263bf:	0f b6 d0             	movzx  edx,al
c00263c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00263cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263d5:	8d 50 01             	lea    edx,[eax+0x1]
c00263d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00263e2:	0f b6 d0             	movzx  edx,al
c00263e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00263ed:	83 e1 3f             	and    ecx,0x3f
c00263f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00263f4:	90                   	nop
c00263f5:	83 c4 0c             	add    esp,0xc
c00263f8:	c3                   	ret    
c00263f9:	66 90                	xchg   ax,ax
c00263fb:	66 90                	xchg   ax,ax
c00263fd:	66 90                	xchg   ax,ax
c00263ff:	90                   	nop

c0026400 <avxDetect>:
c0026400:	b8 00 00 00 00       	mov    eax,0x0
c0026405:	c3                   	ret    

c0026406 <avxSave>:
c0026406:	c3                   	ret    

c0026407 <avxLoad>:
c0026407:	c3                   	ret    

c0026408 <avxInit>:
c0026408:	c3                   	ret    

c0026409 <avxClose>:
c0026409:	c3                   	ret    

c002640a <wouldSheSayYes>:
c002640a:	c3                   	ret    
c002640b:	49                   	dec    ecx
c002640c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026410:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026414:	75 20                	jne    c0026436 <sseDetect.noSSE+0x1>
c0026416:	4e                   	dec    esi
c0026417:	79 61                	jns    c002647a <x87Detect+0x14>
c0026419:	68 2e 2e 2e 00       	push   0x2e2e2e
c002641e:	66 90                	xchg   ax,ax

c0026420 <absolutelyNoChanceInHell>:
c0026420:	b8 01 00 00 00       	mov    eax,0x1
c0026425:	0f a2                	cpuid  
c0026427:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002642d:	74 06                	je     c0026435 <sseDetect.noSSE>
c002642f:	b8 01 00 00 00       	mov    eax,0x1
c0026434:	c3                   	ret    

c0026435 <sseDetect.noSSE>:
c0026435:	31 c0                	xor    eax,eax
c0026437:	c3                   	ret    

c0026438 <sseSave>:
c0026438:	0f ae 44 24 04       	fxsave [esp+0x4]
c002643d:	c3                   	ret    

c002643e <sseLoad>:
c002643e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026443:	c3                   	ret    

c0026444 <sseInit>:
c0026444:	e8 49 00 00 00       	call   c0026492 <x87Init>
c0026449:	0f 20 e0             	mov    eax,cr4
c002644c:	66 0d 00 06          	or     ax,0x600
c0026450:	0f 22 e0             	mov    cr4,eax
c0026453:	c3                   	ret    

c0026454 <sseClose>:
c0026454:	c3                   	ret    
c0026455:	66 90                	xchg   ax,ax
c0026457:	66 90                	xchg   ax,ax
c0026459:	66 90                	xchg   ax,ax
c002645b:	66 90                	xchg   ax,ax
c002645d:	66 90                	xchg   ax,ax
c002645f:	90                   	nop

c0026460 <value_37F>:
c0026460:	7f 03                	jg     c0026465 <value_37A+0x1>

c0026462 <value_37E>:
c0026462:	7e 03                	jle    c0026467 <x87Detect+0x1>

c0026464 <value_37A>:
c0026464:	7a 03                	jp     c0026469 <x87Detect+0x3>

c0026466 <x87Detect>:
c0026466:	b8 01 00 00 00       	mov    eax,0x1
c002646b:	0f a2                	cpuid  
c002646d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026473:	74 06                	je     c002647b <x87Detect.nox87>
c0026475:	b8 01 00 00 00       	mov    eax,0x1
c002647a:	c3                   	ret    

c002647b <x87Detect.nox87>:
c002647b:	b8 00 00 00 00       	mov    eax,0x0
c0026480:	c3                   	ret    

c0026481 <x87Save>:
c0026481:	55                   	push   ebp
c0026482:	89 e5                	mov    ebp,esp
c0026484:	9b dd 75 08          	fsave  [ebp+0x8]
c0026488:	c9                   	leave  
c0026489:	c3                   	ret    

c002648a <x87Load>:
c002648a:	55                   	push   ebp
c002648b:	89 e5                	mov    ebp,esp
c002648d:	dd 65 08             	frstor [ebp+0x8]
c0026490:	c9                   	leave  
c0026491:	c3                   	ret    

c0026492 <x87Init>:
c0026492:	9b db e3             	finit  
c0026495:	0f 20 c0             	mov    eax,cr0
c0026498:	66 25 fb ff          	and    ax,0xfffb
c002649c:	66 0d 22 00          	or     ax,0x22
c00264a0:	0f 22 c0             	mov    cr0,eax
c00264a3:	0f 06                	clts   
c00264a5:	d9 2d 64 64 02 c0    	fldcw  WORD PTR ds:0xc0026464
c00264ab:	c3                   	ret    

c00264ac <x87Close>:
c00264ac:	c3                   	ret    
c00264ad:	66 90                	xchg   ax,ax
c00264af:	90                   	nop

c00264b0 <__do_global_ctors_aux>:
c00264b0:	a1 a4 90 02 c0       	mov    eax,ds:0xc00290a4
c00264b5:	83 f8 ff             	cmp    eax,0xffffffff
c00264b8:	74 1a                	je     c00264d4 <__do_global_ctors_aux+0x24>
c00264ba:	55                   	push   ebp
c00264bb:	89 e5                	mov    ebp,esp
c00264bd:	53                   	push   ebx
c00264be:	52                   	push   edx
c00264bf:	bb a4 90 02 c0       	mov    ebx,0xc00290a4
c00264c4:	ff d0                	call   eax
c00264c6:	83 eb 04             	sub    ebx,0x4
c00264c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00264cb:	83 f8 ff             	cmp    eax,0xffffffff
c00264ce:	75 f4                	jne    c00264c4 <__do_global_ctors_aux+0x14>
c00264d0:	58                   	pop    eax
c00264d1:	5b                   	pop    ebx
c00264d2:	5d                   	pop    ebp
c00264d3:	c3                   	ret    
c00264d4:	c3                   	ret    
c00264d5:	66 90                	xchg   ax,ax
c00264d7:	90                   	nop

c00264d8 <__divdi3>:
c00264d8:	55                   	push   ebp
c00264d9:	57                   	push   edi
c00264da:	56                   	push   esi
c00264db:	53                   	push   ebx
c00264dc:	83 ec 1c             	sub    esp,0x1c
c00264df:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00264e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00264e7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264ea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00264f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00264f6:	85 db                	test   ebx,ebx
c00264f8:	0f 88 8e 00 00 00    	js     c002658c <__divdi3+0xb4>
c00264fe:	89 dd                	mov    ebp,ebx
c0026500:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026508:	89 d3                	mov    ebx,edx
c002650a:	85 d2                	test   edx,edx
c002650c:	79 0d                	jns    c002651b <__divdi3+0x43>
c002650e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026512:	f7 d8                	neg    eax
c0026514:	83 d2 00             	adc    edx,0x0
c0026517:	f7 da                	neg    edx
c0026519:	89 d3                	mov    ebx,edx
c002651b:	89 c7                	mov    edi,eax
c002651d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026520:	85 db                	test   ebx,ebx
c0026522:	75 48                	jne    c002656c <__divdi3+0x94>
c0026524:	39 ef                	cmp    edi,ebp
c0026526:	76 24                	jbe    c002654c <__divdi3+0x74>
c0026528:	89 ea                	mov    edx,ebp
c002652a:	f7 f7                	div    edi
c002652c:	89 c1                	mov    ecx,eax
c002652e:	31 f6                	xor    esi,esi
c0026530:	89 c8                	mov    eax,ecx
c0026532:	89 f2                	mov    edx,esi
c0026534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026538:	85 c9                	test   ecx,ecx
c002653a:	74 07                	je     c0026543 <__divdi3+0x6b>
c002653c:	f7 d8                	neg    eax
c002653e:	83 d2 00             	adc    edx,0x0
c0026541:	f7 da                	neg    edx
c0026543:	83 c4 1c             	add    esp,0x1c
c0026546:	5b                   	pop    ebx
c0026547:	5e                   	pop    esi
c0026548:	5f                   	pop    edi
c0026549:	5d                   	pop    ebp
c002654a:	c3                   	ret    
c002654b:	90                   	nop
c002654c:	85 ff                	test   edi,edi
c002654e:	75 0b                	jne    c002655b <__divdi3+0x83>
c0026550:	b8 01 00 00 00       	mov    eax,0x1
c0026555:	31 d2                	xor    edx,edx
c0026557:	f7 f3                	div    ebx
c0026559:	89 c7                	mov    edi,eax
c002655b:	31 d2                	xor    edx,edx
c002655d:	89 e8                	mov    eax,ebp
c002655f:	f7 f7                	div    edi
c0026561:	89 c6                	mov    esi,eax
c0026563:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026566:	f7 f7                	div    edi
c0026568:	89 c1                	mov    ecx,eax
c002656a:	eb c4                	jmp    c0026530 <__divdi3+0x58>
c002656c:	39 eb                	cmp    ebx,ebp
c002656e:	77 3c                	ja     c00265ac <__divdi3+0xd4>
c0026570:	0f bd f3             	bsr    esi,ebx
c0026573:	83 f6 1f             	xor    esi,0x1f
c0026576:	75 40                	jne    c00265b8 <__divdi3+0xe0>
c0026578:	39 eb                	cmp    ebx,ebp
c002657a:	72 09                	jb     c0026585 <__divdi3+0xad>
c002657c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002657f:	0f 87 97 00 00 00    	ja     c002661c <__divdi3+0x144>
c0026585:	b9 01 00 00 00       	mov    ecx,0x1
c002658a:	eb a4                	jmp    c0026530 <__divdi3+0x58>
c002658c:	f7 d9                	neg    ecx
c002658e:	83 d3 00             	adc    ebx,0x0
c0026591:	f7 db                	neg    ebx
c0026593:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026596:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002659a:	89 dd                	mov    ebp,ebx
c002659c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00265a4:	e9 5f ff ff ff       	jmp    c0026508 <__divdi3+0x30>
c00265a9:	8d 76 00             	lea    esi,[esi+0x0]
c00265ac:	31 f6                	xor    esi,esi
c00265ae:	31 c9                	xor    ecx,ecx
c00265b0:	e9 7b ff ff ff       	jmp    c0026530 <__divdi3+0x58>
c00265b5:	8d 76 00             	lea    esi,[esi+0x0]
c00265b8:	b8 20 00 00 00       	mov    eax,0x20
c00265bd:	29 f0                	sub    eax,esi
c00265bf:	89 f1                	mov    ecx,esi
c00265c1:	d3 e3                	shl    ebx,cl
c00265c3:	89 fa                	mov    edx,edi
c00265c5:	88 c1                	mov    cl,al
c00265c7:	d3 ea                	shr    edx,cl
c00265c9:	09 da                	or     edx,ebx
c00265cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00265cf:	89 f1                	mov    ecx,esi
c00265d1:	d3 e7                	shl    edi,cl
c00265d3:	89 eb                	mov    ebx,ebp
c00265d5:	88 c1                	mov    cl,al
c00265d7:	d3 eb                	shr    ebx,cl
c00265d9:	89 f1                	mov    ecx,esi
c00265db:	d3 e5                	shl    ebp,cl
c00265dd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00265e0:	88 c1                	mov    cl,al
c00265e2:	d3 ea                	shr    edx,cl
c00265e4:	09 d5                	or     ebp,edx
c00265e6:	89 e8                	mov    eax,ebp
c00265e8:	89 da                	mov    edx,ebx
c00265ea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00265ee:	89 d3                	mov    ebx,edx
c00265f0:	89 c5                	mov    ebp,eax
c00265f2:	f7 e7                	mul    edi
c00265f4:	39 d3                	cmp    ebx,edx
c00265f6:	72 18                	jb     c0026610 <__divdi3+0x138>
c00265f8:	74 0a                	je     c0026604 <__divdi3+0x12c>
c00265fa:	89 e9                	mov    ecx,ebp
c00265fc:	31 f6                	xor    esi,esi
c00265fe:	e9 2d ff ff ff       	jmp    c0026530 <__divdi3+0x58>
c0026603:	90                   	nop
c0026604:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026607:	89 f1                	mov    ecx,esi
c0026609:	d3 e7                	shl    edi,cl
c002660b:	39 c7                	cmp    edi,eax
c002660d:	73 eb                	jae    c00265fa <__divdi3+0x122>
c002660f:	90                   	nop
c0026610:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026613:	31 f6                	xor    esi,esi
c0026615:	e9 16 ff ff ff       	jmp    c0026530 <__divdi3+0x58>
c002661a:	66 90                	xchg   ax,ax
c002661c:	31 c9                	xor    ecx,ecx
c002661e:	e9 0d ff ff ff       	jmp    c0026530 <__divdi3+0x58>
c0026623:	90                   	nop

c0026624 <__moddi3>:
c0026624:	55                   	push   ebp
c0026625:	57                   	push   edi
c0026626:	56                   	push   esi
c0026627:	53                   	push   ebx
c0026628:	83 ec 2c             	sub    esp,0x2c
c002662b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002662f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026633:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026637:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002663b:	85 db                	test   ebx,ebx
c002663d:	0f 88 85 00 00 00    	js     c00266c8 <__moddi3+0xa4>
c0026643:	89 de                	mov    esi,ebx
c0026645:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002664d:	89 d7                	mov    edi,edx
c002664f:	85 d2                	test   edx,edx
c0026651:	79 09                	jns    c002665c <__moddi3+0x38>
c0026653:	f7 d8                	neg    eax
c0026655:	83 d2 00             	adc    edx,0x0
c0026658:	f7 da                	neg    edx
c002665a:	89 d7                	mov    edi,edx
c002665c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026660:	89 cd                	mov    ebp,ecx
c0026662:	85 ff                	test   edi,edi
c0026664:	75 52                	jne    c00266b8 <__moddi3+0x94>
c0026666:	89 c3                	mov    ebx,eax
c0026668:	39 f0                	cmp    eax,esi
c002666a:	76 24                	jbe    c0026690 <__moddi3+0x6c>
c002666c:	89 c8                	mov    eax,ecx
c002666e:	89 f2                	mov    edx,esi
c0026670:	f7 f3                	div    ebx
c0026672:	89 d6                	mov    esi,edx
c0026674:	89 f0                	mov    eax,esi
c0026676:	31 d2                	xor    edx,edx
c0026678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002667c:	85 c9                	test   ecx,ecx
c002667e:	74 07                	je     c0026687 <__moddi3+0x63>
c0026680:	f7 d8                	neg    eax
c0026682:	83 d2 00             	adc    edx,0x0
c0026685:	f7 da                	neg    edx
c0026687:	83 c4 2c             	add    esp,0x2c
c002668a:	5b                   	pop    ebx
c002668b:	5e                   	pop    esi
c002668c:	5f                   	pop    edi
c002668d:	5d                   	pop    ebp
c002668e:	c3                   	ret    
c002668f:	90                   	nop
c0026690:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026694:	85 db                	test   ebx,ebx
c0026696:	75 0d                	jne    c00266a5 <__moddi3+0x81>
c0026698:	b8 01 00 00 00       	mov    eax,0x1
c002669d:	31 d2                	xor    edx,edx
c002669f:	f7 f7                	div    edi
c00266a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266a5:	89 f0                	mov    eax,esi
c00266a7:	31 d2                	xor    edx,edx
c00266a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266ad:	f7 f7                	div    edi
c00266af:	89 e8                	mov    eax,ebp
c00266b1:	f7 f7                	div    edi
c00266b3:	89 d6                	mov    esi,edx
c00266b5:	eb bd                	jmp    c0026674 <__moddi3+0x50>
c00266b7:	90                   	nop
c00266b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00266bc:	39 f7                	cmp    edi,esi
c00266be:	76 20                	jbe    c00266e0 <__moddi3+0xbc>
c00266c0:	89 c8                	mov    eax,ecx
c00266c2:	89 f2                	mov    edx,esi
c00266c4:	eb b2                	jmp    c0026678 <__moddi3+0x54>
c00266c6:	66 90                	xchg   ax,ax
c00266c8:	f7 d9                	neg    ecx
c00266ca:	83 d3 00             	adc    ebx,0x0
c00266cd:	f7 db                	neg    ebx
c00266cf:	89 de                	mov    esi,ebx
c00266d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00266d9:	e9 6f ff ff ff       	jmp    c002664d <__moddi3+0x29>
c00266de:	66 90                	xchg   ax,ax
c00266e0:	0f bd c7             	bsr    eax,edi
c00266e3:	83 f0 1f             	xor    eax,0x1f
c00266e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00266ea:	75 24                	jne    c0026710 <__moddi3+0xec>
c00266ec:	39 f7                	cmp    edi,esi
c00266ee:	72 06                	jb     c00266f6 <__moddi3+0xd2>
c00266f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00266f4:	77 0c                	ja     c0026702 <__moddi3+0xde>
c00266f6:	89 e9                	mov    ecx,ebp
c00266f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00266fc:	19 fe                	sbb    esi,edi
c00266fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026702:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026706:	89 f2                	mov    edx,esi
c0026708:	e9 6b ff ff ff       	jmp    c0026678 <__moddi3+0x54>
c002670d:	8d 76 00             	lea    esi,[esi+0x0]
c0026710:	b8 20 00 00 00       	mov    eax,0x20
c0026715:	89 c2                	mov    edx,eax
c0026717:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002671b:	29 da                	sub    edx,ebx
c002671d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026721:	88 d9                	mov    cl,bl
c0026723:	d3 e7                	shl    edi,cl
c0026725:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026729:	88 d1                	mov    cl,dl
c002672b:	d3 e8                	shr    eax,cl
c002672d:	09 c7                	or     edi,eax
c002672f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026733:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026737:	89 d8                	mov    eax,ebx
c0026739:	88 d9                	mov    cl,bl
c002673b:	d3 e7                	shl    edi,cl
c002673d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026741:	89 f3                	mov    ebx,esi
c0026743:	88 d1                	mov    cl,dl
c0026745:	d3 eb                	shr    ebx,cl
c0026747:	89 c7                	mov    edi,eax
c0026749:	88 c1                	mov    cl,al
c002674b:	d3 e6                	shl    esi,cl
c002674d:	89 e8                	mov    eax,ebp
c002674f:	88 d1                	mov    cl,dl
c0026751:	d3 e8                	shr    eax,cl
c0026753:	09 f0                	or     eax,esi
c0026755:	89 f9                	mov    ecx,edi
c0026757:	d3 e5                	shl    ebp,cl
c0026759:	89 da                	mov    edx,ebx
c002675b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002675f:	89 d3                	mov    ebx,edx
c0026761:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026765:	89 c6                	mov    esi,eax
c0026767:	89 d1                	mov    ecx,edx
c0026769:	39 d3                	cmp    ebx,edx
c002676b:	72 27                	jb     c0026794 <__moddi3+0x170>
c002676d:	74 21                	je     c0026790 <__moddi3+0x16c>
c002676f:	29 f5                	sub    ebp,esi
c0026771:	19 cb                	sbb    ebx,ecx
c0026773:	89 de                	mov    esi,ebx
c0026775:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026779:	d3 e6                	shl    esi,cl
c002677b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002677f:	89 f9                	mov    ecx,edi
c0026781:	d3 ed                	shr    ebp,cl
c0026783:	09 ee                	or     esi,ebp
c0026785:	89 f0                	mov    eax,esi
c0026787:	d3 eb                	shr    ebx,cl
c0026789:	89 da                	mov    edx,ebx
c002678b:	e9 e8 fe ff ff       	jmp    c0026678 <__moddi3+0x54>
c0026790:	39 c5                	cmp    ebp,eax
c0026792:	73 db                	jae    c002676f <__moddi3+0x14b>
c0026794:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026798:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002679c:	89 d1                	mov    ecx,edx
c002679e:	89 c6                	mov    esi,eax
c00267a0:	eb cd                	jmp    c002676f <__moddi3+0x14b>
c00267a2:	66 90                	xchg   ax,ax

c00267a4 <__udivdi3>:
c00267a4:	55                   	push   ebp
c00267a5:	57                   	push   edi
c00267a6:	56                   	push   esi
c00267a7:	53                   	push   ebx
c00267a8:	83 ec 1c             	sub    esp,0x1c
c00267ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00267af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00267b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267bb:	85 d2                	test   edx,edx
c00267bd:	75 41                	jne    c0026800 <__udivdi3+0x5c>
c00267bf:	39 f7                	cmp    edi,esi
c00267c1:	76 15                	jbe    c00267d8 <__udivdi3+0x34>
c00267c3:	89 e8                	mov    eax,ebp
c00267c5:	89 f2                	mov    edx,esi
c00267c7:	f7 f7                	div    edi
c00267c9:	31 db                	xor    ebx,ebx
c00267cb:	89 da                	mov    edx,ebx
c00267cd:	83 c4 1c             	add    esp,0x1c
c00267d0:	5b                   	pop    ebx
c00267d1:	5e                   	pop    esi
c00267d2:	5f                   	pop    edi
c00267d3:	5d                   	pop    ebp
c00267d4:	c3                   	ret    
c00267d5:	8d 76 00             	lea    esi,[esi+0x0]
c00267d8:	89 f9                	mov    ecx,edi
c00267da:	85 ff                	test   edi,edi
c00267dc:	75 0b                	jne    c00267e9 <__udivdi3+0x45>
c00267de:	b8 01 00 00 00       	mov    eax,0x1
c00267e3:	31 d2                	xor    edx,edx
c00267e5:	f7 f7                	div    edi
c00267e7:	89 c1                	mov    ecx,eax
c00267e9:	31 d2                	xor    edx,edx
c00267eb:	89 f0                	mov    eax,esi
c00267ed:	f7 f1                	div    ecx
c00267ef:	89 c3                	mov    ebx,eax
c00267f1:	89 e8                	mov    eax,ebp
c00267f3:	f7 f1                	div    ecx
c00267f5:	89 da                	mov    edx,ebx
c00267f7:	83 c4 1c             	add    esp,0x1c
c00267fa:	5b                   	pop    ebx
c00267fb:	5e                   	pop    esi
c00267fc:	5f                   	pop    edi
c00267fd:	5d                   	pop    ebp
c00267fe:	c3                   	ret    
c00267ff:	90                   	nop
c0026800:	39 f2                	cmp    edx,esi
c0026802:	77 1c                	ja     c0026820 <__udivdi3+0x7c>
c0026804:	0f bd da             	bsr    ebx,edx
c0026807:	83 f3 1f             	xor    ebx,0x1f
c002680a:	75 24                	jne    c0026830 <__udivdi3+0x8c>
c002680c:	39 f2                	cmp    edx,esi
c002680e:	72 08                	jb     c0026818 <__udivdi3+0x74>
c0026810:	39 ef                	cmp    edi,ebp
c0026812:	0f 87 84 00 00 00    	ja     c002689c <__udivdi3+0xf8>
c0026818:	b8 01 00 00 00       	mov    eax,0x1
c002681d:	eb ac                	jmp    c00267cb <__udivdi3+0x27>
c002681f:	90                   	nop
c0026820:	31 db                	xor    ebx,ebx
c0026822:	31 c0                	xor    eax,eax
c0026824:	89 da                	mov    edx,ebx
c0026826:	83 c4 1c             	add    esp,0x1c
c0026829:	5b                   	pop    ebx
c002682a:	5e                   	pop    esi
c002682b:	5f                   	pop    edi
c002682c:	5d                   	pop    ebp
c002682d:	c3                   	ret    
c002682e:	66 90                	xchg   ax,ax
c0026830:	b8 20 00 00 00       	mov    eax,0x20
c0026835:	29 d8                	sub    eax,ebx
c0026837:	88 d9                	mov    cl,bl
c0026839:	d3 e2                	shl    edx,cl
c002683b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002683f:	89 fa                	mov    edx,edi
c0026841:	88 c1                	mov    cl,al
c0026843:	d3 ea                	shr    edx,cl
c0026845:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026849:	09 d1                	or     ecx,edx
c002684b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002684f:	88 d9                	mov    cl,bl
c0026851:	d3 e7                	shl    edi,cl
c0026853:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026857:	89 f7                	mov    edi,esi
c0026859:	88 c1                	mov    cl,al
c002685b:	d3 ef                	shr    edi,cl
c002685d:	88 d9                	mov    cl,bl
c002685f:	d3 e6                	shl    esi,cl
c0026861:	89 ea                	mov    edx,ebp
c0026863:	88 c1                	mov    cl,al
c0026865:	d3 ea                	shr    edx,cl
c0026867:	09 d6                	or     esi,edx
c0026869:	89 f0                	mov    eax,esi
c002686b:	89 fa                	mov    edx,edi
c002686d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026871:	89 d7                	mov    edi,edx
c0026873:	89 c6                	mov    esi,eax
c0026875:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026879:	39 d7                	cmp    edi,edx
c002687b:	72 13                	jb     c0026890 <__udivdi3+0xec>
c002687d:	74 09                	je     c0026888 <__udivdi3+0xe4>
c002687f:	89 f0                	mov    eax,esi
c0026881:	31 db                	xor    ebx,ebx
c0026883:	e9 43 ff ff ff       	jmp    c00267cb <__udivdi3+0x27>
c0026888:	88 d9                	mov    cl,bl
c002688a:	d3 e5                	shl    ebp,cl
c002688c:	39 c5                	cmp    ebp,eax
c002688e:	73 ef                	jae    c002687f <__udivdi3+0xdb>
c0026890:	8d 46 ff             	lea    eax,[esi-0x1]
c0026893:	31 db                	xor    ebx,ebx
c0026895:	e9 31 ff ff ff       	jmp    c00267cb <__udivdi3+0x27>
c002689a:	66 90                	xchg   ax,ax
c002689c:	31 c0                	xor    eax,eax
c002689e:	e9 28 ff ff ff       	jmp    c00267cb <__udivdi3+0x27>
c00268a3:	90                   	nop

c00268a4 <__umoddi3>:
c00268a4:	55                   	push   ebp
c00268a5:	57                   	push   edi
c00268a6:	56                   	push   esi
c00268a7:	53                   	push   ebx
c00268a8:	83 ec 1c             	sub    esp,0x1c
c00268ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00268af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00268bb:	89 da                	mov    edx,ebx
c00268bd:	85 c0                	test   eax,eax
c00268bf:	75 37                	jne    c00268f8 <__umoddi3+0x54>
c00268c1:	39 df                	cmp    edi,ebx
c00268c3:	76 13                	jbe    c00268d8 <__umoddi3+0x34>
c00268c5:	89 f0                	mov    eax,esi
c00268c7:	f7 f7                	div    edi
c00268c9:	89 d0                	mov    eax,edx
c00268cb:	31 d2                	xor    edx,edx
c00268cd:	83 c4 1c             	add    esp,0x1c
c00268d0:	5b                   	pop    ebx
c00268d1:	5e                   	pop    esi
c00268d2:	5f                   	pop    edi
c00268d3:	5d                   	pop    ebp
c00268d4:	c3                   	ret    
c00268d5:	8d 76 00             	lea    esi,[esi+0x0]
c00268d8:	89 fd                	mov    ebp,edi
c00268da:	85 ff                	test   edi,edi
c00268dc:	75 0b                	jne    c00268e9 <__umoddi3+0x45>
c00268de:	b8 01 00 00 00       	mov    eax,0x1
c00268e3:	31 d2                	xor    edx,edx
c00268e5:	f7 f7                	div    edi
c00268e7:	89 c5                	mov    ebp,eax
c00268e9:	89 d8                	mov    eax,ebx
c00268eb:	31 d2                	xor    edx,edx
c00268ed:	f7 f5                	div    ebp
c00268ef:	89 f0                	mov    eax,esi
c00268f1:	f7 f5                	div    ebp
c00268f3:	89 d0                	mov    eax,edx
c00268f5:	eb d4                	jmp    c00268cb <__umoddi3+0x27>
c00268f7:	90                   	nop
c00268f8:	89 f1                	mov    ecx,esi
c00268fa:	39 d8                	cmp    eax,ebx
c00268fc:	76 0a                	jbe    c0026908 <__umoddi3+0x64>
c00268fe:	89 f0                	mov    eax,esi
c0026900:	83 c4 1c             	add    esp,0x1c
c0026903:	5b                   	pop    ebx
c0026904:	5e                   	pop    esi
c0026905:	5f                   	pop    edi
c0026906:	5d                   	pop    ebp
c0026907:	c3                   	ret    
c0026908:	0f bd e8             	bsr    ebp,eax
c002690b:	83 f5 1f             	xor    ebp,0x1f
c002690e:	75 1c                	jne    c002692c <__umoddi3+0x88>
c0026910:	39 d8                	cmp    eax,ebx
c0026912:	72 04                	jb     c0026918 <__umoddi3+0x74>
c0026914:	39 f7                	cmp    edi,esi
c0026916:	77 08                	ja     c0026920 <__umoddi3+0x7c>
c0026918:	89 da                	mov    edx,ebx
c002691a:	29 fe                	sub    esi,edi
c002691c:	19 c2                	sbb    edx,eax
c002691e:	89 f1                	mov    ecx,esi
c0026920:	89 c8                	mov    eax,ecx
c0026922:	83 c4 1c             	add    esp,0x1c
c0026925:	5b                   	pop    ebx
c0026926:	5e                   	pop    esi
c0026927:	5f                   	pop    edi
c0026928:	5d                   	pop    ebp
c0026929:	c3                   	ret    
c002692a:	66 90                	xchg   ax,ax
c002692c:	ba 20 00 00 00       	mov    edx,0x20
c0026931:	29 ea                	sub    edx,ebp
c0026933:	89 e9                	mov    ecx,ebp
c0026935:	d3 e0                	shl    eax,cl
c0026937:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002693b:	89 f8                	mov    eax,edi
c002693d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026941:	88 d1                	mov    cl,dl
c0026943:	d3 e8                	shr    eax,cl
c0026945:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026949:	09 c1                	or     ecx,eax
c002694b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002694f:	89 e9                	mov    ecx,ebp
c0026951:	d3 e7                	shl    edi,cl
c0026953:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026957:	89 d8                	mov    eax,ebx
c0026959:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002695d:	88 d1                	mov    cl,dl
c002695f:	d3 e8                	shr    eax,cl
c0026961:	89 c7                	mov    edi,eax
c0026963:	89 e9                	mov    ecx,ebp
c0026965:	d3 e3                	shl    ebx,cl
c0026967:	89 f0                	mov    eax,esi
c0026969:	88 d1                	mov    cl,dl
c002696b:	d3 e8                	shr    eax,cl
c002696d:	09 d8                	or     eax,ebx
c002696f:	89 e9                	mov    ecx,ebp
c0026971:	d3 e6                	shl    esi,cl
c0026973:	89 f3                	mov    ebx,esi
c0026975:	89 fa                	mov    edx,edi
c0026977:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002697b:	89 d1                	mov    ecx,edx
c002697d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026981:	89 c6                	mov    esi,eax
c0026983:	89 d7                	mov    edi,edx
c0026985:	39 d1                	cmp    ecx,edx
c0026987:	72 27                	jb     c00269b0 <__umoddi3+0x10c>
c0026989:	74 21                	je     c00269ac <__umoddi3+0x108>
c002698b:	89 ca                	mov    edx,ecx
c002698d:	29 f3                	sub    ebx,esi
c002698f:	19 fa                	sbb    edx,edi
c0026991:	89 d0                	mov    eax,edx
c0026993:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026997:	d3 e0                	shl    eax,cl
c0026999:	89 e9                	mov    ecx,ebp
c002699b:	d3 eb                	shr    ebx,cl
c002699d:	09 d8                	or     eax,ebx
c002699f:	d3 ea                	shr    edx,cl
c00269a1:	83 c4 1c             	add    esp,0x1c
c00269a4:	5b                   	pop    ebx
c00269a5:	5e                   	pop    esi
c00269a6:	5f                   	pop    edi
c00269a7:	5d                   	pop    ebp
c00269a8:	c3                   	ret    
c00269a9:	8d 76 00             	lea    esi,[esi+0x0]
c00269ac:	39 c3                	cmp    ebx,eax
c00269ae:	73 db                	jae    c002698b <__umoddi3+0xe7>
c00269b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00269b8:	89 d7                	mov    edi,edx
c00269ba:	89 c6                	mov    esi,eax
c00269bc:	eb cd                	jmp    c002698b <__umoddi3+0xe7>

c00269be <__addsf3>:
c00269be:	55                   	push   ebp
c00269bf:	89 e5                	mov    ebp,esp
c00269c1:	57                   	push   edi
c00269c2:	56                   	push   esi
c00269c3:	53                   	push   ebx
c00269c4:	83 ec 08             	sub    esp,0x8
c00269c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269ca:	89 fa                	mov    edx,edi
c00269cc:	89 f8                	mov    eax,edi
c00269ce:	c1 f8 17             	sar    eax,0x17
c00269d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00269d4:	c1 e2 08             	shl    edx,0x8
c00269d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00269dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00269e0:	89 de                	mov    esi,ebx
c00269e2:	c1 fe 17             	sar    esi,0x17
c00269e5:	c1 e3 08             	shl    ebx,0x8
c00269e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00269ee:	31 f0                	xor    eax,esi
c00269f0:	0f 88 3b 01 00 00    	js     c0026b31 <__addsf3+0x173>
c00269f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00269f9:	29 f1                	sub    ecx,esi
c00269fb:	85 c9                	test   ecx,ecx
c00269fd:	7e 54                	jle    c0026a53 <__addsf3+0x95>
c00269ff:	89 f0                	mov    eax,esi
c0026a01:	84 c0                	test   al,al
c0026a03:	75 10                	jne    c0026a15 <__addsf3+0x57>
c0026a05:	85 db                	test   ebx,ebx
c0026a07:	0f 84 aa 02 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026a0d:	49                   	dec    ecx
c0026a0e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a11:	74 38                	je     c0026a4b <__addsf3+0x8d>
c0026a13:	eb 13                	jmp    c0026a28 <__addsf3+0x6a>
c0026a15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a18:	f7 d0                	not    eax
c0026a1a:	84 c0                	test   al,al
c0026a1c:	0f 84 95 02 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026a22:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a28:	83 f9 1f             	cmp    ecx,0x1f
c0026a2b:	0f 8f 86 02 00 00    	jg     c0026cb7 <__addsf3+0x2f9>
c0026a31:	89 de                	mov    esi,ebx
c0026a33:	d3 ee                	shr    esi,cl
c0026a35:	b8 20 00 00 00       	mov    eax,0x20
c0026a3a:	29 c8                	sub    eax,ecx
c0026a3c:	89 c1                	mov    ecx,eax
c0026a3e:	d3 e3                	shl    ebx,cl
c0026a40:	31 c0                	xor    eax,eax
c0026a42:	85 db                	test   ebx,ebx
c0026a44:	0f 95 c0             	setne  al
c0026a47:	09 f0                	or     eax,esi
c0026a49:	01 d0                	add    eax,edx
c0026a4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a4e:	e9 b6 00 00 00       	jmp    c0026b09 <__addsf3+0x14b>
c0026a53:	74 5c                	je     c0026ab1 <__addsf3+0xf3>
c0026a55:	89 f1                	mov    ecx,esi
c0026a57:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026a5a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a5d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a61:	75 14                	jne    c0026a77 <__addsf3+0xb9>
c0026a63:	85 d2                	test   edx,edx
c0026a65:	0f 84 4c 02 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026a6b:	49                   	dec    ecx
c0026a6c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a6f:	0f 84 94 00 00 00    	je     c0026b09 <__addsf3+0x14b>
c0026a75:	eb 12                	jmp    c0026a89 <__addsf3+0xcb>
c0026a77:	89 f0                	mov    eax,esi
c0026a79:	f7 d0                	not    eax
c0026a7b:	84 c0                	test   al,al
c0026a7d:	0f 84 34 02 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026a83:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a89:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a8c:	83 f9 1f             	cmp    ecx,0x1f
c0026a8f:	0f 8f 22 02 00 00    	jg     c0026cb7 <__addsf3+0x2f9>
c0026a95:	89 d7                	mov    edi,edx
c0026a97:	d3 ef                	shr    edi,cl
c0026a99:	b8 20 00 00 00       	mov    eax,0x20
c0026a9e:	29 c8                	sub    eax,ecx
c0026aa0:	89 c1                	mov    ecx,eax
c0026aa2:	d3 e2                	shl    edx,cl
c0026aa4:	31 c0                	xor    eax,eax
c0026aa6:	85 d2                	test   edx,edx
c0026aa8:	0f 95 c0             	setne  al
c0026aab:	09 f8                	or     eax,edi
c0026aad:	01 d8                	add    eax,ebx
c0026aaf:	eb 58                	jmp    c0026b09 <__addsf3+0x14b>
c0026ab1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ab4:	8d 70 01             	lea    esi,[eax+0x1]
c0026ab7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026abd:	75 32                	jne    c0026af1 <__addsf3+0x133>
c0026abf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ac3:	75 1f                	jne    c0026ae4 <__addsf3+0x126>
c0026ac5:	85 d2                	test   edx,edx
c0026ac7:	0f 84 e0 01 00 00    	je     c0026cad <__addsf3+0x2ef>
c0026acd:	85 db                	test   ebx,ebx
c0026acf:	0f 84 e2 01 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026ad5:	89 d0                	mov    eax,edx
c0026ad7:	01 d8                	add    eax,ebx
c0026ad9:	0f 89 a9 01 00 00    	jns    c0026c88 <__addsf3+0x2ca>
c0026adf:	e9 9d 01 00 00       	jmp    c0026c81 <__addsf3+0x2c3>
c0026ae4:	85 d2                	test   edx,edx
c0026ae6:	0f 85 cb 01 00 00    	jne    c0026cb7 <__addsf3+0x2f9>
c0026aec:	e9 bc 01 00 00       	jmp    c0026cad <__addsf3+0x2ef>
c0026af1:	31 c0                	xor    eax,eax
c0026af3:	89 f1                	mov    ecx,esi
c0026af5:	f7 d1                	not    ecx
c0026af7:	84 c9                	test   cl,cl
c0026af9:	0f 84 90 01 00 00    	je     c0026c8f <__addsf3+0x2d1>
c0026aff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b02:	d1 e8                	shr    eax,1
c0026b04:	e9 86 01 00 00       	jmp    c0026c8f <__addsf3+0x2d1>
c0026b09:	85 c0                	test   eax,eax
c0026b0b:	0f 89 7e 01 00 00    	jns    c0026c8f <__addsf3+0x2d1>
c0026b11:	46                   	inc    esi
c0026b12:	89 f2                	mov    edx,esi
c0026b14:	f7 d2                	not    edx
c0026b16:	84 d2                	test   dl,dl
c0026b18:	0f 84 6f 01 00 00    	je     c0026c8d <__addsf3+0x2cf>
c0026b1e:	89 c2                	mov    edx,eax
c0026b20:	83 e2 01             	and    edx,0x1
c0026b23:	d1 e8                	shr    eax,1
c0026b25:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026b2a:	09 d0                	or     eax,edx
c0026b2c:	e9 5e 01 00 00       	jmp    c0026c8f <__addsf3+0x2d1>
c0026b31:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026b35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b38:	89 f0                	mov    eax,esi
c0026b3a:	0f b6 c0             	movzx  eax,al
c0026b3d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b40:	29 c1                	sub    ecx,eax
c0026b42:	85 c9                	test   ecx,ecx
c0026b44:	7e 55                	jle    c0026b9b <__addsf3+0x1dd>
c0026b46:	85 c0                	test   eax,eax
c0026b48:	75 11                	jne    c0026b5b <__addsf3+0x19d>
c0026b4a:	85 db                	test   ebx,ebx
c0026b4c:	0f 84 65 01 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026b52:	49                   	dec    ecx
c0026b53:	75 19                	jne    c0026b6e <__addsf3+0x1b0>
c0026b55:	89 d0                	mov    eax,edx
c0026b57:	29 d8                	sub    eax,ebx
c0026b59:	eb 38                	jmp    c0026b93 <__addsf3+0x1d5>
c0026b5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b5e:	f7 d0                	not    eax
c0026b60:	84 c0                	test   al,al
c0026b62:	0f 84 4f 01 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026b68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b6e:	83 f9 1f             	cmp    ecx,0x1f
c0026b71:	0f 8f 40 01 00 00    	jg     c0026cb7 <__addsf3+0x2f9>
c0026b77:	89 de                	mov    esi,ebx
c0026b79:	d3 ee                	shr    esi,cl
c0026b7b:	b8 20 00 00 00       	mov    eax,0x20
c0026b80:	29 c8                	sub    eax,ecx
c0026b82:	89 c1                	mov    ecx,eax
c0026b84:	d3 e3                	shl    ebx,cl
c0026b86:	31 c0                	xor    eax,eax
c0026b88:	85 db                	test   ebx,ebx
c0026b8a:	0f 95 c0             	setne  al
c0026b8d:	09 f0                	or     eax,esi
c0026b8f:	29 c2                	sub    edx,eax
c0026b91:	89 d0                	mov    eax,edx
c0026b93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b96:	e9 af 00 00 00       	jmp    c0026c4a <__addsf3+0x28c>
c0026b9b:	74 5c                	je     c0026bf9 <__addsf3+0x23b>
c0026b9d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026ba0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ba3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ba7:	75 14                	jne    c0026bbd <__addsf3+0x1ff>
c0026ba9:	85 d2                	test   edx,edx
c0026bab:	0f 84 06 01 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026bb1:	48                   	dec    eax
c0026bb2:	75 1b                	jne    c0026bcf <__addsf3+0x211>
c0026bb4:	89 d8                	mov    eax,ebx
c0026bb6:	29 d0                	sub    eax,edx
c0026bb8:	e9 8d 00 00 00       	jmp    c0026c4a <__addsf3+0x28c>
c0026bbd:	89 f1                	mov    ecx,esi
c0026bbf:	f7 d1                	not    ecx
c0026bc1:	84 c9                	test   cl,cl
c0026bc3:	0f 84 ee 00 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026bc9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bcf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bd2:	83 f8 1f             	cmp    eax,0x1f
c0026bd5:	0f 8f dc 00 00 00    	jg     c0026cb7 <__addsf3+0x2f9>
c0026bdb:	89 d7                	mov    edi,edx
c0026bdd:	88 c1                	mov    cl,al
c0026bdf:	d3 ef                	shr    edi,cl
c0026be1:	b9 20 00 00 00       	mov    ecx,0x20
c0026be6:	29 c1                	sub    ecx,eax
c0026be8:	d3 e2                	shl    edx,cl
c0026bea:	31 c0                	xor    eax,eax
c0026bec:	85 d2                	test   edx,edx
c0026bee:	0f 95 c0             	setne  al
c0026bf1:	09 f8                	or     eax,edi
c0026bf3:	29 c3                	sub    ebx,eax
c0026bf5:	89 d8                	mov    eax,ebx
c0026bf7:	eb 51                	jmp    c0026c4a <__addsf3+0x28c>
c0026bf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bfc:	40                   	inc    eax
c0026bfd:	a8 fe                	test   al,0xfe
c0026bff:	75 3d                	jne    c0026c3e <__addsf3+0x280>
c0026c01:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c05:	0f 85 a7 00 00 00    	jne    c0026cb2 <__addsf3+0x2f4>
c0026c0b:	85 d2                	test   edx,edx
c0026c0d:	75 12                	jne    c0026c21 <__addsf3+0x263>
c0026c0f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c12:	85 db                	test   ebx,ebx
c0026c14:	0f 85 9d 00 00 00    	jne    c0026cb7 <__addsf3+0x2f9>
c0026c1a:	31 ff                	xor    edi,edi
c0026c1c:	e9 96 00 00 00       	jmp    c0026cb7 <__addsf3+0x2f9>
c0026c21:	85 db                	test   ebx,ebx
c0026c23:	0f 84 8e 00 00 00    	je     c0026cb7 <__addsf3+0x2f9>
c0026c29:	89 d0                	mov    eax,edx
c0026c2b:	29 d8                	sub    eax,ebx
c0026c2d:	79 06                	jns    c0026c35 <__addsf3+0x277>
c0026c2f:	89 d8                	mov    eax,ebx
c0026c31:	29 d0                	sub    eax,edx
c0026c33:	eb 5a                	jmp    c0026c8f <__addsf3+0x2d1>
c0026c35:	bf 00 00 00 00       	mov    edi,0x0
c0026c3a:	74 7b                	je     c0026cb7 <__addsf3+0x2f9>
c0026c3c:	eb 4a                	jmp    c0026c88 <__addsf3+0x2ca>
c0026c3e:	89 d0                	mov    eax,edx
c0026c40:	29 d8                	sub    eax,ebx
c0026c42:	79 12                	jns    c0026c56 <__addsf3+0x298>
c0026c44:	89 d8                	mov    eax,ebx
c0026c46:	29 d0                	sub    eax,edx
c0026c48:	eb 09                	jmp    c0026c53 <__addsf3+0x295>
c0026c4a:	85 c0                	test   eax,eax
c0026c4c:	79 41                	jns    c0026c8f <__addsf3+0x2d1>
c0026c4e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c53:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026c56:	31 f6                	xor    esi,esi
c0026c58:	85 c0                	test   eax,eax
c0026c5a:	74 33                	je     c0026c8f <__addsf3+0x2d1>
c0026c5c:	0f bd c8             	bsr    ecx,eax
c0026c5f:	83 f1 1f             	xor    ecx,0x1f
c0026c62:	d3 e0                	shl    eax,cl
c0026c64:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026c68:	39 ca                	cmp    edx,ecx
c0026c6a:	7f 10                	jg     c0026c7c <__addsf3+0x2be>
c0026c6c:	29 d1                	sub    ecx,edx
c0026c6e:	41                   	inc    ecx
c0026c6f:	d3 e8                	shr    eax,cl
c0026c71:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c74:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026c7a:	eb 13                	jmp    c0026c8f <__addsf3+0x2d1>
c0026c7c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c7f:	29 ce                	sub    esi,ecx
c0026c81:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c86:	eb 07                	jmp    c0026c8f <__addsf3+0x2d1>
c0026c88:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c8b:	eb 02                	jmp    c0026c8f <__addsf3+0x2d1>
c0026c8d:	31 c0                	xor    eax,eax
c0026c8f:	89 c2                	mov    edx,eax
c0026c91:	c1 ea 08             	shr    edx,0x8
c0026c94:	a8 7f                	test   al,0x7f
c0026c96:	0f 95 c1             	setne  cl
c0026c99:	09 d1                	or     ecx,edx
c0026c9b:	83 e1 01             	and    ecx,0x1
c0026c9e:	c1 e8 07             	shr    eax,0x7
c0026ca1:	21 c8                	and    eax,ecx
c0026ca3:	c1 e6 17             	shl    esi,0x17
c0026ca6:	09 d6                	or     esi,edx
c0026ca8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026cab:	eb 0a                	jmp    c0026cb7 <__addsf3+0x2f9>
c0026cad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cb0:	eb 05                	jmp    c0026cb7 <__addsf3+0x2f9>
c0026cb2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026cb7:	89 f8                	mov    eax,edi
c0026cb9:	5a                   	pop    edx
c0026cba:	59                   	pop    ecx
c0026cbb:	5b                   	pop    ebx
c0026cbc:	5e                   	pop    esi
c0026cbd:	5f                   	pop    edi
c0026cbe:	5d                   	pop    ebp
c0026cbf:	c3                   	ret    

c0026cc0 <__subsf3>:
c0026cc0:	55                   	push   ebp
c0026cc1:	89 e5                	mov    ebp,esp
c0026cc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cc6:	05 00 00 00 80       	add    eax,0x80000000
c0026ccb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026cce:	5d                   	pop    ebp
c0026ccf:	e9 ea fc ff ff       	jmp    c00269be <__addsf3>

c0026cd4 <__negsf2>:
c0026cd4:	55                   	push   ebp
c0026cd5:	89 e5                	mov    ebp,esp
c0026cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cda:	05 00 00 00 80       	add    eax,0x80000000
c0026cdf:	5d                   	pop    ebp
c0026ce0:	c3                   	ret    

c0026ce1 <__mulsf3>:
c0026ce1:	55                   	push   ebp
c0026ce2:	89 e5                	mov    ebp,esp
c0026ce4:	57                   	push   edi
c0026ce5:	56                   	push   esi
c0026ce6:	53                   	push   ebx
c0026ce7:	83 ec 1c             	sub    esp,0x1c
c0026cea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026ced:	89 f0                	mov    eax,esi
c0026cef:	89 f1                	mov    ecx,esi
c0026cf1:	c1 f9 17             	sar    ecx,0x17
c0026cf4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026cf7:	c1 e0 08             	shl    eax,0x8
c0026cfa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026cff:	89 c1                	mov    ecx,eax
c0026d01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d04:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d07:	89 c7                	mov    edi,eax
c0026d09:	c1 ff 17             	sar    edi,0x17
c0026d0c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d10:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d13:	89 f8                	mov    eax,edi
c0026d15:	0f b6 c0             	movzx  eax,al
c0026d18:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026d1b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026d1f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d22:	42                   	inc    edx
c0026d23:	80 e2 fe             	and    dl,0xfe
c0026d26:	75 7b                	jne    c0026da3 <__mulsf3+0xc2>
c0026d28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d2c:	74 54                	je     c0026d82 <__mulsf3+0xa1>
c0026d2e:	85 c9                	test   ecx,ecx
c0026d30:	0f 85 64 01 00 00    	jne    c0026e9a <__mulsf3+0x1b9>
c0026d36:	8d 57 01             	lea    edx,[edi+0x1]
c0026d39:	80 e2 fe             	and    dl,0xfe
c0026d3c:	75 1f                	jne    c0026d5d <__mulsf3+0x7c>
c0026d3e:	85 c0                	test   eax,eax
c0026d40:	b8 00 00 00 00       	mov    eax,0x0
c0026d45:	74 29                	je     c0026d70 <__mulsf3+0x8f>
c0026d47:	53                   	push   ebx
c0026d48:	53                   	push   ebx
c0026d49:	50                   	push   eax
c0026d4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d4d:	e8 96 05 00 00       	call   c00272e8 <__nesf2>
c0026d52:	83 c4 10             	add    esp,0x10
c0026d55:	85 c0                	test   eax,eax
c0026d57:	0f 85 3a 01 00 00    	jne    c0026e97 <__mulsf3+0x1b6>
c0026d5d:	85 ff                	test   edi,edi
c0026d5f:	0f 89 35 01 00 00    	jns    c0026e9a <__mulsf3+0x1b9>
c0026d65:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026d6b:	e9 2a 01 00 00       	jmp    c0026e9a <__mulsf3+0x1b9>
c0026d70:	51                   	push   ecx
c0026d71:	51                   	push   ecx
c0026d72:	50                   	push   eax
c0026d73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d76:	e8 6d 05 00 00       	call   c00272e8 <__nesf2>
c0026d7b:	83 c4 10             	add    esp,0x10
c0026d7e:	85 c0                	test   eax,eax
c0026d80:	eb 15                	jmp    c0026d97 <__mulsf3+0xb6>
c0026d82:	85 c9                	test   ecx,ecx
c0026d84:	74 0b                	je     c0026d91 <__mulsf3+0xb0>
c0026d86:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026d89:	01 c9                	add    ecx,ecx
c0026d8b:	78 16                	js     c0026da3 <__mulsf3+0xc2>
c0026d8d:	89 d3                	mov    ebx,edx
c0026d8f:	eb f5                	jmp    c0026d86 <__mulsf3+0xa5>
c0026d91:	89 f8                	mov    eax,edi
c0026d93:	f7 d0                	not    eax
c0026d95:	84 c0                	test   al,al
c0026d97:	75 c4                	jne    c0026d5d <__mulsf3+0x7c>
c0026d99:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026d9e:	e9 f7 00 00 00       	jmp    c0026e9a <__mulsf3+0x1b9>
c0026da3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026da6:	c1 e6 08             	shl    esi,0x8
c0026da9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026daf:	8d 57 01             	lea    edx,[edi+0x1]
c0026db2:	80 e2 fe             	and    dl,0xfe
c0026db5:	75 63                	jne    c0026e1a <__mulsf3+0x139>
c0026db7:	85 c0                	test   eax,eax
c0026db9:	74 2f                	je     c0026dea <__mulsf3+0x109>
c0026dbb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026dbf:	0f 89 d2 00 00 00    	jns    c0026e97 <__mulsf3+0x1b6>
c0026dc5:	52                   	push   edx
c0026dc6:	52                   	push   edx
c0026dc7:	6a 00                	push   0x0
c0026dc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dcc:	e8 dc 04 00 00       	call   c00272ad <__eqsf2>
c0026dd1:	83 c4 10             	add    esp,0x10
c0026dd4:	85 c0                	test   eax,eax
c0026dd6:	0f 85 bb 00 00 00    	jne    c0026e97 <__mulsf3+0x1b6>
c0026ddc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ddf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026de5:	e9 b0 00 00 00       	jmp    c0026e9a <__mulsf3+0x1b9>
c0026dea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ded:	50                   	push   eax
c0026dee:	50                   	push   eax
c0026def:	6a 00                	push   0x0
c0026df1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026df4:	e8 b4 04 00 00       	call   c00272ad <__eqsf2>
c0026df9:	83 c4 10             	add    esp,0x10
c0026dfc:	85 c0                	test   eax,eax
c0026dfe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e01:	75 0c                	jne    c0026e0f <__mulsf3+0x12e>
c0026e03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e07:	0f 89 8a 00 00 00    	jns    c0026e97 <__mulsf3+0x1b6>
c0026e0d:	eb cd                	jmp    c0026ddc <__mulsf3+0xfb>
c0026e0f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026e12:	01 f6                	add    esi,esi
c0026e14:	78 04                	js     c0026e1a <__mulsf3+0x139>
c0026e16:	89 c3                	mov    ebx,eax
c0026e18:	eb f5                	jmp    c0026e0f <__mulsf3+0x12e>
c0026e1a:	89 c8                	mov    eax,ecx
c0026e1c:	0d 00 00 00 80       	or     eax,0x80000000
c0026e21:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026e27:	f7 e6                	mul    esi
c0026e29:	85 c0                	test   eax,eax
c0026e2b:	0f 95 c0             	setne  al
c0026e2e:	0f b6 c0             	movzx  eax,al
c0026e31:	09 c2                	or     edx,eax
c0026e33:	78 03                	js     c0026e38 <__mulsf3+0x157>
c0026e35:	01 d2                	add    edx,edx
c0026e37:	4b                   	dec    ebx
c0026e38:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026e3e:	7f 22                	jg     c0026e62 <__mulsf3+0x181>
c0026e40:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e46:	85 db                	test   ebx,ebx
c0026e48:	7f 23                	jg     c0026e6d <__mulsf3+0x18c>
c0026e4a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026e4d:	7c 1a                	jl     c0026e69 <__mulsf3+0x188>
c0026e4f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e55:	b9 01 00 00 00       	mov    ecx,0x1
c0026e5a:	29 d9                	sub    ecx,ebx
c0026e5c:	d3 ea                	shr    edx,cl
c0026e5e:	31 db                	xor    ebx,ebx
c0026e60:	eb 0b                	jmp    c0026e6d <__mulsf3+0x18c>
c0026e62:	bb ff 00 00 00       	mov    ebx,0xff
c0026e67:	eb 02                	jmp    c0026e6b <__mulsf3+0x18a>
c0026e69:	31 db                	xor    ebx,ebx
c0026e6b:	31 d2                	xor    edx,edx
c0026e6d:	89 d0                	mov    eax,edx
c0026e6f:	c1 e8 08             	shr    eax,0x8
c0026e72:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e75:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e7b:	09 fb                	or     ebx,edi
c0026e7d:	c1 e3 17             	shl    ebx,0x17
c0026e80:	09 c3                	or     ebx,eax
c0026e82:	f6 c2 7f             	test   dl,0x7f
c0026e85:	0f 95 c1             	setne  cl
c0026e88:	09 c8                	or     eax,ecx
c0026e8a:	83 e0 01             	and    eax,0x1
c0026e8d:	c1 ea 07             	shr    edx,0x7
c0026e90:	21 c2                	and    edx,eax
c0026e92:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026e95:	eb 03                	jmp    c0026e9a <__mulsf3+0x1b9>
c0026e97:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026e9a:	89 f0                	mov    eax,esi
c0026e9c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e9f:	5b                   	pop    ebx
c0026ea0:	5e                   	pop    esi
c0026ea1:	5f                   	pop    edi
c0026ea2:	5d                   	pop    ebp
c0026ea3:	c3                   	ret    

c0026ea4 <__divsf3>:
c0026ea4:	55                   	push   ebp
c0026ea5:	89 e5                	mov    ebp,esp
c0026ea7:	57                   	push   edi
c0026ea8:	56                   	push   esi
c0026ea9:	53                   	push   ebx
c0026eaa:	83 ec 1c             	sub    esp,0x1c
c0026ead:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026eb0:	89 d8                	mov    eax,ebx
c0026eb2:	89 d9                	mov    ecx,ebx
c0026eb4:	c1 f9 17             	sar    ecx,0x17
c0026eb7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eba:	c1 e0 08             	shl    eax,0x8
c0026ebd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ec2:	89 c1                	mov    ecx,eax
c0026ec4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ec7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026eca:	89 c7                	mov    edi,eax
c0026ecc:	c1 ff 17             	sar    edi,0x17
c0026ecf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ed3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026ed6:	89 f8                	mov    eax,edi
c0026ed8:	0f b6 c0             	movzx  eax,al
c0026edb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026ede:	29 c6                	sub    esi,eax
c0026ee0:	83 c6 7f             	add    esi,0x7f
c0026ee3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ee6:	42                   	inc    edx
c0026ee7:	80 e2 fe             	and    dl,0xfe
c0026eea:	0f 85 9c 00 00 00    	jne    c0026f8c <__divsf3+0xe8>
c0026ef0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ef4:	74 33                	je     c0026f29 <__divsf3+0x85>
c0026ef6:	85 c9                	test   ecx,ecx
c0026ef8:	0f 85 c7 01 00 00    	jne    c00270c5 <__divsf3+0x221>
c0026efe:	8d 57 01             	lea    edx,[edi+0x1]
c0026f01:	80 e2 fe             	and    dl,0xfe
c0026f04:	75 2f                	jne    c0026f35 <__divsf3+0x91>
c0026f06:	85 c0                	test   eax,eax
c0026f08:	74 2b                	je     c0026f35 <__divsf3+0x91>
c0026f0a:	51                   	push   ecx
c0026f0b:	51                   	push   ecx
c0026f0c:	6a 00                	push   0x0
c0026f0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f11:	e8 d2 03 00 00       	call   c00272e8 <__nesf2>
c0026f16:	83 c4 10             	add    esp,0x10
c0026f19:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f1c:	85 c0                	test   eax,eax
c0026f1e:	0f 85 a1 01 00 00    	jne    c00270c5 <__divsf3+0x221>
c0026f24:	e9 92 01 00 00       	jmp    c00270bb <__divsf3+0x217>
c0026f29:	85 c9                	test   ecx,ecx
c0026f2b:	75 1b                	jne    c0026f48 <__divsf3+0xa4>
c0026f2d:	8d 57 01             	lea    edx,[edi+0x1]
c0026f30:	80 e2 fe             	and    dl,0xfe
c0026f33:	74 1e                	je     c0026f53 <__divsf3+0xaf>
c0026f35:	85 ff                	test   edi,edi
c0026f37:	0f 89 88 01 00 00    	jns    c00270c5 <__divsf3+0x221>
c0026f3d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026f43:	e9 7d 01 00 00       	jmp    c00270c5 <__divsf3+0x221>
c0026f48:	8d 56 ff             	lea    edx,[esi-0x1]
c0026f4b:	01 c9                	add    ecx,ecx
c0026f4d:	78 3d                	js     c0026f8c <__divsf3+0xe8>
c0026f4f:	89 d6                	mov    esi,edx
c0026f51:	eb f5                	jmp    c0026f48 <__divsf3+0xa4>
c0026f53:	85 c0                	test   eax,eax
c0026f55:	b8 00 00 00 00       	mov    eax,0x0
c0026f5a:	74 18                	je     c0026f74 <__divsf3+0xd0>
c0026f5c:	52                   	push   edx
c0026f5d:	52                   	push   edx
c0026f5e:	50                   	push   eax
c0026f5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f62:	e8 81 03 00 00       	call   c00272e8 <__nesf2>
c0026f67:	83 c4 10             	add    esp,0x10
c0026f6a:	85 c0                	test   eax,eax
c0026f6c:	0f 85 50 01 00 00    	jne    c00270c2 <__divsf3+0x21e>
c0026f72:	eb c1                	jmp    c0026f35 <__divsf3+0x91>
c0026f74:	56                   	push   esi
c0026f75:	56                   	push   esi
c0026f76:	50                   	push   eax
c0026f77:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f7a:	e8 69 03 00 00       	call   c00272e8 <__nesf2>
c0026f7f:	83 c4 10             	add    esp,0x10
c0026f82:	85 c0                	test   eax,eax
c0026f84:	0f 84 31 01 00 00    	je     c00270bb <__divsf3+0x217>
c0026f8a:	eb a9                	jmp    c0026f35 <__divsf3+0x91>
c0026f8c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026f8f:	c1 e3 08             	shl    ebx,0x8
c0026f92:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026f98:	8d 57 01             	lea    edx,[edi+0x1]
c0026f9b:	80 e2 fe             	and    dl,0xfe
c0026f9e:	75 71                	jne    c0027011 <__divsf3+0x16d>
c0026fa0:	85 c0                	test   eax,eax
c0026fa2:	ba 00 00 00 00       	mov    edx,0x0
c0026fa7:	74 2f                	je     c0026fd8 <__divsf3+0x134>
c0026fa9:	51                   	push   ecx
c0026faa:	51                   	push   ecx
c0026fab:	52                   	push   edx
c0026fac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026faf:	e8 f9 02 00 00       	call   c00272ad <__eqsf2>
c0026fb4:	83 c4 10             	add    esp,0x10
c0026fb7:	85 c0                	test   eax,eax
c0026fb9:	0f 85 03 01 00 00    	jne    c00270c2 <__divsf3+0x21e>
c0026fbf:	31 d2                	xor    edx,edx
c0026fc1:	89 d3                	mov    ebx,edx
c0026fc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026fc6:	31 f8                	xor    eax,edi
c0026fc8:	0f 89 f7 00 00 00    	jns    c00270c5 <__divsf3+0x221>
c0026fce:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026fd3:	e9 ed 00 00 00       	jmp    c00270c5 <__divsf3+0x221>
c0026fd8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026fdb:	50                   	push   eax
c0026fdc:	50                   	push   eax
c0026fdd:	52                   	push   edx
c0026fde:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe1:	e8 c7 02 00 00       	call   c00272ad <__eqsf2>
c0026fe6:	83 c4 10             	add    esp,0x10
c0026fe9:	85 c0                	test   eax,eax
c0026feb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fee:	75 16                	jne    c0027006 <__divsf3+0x162>
c0026ff0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026ff3:	31 fb                	xor    ebx,edi
c0026ff5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026ffb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027001:	e9 bf 00 00 00       	jmp    c00270c5 <__divsf3+0x221>
c0027006:	8d 46 01             	lea    eax,[esi+0x1]
c0027009:	01 db                	add    ebx,ebx
c002700b:	78 04                	js     c0027011 <__divsf3+0x16d>
c002700d:	89 c6                	mov    esi,eax
c002700f:	eb f5                	jmp    c0027006 <__divsf3+0x162>
c0027011:	89 c8                	mov    eax,ecx
c0027013:	0d 00 00 00 80       	or     eax,0x80000000
c0027018:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002701e:	31 d2                	xor    edx,edx
c0027020:	39 d8                	cmp    eax,ebx
c0027022:	72 07                	jb     c002702b <__divsf3+0x187>
c0027024:	29 d8                	sub    eax,ebx
c0027026:	ba 01 00 00 00       	mov    edx,0x1
c002702b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027032:	01 d2                	add    edx,edx
c0027034:	89 c1                	mov    ecx,eax
c0027036:	01 c0                	add    eax,eax
c0027038:	85 c9                	test   ecx,ecx
c002703a:	78 04                	js     c0027040 <__divsf3+0x19c>
c002703c:	39 c3                	cmp    ebx,eax
c002703e:	77 05                	ja     c0027045 <__divsf3+0x1a1>
c0027040:	29 d8                	sub    eax,ebx
c0027042:	83 ca 01             	or     edx,0x1
c0027045:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027048:	75 e8                	jne    c0027032 <__divsf3+0x18e>
c002704a:	85 c0                	test   eax,eax
c002704c:	0f 95 c0             	setne  al
c002704f:	0f b6 c0             	movzx  eax,al
c0027052:	c1 e2 06             	shl    edx,0x6
c0027055:	09 c2                	or     edx,eax
c0027057:	78 03                	js     c002705c <__divsf3+0x1b8>
c0027059:	01 d2                	add    edx,edx
c002705b:	4e                   	dec    esi
c002705c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027062:	7f 22                	jg     c0027086 <__divsf3+0x1e2>
c0027064:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002706a:	85 f6                	test   esi,esi
c002706c:	7f 23                	jg     c0027091 <__divsf3+0x1ed>
c002706e:	83 fe e9             	cmp    esi,0xffffffe9
c0027071:	7c 1a                	jl     c002708d <__divsf3+0x1e9>
c0027073:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027079:	b9 01 00 00 00       	mov    ecx,0x1
c002707e:	29 f1                	sub    ecx,esi
c0027080:	d3 ea                	shr    edx,cl
c0027082:	31 f6                	xor    esi,esi
c0027084:	eb 0b                	jmp    c0027091 <__divsf3+0x1ed>
c0027086:	be ff 00 00 00       	mov    esi,0xff
c002708b:	eb 02                	jmp    c002708f <__divsf3+0x1eb>
c002708d:	31 f6                	xor    esi,esi
c002708f:	31 d2                	xor    edx,edx
c0027091:	89 d0                	mov    eax,edx
c0027093:	c1 e8 08             	shr    eax,0x8
c0027096:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027099:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002709f:	09 fe                	or     esi,edi
c00270a1:	c1 e6 17             	shl    esi,0x17
c00270a4:	09 c6                	or     esi,eax
c00270a6:	f6 c2 7f             	test   dl,0x7f
c00270a9:	0f 95 c1             	setne  cl
c00270ac:	09 c8                	or     eax,ecx
c00270ae:	83 e0 01             	and    eax,0x1
c00270b1:	c1 ea 07             	shr    edx,0x7
c00270b4:	21 c2                	and    edx,eax
c00270b6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00270b9:	eb 0a                	jmp    c00270c5 <__divsf3+0x221>
c00270bb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00270c0:	eb 03                	jmp    c00270c5 <__divsf3+0x221>
c00270c2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270c5:	89 d8                	mov    eax,ebx
c00270c7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270ca:	5b                   	pop    ebx
c00270cb:	5e                   	pop    esi
c00270cc:	5f                   	pop    edi
c00270cd:	5d                   	pop    ebp
c00270ce:	c3                   	ret    

c00270cf <__floatsisf>:
c00270cf:	55                   	push   ebp
c00270d0:	89 e5                	mov    ebp,esp
c00270d2:	53                   	push   ebx
c00270d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270d6:	85 d2                	test   edx,edx
c00270d8:	7e 2b                	jle    c0027105 <__floatsisf+0x36>
c00270da:	0f bd ca             	bsr    ecx,edx
c00270dd:	83 f1 1f             	xor    ecx,0x1f
c00270e0:	d3 e2                	shl    edx,cl
c00270e2:	89 d0                	mov    eax,edx
c00270e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270e9:	89 c3                	mov    ebx,eax
c00270eb:	c1 eb 08             	shr    ebx,0x8
c00270ee:	80 e2 7f             	and    dl,0x7f
c00270f1:	0f 95 c2             	setne  dl
c00270f4:	09 da                	or     edx,ebx
c00270f6:	83 e2 01             	and    edx,0x1
c00270f9:	c1 e8 07             	shr    eax,0x7
c00270fc:	21 c2                	and    edx,eax
c00270fe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027103:	eb 32                	jmp    c0027137 <__floatsisf+0x68>
c0027105:	b8 00 00 00 00       	mov    eax,0x0
c002710a:	74 34                	je     c0027140 <__floatsisf+0x71>
c002710c:	f7 da                	neg    edx
c002710e:	0f bd ca             	bsr    ecx,edx
c0027111:	83 f1 1f             	xor    ecx,0x1f
c0027114:	d3 e2                	shl    edx,cl
c0027116:	89 d0                	mov    eax,edx
c0027118:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002711d:	89 c3                	mov    ebx,eax
c002711f:	c1 eb 08             	shr    ebx,0x8
c0027122:	80 e2 7f             	and    dl,0x7f
c0027125:	0f 95 c2             	setne  dl
c0027128:	09 da                	or     edx,ebx
c002712a:	83 e2 01             	and    edx,0x1
c002712d:	c1 e8 07             	shr    eax,0x7
c0027130:	21 c2                	and    edx,eax
c0027132:	b8 9e 01 00 00       	mov    eax,0x19e
c0027137:	29 c8                	sub    eax,ecx
c0027139:	c1 e0 17             	shl    eax,0x17
c002713c:	09 d8                	or     eax,ebx
c002713e:	01 d0                	add    eax,edx
c0027140:	5b                   	pop    ebx
c0027141:	5d                   	pop    ebp
c0027142:	c3                   	ret    

c0027143 <__floatunsisf>:
c0027143:	55                   	push   ebp
c0027144:	89 e5                	mov    ebp,esp
c0027146:	53                   	push   ebx
c0027147:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002714a:	31 c0                	xor    eax,eax
c002714c:	85 d2                	test   edx,edx
c002714e:	74 32                	je     c0027182 <__floatunsisf+0x3f>
c0027150:	0f bd ca             	bsr    ecx,edx
c0027153:	83 f1 1f             	xor    ecx,0x1f
c0027156:	d3 e2                	shl    edx,cl
c0027158:	89 d0                	mov    eax,edx
c002715a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002715f:	89 c3                	mov    ebx,eax
c0027161:	c1 eb 08             	shr    ebx,0x8
c0027164:	80 e2 7f             	and    dl,0x7f
c0027167:	0f 95 c2             	setne  dl
c002716a:	09 da                	or     edx,ebx
c002716c:	83 e2 01             	and    edx,0x1
c002716f:	c1 e8 07             	shr    eax,0x7
c0027172:	21 c2                	and    edx,eax
c0027174:	b8 9e 00 00 00       	mov    eax,0x9e
c0027179:	29 c8                	sub    eax,ecx
c002717b:	c1 e0 17             	shl    eax,0x17
c002717e:	09 d8                	or     eax,ebx
c0027180:	01 d0                	add    eax,edx
c0027182:	5b                   	pop    ebx
c0027183:	5d                   	pop    ebp
c0027184:	c3                   	ret    

c0027185 <__fixsfsi>:
c0027185:	55                   	push   ebp
c0027186:	89 e5                	mov    ebp,esp
c0027188:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002718b:	89 d1                	mov    ecx,edx
c002718d:	c1 e1 08             	shl    ecx,0x8
c0027190:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027196:	c1 fa 17             	sar    edx,0x17
c0027199:	78 1c                	js     c00271b7 <__fixsfsi+0x32>
c002719b:	83 ea 7f             	sub    edx,0x7f
c002719e:	31 c0                	xor    eax,eax
c00271a0:	83 fa 1e             	cmp    edx,0x1e
c00271a3:	77 40                	ja     c00271e5 <__fixsfsi+0x60>
c00271a5:	89 c8                	mov    eax,ecx
c00271a7:	0d 00 00 00 80       	or     eax,0x80000000
c00271ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271b1:	29 d1                	sub    ecx,edx
c00271b3:	d3 e8                	shr    eax,cl
c00271b5:	eb 2e                	jmp    c00271e5 <__fixsfsi+0x60>
c00271b7:	31 c0                	xor    eax,eax
c00271b9:	81 c2 81 00 00 00    	add    edx,0x81
c00271bf:	78 24                	js     c00271e5 <__fixsfsi+0x60>
c00271c1:	83 fa 1e             	cmp    edx,0x1e
c00271c4:	7e 09                	jle    c00271cf <__fixsfsi+0x4a>
c00271c6:	83 fa 1f             	cmp    edx,0x1f
c00271c9:	75 18                	jne    c00271e3 <__fixsfsi+0x5e>
c00271cb:	85 c9                	test   ecx,ecx
c00271cd:	75 14                	jne    c00271e3 <__fixsfsi+0x5e>
c00271cf:	89 c8                	mov    eax,ecx
c00271d1:	0d 00 00 00 80       	or     eax,0x80000000
c00271d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271db:	29 d1                	sub    ecx,edx
c00271dd:	d3 e8                	shr    eax,cl
c00271df:	f7 d8                	neg    eax
c00271e1:	eb 02                	jmp    c00271e5 <__fixsfsi+0x60>
c00271e3:	31 c0                	xor    eax,eax
c00271e5:	5d                   	pop    ebp
c00271e6:	c3                   	ret    

c00271e7 <__fixunssfsi>:
c00271e7:	55                   	push   ebp
c00271e8:	89 e5                	mov    ebp,esp
c00271ea:	53                   	push   ebx
c00271eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ee:	89 d3                	mov    ebx,edx
c00271f0:	c1 fb 17             	sar    ebx,0x17
c00271f3:	83 eb 7f             	sub    ebx,0x7f
c00271f6:	31 c0                	xor    eax,eax
c00271f8:	83 fb 1f             	cmp    ebx,0x1f
c00271fb:	77 18                	ja     c0027215 <__fixunssfsi+0x2e>
c00271fd:	89 d0                	mov    eax,edx
c00271ff:	c1 e0 08             	shl    eax,0x8
c0027202:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027207:	0d 00 00 00 80       	or     eax,0x80000000
c002720c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027211:	29 d9                	sub    ecx,ebx
c0027213:	d3 e8                	shr    eax,cl
c0027215:	5b                   	pop    ebx
c0027216:	5d                   	pop    ebp
c0027217:	c3                   	ret    

c0027218 <__cmpsf2>:
c0027218:	55                   	push   ebp
c0027219:	89 e5                	mov    ebp,esp
c002721b:	57                   	push   edi
c002721c:	56                   	push   esi
c002721d:	53                   	push   ebx
c002721e:	83 ec 24             	sub    esp,0x24
c0027221:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027224:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027227:	e8 4f 10 00 00       	call   c002827b <__truncdfsf2>
c002722c:	5a                   	pop    edx
c002722d:	59                   	pop    ecx
c002722e:	89 c3                	mov    ebx,eax
c0027230:	c1 e8 17             	shr    eax,0x17
c0027233:	0f b6 f0             	movzx  esi,al
c0027236:	89 d8                	mov    eax,ebx
c0027238:	c1 e8 1f             	shr    eax,0x1f
c002723b:	31 c6                	xor    esi,eax
c002723d:	c1 e3 08             	shl    ebx,0x8
c0027240:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027243:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027246:	e8 30 10 00 00       	call   c002827b <__truncdfsf2>
c002724b:	83 c4 10             	add    esp,0x10
c002724e:	89 c1                	mov    ecx,eax
c0027250:	c1 e9 17             	shr    ecx,0x17
c0027253:	0f b6 c9             	movzx  ecx,cl
c0027256:	89 c7                	mov    edi,eax
c0027258:	c1 ef 1f             	shr    edi,0x1f
c002725b:	89 ca                	mov    edx,ecx
c002725d:	31 fa                	xor    edx,edi
c002725f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027262:	c1 e0 08             	shl    eax,0x8
c0027265:	89 c2                	mov    edx,eax
c0027267:	89 d8                	mov    eax,ebx
c0027269:	09 d0                	or     eax,edx
c002726b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027270:	09 f0                	or     eax,esi
c0027272:	75 08                	jne    c002727c <__cmpsf2+0x64>
c0027274:	31 c0                	xor    eax,eax
c0027276:	39 f9                	cmp    ecx,edi
c0027278:	75 0c                	jne    c0027286 <__cmpsf2+0x6e>
c002727a:	eb 29                	jmp    c00272a5 <__cmpsf2+0x8d>
c002727c:	b8 01 00 00 00       	mov    eax,0x1
c0027281:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027284:	7f 1f                	jg     c00272a5 <__cmpsf2+0x8d>
c0027286:	83 c8 ff             	or     eax,0xffffffff
c0027289:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002728c:	7c 17                	jl     c00272a5 <__cmpsf2+0x8d>
c002728e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027294:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002729a:	b8 01 00 00 00       	mov    eax,0x1
c002729f:	39 d3                	cmp    ebx,edx
c00272a1:	77 02                	ja     c00272a5 <__cmpsf2+0x8d>
c00272a3:	19 c0                	sbb    eax,eax
c00272a5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272a8:	5b                   	pop    ebx
c00272a9:	5e                   	pop    esi
c00272aa:	5f                   	pop    edi
c00272ab:	5d                   	pop    ebp
c00272ac:	c3                   	ret    

c00272ad <__eqsf2>:
c00272ad:	55                   	push   ebp
c00272ae:	89 e5                	mov    ebp,esp
c00272b0:	83 ec 24             	sub    esp,0x24
c00272b3:	6a 01                	push   0x1
c00272b5:	83 ec 0c             	sub    esp,0xc
c00272b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272bb:	e8 df 10 00 00       	call   c002839f <__extendsfdf2>
c00272c0:	83 c4 10             	add    esp,0x10
c00272c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272c6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272c9:	52                   	push   edx
c00272ca:	50                   	push   eax
c00272cb:	50                   	push   eax
c00272cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272cf:	e8 cb 10 00 00       	call   c002839f <__extendsfdf2>
c00272d4:	59                   	pop    ecx
c00272d5:	59                   	pop    ecx
c00272d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272dc:	52                   	push   edx
c00272dd:	50                   	push   eax
c00272de:	e8 35 ff ff ff       	call   c0027218 <__cmpsf2>
c00272e3:	83 c4 20             	add    esp,0x20
c00272e6:	c9                   	leave  
c00272e7:	c3                   	ret    

c00272e8 <__nesf2>:
c00272e8:	eb c3                	jmp    c00272ad <__eqsf2>

c00272ea <__gtsf2>:
c00272ea:	55                   	push   ebp
c00272eb:	89 e5                	mov    ebp,esp
c00272ed:	83 ec 24             	sub    esp,0x24
c00272f0:	6a ff                	push   0xffffffff
c00272f2:	83 ec 0c             	sub    esp,0xc
c00272f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272f8:	e8 a2 10 00 00       	call   c002839f <__extendsfdf2>
c00272fd:	83 c4 10             	add    esp,0x10
c0027300:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027303:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027306:	52                   	push   edx
c0027307:	50                   	push   eax
c0027308:	50                   	push   eax
c0027309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002730c:	e8 8e 10 00 00       	call   c002839f <__extendsfdf2>
c0027311:	59                   	pop    ecx
c0027312:	59                   	pop    ecx
c0027313:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027316:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027319:	52                   	push   edx
c002731a:	50                   	push   eax
c002731b:	e8 f8 fe ff ff       	call   c0027218 <__cmpsf2>
c0027320:	83 c4 20             	add    esp,0x20
c0027323:	c9                   	leave  
c0027324:	c3                   	ret    

c0027325 <__gesf2>:
c0027325:	eb c3                	jmp    c00272ea <__gtsf2>

c0027327 <__ltsf2>:
c0027327:	eb 84                	jmp    c00272ad <__eqsf2>

c0027329 <__lesf2>:
c0027329:	eb 82                	jmp    c00272ad <__eqsf2>

c002732b <__adddf3>:
c002732b:	55                   	push   ebp
c002732c:	89 e5                	mov    ebp,esp
c002732e:	57                   	push   edi
c002732f:	56                   	push   esi
c0027330:	53                   	push   ebx
c0027331:	83 ec 24             	sub    esp,0x24
c0027334:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027337:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002733a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002733d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027340:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027343:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027346:	89 c8                	mov    eax,ecx
c0027348:	89 ce                	mov    esi,ecx
c002734a:	c1 fe 14             	sar    esi,0x14
c002734d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027350:	89 fb                	mov    ebx,edi
c0027352:	89 fa                	mov    edx,edi
c0027354:	c1 e2 0b             	shl    edx,0xb
c0027357:	c1 e0 0b             	shl    eax,0xb
c002735a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002735f:	c1 eb 15             	shr    ebx,0x15
c0027362:	09 d8                	or     eax,ebx
c0027364:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027367:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002736a:	c1 fe 14             	sar    esi,0x14
c002736d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027370:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027373:	89 f3                	mov    ebx,esi
c0027375:	c1 e3 0b             	shl    ebx,0xb
c0027378:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002737b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002737e:	c1 e3 0b             	shl    ebx,0xb
c0027381:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027387:	c1 ee 15             	shr    esi,0x15
c002738a:	09 f3                	or     ebx,esi
c002738c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002738f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027392:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027395:	0f 88 5f 02 00 00    	js     c00275fa <__adddf3+0x2cf>
c002739b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002739e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00273a1:	85 db                	test   ebx,ebx
c00273a3:	0f 8e c7 00 00 00    	jle    c0027470 <__adddf3+0x145>
c00273a9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00273b0:	75 1a                	jne    c00273cc <__adddf3+0xa1>
c00273b2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273b5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273b8:	0f 84 b2 05 00 00    	je     c0027970 <__adddf3+0x645>
c00273be:	4b                   	dec    ebx
c00273bf:	75 23                	jne    c00273e4 <__adddf3+0xb9>
c00273c1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273c4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273c7:	e9 99 00 00 00       	jmp    c0027465 <__adddf3+0x13a>
c00273cc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273cf:	f7 d6                	not    esi
c00273d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273d7:	0f 84 93 05 00 00    	je     c0027970 <__adddf3+0x645>
c00273dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00273e4:	83 fb 1f             	cmp    ebx,0x1f
c00273e7:	7e 42                	jle    c002742b <__adddf3+0x100>
c00273e9:	83 fb 3f             	cmp    ebx,0x3f
c00273ec:	0f 8f 7e 05 00 00    	jg     c0027970 <__adddf3+0x645>
c00273f2:	83 e3 1f             	and    ebx,0x1f
c00273f5:	89 d9                	mov    ecx,ebx
c00273f7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00273fa:	d3 ef                	shr    edi,cl
c00273fc:	31 db                	xor    ebx,ebx
c00273fe:	85 c9                	test   ecx,ecx
c0027400:	74 15                	je     c0027417 <__adddf3+0xec>
c0027402:	be 20 00 00 00       	mov    esi,0x20
c0027407:	29 ce                	sub    esi,ecx
c0027409:	89 f1                	mov    ecx,esi
c002740b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002740e:	d3 e6                	shl    esi,cl
c0027410:	31 db                	xor    ebx,ebx
c0027412:	85 f6                	test   esi,esi
c0027414:	0f 95 c3             	setne  bl
c0027417:	31 c9                	xor    ecx,ecx
c0027419:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002741d:	0f 95 c1             	setne  cl
c0027420:	09 cf                	or     edi,ecx
c0027422:	09 fb                	or     ebx,edi
c0027424:	01 da                	add    edx,ebx
c0027426:	83 d0 00             	adc    eax,0x0
c0027429:	eb 3a                	jmp    c0027465 <__adddf3+0x13a>
c002742b:	bf 20 00 00 00       	mov    edi,0x20
c0027430:	29 df                	sub    edi,ebx
c0027432:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027435:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027438:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002743b:	d3 e6                	shl    esi,cl
c002743d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027440:	88 d9                	mov    cl,bl
c0027442:	d3 ef                	shr    edi,cl
c0027444:	09 fe                	or     esi,edi
c0027446:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027449:	88 d9                	mov    cl,bl
c002744b:	d3 ef                	shr    edi,cl
c002744d:	89 fb                	mov    ebx,edi
c002744f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027452:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027455:	d3 e7                	shl    edi,cl
c0027457:	85 ff                	test   edi,edi
c0027459:	0f 95 c1             	setne  cl
c002745c:	0f b6 c9             	movzx  ecx,cl
c002745f:	09 ce                	or     esi,ecx
c0027461:	01 f2                	add    edx,esi
c0027463:	11 d8                	adc    eax,ebx
c0027465:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027468:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002746b:	e9 52 01 00 00       	jmp    c00275c2 <__adddf3+0x297>
c0027470:	0f 84 d5 00 00 00    	je     c002754b <__adddf3+0x220>
c0027476:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027479:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002747c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002747f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027482:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027489:	75 20                	jne    c00274ab <__adddf3+0x180>
c002748b:	89 d6                	mov    esi,edx
c002748d:	09 c6                	or     esi,eax
c002748f:	0f 84 db 04 00 00    	je     c0027970 <__adddf3+0x645>
c0027495:	4b                   	dec    ebx
c0027496:	75 29                	jne    c00274c1 <__adddf3+0x196>
c0027498:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002749b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002749e:	01 d1                	add    ecx,edx
c00274a0:	11 c6                	adc    esi,eax
c00274a2:	89 f0                	mov    eax,esi
c00274a4:	89 ca                	mov    edx,ecx
c00274a6:	e9 17 01 00 00       	jmp    c00275c2 <__adddf3+0x297>
c00274ab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274ae:	f7 d6                	not    esi
c00274b0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274b6:	0f 84 b4 04 00 00    	je     c0027970 <__adddf3+0x645>
c00274bc:	0d 00 00 00 80       	or     eax,0x80000000
c00274c1:	83 fb 1f             	cmp    ebx,0x1f
c00274c4:	7e 48                	jle    c002750e <__adddf3+0x1e3>
c00274c6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274cc:	83 fb 3f             	cmp    ebx,0x3f
c00274cf:	0f 8f 9b 04 00 00    	jg     c0027970 <__adddf3+0x645>
c00274d5:	83 e3 1f             	and    ebx,0x1f
c00274d8:	89 d9                	mov    ecx,ebx
c00274da:	89 c7                	mov    edi,eax
c00274dc:	d3 ef                	shr    edi,cl
c00274de:	31 db                	xor    ebx,ebx
c00274e0:	85 c9                	test   ecx,ecx
c00274e2:	74 12                	je     c00274f6 <__adddf3+0x1cb>
c00274e4:	be 20 00 00 00       	mov    esi,0x20
c00274e9:	29 ce                	sub    esi,ecx
c00274eb:	89 f1                	mov    ecx,esi
c00274ed:	d3 e0                	shl    eax,cl
c00274ef:	31 db                	xor    ebx,ebx
c00274f1:	85 c0                	test   eax,eax
c00274f3:	0f 95 c3             	setne  bl
c00274f6:	31 c0                	xor    eax,eax
c00274f8:	85 d2                	test   edx,edx
c00274fa:	0f 95 c0             	setne  al
c00274fd:	09 c7                	or     edi,eax
c00274ff:	09 fb                	or     ebx,edi
c0027501:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027504:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027507:	01 da                	add    edx,ebx
c0027509:	83 d6 00             	adc    esi,0x0
c002750c:	eb 39                	jmp    c0027547 <__adddf3+0x21c>
c002750e:	be 20 00 00 00       	mov    esi,0x20
c0027513:	29 de                	sub    esi,ebx
c0027515:	89 c7                	mov    edi,eax
c0027517:	89 f1                	mov    ecx,esi
c0027519:	d3 e7                	shl    edi,cl
c002751b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002751e:	89 d7                	mov    edi,edx
c0027520:	88 d9                	mov    cl,bl
c0027522:	d3 ef                	shr    edi,cl
c0027524:	89 f9                	mov    ecx,edi
c0027526:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027529:	09 cf                	or     edi,ecx
c002752b:	88 d9                	mov    cl,bl
c002752d:	d3 e8                	shr    eax,cl
c002752f:	89 f1                	mov    ecx,esi
c0027531:	d3 e2                	shl    edx,cl
c0027533:	85 d2                	test   edx,edx
c0027535:	0f 95 c2             	setne  dl
c0027538:	0f b6 d2             	movzx  edx,dl
c002753b:	09 d7                	or     edi,edx
c002753d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027540:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027543:	01 fa                	add    edx,edi
c0027545:	11 c6                	adc    esi,eax
c0027547:	89 f0                	mov    eax,esi
c0027549:	eb 77                	jmp    c00275c2 <__adddf3+0x297>
c002754b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002754e:	46                   	inc    esi
c002754f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027552:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027558:	75 41                	jne    c002759b <__adddf3+0x270>
c002755a:	89 d3                	mov    ebx,edx
c002755c:	09 c3                	or     ebx,eax
c002755e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027565:	75 27                	jne    c002758e <__adddf3+0x263>
c0027567:	85 db                	test   ebx,ebx
c0027569:	0f 84 fb 03 00 00    	je     c002796a <__adddf3+0x63f>
c002756f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027572:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027575:	0f 84 f5 03 00 00    	je     c0027970 <__adddf3+0x645>
c002757b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002757e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027581:	85 c0                	test   eax,eax
c0027583:	0f 89 91 03 00 00    	jns    c002791a <__adddf3+0x5ef>
c0027589:	e9 85 03 00 00       	jmp    c0027913 <__adddf3+0x5e8>
c002758e:	85 db                	test   ebx,ebx
c0027590:	0f 85 da 03 00 00    	jne    c0027970 <__adddf3+0x645>
c0027596:	e9 cf 03 00 00       	jmp    c002796a <__adddf3+0x63f>
c002759b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002759e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275a4:	f7 d1                	not    ecx
c00275a6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00275ac:	0f 84 70 03 00 00    	je     c0027922 <__adddf3+0x5f7>
c00275b2:	d1 ea                	shr    edx,1
c00275b4:	89 c1                	mov    ecx,eax
c00275b6:	c1 e1 1f             	shl    ecx,0x1f
c00275b9:	09 ca                	or     edx,ecx
c00275bb:	d1 e8                	shr    eax,1
c00275bd:	e9 6f 03 00 00       	jmp    c0027931 <__adddf3+0x606>
c00275c2:	85 c0                	test   eax,eax
c00275c4:	0f 89 67 03 00 00    	jns    c0027931 <__adddf3+0x606>
c00275ca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00275cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275d0:	f7 d1                	not    ecx
c00275d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00275d8:	0f 84 44 03 00 00    	je     c0027922 <__adddf3+0x5f7>
c00275de:	89 d1                	mov    ecx,edx
c00275e0:	d1 e9                	shr    ecx,1
c00275e2:	83 e2 01             	and    edx,0x1
c00275e5:	09 ca                	or     edx,ecx
c00275e7:	89 c1                	mov    ecx,eax
c00275e9:	c1 e1 1f             	shl    ecx,0x1f
c00275ec:	09 ca                	or     edx,ecx
c00275ee:	d1 e8                	shr    eax,1
c00275f0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00275f5:	e9 37 03 00 00       	jmp    c0027931 <__adddf3+0x606>
c00275fa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275fd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027603:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027606:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027609:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002760f:	29 de                	sub    esi,ebx
c0027611:	85 f6                	test   esi,esi
c0027613:	0f 8e bd 00 00 00    	jle    c00276d6 <__adddf3+0x3ab>
c0027619:	85 db                	test   ebx,ebx
c002761b:	75 17                	jne    c0027634 <__adddf3+0x309>
c002761d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027620:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027623:	0f 84 47 03 00 00    	je     c0027970 <__adddf3+0x645>
c0027629:	4e                   	dec    esi
c002762a:	75 20                	jne    c002764c <__adddf3+0x321>
c002762c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002762f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027632:	eb 5b                	jmp    c002768f <__adddf3+0x364>
c0027634:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027637:	f7 d3                	not    ebx
c0027639:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002763f:	0f 84 2b 03 00 00    	je     c0027970 <__adddf3+0x645>
c0027645:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002764c:	83 fe 1f             	cmp    esi,0x1f
c002764f:	7e 49                	jle    c002769a <__adddf3+0x36f>
c0027651:	83 fe 3f             	cmp    esi,0x3f
c0027654:	0f 8f 16 03 00 00    	jg     c0027970 <__adddf3+0x645>
c002765a:	83 e6 1f             	and    esi,0x1f
c002765d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027660:	89 f1                	mov    ecx,esi
c0027662:	d3 ef                	shr    edi,cl
c0027664:	31 db                	xor    ebx,ebx
c0027666:	85 f6                	test   esi,esi
c0027668:	74 13                	je     c002767d <__adddf3+0x352>
c002766a:	b9 20 00 00 00       	mov    ecx,0x20
c002766f:	29 f1                	sub    ecx,esi
c0027671:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027674:	d3 e6                	shl    esi,cl
c0027676:	31 db                	xor    ebx,ebx
c0027678:	85 f6                	test   esi,esi
c002767a:	0f 95 c3             	setne  bl
c002767d:	31 c9                	xor    ecx,ecx
c002767f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027683:	0f 95 c1             	setne  cl
c0027686:	09 cf                	or     edi,ecx
c0027688:	09 fb                	or     ebx,edi
c002768a:	29 da                	sub    edx,ebx
c002768c:	83 d8 00             	sbb    eax,0x0
c002768f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027692:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027695:	e9 aa 01 00 00       	jmp    c0027844 <__adddf3+0x519>
c002769a:	bf 20 00 00 00       	mov    edi,0x20
c002769f:	29 f7                	sub    edi,esi
c00276a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00276a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276aa:	d3 e3                	shl    ebx,cl
c00276ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276af:	89 f1                	mov    ecx,esi
c00276b1:	d3 ef                	shr    edi,cl
c00276b3:	09 fb                	or     ebx,edi
c00276b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276b8:	89 f1                	mov    ecx,esi
c00276ba:	d3 ef                	shr    edi,cl
c00276bc:	89 fe                	mov    esi,edi
c00276be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276c4:	d3 e7                	shl    edi,cl
c00276c6:	85 ff                	test   edi,edi
c00276c8:	0f 95 c1             	setne  cl
c00276cb:	0f b6 c9             	movzx  ecx,cl
c00276ce:	09 cb                	or     ebx,ecx
c00276d0:	29 da                	sub    edx,ebx
c00276d2:	19 f0                	sbb    eax,esi
c00276d4:	eb b9                	jmp    c002768f <__adddf3+0x364>
c00276d6:	0f 84 cd 00 00 00    	je     c00277a9 <__adddf3+0x47e>
c00276dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00276df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00276e9:	75 1b                	jne    c0027706 <__adddf3+0x3db>
c00276eb:	89 d6                	mov    esi,edx
c00276ed:	09 c6                	or     esi,eax
c00276ef:	0f 84 7b 02 00 00    	je     c0027970 <__adddf3+0x645>
c00276f5:	4b                   	dec    ebx
c00276f6:	75 24                	jne    c002771c <__adddf3+0x3f1>
c00276f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276fe:	29 d1                	sub    ecx,edx
c0027700:	19 c6                	sbb    esi,eax
c0027702:	89 ca                	mov    edx,ecx
c0027704:	eb 61                	jmp    c0027767 <__adddf3+0x43c>
c0027706:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027709:	f7 d6                	not    esi
c002770b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027711:	0f 84 59 02 00 00    	je     c0027970 <__adddf3+0x645>
c0027717:	0d 00 00 00 80       	or     eax,0x80000000
c002771c:	83 fb 1f             	cmp    ebx,0x1f
c002771f:	7e 4d                	jle    c002776e <__adddf3+0x443>
c0027721:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027724:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027727:	83 fb 3f             	cmp    ebx,0x3f
c002772a:	0f 8f 40 02 00 00    	jg     c0027970 <__adddf3+0x645>
c0027730:	83 e3 1f             	and    ebx,0x1f
c0027733:	89 d9                	mov    ecx,ebx
c0027735:	89 c7                	mov    edi,eax
c0027737:	d3 ef                	shr    edi,cl
c0027739:	31 db                	xor    ebx,ebx
c002773b:	85 c9                	test   ecx,ecx
c002773d:	74 12                	je     c0027751 <__adddf3+0x426>
c002773f:	be 20 00 00 00       	mov    esi,0x20
c0027744:	29 ce                	sub    esi,ecx
c0027746:	89 f1                	mov    ecx,esi
c0027748:	d3 e0                	shl    eax,cl
c002774a:	31 db                	xor    ebx,ebx
c002774c:	85 c0                	test   eax,eax
c002774e:	0f 95 c3             	setne  bl
c0027751:	31 c0                	xor    eax,eax
c0027753:	85 d2                	test   edx,edx
c0027755:	0f 95 c0             	setne  al
c0027758:	09 c7                	or     edi,eax
c002775a:	09 fb                	or     ebx,edi
c002775c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002775f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027762:	29 da                	sub    edx,ebx
c0027764:	83 de 00             	sbb    esi,0x0
c0027767:	89 f0                	mov    eax,esi
c0027769:	e9 d6 00 00 00       	jmp    c0027844 <__adddf3+0x519>
c002776e:	be 20 00 00 00       	mov    esi,0x20
c0027773:	29 de                	sub    esi,ebx
c0027775:	89 c7                	mov    edi,eax
c0027777:	89 f1                	mov    ecx,esi
c0027779:	d3 e7                	shl    edi,cl
c002777b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002777e:	89 d7                	mov    edi,edx
c0027780:	88 d9                	mov    cl,bl
c0027782:	d3 ef                	shr    edi,cl
c0027784:	89 f9                	mov    ecx,edi
c0027786:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027789:	09 cf                	or     edi,ecx
c002778b:	88 d9                	mov    cl,bl
c002778d:	d3 e8                	shr    eax,cl
c002778f:	89 f1                	mov    ecx,esi
c0027791:	d3 e2                	shl    edx,cl
c0027793:	85 d2                	test   edx,edx
c0027795:	0f 95 c2             	setne  dl
c0027798:	0f b6 d2             	movzx  edx,dl
c002779b:	09 d7                	or     edi,edx
c002779d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277a3:	29 fa                	sub    edx,edi
c00277a5:	19 c6                	sbb    esi,eax
c00277a7:	eb be                	jmp    c0027767 <__adddf3+0x43c>
c00277a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00277af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00277b5:	75 6a                	jne    c0027821 <__adddf3+0x4f6>
c00277b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277bb:	75 58                	jne    c0027815 <__adddf3+0x4ea>
c00277bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277c3:	89 d6                	mov    esi,edx
c00277c5:	09 c6                	or     esi,eax
c00277c7:	75 17                	jne    c00277e0 <__adddf3+0x4b5>
c00277c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277cf:	85 db                	test   ebx,ebx
c00277d1:	0f 85 99 01 00 00    	jne    c0027970 <__adddf3+0x645>
c00277d7:	31 ff                	xor    edi,edi
c00277d9:	31 c9                	xor    ecx,ecx
c00277db:	e9 90 01 00 00       	jmp    c0027970 <__adddf3+0x645>
c00277e0:	85 db                	test   ebx,ebx
c00277e2:	0f 84 88 01 00 00    	je     c0027970 <__adddf3+0x645>
c00277e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277ee:	85 c0                	test   eax,eax
c00277f0:	79 10                	jns    c0027802 <__adddf3+0x4d7>
c00277f2:	31 c9                	xor    ecx,ecx
c00277f4:	f7 da                	neg    edx
c00277f6:	0f 95 c1             	setne  cl
c00277f9:	01 c8                	add    eax,ecx
c00277fb:	f7 d8                	neg    eax
c00277fd:	e9 2f 01 00 00       	jmp    c0027931 <__adddf3+0x606>
c0027802:	31 ff                	xor    edi,edi
c0027804:	31 c9                	xor    ecx,ecx
c0027806:	89 c3                	mov    ebx,eax
c0027808:	09 d3                	or     ebx,edx
c002780a:	0f 84 60 01 00 00    	je     c0027970 <__adddf3+0x645>
c0027810:	e9 05 01 00 00       	jmp    c002791a <__adddf3+0x5ef>
c0027815:	31 ff                	xor    edi,edi
c0027817:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002781c:	e9 4f 01 00 00       	jmp    c0027970 <__adddf3+0x645>
c0027821:	89 c1                	mov    ecx,eax
c0027823:	89 d0                	mov    eax,edx
c0027825:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027828:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002782b:	89 ca                	mov    edx,ecx
c002782d:	85 c9                	test   ecx,ecx
c002782f:	79 2c                	jns    c002785d <__adddf3+0x532>
c0027831:	31 c9                	xor    ecx,ecx
c0027833:	f7 d8                	neg    eax
c0027835:	0f 95 c1             	setne  cl
c0027838:	01 ca                	add    edx,ecx
c002783a:	f7 da                	neg    edx
c002783c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002783f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027842:	eb 19                	jmp    c002785d <__adddf3+0x532>
c0027844:	85 c0                	test   eax,eax
c0027846:	0f 89 e5 00 00 00    	jns    c0027931 <__adddf3+0x606>
c002784c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027851:	89 c1                	mov    ecx,eax
c0027853:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027856:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027859:	89 d0                	mov    eax,edx
c002785b:	89 ca                	mov    edx,ecx
c002785d:	85 d2                	test   edx,edx
c002785f:	74 59                	je     c00278ba <__adddf3+0x58f>
c0027861:	0f bd da             	bsr    ebx,edx
c0027864:	83 f3 1f             	xor    ebx,0x1f
c0027867:	88 d9                	mov    cl,bl
c0027869:	d3 e2                	shl    edx,cl
c002786b:	bf 20 00 00 00       	mov    edi,0x20
c0027870:	89 f9                	mov    ecx,edi
c0027872:	29 d9                	sub    ecx,ebx
c0027874:	89 c6                	mov    esi,eax
c0027876:	d3 ee                	shr    esi,cl
c0027878:	09 d6                	or     esi,edx
c002787a:	88 d9                	mov    cl,bl
c002787c:	d3 e0                	shl    eax,cl
c002787e:	89 c2                	mov    edx,eax
c0027880:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027883:	25 ff 07 00 00       	and    eax,0x7ff
c0027888:	39 d8                	cmp    eax,ebx
c002788a:	7f 22                	jg     c00278ae <__adddf3+0x583>
c002788c:	29 c3                	sub    ebx,eax
c002788e:	43                   	inc    ebx
c002788f:	88 d9                	mov    cl,bl
c0027891:	d3 ea                	shr    edx,cl
c0027893:	29 df                	sub    edi,ebx
c0027895:	89 f9                	mov    ecx,edi
c0027897:	89 f0                	mov    eax,esi
c0027899:	d3 e0                	shl    eax,cl
c002789b:	09 c2                	or     edx,eax
c002789d:	89 f0                	mov    eax,esi
c002789f:	88 d9                	mov    cl,bl
c00278a1:	d3 e8                	shr    eax,cl
c00278a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00278ac:	eb 6f                	jmp    c002791d <__adddf3+0x5f2>
c00278ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278b1:	29 d8                	sub    eax,ebx
c00278b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278b6:	89 f0                	mov    eax,esi
c00278b8:	eb 59                	jmp    c0027913 <__adddf3+0x5e8>
c00278ba:	85 c0                	test   eax,eax
c00278bc:	74 6a                	je     c0027928 <__adddf3+0x5fd>
c00278be:	0f bd c8             	bsr    ecx,eax
c00278c1:	83 f1 1f             	xor    ecx,0x1f
c00278c4:	d3 e0                	shl    eax,cl
c00278c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278cf:	83 c1 20             	add    ecx,0x20
c00278d2:	39 cb                	cmp    ebx,ecx
c00278d4:	7f 35                	jg     c002790b <__adddf3+0x5e0>
c00278d6:	29 d9                	sub    ecx,ebx
c00278d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00278db:	83 fe 1f             	cmp    esi,0x1f
c00278de:	7e 09                	jle    c00278e9 <__adddf3+0x5be>
c00278e0:	83 e9 1f             	sub    ecx,0x1f
c00278e3:	d3 e8                	shr    eax,cl
c00278e5:	89 c3                	mov    ebx,eax
c00278e7:	eb 11                	jmp    c00278fa <__adddf3+0x5cf>
c00278e9:	b9 20 00 00 00       	mov    ecx,0x20
c00278ee:	29 f1                	sub    ecx,esi
c00278f0:	89 c3                	mov    ebx,eax
c00278f2:	d3 e3                	shl    ebx,cl
c00278f4:	89 f1                	mov    ecx,esi
c00278f6:	d3 e8                	shr    eax,cl
c00278f8:	89 c2                	mov    edx,eax
c00278fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027902:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027905:	89 d0                	mov    eax,edx
c0027907:	89 da                	mov    edx,ebx
c0027909:	eb 26                	jmp    c0027931 <__adddf3+0x606>
c002790b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002790e:	29 cf                	sub    edi,ecx
c0027910:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027913:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027918:	eb 17                	jmp    c0027931 <__adddf3+0x606>
c002791a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002791d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027920:	eb 0f                	jmp    c0027931 <__adddf3+0x606>
c0027922:	31 d2                	xor    edx,edx
c0027924:	31 c0                	xor    eax,eax
c0027926:	eb 09                	jmp    c0027931 <__adddf3+0x606>
c0027928:	89 c2                	mov    edx,eax
c002792a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027931:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027934:	c1 e1 14             	shl    ecx,0x14
c0027937:	89 c3                	mov    ebx,eax
c0027939:	c1 eb 0b             	shr    ebx,0xb
c002793c:	09 d9                	or     ecx,ebx
c002793e:	89 d3                	mov    ebx,edx
c0027940:	c1 eb 0b             	shr    ebx,0xb
c0027943:	c1 e0 15             	shl    eax,0x15
c0027946:	09 d8                	or     eax,ebx
c0027948:	89 c7                	mov    edi,eax
c002794a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027950:	0f 95 c0             	setne  al
c0027953:	89 c6                	mov    esi,eax
c0027955:	09 f3                	or     ebx,esi
c0027957:	83 e3 01             	and    ebx,0x1
c002795a:	c1 ea 0a             	shr    edx,0xa
c002795d:	21 da                	and    edx,ebx
c002795f:	89 f8                	mov    eax,edi
c0027961:	01 d0                	add    eax,edx
c0027963:	83 d1 00             	adc    ecx,0x0
c0027966:	89 c7                	mov    edi,eax
c0027968:	eb 06                	jmp    c0027970 <__adddf3+0x645>
c002796a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027970:	89 f8                	mov    eax,edi
c0027972:	89 ca                	mov    edx,ecx
c0027974:	83 c4 24             	add    esp,0x24
c0027977:	5b                   	pop    ebx
c0027978:	5e                   	pop    esi
c0027979:	5f                   	pop    edi
c002797a:	5d                   	pop    ebp
c002797b:	c3                   	ret    

c002797c <__subdf3>:
c002797c:	55                   	push   ebp
c002797d:	89 e5                	mov    ebp,esp
c002797f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027982:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027985:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002798b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002798e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027991:	5d                   	pop    ebp
c0027992:	e9 94 f9 ff ff       	jmp    c002732b <__adddf3>

c0027997 <__negdf2>:
c0027997:	55                   	push   ebp
c0027998:	89 e5                	mov    ebp,esp
c002799a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002799d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00279a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279a6:	5d                   	pop    ebp
c00279a7:	c3                   	ret    

c00279a8 <__muldf3>:
c00279a8:	55                   	push   ebp
c00279a9:	89 e5                	mov    ebp,esp
c00279ab:	57                   	push   edi
c00279ac:	56                   	push   esi
c00279ad:	53                   	push   ebx
c00279ae:	83 ec 24             	sub    esp,0x24
c00279b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00279b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00279c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00279c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279c6:	89 c8                	mov    eax,ecx
c00279c8:	c1 f8 14             	sar    eax,0x14
c00279cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279ce:	89 f8                	mov    eax,edi
c00279d0:	89 fb                	mov    ebx,edi
c00279d2:	c1 e3 0b             	shl    ebx,0xb
c00279d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00279d8:	c1 e1 0b             	shl    ecx,0xb
c00279db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00279e1:	c1 e8 15             	shr    eax,0x15
c00279e4:	09 c1                	or     ecx,eax
c00279e6:	89 d6                	mov    esi,edx
c00279e8:	89 d0                	mov    eax,edx
c00279ea:	c1 f8 14             	sar    eax,0x14
c00279ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00279f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00279f3:	89 c3                	mov    ebx,eax
c00279f5:	c1 e3 0b             	shl    ebx,0xb
c00279f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00279fb:	c1 e6 0b             	shl    esi,0xb
c00279fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a04:	c1 e8 15             	shr    eax,0x15
c0027a07:	09 c6                	or     esi,eax
c0027a09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a0c:	25 ff 07 00 00       	and    eax,0x7ff
c0027a11:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a17:	25 ff 07 00 00       	and    eax,0x7ff
c0027a1c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a22:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a25:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027a2c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a2f:	40                   	inc    eax
c0027a30:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a35:	0f 85 8d 00 00 00    	jne    c0027ac8 <__muldf3+0x120>
c0027a3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a3e:	09 c8                	or     eax,ecx
c0027a40:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027a44:	74 44                	je     c0027a8a <__muldf3+0xe2>
c0027a46:	85 c0                	test   eax,eax
c0027a48:	0f 85 31 02 00 00    	jne    c0027c7f <__muldf3+0x2d7>
c0027a4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a51:	40                   	inc    eax
c0027a52:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a57:	75 13                	jne    c0027a6c <__muldf3+0xc4>
c0027a59:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a5c:	09 f1                	or     ecx,esi
c0027a5e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a62:	74 22                	je     c0027a86 <__muldf3+0xde>
c0027a64:	85 c9                	test   ecx,ecx
c0027a66:	0f 85 0d 02 00 00    	jne    c0027c79 <__muldf3+0x2d1>
c0027a6c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027a70:	0f 89 09 02 00 00    	jns    c0027c7f <__muldf3+0x2d7>
c0027a76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a79:	05 00 00 00 80       	add    eax,0x80000000
c0027a7e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a81:	e9 f9 01 00 00       	jmp    c0027c7f <__muldf3+0x2d7>
c0027a86:	85 c9                	test   ecx,ecx
c0027a88:	eb 2e                	jmp    c0027ab8 <__muldf3+0x110>
c0027a8a:	85 c0                	test   eax,eax
c0027a8c:	74 20                	je     c0027aae <__muldf3+0x106>
c0027a8e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027a91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a97:	c1 ef 1f             	shr    edi,0x1f
c0027a9a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027a9d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027aa0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027aa3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027aa6:	09 f9                	or     ecx,edi
c0027aa8:	78 1e                	js     c0027ac8 <__muldf3+0x120>
c0027aaa:	89 c3                	mov    ebx,eax
c0027aac:	eb e0                	jmp    c0027a8e <__muldf3+0xe6>
c0027aae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ab1:	f7 d0                	not    eax
c0027ab3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027ab8:	75 b2                	jne    c0027a6c <__muldf3+0xc4>
c0027aba:	31 ff                	xor    edi,edi
c0027abc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ac3:	e9 b7 01 00 00       	jmp    c0027c7f <__muldf3+0x2d7>
c0027ac8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027acb:	40                   	inc    eax
c0027acc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ad1:	75 57                	jne    c0027b2a <__muldf3+0x182>
c0027ad3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027ad6:	09 f0                	or     eax,esi
c0027ad8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027adc:	74 23                	je     c0027b01 <__muldf3+0x159>
c0027ade:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ae2:	0f 89 91 01 00 00    	jns    c0027c79 <__muldf3+0x2d1>
c0027ae8:	85 c0                	test   eax,eax
c0027aea:	0f 85 89 01 00 00    	jne    c0027c79 <__muldf3+0x2d1>
c0027af0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027af3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027af9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027afc:	e9 7e 01 00 00       	jmp    c0027c7f <__muldf3+0x2d7>
c0027b01:	85 c0                	test   eax,eax
c0027b03:	75 0c                	jne    c0027b11 <__muldf3+0x169>
c0027b05:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b09:	0f 89 6a 01 00 00    	jns    c0027c79 <__muldf3+0x2d1>
c0027b0f:	eb df                	jmp    c0027af0 <__muldf3+0x148>
c0027b11:	01 f6                	add    esi,esi
c0027b13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b16:	c1 ea 1f             	shr    edx,0x1f
c0027b19:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b1c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027b1f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b22:	09 d6                	or     esi,edx
c0027b24:	78 04                	js     c0027b2a <__muldf3+0x182>
c0027b26:	89 c3                	mov    ebx,eax
c0027b28:	eb e7                	jmp    c0027b11 <__muldf3+0x169>
c0027b2a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027b30:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b36:	89 c8                	mov    eax,ecx
c0027b38:	f7 e6                	mul    esi
c0027b3a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027b3d:	89 c7                	mov    edi,eax
c0027b3f:	89 c8                	mov    eax,ecx
c0027b41:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b44:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027b47:	89 c1                	mov    ecx,eax
c0027b49:	89 f0                	mov    eax,esi
c0027b4b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027b4e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027b51:	89 c6                	mov    esi,eax
c0027b53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b56:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b5c:	31 c0                	xor    eax,eax
c0027b5e:	01 f1                	add    ecx,esi
c0027b60:	0f 92 c0             	setb   al
c0027b63:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027b66:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b69:	83 d6 00             	adc    esi,0x0
c0027b6c:	01 c7                	add    edi,eax
c0027b6e:	83 d6 00             	adc    esi,0x0
c0027b71:	01 ca                	add    edx,ecx
c0027b73:	0f 92 c1             	setb   cl
c0027b76:	0f b6 c9             	movzx  ecx,cl
c0027b79:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027b7c:	83 d6 00             	adc    esi,0x0
c0027b7f:	01 cf                	add    edi,ecx
c0027b81:	83 d6 00             	adc    esi,0x0
c0027b84:	31 c9                	xor    ecx,ecx
c0027b86:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027b89:	0f 95 c1             	setne  cl
c0027b8c:	09 cf                	or     edi,ecx
c0027b8e:	85 f6                	test   esi,esi
c0027b90:	78 0c                	js     c0027b9e <__muldf3+0x1f6>
c0027b92:	01 f6                	add    esi,esi
c0027b94:	89 f8                	mov    eax,edi
c0027b96:	c1 e8 1f             	shr    eax,0x1f
c0027b99:	09 c6                	or     esi,eax
c0027b9b:	01 ff                	add    edi,edi
c0027b9d:	4b                   	dec    ebx
c0027b9e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ba4:	0f 8f 85 00 00 00    	jg     c0027c2f <__muldf3+0x287>
c0027baa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027bb0:	85 db                	test   ebx,ebx
c0027bb2:	0f 8f 84 00 00 00    	jg     c0027c3c <__muldf3+0x294>
c0027bb8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027bbb:	7c 79                	jl     c0027c36 <__muldf3+0x28e>
c0027bbd:	ba 01 00 00 00       	mov    edx,0x1
c0027bc2:	29 da                	sub    edx,ebx
c0027bc4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bca:	83 fa 1f             	cmp    edx,0x1f
c0027bcd:	7e 30                	jle    c0027bff <__muldf3+0x257>
c0027bcf:	83 fa 20             	cmp    edx,0x20
c0027bd2:	75 0b                	jne    c0027bdf <__muldf3+0x237>
c0027bd4:	31 c0                	xor    eax,eax
c0027bd6:	85 ff                	test   edi,edi
c0027bd8:	0f 95 c0             	setne  al
c0027bdb:	89 c7                	mov    edi,eax
c0027bdd:	eb 1a                	jmp    c0027bf9 <__muldf3+0x251>
c0027bdf:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027be2:	89 f0                	mov    eax,esi
c0027be4:	d3 e0                	shl    eax,cl
c0027be6:	09 f8                	or     eax,edi
c0027be8:	0f 95 c0             	setne  al
c0027beb:	0f b6 c0             	movzx  eax,al
c0027bee:	89 c7                	mov    edi,eax
c0027bf0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027bf5:	29 d9                	sub    ecx,ebx
c0027bf7:	d3 ee                	shr    esi,cl
c0027bf9:	09 f7                	or     edi,esi
c0027bfb:	31 db                	xor    ebx,ebx
c0027bfd:	eb 3b                	jmp    c0027c3a <__muldf3+0x292>
c0027bff:	83 c3 1f             	add    ebx,0x1f
c0027c02:	89 f0                	mov    eax,esi
c0027c04:	88 d9                	mov    cl,bl
c0027c06:	d3 e0                	shl    eax,cl
c0027c08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c0b:	89 f8                	mov    eax,edi
c0027c0d:	88 d1                	mov    cl,dl
c0027c0f:	d3 e8                	shr    eax,cl
c0027c11:	89 c1                	mov    ecx,eax
c0027c13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c16:	09 c8                	or     eax,ecx
c0027c18:	88 d9                	mov    cl,bl
c0027c1a:	d3 e7                	shl    edi,cl
c0027c1c:	31 db                	xor    ebx,ebx
c0027c1e:	85 ff                	test   edi,edi
c0027c20:	0f 95 c3             	setne  bl
c0027c23:	89 df                	mov    edi,ebx
c0027c25:	09 c7                	or     edi,eax
c0027c27:	88 d1                	mov    cl,dl
c0027c29:	d3 ee                	shr    esi,cl
c0027c2b:	31 db                	xor    ebx,ebx
c0027c2d:	eb 0d                	jmp    c0027c3c <__muldf3+0x294>
c0027c2f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027c34:	eb 02                	jmp    c0027c38 <__muldf3+0x290>
c0027c36:	31 db                	xor    ebx,ebx
c0027c38:	31 ff                	xor    edi,edi
c0027c3a:	31 f6                	xor    esi,esi
c0027c3c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c3f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027c42:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c47:	09 c3                	or     ebx,eax
c0027c49:	c1 e3 14             	shl    ebx,0x14
c0027c4c:	89 f0                	mov    eax,esi
c0027c4e:	c1 e8 0b             	shr    eax,0xb
c0027c51:	09 c3                	or     ebx,eax
c0027c53:	89 f8                	mov    eax,edi
c0027c55:	c1 e8 0b             	shr    eax,0xb
c0027c58:	c1 e6 15             	shl    esi,0x15
c0027c5b:	09 c6                	or     esi,eax
c0027c5d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027c63:	0f 95 c1             	setne  cl
c0027c66:	09 c8                	or     eax,ecx
c0027c68:	83 e0 01             	and    eax,0x1
c0027c6b:	c1 ef 0a             	shr    edi,0xa
c0027c6e:	21 c7                	and    edi,eax
c0027c70:	01 f7                	add    edi,esi
c0027c72:	83 d3 00             	adc    ebx,0x0
c0027c75:	89 da                	mov    edx,ebx
c0027c77:	eb 03                	jmp    c0027c7c <__muldf3+0x2d4>
c0027c79:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c7c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027c7f:	89 f8                	mov    eax,edi
c0027c81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027c84:	83 c4 24             	add    esp,0x24
c0027c87:	5b                   	pop    ebx
c0027c88:	5e                   	pop    esi
c0027c89:	5f                   	pop    edi
c0027c8a:	5d                   	pop    ebp
c0027c8b:	c3                   	ret    

c0027c8c <__divdf3>:
c0027c8c:	55                   	push   ebp
c0027c8d:	89 e5                	mov    ebp,esp
c0027c8f:	57                   	push   edi
c0027c90:	56                   	push   esi
c0027c91:	53                   	push   ebx
c0027c92:	83 ec 2c             	sub    esp,0x2c
c0027c95:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c98:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c9e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ca1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027ca7:	89 ce                	mov    esi,ecx
c0027ca9:	89 c8                	mov    eax,ecx
c0027cab:	c1 f8 14             	sar    eax,0x14
c0027cae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cb1:	89 f8                	mov    eax,edi
c0027cb3:	89 fb                	mov    ebx,edi
c0027cb5:	c1 e3 0b             	shl    ebx,0xb
c0027cb8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027cbb:	c1 e6 0b             	shl    esi,0xb
c0027cbe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cc4:	c1 e8 15             	shr    eax,0x15
c0027cc7:	09 c6                	or     esi,eax
c0027cc9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027ccc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ccf:	89 c2                	mov    edx,eax
c0027cd1:	c1 fa 14             	sar    edx,0x14
c0027cd4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cd7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cda:	89 de                	mov    esi,ebx
c0027cdc:	c1 e6 0b             	shl    esi,0xb
c0027cdf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ce2:	c1 e0 0b             	shl    eax,0xb
c0027ce5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027cea:	c1 eb 15             	shr    ebx,0x15
c0027ced:	09 d8                	or     eax,ebx
c0027cef:	89 c2                	mov    edx,eax
c0027cf1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cf4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cf9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027cfc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d05:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027d08:	29 d8                	sub    eax,ebx
c0027d0a:	05 ff 03 00 00       	add    eax,0x3ff
c0027d0f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d12:	46                   	inc    esi
c0027d13:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027d19:	0f 85 a5 00 00 00    	jne    c0027dc4 <__divdf3+0x138>
c0027d1f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d22:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027d25:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027d29:	74 2a                	je     c0027d55 <__divdf3+0xc9>
c0027d2b:	85 f6                	test   esi,esi
c0027d2d:	0f 85 cc 02 00 00    	jne    c0027fff <__divdf3+0x373>
c0027d33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d36:	40                   	inc    eax
c0027d37:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d3c:	75 26                	jne    c0027d64 <__divdf3+0xd8>
c0027d3e:	85 db                	test   ebx,ebx
c0027d40:	74 22                	je     c0027d64 <__divdf3+0xd8>
c0027d42:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d45:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d48:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d4b:	09 d0                	or     eax,edx
c0027d4d:	0f 85 ac 02 00 00    	jne    c0027fff <__divdf3+0x373>
c0027d53:	eb 63                	jmp    c0027db8 <__divdf3+0x12c>
c0027d55:	85 f6                	test   esi,esi
c0027d57:	75 22                	jne    c0027d7b <__divdf3+0xef>
c0027d59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d5c:	40                   	inc    eax
c0027d5d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d62:	74 36                	je     c0027d9a <__divdf3+0x10e>
c0027d64:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d68:	0f 89 91 02 00 00    	jns    c0027fff <__divdf3+0x373>
c0027d6e:	89 f8                	mov    eax,edi
c0027d70:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027d76:	e9 80 02 00 00       	jmp    c0027ffb <__divdf3+0x36f>
c0027d7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d7e:	01 f6                	add    esi,esi
c0027d80:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d83:	c1 ef 1f             	shr    edi,0x1f
c0027d86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d89:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027d8c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027d8f:	09 f7                	or     edi,esi
c0027d91:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027d94:	78 2e                	js     c0027dc4 <__divdf3+0x138>
c0027d96:	89 c8                	mov    eax,ecx
c0027d98:	eb e1                	jmp    c0027d7b <__divdf3+0xef>
c0027d9a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d9d:	09 d0                	or     eax,edx
c0027d9f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027da3:	74 0f                	je     c0027db4 <__divdf3+0x128>
c0027da5:	85 c0                	test   eax,eax
c0027da7:	74 bb                	je     c0027d64 <__divdf3+0xd8>
c0027da9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027dac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027daf:	e9 4b 02 00 00       	jmp    c0027fff <__divdf3+0x373>
c0027db4:	85 c0                	test   eax,eax
c0027db6:	75 ac                	jne    c0027d64 <__divdf3+0xd8>
c0027db8:	31 ff                	xor    edi,edi
c0027dba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027dbf:	e9 3b 02 00 00       	jmp    c0027fff <__divdf3+0x373>
c0027dc4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027dc7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027dca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027dd0:	75 6b                	jne    c0027e3d <__divdf3+0x1b1>
c0027dd2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027dd5:	09 d6                	or     esi,edx
c0027dd7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027ddb:	74 28                	je     c0027e05 <__divdf3+0x179>
c0027ddd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027de0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027de3:	85 f6                	test   esi,esi
c0027de5:	0f 85 14 02 00 00    	jne    c0027fff <__divdf3+0x373>
c0027deb:	31 ff                	xor    edi,edi
c0027ded:	31 c9                	xor    ecx,ecx
c0027def:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027df2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027df5:	0f 89 04 02 00 00    	jns    c0027fff <__divdf3+0x373>
c0027dfb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027e00:	e9 fa 01 00 00       	jmp    c0027fff <__divdf3+0x373>
c0027e05:	85 f6                	test   esi,esi
c0027e07:	75 1b                	jne    c0027e24 <__divdf3+0x198>
c0027e09:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e0c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e0f:	25 00 00 00 80       	and    eax,0x80000000
c0027e14:	31 c9                	xor    ecx,ecx
c0027e16:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027e1b:	89 cf                	mov    edi,ecx
c0027e1d:	89 c1                	mov    ecx,eax
c0027e1f:	e9 db 01 00 00       	jmp    c0027fff <__divdf3+0x373>
c0027e24:	01 d2                	add    edx,edx
c0027e26:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e29:	c1 eb 1f             	shr    ebx,0x1f
c0027e2c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e2f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027e32:	8d 48 01             	lea    ecx,[eax+0x1]
c0027e35:	09 da                	or     edx,ebx
c0027e37:	78 04                	js     c0027e3d <__divdf3+0x1b1>
c0027e39:	89 c8                	mov    eax,ecx
c0027e3b:	eb e7                	jmp    c0027e24 <__divdf3+0x198>
c0027e3d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e40:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e46:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e4c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027e4f:	39 d6                	cmp    esi,edx
c0027e51:	77 0d                	ja     c0027e60 <__divdf3+0x1d4>
c0027e53:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027e56:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027e59:	72 1b                	jb     c0027e76 <__divdf3+0x1ea>
c0027e5b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027e5e:	75 16                	jne    c0027e76 <__divdf3+0x1ea>
c0027e60:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e63:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e66:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027e69:	83 de 00             	sbb    esi,0x0
c0027e6c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027e6f:	ba 01 00 00 00       	mov    edx,0x1
c0027e74:	eb 02                	jmp    c0027e78 <__divdf3+0x1ec>
c0027e76:	31 d2                	xor    edx,edx
c0027e78:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027e7f:	31 ff                	xor    edi,edi
c0027e81:	01 ff                	add    edi,edi
c0027e83:	89 d1                	mov    ecx,edx
c0027e85:	c1 e9 1f             	shr    ecx,0x1f
c0027e88:	09 cf                	or     edi,ecx
c0027e8a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027e8d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027e90:	89 da                	mov    edx,ebx
c0027e92:	89 f3                	mov    ebx,esi
c0027e94:	8d 34 36             	lea    esi,[esi+esi*1]
c0027e97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e9a:	c1 e9 1f             	shr    ecx,0x1f
c0027e9d:	09 ce                	or     esi,ecx
c0027e9f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ea2:	01 c9                	add    ecx,ecx
c0027ea4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027ea7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027eaa:	85 db                	test   ebx,ebx
c0027eac:	78 29                	js     c0027ed7 <__divdf3+0x24b>
c0027eae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027eb1:	72 07                	jb     c0027eba <__divdf3+0x22e>
c0027eb3:	75 3c                	jne    c0027ef1 <__divdf3+0x265>
c0027eb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027eb8:	77 37                	ja     c0027ef1 <__divdf3+0x265>
c0027eba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027ebd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027ec0:	31 d2                	xor    edx,edx
c0027ec2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027ec5:	0f 97 c2             	seta   dl
c0027ec8:	29 d6                	sub    esi,edx
c0027eca:	89 d9                	mov    ecx,ebx
c0027ecc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027ecf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027ed2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027ed5:	eb 17                	jmp    c0027eee <__divdf3+0x262>
c0027ed7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027eda:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027edd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ee0:	0f 97 c1             	seta   cl
c0027ee3:	0f b6 c9             	movzx  ecx,cl
c0027ee6:	29 ce                	sub    esi,ecx
c0027ee8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027eeb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027eee:	83 ca 01             	or     edx,0x1
c0027ef1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027ef4:	75 8b                	jne    c0027e81 <__divdf3+0x1f5>
c0027ef6:	c1 e7 09             	shl    edi,0x9
c0027ef9:	89 d1                	mov    ecx,edx
c0027efb:	c1 e9 17             	shr    ecx,0x17
c0027efe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f01:	09 f3                	or     ebx,esi
c0027f03:	0f 95 c3             	setne  bl
c0027f06:	0f b6 db             	movzx  ebx,bl
c0027f09:	c1 e2 09             	shl    edx,0x9
c0027f0c:	09 d3                	or     ebx,edx
c0027f0e:	89 ca                	mov    edx,ecx
c0027f10:	09 fa                	or     edx,edi
c0027f12:	78 0c                	js     c0027f20 <__divdf3+0x294>
c0027f14:	01 d2                	add    edx,edx
c0027f16:	89 d9                	mov    ecx,ebx
c0027f18:	c1 e9 1f             	shr    ecx,0x1f
c0027f1b:	09 ca                	or     edx,ecx
c0027f1d:	01 db                	add    ebx,ebx
c0027f1f:	48                   	dec    eax
c0027f20:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027f25:	0f 8f 83 00 00 00    	jg     c0027fae <__divdf3+0x322>
c0027f2b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027f31:	85 c0                	test   eax,eax
c0027f33:	0f 8f 82 00 00 00    	jg     c0027fbb <__divdf3+0x32f>
c0027f39:	83 f8 cc             	cmp    eax,0xffffffcc
c0027f3c:	7c 77                	jl     c0027fb5 <__divdf3+0x329>
c0027f3e:	be 01 00 00 00       	mov    esi,0x1
c0027f43:	29 c6                	sub    esi,eax
c0027f45:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f4b:	83 fe 1f             	cmp    esi,0x1f
c0027f4e:	7e 2f                	jle    c0027f7f <__divdf3+0x2f3>
c0027f50:	83 fe 20             	cmp    esi,0x20
c0027f53:	75 0a                	jne    c0027f5f <__divdf3+0x2d3>
c0027f55:	85 db                	test   ebx,ebx
c0027f57:	0f 95 c3             	setne  bl
c0027f5a:	0f b6 db             	movzx  ebx,bl
c0027f5d:	eb 1a                	jmp    c0027f79 <__divdf3+0x2ed>
c0027f5f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027f62:	89 d7                	mov    edi,edx
c0027f64:	d3 e7                	shl    edi,cl
c0027f66:	89 f9                	mov    ecx,edi
c0027f68:	09 d9                	or     ecx,ebx
c0027f6a:	0f 95 c3             	setne  bl
c0027f6d:	0f b6 db             	movzx  ebx,bl
c0027f70:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f75:	29 c1                	sub    ecx,eax
c0027f77:	d3 ea                	shr    edx,cl
c0027f79:	09 d3                	or     ebx,edx
c0027f7b:	31 c0                	xor    eax,eax
c0027f7d:	eb 3a                	jmp    c0027fb9 <__divdf3+0x32d>
c0027f7f:	83 c0 1f             	add    eax,0x1f
c0027f82:	89 d7                	mov    edi,edx
c0027f84:	88 c1                	mov    cl,al
c0027f86:	d3 e7                	shl    edi,cl
c0027f88:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f8b:	89 df                	mov    edi,ebx
c0027f8d:	89 f1                	mov    ecx,esi
c0027f8f:	d3 ef                	shr    edi,cl
c0027f91:	89 f9                	mov    ecx,edi
c0027f93:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f96:	09 cf                	or     edi,ecx
c0027f98:	88 c1                	mov    cl,al
c0027f9a:	d3 e3                	shl    ebx,cl
c0027f9c:	85 db                	test   ebx,ebx
c0027f9e:	0f 95 c3             	setne  bl
c0027fa1:	0f b6 db             	movzx  ebx,bl
c0027fa4:	09 fb                	or     ebx,edi
c0027fa6:	89 f1                	mov    ecx,esi
c0027fa8:	d3 ea                	shr    edx,cl
c0027faa:	31 c0                	xor    eax,eax
c0027fac:	eb 0d                	jmp    c0027fbb <__divdf3+0x32f>
c0027fae:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027fb3:	eb 02                	jmp    c0027fb7 <__divdf3+0x32b>
c0027fb5:	31 c0                	xor    eax,eax
c0027fb7:	31 db                	xor    ebx,ebx
c0027fb9:	31 d2                	xor    edx,edx
c0027fbb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027fbe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027fc1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027fc7:	09 c8                	or     eax,ecx
c0027fc9:	c1 e0 14             	shl    eax,0x14
c0027fcc:	89 d1                	mov    ecx,edx
c0027fce:	c1 e9 0b             	shr    ecx,0xb
c0027fd1:	09 c8                	or     eax,ecx
c0027fd3:	89 c6                	mov    esi,eax
c0027fd5:	89 d9                	mov    ecx,ebx
c0027fd7:	c1 e9 0b             	shr    ecx,0xb
c0027fda:	c1 e2 15             	shl    edx,0x15
c0027fdd:	09 ca                	or     edx,ecx
c0027fdf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027fe5:	0f 95 c0             	setne  al
c0027fe8:	09 c1                	or     ecx,eax
c0027fea:	83 e1 01             	and    ecx,0x1
c0027fed:	c1 eb 0a             	shr    ebx,0xa
c0027ff0:	21 cb                	and    ebx,ecx
c0027ff2:	01 d3                	add    ebx,edx
c0027ff4:	89 d8                	mov    eax,ebx
c0027ff6:	83 d6 00             	adc    esi,0x0
c0027ff9:	89 f2                	mov    edx,esi
c0027ffb:	89 c7                	mov    edi,eax
c0027ffd:	89 d1                	mov    ecx,edx
c0027fff:	89 f8                	mov    eax,edi
c0028001:	89 ca                	mov    edx,ecx
c0028003:	83 c4 2c             	add    esp,0x2c
c0028006:	5b                   	pop    ebx
c0028007:	5e                   	pop    esi
c0028008:	5f                   	pop    edi
c0028009:	5d                   	pop    ebp
c002800a:	c3                   	ret    

c002800b <__floatsidf>:
c002800b:	55                   	push   ebp
c002800c:	89 e5                	mov    ebp,esp
c002800e:	56                   	push   esi
c002800f:	53                   	push   ebx
c0028010:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028013:	85 db                	test   ebx,ebx
c0028015:	7e 15                	jle    c002802c <__floatsidf+0x21>
c0028017:	0f bd cb             	bsr    ecx,ebx
c002801a:	83 f1 1f             	xor    ecx,0x1f
c002801d:	d3 e3                	shl    ebx,cl
c002801f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028025:	b8 1e 04 00 00       	mov    eax,0x41e
c002802a:	eb 21                	jmp    c002804d <__floatsidf+0x42>
c002802c:	b8 00 00 00 00       	mov    eax,0x0
c0028031:	ba 00 00 00 00       	mov    edx,0x0
c0028036:	74 2a                	je     c0028062 <__floatsidf+0x57>
c0028038:	f7 db                	neg    ebx
c002803a:	0f bd cb             	bsr    ecx,ebx
c002803d:	83 f1 1f             	xor    ecx,0x1f
c0028040:	d3 e3                	shl    ebx,cl
c0028042:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028048:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002804d:	29 c8                	sub    eax,ecx
c002804f:	c1 e0 14             	shl    eax,0x14
c0028052:	89 c1                	mov    ecx,eax
c0028054:	89 de                	mov    esi,ebx
c0028056:	c1 ee 0b             	shr    esi,0xb
c0028059:	09 f1                	or     ecx,esi
c002805b:	89 ca                	mov    edx,ecx
c002805d:	c1 e3 15             	shl    ebx,0x15
c0028060:	89 d8                	mov    eax,ebx
c0028062:	5b                   	pop    ebx
c0028063:	5e                   	pop    esi
c0028064:	5d                   	pop    ebp
c0028065:	c3                   	ret    

c0028066 <__floatunsidf>:
c0028066:	55                   	push   ebp
c0028067:	89 e5                	mov    ebp,esp
c0028069:	56                   	push   esi
c002806a:	53                   	push   ebx
c002806b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002806e:	85 db                	test   ebx,ebx
c0028070:	74 2a                	je     c002809c <__floatunsidf+0x36>
c0028072:	0f bd cb             	bsr    ecx,ebx
c0028075:	83 f1 1f             	xor    ecx,0x1f
c0028078:	d3 e3                	shl    ebx,cl
c002807a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028080:	b8 1e 04 00 00       	mov    eax,0x41e
c0028085:	29 c8                	sub    eax,ecx
c0028087:	c1 e0 14             	shl    eax,0x14
c002808a:	89 c1                	mov    ecx,eax
c002808c:	89 de                	mov    esi,ebx
c002808e:	c1 ee 0b             	shr    esi,0xb
c0028091:	09 f1                	or     ecx,esi
c0028093:	89 ca                	mov    edx,ecx
c0028095:	c1 e3 15             	shl    ebx,0x15
c0028098:	89 d8                	mov    eax,ebx
c002809a:	eb 04                	jmp    c00280a0 <__floatunsidf+0x3a>
c002809c:	31 c0                	xor    eax,eax
c002809e:	31 d2                	xor    edx,edx
c00280a0:	5b                   	pop    ebx
c00280a1:	5e                   	pop    esi
c00280a2:	5d                   	pop    ebp
c00280a3:	c3                   	ret    

c00280a4 <__fixdfsi>:
c00280a4:	55                   	push   ebp
c00280a5:	89 e5                	mov    ebp,esp
c00280a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280aa:	89 d1                	mov    ecx,edx
c00280ac:	c1 e1 0b             	shl    ecx,0xb
c00280af:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00280b8:	c1 e8 15             	shr    eax,0x15
c00280bb:	09 c1                	or     ecx,eax
c00280bd:	c1 fa 14             	sar    edx,0x14
c00280c0:	78 1f                	js     c00280e1 <__fixdfsi+0x3d>
c00280c2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00280c8:	31 c0                	xor    eax,eax
c00280ca:	83 fa 1e             	cmp    edx,0x1e
c00280cd:	77 40                	ja     c002810f <__fixdfsi+0x6b>
c00280cf:	89 c8                	mov    eax,ecx
c00280d1:	0d 00 00 00 80       	or     eax,0x80000000
c00280d6:	b9 1f 00 00 00       	mov    ecx,0x1f
c00280db:	29 d1                	sub    ecx,edx
c00280dd:	d3 e8                	shr    eax,cl
c00280df:	eb 2e                	jmp    c002810f <__fixdfsi+0x6b>
c00280e1:	31 c0                	xor    eax,eax
c00280e3:	81 c2 01 04 00 00    	add    edx,0x401
c00280e9:	78 24                	js     c002810f <__fixdfsi+0x6b>
c00280eb:	83 fa 1e             	cmp    edx,0x1e
c00280ee:	7e 09                	jle    c00280f9 <__fixdfsi+0x55>
c00280f0:	83 fa 1f             	cmp    edx,0x1f
c00280f3:	75 18                	jne    c002810d <__fixdfsi+0x69>
c00280f5:	85 c9                	test   ecx,ecx
c00280f7:	75 14                	jne    c002810d <__fixdfsi+0x69>
c00280f9:	89 c8                	mov    eax,ecx
c00280fb:	0d 00 00 00 80       	or     eax,0x80000000
c0028100:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028105:	29 d1                	sub    ecx,edx
c0028107:	d3 e8                	shr    eax,cl
c0028109:	f7 d8                	neg    eax
c002810b:	eb 02                	jmp    c002810f <__fixdfsi+0x6b>
c002810d:	31 c0                	xor    eax,eax
c002810f:	5d                   	pop    ebp
c0028110:	c3                   	ret    

c0028111 <__fixunsdfsi>:
c0028111:	55                   	push   ebp
c0028112:	89 e5                	mov    ebp,esp
c0028114:	53                   	push   ebx
c0028115:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028118:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002811b:	89 d3                	mov    ebx,edx
c002811d:	c1 fb 14             	sar    ebx,0x14
c0028120:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028126:	31 c0                	xor    eax,eax
c0028128:	83 fb 1f             	cmp    ebx,0x1f
c002812b:	77 1d                	ja     c002814a <__fixunsdfsi+0x39>
c002812d:	89 d0                	mov    eax,edx
c002812f:	c1 e0 0b             	shl    eax,0xb
c0028132:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028137:	c1 e9 15             	shr    ecx,0x15
c002813a:	09 c8                	or     eax,ecx
c002813c:	0d 00 00 00 80       	or     eax,0x80000000
c0028141:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028146:	29 d9                	sub    ecx,ebx
c0028148:	d3 e8                	shr    eax,cl
c002814a:	5b                   	pop    ebx
c002814b:	5d                   	pop    ebp
c002814c:	c3                   	ret    

c002814d <__cmpdf2>:
c002814d:	55                   	push   ebp
c002814e:	89 e5                	mov    ebp,esp
c0028150:	57                   	push   edi
c0028151:	56                   	push   esi
c0028152:	53                   	push   ebx
c0028153:	83 ec 0c             	sub    esp,0xc
c0028156:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028159:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002815c:	89 ca                	mov    edx,ecx
c002815e:	c1 ea 14             	shr    edx,0x14
c0028161:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028167:	89 cb                	mov    ebx,ecx
c0028169:	c1 fb 1f             	sar    ebx,0x1f
c002816c:	31 da                	xor    edx,ebx
c002816e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028171:	89 df                	mov    edi,ebx
c0028173:	c1 e7 0b             	shl    edi,0xb
c0028176:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028179:	c1 e1 0b             	shl    ecx,0xb
c002817c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028182:	c1 eb 15             	shr    ebx,0x15
c0028185:	09 d9                	or     ecx,ebx
c0028187:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002818a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002818d:	89 ce                	mov    esi,ecx
c002818f:	c1 ee 14             	shr    esi,0x14
c0028192:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028198:	89 cb                	mov    ebx,ecx
c002819a:	c1 fb 1f             	sar    ebx,0x1f
c002819d:	31 de                	xor    esi,ebx
c002819f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00281a2:	89 df                	mov    edi,ebx
c00281a4:	c1 e7 0b             	shl    edi,0xb
c00281a7:	c1 e1 0b             	shl    ecx,0xb
c00281aa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281b0:	c1 eb 15             	shr    ebx,0x15
c00281b3:	09 d9                	or     ecx,ebx
c00281b5:	89 d3                	mov    ebx,edx
c00281b7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00281bd:	43                   	inc    ebx
c00281be:	83 fb 01             	cmp    ebx,0x1
c00281c1:	77 08                	ja     c00281cb <__cmpdf2+0x7e>
c00281c3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281c6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281c9:	75 68                	jne    c0028233 <__cmpdf2+0xe6>
c00281cb:	89 f3                	mov    ebx,esi
c00281cd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00281d3:	43                   	inc    ebx
c00281d4:	83 fb 01             	cmp    ebx,0x1
c00281d7:	77 06                	ja     c00281df <__cmpdf2+0x92>
c00281d9:	89 fb                	mov    ebx,edi
c00281db:	09 cb                	or     ebx,ecx
c00281dd:	75 54                	jne    c0028233 <__cmpdf2+0xe6>
c00281df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00281e2:	09 f8                	or     eax,edi
c00281e4:	09 c8                	or     eax,ecx
c00281e6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00281e9:	75 12                	jne    c00281fd <__cmpdf2+0xb0>
c00281eb:	8d 42 01             	lea    eax,[edx+0x1]
c00281ee:	83 f8 01             	cmp    eax,0x1
c00281f1:	77 0a                	ja     c00281fd <__cmpdf2+0xb0>
c00281f3:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281f6:	31 c0                	xor    eax,eax
c00281f8:	83 fb 01             	cmp    ebx,0x1
c00281fb:	76 36                	jbe    c0028233 <__cmpdf2+0xe6>
c00281fd:	b8 01 00 00 00       	mov    eax,0x1
c0028202:	39 f2                	cmp    edx,esi
c0028204:	7f 2d                	jg     c0028233 <__cmpdf2+0xe6>
c0028206:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002820b:	7c 26                	jl     c0028233 <__cmpdf2+0xe6>
c002820d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028210:	77 07                	ja     c0028219 <__cmpdf2+0xcc>
c0028212:	72 16                	jb     c002822a <__cmpdf2+0xdd>
c0028214:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028217:	76 0a                	jbe    c0028223 <__cmpdf2+0xd6>
c0028219:	89 d0                	mov    eax,edx
c002821b:	c1 f8 1f             	sar    eax,0x1f
c002821e:	83 c8 01             	or     eax,0x1
c0028221:	eb 10                	jmp    c0028233 <__cmpdf2+0xe6>
c0028223:	b8 00 00 00 00       	mov    eax,0x0
c0028228:	73 09                	jae    c0028233 <__cmpdf2+0xe6>
c002822a:	89 d0                	mov    eax,edx
c002822c:	c1 f8 1f             	sar    eax,0x1f
c002822f:	83 e0 02             	and    eax,0x2
c0028232:	48                   	dec    eax
c0028233:	83 c4 0c             	add    esp,0xc
c0028236:	5b                   	pop    ebx
c0028237:	5e                   	pop    esi
c0028238:	5f                   	pop    edi
c0028239:	5d                   	pop    ebp
c002823a:	c3                   	ret    

c002823b <__eqdf2>:
c002823b:	55                   	push   ebp
c002823c:	89 e5                	mov    ebp,esp
c002823e:	50                   	push   eax
c002823f:	6a 01                	push   0x1
c0028241:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028244:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028247:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002824a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002824d:	e8 fb fe ff ff       	call   c002814d <__cmpdf2>
c0028252:	83 c4 18             	add    esp,0x18
c0028255:	c9                   	leave  
c0028256:	c3                   	ret    

c0028257 <__nedf2>:
c0028257:	eb e2                	jmp    c002823b <__eqdf2>

c0028259 <__gtdf2>:
c0028259:	55                   	push   ebp
c002825a:	89 e5                	mov    ebp,esp
c002825c:	50                   	push   eax
c002825d:	6a ff                	push   0xffffffff
c002825f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028262:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028268:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002826b:	e8 dd fe ff ff       	call   c002814d <__cmpdf2>
c0028270:	83 c4 18             	add    esp,0x18
c0028273:	c9                   	leave  
c0028274:	c3                   	ret    

c0028275 <__gedf2>:
c0028275:	eb e2                	jmp    c0028259 <__gtdf2>

c0028277 <__ltdf2>:
c0028277:	eb c2                	jmp    c002823b <__eqdf2>

c0028279 <__ledf2>:
c0028279:	eb c0                	jmp    c002823b <__eqdf2>

c002827b <__truncdfsf2>:
c002827b:	55                   	push   ebp
c002827c:	89 e5                	mov    ebp,esp
c002827e:	57                   	push   edi
c002827f:	56                   	push   esi
c0028280:	53                   	push   ebx
c0028281:	83 ec 0c             	sub    esp,0xc
c0028284:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028287:	89 d1                	mov    ecx,edx
c0028289:	c1 f9 14             	sar    ecx,0x14
c002828c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002828f:	89 df                	mov    edi,ebx
c0028291:	c1 e7 0b             	shl    edi,0xb
c0028294:	89 d0                	mov    eax,edx
c0028296:	c1 e0 0b             	shl    eax,0xb
c0028299:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002829e:	c1 eb 15             	shr    ebx,0x15
c00282a1:	09 d8                	or     eax,ebx
c00282a3:	89 cb                	mov    ebx,ecx
c00282a5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282ab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00282b1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00282b7:	0f 86 9e 00 00 00    	jbe    c002835b <__truncdfsf2+0xe0>
c00282bd:	85 db                	test   ebx,ebx
c00282bf:	75 0a                	jne    c00282cb <__truncdfsf2+0x50>
c00282c1:	c1 fa 17             	sar    edx,0x17
c00282c4:	30 d2                	xor    dl,dl
c00282c6:	e9 84 00 00 00       	jmp    c002834f <__truncdfsf2+0xd4>
c00282cb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00282d1:	83 fe 83             	cmp    esi,0xffffff83
c00282d4:	7d 4b                	jge    c0028321 <__truncdfsf2+0xa6>
c00282d6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00282db:	29 f1                	sub    ecx,esi
c00282dd:	83 f9 1f             	cmp    ecx,0x1f
c00282e0:	7f 6b                	jg     c002834d <__truncdfsf2+0xd2>
c00282e2:	0d 00 00 00 80       	or     eax,0x80000000
c00282e7:	89 c3                	mov    ebx,eax
c00282e9:	d3 eb                	shr    ebx,cl
c00282eb:	be 01 00 00 00       	mov    esi,0x1
c00282f0:	d3 e6                	shl    esi,cl
c00282f2:	4e                   	dec    esi
c00282f3:	21 f0                	and    eax,esi
c00282f5:	09 f8                	or     eax,edi
c00282f7:	0f 95 c0             	setne  al
c00282fa:	0f b6 c0             	movzx  eax,al
c00282fd:	09 c3                	or     ebx,eax
c00282ff:	89 d9                	mov    ecx,ebx
c0028301:	c1 e9 08             	shr    ecx,0x8
c0028304:	f6 c3 7f             	test   bl,0x7f
c0028307:	0f 95 c0             	setne  al
c002830a:	09 c8                	or     eax,ecx
c002830c:	83 e0 01             	and    eax,0x1
c002830f:	c1 eb 07             	shr    ebx,0x7
c0028312:	21 c3                	and    ebx,eax
c0028314:	81 e2 00 00 00 80    	and    edx,0x80000000
c002831a:	09 d1                	or     ecx,edx
c002831c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002831f:	eb 76                	jmp    c0028397 <__truncdfsf2+0x11c>
c0028321:	83 c6 80             	add    esi,0xffffff80
c0028324:	7e 1d                	jle    c0028343 <__truncdfsf2+0xc8>
c0028326:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002832c:	75 0b                	jne    c0028339 <__truncdfsf2+0xbe>
c002832e:	09 f8                	or     eax,edi
c0028330:	74 09                	je     c002833b <__truncdfsf2+0xc0>
c0028332:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028337:	eb 02                	jmp    c002833b <__truncdfsf2+0xc0>
c0028339:	31 c0                	xor    eax,eax
c002833b:	c1 fa 17             	sar    edx,0x17
c002833e:	80 ca ff             	or     dl,0xff
c0028341:	eb 0e                	jmp    c0028351 <__truncdfsf2+0xd6>
c0028343:	c1 fa 1f             	sar    edx,0x1f
c0028346:	c1 e2 08             	shl    edx,0x8
c0028349:	09 ca                	or     edx,ecx
c002834b:	eb 04                	jmp    c0028351 <__truncdfsf2+0xd6>
c002834d:	31 d2                	xor    edx,edx
c002834f:	31 c0                	xor    eax,eax
c0028351:	c1 e2 17             	shl    edx,0x17
c0028354:	c1 e8 08             	shr    eax,0x8
c0028357:	09 d0                	or     eax,edx
c0028359:	eb 3c                	jmp    c0028397 <__truncdfsf2+0x11c>
c002835b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028361:	89 ca                	mov    edx,ecx
c0028363:	c1 fa 0b             	sar    edx,0xb
c0028366:	c1 e2 08             	shl    edx,0x8
c0028369:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002836c:	31 db                	xor    ebx,ebx
c002836e:	85 ff                	test   edi,edi
c0028370:	0f 95 c3             	setne  bl
c0028373:	09 d8                	or     eax,ebx
c0028375:	89 c3                	mov    ebx,eax
c0028377:	c1 eb 08             	shr    ebx,0x8
c002837a:	a8 7f                	test   al,0x7f
c002837c:	0f 95 c2             	setne  dl
c002837f:	89 d6                	mov    esi,edx
c0028381:	09 de                	or     esi,ebx
c0028383:	83 e6 01             	and    esi,0x1
c0028386:	c1 e8 07             	shr    eax,0x7
c0028389:	21 f0                	and    eax,esi
c002838b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002838e:	09 ca                	or     edx,ecx
c0028390:	c1 e2 17             	shl    edx,0x17
c0028393:	09 da                	or     edx,ebx
c0028395:	01 d0                	add    eax,edx
c0028397:	83 c4 0c             	add    esp,0xc
c002839a:	5b                   	pop    ebx
c002839b:	5e                   	pop    esi
c002839c:	5f                   	pop    edi
c002839d:	5d                   	pop    ebp
c002839e:	c3                   	ret    

c002839f <__extendsfdf2>:
c002839f:	55                   	push   ebp
c00283a0:	89 e5                	mov    ebp,esp
c00283a2:	57                   	push   edi
c00283a3:	56                   	push   esi
c00283a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00283a7:	89 d1                	mov    ecx,edx
c00283a9:	c1 f9 17             	sar    ecx,0x17
c00283ac:	c1 e2 08             	shl    edx,0x8
c00283af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00283b5:	89 c8                	mov    eax,ecx
c00283b7:	80 e4 f8             	and    ah,0xf8
c00283ba:	8d 71 01             	lea    esi,[ecx+0x1]
c00283bd:	81 e6 fe 00 00 00    	and    esi,0xfe
c00283c3:	75 27                	jne    c00283ec <__extendsfdf2+0x4d>
c00283c5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00283cb:	75 18                	jne    c00283e5 <__extendsfdf2+0x46>
c00283cd:	85 d2                	test   edx,edx
c00283cf:	74 20                	je     c00283f1 <__extendsfdf2+0x52>
c00283d1:	41                   	inc    ecx
c00283d2:	01 d2                	add    edx,edx
c00283d4:	79 fb                	jns    c00283d1 <__extendsfdf2+0x32>
c00283d6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00283dc:	29 c8                	sub    eax,ecx
c00283de:	05 81 03 00 00       	add    eax,0x381
c00283e3:	eb 0c                	jmp    c00283f1 <__extendsfdf2+0x52>
c00283e5:	05 00 07 00 00       	add    eax,0x700
c00283ea:	eb 05                	jmp    c00283f1 <__extendsfdf2+0x52>
c00283ec:	05 80 03 00 00       	add    eax,0x380
c00283f1:	c1 e0 14             	shl    eax,0x14
c00283f4:	89 c1                	mov    ecx,eax
c00283f6:	89 d0                	mov    eax,edx
c00283f8:	c1 e8 0b             	shr    eax,0xb
c00283fb:	09 c1                	or     ecx,eax
c00283fd:	c1 e2 15             	shl    edx,0x15
c0028400:	89 d0                	mov    eax,edx
c0028402:	89 ca                	mov    edx,ecx
c0028404:	5e                   	pop    esi
c0028405:	5f                   	pop    edi
c0028406:	5d                   	pop    ebp
c0028407:	c3                   	ret    
c0028408:	66 90                	xchg   ax,ax
c002840a:	66 90                	xchg   ax,ax
c002840c:	66 90                	xchg   ax,ax
c002840e:	66 90                	xchg   ax,ax

c0028410 <fabs>:
c0028410:	83 ec 0c             	sub    esp,0xc
c0028413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028417:	89 04 24             	mov    DWORD PTR [esp],eax
c002841a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002841e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028423:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028427:	dd 04 24             	fld    QWORD PTR [esp]
c002842a:	83 c4 0c             	add    esp,0xc
c002842d:	c3                   	ret    
c002842e:	66 90                	xchg   ax,ax

c0028430 <lrint>:
c0028430:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028434:	83 ec 04             	sub    esp,0x4
c0028437:	db 1c 24             	fistp  DWORD PTR [esp]
c002843a:	58                   	pop    eax
c002843b:	c3                   	ret    

c002843c <lrintf>:
c002843c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028440:	83 ec 04             	sub    esp,0x4
c0028443:	db 1c 24             	fistp  DWORD PTR [esp]
c0028446:	58                   	pop    eax
c0028447:	c3                   	ret    

Disassembly of section .init:

c0028448 <_init>:
c0028448:	55                   	push   ebp
c0028449:	89 e5                	mov    ebp,esp
c002844b:	e8 c8 7c fd ff       	call   c0000118 <frame_dummy>
c0028450:	e8 5b e0 ff ff       	call   c00264b0 <__do_global_ctors_aux>
c0028455:	5d                   	pop    ebp
c0028456:	c3                   	ret    

Disassembly of section .fini:

c0028457 <_fini>:
c0028457:	55                   	push   ebp
c0028458:	89 e5                	mov    ebp,esp
c002845a:	e8 49 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002845f:	5d                   	pop    ebp
c0028460:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028462 <Computer::~Computer()>:
c0028462:	83 ec 0c             	sub    esp,0xc
c0028465:	ba dc 9f 02 c0       	mov    edx,0xc0029fdc
c002846a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846e:	89 10                	mov    DWORD PTR [eax],edx
c0028470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028474:	83 ec 0c             	sub    esp,0xc
c0028477:	50                   	push   eax
c0028478:	e8 e9 b5 fe ff       	call   c0013a66 <Device::~Device()>
c002847d:	83 c4 10             	add    esp,0x10
c0028480:	90                   	nop
c0028481:	83 c4 0c             	add    esp,0xc
c0028484:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028486 <Computer::~Computer()>:
c0028486:	83 ec 0c             	sub    esp,0xc
c0028489:	83 ec 0c             	sub    esp,0xc
c002848c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028490:	e8 cd ff ff ff       	call   c0028462 <Computer::~Computer()>
c0028495:	83 c4 10             	add    esp,0x10
c0028498:	83 ec 08             	sub    esp,0x8
c002849b:	68 ec 01 00 00       	push   0x1ec
c00284a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284a4:	e8 de a1 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00284a9:	83 c4 10             	add    esp,0x10
c00284ac:	83 c4 0c             	add    esp,0xc
c00284af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00284b0 <idleCommon()>:
c00284b0:	83 ec 0c             	sub    esp,0xc
c00284b3:	fa                   	cli    
c00284b4:	ff 05 88 0f 03 c0    	inc    DWORD PTR ds:0xc0030f88
c00284ba:	e8 9c 55 ff ff       	call   c001da5b <schedule()>
c00284bf:	a1 88 0f 03 c0       	mov    eax,ds:0xc0030f88
c00284c4:	48                   	dec    eax
c00284c5:	a3 88 0f 03 c0       	mov    ds:0xc0030f88,eax
c00284ca:	75 01                	jne    c00284cd <idleCommon()+0x1d>
c00284cc:	fb                   	sti    
c00284cd:	83 c4 0c             	add    esp,0xc
c00284d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00284d2 <LinkedList<UnixFile>::~LinkedList()>:
c00284d2:	90                   	nop
c00284d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00284d4 <LinkedList<UnixFile>::LinkedList()>:
c00284d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028502:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002850d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028514:	90                   	nop
c0028515:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028516 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028516:	83 ec 0c             	sub    esp,0xc
c0028519:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002851e:	75 10                	jne    c0028530 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	68 94 a2 02 c0       	push   0xc002a294
c0028528:	e8 9e 19 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002852d:	83 c4 10             	add    esp,0x10
c0028530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028534:	8b 00                	mov    eax,DWORD PTR [eax]
c0028536:	85 c0                	test   eax,eax
c0028538:	74 34                	je     c002856e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002853a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028541:	85 c0                	test   eax,eax
c0028543:	74 29                	je     c002856e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028549:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002854c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028550:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028557:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002855b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002855e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002856c:	eb 65                	jmp    c00285d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002856e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028572:	8b 00                	mov    eax,DWORD PTR [eax]
c0028574:	85 c0                	test   eax,eax
c0028576:	75 4b                	jne    c00285c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857f:	85 c0                	test   eax,eax
c0028581:	75 40                	jne    c00285c3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002858b:	89 10                	mov    DWORD PTR [eax],edx
c002858d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028591:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028595:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002859f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285ad:	85 c0                	test   eax,eax
c00285af:	74 22                	je     c00285d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285b1:	83 ec 0c             	sub    esp,0xc
c00285b4:	68 b6 a2 02 c0       	push   0xc002a2b6
c00285b9:	e8 0d 19 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00285be:	83 c4 10             	add    esp,0x10
c00285c1:	eb 10                	jmp    c00285d3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285c3:	83 ec 0c             	sub    esp,0xc
c00285c6:	68 c0 a2 02 c0       	push   0xc002a2c0
c00285cb:	e8 fb 18 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00285d0:	83 c4 10             	add    esp,0x10
c00285d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285da:	8d 50 01             	lea    edx,[eax+0x1]
c00285dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285e4:	90                   	nop
c00285e5:	83 c4 0c             	add    esp,0xc
c00285e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00285ea <LinkedList<UnixFile>::getFirstElement()>:
c00285ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00285f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00285f2 <LinkedList<UnixFile>::removeFirst()>:
c00285f2:	83 ec 0c             	sub    esp,0xc
c00285f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00285fb:	85 c0                	test   eax,eax
c00285fd:	75 12                	jne    c0028611 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00285ff:	83 ec 0c             	sub    esp,0xc
c0028602:	68 cc a2 02 c0       	push   0xc002a2cc
c0028607:	e8 bf 18 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002860c:	83 c4 10             	add    esp,0x10
c002860f:	eb 7e                	jmp    c002868f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028618:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002861b:	85 c0                	test   eax,eax
c002861d:	74 10                	je     c002862f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002861f:	83 ec 0c             	sub    esp,0xc
c0028622:	68 17 a3 02 c0       	push   0xc002a317
c0028627:	e8 9f 18 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002862c:	83 c4 10             	add    esp,0x10
c002862f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028633:	8b 00                	mov    eax,DWORD PTR [eax]
c0028635:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028638:	85 c0                	test   eax,eax
c002863a:	75 33                	jne    c002866f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002863c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028640:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028655:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028658:	83 f8 01             	cmp    eax,0x1
c002865b:	74 21                	je     c002867e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002865d:	83 ec 0c             	sub    esp,0xc
c0028660:	68 f0 a2 02 c0       	push   0xc002a2f0
c0028665:	e8 61 18 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002866a:	83 c4 10             	add    esp,0x10
c002866d:	eb 0f                	jmp    c002867e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002866f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028673:	8b 00                	mov    eax,DWORD PTR [eax]
c0028675:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867c:	89 10                	mov    DWORD PTR [eax],edx
c002867e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028682:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028685:	8d 50 ff             	lea    edx,[eax-0x1]
c0028688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002868c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002868f:	83 c4 0c             	add    esp,0xc
c0028692:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028694 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028698:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002869b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002869c <DriverlessDevice::~DriverlessDevice()>:
c002869c:	ba 9c ab 02 c0       	mov    edx,0xc002ab9c
c00286a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286a5:	89 10                	mov    DWORD PTR [eax],edx
c00286a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ab:	50                   	push   eax
c00286ac:	e8 b5 b3 fe ff       	call   c0013a66 <Device::~Device()>
c00286b1:	83 c4 04             	add    esp,0x4
c00286b4:	90                   	nop
c00286b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00286b6 <DriverlessDevice::~DriverlessDevice()>:
c00286b6:	83 ec 0c             	sub    esp,0xc
c00286b9:	83 ec 0c             	sub    esp,0xc
c00286bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286c0:	e8 d7 ff ff ff       	call   c002869c <DriverlessDevice::~DriverlessDevice()>
c00286c5:	83 c4 10             	add    esp,0x10
c00286c8:	83 ec 08             	sub    esp,0x8
c00286cb:	68 58 01 00 00       	push   0x158
c00286d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d4:	e8 ae 9f fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00286d9:	83 c4 10             	add    esp,0x10
c00286dc:	83 c4 0c             	add    esp,0xc
c00286df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00286e0 <LinkedList<Device>::addElement(Device*)>:
c00286e0:	83 ec 0c             	sub    esp,0xc
c00286e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286e8:	75 10                	jne    c00286fa <LinkedList<Device>::addElement(Device*)+0x1a>
c00286ea:	83 ec 0c             	sub    esp,0xc
c00286ed:	68 94 a2 02 c0       	push   0xc002a294
c00286f2:	e8 d4 17 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00286f7:	83 c4 10             	add    esp,0x10
c00286fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028700:	85 c0                	test   eax,eax
c0028702:	74 3a                	je     c002873e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002870b:	85 c0                	test   eax,eax
c002870d:	74 2f                	je     c002873e <LinkedList<Device>::addElement(Device*)+0x5e>
c002870f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028713:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002871a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028728:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028732:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002873c:	eb 68                	jmp    c00287a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002873e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028742:	8b 00                	mov    eax,DWORD PTR [eax]
c0028744:	85 c0                	test   eax,eax
c0028746:	75 4e                	jne    c0028796 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002874f:	85 c0                	test   eax,eax
c0028751:	75 43                	jne    c0028796 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028757:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002875b:	89 10                	mov    DWORD PTR [eax],edx
c002875d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028761:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028765:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028780:	85 c0                	test   eax,eax
c0028782:	74 22                	je     c00287a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	68 b6 a2 02 c0       	push   0xc002a2b6
c002878c:	e8 3a 17 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028791:	83 c4 10             	add    esp,0x10
c0028794:	eb 10                	jmp    c00287a6 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028796:	83 ec 0c             	sub    esp,0xc
c0028799:	68 c0 a2 02 c0       	push   0xc002a2c0
c002879e:	e8 28 17 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00287a3:	83 c4 10             	add    esp,0x10
c00287a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287ad:	8d 50 01             	lea    edx,[eax+0x1]
c00287b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287b7:	90                   	nop
c00287b8:	83 c4 0c             	add    esp,0xc
c00287bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00287bc <LinkedList<Device>::LinkedList()>:
c00287bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fc:	90                   	nop
c00287fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00287fe <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00287fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028802:	8b 00                	mov    eax,DWORD PTR [eax]
c0028804:	85 c0                	test   eax,eax
c0028806:	75 0e                	jne    c0028816 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002880c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880f:	85 c0                	test   eax,eax
c0028811:	75 03                	jne    c0028816 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028813:	b0 01                	mov    al,0x1
c0028815:	c3                   	ret    
c0028816:	b0 00                	mov    al,0x0
c0028818:	90                   	nop
c0028819:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002881a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002881a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002881e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028820:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028822 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028822:	83 ec 0c             	sub    esp,0xc
c0028825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028829:	8b 00                	mov    eax,DWORD PTR [eax]
c002882b:	85 c0                	test   eax,eax
c002882d:	75 15                	jne    c0028844 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002882f:	83 ec 0c             	sub    esp,0xc
c0028832:	68 cc a2 02 c0       	push   0xc002a2cc
c0028837:	e8 8f 16 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002883c:	83 c4 10             	add    esp,0x10
c002883f:	e9 88 00 00 00       	jmp    c00288cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002884b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002884e:	85 c0                	test   eax,eax
c0028850:	0f 95 c0             	setne  al
c0028853:	84 c0                	test   al,al
c0028855:	74 10                	je     c0028867 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028857:	83 ec 0c             	sub    esp,0xc
c002885a:	68 17 a3 02 c0       	push   0xc002a317
c002885f:	e8 67 16 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028864:	83 c4 10             	add    esp,0x10
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	8b 00                	mov    eax,DWORD PTR [eax]
c002886d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028870:	85 c0                	test   eax,eax
c0028872:	0f 94 c0             	sete   al
c0028875:	84 c0                	test   al,al
c0028877:	74 33                	je     c00288ac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028887:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028895:	83 f8 01             	cmp    eax,0x1
c0028898:	74 21                	je     c00288bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002889a:	83 ec 0c             	sub    esp,0xc
c002889d:	68 f0 a2 02 c0       	push   0xc002a2f0
c00288a2:	e8 24 16 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00288a7:	83 c4 10             	add    esp,0x10
c00288aa:	eb 0f                	jmp    c00288bb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00288ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00288b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00288b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b9:	89 10                	mov    DWORD PTR [eax],edx
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c2:	8d 50 ff             	lea    edx,[eax-0x1]
c00288c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288cc:	83 c4 0c             	add    esp,0xc
c00288cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00288d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00288d0:	83 ec 0c             	sub    esp,0xc
c00288d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00288d8:	75 10                	jne    c00288ea <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00288da:	83 ec 0c             	sub    esp,0xc
c00288dd:	68 94 a2 02 c0       	push   0xc002a294
c00288e2:	e8 e4 15 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c00288e7:	83 c4 10             	add    esp,0x10
c00288ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f0:	85 c0                	test   eax,eax
c00288f2:	74 34                	je     c0028928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00288f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288fb:	85 c0                	test   eax,eax
c00288fd:	74 29                	je     c0028928 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00288ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028903:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028906:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002890a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028911:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028915:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002891f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028926:	eb 65                	jmp    c002898d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892c:	8b 00                	mov    eax,DWORD PTR [eax]
c002892e:	85 c0                	test   eax,eax
c0028930:	75 4b                	jne    c002897d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028939:	85 c0                	test   eax,eax
c002893b:	75 40                	jne    c002897d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028945:	89 10                	mov    DWORD PTR [eax],edx
c0028947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002894f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028959:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028967:	85 c0                	test   eax,eax
c0028969:	74 22                	je     c002898d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002896b:	83 ec 0c             	sub    esp,0xc
c002896e:	68 b6 a2 02 c0       	push   0xc002a2b6
c0028973:	e8 53 15 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028978:	83 c4 10             	add    esp,0x10
c002897b:	eb 10                	jmp    c002898d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002897d:	83 ec 0c             	sub    esp,0xc
c0028980:	68 c0 a2 02 c0       	push   0xc002a2c0
c0028985:	e8 41 15 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c002898a:	83 c4 10             	add    esp,0x10
c002898d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028991:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028994:	8d 50 01             	lea    edx,[eax+0x1]
c0028997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002899e:	90                   	nop
c002899f:	83 c4 0c             	add    esp,0xc
c00289a2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00289a4 <ACPI::~ACPI()>:
c00289a4:	83 ec 0c             	sub    esp,0xc
c00289a7:	ba 08 b4 02 c0       	mov    edx,0xc002b408
c00289ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b0:	89 10                	mov    DWORD PTR [eax],edx
c00289b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b6:	83 ec 0c             	sub    esp,0xc
c00289b9:	50                   	push   eax
c00289ba:	e8 a7 b0 fe ff       	call   c0013a66 <Device::~Device()>
c00289bf:	83 c4 10             	add    esp,0x10
c00289c2:	90                   	nop
c00289c3:	83 c4 0c             	add    esp,0xc
c00289c6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00289c8 <ACPI::~ACPI()>:
c00289c8:	83 ec 0c             	sub    esp,0xc
c00289cb:	83 ec 0c             	sub    esp,0xc
c00289ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289d2:	e8 cd ff ff ff       	call   c00289a4 <ACPI::~ACPI()>
c00289d7:	83 c4 10             	add    esp,0x10
c00289da:	83 ec 08             	sub    esp,0x8
c00289dd:	68 64 12 00 00       	push   0x1264
c00289e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e6:	e8 9c 9c fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c00289eb:	83 c4 10             	add    esp,0x10
c00289ee:	83 c4 0c             	add    esp,0xc
c00289f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00289f2 <LinkedList<Device>::~LinkedList()>:
c00289f2:	90                   	nop
c00289f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00289f4 <LinkedList<Device>::isEmpty()>:
c00289f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fa:	85 c0                	test   eax,eax
c00289fc:	75 0e                	jne    c0028a0c <LinkedList<Device>::isEmpty()+0x18>
c00289fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a05:	85 c0                	test   eax,eax
c0028a07:	75 03                	jne    c0028a0c <LinkedList<Device>::isEmpty()+0x18>
c0028a09:	b0 01                	mov    al,0x1
c0028a0b:	c3                   	ret    
c0028a0c:	b0 00                	mov    al,0x0
c0028a0e:	90                   	nop
c0028a0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028a10 <LinkedList<Device>::getFirstElement()>:
c0028a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a16:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028a18 <LinkedList<Device>::removeFirst()>:
c0028a18:	83 ec 0c             	sub    esp,0xc
c0028a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a21:	85 c0                	test   eax,eax
c0028a23:	75 15                	jne    c0028a3a <LinkedList<Device>::removeFirst()+0x22>
c0028a25:	83 ec 0c             	sub    esp,0xc
c0028a28:	68 cc a2 02 c0       	push   0xc002a2cc
c0028a2d:	e8 99 14 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028a32:	83 c4 10             	add    esp,0x10
c0028a35:	e9 87 00 00 00       	jmp    c0028ac1 <LinkedList<Device>::removeFirst()+0xa9>
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a41:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a47:	85 c0                	test   eax,eax
c0028a49:	74 10                	je     c0028a5b <LinkedList<Device>::removeFirst()+0x43>
c0028a4b:	83 ec 0c             	sub    esp,0xc
c0028a4e:	68 17 a3 02 c0       	push   0xc002a317
c0028a53:	e8 73 14 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028a58:	83 c4 10             	add    esp,0x10
c0028a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a61:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a67:	85 c0                	test   eax,eax
c0028a69:	75 33                	jne    c0028a9e <LinkedList<Device>::removeFirst()+0x86>
c0028a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a87:	83 f8 01             	cmp    eax,0x1
c0028a8a:	74 24                	je     c0028ab0 <LinkedList<Device>::removeFirst()+0x98>
c0028a8c:	83 ec 0c             	sub    esp,0xc
c0028a8f:	68 f0 a2 02 c0       	push   0xc002a2f0
c0028a94:	e8 32 14 ff ff       	call   c0019ecb <Krnl::panic(char const*)>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	eb 12                	jmp    c0028ab0 <LinkedList<Device>::removeFirst()+0x98>
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 10                	mov    DWORD PTR [eax],edx
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ac1:	83 c4 0c             	add    esp,0xc
c0028ac4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ac6 <CPU::~CPU()>:
c0028ac6:	83 ec 0c             	sub    esp,0xc
c0028ac9:	ba 58 b6 02 c0       	mov    edx,0xc002b658
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	89 10                	mov    DWORD PTR [eax],edx
c0028ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad8:	83 ec 0c             	sub    esp,0xc
c0028adb:	50                   	push   eax
c0028adc:	e8 85 af fe ff       	call   c0013a66 <Device::~Device()>
c0028ae1:	83 c4 10             	add    esp,0x10
c0028ae4:	90                   	nop
c0028ae5:	83 c4 0c             	add    esp,0xc
c0028ae8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028aea <CPU::~CPU()>:
c0028aea:	83 ec 0c             	sub    esp,0xc
c0028aed:	83 ec 0c             	sub    esp,0xc
c0028af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af4:	e8 cd ff ff ff       	call   c0028ac6 <CPU::~CPU()>
c0028af9:	83 c4 10             	add    esp,0x10
c0028afc:	83 ec 08             	sub    esp,0x8
c0028aff:	68 98 11 00 00       	push   0x1198
c0028b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b08:	e8 7a 9b fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028b0d:	83 c4 10             	add    esp,0x10
c0028b10:	83 c4 0c             	add    esp,0xc
c0028b13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b14 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b14:	90                   	nop
c0028b15:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b16 <ThreadControlBlock::ThreadControlBlock()>:
c0028b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b25:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b30:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b46:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028b4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b51:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b59:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b5d:	90                   	nop
c0028b5e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b79:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b99:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ba0:	90                   	nop
c0028ba1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ba2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ba6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ba9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028baa <Vm::_FPUState::_FPUState()>:
c0028baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bae:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bb5:	90                   	nop
c0028bb6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bb8 <PCI::~PCI()>:
c0028bb8:	83 ec 0c             	sub    esp,0xc
c0028bbb:	ba 84 c1 02 c0       	mov    edx,0xc002c184
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	89 10                	mov    DWORD PTR [eax],edx
c0028bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	50                   	push   eax
c0028bce:	e8 63 a8 fe ff       	call   c0013436 <Bus::~Bus()>
c0028bd3:	83 c4 10             	add    esp,0x10
c0028bd6:	90                   	nop
c0028bd7:	83 c4 0c             	add    esp,0xc
c0028bda:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028bdc <PCI::~PCI()>:
c0028bdc:	83 ec 0c             	sub    esp,0xc
c0028bdf:	83 ec 0c             	sub    esp,0xc
c0028be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be6:	e8 cd ff ff ff       	call   c0028bb8 <PCI::~PCI()>
c0028beb:	83 c4 10             	add    esp,0x10
c0028bee:	83 ec 08             	sub    esp,0x8
c0028bf1:	68 5c 01 00 00       	push   0x15c
c0028bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bfa:	e8 88 9a fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028bff:	83 c4 10             	add    esp,0x10
c0028c02:	83 c4 0c             	add    esp,0xc
c0028c05:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c06 <IDE::~IDE()>:
c0028c06:	83 ec 0c             	sub    esp,0xc
c0028c09:	ba 38 c2 02 c0       	mov    edx,0xc002c238
c0028c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c12:	89 10                	mov    DWORD PTR [eax],edx
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	83 ec 0c             	sub    esp,0xc
c0028c1b:	50                   	push   eax
c0028c1c:	e8 5b b3 fe ff       	call   c0013f7c <HardDiskController::~HardDiskController()>
c0028c21:	83 c4 10             	add    esp,0x10
c0028c24:	90                   	nop
c0028c25:	83 c4 0c             	add    esp,0xc
c0028c28:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c2a <IDE::~IDE()>:
c0028c2a:	83 ec 0c             	sub    esp,0xc
c0028c2d:	83 ec 0c             	sub    esp,0xc
c0028c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c34:	e8 cd ff ff ff       	call   c0028c06 <IDE::~IDE()>
c0028c39:	83 c4 10             	add    esp,0x10
c0028c3c:	83 ec 08             	sub    esp,0x8
c0028c3f:	68 70 02 00 00       	push   0x270
c0028c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c48:	e8 3a 9a fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028c4d:	83 c4 10             	add    esp,0x10
c0028c50:	83 c4 0c             	add    esp,0xc
c0028c53:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c54 <SATABus::~SATABus()>:
c0028c54:	83 ec 0c             	sub    esp,0xc
c0028c57:	ba b0 c2 02 c0       	mov    edx,0xc002c2b0
c0028c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c60:	89 10                	mov    DWORD PTR [eax],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	83 ec 0c             	sub    esp,0xc
c0028c69:	50                   	push   eax
c0028c6a:	e8 0d b3 fe ff       	call   c0013f7c <HardDiskController::~HardDiskController()>
c0028c6f:	83 c4 10             	add    esp,0x10
c0028c72:	90                   	nop
c0028c73:	83 c4 0c             	add    esp,0xc
c0028c76:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c78 <SATABus::~SATABus()>:
c0028c78:	83 ec 0c             	sub    esp,0xc
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c82:	e8 cd ff ff ff       	call   c0028c54 <SATABus::~SATABus()>
c0028c87:	83 c4 10             	add    esp,0x10
c0028c8a:	83 ec 08             	sub    esp,0x8
c0028c8d:	68 64 01 00 00       	push   0x164
c0028c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c96:	e8 ec 99 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028c9b:	83 c4 10             	add    esp,0x10
c0028c9e:	83 c4 0c             	add    esp,0xc
c0028ca1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ca2 <ATA::~ATA()>:
c0028ca2:	83 ec 0c             	sub    esp,0xc
c0028ca5:	ba fc c2 02 c0       	mov    edx,0xc002c2fc
c0028caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cae:	89 10                	mov    DWORD PTR [eax],edx
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	50                   	push   eax
c0028cb8:	e8 a1 b3 fe ff       	call   c001405e <PhysicalDisk::~PhysicalDisk()>
c0028cbd:	83 c4 10             	add    esp,0x10
c0028cc0:	90                   	nop
c0028cc1:	83 c4 0c             	add    esp,0xc
c0028cc4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cc6 <ATA::~ATA()>:
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	83 ec 0c             	sub    esp,0xc
c0028ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd0:	e8 cd ff ff ff       	call   c0028ca2 <ATA::~ATA()>
c0028cd5:	83 c4 10             	add    esp,0x10
c0028cd8:	83 ec 08             	sub    esp,0x8
c0028cdb:	68 7c 01 00 00       	push   0x17c
c0028ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce4:	e8 9e 99 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028ce9:	83 c4 10             	add    esp,0x10
c0028cec:	83 c4 0c             	add    esp,0xc
c0028cef:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028cf0 <ATAPI::~ATAPI()>:
c0028cf0:	83 ec 0c             	sub    esp,0xc
c0028cf3:	ba 34 c3 02 c0       	mov    edx,0xc002c334
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	89 10                	mov    DWORD PTR [eax],edx
c0028cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	50                   	push   eax
c0028d06:	e8 53 b3 fe ff       	call   c001405e <PhysicalDisk::~PhysicalDisk()>
c0028d0b:	83 c4 10             	add    esp,0x10
c0028d0e:	90                   	nop
c0028d0f:	83 c4 0c             	add    esp,0xc
c0028d12:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d14 <ATAPI::~ATAPI()>:
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	83 ec 0c             	sub    esp,0xc
c0028d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1e:	e8 cd ff ff ff       	call   c0028cf0 <ATAPI::~ATAPI()>
c0028d23:	83 c4 10             	add    esp,0x10
c0028d26:	83 ec 08             	sub    esp,0x8
c0028d29:	68 80 01 00 00       	push   0x180
c0028d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d32:	e8 50 99 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028d37:	83 c4 10             	add    esp,0x10
c0028d3a:	83 c4 0c             	add    esp,0xc
c0028d3d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d3e <SATA::~SATA()>:
c0028d3e:	83 ec 0c             	sub    esp,0xc
c0028d41:	ba e8 c3 02 c0       	mov    edx,0xc002c3e8
c0028d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4a:	89 10                	mov    DWORD PTR [eax],edx
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	83 ec 0c             	sub    esp,0xc
c0028d53:	50                   	push   eax
c0028d54:	e8 05 b3 fe ff       	call   c001405e <PhysicalDisk::~PhysicalDisk()>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	90                   	nop
c0028d5d:	83 c4 0c             	add    esp,0xc
c0028d60:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d62 <SATA::~SATA()>:
c0028d62:	83 ec 0c             	sub    esp,0xc
c0028d65:	83 ec 0c             	sub    esp,0xc
c0028d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6c:	e8 cd ff ff ff       	call   c0028d3e <SATA::~SATA()>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	83 ec 08             	sub    esp,0x8
c0028d77:	68 7c 01 00 00       	push   0x17c
c0028d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d80:	e8 02 99 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028d85:	83 c4 10             	add    esp,0x10
c0028d88:	83 c4 0c             	add    esp,0xc
c0028d8b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d8c <SATAPI::~SATAPI()>:
c0028d8c:	83 ec 0c             	sub    esp,0xc
c0028d8f:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0028d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d98:	89 10                	mov    DWORD PTR [eax],edx
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	83 ec 0c             	sub    esp,0xc
c0028da1:	50                   	push   eax
c0028da2:	e8 b7 b2 fe ff       	call   c001405e <PhysicalDisk::~PhysicalDisk()>
c0028da7:	83 c4 10             	add    esp,0x10
c0028daa:	90                   	nop
c0028dab:	83 c4 0c             	add    esp,0xc
c0028dae:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028db0 <SATAPI::~SATAPI()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	83 ec 0c             	sub    esp,0xc
c0028db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dba:	e8 cd ff ff ff       	call   c0028d8c <SATAPI::~SATAPI()>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	83 ec 08             	sub    esp,0x8
c0028dc5:	68 80 01 00 00       	push   0x180
c0028dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dce:	e8 b4 98 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028dd3:	83 c4 10             	add    esp,0x10
c0028dd6:	83 c4 0c             	add    esp,0xc
c0028dd9:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028dda <AVX::~AVX()>:
c0028dda:	83 ec 0c             	sub    esp,0xc
c0028ddd:	ba 04 c5 02 c0       	mov    edx,0xc002c504
c0028de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de6:	89 10                	mov    DWORD PTR [eax],edx
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	83 ec 0c             	sub    esp,0xc
c0028def:	50                   	push   eax
c0028df0:	e8 ed b2 fe ff       	call   c00140e2 <FPU::~FPU()>
c0028df5:	83 c4 10             	add    esp,0x10
c0028df8:	90                   	nop
c0028df9:	83 c4 0c             	add    esp,0xc
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028dfe <AVX::~AVX()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	83 ec 0c             	sub    esp,0xc
c0028e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e08:	e8 cd ff ff ff       	call   c0028dda <AVX::~AVX()>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	83 ec 08             	sub    esp,0x8
c0028e13:	68 58 01 00 00       	push   0x158
c0028e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1c:	e8 66 98 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028e21:	83 c4 10             	add    esp,0x10
c0028e24:	83 c4 0c             	add    esp,0xc
c0028e27:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e28 <MMX::~MMX()>:
c0028e28:	83 ec 0c             	sub    esp,0xc
c0028e2b:	ba 44 c5 02 c0       	mov    edx,0xc002c544
c0028e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e34:	89 10                	mov    DWORD PTR [eax],edx
c0028e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3a:	83 ec 0c             	sub    esp,0xc
c0028e3d:	50                   	push   eax
c0028e3e:	e8 9f b2 fe ff       	call   c00140e2 <FPU::~FPU()>
c0028e43:	83 c4 10             	add    esp,0x10
c0028e46:	90                   	nop
c0028e47:	83 c4 0c             	add    esp,0xc
c0028e4a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e4c <MMX::~MMX()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	83 ec 0c             	sub    esp,0xc
c0028e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e56:	e8 cd ff ff ff       	call   c0028e28 <MMX::~MMX()>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	83 ec 08             	sub    esp,0x8
c0028e61:	68 58 01 00 00       	push   0x158
c0028e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6a:	e8 18 98 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	83 c4 0c             	add    esp,0xc
c0028e75:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e76 <SSE::~SSE()>:
c0028e76:	83 ec 0c             	sub    esp,0xc
c0028e79:	ba 84 c5 02 c0       	mov    edx,0xc002c584
c0028e7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e82:	89 10                	mov    DWORD PTR [eax],edx
c0028e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	50                   	push   eax
c0028e8c:	e8 51 b2 fe ff       	call   c00140e2 <FPU::~FPU()>
c0028e91:	83 c4 10             	add    esp,0x10
c0028e94:	90                   	nop
c0028e95:	83 c4 0c             	add    esp,0xc
c0028e98:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028e9a <SSE::~SSE()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	83 ec 0c             	sub    esp,0xc
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 cd ff ff ff       	call   c0028e76 <SSE::~SSE()>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 ec 08             	sub    esp,0x8
c0028eaf:	68 58 01 00 00       	push   0x158
c0028eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb8:	e8 ca 97 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	83 c4 0c             	add    esp,0xc
c0028ec3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028ec4 <x87::~x87()>:
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	ba c4 c5 02 c0       	mov    edx,0xc002c5c4
c0028ecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed0:	89 10                	mov    DWORD PTR [eax],edx
c0028ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	50                   	push   eax
c0028eda:	e8 03 b2 fe ff       	call   c00140e2 <FPU::~FPU()>
c0028edf:	83 c4 10             	add    esp,0x10
c0028ee2:	90                   	nop
c0028ee3:	83 c4 0c             	add    esp,0xc
c0028ee6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ee8 <x87::~x87()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	83 ec 0c             	sub    esp,0xc
c0028eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef2:	e8 cd ff ff ff       	call   c0028ec4 <x87::~x87()>
c0028ef7:	83 c4 10             	add    esp,0x10
c0028efa:	83 ec 08             	sub    esp,0x8
c0028efd:	68 58 01 00 00       	push   0x158
c0028f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f06:	e8 7c 97 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	83 c4 0c             	add    esp,0xc
c0028f11:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f12 <IOAPIC::~IOAPIC()>:
c0028f12:	83 ec 0c             	sub    esp,0xc
c0028f15:	ba 1c c7 02 c0       	mov    edx,0xc002c71c
c0028f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1e:	89 10                	mov    DWORD PTR [eax],edx
c0028f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	50                   	push   eax
c0028f28:	e8 39 ab fe ff       	call   c0013a66 <Device::~Device()>
c0028f2d:	83 c4 10             	add    esp,0x10
c0028f30:	90                   	nop
c0028f31:	83 c4 0c             	add    esp,0xc
c0028f34:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f36 <IOAPIC::~IOAPIC()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	83 ec 0c             	sub    esp,0xc
c0028f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f40:	e8 cd ff ff ff       	call   c0028f12 <IOAPIC::~IOAPIC()>
c0028f45:	83 c4 10             	add    esp,0x10
c0028f48:	83 ec 08             	sub    esp,0x8
c0028f4b:	68 68 01 00 00       	push   0x168
c0028f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f54:	e8 2e 97 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028f59:	83 c4 10             	add    esp,0x10
c0028f5c:	83 c4 0c             	add    esp,0xc
c0028f5f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f60 <APIC::~APIC()>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	ba d4 c6 02 c0       	mov    edx,0xc002c6d4
c0028f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6c:	89 10                	mov    DWORD PTR [eax],edx
c0028f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f72:	83 ec 0c             	sub    esp,0xc
c0028f75:	50                   	push   eax
c0028f76:	e8 31 b6 fe ff       	call   c00145ac <InterruptController::~InterruptController()>
c0028f7b:	83 c4 10             	add    esp,0x10
c0028f7e:	90                   	nop
c0028f7f:	83 c4 0c             	add    esp,0xc
c0028f82:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f84 <APIC::~APIC()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	83 ec 0c             	sub    esp,0xc
c0028f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8e:	e8 cd ff ff ff       	call   c0028f60 <APIC::~APIC()>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	83 ec 08             	sub    esp,0x8
c0028f99:	68 58 21 00 00       	push   0x2158
c0028f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa2:	e8 e0 96 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028fa7:	83 c4 10             	add    esp,0x10
c0028faa:	83 c4 0c             	add    esp,0xc
c0028fad:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fae <PIC::~PIC()>:
c0028fae:	83 ec 0c             	sub    esp,0xc
c0028fb1:	ba 6c c7 02 c0       	mov    edx,0xc002c76c
c0028fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fba:	89 10                	mov    DWORD PTR [eax],edx
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	83 ec 0c             	sub    esp,0xc
c0028fc3:	50                   	push   eax
c0028fc4:	e8 e3 b5 fe ff       	call   c00145ac <InterruptController::~InterruptController()>
c0028fc9:	83 c4 10             	add    esp,0x10
c0028fcc:	90                   	nop
c0028fcd:	83 c4 0c             	add    esp,0xc
c0028fd0:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028fd2 <PIC::~PIC()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	83 ec 0c             	sub    esp,0xc
c0028fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fdc:	e8 cd ff ff ff       	call   c0028fae <PIC::~PIC()>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	83 ec 08             	sub    esp,0x8
c0028fe7:	68 58 21 00 00       	push   0x2158
c0028fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff0:	e8 92 96 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0028ff5:	83 c4 10             	add    esp,0x10
c0028ff8:	83 c4 0c             	add    esp,0xc
c0028ffb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028ffc <APICTimer::~APICTimer()>:
c0028ffc:	83 ec 0c             	sub    esp,0xc
c0028fff:	ba c0 c7 02 c0       	mov    edx,0xc002c7c0
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	89 10                	mov    DWORD PTR [eax],edx
c002900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900e:	83 ec 0c             	sub    esp,0xc
c0029011:	50                   	push   eax
c0029012:	e8 ed d5 fe ff       	call   c0016604 <Timer::~Timer()>
c0029017:	83 c4 10             	add    esp,0x10
c002901a:	90                   	nop
c002901b:	83 c4 0c             	add    esp,0xc
c002901e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029020 <APICTimer::~APICTimer()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	83 ec 0c             	sub    esp,0xc
c0029026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902a:	e8 cd ff ff ff       	call   c0028ffc <APICTimer::~APICTimer()>
c002902f:	83 c4 10             	add    esp,0x10
c0029032:	83 ec 08             	sub    esp,0x8
c0029035:	68 60 01 00 00       	push   0x160
c002903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903e:	e8 44 96 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0029043:	83 c4 10             	add    esp,0x10
c0029046:	83 c4 0c             	add    esp,0xc
c0029049:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002904a <PIT::~PIT()>:
c002904a:	83 ec 0c             	sub    esp,0xc
c002904d:	ba 10 c8 02 c0       	mov    edx,0xc002c810
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	89 10                	mov    DWORD PTR [eax],edx
c0029058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905c:	83 ec 0c             	sub    esp,0xc
c002905f:	50                   	push   eax
c0029060:	e8 9f d5 fe ff       	call   c0016604 <Timer::~Timer()>
c0029065:	83 c4 10             	add    esp,0x10
c0029068:	90                   	nop
c0029069:	83 c4 0c             	add    esp,0xc
c002906c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002906e <PIT::~PIT()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	83 ec 0c             	sub    esp,0xc
c0029074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029078:	e8 cd ff ff ff       	call   c002904a <PIT::~PIT()>
c002907d:	83 c4 10             	add    esp,0x10
c0029080:	83 ec 08             	sub    esp,0x8
c0029083:	68 5c 01 00 00       	push   0x15c
c0029088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908c:	e8 f6 95 fe ff       	call   c0012687 <operator delete(void*, unsigned long)>
c0029091:	83 c4 10             	add    esp,0x10
c0029094:	83 c4 0c             	add    esp,0xc
c0029097:	c3                   	ret    
