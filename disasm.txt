
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 87 02 00       	call   c0028758 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 93 02 c0       	mov    ebx,0xc0029302
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 93 02 c0    	cmp    ebx,0xc0029310
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c0000049:	3d f8 da 02 c0       	cmp    eax,0xc002daf8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 da 02 c0       	push   0xc002daf8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 da 02 c0       	mov    eax,0xc002daf8
c0000075:	2d f8 da 02 c0       	sub    eax,0xc002daf8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 da 02 c0       	push   0xc002daf8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e128,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 93 02 c0       	mov    ebx,0xc0029318
c00000bb:	81 eb 14 93 02 c0    	sub    ebx,0xc0029314
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 93 02 c0       	mov    esi,0xc0029314
c00000ca:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c e1 02 c0       	mov    ds:0xc002e12c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 da 02 c0       	push   0xc002daf8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 e1 02 c0       	push   0xc002e130
c000012c:	68 f8 da 02 c0       	push   0xc002daf8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 05 d7 01 00       	call   c001daa0 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 63 2a 01 00       	call   c0012e16 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 e3 d6 01 00       	call   c001daa0 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 31 db 01 00       	call   c001df0d <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 df e0 01 00       	call   c001e4c4 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 e5 02 c0 	lgdtd  ds:0xc002e570
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 40 47 01 00       	call   c0014d19 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 e1 02 c0       	mov    ds:0xc002e148,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 e1 02 c0    	mov    DWORD PTR ds:0xc002e148,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e148
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6ce0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ce0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6ce0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6ce0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6ce0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e160
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e9c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e9c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c e1 02 c0    	cmp    DWORD PTR ds:0xc002e18c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e19c
c0000e60:	c7 42 0c 94 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e194
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 e1 02 c0 02 	test   BYTE PTR ds:0xc002e160,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e160
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e9c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e9c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 e1 02 c0 	lea    edx,[eax*8-0x3ffd1e6c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1a0
c00011e2:	81 fb 94 e1 02 c0    	cmp    ebx,0xc002e194
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 e1 02 c0       	cmp    eax,0xc002e194
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 e1 02 c0    	cmp    DWORD PTR ds:0xc002e190,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c e1 02 c0       	mov    ds:0xc002e19c,eax
c000121e:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c0001223:	a3 90 e1 02 c0       	mov    ds:0xc002e190,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e194
c0001231:	c7 40 0c 94 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e194
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 e1 02 c0       	mov    ds:0xc002e1a0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e194
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1ea8]
c0001282:	8b 14 95 60 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ea0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1ea0]
c000129d:	8b 14 95 60 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ea0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1b6c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 e1 02 c0 	lea    eax,[eax*8-0x3ffd1e6c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,ecx
c0001357:	89 0d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,ecx
c000135d:	c7 41 08 94 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e194
c0001364:	c7 41 0c 94 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e194
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1e74]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b6c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1b6c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c e1 02 c0 	lea    edx,[eax*4-0x3ffd1e74]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1b6c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c e1 02 c0    	mov    DWORD PTR ds:0xc002e19c,edi
c000142a:	89 3d a0 e1 02 c0    	mov    DWORD PTR ds:0xc002e1a0,edi
c0001430:	c7 47 08 94 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e194
c0001437:	c7 47 0c 94 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e194
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 e1 02 c0    	mov    DWORD PTR ds:0xc002e190,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 e1 02 c0       	mov    edx,0xc002e160
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4b4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4b4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4b4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c e1 02 c0    	cmp    DWORD PTR ds:0xc002e18c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c e1 02 c0    	mov    DWORD PTR ds:0xc002e18c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc e4 02 c0    	push   DWORD PTR ds:0xc002e4bc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e160,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc e4 02 c0       	mov    eax,ds:0xc002e4bc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e18c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e9c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 e1 02 c0       	mov    eax,0xc002e194
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c e4 02 c0       	cmp    eax,0xc002e48c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4b0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4c4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4d4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bdc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 e1 02 c0       	mov    eax,ds:0xc002e160
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac e4 02 c0    	mov    DWORD PTR ds:0xc002e4ac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4b4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 90 f2 01 00       	jmp    c0020ebc <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 c1 f2 01 00       	jmp    c0020f03 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce3a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 e9 f2 01 00       	jmp    c0020f4a <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 78 4b 02 00       	call   c0026abc <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ac0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ac0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 95 02 c0       	mov    edx,0xc0029560
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 80 c9 02 c0       	mov    edx,0xc002c980
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 95 02 c0       	mov    edx,0xc002956c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 95 02 c0       	mov    edx,0xc0029550
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b00]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 e4 02 c0    	mov    ax,ds:0xc002e4e0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 e4 02 c0    	mov    ds:0xc002e4e0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 75 39 02 00       	call   c0026abc <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 95 02 c0       	mov    eax,0xc0029572
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b40]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 95 02 c0       	mov    eax,0xc002957b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ac0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 40 23 02 00       	call   c0026abc <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 95 02 c0       	mov    edx,0xc0029550
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 94 02 c0       	mov    edx,0xc0029440
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b00]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b00],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 07 0d 02 00       	call   c0026abc <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ed 0c 02 00       	call   c0026abc <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 94 02 c0       	mov    eax,0xc0029497
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 94 02 c0       	mov    eax,0xc0029490
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b00]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 94 02 c0       	mov    esi,0xc0029480
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 30 f4 01 00       	call   c0026abc <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 95 02 c0       	mov    edx,0xc0029560
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 94 02 c0       	mov    edx,0xc0029460
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 94 02 c0       	mov    edx,0xc0029470
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 95 02 c0       	mov    edx,0xc0029582
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 95 02 c0       	mov    edx,0xc002958e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 95 02 c0       	mov    edx,0xc00295a2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 96 02 c0       	mov    eax,0xc00296c0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a40]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 84 fd 01 00       	call   c002858f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 47 fd 01 00       	call   c0028571 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 1b fd 01 00       	call   c002858f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ce f3 01 00       	call   c0027c94 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 48 fe 01 00       	call   c0028720 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 95 fc 01 00       	call   c002858f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 d7 fb 01 00       	call   c002858f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 a4 fb 01 00       	call   c0028571 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 91 fa 01 00       	call   c002858f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 59 fa 01 00       	call   c0028571 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 65 f8 01 00       	call   c002858f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 2a f8 01 00       	call   c0028571 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 3a f5 01 00       	call   c0028323 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 b8 ee 01 00       	call   c0027cc0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 74 f7 01 00       	call   c0028593 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 62 f8 01 00       	call   c00286b7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 4c ee 01 00       	call   c0027cc0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 f7 f6 01 00       	call   c002858d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 d8 f6 01 00       	call   c0028591 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 66 f8 01 00       	call   c0028740 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 18 f4 01 00       	call   c0028323 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 96 ed 01 00       	call   c0027cc0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 52 f6 01 00       	call   c0028593 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 40 f7 01 00       	call   c00286b7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 2a ed 01 00       	call   c0027cc0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 d5 f5 01 00       	call   c002858d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 b5 f5 01 00       	call   c0028591 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 42 f7 01 00       	call   c0028740 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 f0 f4 01 00       	call   c002858f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 ae f4 01 00       	call   c0028571 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 96 f4 01 00       	call   c002858f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 08 f2 01 00       	call   c0028323 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 0a e5 01 00       	call   c0027643 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 6d eb 01 00       	call   c0027cc0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 bf f1 01 00       	call   c0028323 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 c5 e4 01 00       	call   c0027643 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 94 f1 01 00       	call   c0028323 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 e4 f3 01 00       	call   c002858d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 c1 ea 01 00       	call   c0027c94 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 3b f5 01 00       	call   c0028720 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 6a f3 01 00       	call   c0028571 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 65 ea 01 00       	call   c0027c94 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 e3 f0 01 00       	call   c0028323 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 66 ea 01 00       	call   c0027cc0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 b8 f0 01 00       	call   c0028323 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 1f ed 01 00       	call   c0027fa4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 9e e3 01 00       	call   c0027643 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 fe dc 01 00       	call   c0026fd8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 d5 f3 01 00       	call   c00286b7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 be e9 01 00       	call   c0027cc0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 a5 f3 01 00       	call   c00286b7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 17 e3 01 00       	call   c0027643 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 50 f2 01 00       	call   c0028593 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 38 ec 01 00       	call   c0027fa4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 be e2 01 00       	call   c0027643 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 a4 f3 01 00       	call   c0028740 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 7e ef 01 00       	call   c0028323 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 d5 e8 01 00       	call   c0027c94 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 b4 f1 01 00       	call   c002858f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 4d e2 01 00       	call   c0027643 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 79 e8 01 00       	call   c0027c94 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 13 f3 01 00       	call   c0028740 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 cc ee 01 00       	call   c0028323 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 49 e8 01 00       	call   c0027cc0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 9c ee 01 00       	call   c0028323 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 a2 e1 01 00       	call   c0027643 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 72 ee 01 00       	call   c0028323 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 c4 f0 01 00       	call   c002858f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 9b e7 01 00       	call   c0027c94 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 15 f2 01 00       	call   c0028720 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 44 f0 01 00       	call   c0028571 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 3e e7 01 00       	call   c0027c94 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 bc ed 01 00       	call   c0028323 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 3f e7 01 00       	call   c0027cc0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 91 ed 01 00       	call   c0028323 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 f8 e9 01 00       	call   c0027fa4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 77 e0 01 00       	call   c0027643 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 c7 d9 01 00       	call   c0026fd8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 9e f0 01 00       	call   c00286b7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 87 e6 01 00       	call   c0027cc0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 6e f0 01 00       	call   c00286b7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 e0 df 01 00       	call   c0027643 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 19 ef 01 00       	call   c0028593 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 00 e9 01 00       	call   c0027fa4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 7f df 01 00       	call   c0027643 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 65 f0 01 00       	call   c0028740 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 3f ec 01 00       	call   c0028323 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 96 e5 01 00       	call   c0027c94 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 75 ee 01 00       	call   c002858f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 0e df 01 00       	call   c0027643 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 3a e5 01 00       	call   c0027c94 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 af eb 01 00       	call   c0028323 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 b5 de 01 00       	call   c0027643 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 9e 02 c0       	mov    eax,0xc0029e80
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 9e 02 c0       	mov    eax,0xc0029e94
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 2a ea 01 00       	call   c0028323 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 a8 e3 01 00       	call   c0027cc0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 3a d6 01 00       	call   c0026fd8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 11 ed 01 00       	call   c00286b7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 fa e2 01 00       	call   c0027cc0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 dd ec 01 00       	call   c00286b7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 4f dc 01 00       	call   c0027643 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 af ec 01 00       	call   c00286b7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 9e e2 01 00       	call   c0027cc0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 07 dc 01 00       	call   c0027643 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 28 d5 01 00       	call   c0026fd8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ff eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 e8 e1 01 00       	call   c0027cc0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 cb eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 3d db 01 00       	call   c0027643 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 9d eb 01 00       	call   c00286b7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 8c e1 01 00       	call   c0027cc0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 f5 da 01 00       	call   c0027643 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 d3 da 01 00       	call   c0027643 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 af d3 01 00       	call   c0026fd8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 86 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 6f e0 01 00       	call   c0027cc0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 52 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 c4 d9 01 00       	call   c0027643 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 24 ea 01 00       	call   c00286b7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 0d e0 01 00       	call   c0027cc0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 76 d9 01 00       	call   c0027643 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 d6 e9 01 00       	call   c00286b7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 bf df 01 00       	call   c0027cc0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 28 d9 01 00       	call   c0027643 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 3d d2 01 00       	call   c0026fd8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 14 e9 01 00       	call   c00286b7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 fd de 01 00       	call   c0027cc0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 e4 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 56 d8 01 00       	call   c0027643 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 b6 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 9f de 01 00       	call   c0027cc0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 08 d8 01 00       	call   c0027643 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 68 e8 01 00       	call   c00286b7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 51 de 01 00       	call   c0027cc0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ba d7 01 00       	call   c0027643 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 8e d7 01 00       	call   c0027643 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 eb dd 01 00       	call   c0027cc0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 a7 e6 01 00       	call   c0028593 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 36 d7 01 00       	call   c0027643 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 93 dd 01 00       	call   c0027cc0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 4f e6 01 00       	call   c0028593 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 c9 cf 01 00       	call   c0026fd8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 a0 e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 89 dc 01 00       	call   c0027cc0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 6c e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 de d5 01 00       	call   c0027643 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 3e e6 01 00       	call   c00286b7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 27 dc 01 00       	call   c0027cc0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 90 d5 01 00       	call   c0027643 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 f0 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 d9 db 01 00       	call   c0027cc0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 42 d5 01 00       	call   c0027643 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 a2 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 8b db 01 00       	call   c0027cc0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 f4 d4 01 00       	call   c0027643 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 54 e5 01 00       	call   c00286b7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 3d db 01 00       	call   c0027cc0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 a6 d4 01 00       	call   c0027643 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 a8 cd 01 00       	call   c0026fd8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 7f e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 68 da 01 00       	call   c0027cc0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 4f e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 c1 d3 01 00       	call   c0027643 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 21 e4 01 00       	call   c00286b7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 0a da 01 00       	call   c0027cc0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 73 d3 01 00       	call   c0027643 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 d3 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 bc d9 01 00       	call   c0027cc0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 25 d3 01 00       	call   c0027643 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 85 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 6e d9 01 00       	call   c0027cc0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 d7 d2 01 00       	call   c0027643 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 37 e3 01 00       	call   c00286b7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 20 d9 01 00       	call   c0027cc0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 89 d2 01 00       	call   c0027643 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 5d d2 01 00       	call   c0027643 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ba d8 01 00       	call   c0027cc0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 76 e1 01 00       	call   c0028593 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 05 d2 01 00       	call   c0027643 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 62 d8 01 00       	call   c0027cc0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 1e e1 01 00       	call   c0028593 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 ac d1 01 00       	call   c0027643 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 09 d8 01 00       	call   c0027cc0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 c5 e0 01 00       	call   c0028593 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 53 d1 01 00       	call   c0027643 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 b0 d7 01 00       	call   c0027cc0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 6c e0 01 00       	call   c0028593 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ca c9 01 00       	call   c0026fd8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 a1 e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 8a d6 01 00       	call   c0027cc0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 6d e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 df cf 01 00       	call   c0027643 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 3f e0 01 00       	call   c00286b7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 28 d6 01 00       	call   c0027cc0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 91 cf 01 00       	call   c0027643 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 f1 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 da d5 01 00       	call   c0027cc0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 43 cf 01 00       	call   c0027643 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 a3 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 8c d5 01 00       	call   c0027cc0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 f5 ce 01 00       	call   c0027643 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 55 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 3e d5 01 00       	call   c0027cc0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 a7 ce 01 00       	call   c0027643 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 07 df 01 00       	call   c00286b7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 f0 d4 01 00       	call   c0027cc0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 56 ce 01 00       	call   c0027643 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 b6 de 01 00       	call   c00286b7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 9f d4 01 00       	call   c0027cc0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 08 ce 01 00       	call   c0027643 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 02 c7 01 00       	call   c0026fd8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 d9 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 c2 d3 01 00       	call   c0027cc0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 a2 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 14 cd 01 00       	call   c0027643 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 74 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 5d d3 01 00       	call   c0027cc0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 c6 cc 01 00       	call   c0027643 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 26 dd 01 00       	call   c00286b7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 0f d3 01 00       	call   c0027cc0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 78 cc 01 00       	call   c0027643 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 d8 dc 01 00       	call   c00286b7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 c1 d2 01 00       	call   c0027cc0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 2a cc 01 00       	call   c0027643 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 8a dc 01 00       	call   c00286b7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 73 d2 01 00       	call   c0027cc0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 dc cb 01 00       	call   c0027643 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 3c dc 01 00       	call   c00286b7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 25 d2 01 00       	call   c0027cc0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 8b cb 01 00       	call   c0027643 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 eb db 01 00       	call   c00286b7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 d4 d1 01 00       	call   c0027cc0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 43 cb 01 00       	call   c0027643 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 1c cb 01 00       	call   c0027643 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 7a d1 01 00       	call   c0027cc0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 36 da 01 00       	call   c0028593 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 c5 ca 01 00       	call   c0027643 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 23 d1 01 00       	call   c0027cc0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 df d9 01 00       	call   c0028593 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 6d ca 01 00       	call   c0027643 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 cb d0 01 00       	call   c0027cc0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 87 d9 01 00       	call   c0028593 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 15 ca 01 00       	call   c0027643 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 73 d0 01 00       	call   c0027cc0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 2f d9 01 00       	call   c0028593 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 bd c9 01 00       	call   c0027643 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 1b d0 01 00       	call   c0027cc0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 d7 d8 01 00       	call   c0028593 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 6b c9 01 00       	call   c0027643 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 c9 cf 01 00       	call   c0027cc0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 85 d8 01 00       	call   c0028593 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 99 c1 01 00       	call   c0026fd8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 70 d8 01 00       	call   c00286b7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 59 ce 01 00       	call   c0027cc0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 40 d8 01 00       	call   c00286b7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 b2 c7 01 00       	call   c0027643 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd613c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 e6 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 cf cd 01 00       	call   c0027cc0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 3a c7 01 00       	call   c0027643 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 87 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 70 cd 01 00       	call   c0027cc0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 db c6 01 00       	call   c0027643 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 28 d7 01 00       	call   c00286b7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 11 cd 01 00       	call   c0027cc0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 7c c6 01 00       	call   c0027643 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 c9 d6 01 00       	call   c00286b7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 b2 cc 01 00       	call   c0027cc0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 1d c6 01 00       	call   c0027643 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 6a d6 01 00       	call   c00286b7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 53 cc 01 00       	call   c0027cc0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 be c5 01 00       	call   c0027643 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 0b d6 01 00       	call   c00286b7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 f4 cb 01 00       	call   c0027cc0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 5f c5 01 00       	call   c0027643 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 ac d5 01 00       	call   c00286b7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 95 cb 01 00       	call   c0027cc0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 00 c5 01 00       	call   c0027643 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 4d d5 01 00       	call   c00286b7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 36 cb 01 00       	call   c0027cc0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 a1 c4 01 00       	call   c0027643 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 ab bd 01 00       	call   c0026fd8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 82 d4 01 00       	call   c00286b7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 6b ca 01 00       	call   c0027cc0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 52 d4 01 00       	call   c00286b7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 c4 c3 01 00       	call   c0027643 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6120]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 f7 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 e0 c9 01 00       	call   c0027cc0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 4b c3 01 00       	call   c0027643 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 97 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 80 c9 01 00       	call   c0027cc0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 eb c2 01 00       	call   c0027643 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 37 d3 01 00       	call   c00286b7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 20 c9 01 00       	call   c0027cc0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 8b c2 01 00       	call   c0027643 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 d7 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 c0 c8 01 00       	call   c0027cc0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 2b c2 01 00       	call   c0027643 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 77 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 60 c8 01 00       	call   c0027cc0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 cb c1 01 00       	call   c0027643 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 17 d2 01 00       	call   c00286b7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 00 c8 01 00       	call   c0027cc0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 6b c1 01 00       	call   c0027643 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 b7 d1 01 00       	call   c00286b7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 a0 c7 01 00       	call   c0027cc0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 0b c1 01 00       	call   c0027643 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 57 d1 01 00       	call   c00286b7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 40 c7 01 00       	call   c0027cc0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 ab c0 01 00       	call   c0027643 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6104]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 50 c0 01 00       	call   c0027643 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 ad c6 01 00       	call   c0027cc0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 69 cf 01 00       	call   c0028593 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 f3 bf 01 00       	call   c0027643 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 50 c6 01 00       	call   c0027cc0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 0c cf 01 00       	call   c0028593 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 96 bf 01 00       	call   c0027643 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 f3 c5 01 00       	call   c0027cc0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 af ce 01 00       	call   c0028593 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 39 bf 01 00       	call   c0027643 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 96 c5 01 00       	call   c0027cc0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 52 ce 01 00       	call   c0028593 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 dc be 01 00       	call   c0027643 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 39 c5 01 00       	call   c0027cc0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 f5 cd 01 00       	call   c0028593 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 7f be 01 00       	call   c0027643 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 dc c4 01 00       	call   c0027cc0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 98 cd 01 00       	call   c0028593 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 22 be 01 00       	call   c0027643 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 7f c4 01 00       	call   c0027cc0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 3b cd 01 00       	call   c0028593 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 c5 bd 01 00       	call   c0027643 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 22 c4 01 00       	call   c0027cc0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 de cc 01 00       	call   c0028593 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 da c3 01 00       	call   c0027cc0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 4a ce 01 00       	jmp    c0028740 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 bc ca 01 00       	call   c002858f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 7a ca 01 00       	call   c0028571 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 11 c8 01 00       	call   c0028323 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 12 bb 01 00       	call   c0027643 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 e1 c7 01 00       	call   c0028323 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 48 c4 01 00       	call   c0027fa4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 e7 c9 01 00       	call   c0028571 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ea c9 01 00       	call   c002858f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 bd c9 01 00       	call   c002858f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 b6 c3 01 00       	call   c0027fa4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 38 cb 01 00       	call   c0028740 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 13 cb 01 00       	call   c0028740 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ed c6 01 00       	call   c0028323 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 44 c0 01 00       	call   c0027c94 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 23 c9 01 00       	call   c002858f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 bc b9 01 00       	call   c0027643 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 e0 bf 01 00       	call   c0027c94 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 7a ca 01 00       	call   c0028740 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ba c2 01 00       	call   c0027fa4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 37 b9 01 00       	call   c0027643 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 63 c5 01 00       	call   c0028323 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 63 b8 01 00       	call   c0027643 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 43 b8 01 00       	call   c0027643 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 13 c5 01 00       	call   c0028323 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 63 c7 01 00       	call   c002858d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 42 be 01 00       	call   c0027c94 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 bc c8 01 00       	call   c0028720 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 eb c6 01 00       	call   c0028571 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 e9 bd 01 00       	call   c0027c94 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 67 c4 01 00       	call   c0028323 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ea bd 01 00       	call   c0027cc0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 3c c4 01 00       	call   c0028323 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 a3 c0 01 00       	call   c0027fa4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 22 b7 01 00       	call   c0027643 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ec c3 01 00       	call   c0028323 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 38 c6 01 00       	call   c002858f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 2d bd 01 00       	call   c0027cc0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ff bc 01 00       	call   c0027cc0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 38 c3 01 00       	call   c0028323 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 9c bf 01 00       	call   c0027fa4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 64 bf 01 00       	call   c0027fa4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 e3 b5 01 00       	call   c0027643 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 c8 c6 01 00       	call   c0028740 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 a2 c2 01 00       	call   c0028323 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 f9 bb 01 00       	call   c0027c94 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 d8 c4 01 00       	call   c002858f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 70 b5 01 00       	call   c0027643 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 94 bb 01 00       	call   c0027c94 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 2e c6 01 00       	call   c0028740 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 f7 c3 01 00       	call   c002858f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 b5 c3 01 00       	call   c0028571 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 4c c1 01 00       	call   c0028323 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 4d b4 01 00       	call   c0027643 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 1c c1 01 00       	call   c0028323 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 83 bd 01 00       	call   c0027fa4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 22 c3 01 00       	call   c0028571 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 25 c3 01 00       	call   c002858f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 f8 c2 01 00       	call   c002858f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 f1 bc 01 00       	call   c0027fa4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 73 c4 01 00       	call   c0028740 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 4e c4 01 00       	call   c0028740 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 28 c0 01 00       	call   c0028323 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 7f b9 01 00       	call   c0027c94 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 5e c2 01 00       	call   c002858f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 f7 b2 01 00       	call   c0027643 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 1b b9 01 00       	call   c0027c94 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 b5 c3 01 00       	call   c0028740 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 f5 bb 01 00       	call   c0027fa4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 72 b2 01 00       	call   c0027643 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 9d be 01 00       	call   c0028323 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 9d b1 01 00       	call   c0027643 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 7d b1 01 00       	call   c0027643 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 4d be 01 00       	call   c0028323 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 9d c0 01 00       	call   c002858d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 7b b7 01 00       	call   c0027c94 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 f5 c1 01 00       	call   c0028720 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 24 c0 01 00       	call   c0028571 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 21 b7 01 00       	call   c0027c94 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 9f bd 01 00       	call   c0028323 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 22 b7 01 00       	call   c0027cc0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 74 bd 01 00       	call   c0028323 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 db b9 01 00       	call   c0027fa4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 5a b0 01 00       	call   c0027643 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 24 bd 01 00       	call   c0028323 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 70 bf 01 00       	call   c002858f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 65 b6 01 00       	call   c0027cc0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 37 b6 01 00       	call   c0027cc0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 6e bc 01 00       	call   c0028323 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 d2 b8 01 00       	call   c0027fa4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 9f b8 01 00       	call   c0027fa4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 1e af 01 00       	call   c0027643 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 03 c0 01 00       	call   c0028740 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 dd bb 01 00       	call   c0028323 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 34 b5 01 00       	call   c0027c94 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 13 be 01 00       	call   c002858f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 ab ae 01 00       	call   c0027643 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 cf b4 01 00       	call   c0027c94 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 69 bf 01 00       	call   c0028740 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 32 bd 01 00       	call   c002858f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 f0 bc 01 00       	call   c0028571 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 87 ba 01 00       	call   c0028323 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 88 ad 01 00       	call   c0027643 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 57 ba 01 00       	call   c0028323 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 be b6 01 00       	call   c0027fa4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 5d bc 01 00       	call   c0028571 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 60 bc 01 00       	call   c002858f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 33 bc 01 00       	call   c002858f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 2c b6 01 00       	call   c0027fa4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 ae bd 01 00       	call   c0028740 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 89 bd 01 00       	call   c0028740 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 63 b9 01 00       	call   c0028323 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ba b2 01 00       	call   c0027c94 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 99 bb 01 00       	call   c002858f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 32 ac 01 00       	call   c0027643 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 56 b2 01 00       	call   c0027c94 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 f0 bc 01 00       	call   c0028740 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 30 b5 01 00       	call   c0027fa4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 ad ab 01 00       	call   c0027643 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 d8 b7 01 00       	call   c0028323 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 d8 aa 01 00       	call   c0027643 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 b8 aa 01 00       	call   c0027643 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 88 b7 01 00       	call   c0028323 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 d8 b9 01 00       	call   c002858d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 b6 b0 01 00       	call   c0027c94 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 30 bb 01 00       	call   c0028720 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 5f b9 01 00       	call   c0028571 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 5c b0 01 00       	call   c0027c94 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 da b6 01 00       	call   c0028323 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 5d b0 01 00       	call   c0027cc0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 af b6 01 00       	call   c0028323 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 16 b3 01 00       	call   c0027fa4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 95 a9 01 00       	call   c0027643 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 5f b6 01 00       	call   c0028323 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 ab b8 01 00       	call   c002858f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 a0 af 01 00       	call   c0027cc0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 72 af 01 00       	call   c0027cc0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 a9 b5 01 00       	call   c0028323 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 0d b2 01 00       	call   c0027fa4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 da b1 01 00       	call   c0027fa4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 59 a8 01 00       	call   c0027643 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 3e b9 01 00       	call   c0028740 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 18 b5 01 00       	call   c0028323 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 6f ae 01 00       	call   c0027c94 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 4e b7 01 00       	call   c002858f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 e6 a7 01 00       	call   c0027643 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 0a ae 01 00       	call   c0027c94 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 a4 b8 01 00       	call   c0028740 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 6d b6 01 00       	call   c002858f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 2b b6 01 00       	call   c0028571 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 c2 b3 01 00       	call   c0028323 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 c3 a6 01 00       	call   c0027643 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 92 b3 01 00       	call   c0028323 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 f9 af 01 00       	call   c0027fa4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 98 b5 01 00       	call   c0028571 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 9b b5 01 00       	call   c002858f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 6e b5 01 00       	call   c002858f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 67 af 01 00       	call   c0027fa4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 e9 b6 01 00       	call   c0028740 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 c4 b6 01 00       	call   c0028740 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 9e b2 01 00       	call   c0028323 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 f5 ab 01 00       	call   c0027c94 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 d4 b4 01 00       	call   c002858f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 6d a5 01 00       	call   c0027643 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 91 ab 01 00       	call   c0027c94 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 2b b6 01 00       	call   c0028740 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 6b ae 01 00       	call   c0027fa4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 e8 a4 01 00       	call   c0027643 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 13 b1 01 00       	call   c0028323 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 13 a4 01 00       	call   c0027643 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 f3 a3 01 00       	call   c0027643 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 c3 b0 01 00       	call   c0028323 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 13 b3 01 00       	call   c002858d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 f1 a9 01 00       	call   c0027c94 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 6b b4 01 00       	call   c0028720 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 9a b2 01 00       	call   c0028571 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 97 a9 01 00       	call   c0027c94 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 15 b0 01 00       	call   c0028323 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 98 a9 01 00       	call   c0027cc0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ea af 01 00       	call   c0028323 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 51 ac 01 00       	call   c0027fa4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 d0 a2 01 00       	call   c0027643 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 9a af 01 00       	call   c0028323 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 e6 b1 01 00       	call   c002858f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 db a8 01 00       	call   c0027cc0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 ad a8 01 00       	call   c0027cc0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 e4 ae 01 00       	call   c0028323 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 48 ab 01 00       	call   c0027fa4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 15 ab 01 00       	call   c0027fa4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 94 a1 01 00       	call   c0027643 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 79 b2 01 00       	call   c0028740 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 53 ae 01 00       	call   c0028323 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 aa a7 01 00       	call   c0027c94 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 89 b0 01 00       	call   c002858f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 21 a1 01 00       	call   c0027643 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 45 a7 01 00       	call   c0027c94 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 df b1 01 00       	call   c0028740 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 a5 af 01 00       	call   c002858f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 63 af 01 00       	call   c0028571 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 fa ac 01 00       	call   c0028323 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 fb 9f 01 00       	call   c0027643 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ca ac 01 00       	call   c0028323 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 31 a9 01 00       	call   c0027fa4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 d0 ae 01 00       	call   c0028571 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 d3 ae 01 00       	call   c002858f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 a6 ae 01 00       	call   c002858f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 9f a8 01 00       	call   c0027fa4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 21 b0 01 00       	call   c0028740 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 f8 af 01 00       	call   c0028740 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 d2 ab 01 00       	call   c0028323 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 29 a5 01 00       	call   c0027c94 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 08 ae 01 00       	call   c002858f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 a1 9e 01 00       	call   c0027643 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 c9 a4 01 00       	call   c0027c94 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 63 af 01 00       	call   c0028740 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 a4 a7 01 00       	call   c0027fa4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 21 9e 01 00       	call   c0027643 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 4d aa 01 00       	call   c0028323 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 4d 9d 01 00       	call   c0027643 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 2d 9d 01 00       	call   c0027643 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 fd a9 01 00       	call   c0028323 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 31 ac 01 00       	call   c0028571 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 28 a3 01 00       	call   c0027c94 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 a2 ad 01 00       	call   c0028720 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 d1 ab 01 00       	call   c0028571 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 cb a2 01 00       	call   c0027c94 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 49 a9 01 00       	call   c0028323 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 cc a2 01 00       	call   c0027cc0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 1e a9 01 00       	call   c0028323 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 85 a5 01 00       	call   c0027fa4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 04 9c 01 00       	call   c0027643 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ce a8 01 00       	call   c0028323 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 1a ab 01 00       	call   c002858f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 0f a2 01 00       	call   c0027cc0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 e1 a1 01 00       	call   c0027cc0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 25 a8 01 00       	call   c0028323 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 8c a4 01 00       	call   c0027fa4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 75 a1 01 00       	call   c0027cc0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 31 aa 01 00       	call   c0028593 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 24 a4 01 00       	call   c0027fa4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 a3 9a 01 00       	call   c0027643 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 88 ab 01 00       	call   c0028740 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 62 a7 01 00       	call   c0028323 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 b9 a0 01 00       	call   c0027c94 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 98 a9 01 00       	call   c002858f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 30 9a 01 00       	call   c0027643 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 58 a0 01 00       	call   c0027c94 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 f2 aa 01 00       	call   c0028740 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 ad a7 01 00       	call   c002858f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 6b a7 01 00       	call   c0028571 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 57 a7 01 00       	call   c002858f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 c9 a4 01 00       	call   c0028323 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 47 9e 01 00       	call   c0027cc0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 99 a4 01 00       	call   c0028323 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 9f 97 01 00       	call   c0027643 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 6e a4 01 00       	call   c0028323 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 be a6 01 00       	call   c002858d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 9f 9d 01 00       	call   c0027c94 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 19 a8 01 00       	call   c0028720 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 48 a6 01 00       	call   c0028571 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 47 9d 01 00       	call   c0027c94 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 c5 a3 01 00       	call   c0028323 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 48 9d 01 00       	call   c0027cc0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 9a a3 01 00       	call   c0028323 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 01 a0 01 00       	call   c0027fa4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 80 96 01 00       	call   c0027643 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 a8 9f 01 00       	call   c0027fa4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 2e 96 01 00       	call   c0027643 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 14 a7 01 00       	call   c0028740 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ee a2 01 00       	call   c0028323 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 45 9c 01 00       	call   c0027c94 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 24 a5 01 00       	call   c002858f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 bd 95 01 00       	call   c0027643 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 e9 9b 01 00       	call   c0027c94 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 83 a6 01 00       	call   c0028740 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 38 a2 01 00       	call   c0028323 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 b5 9b 01 00       	call   c0027cc0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 06 a2 01 00       	call   c0028323 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 0c 95 01 00       	call   c0027643 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 dc a1 01 00       	call   c0028323 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 30 a4 01 00       	call   c0028591 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 09 9b 01 00       	call   c0027c94 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 83 a5 01 00       	call   c0028720 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 b2 a3 01 00       	call   c0028571 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 b0 9a 01 00       	call   c0027c94 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 2e a1 01 00       	call   c0028323 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 b1 9a 01 00       	call   c0027cc0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 03 a1 01 00       	call   c0028323 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 6a 9d 01 00       	call   c0027fa4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 e9 93 01 00       	call   c0027643 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 05 9d 01 00       	call   c0027fa4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 84 93 01 00       	call   c0027643 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 6a a4 01 00       	call   c0028740 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 44 a0 01 00       	call   c0028323 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 9b 99 01 00       	call   c0027c94 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 7a a2 01 00       	call   c002858f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 13 93 01 00       	call   c0027643 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 3f 99 01 00       	call   c0027c94 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 b0 9f 01 00       	call   c0028323 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 b6 92 01 00       	call   c0027643 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e a0 02 c0       	mov    eax,0xc002a03e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f a0 02 c0       	mov    eax,0xc002a04f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 a0 02 c0       	push   0xc002a086
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 e5 02 c0       	mov    eax,0xc002e568
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f a0 02 c0       	push   0xc002a08f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 bc 6a 02 c0       	mov    eax,0xc0026abc
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 a0 02 c0       	push   0xc002a099
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 f0 67 02 c0       	mov    eax,0xc00267f0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 bc 6b 02 c0       	mov    eax,0xc0026bbc
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac a0 02 c0       	push   0xc002a0ac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 3c 69 02 c0       	mov    eax,0xc002693c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 a0 02 c0       	push   0xc002a0b5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c e5 02 c0       	mov    eax,0xc002e56c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 a0 02 c0       	push   0xc002a0c2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d e5 02 c0       	mov    eax,0xc002e56d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 b1 5f 00 00       	call   c00145d4 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c000e668:	68 cf a0 02 c0       	push   0xc002a0cf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 99 f6 00 00       	call   c001dd0e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 82 f9 00 00       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 6a e8 01 c0       	push   0xc001e86a
c000e693:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c000e699:	e8 6e f9 00 00       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c000e6a6:	c6 05 6d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e56d,0x1
c000e6ad:	e8 39 05 01 00       	call   c001ebeb <Vm::initialise8086()>
c000e6b2:	e8 05 4d 00 00       	call   c00133bc <Fs::initVFS()>
c000e6b7:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 b1 df 00 00       	call   c001c684 <Sys::loadSyscalls()>
c000e6d3:	e8 d4 be 00 00       	call   c001a5ac <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc a0 02 c0       	push   0xc002a0dc
c000e6e2:	68 e5 a0 02 c0       	push   0xc002a0e5
c000e6e7:	e8 e6 cb 00 00       	call   c001b2d2 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 b0 57 00 00       	call   c0013ea4 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 a3 5e 00 00       	call   c00145a8 <Device::loadDriversForAll()>
c000e705:	e8 e8 b9 00 00       	call   c001a0f2 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ed a0 02 c0       	push   0xc002a0ed
c000e719:	e8 fa f0 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 40 f3 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 3c fc 00 00       	call   c001e370 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 09 a1 02 c0       	push   0xc002a109
c000e749:	50                   	push   eax
c000e74a:	e8 ff 5e 00 00       	call   c001464e <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba a8 a2 02 c0       	mov    edx,0xc002a2a8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 81 e5 02 c0 04 	test   BYTE PTR ds:0xc002e581,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 a3 7e 01 00       	call   c0026786 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 e6 a4 00 00       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 bf a4 00 00       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 9d a4 00 00       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 7b a4 00 00       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 80 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e580,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 89 a3 00 00       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 64 a3 00 00       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 0d 7d 01 00       	call   c0026740 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 ca 7c 01 00       	call   c0026720 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 80 a3 00 00       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 19 a1 02 c0       	push   0xc002a119
c000eaaf:	e8 84 45 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 2c a1 02 c0       	push   0xc002a12c
c000ead2:	e8 61 45 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 3d a1 02 c0       	push   0xc002a13d
c000eaf5:	e8 3e 45 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 4e a1 02 c0       	push   0xc002a14e
c000eb18:	e8 1b 45 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 5f a1 02 c0       	push   0xc002a15f
c000eb3b:	e8 f8 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 70 a1 02 c0       	push   0xc002a170
c000eb5e:	e8 d5 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 81 a1 02 c0       	push   0xc002a181
c000eb81:	e8 b2 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 92 a1 02 c0       	push   0xc002a192
c000eba4:	e8 8f 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 a3 a1 02 c0       	push   0xc002a1a3
c000ebc7:	e8 6c 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 b4 a1 02 c0       	push   0xc002a1b4
c000ebea:	e8 49 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 c5 a1 02 c0       	push   0xc002a1c5
c000ec0d:	e8 26 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 d6 a1 02 c0       	push   0xc002a1d6
c000ec30:	e8 03 44 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 e7 a1 02 c0       	push   0xc002a1e7
c000ec53:	e8 e0 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 f8 a1 02 c0       	push   0xc002a1f8
c000ec76:	e8 bd 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 09 a2 02 c0       	push   0xc002a209
c000ec99:	e8 9a 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 1a a2 02 c0       	push   0xc002a21a
c000ecbc:	e8 77 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 2b a2 02 c0       	push   0xc002a22b
c000ecdf:	e8 54 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 3c a2 02 c0       	push   0xc002a23c
c000ed02:	e8 31 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 4d a2 02 c0       	push   0xc002a24d
c000ed21:	e8 12 43 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 4c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc4c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 01 43 00 00       	jmp    c0013038 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 5e a2 02 c0       	push   0xc002a25e
c000ee0a:	e8 d6 b8 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 64 a2 02 c0       	push   0xc002a264
c000ee42:	e8 9e b8 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 80 e5 02 c0 04 	test   BYTE PTR ds:0xc002e580,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 a4 d4 02 c0 	sete   BYTE PTR ds:0xc002d4a4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 1f 94 00 00       	call   c00182d4 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 9a 55 00 00       	call   c001445e <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 c8 9f 00 00       	call   c0018ebc <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 5b 55 00 00       	call   c001445e <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 c5 5a 00 00       	call   c00149e4 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 2b 55 00 00       	call   c001445e <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 b7 f1 00 00       	call   c001e10c <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 6a a2 02 c0       	push   0xc002a26a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 95 40 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 7b a2 02 c0       	push   0xc002a27b
c000efc0:	e8 20 b7 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 88 a2 02 c0       	push   0xc002a288
c000efd5:	e8 0b b7 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 92 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a292
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 f4 b6 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 cc a2 02 c0       	push   0xc002a2cc
c000f086:	e8 ad 3f 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 72 e5 02 c0       	mov    ds:0xc002e572,eax
c000f0c7:	66 89 15 70 e5 02 c0 	mov    WORD PTR ds:0xc002e570,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 fe ec 00 00       	call   c001dedc <unlockScheduler()>
c000f1de:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 94 95 01 00       	call   c00287c0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 8b 95 01 00       	call   c00287c0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 78 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e578,0x7ff
c000f323:	a3 7a e5 02 c0       	mov    ds:0xc002e57a,eax
c000f328:	0f 01 1d 78 e5 02 c0 	lidtd  ds:0xc002e578
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 2b 28 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5c 2e 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 98 1e 00 00       	call   c00114d6 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c9 1e 00 00       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 94 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d494
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 94 d4 02 c0       	mov    eax,ds:0xc002d494
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 e8 a2 02 c0       	push   0xc002a2e8
c000f6f4:	e8 3f 39 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 94 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d494,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 21 27 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 94 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d494
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 43 2c 00 00       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 94 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d494
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 18 a3 02 c0       	push   0xc002a318
c000f7ad:	e8 33 af 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 1d a3 02 c0       	push   0xc002a31d
c000f7c3:	e8 1d af 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 01 e7 00 00       	call   c001deda <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 f2 e6 00 00       	call   c001dedc <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 45 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 6f 2c 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 27 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 12 29 00 00       	call   c0012138 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 a0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4a0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 b5 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 77 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 0e 0d 00 00       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 a0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4a0
c000fb49:	80 3d 00 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e600,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d a0 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d4a0,0x8000
c000fba3:	c6 05 00 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e600,0x1
c000fbaa:	c7 05 38 e6 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e638,0xc000fa16
c000fbb4:	c7 05 24 e6 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e624,0xc000f89d
c000fbbe:	c7 05 20 e6 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e620,0xc000f8e8
c000fbc8:	c7 05 2c e6 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e62c,0xc000fa5c
c000fbd2:	c7 05 34 e6 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e634,0xc000f966
c000fbdc:	c7 05 28 e6 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e628,0xc000f9c4
c000fbe6:	c7 05 30 e6 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e630,0xc000f9c5
c000fbf0:	c7 05 3c e6 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e63c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 10             	sub    esp,0x10
c000fc08:	e8 f5 09 00 00       	call   c0010602 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 24 a3 02 c0       	push   0xc002a324
c000fc4d:	e8 e6 33 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 54 04 00 00       	call   c00100bd <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 f6 20 00 00       	call   c0011d64 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 4d bc 02 c0       	push   0xc002bc4d
c000fc95:	e8 4b aa 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 80 e5 02 c0    	mov    DWORD PTR ds:0xc002e580,ebx
c000fca6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 c6 22 00 00       	call   c0011f76 <VAS::VAS()>
c000fcb0:	89 1d ec e6 02 c0    	mov    DWORD PTR ds:0xc002e6ec,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 3b a3 02 c0 	mov    DWORD PTR [esp],0xc002a33b
c000fcc2:	e8 71 33 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 17 21 00 00       	call   c0011de3 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 58 a3 02 c0       	push   0xc002a358
c000fcf0:	e8 43 33 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 01 25 00 00       	call   c0012210 <VAS::~VAS()>
c000fd0f:	c7 04 24 6b a3 02 c0 	mov    DWORD PTR [esp],0xc002a36b
c000fd16:	e8 ca a9 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000fd1b:	83 c4 20             	add    esp,0x20
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba c0 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a40],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be c0 e5 02 c0       	mov    esi,0xc002e5c0
c000fd8c:	8d 90 c0 e5 02 c0    	lea    edx,[eax-0x3ffd1a40]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 c0 e5 02 c0    	lea    eax,[edx-0x3ffd1a40]
c000fdf2:	8d 94 11 c0 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a40]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 98 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d498
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 98 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d498
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 98 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d498
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 b0 e5 02 c0       	mov    ds:0xc002e5b0,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d b4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5b4
c000fe94:	39 05 ac e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ac,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 ac e5 02 c0       	mov    ds:0xc002e5ac,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 d9 0a 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 86 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a386
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 00 a8 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 14             	sub    esp,0x14
c000feea:	8b 35 a4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5a4
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x19>
c000fef4:	89 1d a4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a4,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x3d>
c000fefe:	53                   	push   ebx
c000feff:	e8 3b ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x82>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0xf>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 a4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5a4,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x19>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 9c a3 02 c0       	push   0xc002a39c
c000ff2a:	e8 09 31 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e7 fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 ac 00 00 00    	jne    c000fff2 <Phys::allocatePage()+0x10d>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 ad a3 02 c0       	push   0xc002a3ad
c000ff4e:	e8 92 a7 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d a4 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a4
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 dd fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x24>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9e fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c000ff74:	59                   	pop    ecx
c000ff75:	40                   	inc    eax
c000ff76:	5b                   	pop    ebx
c000ff77:	a3 b0 e5 02 c0       	mov    ds:0xc002e5b0,eax
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff82:	c1 e0 02             	shl    eax,0x2
c000ff85:	99                   	cdq    
c000ff86:	f7 3d b4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5b4
c000ff8c:	39 05 ac e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ac,eax
c000ff92:	75 64                	jne    c000fff8 <Phys::allocatePage()+0x113>
c000ff94:	83 f8 32             	cmp    eax,0x32
c000ff97:	7e 51                	jle    c000ffea <Phys::allocatePage()+0x105>
c000ff99:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000ffa0:	75 48                	jne    c000ffea <Phys::allocatePage()+0x105>
c000ffa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa7:	85 c0                	test   eax,eax
c000ffa9:	74 22                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 1b                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffb2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb8:	85 c0                	test   eax,eax
c000ffba:	74 11                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffbc:	52                   	push   edx
c000ffbd:	68 c8 00 00 00       	push   0xc8
c000ffc2:	6a 04                	push   0x4
c000ffc4:	50                   	push   eax
c000ffc5:	e8 74 2b 00 00       	call   c0012b3e <VAS::scanForEviction(int, int)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c000ffd2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd8:	c1 e0 02             	shl    eax,0x2
c000ffdb:	99                   	cdq    
c000ffdc:	f7 3d b4 e5 02 c0    	idiv   DWORD PTR ds:0xc002e5b4
c000ffe2:	39 05 ac e5 02 c0    	cmp    DWORD PTR ds:0xc002e5ac,eax
c000ffe8:	75 2e                	jne    c0010018 <Phys::allocatePage()+0x133>
c000ffea:	a1 a4 e5 02 c0       	mov    eax,ds:0xc002e5a4
c000ffef:	c1 e0 0c             	shl    eax,0xc
c000fff2:	83 c4 14             	add    esp,0x14
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	c3                   	ret    
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	a3 ac e5 02 c0       	mov    ds:0xc002e5ac,eax
c0010000:	50                   	push   eax
c0010001:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010005:	e8 8c 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010011:	83 f8 32             	cmp    eax,0x32
c0010014:	7e d4                	jle    c000ffea <Phys::allocatePage()+0x105>
c0010016:	eb 81                	jmp    c000ff99 <Phys::allocatePage()+0xb4>
c0010018:	83 ec 0c             	sub    esp,0xc
c001001b:	a3 ac e5 02 c0       	mov    ds:0xc002e5ac,eax
c0010020:	50                   	push   eax
c0010021:	e8 70 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	eb bf                	jmp    c000ffea <Phys::allocatePage()+0x105>

c001002b <Phys::allocateContiguousPages(int)>:
c001002b:	57                   	push   edi
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	31 db                	xor    ebx,ebx
c0010030:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010034:	e8 a1 de 00 00       	call   c001deda <lockScheduler()>
c0010039:	85 db                	test   ebx,ebx
c001003b:	75 11                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001003d:	e8 a3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010042:	83 ff 01             	cmp    edi,0x1
c0010045:	89 c6                	mov    esi,eax
c0010047:	74 21                	je     c001006a <Phys::allocateContiguousPages(int)+0x3f>
c0010049:	bb 01 00 00 00       	mov    ebx,0x1
c001004e:	e8 92 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010053:	89 da                	mov    edx,ebx
c0010055:	c1 e2 0c             	shl    edx,0xc
c0010058:	01 f2                	add    edx,esi
c001005a:	39 c2                	cmp    edx,eax
c001005c:	74 17                	je     c0010075 <Phys::allocateContiguousPages(int)+0x4a>
c001005e:	bb 01 00 00 00       	mov    ebx,0x1
c0010063:	89 c6                	mov    esi,eax
c0010065:	83 ff 01             	cmp    edi,0x1
c0010068:	75 e4                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001006a:	e8 6d de 00 00       	call   c001dedc <unlockScheduler()>
c001006f:	89 f0                	mov    eax,esi
c0010071:	5b                   	pop    ebx
c0010072:	5e                   	pop    esi
c0010073:	5f                   	pop    edi
c0010074:	c3                   	ret    
c0010075:	43                   	inc    ebx
c0010076:	39 fb                	cmp    ebx,edi
c0010078:	75 bf                	jne    c0010039 <Phys::allocateContiguousPages(int)+0xe>
c001007a:	e8 5d de 00 00       	call   c001dedc <unlockScheduler()>
c001007f:	89 f0                	mov    eax,esi
c0010081:	5b                   	pop    ebx
c0010082:	5e                   	pop    esi
c0010083:	5f                   	pop    edi
c0010084:	c3                   	ret    

c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010085:	56                   	push   esi
c0010086:	53                   	push   ebx
c0010087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008b:	39 1d a8 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5a8,ebx
c0010091:	73 06                	jae    c0010099 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010093:	89 1d a8 e5 02 c0    	mov    DWORD PTR ds:0xc002e5a8,ebx
c0010099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009d:	c1 eb 0c             	shr    ebx,0xc
c00100a0:	c1 e8 0c             	shr    eax,0xc
c00100a3:	39 d8                	cmp    eax,ebx
c00100a5:	73 13                	jae    c00100ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a7:	6a 00                	push   0x0
c00100a9:	8d 70 01             	lea    esi,[eax+0x1]
c00100ac:	50                   	push   eax
c00100ad:	e8 5b fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100b2:	5a                   	pop    edx
c00100b3:	89 f0                	mov    eax,esi
c00100b5:	59                   	pop    ecx
c00100b6:	39 f3                	cmp    ebx,esi
c00100b8:	75 ed                	jne    c00100a7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100ba:	5b                   	pop    ebx
c00100bb:	5e                   	pop    esi
c00100bc:	c3                   	ret    

c00100bd <Phys::physicalMemorySetup(unsigned int)>:
c00100bd:	55                   	push   ebp
c00100be:	57                   	push   edi
c00100bf:	56                   	push   esi
c00100c0:	53                   	push   ebx
c00100c1:	31 db                	xor    ebx,ebx
c00100c3:	83 ec 40             	sub    esp,0x40
c00100c6:	6a 30                	push   0x30
c00100c8:	6a 00                	push   0x0
c00100ca:	68 c0 e5 02 c0       	push   0xc002e5c0
c00100cf:	e8 a4 06 ff ff       	call   c0000778 <memset>
c00100d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100dd:	05 00 10 00 00       	add    eax,0x1000
c00100e2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	83 ec 08             	sub    esp,0x8
c00100ec:	6a 01                	push   0x1
c00100ee:	53                   	push   ebx
c00100ef:	43                   	inc    ebx
c00100f0:	e8 18 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100fe:	75 e9                	jne    c00100e9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010100:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010107:	66 85 c0             	test   ax,ax
c001010a:	0f 84 8e 01 00 00    	je     c001029e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010114:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001011c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010120:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010129:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010131:	eb 15                	jmp    c0010148 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010133:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010137:	83 c3 18             	add    ebx,0x18
c001013a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010142:	0f 84 66 01 00 00    	je     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010148:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001014b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001014e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010151:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010155:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010159:	8b 33                	mov    esi,DWORD PTR [ebx]
c001015b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001015e:	01 f0                	add    eax,esi
c0010160:	55                   	push   ebp
c0010161:	11 fa                	adc    edx,edi
c0010163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010167:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001016b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001016f:	56                   	push   esi
c0010170:	68 e8 a3 02 c0       	push   0xc002a3e8
c0010175:	e8 be 2e 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001017a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	09 f8                	or     eax,edi
c0010183:	0f 85 25 01 00 00    	jne    c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010189:	4d                   	dec    ebp
c001018a:	75 a7                	jne    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018c:	ba 00 00 08 00       	mov    edx,0x80000
c0010191:	89 c1                	mov    ecx,eax
c0010193:	39 f2                	cmp    edx,esi
c0010195:	19 f9                	sbb    ecx,edi
c0010197:	0f 82 a7 00 00 00    	jb     c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101a1:	89 c1                	mov    ecx,eax
c00101a3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a7:	0f 83 97 00 00 00    	jae    c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ad:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	19 e8                	sbb    eax,ebp
c00101be:	0f 82 14 01 00 00    	jb     c00102d8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101cc:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101d2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d7:	83 d5 ff             	adc    ebp,0xffffffff
c00101da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101de:	31 c0                	xor    eax,eax
c00101e0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e4:	39 fa                	cmp    edx,edi
c00101e6:	89 c1                	mov    ecx,eax
c00101e8:	19 e9                	sbb    ecx,ebp
c00101ea:	0f 83 43 ff ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f0:	be 00 00 08 00       	mov    esi,0x80000
c00101f5:	50                   	push   eax
c00101f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101fa:	57                   	push   edi
c00101fb:	56                   	push   esi
c00101fc:	68 0c a4 02 c0       	push   0xc002a40c
c0010201:	e8 32 2e 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0010206:	5a                   	pop    edx
c0010207:	59                   	pop    ecx
c0010208:	57                   	push   edi
c0010209:	56                   	push   esi
c001020a:	e8 76 fe ff ff       	call   c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001020f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010217:	83 c4 0c             	add    esp,0xc
c001021a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001021e:	03 05 b4 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e5b4
c0010224:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001022b:	a3 b4 e5 02 c0       	mov    ds:0xc002e5b4,eax
c0010230:	52                   	push   edx
c0010231:	50                   	push   eax
c0010232:	68 c9 a3 02 c0       	push   0xc002a3c9
c0010237:	e8 fc 2d 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	e9 ef fe ff ff       	jmp    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010244:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010250:	39 ea                	cmp    edx,ebp
c0010252:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010256:	0f 82 d7 fe ff ff    	jb     c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010261:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010265:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010269:	0f 83 c4 fe ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026f:	39 ee                	cmp    esi,ebp
c0010271:	89 f8                	mov    eax,edi
c0010273:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010277:	0f 83 78 ff ff ff    	jae    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010285:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010289:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010295:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010299:	e9 57 ff ff ff       	jmp    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	68 bb a3 02 c0       	push   0xc002a3bb
c00102a6:	e8 3a a4 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	bb 40 01 00 00       	mov    ebx,0x140
c00102b3:	83 ec 08             	sub    esp,0x8
c00102b6:	6a 00                	push   0x0
c00102b8:	53                   	push   ebx
c00102b9:	43                   	inc    ebx
c00102ba:	e8 4e fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00102bf:	ff 05 b4 e5 02 c0    	inc    DWORD PTR ds:0xc002e5b4
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102ce:	75 e3                	jne    c00102b3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102d0:	83 c4 3c             	add    esp,0x3c
c00102d3:	5b                   	pop    ebx
c00102d4:	5e                   	pop    esi
c00102d5:	5f                   	pop    edi
c00102d6:	5d                   	pop    ebp
c00102d7:	c3                   	ret    
c00102d8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e8:	e9 d7 fe ff ff       	jmp    c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102ed:	90                   	nop

c00102ee <Pipe::isAtty()>:
c00102ee:	31 c0                	xor    eax,eax
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::~Pipe()>:
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	ba 78 a4 02 c0       	mov    edx,0xc002a478
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	89 10                	mov    DWORD PTR [eax],edx
c0010300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010304:	83 ec 0c             	sub    esp,0xc
c0010307:	50                   	push   eax
c0010308:	e8 37 16 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	90                   	nop
c0010311:	83 c4 0c             	add    esp,0xc
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <Pipe::~Pipe()>:
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	83 ec 0c             	sub    esp,0xc
c001031c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010320:	e8 cd ff ff ff       	call   c00102f2 <Pipe::~Pipe()>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	6a 20                	push   0x20
c001032d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010331:	e8 22 2c 00 00       	call   c0012f58 <operator delete(void*, unsigned long)>
c0010336:	83 c4 10             	add    esp,0x10
c0010339:	83 c4 0c             	add    esp,0xc
c001033c:	c3                   	ret    
c001033d:	90                   	nop

c001033e <Pipe::read(unsigned long long, void*, int*)>:
c001033e:	55                   	push   ebp
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	53                   	push   ebx
c0010342:	83 ec 1c             	sub    esp,0x1c
c0010345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010354:	89 c8                	mov    eax,ecx
c0010356:	99                   	cdq    
c0010357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001035b:	74 19                	je     c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035d:	39 f9                	cmp    ecx,edi
c001035f:	89 d1                	mov    ecx,edx
c0010361:	19 f1                	sbb    ecx,esi
c0010363:	73 11                	jae    c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010365:	e8 70 db 00 00       	call   c001deda <lockScheduler()>
c001036a:	e8 a7 de 00 00       	call   c001e216 <schedule()>
c001036f:	e8 68 db 00 00       	call   c001dedc <unlockScheduler()>
c0010374:	eb db                	jmp    c0010351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010376:	39 f8                	cmp    eax,edi
c0010378:	89 d1                	mov    ecx,edx
c001037a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001037e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010382:	19 f1                	sbb    ecx,esi
c0010384:	73 08                	jae    c001038e <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010386:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001038a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001038e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010391:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010394:	29 c6                	sub    esi,eax
c0010396:	89 f1                	mov    ecx,esi
c0010398:	c1 f9 1f             	sar    ecx,0x1f
c001039b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001039f:	89 ca                	mov    edx,ecx
c00103a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a5:	19 d1                	sbb    ecx,edx
c00103a7:	73 04                	jae    c00103ad <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103ad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103b1:	89 fd                	mov    ebp,edi
c00103b3:	29 f5                	sub    ebp,esi
c00103b5:	85 f6                	test   esi,esi
c00103b7:	74 12                	je     c00103cb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b9:	52                   	push   edx
c00103ba:	56                   	push   esi
c00103bb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103be:	50                   	push   eax
c00103bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103c3:	e8 7c 03 ff ff       	call   c0000744 <memcpy>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	85 ed                	test   ebp,ebp
c00103cd:	74 12                	je     c00103e1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103cf:	50                   	push   eax
c00103d0:	55                   	push   ebp
c00103d1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103d4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d8:	56                   	push   esi
c00103d9:	e8 66 03 ff ff       	call   c0000744 <memcpy>
c00103de:	83 c4 10             	add    esp,0x10
c00103e1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ea:	99                   	cdq    
c00103eb:	89 f7                	mov    edi,esi
c00103ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103f5:	c1 ff 1f             	sar    edi,0x1f
c00103f8:	57                   	push   edi
c00103f9:	56                   	push   esi
c00103fa:	52                   	push   edx
c00103fb:	50                   	push   eax
c00103fc:	e8 bb 67 01 00       	call   c0026bbc <__umoddi3>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010407:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040c:	75 10                	jne    c001041e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	68 35 a4 02 c0       	push   0xc002a435
c0010416:	e8 ca a2 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010426:	89 10                	mov    DWORD PTR [eax],edx
c0010428:	83 c4 1c             	add    esp,0x1c
c001042b:	31 c0                	xor    eax,eax
c001042d:	5b                   	pop    ebx
c001042e:	5e                   	pop    esi
c001042f:	5f                   	pop    edi
c0010430:	5d                   	pop    ebp
c0010431:	c3                   	ret    

c0010432 <Pipe::write(unsigned long long, void*, int*)>:
c0010432:	55                   	push   ebp
c0010433:	57                   	push   edi
c0010434:	56                   	push   esi
c0010435:	53                   	push   ebx
c0010436:	83 ec 1c             	sub    esp,0x1c
c0010439:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001043d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010441:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010445:	89 04 24             	mov    DWORD PTR [esp],eax
c0010448:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001044b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001044e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010452:	89 de                	mov    esi,ebx
c0010454:	89 df                	mov    edi,ebx
c0010456:	c1 ff 1f             	sar    edi,0x1f
c0010459:	01 c6                	add    esi,eax
c001045b:	89 c8                	mov    eax,ecx
c001045d:	11 d7                	adc    edi,edx
c001045f:	99                   	cdq    
c0010460:	39 f1                	cmp    ecx,esi
c0010462:	89 d0                	mov    eax,edx
c0010464:	19 f8                	sbb    eax,edi
c0010466:	b8 01 00 00 00       	mov    eax,0x1
c001046b:	0f 82 80 00 00 00    	jb     c00104f1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010471:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010474:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010477:	01 d8                	add    eax,ebx
c0010479:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001047d:	99                   	cdq    
c001047e:	f7 f9                	idiv   ecx
c0010480:	29 d1                	sub    ecx,edx
c0010482:	89 d7                	mov    edi,edx
c0010484:	89 c8                	mov    eax,ecx
c0010486:	99                   	cdq    
c0010487:	39 ce                	cmp    esi,ecx
c0010489:	19 d3                	sbb    ebx,edx
c001048b:	bb 00 00 00 00       	mov    ebx,0x0
c0010490:	72 04                	jb     c0010496 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010492:	89 f3                	mov    ebx,esi
c0010494:	29 cb                	sub    ebx,ecx
c0010496:	89 f1                	mov    ecx,esi
c0010498:	29 d9                	sub    ecx,ebx
c001049a:	74 1a                	je     c00104b6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001049c:	52                   	push   edx
c001049d:	51                   	push   ecx
c001049e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a9:	57                   	push   edi
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b6:	85 db                	test   ebx,ebx
c00104b8:	74 12                	je     c00104cc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ba:	50                   	push   eax
c00104bb:	53                   	push   ebx
c00104bc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104c0:	51                   	push   ecx
c00104c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104c4:	e8 7b 02 ff ff       	call   c0000744 <memcpy>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104cf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d4:	75 10                	jne    c00104e6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	68 51 a4 02 c0       	push   0xc002a451
c00104de:	e8 02 a2 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00104e3:	83 c4 10             	add    esp,0x10
c00104e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104ed:	89 38                	mov    DWORD PTR [eax],edi
c00104ef:	31 c0                	xor    eax,eax
c00104f1:	83 c4 1c             	add    esp,0x1c
c00104f4:	5b                   	pop    ebx
c00104f5:	5e                   	pop    esi
c00104f6:	5f                   	pop    edi
c00104f7:	5d                   	pop    ebp
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <Pipe::Pipe(int)>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010501:	83 ec 08             	sub    esp,0x8
c0010504:	6a 00                	push   0x0
c0010506:	50                   	push   eax
c0010507:	e8 56 12 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	ba 78 a4 02 c0       	mov    edx,0xc002a478
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010522:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010529:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001053b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053f:	83 ec 0c             	sub    esp,0xc
c0010542:	50                   	push   eax
c0010543:	e8 fb f2 ff ff       	call   c000f843 <malloc>
c0010548:	83 c4 10             	add    esp,0x10
c001054b:	89 c2                	mov    edx,eax
c001054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010551:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001055c:	90                   	nop
c001055d:	83 c4 0c             	add    esp,0xc
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <VgaText::isAtty()>:
c0010562:	b0 01                	mov    al,0x1
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::~VgaText()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	89 10                	mov    DWORD PTR [eax],edx
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	50                   	push   eax
c001057c:	e8 c3 13 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	90                   	nop
c0010585:	83 c4 0c             	add    esp,0xc
c0010588:	c3                   	ret    
c0010589:	90                   	nop

c001058a <VgaText::~VgaText()>:
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 cd ff ff ff       	call   c0010566 <VgaText::~VgaText()>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	83 ec 08             	sub    esp,0x8
c001059f:	68 60 12 00 00       	push   0x1260
c00105a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a8:	e8 ab 29 00 00       	call   c0012f58 <operator delete(void*, unsigned long)>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	83 c4 0c             	add    esp,0xc
c00105b3:	c3                   	ret    

c00105b4 <VgaText::read(unsigned long long, void*, int*)>:
c00105b4:	83 ec 10             	sub    esp,0x10
c00105b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c3:	e8 1e 5e 00 00       	call   c00163e6 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105cc:	89 02                	mov    DWORD PTR [edx],eax
c00105ce:	31 c0                	xor    eax,eax
c00105d0:	83 c4 1c             	add    esp,0x1c
c00105d3:	c3                   	ret    

c00105d4 <setTerminalScrollLock(bool)>:
c00105d4:	c3                   	ret    

c00105d5 <addToTerminalCycle(VgaText*)>:
c00105d5:	8b 15 40 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e640
c00105db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105df:	85 d2                	test   edx,edx
c00105e1:	75 0c                	jne    c00105ef <addToTerminalCycle(VgaText*)+0x1a>
c00105e3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e9:	a3 40 e6 02 c0       	mov    ds:0xc002e640,eax
c00105ee:	c3                   	ret    
c00105ef:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105f5:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105fb:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010601:	c3                   	ret    

c0010602 <installVgaTextImplementation()>:
c0010602:	83 ec 10             	sub    esp,0x10
c0010605:	6a 20                	push   0x20
c0010607:	6a 00                	push   0x0
c0010609:	68 20 e6 02 c0       	push   0xc002e620
c001060e:	e8 65 01 ff ff       	call   c0000778 <memset>
c0010613:	83 c4 1c             	add    esp,0x1c
c0010616:	c3                   	ret    

c0010617 <scrollTerminalScrollLock(int)>:
c0010617:	c3                   	ret    

c0010618 <VgaText::load()>:
c0010618:	53                   	push   ebx
c0010619:	31 c0                	xor    eax,eax
c001061b:	83 ec 58             	sub    esp,0x58
c001061e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010622:	89 e2                	mov    edx,esp
c0010624:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010628:	40                   	inc    eax
c0010629:	83 f8 50             	cmp    eax,0x50
c001062c:	75 f6                	jne    c0010624 <VgaText::load()+0xc>
c001062e:	31 c0                	xor    eax,eax
c0010630:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010637:	84 c9                	test   cl,cl
c0010639:	74 06                	je     c0010641 <VgaText::load()+0x29>
c001063b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063e:	40                   	inc    eax
c001063f:	eb ef                	jmp    c0010630 <VgaText::load()+0x18>
c0010641:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010647:	85 c0                	test   eax,eax
c0010649:	74 09                	je     c0010654 <VgaText::load()+0x3c>
c001064b:	51                   	push   ecx
c001064c:	51                   	push   ecx
c001064d:	52                   	push   edx
c001064e:	53                   	push   ebx
c001064f:	ff d0                	call   eax
c0010651:	83 c4 10             	add    esp,0x10
c0010654:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 09                	je     c0010667 <VgaText::load()+0x4f>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	83 c4 58             	add    esp,0x58
c001066a:	5b                   	pop    ebx
c001066b:	c3                   	ret    

c001066c <VgaText::updateCursor()>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	39 05 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,eax
c0010676:	75 0c                	jne    c0010684 <VgaText::updateCursor()+0x18>
c0010678:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001067e:	85 c0                	test   eax,eax
c0010680:	74 02                	je     c0010684 <VgaText::updateCursor()+0x18>
c0010682:	ff e0                	jmp    eax
c0010684:	c3                   	ret    
c0010685:	90                   	nop

c0010686 <VgaText::showCursor(bool)>:
c0010686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001068e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010694:	c3                   	ret    
c0010695:	90                   	nop

c0010696 <VgaText::disableBlink(bool)>:
c0010696:	56                   	push   esi
c0010697:	53                   	push   ebx
c0010698:	51                   	push   ecx
c0010699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106a1:	39 1d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebx
c00106a7:	75 18                	jne    c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106a9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 0e                	je     c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106b3:	89 f1                	mov    ecx,esi
c00106b5:	52                   	push   edx
c00106b6:	52                   	push   edx
c00106b7:	0f b6 d1             	movzx  edx,cl
c00106ba:	52                   	push   edx
c00106bb:	53                   	push   ebx
c00106bc:	ff d0                	call   eax
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	89 f0                	mov    eax,esi
c00106c3:	83 f0 01             	xor    eax,0x1
c00106c6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106cc:	58                   	pop    eax
c00106cd:	5b                   	pop    ebx
c00106ce:	5e                   	pop    esi
c00106cf:	c3                   	ret    

c00106d0 <VgaText::doANSI_SGR(int)>:
c00106d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d8:	85 d2                	test   edx,edx
c00106da:	75 14                	jne    c00106f0 <VgaText::doANSI_SGR(int)+0x20>
c00106dc:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106e2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ee:	eb 65                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c00106f0:	83 fa 07             	cmp    edx,0x7
c00106f3:	75 14                	jne    c0010709 <VgaText::doANSI_SGR(int)+0x39>
c00106f5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106fb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010701:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010707:	eb 4c                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010709:	83 fa 1b             	cmp    edx,0x1b
c001070c:	74 ce                	je     c00106dc <VgaText::doANSI_SGR(int)+0xc>
c001070e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010711:	83 f9 07             	cmp    ecx,0x7
c0010714:	77 09                	ja     c001071f <VgaText::doANSI_SGR(int)+0x4f>
c0010716:	8b 14 8d c0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b40]
c001071d:	eb 20                	jmp    c001073f <VgaText::doANSI_SGR(int)+0x6f>
c001071f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010722:	83 f9 07             	cmp    ecx,0x7
c0010725:	77 09                	ja     c0010730 <VgaText::doANSI_SGR(int)+0x60>
c0010727:	8b 14 8d c0 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b40]
c001072e:	eb 25                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010730:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010733:	83 f9 07             	cmp    ecx,0x7
c0010736:	77 0e                	ja     c0010746 <VgaText::doANSI_SGR(int)+0x76>
c0010738:	8b 14 95 78 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c88]
c001073f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010745:	c3                   	ret    
c0010746:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010749:	83 f9 07             	cmp    ecx,0x7
c001074c:	77 0d                	ja     c001075b <VgaText::doANSI_SGR(int)+0x8b>
c001074e:	8b 14 95 50 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cb0]
c0010755:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001075b:	c3                   	ret    

c001075c <VgaText::setDefaultBgColour(VgaColour)>:
c001075c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010764:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001076a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010770:	c3                   	ret    
c0010771:	90                   	nop

c0010772 <VgaText::setDefaultFgColour(VgaColour)>:
c0010772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001077a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010780:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010786:	c3                   	ret    
c0010787:	90                   	nop

c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010788:	53                   	push   ebx
c0010789:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001078d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010791:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010795:	51                   	push   ecx
c0010796:	e8 c1 ff ff ff       	call   c001075c <VgaText::setDefaultBgColour(VgaColour)>
c001079b:	58                   	pop    eax
c001079c:	5a                   	pop    edx
c001079d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a5:	5b                   	pop    ebx
c00107a6:	eb ca                	jmp    c0010772 <VgaText::setDefaultFgColour(VgaColour)>

c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107b1:	83 e0 0f             	and    eax,0xf
c00107b4:	c1 e2 04             	shl    edx,0x4
c00107b7:	09 d0                	or     eax,edx
c00107b9:	c3                   	ret    

c00107ba <VgaText::scrollScreen()>:
c00107ba:	57                   	push   edi
c00107bb:	56                   	push   esi
c00107bc:	be 01 00 00 00       	mov    esi,0x1
c00107c1:	53                   	push   ebx
c00107c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107cc:	31 ff                	xor    edi,edi
c00107ce:	01 d9                	add    ecx,ebx
c00107d0:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107d3:	83 fe 17             	cmp    esi,0x17
c00107d6:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107dc:	75 28                	jne    c0010806 <VgaText::scrollScreen()+0x4c>
c00107de:	f7 c7 01 00 00 00    	test   edi,0x1
c00107e4:	74 1c                	je     c0010802 <VgaText::scrollScreen()+0x48>
c00107e6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107ed:	50                   	push   eax
c00107ee:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107f5:	50                   	push   eax
c00107f6:	e8 ad ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00107fb:	5a                   	pop    edx
c00107fc:	5a                   	pop    edx
c00107fd:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010800:	eb 04                	jmp    c0010806 <VgaText::scrollScreen()+0x4c>
c0010802:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010806:	47                   	inc    edi
c0010807:	41                   	inc    ecx
c0010808:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001080e:	75 c0                	jne    c00107d0 <VgaText::scrollScreen()+0x16>
c0010810:	46                   	inc    esi
c0010811:	83 fe 18             	cmp    esi,0x18
c0010814:	75 b0                	jne    c00107c6 <VgaText::scrollScreen()+0xc>
c0010816:	39 1d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebx
c001081c:	75 24                	jne    c0010842 <VgaText::scrollScreen()+0x88>
c001081e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010825:	74 08                	je     c001082f <VgaText::scrollScreen()+0x75>
c0010827:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001082d:	eb 13                	jmp    c0010842 <VgaText::scrollScreen()+0x88>
c001082f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010835:	85 c0                	test   eax,eax
c0010837:	74 09                	je     c0010842 <VgaText::scrollScreen()+0x88>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	53                   	push   ebx
c001083d:	ff d0                	call   eax
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010846:	5b                   	pop    ebx
c0010847:	5e                   	pop    esi
c0010848:	5f                   	pop    edi
c0010849:	e9 1e fe ff ff       	jmp    c001066c <VgaText::updateCursor()>

c001084e <VgaText::combineCharAndColour(char, unsigned char)>:
c001084e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010853:	c1 e0 08             	shl    eax,0x8
c0010856:	89 c2                	mov    edx,eax
c0010858:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001085d:	09 d0                	or     eax,edx
c001085f:	c3                   	ret    

c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010873:	50                   	push   eax
c0010874:	e8 2f ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010879:	5a                   	pop    edx
c001087a:	0f b6 c0             	movzx  eax,al
c001087d:	5b                   	pop    ebx
c001087e:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010883:	50                   	push   eax
c0010884:	53                   	push   ebx
c0010885:	e8 c4 ff ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c001088a:	5a                   	pop    edx
c001088b:	5a                   	pop    edx
c001088c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010892:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010896:	0f b7 d2             	movzx  edx,dx
c0010899:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001089e:	39 0d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ecx
c00108a4:	75 14                	jne    c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108ac:	85 c0                	test   eax,eax
c00108ae:	74 0a                	je     c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108b0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	ff e0                	jmp    eax
c00108ba:	83 c4 08             	add    esp,0x8
c00108bd:	5b                   	pop    ebx
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::getCursorX()>:
c00108c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::getCursorY()>:
c00108cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d0:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::setCursor(int, int)>:
c00108d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108e0:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108ea:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108f0:	e9 77 fd ff ff       	jmp    c001066c <VgaText::updateCursor()>
c00108f5:	90                   	nop

c00108f6 <VgaText::setCursorX(int)>:
c00108f6:	83 ec 10             	sub    esp,0x10
c00108f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108fd:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010907:	50                   	push   eax
c0010908:	e8 cb ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001090d:	83 c4 1c             	add    esp,0x1c
c0010910:	c3                   	ret    
c0010911:	90                   	nop

c0010912 <VgaText::setCursorY(int)>:
c0010912:	83 ec 10             	sub    esp,0x10
c0010915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001091d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010923:	50                   	push   eax
c0010924:	e8 af ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010929:	83 c4 1c             	add    esp,0x1c
c001092c:	c3                   	ret    
c001092d:	90                   	nop

c001092e <VgaText::incrementCursor(bool)>:
c001092e:	56                   	push   esi
c001092f:	53                   	push   ebx
c0010930:	51                   	push   ecx
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010939:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001093f:	40                   	inc    eax
c0010940:	83 f8 50             	cmp    eax,0x50
c0010943:	74 08                	je     c001094d <VgaText::incrementCursor(bool)+0x1f>
c0010945:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001094b:	eb 33                	jmp    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001094d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010953:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001095d:	8d 50 01             	lea    edx,[eax+0x1]
c0010960:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010966:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001096c:	75 12                	jne    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010977:	53                   	push   ebx
c0010978:	e8 3d fe ff ff       	call   c00107ba <VgaText::scrollScreen()>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	89 f0                	mov    eax,esi
c0010982:	84 c0                	test   al,al
c0010984:	74 0c                	je     c0010992 <VgaText::incrementCursor(bool)+0x64>
c0010986:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001098a:	5a                   	pop    edx
c001098b:	5b                   	pop    ebx
c001098c:	5e                   	pop    esi
c001098d:	e9 da fc ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010992:	58                   	pop    eax
c0010993:	5b                   	pop    ebx
c0010994:	5e                   	pop    esi
c0010995:	c3                   	ret    

c0010996 <VgaText::updateRAMUsageDisplay(int)>:
c0010996:	56                   	push   esi
c0010997:	8b 35 a0 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d4a0
c001099d:	53                   	push   ebx
c001099e:	bb 0a 00 00 00       	mov    ebx,0xa
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 fc fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	59                   	pop    ecx
c00109ae:	0f b6 c8             	movzx  ecx,al
c00109b1:	51                   	push   ecx
c00109b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b6:	99                   	cdq    
c00109b7:	f7 fb                	idiv   ebx
c00109b9:	89 d3                	mov    ebx,edx
c00109bb:	83 c0 30             	add    eax,0x30
c00109be:	83 c3 30             	add    ebx,0x30
c00109c1:	0f be c0             	movsx  eax,al
c00109c4:	0f b6 db             	movzx  ebx,bl
c00109c7:	50                   	push   eax
c00109c8:	e8 81 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5a                   	pop    edx
c00109ce:	5a                   	pop    edx
c00109cf:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d6:	51                   	push   ecx
c00109d7:	53                   	push   ebx
c00109d8:	e8 71 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5b                   	pop    ebx
c00109de:	5a                   	pop    edx
c00109df:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e6:	51                   	push   ecx
c00109e7:	6a 25                	push   0x25
c00109e9:	e8 60 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109ee:	59                   	pop    ecx
c00109ef:	5b                   	pop    ebx
c00109f0:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f7:	5b                   	pop    ebx
c00109f8:	5e                   	pop    esi
c00109f9:	c3                   	ret    

c00109fa <VgaText::updateDiskUsage()>:
c00109fa:	55                   	push   ebp
c00109fb:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a00:	57                   	push   edi
c0010a01:	8b 3d a0 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4a0
c0010a07:	56                   	push   esi
c0010a08:	53                   	push   ebx
c0010a09:	6a 0f                	push   0xf
c0010a0b:	6a 00                	push   0x0
c0010a0d:	e8 96 fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a12:	5a                   	pop    edx
c0010a13:	0f b6 d8             	movzx  ebx,al
c0010a16:	59                   	pop    ecx
c0010a17:	8b 35 e8 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328e8
c0010a1d:	53                   	push   ebx
c0010a1e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a23:	89 f0                	mov    eax,esi
c0010a25:	99                   	cdq    
c0010a26:	f7 fd                	idiv   ebp
c0010a28:	99                   	cdq    
c0010a29:	f7 f9                	idiv   ecx
c0010a2b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2e:	0f b6 c0             	movzx  eax,al
c0010a31:	50                   	push   eax
c0010a32:	e8 17 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a37:	5d                   	pop    ebp
c0010a38:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a3d:	5a                   	pop    edx
c0010a3e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a42:	53                   	push   ebx
c0010a43:	89 f0                	mov    eax,esi
c0010a45:	99                   	cdq    
c0010a46:	f7 fd                	idiv   ebp
c0010a48:	99                   	cdq    
c0010a49:	f7 f9                	idiv   ecx
c0010a4b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4e:	0f b6 c0             	movzx  eax,al
c0010a51:	50                   	push   eax
c0010a52:	e8 f7 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a57:	5d                   	pop    ebp
c0010a58:	bd 64 00 00 00       	mov    ebp,0x64
c0010a5d:	5a                   	pop    edx
c0010a5e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a65:	53                   	push   ebx
c0010a66:	89 f0                	mov    eax,esi
c0010a68:	99                   	cdq    
c0010a69:	f7 fd                	idiv   ebp
c0010a6b:	99                   	cdq    
c0010a6c:	f7 f9                	idiv   ecx
c0010a6e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a71:	0f b6 c0             	movzx  eax,al
c0010a74:	50                   	push   eax
c0010a75:	e8 d4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7a:	5d                   	pop    ebp
c0010a7b:	5a                   	pop    edx
c0010a7c:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a83:	53                   	push   ebx
c0010a84:	89 f0                	mov    eax,esi
c0010a86:	99                   	cdq    
c0010a87:	f7 f9                	idiv   ecx
c0010a89:	89 d6                	mov    esi,edx
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 b4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5d                   	pop    ebp
c0010a9b:	5a                   	pop    edx
c0010a9c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010aa3:	53                   	push   ebx
c0010aa4:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa7:	0f b6 f0             	movzx  esi,al
c0010aaa:	56                   	push   esi
c0010aab:	e8 9e fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab0:	5e                   	pop    esi
c0010ab1:	8b 35 e4 28 03 c0    	mov    esi,DWORD PTR ds:0xc00328e4
c0010ab7:	5d                   	pop    ebp
c0010ab8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010abf:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ac4:	53                   	push   ebx
c0010ac5:	89 f0                	mov    eax,esi
c0010ac7:	99                   	cdq    
c0010ac8:	f7 fd                	idiv   ebp
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 75 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	5d                   	pop    ebp
c0010adb:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ae2:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae7:	53                   	push   ebx
c0010ae8:	89 f0                	mov    eax,esi
c0010aea:	99                   	cdq    
c0010aeb:	f7 fd                	idiv   ebp
c0010aed:	99                   	cdq    
c0010aee:	f7 f9                	idiv   ecx
c0010af0:	8d 42 30             	lea    eax,[edx+0x30]
c0010af3:	0f b6 c0             	movzx  eax,al
c0010af6:	50                   	push   eax
c0010af7:	e8 52 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010afc:	5a                   	pop    edx
c0010afd:	5d                   	pop    ebp
c0010afe:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b05:	bd 64 00 00 00       	mov    ebp,0x64
c0010b0a:	53                   	push   ebx
c0010b0b:	89 f0                	mov    eax,esi
c0010b0d:	99                   	cdq    
c0010b0e:	f7 fd                	idiv   ebp
c0010b10:	99                   	cdq    
c0010b11:	f7 f9                	idiv   ecx
c0010b13:	83 c2 30             	add    edx,0x30
c0010b16:	0f b6 d2             	movzx  edx,dl
c0010b19:	52                   	push   edx
c0010b1a:	e8 2f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1f:	5a                   	pop    edx
c0010b20:	5d                   	pop    ebp
c0010b21:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b28:	53                   	push   ebx
c0010b29:	89 f0                	mov    eax,esi
c0010b2b:	99                   	cdq    
c0010b2c:	f7 f9                	idiv   ecx
c0010b2e:	89 d6                	mov    esi,edx
c0010b30:	99                   	cdq    
c0010b31:	f7 f9                	idiv   ecx
c0010b33:	8d 42 30             	lea    eax,[edx+0x30]
c0010b36:	0f b6 c0             	movzx  eax,al
c0010b39:	50                   	push   eax
c0010b3a:	e8 0f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3f:	5a                   	pop    edx
c0010b40:	59                   	pop    ecx
c0010b41:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b48:	53                   	push   ebx
c0010b49:	8d 46 30             	lea    eax,[esi+0x30]
c0010b4c:	0f b6 f0             	movzx  esi,al
c0010b4f:	56                   	push   esi
c0010b50:	e8 f9 fc ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b55:	5b                   	pop    ebx
c0010b56:	5e                   	pop    esi
c0010b57:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b5e:	5b                   	pop    ebx
c0010b5f:	5e                   	pop    esi
c0010b60:	5f                   	pop    edi
c0010b61:	5d                   	pop    ebp
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <VgaText::updateTitle()>:
c0010b64:	53                   	push   ebx
c0010b65:	31 c0                	xor    eax,eax
c0010b67:	83 ec 58             	sub    esp,0x58
c0010b6a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b6e:	89 e1                	mov    ecx,esp
c0010b70:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b74:	40                   	inc    eax
c0010b75:	83 f8 50             	cmp    eax,0x50
c0010b78:	75 f6                	jne    c0010b70 <VgaText::updateTitle()+0xc>
c0010b7a:	31 c0                	xor    eax,eax
c0010b7c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b83:	84 db                	test   bl,bl
c0010b85:	74 06                	je     c0010b8d <VgaText::updateTitle()+0x29>
c0010b87:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b8a:	40                   	inc    eax
c0010b8b:	eb ef                	jmp    c0010b7c <VgaText::updateTitle()+0x18>
c0010b8d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b93:	85 c0                	test   eax,eax
c0010b95:	74 09                	je     c0010ba0 <VgaText::updateTitle()+0x3c>
c0010b97:	53                   	push   ebx
c0010b98:	53                   	push   ebx
c0010b99:	51                   	push   ecx
c0010b9a:	52                   	push   edx
c0010b9b:	ff d0                	call   eax
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	e8 55 fe ff ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0010ba5:	83 c4 58             	add    esp,0x58
c0010ba8:	5b                   	pop    ebx
c0010ba9:	c3                   	ret    

c0010baa <VgaText::setTitleTextColour(VgaColour)>:
c0010baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb8:	eb aa                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bba <VgaText::setTitleColour(VgaColour)>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bc2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc8:	eb 9a                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bca <VgaText::setTitle(char*)>:
c0010bca:	53                   	push   ebx
c0010bcb:	83 ec 10             	sub    esp,0x10
c0010bce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bdc:	50                   	push   eax
c0010bdd:	e8 52 fc fe ff       	call   c0000834 <strcpy>
c0010be2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be6:	83 c4 18             	add    esp,0x18
c0010be9:	5b                   	pop    ebx
c0010bea:	e9 75 ff ff ff       	jmp    c0010b64 <VgaText::updateTitle()>
c0010bef:	90                   	nop

c0010bf0 <VgaText::decrementCursor(bool)>:
c0010bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bfe:	85 c0                	test   eax,eax
c0010c00:	74 07                	je     c0010c09 <VgaText::decrementCursor(bool)+0x19>
c0010c02:	48                   	dec    eax
c0010c03:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c09:	84 c9                	test   cl,cl
c0010c0b:	74 09                	je     c0010c16 <VgaText::decrementCursor(bool)+0x26>
c0010c0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c11:	e9 56 fa ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010c16:	c3                   	ret    
c0010c17:	90                   	nop

c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c18:	53                   	push   ebx
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c2c:	3c 07                	cmp    al,0x7
c0010c2e:	75 2a                	jne    c0010c5a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c30:	a1 fc e6 02 c0       	mov    eax,ds:0xc002e6fc
c0010c35:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c3d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c45:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c51:	83 c4 08             	add    esp,0x8
c0010c54:	5b                   	pop    ebx
c0010c55:	e9 dc 31 00 00       	jmp    c0013e36 <Buzzer::beep(int, int, bool)>
c0010c5a:	3c 0d                	cmp    al,0xd
c0010c5c:	75 0c                	jne    c0010c6a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c5e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c68:	eb 3b                	jmp    c0010ca5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c6a:	3c 0a                	cmp    al,0xa
c0010c6c:	75 40                	jne    c0010cae <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c6e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c74:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c7e:	8d 50 01             	lea    edx,[eax+0x1]
c0010c81:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c87:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c8d:	75 12                	jne    c0010ca1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c8f:	83 ec 0c             	sub    esp,0xc
c0010c92:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c98:	53                   	push   ebx
c0010c99:	e8 1c fb ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca5:	83 c4 08             	add    esp,0x8
c0010ca8:	5b                   	pop    ebx
c0010ca9:	e9 be f9 ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010cae:	3c 08                	cmp    al,0x8
c0010cb0:	75 31                	jne    c0010ce3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cb2:	50                   	push   eax
c0010cb3:	50                   	push   eax
c0010cb4:	6a 01                	push   0x1
c0010cb6:	53                   	push   ebx
c0010cb7:	e8 34 ff ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010cbc:	5a                   	pop    edx
c0010cbd:	59                   	pop    ecx
c0010cbe:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cca:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cd0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd6:	6a 20                	push   0x20
c0010cd8:	53                   	push   ebx
c0010cd9:	e8 82 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cde:	83 c4 28             	add    esp,0x28
c0010ce1:	5b                   	pop    ebx
c0010ce2:	c3                   	ret    
c0010ce3:	83 ec 08             	sub    esp,0x8
c0010ce6:	0f be c0             	movsx  eax,al
c0010ce9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cef:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cf5:	51                   	push   ecx
c0010cf6:	52                   	push   edx
c0010cf7:	50                   	push   eax
c0010cf8:	53                   	push   ebx
c0010cf9:	e8 62 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cfe:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d02:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d0a:	83 c4 28             	add    esp,0x28
c0010d0d:	5b                   	pop    ebx
c0010d0e:	e9 1b fc ff ff       	jmp    c001092e <VgaText::incrementCursor(bool)>
c0010d13:	90                   	nop

c0010d14 <VgaText::isShowingCursor()>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <VgaText::isBlinkDisabled()>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d2a:	83 f0 01             	xor    eax,0x1
c0010d2d:	c3                   	ret    

c0010d2e <VgaText::setCursorHeight(int)>:
c0010d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d36:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d3c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d47:	e9 3a f9 ff ff       	jmp    c0010686 <VgaText::showCursor(bool)>

c0010d4c <VgaText::getCursorHeight()>:
c0010d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d50:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d56:	c3                   	ret    

c0010d57 <setActiveTerminal(VgaText*)>:
c0010d57:	53                   	push   ebx
c0010d58:	83 ec 08             	sub    esp,0x8
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	85 db                	test   ebx,ebx
c0010d61:	75 11                	jne    c0010d74 <setActiveTerminal(VgaText*)+0x1d>
c0010d63:	c7 44 24 10 8c a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a48c
c0010d6b:	83 c4 08             	add    esp,0x8
c0010d6e:	5b                   	pop    ebx
c0010d6f:	e9 71 99 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c0010d74:	50                   	push   eax
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	68 9a a4 02 c0       	push   0xc002a49a
c0010d7c:	e8 b7 22 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0010d81:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	85 c0                	test   eax,eax
c0010d8b:	74 0c                	je     c0010d99 <setActiveTerminal(VgaText*)+0x42>
c0010d8d:	83 ec 0c             	sub    esp,0xc
c0010d90:	50                   	push   eax
c0010d91:	e8 d6 f8 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c0010d9f:	51                   	push   ecx
c0010da0:	51                   	push   ecx
c0010da1:	53                   	push   ebx
c0010da2:	68 b2 a4 02 c0       	push   0xc002a4b2
c0010da7:	e8 8c 22 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0010dac:	83 c4 0c             	add    esp,0xc
c0010daf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010db5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dbb:	53                   	push   ebx
c0010dbc:	e8 17 fb ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010dc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc4:	e8 57 ff ff ff       	call   c0010d20 <VgaText::isBlinkDisabled()>
c0010dc9:	5a                   	pop    edx
c0010dca:	0f b6 c0             	movzx  eax,al
c0010dcd:	59                   	pop    ecx
c0010dce:	50                   	push   eax
c0010dcf:	53                   	push   ebx
c0010dd0:	e8 c1 f8 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c0010dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd8:	e8 6f ff ff ff       	call   c0010d4c <VgaText::getCursorHeight()>
c0010ddd:	5a                   	pop    edx
c0010dde:	59                   	pop    ecx
c0010ddf:	50                   	push   eax
c0010de0:	53                   	push   ebx
c0010de1:	e8 48 ff ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010df0:	75 0a                	jne    c0010dfc <setActiveTerminal(VgaText*)+0xa5>
c0010df2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dfc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e00:	83 c4 08             	add    esp,0x8
c0010e03:	5b                   	pop    ebx
c0010e04:	e9 0f f8 ff ff       	jmp    c0010618 <VgaText::load()>

c0010e09 <doTerminalCycle()>:
c0010e09:	83 ec 18             	sub    esp,0x18
c0010e0c:	a1 40 e6 02 c0       	mov    eax,ds:0xc002e640
c0010e11:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e17:	50                   	push   eax
c0010e18:	a3 40 e6 02 c0       	mov    ds:0xc002e640,eax
c0010e1d:	e8 35 ff ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0010e22:	83 c4 1c             	add    esp,0x1c
c0010e25:	c3                   	ret    

c0010e26 <VgaText::doUpdate()>:
c0010e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e2a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e30:	85 c0                	test   eax,eax
c0010e32:	74 02                	je     c0010e36 <VgaText::doUpdate()+0x10>
c0010e34:	ff e0                	jmp    eax
c0010e36:	c3                   	ret    
c0010e37:	90                   	nop

c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e38:	55                   	push   ebp
c0010e39:	57                   	push   edi
c0010e3a:	56                   	push   esi
c0010e3b:	53                   	push   ebx
c0010e3c:	83 ec 1c             	sub    esp,0x1c
c0010e3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e43:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e48:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e4f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e52:	50                   	push   eax
c0010e53:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e58:	50                   	push   eax
c0010e59:	e8 4a f9 ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5e:	59                   	pop    ecx
c0010e5f:	0f b6 c0             	movzx  eax,al
c0010e62:	5b                   	pop    ebx
c0010e63:	31 c9                	xor    ecx,ecx
c0010e65:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e6d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e71:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e7b:	0f b7 db             	movzx  ebx,bx
c0010e7e:	01 db                	add    ebx,ebx
c0010e80:	01 fb                	add    ebx,edi
c0010e82:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e85:	84 c0                	test   al,al
c0010e87:	0f 84 38 01 00 00    	je     c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e8d:	3c 0d                	cmp    al,0xd
c0010e8f:	75 0f                	jne    c0010ea0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e91:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9b:	e9 1f 01 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea0:	3c 0a                	cmp    al,0xa
c0010ea2:	75 5b                	jne    c0010eff <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ea4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010eaa:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ebd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ec3:	75 12                	jne    c0010ed7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ece:	55                   	push   ebp
c0010ecf:	e8 e6 f8 ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	55                   	push   ebp
c0010edb:	e8 8c f7 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010ee0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ef1:	31 c9                	xor    ecx,ecx
c0010ef3:	0f b7 db             	movzx  ebx,bx
c0010ef6:	01 db                	add    ebx,ebx
c0010ef8:	01 fb                	add    ebx,edi
c0010efa:	e9 c0 00 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eff:	3c 08                	cmp    al,0x8
c0010f01:	75 4e                	jne    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f03:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f07:	53                   	push   ebx
c0010f08:	53                   	push   ebx
c0010f09:	6a 01                	push   0x1
c0010f0b:	55                   	push   ebp
c0010f0c:	e8 df fc ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010f11:	58                   	pop    eax
c0010f12:	5a                   	pop    edx
c0010f13:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f19:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f25:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f2b:	6a 20                	push   0x20
c0010f2d:	55                   	push   ebp
c0010f2e:	e8 2d f9 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f33:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f3b:	83 c4 20             	add    esp,0x20
c0010f3e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f48:	0f b7 db             	movzx  ebx,bx
c0010f4b:	01 db                	add    ebx,ebx
c0010f4d:	01 fb                	add    ebx,edi
c0010f4f:	eb 6e                	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f51:	51                   	push   ecx
c0010f52:	51                   	push   ecx
c0010f53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f57:	50                   	push   eax
c0010f58:	e8 f1 f8 ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f63:	39 2d 44 e6 02 c0    	cmp    DWORD PTR ds:0xc002e644,ebp
c0010f69:	75 2a                	jne    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f71:	85 c0                	test   eax,eax
c0010f73:	74 20                	je     c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f75:	52                   	push   edx
c0010f76:	52                   	push   edx
c0010f77:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f7d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f8b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f8e:	51                   	push   ecx
c0010f8f:	55                   	push   ebp
c0010f90:	ff d0                	call   eax
c0010f92:	83 c4 20             	add    esp,0x20
c0010f95:	83 c3 02             	add    ebx,0x2
c0010f98:	50                   	push   eax
c0010f99:	50                   	push   eax
c0010f9a:	6a 00                	push   0x0
c0010f9c:	55                   	push   ebp
c0010f9d:	e8 8c f9 ff ff       	call   c001092e <VgaText::incrementCursor(bool)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fac:	75 0f                	jne    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb6:	0f b7 db             	movzx  ebx,bx
c0010fb9:	01 db                	add    ebx,ebx
c0010fbb:	01 fb                	add    ebx,edi
c0010fbd:	b1 01                	mov    cl,0x1
c0010fbf:	46                   	inc    esi
c0010fc0:	e9 bd fe ff ff       	jmp    c0010e82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fc5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	55                   	push   ebp
c0010fcd:	e8 9a f6 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd9:	84 c9                	test   cl,cl
c0010fdb:	74 0c                	je     c0010fe9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fdd:	83 ec 0c             	sub    esp,0xc
c0010fe0:	55                   	push   ebp
c0010fe1:	e8 40 fe ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ff0:	83 c4 1c             	add    esp,0x1c
c0010ff3:	5b                   	pop    ebx
c0010ff4:	5e                   	pop    esi
c0010ff5:	5f                   	pop    edi
c0010ff6:	5d                   	pop    ebp
c0010ff7:	c3                   	ret    

c0010ff8 <VgaText::clearScreen()>:
c0010ff8:	57                   	push   edi
c0010ff9:	56                   	push   esi
c0010ffa:	31 f6                	xor    esi,esi
c0010ffc:	53                   	push   ebx
c0010ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011001:	52                   	push   edx
c0011002:	6a 00                	push   0x0
c0011004:	6a 00                	push   0x0
c0011006:	53                   	push   ebx
c0011007:	e8 cc f8 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001100c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001101c:	7e 26                	jle    c0011044 <VgaText::clearScreen()+0x4c>
c001101e:	31 ff                	xor    edi,edi
c0011020:	50                   	push   eax
c0011021:	50                   	push   eax
c0011022:	56                   	push   esi
c0011023:	57                   	push   edi
c0011024:	47                   	inc    edi
c0011025:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001102b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011031:	6a 20                	push   0x20
c0011033:	53                   	push   ebx
c0011034:	e8 27 f8 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011039:	83 c4 20             	add    esp,0x20
c001103c:	83 ff 50             	cmp    edi,0x50
c001103f:	75 df                	jne    c0011020 <VgaText::clearScreen()+0x28>
c0011041:	46                   	inc    esi
c0011042:	eb d2                	jmp    c0011016 <VgaText::clearScreen()+0x1e>
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	53                   	push   ebx
c0011048:	e8 d9 fd ff ff       	call   c0010e26 <VgaText::doUpdate()>
c001104d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011054:	83 c4 10             	add    esp,0x10
c0011057:	5b                   	pop    ebx
c0011058:	5e                   	pop    esi
c0011059:	5f                   	pop    edi
c001105a:	c3                   	ret    
c001105b:	90                   	nop

c001105c <VgaText::putchar(char)>:
c001105c:	56                   	push   esi
c001105d:	53                   	push   ebx
c001105e:	83 ec 14             	sub    esp,0x14
c0011061:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011065:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011069:	3c 5b                	cmp    al,0x5b
c001106b:	75 21                	jne    c001108e <VgaText::putchar(char)+0x32>
c001106d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011074:	74 28                	je     c001109e <VgaText::putchar(char)+0x42>
c0011076:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001107f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011089:	e9 e2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001108e:	3c 1b                	cmp    al,0x1b
c0011090:	75 0c                	jne    c001109e <VgaText::putchar(char)+0x42>
c0011092:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011099:	e9 d2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001109e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110a4:	84 c9                	test   cl,cl
c00110a6:	0f 84 ab 00 00 00    	je     c0011157 <VgaText::putchar(char)+0xfb>
c00110ac:	8d 50 c0             	lea    edx,[eax-0x40]
c00110af:	80 fa 3e             	cmp    dl,0x3e
c00110b2:	0f 87 82 00 00 00    	ja     c001113a <VgaText::putchar(char)+0xde>
c00110b8:	3c 6d                	cmp    al,0x6d
c00110ba:	75 4d                	jne    c0011109 <VgaText::putchar(char)+0xad>
c00110bc:	31 f6                	xor    esi,esi
c00110be:	31 d2                	xor    edx,edx
c00110c0:	31 c0                	xor    eax,eax
c00110c2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c8:	7e 30                	jle    c00110fa <VgaText::putchar(char)+0x9e>
c00110ca:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110d2:	80 fa 3b             	cmp    dl,0x3b
c00110d5:	75 17                	jne    c00110ee <VgaText::putchar(char)+0x92>
c00110d7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110db:	50                   	push   eax
c00110dc:	53                   	push   ebx
c00110dd:	e8 ee f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c00110e2:	59                   	pop    ecx
c00110e3:	31 d2                	xor    edx,edx
c00110e5:	58                   	pop    eax
c00110e6:	31 c0                	xor    eax,eax
c00110e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110ec:	eb 09                	jmp    c00110f7 <VgaText::putchar(char)+0x9b>
c00110ee:	6b c0 0a             	imul   eax,eax,0xa
c00110f1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110f5:	88 ca                	mov    dl,cl
c00110f7:	46                   	inc    esi
c00110f8:	eb c8                	jmp    c00110c2 <VgaText::putchar(char)+0x66>
c00110fa:	84 d2                	test   dl,dl
c00110fc:	74 31                	je     c001112f <VgaText::putchar(char)+0xd3>
c00110fe:	50                   	push   eax
c00110ff:	53                   	push   ebx
c0011100:	e8 cb f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c0011105:	58                   	pop    eax
c0011106:	5a                   	pop    edx
c0011107:	eb 26                	jmp    c001112f <VgaText::putchar(char)+0xd3>
c0011109:	3c 4a                	cmp    al,0x4a
c001110b:	75 22                	jne    c001112f <VgaText::putchar(char)+0xd3>
c001110d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011114:	75 19                	jne    c001112f <VgaText::putchar(char)+0xd3>
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	53                   	push   ebx
c001111a:	e8 d9 fe ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001111f:	83 c4 0c             	add    esp,0xc
c0011122:	6a 00                	push   0x0
c0011124:	6a 00                	push   0x0
c0011126:	53                   	push   ebx
c0011127:	e8 ac f7 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011138:	eb 36                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001113a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011140:	83 fa 0e             	cmp    edx,0xe
c0011143:	7f 2b                	jg     c0011170 <VgaText::putchar(char)+0x114>
c0011145:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011148:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001114e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011155:	eb 19                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c0011157:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001115d:	0f be c0             	movsx  eax,al
c0011160:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011166:	50                   	push   eax
c0011167:	53                   	push   ebx
c0011168:	e8 ab fa ff ff       	call   c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	83 c4 14             	add    esp,0x14
c0011173:	5b                   	pop    ebx
c0011174:	5e                   	pop    esi
c0011175:	c3                   	ret    

c0011176 <VgaText::puts(char const*)>:
c0011176:	53                   	push   ebx
c0011177:	83 ec 08             	sub    esp,0x8
c001117a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001117e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011181:	84 c0                	test   al,al
c0011183:	74 12                	je     c0011197 <VgaText::puts(char const*)+0x21>
c0011185:	43                   	inc    ebx
c0011186:	51                   	push   ecx
c0011187:	51                   	push   ecx
c0011188:	50                   	push   eax
c0011189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118d:	e8 ca fe ff ff       	call   c001105c <VgaText::putchar(char)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	eb e7                	jmp    c001117e <VgaText::puts(char const*)+0x8>
c0011197:	83 c4 08             	add    esp,0x8
c001119a:	5b                   	pop    ebx
c001119b:	c3                   	ret    

c001119c <VgaText::putx(unsigned int)>:
c001119c:	57                   	push   edi
c001119d:	b9 11 00 00 00       	mov    ecx,0x11
c00111a2:	56                   	push   esi
c00111a3:	be ce a4 02 c0       	mov    esi,0xc002a4ce
c00111a8:	53                   	push   ebx
c00111a9:	83 ec 20             	sub    esp,0x20
c00111ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111b4:	fc                   	cld    
c00111b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b7:	be 08 00 00 00       	mov    esi,0x8
c00111bc:	50                   	push   eax
c00111bd:	50                   	push   eax
c00111be:	89 d8                	mov    eax,ebx
c00111c0:	c1 e3 04             	shl    ebx,0x4
c00111c3:	c1 e8 1c             	shr    eax,0x1c
c00111c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111cb:	50                   	push   eax
c00111cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d0:	e8 87 fe ff ff       	call   c001105c <VgaText::putchar(char)>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	4e                   	dec    esi
c00111d9:	75 e1                	jne    c00111bc <VgaText::putx(unsigned int)+0x20>
c00111db:	83 c4 20             	add    esp,0x20
c00111de:	5b                   	pop    ebx
c00111df:	5e                   	pop    esi
c00111e0:	5f                   	pop    edi
c00111e1:	c3                   	ret    

c00111e2 <VgaText::VgaText(char const*)>:
c00111e2:	57                   	push   edi
c00111e3:	56                   	push   esi
c00111e4:	53                   	push   ebx
c00111e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	6a 00                	push   0x0
c00111ee:	50                   	push   eax
c00111ef:	e8 6e 05 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	ba 34 a5 02 c0       	mov    edx,0xc002a534
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	89 10                	mov    DWORD PTR [eax],edx
c0011202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011206:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001125b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011270:	bb 20 e6 02 c0       	mov    ebx,0xc002e620
c0011275:	b8 08 00 00 00       	mov    eax,0x8
c001127a:	fc                   	cld    
c001127b:	89 d7                	mov    edi,edx
c001127d:	89 de                	mov    esi,ebx
c001127f:	89 c1                	mov    ecx,eax
c0011281:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011287:	05 1e 10 00 00       	add    eax,0x101e
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011293:	50                   	push   eax
c0011294:	e8 9b f5 fe ff       	call   c0000834 <strcpy>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ae:	83 c0 0c             	add    eax,0xc
c00112b1:	83 ec 04             	sub    esp,0x4
c00112b4:	68 00 0f 00 00       	push   0xf00
c00112b9:	6a 00                	push   0x0
c00112bb:	50                   	push   eax
c00112bc:	e8 b7 f4 fe ff       	call   c0000778 <memset>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	83 ec 04             	sub    esp,0x4
c00112c7:	6a 00                	push   0x0
c00112c9:	6a 07                	push   0x7
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 b4 f4 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112d4:	83 c4 10             	add    esp,0x10
c00112d7:	83 ec 08             	sub    esp,0x8
c00112da:	6a 02                	push   0x2
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	e8 49 fa ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 ec 04             	sub    esp,0x4
c00112eb:	6a 00                	push   0x0
c00112ed:	6a 00                	push   0x0
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 e0 f5 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	83 ec 08             	sub    esp,0x8
c00112fe:	6a 01                	push   0x1
c0011300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011304:	e8 7d f3 ff ff       	call   c0010686 <VgaText::showCursor(bool)>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	6a 01                	push   0x1
c0011311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011315:	e8 7c f3 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011324:	e8 cf fc ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133b:	05 9e 10 00 00       	add    eax,0x109e
c0011340:	83 ec 04             	sub    esp,0x4
c0011343:	68 96 00 00 00       	push   0x96
c0011348:	6a 00                	push   0x0
c001134a:	50                   	push   eax
c001134b:	e8 28 f4 fe ff       	call   c0000778 <memset>
c0011350:	83 c4 10             	add    esp,0x10
c0011353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011357:	05 34 11 00 00       	add    eax,0x1134
c001135c:	83 ec 04             	sub    esp,0x4
c001135f:	68 2c 01 00 00       	push   0x12c
c0011364:	6a 00                	push   0x0
c0011366:	50                   	push   eax
c0011367:	e8 0c f4 fe ff       	call   c0000778 <memset>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	90                   	nop
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	c3                   	ret    

c0011374 <VgaText::receiveKey(unsigned char)>:
c0011374:	55                   	push   ebp
c0011375:	57                   	push   edi
c0011376:	56                   	push   esi
c0011377:	53                   	push   ebx
c0011378:	83 ec 1c             	sub    esp,0x1c
c001137b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001137f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011383:	84 db                	test   bl,bl
c0011385:	0f 84 c9 00 00 00    	je     c0011454 <VgaText::receiveKey(unsigned char)+0xe0>
c001138b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011391:	80 fb 08             	cmp    bl,0x8
c0011394:	75 2c                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0x4e>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	57                   	push   edi
c001139a:	e8 f5 f3 fe ff       	call   c0000794 <strlen>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	85 c0                	test   eax,eax
c00113a4:	74 41                	je     c00113e7 <VgaText::receiveKey(unsigned char)+0x73>
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	6a 08                	push   0x8
c00113aa:	56                   	push   esi
c00113ab:	e8 ac fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113b3:	e8 dc f3 fe ff       	call   c0000794 <strlen>
c00113b8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113c0:	eb 22                	jmp    c00113e4 <VgaText::receiveKey(unsigned char)+0x70>
c00113c2:	0f be c3             	movsx  eax,bl
c00113c5:	52                   	push   edx
c00113c6:	52                   	push   edx
c00113c7:	50                   	push   eax
c00113c8:	56                   	push   esi
c00113c9:	e8 8e fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113ce:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d7:	59                   	pop    ecx
c00113d8:	5d                   	pop    ebp
c00113d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113dd:	50                   	push   eax
c00113de:	57                   	push   edi
c00113df:	e8 90 f5 fe ff       	call   c0000974 <strcat>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ee:	75 05                	jne    c00113f5 <VgaText::receiveKey(unsigned char)+0x81>
c00113f0:	80 fb 0a             	cmp    bl,0xa
c00113f3:	75 53                	jne    c0011448 <VgaText::receiveKey(unsigned char)+0xd4>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113fe:	53                   	push   ebx
c00113ff:	e8 90 f3 fe ff       	call   c0000794 <strlen>
c0011404:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011407:	89 c5                	mov    ebp,eax
c0011409:	e8 86 f3 fe ff       	call   c0000794 <strlen>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011415:	3d 2c 01 00 00       	cmp    eax,0x12c
c001141a:	76 10                	jbe    c001142c <VgaText::receiveKey(unsigned char)+0xb8>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	68 df a4 02 c0       	push   0xc002a4df
c0011424:	e8 bc 92 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	50                   	push   eax
c001142d:	50                   	push   eax
c001142e:	57                   	push   edi
c001142f:	53                   	push   ebx
c0011430:	e8 3f f5 fe ff       	call   c0000974 <strcat>
c0011435:	83 c4 0c             	add    esp,0xc
c0011438:	68 96 00 00 00       	push   0x96
c001143d:	6a 00                	push   0x0
c001143f:	57                   	push   edi
c0011440:	e8 33 f3 fe ff       	call   c0000778 <memset>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	56                   	push   esi
c001144c:	e8 d5 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	83 c4 1c             	add    esp,0x1c
c0011457:	5b                   	pop    ebx
c0011458:	5e                   	pop    esi
c0011459:	5f                   	pop    edi
c001145a:	5d                   	pop    ebp
c001145b:	c3                   	ret    

c001145c <VgaText::write(unsigned long long, void*, int*)>:
c001145c:	55                   	push   ebp
c001145d:	57                   	push   edi
c001145e:	56                   	push   esi
c001145f:	53                   	push   ebx
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011467:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001146b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001146f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011476:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011479:	39 eb                	cmp    ebx,ebp
c001147b:	74 13                	je     c0011490 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001147d:	43                   	inc    ebx
c001147e:	50                   	push   eax
c001147f:	50                   	push   eax
c0011480:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011484:	50                   	push   eax
c0011485:	56                   	push   esi
c0011486:	e8 d1 fb ff ff       	call   c001105c <VgaText::putchar(char)>
c001148b:	83 c4 10             	add    esp,0x10
c001148e:	eb e9                	jmp    c0011479 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001149a:	56                   	push   esi
c001149b:	e8 86 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c00114a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a4:	89 38                	mov    DWORD PTR [eax],edi
c00114a6:	83 c4 1c             	add    esp,0x1c
c00114a9:	31 c0                	xor    eax,eax
c00114ab:	5b                   	pop    ebx
c00114ac:	5e                   	pop    esi
c00114ad:	5f                   	pop    edi
c00114ae:	5d                   	pop    ebp
c00114af:	c3                   	ret    

c00114b0 <newTerminal(char*)>:
c00114b0:	83 ec 28             	sub    esp,0x28
c00114b3:	68 60 12 00 00       	push   0x1260
c00114b8:	e8 86 e3 ff ff       	call   c000f843 <malloc>
c00114bd:	5a                   	pop    edx
c00114be:	59                   	pop    ecx
c00114bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c3:	50                   	push   eax
c00114c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c8:	e8 15 fd ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c00114cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d1:	83 c4 2c             	add    esp,0x2c
c00114d4:	c3                   	ret    
c00114d5:	90                   	nop

c00114d6 <TSS::TSS()>:
c00114d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114e1:	90                   	nop
c00114e2:	c3                   	ret    
c00114e3:	90                   	nop

c00114e4 <TSS::setESP(unsigned long)>:
c00114e4:	55                   	push   ebp
c00114e5:	89 e5                	mov    ebp,esp
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114f3:	90                   	nop
c00114f4:	5d                   	pop    ebp
c00114f5:	c3                   	ret    

c00114f6 <TSS::flush()>:
c00114f6:	55                   	push   ebp
c00114f7:	89 e5                	mov    ebp,esp
c00114f9:	83 ec 10             	sub    esp,0x10
c00114fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011501:	83 c8 03             	or     eax,0x3
c0011504:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011508:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001150c:	66 89 d0             	mov    ax,dx
c001150f:	0f 00 d8             	ltr    ax
c0011512:	90                   	nop
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <TSS::setup(unsigned long, unsigned long)>:
c0011516:	55                   	push   ebp
c0011517:	89 e5                	mov    ebp,esp
c0011519:	83 ec 18             	sub    esp,0x18
c001151c:	83 ec 0c             	sub    esp,0xc
c001151f:	6a 68                	push   0x68
c0011521:	e8 1d e3 ff ff       	call   c000f843 <malloc>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	89 c2                	mov    edx,eax
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	83 ec 04             	sub    esp,0x4
c001153a:	6a 68                	push   0x68
c001153c:	6a 00                	push   0x0
c001153e:	50                   	push   eax
c001153f:	e8 34 f2 fe ff       	call   c0000778 <memset>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011559:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001155f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011565:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011568:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011571:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115de:	0f 20 da             	mov    edx,cr3
c00115e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f7:	50                   	push   eax
c00115f8:	e8 21 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	83 ec 08             	sub    esp,0x8
c0011603:	6a 68                	push   0x68
c0011605:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011608:	50                   	push   eax
c0011609:	e8 2c da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011615:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011618:	83 e0 0f             	and    eax,0xf
c001161b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001161e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011621:	83 c8 40             	or     eax,0x40
c0011624:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011627:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001162c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011632:	05 78 01 00 00       	add    eax,0x178
c0011637:	83 ec 04             	sub    esp,0x4
c001163a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001163d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011640:	50                   	push   eax
c0011641:	e8 28 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	89 c2                	mov    edx,eax
c001164b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164e:	89 10                	mov    DWORD PTR [eax],edx
c0011650:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0011655:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001165b:	05 78 01 00 00       	add    eax,0x178
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	50                   	push   eax
c0011664:	e8 49 da ff ff       	call   c000f0b2 <GDT::flush()>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011671:	83 ec 08             	sub    esp,0x8
c0011674:	50                   	push   eax
c0011675:	68 48 a5 02 c0       	push   0xc002a548
c001167a:	e8 b9 19 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011685:	8b 00                	mov    eax,DWORD PTR [eax]
c0011687:	c9                   	leave  
c0011688:	c3                   	ret    
c0011689:	90                   	nop

c001168a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001168a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011692:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011695:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001169a:	75 08                	jne    c00116a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001169c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116a2:	eb 38                	jmp    c00116dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a9:	75 17                	jne    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116c2:	89 c1                	mov    ecx,eax
c00116c4:	83 e1 fd             	and    ecx,0xfffffffd
c00116c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116cd:	74 cd                	je     c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116d4:	83 e0 ef             	and    eax,0xffffffef
c00116d7:	83 f8 08             	cmp    eax,0x8
c00116da:	76 c0                	jbe    c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116dc:	31 c0                	xor    eax,eax
c00116de:	c3                   	ret    
c00116df:	90                   	nop

c00116e0 <ReservedFilename::isAtty()>:
c00116e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e7:	31 c0                	xor    eax,eax
c00116e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116ef:	74 09                	je     c00116fa <ReservedFilename::isAtty()+0x1a>
c00116f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f7:	0f 94 c0             	sete   al
c00116fa:	c3                   	ret    
c00116fb:	90                   	nop

c00116fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001170b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011710:	75 08                	jne    c001171a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011712:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011718:	eb 3d                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001171f:	75 17                	jne    c0011738 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011729:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001172f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011735:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011738:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173d:	75 04                	jne    c0011743 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001173f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011741:	eb 14                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011743:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011748:	74 c8                	je     c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001174a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001174f:	83 e0 ef             	and    eax,0xffffffef
c0011752:	83 f8 08             	cmp    eax,0x8
c0011755:	76 bb                	jbe    c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011757:	31 c0                	xor    eax,eax
c0011759:	c3                   	ret    

c001175a <UnixFile::getFileDescriptor()>:
c001175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011761:	c3                   	ret    

c0011762 <UnixFile::UnixFile(int)>:
c0011762:	53                   	push   ebx
c0011763:	83 ec 28             	sub    esp,0x28
c0011766:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c001176b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176f:	89 10                	mov    DWORD PTR [eax],edx
c0011771:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011779:	0f 8f 8c 01 00 00    	jg     c001190b <UnixFile::UnixFile(int)+0x1a9>
c001177f:	a1 00 d5 02 c0       	mov    eax,ds:0xc002d500
c0011784:	8d 50 01             	lea    edx,[eax+0x1]
c0011787:	89 15 00 d5 02 c0    	mov    DWORD PTR ds:0xc002d500,edx
c001178d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011791:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011794:	83 ec 08             	sub    esp,0x8
c0011797:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001179b:	68 d8 e6 02 c0       	push   0xc002e6d8
c00117a0:	e8 8b 70 01 00       	call   c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	a0 d4 e6 02 c0       	mov    al,ds:0xc002e6d4
c00117ad:	83 f0 01             	xor    eax,0x1
c00117b0:	84 c0                	test   al,al
c00117b2:	0f 84 54 01 00 00    	je     c001190c <UnixFile::UnixFile(int)+0x1aa>
c00117b8:	c6 05 d4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6d4,0x1
c00117bf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c7:	83 ec 0c             	sub    esp,0xc
c00117ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117ce:	e8 70 e0 ff ff       	call   c000f843 <malloc>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	89 c3                	mov    ebx,eax
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	68 03 ff ff 0f       	push   0xfffff03
c00117e0:	53                   	push   ebx
c00117e1:	e8 2c 01 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	89 1d cc e6 02 c0    	mov    DWORD PTR ds:0xc002e6cc,ebx
c00117ef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fe:	e8 40 e0 ff ff       	call   c000f843 <malloc>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	89 c3                	mov    ebx,eax
c0011808:	83 ec 08             	sub    esp,0x8
c001180b:	68 01 ff ff 0f       	push   0xfffff01
c0011810:	53                   	push   ebx
c0011811:	e8 fc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	89 1d d0 e6 02 c0    	mov    DWORD PTR ds:0xc002e6d0,ebx
c001181f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001182e:	e8 10 e0 ff ff       	call   c000f843 <malloc>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	89 c3                	mov    ebx,eax
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 00 ff ff 0f       	push   0xfffff00
c0011840:	53                   	push   ebx
c0011841:	e8 cc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	89 1d c4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c4,ebx
c001184f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001185e:	e8 e0 df ff ff       	call   c000f843 <malloc>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	89 c3                	mov    ebx,eax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 02 ff ff 0f       	push   0xfffff02
c0011870:	53                   	push   ebx
c0011871:	e8 9c 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 1d c8 e6 02 c0    	mov    DWORD PTR ds:0xc002e6c8,ebx
c001187f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011887:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001188c:	7f 7e                	jg     c001190c <UnixFile::UnixFile(int)+0x1aa>
c001188e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001189d:	e8 a1 df ff ff       	call   c000f843 <malloc>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	89 c3                	mov    ebx,eax
c00118a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ab:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	50                   	push   eax
c00118b4:	53                   	push   ebx
c00118b5:	e8 58 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118ba:	83 c4 10             	add    esp,0x10
c00118bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118c1:	89 1c 85 a0 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1960],ebx
c00118c8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d7:	e8 67 df ff ff       	call   c000f843 <malloc>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	89 c3                	mov    ebx,eax
c00118e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118ea:	83 ec 08             	sub    esp,0x8
c00118ed:	50                   	push   eax
c00118ee:	53                   	push   ebx
c00118ef:	e8 1e 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118fb:	89 1c 85 60 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19a0],ebx
c0011902:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011906:	e9 7c ff ff ff       	jmp    c0011887 <UnixFile::UnixFile(int)+0x125>
c001190b:	90                   	nop
c001190c:	83 c4 28             	add    esp,0x28
c001190f:	5b                   	pop    ebx
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <ReservedFilename::ReservedFilename(int)>:
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011919:	83 ec 08             	sub    esp,0x8
c001191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011920:	50                   	push   eax
c0011921:	e8 3c fe ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ba 50 a6 02 c0       	mov    edx,0xc002a650
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	89 10                	mov    DWORD PTR [eax],edx
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001193c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001193f:	90                   	nop
c0011940:	83 c4 0c             	add    esp,0xc
c0011943:	c3                   	ret    

c0011944 <UnixFile::~UnixFile()>:
c0011944:	83 ec 1c             	sub    esp,0x1c
c0011947:	ba 34 a6 02 c0       	mov    edx,0xc002a634
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	89 10                	mov    DWORD PTR [eax],edx
c0011952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011959:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001195e:	7f 73                	jg     c00119d3 <UnixFile::~UnixFile()+0x8f>
c0011960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011970:	e8 8f 6f 01 00       	call   c0028904 <LinkedList<UnixFile>::getFirstElement()>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011984:	e8 83 6f 01 00       	call   c002890c <LinkedList<UnixFile>::removeFirst()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011990:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011994:	74 40                	je     c00119d6 <UnixFile::~UnixFile()+0x92>
c0011996:	83 ec 08             	sub    esp,0x8
c0011999:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001199d:	68 d8 e6 02 c0       	push   0xc002e6d8
c00119a2:	e8 89 6e 01 00       	call   c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ae:	8d 50 01             	lea    edx,[eax+0x1]
c00119b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ba:	0f 94 c0             	sete   al
c00119bd:	84 c0                	test   al,al
c00119bf:	74 a7                	je     c0011968 <UnixFile::~UnixFile()+0x24>
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	68 0c a6 02 c0       	push   0xc002a60c
c00119c9:	e8 17 8d 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	eb 95                	jmp    c0011968 <UnixFile::~UnixFile()+0x24>
c00119d3:	90                   	nop
c00119d4:	eb 01                	jmp    c00119d7 <UnixFile::~UnixFile()+0x93>
c00119d6:	90                   	nop
c00119d7:	90                   	nop
c00119d8:	83 c4 1c             	add    esp,0x1c
c00119db:	c3                   	ret    

c00119dc <UnixFile::~UnixFile()>:
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e6:	e8 59 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	6a 0c                	push   0xc
c00119f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f7:	e8 5c 15 00 00       	call   c0012f58 <operator delete(void*, unsigned long)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	83 c4 0c             	add    esp,0xc
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <ReservedFilename::~ReservedFilename()>:
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	ba 50 a6 02 c0       	mov    edx,0xc002a650
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	89 10                	mov    DWORD PTR [eax],edx
c0011a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	50                   	push   eax
c0011a1a:	e8 25 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	90                   	nop
c0011a23:	83 c4 0c             	add    esp,0xc
c0011a26:	c3                   	ret    
c0011a27:	90                   	nop

c0011a28 <ReservedFilename::~ReservedFilename()>:
c0011a28:	83 ec 0c             	sub    esp,0xc
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a32:	e8 cd ff ff ff       	call   c0011a04 <ReservedFilename::~ReservedFilename()>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	83 ec 08             	sub    esp,0x8
c0011a3d:	6a 0c                	push   0xc
c0011a3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a43:	e8 10 15 00 00       	call   c0012f58 <operator delete(void*, unsigned long)>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	83 c4 0c             	add    esp,0xc
c0011a4e:	c3                   	ret    

c0011a4f <getFromFileDescriptor(int)>:
c0011a4f:	53                   	push   ebx
c0011a50:	83 ec 08             	sub    esp,0x8
c0011a53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a57:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a5d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a63:	7f 2c                	jg     c0011a91 <getFromFileDescriptor(int)+0x42>
c0011a65:	83 ec 0c             	sub    esp,0xc
c0011a68:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011a6d:	e8 92 6e 01 00       	call   c0028904 <LinkedList<UnixFile>::getFirstElement()>
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	85 c0                	test   eax,eax
c0011a77:	75 04                	jne    c0011a7d <getFromFileDescriptor(int)+0x2e>
c0011a79:	31 c0                	xor    eax,eax
c0011a7b:	eb 6e                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a7d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a80:	74 69                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a82:	52                   	push   edx
c0011a83:	52                   	push   edx
c0011a84:	50                   	push   eax
c0011a85:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011a8a:	e8 1f 6f 01 00       	call   c00289ae <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a8f:	eb e1                	jmp    c0011a72 <getFromFileDescriptor(int)+0x23>
c0011a91:	a1 cc e6 02 c0       	mov    eax,ds:0xc002e6cc
c0011a96:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a9c:	74 4d                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 d0 e6 02 c0       	mov    eax,ds:0xc002e6d0
c0011aa3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa9:	74 40                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011aab:	a1 c8 e6 02 c0       	mov    eax,ds:0xc002e6c8
c0011ab0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab6:	74 33                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ab8:	a1 c4 e6 02 c0       	mov    eax,ds:0xc002e6c4
c0011abd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ac3:	74 26                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ac5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011acb:	83 f8 08             	cmp    eax,0x8
c0011ace:	77 09                	ja     c0011ad9 <getFromFileDescriptor(int)+0x8a>
c0011ad0:	8b 04 85 a0 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1960]
c0011ad7:	eb 12                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ad9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011adf:	83 fb 08             	cmp    ebx,0x8
c0011ae2:	77 95                	ja     c0011a79 <getFromFileDescriptor(int)+0x2a>
c0011ae4:	8b 04 9d 60 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd19a0]
c0011aeb:	83 c4 08             	add    esp,0x8
c0011aee:	5b                   	pop    ebx
c0011aef:	c3                   	ret    

c0011af0 <__static_initialization_and_destruction_0(int, int)>:
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af8:	75 34                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b02:	75 2a                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011b0c:	e8 c7 6c 01 00       	call   c00287d8 <LinkedList<UnixFile>::LinkedList()>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	83 ec 04             	sub    esp,0x4
c0011b17:	68 90 d4 02 c0       	push   0xc002d490
c0011b1c:	68 d8 e6 02 c0       	push   0xc002e6d8
c0011b21:	68 d6 87 02 c0       	push   0xc00287d6
c0011b26:	e8 a7 13 00 00       	call   c0012ed2 <__cxa_atexit>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	90                   	nop
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	c3                   	ret    

c0011b33 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b33:	83 ec 0c             	sub    esp,0xc
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	68 ff ff 00 00       	push   0xffff
c0011b3e:	6a 01                	push   0x1
c0011b40:	e8 ab ff ff ff       	call   c0011af0 <__static_initialization_and_destruction_0(int, int)>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	83 c4 0c             	add    esp,0xc
c0011b4b:	c3                   	ret    

c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b4c:	53                   	push   ebx
c0011b4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b55:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b5b:	89 c8                	mov    eax,ecx
c0011b5d:	d1 e8                	shr    eax,1
c0011b5f:	03 05 08 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d508
c0011b65:	83 e1 01             	and    ecx,0x1
c0011b68:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b6a:	75 09                	jne    c0011b75 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b6c:	83 e2 f0             	and    edx,0xfffffff0
c0011b6f:	09 da                	or     edx,ebx
c0011b71:	88 10                	mov    BYTE PTR [eax],dl
c0011b73:	5b                   	pop    ebx
c0011b74:	c3                   	ret    
c0011b75:	c1 e3 04             	shl    ebx,0x4
c0011b78:	83 e2 0f             	and    edx,0xf
c0011b7b:	09 da                	or     edx,ebx
c0011b7d:	88 10                	mov    BYTE PTR [eax],dl
c0011b7f:	5b                   	pop    ebx
c0011b80:	c3                   	ret    

c0011b81 <Virt::getPageState(unsigned long)>:
c0011b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b85:	8b 0d 08 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d508
c0011b8b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b91:	89 d0                	mov    eax,edx
c0011b93:	d1 e8                	shr    eax,1
c0011b95:	83 e2 01             	and    edx,0x1
c0011b98:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b9b:	75 04                	jne    c0011ba1 <Virt::getPageState(unsigned long)+0x20>
c0011b9d:	83 e0 0f             	and    eax,0xf
c0011ba0:	c3                   	ret    
c0011ba1:	c0 e8 04             	shr    al,0x4
c0011ba4:	c3                   	ret    

c0011ba5 <Virt::allocateKernelVirtualPages(int)>:
c0011ba5:	55                   	push   ebp
c0011ba6:	31 ed                	xor    ebp,ebp
c0011ba8:	57                   	push   edi
c0011ba9:	56                   	push   esi
c0011baa:	53                   	push   ebx
c0011bab:	31 db                	xor    ebx,ebx
c0011bad:	83 ec 1c             	sub    esp,0x1c
c0011bb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bb4:	8b 3d 04 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d504
c0011bba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bbf:	57                   	push   edi
c0011bc0:	e8 bc ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bc5:	5a                   	pop    edx
c0011bc6:	84 c0                	test   al,al
c0011bc8:	75 3a                	jne    c0011c04 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bca:	85 db                	test   ebx,ebx
c0011bcc:	75 02                	jne    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bce:	89 fd                	mov    ebp,edi
c0011bd0:	43                   	inc    ebx
c0011bd1:	39 f3                	cmp    ebx,esi
c0011bd3:	74 5a                	je     c0011c2f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bd5:	47                   	inc    edi
c0011bd6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bdc:	76 31                	jbe    c0011c0f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bde:	c7 05 04 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d504,0xc8000
c0011be8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bed:	75 28                	jne    c0011c17 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bf4:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf9:	57                   	push   edi
c0011bfa:	e8 82 ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bff:	5a                   	pop    edx
c0011c00:	84 c0                	test   al,al
c0011c02:	74 c6                	je     c0011bca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c04:	31 db                	xor    ebx,ebx
c0011c06:	47                   	inc    edi
c0011c07:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c0d:	77 cf                	ja     c0011bde <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c0f:	89 3d 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,edi
c0011c15:	eb a8                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	68 64 a6 02 c0       	push   0xc002a664
c0011c1f:	e8 c1 8a 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011c24:	8b 3d 04 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d504
c0011c2a:	83 c4 10             	add    esp,0x10
c0011c2d:	eb 90                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2f:	89 2d 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,ebp
c0011c35:	4b                   	dec    ebx
c0011c36:	74 5f                	je     c0011c97 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c38:	85 f6                	test   esi,esi
c0011c3a:	74 3d                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3c:	89 e8                	mov    eax,ebp
c0011c3e:	31 db                	xor    ebx,ebx
c0011c40:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c43:	eb 14                	jmp    c0011c59 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c45:	6a 01                	push   0x1
c0011c47:	43                   	inc    ebx
c0011c48:	50                   	push   eax
c0011c49:	e8 fe fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4e:	58                   	pop    eax
c0011c4f:	39 f3                	cmp    ebx,esi
c0011c51:	5a                   	pop    edx
c0011c52:	74 25                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c54:	a1 04 d5 02 c0       	mov    eax,ds:0xc002d504
c0011c59:	8d 50 01             	lea    edx,[eax+0x1]
c0011c5c:	85 db                	test   ebx,ebx
c0011c5e:	89 15 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,edx
c0011c64:	74 20                	je     c0011c86 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c66:	39 df                	cmp    edi,ebx
c0011c68:	75 db                	jne    c0011c45 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c6a:	6a 03                	push   0x3
c0011c6c:	43                   	inc    ebx
c0011c6d:	50                   	push   eax
c0011c6e:	e8 d9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c73:	59                   	pop    ecx
c0011c74:	39 f3                	cmp    ebx,esi
c0011c76:	58                   	pop    eax
c0011c77:	75 db                	jne    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c79:	83 c4 1c             	add    esp,0x1c
c0011c7c:	89 e8                	mov    eax,ebp
c0011c7e:	5b                   	pop    ebx
c0011c7f:	c1 e0 0c             	shl    eax,0xc
c0011c82:	5e                   	pop    esi
c0011c83:	5f                   	pop    edi
c0011c84:	5d                   	pop    ebp
c0011c85:	c3                   	ret    
c0011c86:	6a 02                	push   0x2
c0011c88:	bb 01 00 00 00       	mov    ebx,0x1
c0011c8d:	50                   	push   eax
c0011c8e:	e8 b9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c93:	58                   	pop    eax
c0011c94:	5a                   	pop    edx
c0011c95:	eb bd                	jmp    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c97:	6a 04                	push   0x4
c0011c99:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c9c:	55                   	push   ebp
c0011c9d:	a3 04 d5 02 c0       	mov    ds:0xc002d504,eax
c0011ca2:	e8 a5 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca7:	59                   	pop    ecx
c0011ca8:	89 e8                	mov    eax,ebp
c0011caa:	5b                   	pop    ebx
c0011cab:	c1 e0 0c             	shl    eax,0xc
c0011cae:	83 c4 1c             	add    esp,0x1c
c0011cb1:	5b                   	pop    ebx
c0011cb2:	5e                   	pop    esi
c0011cb3:	5f                   	pop    edi
c0011cb4:	5d                   	pop    ebp
c0011cb5:	c3                   	ret    

c0011cb6 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb6:	53                   	push   ebx
c0011cb7:	8b 15 e8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6e8
c0011cbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cc1:	b8 01 00 00 00       	mov    eax,0x1
c0011cc6:	89 cb                	mov    ebx,ecx
c0011cc8:	d3 e0                	shl    eax,cl
c0011cca:	c1 eb 05             	shr    ebx,0x5
c0011ccd:	f7 d0                	not    eax
c0011ccf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cd2:	5b                   	pop    ebx
c0011cd3:	c3                   	ret    

c0011cd4 <Virt::swapIDToSector(unsigned long)>:
c0011cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd8:	0f af 05 0c d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d50c
c0011cdf:	03 05 14 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d514
c0011ce5:	c3                   	ret    

c0011ce6 <Virt::allocateSwapfilePage()>:
c0011ce6:	55                   	push   ebp
c0011ce7:	31 d2                	xor    edx,edx
c0011ce9:	57                   	push   edi
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	8b 0d 0c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d50c
c0011cf5:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011cfa:	f7 f1                	div    ecx
c0011cfc:	39 0d 10 d5 02 c0    	cmp    DWORD PTR ds:0xc002d510,ecx
c0011d02:	72 2d                	jb     c0011d31 <Virt::allocateSwapfilePage()+0x4b>
c0011d04:	8b 35 e8 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6e8
c0011d0a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d0c:	f6 c2 01             	test   dl,0x1
c0011d0f:	74 3c                	je     c0011d4d <Virt::allocateSwapfilePage()+0x67>
c0011d11:	31 c9                	xor    ecx,ecx
c0011d13:	bf 01 00 00 00       	mov    edi,0x1
c0011d18:	eb 12                	jmp    c0011d2c <Virt::allocateSwapfilePage()+0x46>
c0011d1a:	89 fd                	mov    ebp,edi
c0011d1c:	89 ca                	mov    edx,ecx
c0011d1e:	d3 e5                	shl    ebp,cl
c0011d20:	c1 ea 05             	shr    edx,0x5
c0011d23:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d28:	85 ea                	test   edx,ebp
c0011d2a:	74 2a                	je     c0011d56 <Virt::allocateSwapfilePage()+0x70>
c0011d2c:	41                   	inc    ecx
c0011d2d:	39 c8                	cmp    eax,ecx
c0011d2f:	77 e9                	ja     c0011d1a <Virt::allocateSwapfilePage()+0x34>
c0011d31:	83 ec 0c             	sub    esp,0xc
c0011d34:	68 11 a8 02 c0       	push   0xc002a811
c0011d39:	e8 a7 89 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	31 c9                	xor    ecx,ecx
c0011d43:	83 c4 0c             	add    esp,0xc
c0011d46:	89 c8                	mov    eax,ecx
c0011d48:	5b                   	pop    ebx
c0011d49:	5e                   	pop    esi
c0011d4a:	5f                   	pop    edi
c0011d4b:	5d                   	pop    ebp
c0011d4c:	c3                   	ret    
c0011d4d:	89 f3                	mov    ebx,esi
c0011d4f:	bd 01 00 00 00       	mov    ebp,0x1
c0011d54:	31 c9                	xor    ecx,ecx
c0011d56:	09 ea                	or     edx,ebp
c0011d58:	89 c8                	mov    eax,ecx
c0011d5a:	89 13                	mov    DWORD PTR [ebx],edx
c0011d5c:	83 c4 0c             	add    esp,0xc
c0011d5f:	5b                   	pop    ebx
c0011d60:	5e                   	pop    esi
c0011d61:	5f                   	pop    edi
c0011d62:	5d                   	pop    ebp
c0011d63:	c3                   	ret    

c0011d64 <Virt::virtualMemorySetup()>:
c0011d64:	53                   	push   ebx
c0011d65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	6a 0f                	push   0xf
c0011d6f:	53                   	push   ebx
c0011d70:	43                   	inc    ebx
c0011d71:	e8 d6 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d76:	59                   	pop    ecx
c0011d77:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d7d:	58                   	pop    eax
c0011d7e:	75 ed                	jne    c0011d6d <Virt::virtualMemorySetup()+0x9>
c0011d80:	83 ec 08             	sub    esp,0x8
c0011d83:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d88:	68 00 00 00 c8       	push   0xc8000000
c0011d8d:	68 28 a8 02 c0       	push   0xc002a828
c0011d92:	e8 a1 12 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011d97:	58                   	pop    eax
c0011d98:	5a                   	pop    edx
c0011d99:	68 00 f0 ff ef       	push   0xeffff000
c0011d9e:	68 3c a8 02 c0       	push   0xc002a83c
c0011da3:	e8 90 12 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	83 ec 08             	sub    esp,0x8
c0011dae:	6a 00                	push   0x0
c0011db0:	53                   	push   ebx
c0011db1:	43                   	inc    ebx
c0011db2:	e8 95 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dc0:	75 e9                	jne    c0011dab <Virt::virtualMemorySetup()+0x47>
c0011dc2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc7:	83 ec 08             	sub    esp,0x8
c0011dca:	6a 0f                	push   0xf
c0011dcc:	53                   	push   ebx
c0011dcd:	43                   	inc    ebx
c0011dce:	e8 79 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ddc:	75 e9                	jne    c0011dc7 <Virt::virtualMemorySetup()+0x63>
c0011dde:	83 c4 08             	add    esp,0x8
c0011de1:	5b                   	pop    ebx
c0011de2:	c3                   	ret    

c0011de3 <Virt::swappingSetup()>:
c0011de3:	83 ec 14             	sub    esp,0x14
c0011de6:	31 d2                	xor    edx,edx
c0011de8:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011ded:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011df3:	c1 e8 05             	shr    eax,0x5
c0011df6:	50                   	push   eax
c0011df7:	68 50 a8 02 c0       	push   0xc002a850
c0011dfc:	e8 37 12 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011e01:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011e06:	31 d2                	xor    edx,edx
c0011e08:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011e0e:	c1 e8 05             	shr    eax,0x5
c0011e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e14:	e8 2a da ff ff       	call   c000f843 <malloc>
c0011e19:	83 c4 0c             	add    esp,0xc
c0011e1c:	89 c1                	mov    ecx,eax
c0011e1e:	a3 e8 e6 02 c0       	mov    ds:0xc002e6e8,eax
c0011e23:	31 d2                	xor    edx,edx
c0011e25:	a1 10 d5 02 c0       	mov    eax,ds:0xc002d510
c0011e2a:	f7 35 0c d5 02 c0    	div    DWORD PTR ds:0xc002d50c
c0011e30:	c1 e8 05             	shr    eax,0x5
c0011e33:	50                   	push   eax
c0011e34:	6a 00                	push   0x0
c0011e36:	51                   	push   ecx
c0011e37:	e8 3c e9 fe ff       	call   c0000778 <memset>
c0011e3c:	83 c4 1c             	add    esp,0x1c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::getAKernelVAS()>:
c0011e40:	a1 ec e6 02 c0       	mov    eax,ds:0xc002e6ec
c0011e45:	c3                   	ret    

c0011e46 <Virt::setupPageSwapping(int)>:
c0011e46:	57                   	push   edi
c0011e47:	56                   	push   esi
c0011e48:	53                   	push   ebx
c0011e49:	83 ec 1c             	sub    esp,0x1c
c0011e4c:	68 14 01 00 00       	push   0x114
c0011e51:	e8 ed d9 ff ff       	call   c000f843 <malloc>
c0011e56:	83 c4 0c             	add    esp,0xc
c0011e59:	89 c6                	mov    esi,eax
c0011e5b:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c0011e61:	68 6b a8 02 c0       	push   0xc002a86b
c0011e66:	50                   	push   eax
c0011e67:	e8 24 17 00 00       	call   c0013590 <File::File(char const*, Process*)>
c0011e6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6f:	e8 f8 18 00 00       	call   c001376c <File::unlink()>
c0011e74:	58                   	pop    eax
c0011e75:	5a                   	pop    edx
c0011e76:	6a 12                	push   0x12
c0011e78:	56                   	push   esi
c0011e79:	e8 76 17 00 00       	call   c00135f4 <File::open(FileOpenMode)>
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	85 c0                	test   eax,eax
c0011e83:	0f 85 ca 00 00 00    	jne    c0011f53 <Virt::setupPageSwapping(int)+0x10d>
c0011e89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e95:	c1 e3 08             	shl    ebx,0x8
c0011e98:	83 ec 0c             	sub    esp,0xc
c0011e9b:	68 00 00 01 00       	push   0x10000
c0011ea0:	e8 9e d9 ff ff       	call   c000f843 <malloc>
c0011ea5:	83 c4 0c             	add    esp,0xc
c0011ea8:	89 c7                	mov    edi,eax
c0011eaa:	68 00 00 01 00       	push   0x10000
c0011eaf:	6a 00                	push   0x0
c0011eb1:	50                   	push   eax
c0011eb2:	e8 c1 e8 fe ff       	call   c0000778 <memset>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	85 db                	test   ebx,ebx
c0011ebc:	79 03                	jns    c0011ec1 <Virt::setupPageSwapping(int)+0x7b>
c0011ebe:	83 c3 0f             	add    ebx,0xf
c0011ec1:	c1 fb 04             	sar    ebx,0x4
c0011ec4:	4b                   	dec    ebx
c0011ec5:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec8:	74 4b                	je     c0011f15 <Virt::setupPageSwapping(int)+0xcf>
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ed3:	52                   	push   edx
c0011ed4:	57                   	push   edi
c0011ed5:	6a 00                	push   0x0
c0011ed7:	68 00 00 01 00       	push   0x10000
c0011edc:	56                   	push   esi
c0011edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ee0:	83 c4 20             	add    esp,0x20
c0011ee3:	85 c0                	test   eax,eax
c0011ee5:	75 59                	jne    c0011f40 <Virt::setupPageSwapping(int)+0xfa>
c0011ee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eeb:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ef0:	74 d2                	je     c0011ec4 <Virt::setupPageSwapping(int)+0x7e>
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	4b                   	dec    ebx
c0011ef6:	50                   	push   eax
c0011ef7:	68 be a8 02 c0       	push   0xc002a8be
c0011efc:	e8 37 11 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011f01:	c7 04 24 c7 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c7
c0011f08:	e8 d8 87 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	83 fb ff             	cmp    ebx,0xffffffff
c0011f13:	75 b5                	jne    c0011eca <Virt::setupPageSwapping(int)+0x84>
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	56                   	push   esi
c0011f19:	e8 34 17 00 00       	call   c0013652 <File::close()>
c0011f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f21:	e8 3d d9 ff ff       	call   c000f863 <rfree>
c0011f26:	83 c4 10             	add    esp,0x10
c0011f29:	85 f6                	test   esi,esi
c0011f2b:	74 0c                	je     c0011f39 <Virt::setupPageSwapping(int)+0xf3>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f32:	56                   	push   esi
c0011f33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	5b                   	pop    ebx
c0011f3d:	5e                   	pop    esi
c0011f3e:	5f                   	pop    edi
c0011f3f:	c3                   	ret    
c0011f40:	83 ec 08             	sub    esp,0x8
c0011f43:	50                   	push   eax
c0011f44:	68 a6 a8 02 c0       	push   0xc002a8a6
c0011f49:	e8 ea 10 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	eb 94                	jmp    c0011ee7 <Virt::setupPageSwapping(int)+0xa1>
c0011f53:	83 ec 08             	sub    esp,0x8
c0011f56:	50                   	push   eax
c0011f57:	68 82 a8 02 c0       	push   0xc002a882
c0011f5c:	e8 d7 10 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0011f61:	c7 04 24 8b a8 02 c0 	mov    DWORD PTR [esp],0xc002a88b
c0011f68:	e8 78 87 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	e9 14 ff ff ff       	jmp    c0011e89 <Virt::setupPageSwapping(int)+0x43>
c0011f75:	90                   	nop

c0011f76 <VAS::VAS()>:
c0011f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f85:	a3 ec e6 02 c0       	mov    ds:0xc002e6ec,eax
c0011f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f96:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa4:	90                   	nop
c0011fa5:	c3                   	ret    

c0011fa6 <VAS::VAS(VAS*)>:
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb4:	83 ec 0c             	sub    esp,0xc
c0011fb7:	68 84 a6 02 c0       	push   0xc002a684
c0011fbc:	e8 24 87 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	90                   	nop
c0011fc5:	83 c4 0c             	add    esp,0xc
c0011fc8:	c3                   	ret    
c0011fc9:	90                   	nop

c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fce:	89 c2                	mov    edx,eax
c0011fd0:	c1 e8 0a             	shr    eax,0xa
c0011fd3:	c1 ea 16             	shr    edx,0x16
c0011fd6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fdb:	19 c9                	sbb    ecx,ecx
c0011fdd:	c1 e2 0c             	shl    edx,0xc
c0011fe0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe6:	25 fc 0f 00 00       	and    eax,0xffc
c0011feb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ff2:	01 d0                	add    eax,edx
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <VAS::getPageTableEntry(unsigned long)>:
c0011ff6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ffa:	89 ca                	mov    edx,ecx
c0011ffc:	c1 e9 0a             	shr    ecx,0xa
c0011fff:	c1 ea 16             	shr    edx,0x16
c0012002:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012008:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200e:	c1 e0 0c             	shl    eax,0xc
c0012011:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012014:	c3                   	ret    

c0012015 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	be 01 00 00 00       	mov    esi,0x1
c001201c:	53                   	push   ebx
c001201d:	83 ec 10             	sub    esp,0x10
c0012020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012024:	c1 eb 0c             	shr    ebx,0xc
c0012027:	eb 3f                	jmp    c0012068 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012029:	e8 12 fe ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	57                   	push   edi
c0012032:	50                   	push   eax
c0012033:	e8 be ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	8b 00                	mov    eax,DWORD PTR [eax]
c001203d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012041:	f6 c4 04             	test   ah,0x4
c0012044:	75 5f                	jne    c00120a5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012046:	80 fa 04             	cmp    dl,0x4
c0012049:	74 78                	je     c00120c3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001204b:	80 fa 02             	cmp    dl,0x2
c001204e:	0f 84 88 00 00 00    	je     c00120dc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012054:	80 fa 03             	cmp    dl,0x3
c0012057:	0f 84 ad 00 00 00    	je     c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001205d:	fe ca                	dec    dl
c001205f:	0f 84 92 00 00 00    	je     c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012065:	43                   	inc    ebx
c0012066:	31 f6                	xor    esi,esi
c0012068:	53                   	push   ebx
c0012069:	e8 13 fb ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c001206e:	5f                   	pop    edi
c001206f:	89 df                	mov    edi,ebx
c0012071:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012075:	c1 e7 0c             	shl    edi,0xc
c0012078:	84 c0                	test   al,al
c001207a:	75 ad                	jne    c0012029 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	68 cd a8 02 c0       	push   0xc002a8cd
c0012084:	e8 5c 86 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0012089:	e8 b2 fd ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001208e:	5a                   	pop    edx
c001208f:	59                   	pop    ecx
c0012090:	57                   	push   edi
c0012091:	50                   	push   eax
c0012092:	e8 5f ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	8b 00                	mov    eax,DWORD PTR [eax]
c001209c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a0:	f6 c4 04             	test   ah,0x4
c00120a3:	74 c0                	je     c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	50                   	push   eax
c00120b2:	e8 a4 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120be:	80 fa 04             	cmp    dl,0x4
c00120c1:	75 88                	jne    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120c3:	89 f0                	mov    eax,esi
c00120c5:	84 c0                	test   al,al
c00120c7:	75 47                	jne    c0012110 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c9:	c7 44 24 20 a8 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a6a8
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	e9 09 86 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c00120dc:	89 f0                	mov    eax,esi
c00120de:	84 c0                	test   al,al
c00120e0:	75 15                	jne    c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	68 e9 a8 02 c0       	push   0xc002a8e9
c00120ea:	e8 f6 85 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	e9 6e ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f7:	83 ec 08             	sub    esp,0x8
c00120fa:	6a 00                	push   0x0
c00120fc:	53                   	push   ebx
c00120fd:	e8 4a fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	e9 5b ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001210a:	89 f0                	mov    eax,esi
c001210c:	84 c0                	test   al,al
c001210e:	75 15                	jne    c0012125 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012110:	83 ec 08             	sub    esp,0x8
c0012113:	6a 00                	push   0x0
c0012115:	53                   	push   ebx
c0012116:	e8 31 fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	5b                   	pop    ebx
c0012122:	5e                   	pop    esi
c0012123:	5f                   	pop    edi
c0012124:	c3                   	ret    
c0012125:	c7 44 24 20 05 a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a905
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	e9 ad 85 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>

c0012138 <VAS::freeAllocatedPages(unsigned long)>:
c0012138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012140:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012144:	74 09                	je     c001214f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001214a:	e9 c6 fe ff ff       	jmp    c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001214f:	c7 44 24 04 cc a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6cc
c0012157:	e9 dc 0e 00 00       	jmp    c0013038 <Dbg::kprintf(char const*, ...)>

c001215c <VAS::virtualToPhysical(unsigned long)>:
c001215c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012160:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012164:	e8 8d fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012169:	5a                   	pop    edx
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	59                   	pop    ecx
c001216d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012172:	c3                   	ret    
c0012173:	90                   	nop

c0012174 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012174:	55                   	push   ebp
c0012175:	57                   	push   edi
c0012176:	56                   	push   esi
c0012177:	53                   	push   ebx
c0012178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001217c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012180:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012184:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012188:	85 db                	test   ebx,ebx
c001218a:	7e 22                	jle    c00121ae <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001218c:	c1 e3 0c             	shl    ebx,0xc
c001218f:	01 f3                	add    ebx,esi
c0012191:	56                   	push   esi
c0012192:	81 c6 00 10 00 00    	add    esi,0x1000
c0012198:	55                   	push   ebp
c0012199:	e8 58 fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001219e:	5a                   	pop    edx
c001219f:	59                   	pop    ecx
c00121a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a2:	21 f9                	and    ecx,edi
c00121a4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a8:	39 f3                	cmp    ebx,esi
c00121aa:	89 08                	mov    DWORD PTR [eax],ecx
c00121ac:	75 e3                	jne    c0012191 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	5f                   	pop    edi
c00121b1:	5d                   	pop    ebp
c00121b2:	c3                   	ret    
c00121b3:	90                   	nop

c00121b4 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b4:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00121b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c6:	75 01                	jne    c00121c9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c8:	c3                   	ret    
c00121c9:	68 80 00 00 00       	push   0x80
c00121ce:	6a ff                	push   0xffffffff
c00121d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121dc:	e8 93 ff ff ff       	call   c0012174 <VAS::reflagRange(unsigned long, int, int, int)>
c00121e1:	83 c4 14             	add    esp,0x14
c00121e4:	c3                   	ret    
c00121e5:	90                   	nop

c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f9:	19 c0                	sbb    eax,eax
c00121fb:	83 ca 03             	or     edx,0x3
c00121fe:	83 e0 fc             	and    eax,0xfffffffc
c0012201:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012208:	0f 20 d8             	mov    eax,cr3
c001220b:	0f 22 d8             	mov    cr3,eax
c001220e:	c3                   	ret    
c001220f:	90                   	nop

c0012210 <VAS::~VAS()>:
c0012210:	83 ec 2c             	sub    esp,0x2c
c0012213:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001221b:	e8 ba bc 00 00       	call   c001deda <lockScheduler()>
c0012220:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012225:	8b 00                	mov    eax,DWORD PTR [eax]
c0012227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001222a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012230:	83 ec 04             	sub    esp,0x4
c0012233:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012237:	6a 01                	push   0x1
c0012239:	50                   	push   eax
c001223a:	e8 a7 ff ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001224a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012252:	0f 8f d7 00 00 00    	jg     c001232f <VAS::~VAS()+0x11f>
c0012258:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012263:	c1 e2 02             	shl    edx,0x2
c0012266:	01 d0                	add    eax,edx
c0012268:	8b 00                	mov    eax,DWORD PTR [eax]
c001226a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012272:	83 e0 01             	and    eax,0x1
c0012275:	0f 84 ab 00 00 00    	je     c0012326 <VAS::~VAS()+0x116>
c001227b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012283:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001228b:	7f 75                	jg     c0012302 <VAS::~VAS()+0xf2>
c001228d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012291:	c1 e0 0a             	shl    eax,0xa
c0012294:	89 c2                	mov    edx,eax
c0012296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001229a:	01 d0                	add    eax,edx
c001229c:	c1 e0 0c             	shl    eax,0xc
c001229f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00122aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122ad:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122b3:	83 ec 04             	sub    esp,0x4
c00122b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122ba:	6a 01                	push   0x1
c00122bc:	50                   	push   eax
c00122bd:	e8 08 fd ff ff       	call   c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d7:	25 01 04 00 00       	and    eax,0x401
c00122dc:	3d 01 04 00 00       	cmp    eax,0x401
c00122e1:	75 19                	jne    c00122fc <VAS::~VAS()+0xec>
c00122e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	50                   	push   eax
c00122f0:	e8 66 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122fc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012300:	eb 81                	jmp    c0012283 <VAS::~VAS()+0x73>
c0012302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012306:	25 00 04 00 00       	and    eax,0x400
c001230b:	74 19                	je     c0012326 <VAS::~VAS()+0x116>
c001230d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012311:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	50                   	push   eax
c001231a:	e8 3c db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012326:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001232a:	e9 1b ff ff ff       	jmp    c001224a <VAS::~VAS()+0x3a>
c001232f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012333:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	50                   	push   eax
c001233a:	e8 d6 fc ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012346:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	50                   	push   eax
c001234d:	e8 09 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001235d:	c1 e0 02             	shl    eax,0x2
c0012360:	83 ec 08             	sub    esp,0x8
c0012363:	50                   	push   eax
c0012364:	68 f0 a6 02 c0       	push   0xc002a6f0
c0012369:	e8 ca 0c 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	e8 66 bb 00 00       	call   c001dedc <unlockScheduler()>
c0012376:	90                   	nop
c0012377:	83 c4 2c             	add    esp,0x2c
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001237c:	55                   	push   ebp
c001237d:	57                   	push   edi
c001237e:	56                   	push   esi
c001237f:	53                   	push   ebx
c0012380:	83 ec 1c             	sub    esp,0x1c
c0012383:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012387:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001238b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012391:	77 08                	ja     c001239b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012393:	0f 20 d8             	mov    eax,cr3
c0012396:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012399:	75 47                	jne    c00123e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001239b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239f:	09 d8                	or     eax,ebx
c00123a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a6:	75 57                	jne    c00123ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a8:	89 de                	mov    esi,ebx
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 ee 16             	shr    esi,0x16
c00123b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123bb:	74 54                	je     c0012411 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123cb:	c1 e6 0c             	shl    esi,0xc
c00123ce:	c1 eb 0a             	shr    ebx,0xa
c00123d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123da:	83 c4 1c             	add    esp,0x1c
c00123dd:	5b                   	pop    ebx
c00123de:	5e                   	pop    esi
c00123df:	5f                   	pop    edi
c00123e0:	5d                   	pop    ebp
c00123e1:	c3                   	ret    
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	68 10 a7 02 c0       	push   0xc002a710
c00123ea:	e8 49 0c 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f6:	09 d8                	or     eax,ebx
c00123f8:	a9 ff 0f 00 00       	test   eax,0xfff
c00123fd:	74 a9                	je     c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	68 78 a7 02 c0       	push   0xc002a778
c0012407:	e8 d9 82 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	eb 97                	jmp    c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012415:	e8 cb da ff ff       	call   c000fee5 <Phys::allocatePage()>
c001241a:	89 c5                	mov    ebp,eax
c001241c:	e8 1f fa ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012428:	6a 01                	push   0x1
c001242a:	e8 76 f7 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001242f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012436:	6a 01                	push   0x1
c0012438:	50                   	push   eax
c0012439:	55                   	push   ebp
c001243a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012440:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012444:	51                   	push   ecx
c0012445:	e8 26 02 00 00       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	68 00 10 00 00       	push   0x1000
c0012452:	6a 00                	push   0x0
c0012454:	50                   	push   eax
c0012455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012459:	e8 1a e3 fe ff       	call   c0000778 <memset>
c001245e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012462:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012465:	e8 ab fb ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001246a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012477:	e9 41 ff ff ff       	jmp    c00123bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001247c <VAS::allocatePages(int, int)>:
c001247c:	55                   	push   ebp
c001247d:	57                   	push   edi
c001247e:	56                   	push   esi
c001247f:	53                   	push   ebx
c0012480:	83 ec 1c             	sub    esp,0x1c
c0012483:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012487:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001248c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012492:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012498:	83 e0 01             	and    eax,0x1
c001249b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124a3:	0f 85 cc 00 00 00    	jne    c0012575 <VAS::allocatePages(int, int)+0xf9>
c00124a9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b0:	85 c0                	test   eax,eax
c00124b2:	0f 84 a1 00 00 00    	je     c0012559 <VAS::allocatePages(int, int)+0xdd>
c00124b8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c0:	c1 e6 0c             	shl    esi,0xc
c00124c3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c7:	85 c0                	test   eax,eax
c00124c9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124cc:	7e 33                	jle    c0012501 <VAS::allocatePages(int, int)+0x85>
c00124ce:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d6:	81 cd 00 04 00 00    	or     ebp,0x400
c00124dc:	e8 04 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c00124e1:	55                   	push   ebp
c00124e2:	53                   	push   ebx
c00124e3:	50                   	push   eax
c00124e4:	57                   	push   edi
c00124e5:	e8 92 fe ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f2:	74 03                	je     c00124f7 <VAS::allocatePages(int, int)+0x7b>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 de                	cmp    esi,ebx
c00124ff:	75 db                	jne    c00124dc <VAS::allocatePages(int, int)+0x60>
c0012501:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012506:	75 12                	jne    c001251a <VAS::allocatePages(int, int)+0x9e>
c0012508:	0f 20 d8             	mov    eax,cr3
c001250b:	0f 22 d8             	mov    cr3,eax
c001250e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012512:	83 c4 1c             	add    esp,0x1c
c0012515:	5b                   	pop    ebx
c0012516:	5e                   	pop    esi
c0012517:	5f                   	pop    edi
c0012518:	5d                   	pop    ebp
c0012519:	c3                   	ret    
c001251a:	c1 ee 0a             	shr    esi,0xa
c001251d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012521:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012527:	c1 eb 0a             	shr    ebx,0xa
c001252a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012530:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012536:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253c:	39 c3                	cmp    ebx,eax
c001253e:	77 ce                	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012540:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012543:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012549:	39 d8                	cmp    eax,ebx
c001254b:	73 f3                	jae    c0012540 <VAS::allocatePages(int, int)+0xc4>
c001254d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012551:	83 c4 1c             	add    esp,0x1c
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	5d                   	pop    ebp
c0012558:	c3                   	ret    
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 9c a7 02 c0       	push   0xc002a79c
c0012561:	e8 7f 81 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0012566:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012569:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	e9 43 ff ff ff       	jmp    c00124b8 <VAS::allocatePages(int, int)+0x3c>
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001257c:	e8 24 f6 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001258d:	0f 87 9b 00 00 00    	ja     c001262e <VAS::allocatePages(int, int)+0x1b2>
c0012593:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012597:	85 d2                	test   edx,edx
c0012599:	7e 3c                	jle    c00125d7 <VAS::allocatePages(int, int)+0x15b>
c001259b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a7:	c1 e5 0c             	shl    ebp,0xc
c00125aa:	81 ce 00 04 00 00    	or     esi,0x400
c00125b0:	01 dd                	add    ebp,ebx
c00125b2:	e8 2e d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00125b7:	56                   	push   esi
c00125b8:	53                   	push   ebx
c00125b9:	50                   	push   eax
c00125ba:	57                   	push   edi
c00125bb:	e8 bc fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c8:	74 03                	je     c00125cd <VAS::allocatePages(int, int)+0x151>
c00125ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d3:	39 dd                	cmp    ebp,ebx
c00125d5:	75 db                	jne    c00125b2 <VAS::allocatePages(int, int)+0x136>
c00125d7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125dc:	0f 84 26 ff ff ff    	je     c0012508 <VAS::allocatePages(int, int)+0x8c>
c00125e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125ea:	89 d3                	mov    ebx,edx
c00125ec:	c1 e0 0c             	shl    eax,0xc
c00125ef:	c1 eb 0a             	shr    ebx,0xa
c00125f2:	01 d0                	add    eax,edx
c00125f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125fa:	c1 e8 0a             	shr    eax,0xa
c00125fd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012603:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012608:	2d 00 00 40 00       	sub    eax,0x400000
c001260d:	39 c3                	cmp    ebx,eax
c001260f:	0f 87 f9 fe ff ff    	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012615:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012618:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261e:	39 d8                	cmp    eax,ebx
c0012620:	73 f3                	jae    c0012615 <VAS::allocatePages(int, int)+0x199>
c0012622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012626:	83 c4 1c             	add    esp,0x1c
c0012629:	5b                   	pop    ebx
c001262a:	5e                   	pop    esi
c001262b:	5f                   	pop    edi
c001262c:	5d                   	pop    ebp
c001262d:	c3                   	ret    
c001262e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012633:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012639:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012640:	0f 84 4d ff ff ff    	je     c0012593 <VAS::allocatePages(int, int)+0x117>
c0012646:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264e:	e9 40 ff ff ff       	jmp    c0012593 <VAS::allocatePages(int, int)+0x117>
c0012653:	90                   	nop

c0012654 <VAS::setCPUSpecific(unsigned long)>:
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	6a 05                	push   0x5
c0012659:	68 00 00 40 c2       	push   0xc2400000
c001265e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012666:	e8 11 fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001266b:	83 c4 1c             	add    esp,0x1c
c001266e:	c3                   	ret    
c001266f:	90                   	nop

c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012670:	55                   	push   ebp
c0012671:	57                   	push   edi
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	83 ec 1c             	sub    esp,0x1c
c0012677:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001267c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012680:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012686:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001268a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012690:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012694:	83 e0 01             	and    eax,0x1
c0012697:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001269b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269f:	85 c0                	test   eax,eax
c00126a1:	7e 39                	jle    c00126dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	c1 e0 0c             	shl    eax,0xc
c00126ac:	01 f0                	add    eax,esi
c00126ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b2:	55                   	push   ebp
c00126b3:	53                   	push   ebx
c00126b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b8:	29 f0                	sub    eax,esi
c00126ba:	01 d8                	add    eax,ebx
c00126bc:	50                   	push   eax
c00126bd:	57                   	push   edi
c00126be:	e8 b9 fc ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126cb:	74 03                	je     c00126d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126da:	75 d6                	jne    c00126b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126dc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126e1:	75 10                	jne    c00126f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126e3:	0f 20 d8             	mov    eax,cr3
c00126e6:	0f 22 d8             	mov    cr3,eax
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	89 f0                	mov    eax,esi
c00126ee:	5b                   	pop    ebx
c00126ef:	5e                   	pop    esi
c00126f0:	5f                   	pop    edi
c00126f1:	5d                   	pop    ebp
c00126f2:	c3                   	ret    
c00126f3:	89 f3                	mov    ebx,esi
c00126f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f9:	c1 eb 0a             	shr    ebx,0xa
c00126fc:	c1 e0 0c             	shl    eax,0xc
c00126ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012705:	01 f0                	add    eax,esi
c0012707:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001270d:	c1 e8 0a             	shr    eax,0xa
c0012710:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012715:	2d 00 00 40 00       	sub    eax,0x400000
c001271a:	39 c3                	cmp    ebx,eax
c001271c:	77 cb                	ja     c00126e9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012721:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012727:	39 d8                	cmp    eax,ebx
c0012729:	73 f3                	jae    c001271e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001272b:	83 c4 1c             	add    esp,0x1c
c001272e:	89 f0                	mov    eax,esi
c0012730:	5b                   	pop    ebx
c0012731:	5e                   	pop    esi
c0012732:	5f                   	pop    edi
c0012733:	5d                   	pop    ebp
c0012734:	c3                   	ret    
c0012735:	90                   	nop

c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012736:	55                   	push   ebp
c0012737:	57                   	push   edi
c0012738:	56                   	push   esi
c0012739:	53                   	push   ebx
c001273a:	83 ec 1c             	sub    esp,0x1c
c001273d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012741:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012745:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012749:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012752:	75 4a                	jne    c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012754:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012758:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001275b:	c1 eb 16             	shr    ebx,0x16
c001275e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012765:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012769:	74 4d                	je     c00127b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001276b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012773:	c1 e8 0a             	shr    eax,0xa
c0012776:	80 fa 01             	cmp    dl,0x1
c0012779:	19 d2                	sbb    edx,edx
c001277b:	c1 e3 0c             	shl    ebx,0xc
c001277e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012782:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012788:	25 fc 0f 00 00       	and    eax,0xffc
c001278d:	01 d8                	add    eax,ebx
c001278f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012796:	83 c4 1c             	add    esp,0x1c
c0012799:	5b                   	pop    ebx
c001279a:	5e                   	pop    esi
c001279b:	5f                   	pop    edi
c001279c:	5d                   	pop    ebp
c001279d:	c3                   	ret    
c001279e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	68 c8 a7 02 c0       	push   0xc002a7c8
c00127aa:	e8 36 7f 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b6:	eb 9c                	jmp    c0012754 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127bc:	e8 24 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00127c1:	89 c5                	mov    ebp,eax
c00127c3:	e8 78 f6 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cf:	6a 01                	push   0x1
c00127d1:	e8 cf f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c00127d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127dd:	6a 01                	push   0x1
c00127df:	50                   	push   eax
c00127e0:	55                   	push   ebp
c00127e1:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127eb:	51                   	push   ecx
c00127ec:	e8 7f fe ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127f1:	83 c4 1c             	add    esp,0x1c
c00127f4:	68 00 10 00 00       	push   0x1000
c00127f9:	6a 00                	push   0x0
c00127fb:	50                   	push   eax
c00127fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012800:	e8 73 df fe ff       	call   c0000778 <memset>
c0012805:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012809:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280c:	e8 04 f8 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0012811:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001281a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281e:	e9 48 ff ff ff       	jmp    c001276b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012823:	90                   	nop

c0012824 <VAS::VAS(bool)>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 28             	sub    esp,0x28
c0012828:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001282c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012843:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012846:	e8 9a d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001284b:	89 c2                	mov    edx,eax
c001284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012851:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012854:	e8 e7 f5 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012859:	89 c3                	mov    ebx,eax
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	6a 01                	push   0x1
c0012860:	e8 40 f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	89 c2                	mov    edx,eax
c001286a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012871:	83 ec 0c             	sub    esp,0xc
c0012874:	6a 03                	push   0x3
c0012876:	6a 01                	push   0x1
c0012878:	52                   	push   edx
c0012879:	50                   	push   eax
c001287a:	53                   	push   ebx
c001287b:	e8 f0 fd ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012880:	83 c4 20             	add    esp,0x20
c0012883:	89 c2                	mov    edx,eax
c0012885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012889:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001288c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012894:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001289c:	7f 1c                	jg     c00128ba <VAS::VAS(bool)+0x96>
c001289e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a9:	c1 e2 02             	shl    edx,0x2
c00128ac:	01 d0                	add    eax,edx
c00128ae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b8:	eb da                	jmp    c0012894 <VAS::VAS(bool)+0x70>
c00128ba:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128c2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128ca:	7f 7a                	jg     c0012946 <VAS::VAS(bool)+0x122>
c00128cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d0:	2d 00 02 00 00       	sub    eax,0x200
c00128d5:	c1 e0 0c             	shl    eax,0xc
c00128d8:	83 c8 03             	or     eax,0x3
c00128db:	89 c2                	mov    edx,eax
c00128dd:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ee:	83 e0 10             	and    eax,0x10
c00128f1:	84 c0                	test   al,al
c00128f3:	74 07                	je     c00128fc <VAS::VAS(bool)+0xd8>
c00128f5:	b8 00 01 00 00       	mov    eax,0x100
c00128fa:	eb 05                	jmp    c0012901 <VAS::VAS(bool)+0xdd>
c00128fc:	b8 00 00 00 00       	mov    eax,0x0
c0012901:	09 d0                	or     eax,edx
c0012903:	89 c1                	mov    ecx,eax
c0012905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012910:	c1 e2 02             	shl    edx,0x2
c0012913:	01 d0                	add    eax,edx
c0012915:	89 ca                	mov    edx,ecx
c0012917:	89 10                	mov    DWORD PTR [eax],edx
c0012919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001291d:	2d 40 03 00 00       	sub    eax,0x340
c0012922:	83 f8 7f             	cmp    eax,0x7f
c0012925:	77 16                	ja     c001293d <VAS::VAS(bool)+0x119>
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012932:	c1 e2 02             	shl    edx,0x2
c0012935:	01 d0                	add    eax,edx
c0012937:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001293d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012941:	e9 7c ff ff ff       	jmp    c00128c2 <VAS::VAS(bool)+0x9e>
c0012946:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001294b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012951:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012957:	83 e0 10             	and    eax,0x10
c001295a:	84 c0                	test   al,al
c001295c:	74 07                	je     c0012965 <VAS::VAS(bool)+0x141>
c001295e:	b8 03 41 00 00       	mov    eax,0x4103
c0012963:	eb 05                	jmp    c001296a <VAS::VAS(bool)+0x146>
c0012965:	b8 03 40 00 00       	mov    eax,0x4003
c001296a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012971:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012977:	89 02                	mov    DWORD PTR [edx],eax
c0012979:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001297e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	50                   	push   eax
c001298e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012992:	e8 bd fc ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129a1:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00129a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b2:	83 e0 10             	and    eax,0x10
c00129b5:	84 c0                	test   al,al
c00129b7:	74 07                	je     c00129c0 <VAS::VAS(bool)+0x19c>
c00129b9:	b8 00 01 00 00       	mov    eax,0x100
c00129be:	eb 05                	jmp    c00129c5 <VAS::VAS(bool)+0x1a1>
c00129c0:	b8 00 00 00 00       	mov    eax,0x0
c00129c5:	09 c2                	or     edx,eax
c00129c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ce:	05 fc 0f 00 00       	add    eax,0xffc
c00129d3:	83 ca 03             	or     edx,0x3
c00129d6:	89 10                	mov    DWORD PTR [eax],edx
c00129d8:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00129dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e3:	83 ec 0c             	sub    esp,0xc
c00129e6:	50                   	push   eax
c00129e7:	e8 5e 1d 00 00       	call   c001474a <Device::getName()>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	83 ec 08             	sub    esp,0x8
c00129f2:	68 1f a9 02 c0       	push   0xc002a91f
c00129f7:	50                   	push   eax
c00129f8:	e8 c3 de fe ff       	call   c00008c0 <strcmp>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	85 c0                	test   eax,eax
c0012a02:	0f 94 c0             	sete   al
c0012a05:	84 c0                	test   al,al
c0012a07:	74 70                	je     c0012a79 <VAS::VAS(bool)+0x255>
c0012a09:	e8 af b4 00 00       	call   c001debd <disableIRQs()>
c0012a0e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012a13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a19:	05 7c 09 00 00       	add    eax,0x97c
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 95 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2f:	89 c3                	mov    ebx,eax
c0012a31:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0012a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3c:	05 7c 09 00 00       	add    eax,0x97c
c0012a41:	83 ec 0c             	sub    esp,0xc
c0012a44:	50                   	push   eax
c0012a45:	e8 72 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	83 ec 08             	sub    esp,0x8
c0012a50:	50                   	push   eax
c0012a51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a55:	e8 9c f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012a5a:	83 c4 10             	add    esp,0x10
c0012a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a64:	6a 11                	push   0x11
c0012a66:	53                   	push   ebx
c0012a67:	50                   	push   eax
c0012a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6c:	e8 0b f9 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	e8 52 b4 00 00       	call   c001decb <enableIRQs()>
c0012a79:	90                   	nop
c0012a7a:	83 c4 28             	add    esp,0x28
c0012a7d:	5b                   	pop    ebx
c0012a7e:	c3                   	ret    
c0012a7f:	90                   	nop

c0012a80 <VAS::evict(unsigned long)>:
c0012a80:	55                   	push   ebp
c0012a81:	57                   	push   edi
c0012a82:	56                   	push   esi
c0012a83:	53                   	push   ebx
c0012a84:	83 ec 1c             	sub    esp,0x1c
c0012a87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a93:	e8 42 b4 00 00       	call   c001deda <lockScheduler()>
c0012a98:	e8 49 f2 ff ff       	call   c0011ce6 <Virt::allocateSwapfilePage()>
c0012a9d:	89 c7                	mov    edi,eax
c0012a9f:	a1 0c d5 02 c0       	mov    eax,ds:0xc002d50c
c0012aa4:	85 c0                	test   eax,eax
c0012aa6:	7e 3d                	jle    c0012ae5 <VAS::evict(unsigned long)+0x65>
c0012aa8:	89 ee                	mov    esi,ebp
c0012aaa:	31 db                	xor    ebx,ebx
c0012aac:	83 ec 0c             	sub    esp,0xc
c0012aaf:	57                   	push   edi
c0012ab0:	e8 1f f2 ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab8:	01 d8                	add    eax,ebx
c0012aba:	6a 01                	push   0x1
c0012abc:	31 d2                	xor    edx,edx
c0012abe:	43                   	inc    ebx
c0012abf:	52                   	push   edx
c0012ac0:	81 c6 00 02 00 00    	add    esi,0x200
c0012ac6:	50                   	push   eax
c0012ac7:	0f be 05 18 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d518
c0012ace:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c0012ad5:	e8 e6 3d 00 00       	call   c00168c0 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ada:	83 c4 20             	add    esp,0x20
c0012add:	39 1d 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,ebx
c0012ae3:	7f c7                	jg     c0012aac <VAS::evict(unsigned long)+0x2c>
c0012ae5:	83 ec 08             	sub    esp,0x8
c0012ae8:	c1 e7 0b             	shl    edi,0xb
c0012aeb:	55                   	push   ebp
c0012aec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af0:	e8 01 f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012af5:	89 c3                	mov    ebx,eax
c0012af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012af9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b01:	e8 55 d3 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012b06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b08:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b0e:	09 d7                	or     edi,edx
c0012b10:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b12:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0012b17:	40                   	inc    eax
c0012b18:	a3 e4 e6 02 c0       	mov    ds:0xc002e6e4,eax
c0012b1d:	0f 20 da             	mov    edx,cr3
c0012b20:	0f 22 da             	mov    cr3,edx
c0012b23:	83 c4 0c             	add    esp,0xc
c0012b26:	50                   	push   eax
c0012b27:	55                   	push   ebp
c0012b28:	68 2d a9 02 c0       	push   0xc002a92d
c0012b2d:	e8 06 05 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012b32:	83 c4 2c             	add    esp,0x2c
c0012b35:	5b                   	pop    ebx
c0012b36:	5e                   	pop    esi
c0012b37:	5f                   	pop    edi
c0012b38:	5d                   	pop    ebp
c0012b39:	e9 9e b3 00 00       	jmp    c001dedc <unlockScheduler()>

c0012b3e <VAS::scanForEviction(int, int)>:
c0012b3e:	55                   	push   ebp
c0012b3f:	31 ed                	xor    ebp,ebp
c0012b41:	57                   	push   edi
c0012b42:	56                   	push   esi
c0012b43:	be 00 00 40 00       	mov    esi,0x400000
c0012b48:	53                   	push   ebx
c0012b49:	83 ec 28             	sub    esp,0x28
c0012b4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012b50:	68 42 a9 02 c0       	push   0xc002a942
c0012b55:	e8 de 04 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	ff 05 f0 e6 02 c0    	inc    DWORD PTR ds:0xc002e6f0
c0012b63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b6b:	eb 11                	jmp    c0012b7e <VAS::scanForEviction(int, int)+0x40>
c0012b6d:	83 c5 04             	add    ebp,0x4
c0012b70:	81 c6 00 00 40 00    	add    esi,0x400000
c0012b76:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c0012b7c:	74 76                	je     c0012bf4 <VAS::scanForEviction(int, int)+0xb6>
c0012b7e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012b81:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012b85:	74 e6                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	8d 9e 00 00 c0 ff    	lea    ebx,[esi-0x400000]
c0012b90:	68 5b a9 02 c0       	push   0xc002a95b
c0012b95:	e8 9e 04 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	eb 0a                	jmp    c0012ba9 <VAS::scanForEviction(int, int)+0x6b>
c0012b9f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ba5:	39 de                	cmp    esi,ebx
c0012ba7:	74 c4                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012ba9:	83 ec 08             	sub    esp,0x8
c0012bac:	53                   	push   ebx
c0012bad:	57                   	push   edi
c0012bae:	e8 43 f4 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bb8:	89 d1                	mov    ecx,edx
c0012bba:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012bc0:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012bc6:	75 d7                	jne    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bc8:	f6 c2 01             	test   dl,0x1
c0012bcb:	74 d2                	je     c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bcd:	f6 c2 40             	test   dl,0x40
c0012bd0:	74 07                	je     c0012bd9 <VAS::scanForEviction(int, int)+0x9b>
c0012bd2:	83 e2 bf             	and    edx,0xffffffbf
c0012bd5:	89 10                	mov    DWORD PTR [eax],edx
c0012bd7:	eb c6                	jmp    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bd9:	83 ec 08             	sub    esp,0x8
c0012bdc:	53                   	push   ebx
c0012bdd:	57                   	push   edi
c0012bde:	e8 9d fe ff ff       	call   c0012a80 <VAS::evict(unsigned long)>
c0012be3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012bf2:	75 ab                	jne    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bf4:	83 c4 1c             	add    esp,0x1c
c0012bf7:	5b                   	pop    ebx
c0012bf8:	5e                   	pop    esi
c0012bf9:	5f                   	pop    edi
c0012bfa:	5d                   	pop    ebp
c0012bfb:	c3                   	ret    

c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bfc:	55                   	push   ebp
c0012bfd:	57                   	push   edi
c0012bfe:	56                   	push   esi
c0012bff:	53                   	push   ebx
c0012c00:	83 ec 14             	sub    esp,0x14
c0012c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c07:	68 66 a9 02 c0       	push   0xc002a966
c0012c0c:	e8 27 04 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c11:	c7 04 24 70 a9 02 c0 	mov    DWORD PTR [esp],0xc002a970
c0012c18:	e8 1b 04 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c1d:	e8 b8 b2 00 00       	call   c001deda <lockScheduler()>
c0012c22:	c7 04 24 74 a9 02 c0 	mov    DWORD PTR [esp],0xc002a974
c0012c29:	e8 0a 04 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c2e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012c32:	c7 04 24 78 a9 02 c0 	mov    DWORD PTR [esp],0xc002a978
c0012c39:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012c3f:	e8 f4 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c44:	c7 04 24 7c a9 02 c0 	mov    DWORD PTR [esp],0xc002a97c
c0012c4b:	e8 e8 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c50:	83 c4 10             	add    esp,0x10
c0012c53:	85 ff                	test   edi,edi
c0012c55:	74 52                	je     c0012ca9 <VAS::tryLoadBackOffDisk(unsigned long)+0xad>
c0012c57:	83 ec 08             	sub    esp,0x8
c0012c5a:	57                   	push   edi
c0012c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c5f:	e8 92 f3 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012c64:	c7 04 24 91 a9 02 c0 	mov    DWORD PTR [esp],0xc002a991
c0012c6b:	89 c3                	mov    ebx,eax
c0012c6d:	e8 c6 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	85 db                	test   ebx,ebx
c0012c77:	74 05                	je     c0012c7e <VAS::tryLoadBackOffDisk(unsigned long)+0x82>
c0012c79:	f6 03 01             	test   BYTE PTR [ebx],0x1
c0012c7c:	74 4a                	je     c0012cc8 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	68 ba a9 02 c0       	push   0xc002a9ba
c0012c86:	e8 ad 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c8b:	e8 4c b2 00 00       	call   c001dedc <unlockScheduler()>
c0012c90:	c7 04 24 be a9 02 c0 	mov    DWORD PTR [esp],0xc002a9be
c0012c97:	e8 9c 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	31 c0                	xor    eax,eax
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	5b                   	pop    ebx
c0012ca5:	5e                   	pop    esi
c0012ca6:	5f                   	pop    edi
c0012ca7:	5d                   	pop    ebp
c0012ca8:	c3                   	ret    
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	68 80 a9 02 c0       	push   0xc002a980
c0012cb1:	e8 82 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012cb6:	e8 21 b2 00 00       	call   c001dedc <unlockScheduler()>
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	31 c0                	xor    eax,eax
c0012cc0:	83 c4 0c             	add    esp,0xc
c0012cc3:	5b                   	pop    ebx
c0012cc4:	5e                   	pop    esi
c0012cc5:	5f                   	pop    edi
c0012cc6:	5d                   	pop    ebp
c0012cc7:	c3                   	ret    
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	68 95 a9 02 c0       	push   0xc002a995
c0012cd0:	e8 63 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012cd5:	c6 05 a0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a0,0x1
c0012cdc:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012cde:	e8 02 d2 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012ce3:	c1 ed 0b             	shr    ebp,0xb
c0012ce6:	89 c6                	mov    esi,eax
c0012ce8:	c7 04 24 99 a9 02 c0 	mov    DWORD PTR [esp],0xc002a999
c0012cef:	c6 05 a0 e5 02 c0 00 	mov    BYTE PTR ds:0xc002e5a0,0x0
c0012cf6:	e8 3d 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cfd:	25 ff 0f 00 00       	and    eax,0xfff
c0012d02:	09 f0                	or     eax,esi
c0012d04:	0d 01 08 00 00       	or     eax,0x801
c0012d09:	89 03                	mov    DWORD PTR [ebx],eax
c0012d0b:	c7 04 24 9d a9 02 c0 	mov    DWORD PTR [esp],0xc002a99d
c0012d12:	e8 21 03 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	8b 15 0c d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d50c
c0012d20:	85 d2                	test   edx,edx
c0012d22:	7e 56                	jle    c0012d7a <VAS::tryLoadBackOffDisk(unsigned long)+0x17e>
c0012d24:	89 fe                	mov    esi,edi
c0012d26:	31 db                	xor    ebx,ebx
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	55                   	push   ebp
c0012d2c:	e8 a3 ef ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012d31:	83 c4 0c             	add    esp,0xc
c0012d34:	01 d8                	add    eax,ebx
c0012d36:	50                   	push   eax
c0012d37:	56                   	push   esi
c0012d38:	68 ec a7 02 c0       	push   0xc002a7ec
c0012d3d:	e8 f6 02 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012d42:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d45:	e8 8a ef ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012d4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d4d:	01 d8                	add    eax,ebx
c0012d4f:	6a 01                	push   0x1
c0012d51:	31 d2                	xor    edx,edx
c0012d53:	43                   	inc    ebx
c0012d54:	52                   	push   edx
c0012d55:	81 c6 00 02 00 00    	add    esi,0x200
c0012d5b:	50                   	push   eax
c0012d5c:	0f be 05 18 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d518
c0012d63:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c0012d6a:	e8 e5 3a 00 00       	call   c0016854 <LogicalDisk::read(unsigned long long, int, void*)>
c0012d6f:	83 c4 20             	add    esp,0x20
c0012d72:	39 1d 0c d5 02 c0    	cmp    DWORD PTR ds:0xc002d50c,ebx
c0012d78:	7f ae                	jg     c0012d28 <VAS::tryLoadBackOffDisk(unsigned long)+0x12c>
c0012d7a:	83 ec 0c             	sub    esp,0xc
c0012d7d:	68 a1 a9 02 c0       	push   0xc002a9a1
c0012d82:	e8 b1 02 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012d87:	83 c4 0c             	add    esp,0xc
c0012d8a:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c0012d8f:	48                   	dec    eax
c0012d90:	50                   	push   eax
c0012d91:	a3 e4 e6 02 c0       	mov    ds:0xc002e6e4,eax
c0012d96:	57                   	push   edi
c0012d97:	68 a5 a9 02 c0       	push   0xc002a9a5
c0012d9c:	e8 97 02 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012da1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012da4:	e8 0d ef ff ff       	call   c0011cb6 <Virt::freeSwapfilePage(unsigned long)>
c0012da9:	e8 2e b1 00 00       	call   c001dedc <unlockScheduler()>
c0012dae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012db2:	83 c4 10             	add    esp,0x10
c0012db5:	25 ff 0f 00 00       	and    eax,0xfff
c0012dba:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012dbf:	77 20                	ja     c0012de1 <VAS::tryLoadBackOffDisk(unsigned long)+0x1e5>
c0012dc1:	a1 f4 e6 02 c0       	mov    eax,ds:0xc002e6f4
c0012dc6:	40                   	inc    eax
c0012dc7:	a3 f4 e6 02 c0       	mov    ds:0xc002e6f4,eax
c0012dcc:	83 f8 08             	cmp    eax,0x8
c0012dcf:	74 28                	je     c0012df9 <VAS::tryLoadBackOffDisk(unsigned long)+0x1fd>
c0012dd1:	0f 20 d8             	mov    eax,cr3
c0012dd4:	0f 22 d8             	mov    cr3,eax
c0012dd7:	b0 01                	mov    al,0x1
c0012dd9:	83 c4 0c             	add    esp,0xc
c0012ddc:	5b                   	pop    ebx
c0012ddd:	5e                   	pop    esi
c0012dde:	5f                   	pop    edi
c0012ddf:	5d                   	pop    ebp
c0012de0:	c3                   	ret    
c0012de1:	83 ec 08             	sub    esp,0x8
c0012de4:	81 c7 00 10 00 00    	add    edi,0x1000
c0012dea:	57                   	push   edi
c0012deb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012def:	e8 08 fe ff ff       	call   c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	eb c8                	jmp    c0012dc1 <VAS::tryLoadBackOffDisk(unsigned long)+0x1c5>
c0012df9:	50                   	push   eax
c0012dfa:	6a 08                	push   0x8
c0012dfc:	6a 01                	push   0x1
c0012dfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e02:	e8 37 fd ff ff       	call   c0012b3e <VAS::scanForEviction(int, int)>
c0012e07:	c7 05 f4 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6f4,0x0
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	eb bb                	jmp    c0012dd1 <VAS::tryLoadBackOffDisk(unsigned long)+0x1d5>

c0012e16 <mapVASFirstTime>:
c0012e16:	55                   	push   ebp
c0012e17:	57                   	push   edi
c0012e18:	56                   	push   esi
c0012e19:	53                   	push   ebx
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e22:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012e25:	4a                   	dec    edx
c0012e26:	0f 84 8e 00 00 00    	je     c0012eba <mapVASFirstTime+0xa4>
c0012e2c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012e2f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012e32:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012e37:	c1 e5 15             	shl    ebp,0x15
c0012e3a:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012e3f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012e45:	29 eb                	sub    ebx,ebp
c0012e47:	29 ee                	sub    esi,ebp
c0012e49:	e8 97 d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e4e:	83 ec 0c             	sub    esp,0xc
c0012e51:	68 03 04 00 00       	push   0x403
c0012e56:	6a 01                	push   0x1
c0012e58:	53                   	push   ebx
c0012e59:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e5f:	50                   	push   eax
c0012e60:	57                   	push   edi
c0012e61:	e8 0a f8 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e66:	83 c4 20             	add    esp,0x20
c0012e69:	39 f3                	cmp    ebx,esi
c0012e6b:	75 dc                	jne    c0012e49 <mapVASFirstTime+0x33>
c0012e6d:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e72:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e77:	29 ee                	sub    esi,ebp
c0012e79:	29 e8                	sub    eax,ebp
c0012e7b:	89 c5                	mov    ebp,eax
c0012e7d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e81:	19 db                	sbb    ebx,ebx
c0012e83:	e8 5d d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e88:	83 e3 04             	and    ebx,0x4
c0012e8b:	83 ec 0c             	sub    esp,0xc
c0012e8e:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e94:	53                   	push   ebx
c0012e95:	6a 01                	push   0x1
c0012e97:	56                   	push   esi
c0012e98:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e9e:	50                   	push   eax
c0012e9f:	57                   	push   edi
c0012ea0:	e8 cb f7 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ea5:	83 c4 20             	add    esp,0x20
c0012ea8:	39 f5                	cmp    ebp,esi
c0012eaa:	75 d1                	jne    c0012e7d <mapVASFirstTime+0x67>
c0012eac:	0f 20 d8             	mov    eax,cr3
c0012eaf:	0f 22 d8             	mov    cr3,eax
c0012eb2:	83 c4 0c             	add    esp,0xc
c0012eb5:	5b                   	pop    ebx
c0012eb6:	5e                   	pop    esi
c0012eb7:	5f                   	pop    edi
c0012eb8:	5d                   	pop    ebp
c0012eb9:	c3                   	ret    
c0012eba:	83 ec 0c             	sub    esp,0xc
c0012ebd:	68 c2 a9 02 c0       	push   0xc002a9c2
c0012ec2:	e8 71 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	83 c4 0c             	add    esp,0xc
c0012ecd:	5b                   	pop    ebx
c0012ece:	5e                   	pop    esi
c0012ecf:	5f                   	pop    edi
c0012ed0:	5d                   	pop    ebp
c0012ed1:	c3                   	ret    

c0012ed2 <__cxa_atexit>:
c0012ed2:	31 c0                	xor    eax,eax
c0012ed4:	c3                   	ret    

c0012ed5 <__cxa_finalize>:
c0012ed5:	c3                   	ret    

c0012ed6 <__stack_chk_fail>:
c0012ed6:	55                   	push   ebp
c0012ed7:	89 e5                	mov    ebp,esp
c0012ed9:	83 ec 14             	sub    esp,0x14
c0012edc:	68 db a9 02 c0       	push   0xc002a9db
c0012ee1:	e8 52 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012ee6:	58                   	pop    eax
c0012ee7:	5a                   	pop    edx
c0012ee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012eeb:	68 2b aa 02 c0       	push   0xc002aa2b
c0012ef0:	e8 43 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012ef5:	59                   	pop    ecx
c0012ef6:	58                   	pop    eax
c0012ef7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012efa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012efd:	68 2b aa 02 c0       	push   0xc002aa2b
c0012f02:	e8 31 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012f07:	5a                   	pop    edx
c0012f08:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f0b:	59                   	pop    ecx
c0012f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f0e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012f11:	68 2b aa 02 c0       	push   0xc002aa2b
c0012f16:	e8 1d 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012f1b:	5a                   	pop    edx
c0012f1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f1f:	59                   	pop    ecx
c0012f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f22:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f24:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012f27:	68 2b aa 02 c0       	push   0xc002aa2b
c0012f2c:	e8 07 01 00 00       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0012f31:	c7 04 24 33 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa33
c0012f38:	e8 a8 77 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0012f3d:	83 c4 10             	add    esp,0x10
c0012f40:	c9                   	leave  
c0012f41:	c3                   	ret    

c0012f42 <__cxa_pure_virtual>:
c0012f42:	83 ec 18             	sub    esp,0x18
c0012f45:	68 4b aa 02 c0       	push   0xc002aa4b
c0012f4a:	e8 96 77 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0012f4f:	83 c4 1c             	add    esp,0x1c
c0012f52:	c3                   	ret    

c0012f53 <operator new[](unsigned long)>:
c0012f53:	e9 eb c8 ff ff       	jmp    c000f843 <malloc>

c0012f58 <operator delete(void*, unsigned long)>:
c0012f58:	e9 06 c9 ff ff       	jmp    c000f863 <rfree>

c0012f5d <operator delete[](void*)>:
c0012f5d:	e9 01 c9 ff ff       	jmp    c000f863 <rfree>

c0012f62 <operator delete[](void*, unsigned long)>:
c0012f62:	e9 fc c8 ff ff       	jmp    c000f863 <rfree>

c0012f67 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f67:	57                   	push   edi
c0012f68:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f6d:	56                   	push   esi
c0012f6e:	be 60 aa 02 c0       	mov    esi,0xc002aa60
c0012f73:	53                   	push   ebx
c0012f74:	83 ec 40             	sub    esp,0x40
c0012f77:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f7b:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f7f:	fc                   	cld    
c0012f80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f82:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f86:	83 f9 3e             	cmp    ecx,0x3e
c0012f89:	7e 05                	jle    c0012f90 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f8b:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f90:	89 df                	mov    edi,ebx
c0012f92:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f96:	eb 02                	jmp    c0012f9a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f98:	89 c7                	mov    edi,eax
c0012f9a:	31 d2                	xor    edx,edx
c0012f9c:	46                   	inc    esi
c0012f9d:	89 f8                	mov    eax,edi
c0012f9f:	f7 f1                	div    ecx
c0012fa1:	39 cf                	cmp    edi,ecx
c0012fa3:	73 f3                	jae    c0012f98 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012fa5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012fa8:	eb 02                	jmp    c0012fac <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012faa:	89 c3                	mov    ebx,eax
c0012fac:	31 d2                	xor    edx,edx
c0012fae:	4e                   	dec    esi
c0012faf:	89 d8                	mov    eax,ebx
c0012fb1:	f7 f1                	div    ecx
c0012fb3:	39 cb                	cmp    ebx,ecx
c0012fb5:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012fb9:	88 16                	mov    BYTE PTR [esi],dl
c0012fbb:	73 ed                	jae    c0012faa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012fbd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fc1:	83 c4 40             	add    esp,0x40
c0012fc4:	5b                   	pop    ebx
c0012fc5:	5e                   	pop    esi
c0012fc6:	5f                   	pop    edi
c0012fc7:	c3                   	ret    

c0012fc8 <Dbg::logc(char)>:
c0012fc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fcc:	ba fd 03 00 00       	mov    edx,0x3fd
c0012fd1:	ec                   	in     al,dx
c0012fd2:	a8 20                	test   al,0x20
c0012fd4:	74 fb                	je     c0012fd1 <Dbg::logc(char)+0x9>
c0012fd6:	ba f8 03 00 00       	mov    edx,0x3f8
c0012fdb:	88 c8                	mov    al,cl
c0012fdd:	ee                   	out    dx,al
c0012fde:	c3                   	ret    

c0012fdf <Dbg::logs(char*)>:
c0012fdf:	53                   	push   ebx
c0012fe0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012fe4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fe7:	84 c0                	test   al,al
c0012fe9:	74 0f                	je     c0012ffa <Dbg::logs(char*)+0x1b>
c0012feb:	50                   	push   eax
c0012fec:	43                   	inc    ebx
c0012fed:	e8 d6 ff ff ff       	call   c0012fc8 <Dbg::logc(char)>
c0012ff2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ff5:	5a                   	pop    edx
c0012ff6:	84 c0                	test   al,al
c0012ff8:	75 f1                	jne    c0012feb <Dbg::logs(char*)+0xc>
c0012ffa:	5b                   	pop    ebx
c0012ffb:	c3                   	ret    

c0012ffc <Dbg::logWriteInt(unsigned int)>:
c0012ffc:	83 ec 10             	sub    esp,0x10
c0012fff:	6a 0a                	push   0xa
c0013001:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013005:	50                   	push   eax
c0013006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300a:	e8 58 ff ff ff       	call   c0012f67 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001300f:	50                   	push   eax
c0013010:	e8 ca ff ff ff       	call   c0012fdf <Dbg::logs(char*)>
c0013015:	83 c4 20             	add    esp,0x20
c0013018:	c3                   	ret    

c0013019 <Dbg::logWriteIntBase(unsigned int, int)>:
c0013019:	83 ec 10             	sub    esp,0x10
c001301c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013020:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013024:	50                   	push   eax
c0013025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013029:	e8 39 ff ff ff       	call   c0012f67 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001302e:	50                   	push   eax
c001302f:	e8 ab ff ff ff       	call   c0012fdf <Dbg::logs(char*)>
c0013034:	83 c4 20             	add    esp,0x20
c0013037:	c3                   	ret    

c0013038 <Dbg::kprintf(char const*, ...)>:
c0013038:	55                   	push   ebp
c0013039:	57                   	push   edi
c001303a:	56                   	push   esi
c001303b:	53                   	push   ebx
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013043:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013047:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001304b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001304e:	84 c0                	test   al,al
c0013050:	74 4a                	je     c001309c <Dbg::kprintf(char const*, ...)+0x64>
c0013052:	31 db                	xor    ebx,ebx
c0013054:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013057:	3c 25                	cmp    al,0x25
c0013059:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001305c:	0f 85 e4 00 00 00    	jne    c0013146 <Dbg::kprintf(char const*, ...)+0x10e>
c0013062:	83 c3 02             	add    ebx,0x2
c0013065:	8a 07                	mov    al,BYTE PTR [edi]
c0013067:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001306a:	83 e8 25             	sub    eax,0x25
c001306d:	3c 53                	cmp    al,0x53
c001306f:	0f 87 ba 00 00 00    	ja     c001312f <Dbg::kprintf(char const*, ...)+0xf7>
c0013075:	0f b6 c0             	movzx  eax,al
c0013078:	ff 24 85 a0 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5560]
c001307f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013083:	89 c8                	mov    eax,ecx
c0013085:	83 c1 04             	add    ecx,0x4
c0013088:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001308c:	ff 30                	push   DWORD PTR [eax]
c001308e:	e8 4c ff ff ff       	call   c0012fdf <Dbg::logs(char*)>
c0013093:	58                   	pop    eax
c0013094:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0013098:	84 c0                	test   al,al
c001309a:	75 b8                	jne    c0013054 <Dbg::kprintf(char const*, ...)+0x1c>
c001309c:	83 c4 0c             	add    esp,0xc
c001309f:	5b                   	pop    ebx
c00130a0:	5e                   	pop    esi
c00130a1:	5f                   	pop    edi
c00130a2:	5d                   	pop    ebp
c00130a3:	c3                   	ret    
c00130a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130a8:	89 d0                	mov    eax,edx
c00130aa:	83 c2 04             	add    edx,0x4
c00130ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130b1:	ff 30                	push   DWORD PTR [eax]
c00130b3:	e8 44 ff ff ff       	call   c0012ffc <Dbg::logWriteInt(unsigned int)>
c00130b8:	58                   	pop    eax
c00130b9:	eb d9                	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c00130bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130bf:	89 d0                	mov    eax,edx
c00130c1:	83 c2 04             	add    edx,0x4
c00130c4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00130c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130cb:	50                   	push   eax
c00130cc:	e8 f7 fe ff ff       	call   c0012fc8 <Dbg::logc(char)>
c00130d1:	58                   	pop    eax
c00130d2:	eb c0                	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c00130d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130d8:	89 c8                	mov    eax,ecx
c00130da:	83 c1 04             	add    ecx,0x4
c00130dd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130e1:	ff 30                	push   DWORD PTR [eax]
c00130e3:	e8 14 ff ff ff       	call   c0012ffc <Dbg::logWriteInt(unsigned int)>
c00130e8:	5f                   	pop    edi
c00130e9:	eb a9                	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c00130eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130ef:	89 c8                	mov    eax,ecx
c00130f1:	83 c1 04             	add    ecx,0x4
c00130f4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130f8:	6a 10                	push   0x10
c00130fa:	ff 30                	push   DWORD PTR [eax]
c00130fc:	e8 18 ff ff ff       	call   c0013019 <Dbg::logWriteIntBase(unsigned int, int)>
c0013101:	59                   	pop    ecx
c0013102:	5f                   	pop    edi
c0013103:	eb 8f                	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c0013105:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013109:	89 d0                	mov    eax,edx
c001310b:	83 c2 08             	add    edx,0x8
c001310e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013112:	6a 10                	push   0x10
c0013114:	ff 30                	push   DWORD PTR [eax]
c0013116:	e8 fe fe ff ff       	call   c0013019 <Dbg::logWriteIntBase(unsigned int, int)>
c001311b:	58                   	pop    eax
c001311c:	5a                   	pop    edx
c001311d:	e9 72 ff ff ff       	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c0013122:	6a 25                	push   0x25
c0013124:	e8 9f fe ff ff       	call   c0012fc8 <Dbg::logc(char)>
c0013129:	58                   	pop    eax
c001312a:	e9 65 ff ff ff       	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c001312f:	6a 25                	push   0x25
c0013131:	e8 92 fe ff ff       	call   c0012fc8 <Dbg::logc(char)>
c0013136:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013139:	50                   	push   eax
c001313a:	e8 89 fe ff ff       	call   c0012fc8 <Dbg::logc(char)>
c001313f:	5a                   	pop    edx
c0013140:	59                   	pop    ecx
c0013141:	e9 4e ff ff ff       	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>
c0013146:	50                   	push   eax
c0013147:	89 eb                	mov    ebx,ebp
c0013149:	e8 7a fe ff ff       	call   c0012fc8 <Dbg::logc(char)>
c001314e:	89 fd                	mov    ebp,edi
c0013150:	58                   	pop    eax
c0013151:	e9 3e ff ff ff       	jmp    c0013094 <Dbg::kprintf(char const*, ...)+0x5c>

c0013156 <File::read(unsigned long long, void*, int*)>:
c0013156:	53                   	push   ebx
c0013157:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001315b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001315f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013166:	3c 19                	cmp    al,0x19
c0013168:	77 35                	ja     c001319f <File::read(unsigned long long, void*, int*)+0x49>
c001316a:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0013171:	85 c0                	test   eax,eax
c0013173:	74 2a                	je     c001319f <File::read(unsigned long long, void*, int*)+0x49>
c0013175:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001317b:	85 c0                	test   eax,eax
c001317d:	74 20                	je     c001319f <File::read(unsigned long long, void*, int*)+0x49>
c001317f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013183:	74 21                	je     c00131a6 <File::read(unsigned long long, void*, int*)+0x50>
c0013185:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013187:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001318b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013191:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013199:	5b                   	pop    ebx
c001319a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001319d:	ff e0                	jmp    eax
c001319f:	b8 0b 00 00 00       	mov    eax,0xb
c00131a4:	eb 05                	jmp    c00131ab <File::read(unsigned long long, void*, int*)+0x55>
c00131a6:	b8 05 00 00 00       	mov    eax,0x5
c00131ab:	5b                   	pop    ebx
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <File::write(unsigned long long, void*, int*)>:
c00131ae:	53                   	push   ebx
c00131af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131b7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131be:	3c 19                	cmp    al,0x19
c00131c0:	77 35                	ja     c00131f7 <File::write(unsigned long long, void*, int*)+0x49>
c00131c2:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c00131c9:	85 c0                	test   eax,eax
c00131cb:	74 2a                	je     c00131f7 <File::write(unsigned long long, void*, int*)+0x49>
c00131cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 20                	je     c00131f7 <File::write(unsigned long long, void*, int*)+0x49>
c00131d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131db:	74 21                	je     c00131fe <File::write(unsigned long long, void*, int*)+0x50>
c00131dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131e3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131f1:	5b                   	pop    ebx
c00131f2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131f5:	ff e0                	jmp    eax
c00131f7:	b8 0b 00 00 00       	mov    eax,0xb
c00131fc:	eb 05                	jmp    c0013203 <File::write(unsigned long long, void*, int*)+0x55>
c00131fe:	b8 05 00 00 00       	mov    eax,0x5
c0013203:	5b                   	pop    ebx
c0013204:	c3                   	ret    
c0013205:	90                   	nop

c0013206 <Directory::read(unsigned long long, void*, int*)>:
c0013206:	53                   	push   ebx
c0013207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001320b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001320f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013216:	3c 19                	cmp    al,0x19
c0013218:	77 35                	ja     c001324f <Directory::read(unsigned long long, void*, int*)+0x49>
c001321a:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0013221:	85 c0                	test   eax,eax
c0013223:	74 2a                	je     c001324f <Directory::read(unsigned long long, void*, int*)+0x49>
c0013225:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001322b:	85 c0                	test   eax,eax
c001322d:	74 20                	je     c001324f <Directory::read(unsigned long long, void*, int*)+0x49>
c001322f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013233:	74 21                	je     c0013256 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013235:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013237:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001323b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013241:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013245:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013249:	5b                   	pop    ebx
c001324a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001324d:	ff e0                	jmp    eax
c001324f:	b8 0b 00 00 00       	mov    eax,0xb
c0013254:	eb 05                	jmp    c001325b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013256:	b8 05 00 00 00       	mov    eax,0x5
c001325b:	5b                   	pop    ebx
c001325c:	c3                   	ret    
c001325d:	90                   	nop

c001325e <Directory::write(unsigned long long, void*, int*)>:
c001325e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013262:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013269:	b8 0b 00 00 00       	mov    eax,0xb
c001326e:	80 fa 19             	cmp    dl,0x19
c0013271:	77 18                	ja     c001328b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013273:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c001327a:	85 d2                	test   edx,edx
c001327c:	74 0d                	je     c001328b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001327e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013285:	19 c0                	sbb    eax,eax
c0013287:	83 e0 0a             	and    eax,0xa
c001328a:	40                   	inc    eax
c001328b:	c3                   	ret    

c001328c <File::isAtty()>:
c001328c:	31 c0                	xor    eax,eax
c001328e:	c3                   	ret    
c001328f:	90                   	nop

c0013290 <Directory::isAtty()>:
c0013290:	31 c0                	xor    eax,eax
c0013292:	c3                   	ret    
c0013293:	90                   	nop

c0013294 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013294:	b8 0a 00 00 00       	mov    eax,0xa
c0013299:	c3                   	ret    

c001329a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001329a:	b8 0a 00 00 00       	mov    eax,0xa
c001329f:	c3                   	ret    

c00132a0 <File::~File()>:
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c00132a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ac:	89 10                	mov    DWORD PTR [eax],edx
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	83 ec 0c             	sub    esp,0xc
c00132b5:	50                   	push   eax
c00132b6:	e8 89 e6 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	90                   	nop
c00132bf:	83 c4 0c             	add    esp,0xc
c00132c2:	c3                   	ret    
c00132c3:	90                   	nop

c00132c4 <File::~File()>:
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	83 ec 0c             	sub    esp,0xc
c00132ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ce:	e8 cd ff ff ff       	call   c00132a0 <File::~File()>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	83 ec 08             	sub    esp,0x8
c00132d9:	68 14 01 00 00       	push   0x114
c00132de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e2:	e8 71 fc ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00132e7:	83 c4 10             	add    esp,0x10
c00132ea:	83 c4 0c             	add    esp,0xc
c00132ed:	c3                   	ret    

c00132ee <Directory::~Directory()>:
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00132f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fa:	89 10                	mov    DWORD PTR [eax],edx
c00132fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	50                   	push   eax
c0013304:	e8 3b e6 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	90                   	nop
c001330d:	83 c4 0c             	add    esp,0xc
c0013310:	c3                   	ret    
c0013311:	90                   	nop

c0013312 <Directory::~Directory()>:
c0013312:	83 ec 0c             	sub    esp,0xc
c0013315:	83 ec 0c             	sub    esp,0xc
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	e8 cd ff ff ff       	call   c00132ee <Directory::~Directory()>
c0013321:	83 c4 10             	add    esp,0x10
c0013324:	83 ec 08             	sub    esp,0x8
c0013327:	68 14 01 00 00       	push   0x114
c001332c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013330:	e8 23 fc ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0013335:	83 c4 10             	add    esp,0x10
c0013338:	83 c4 0c             	add    esp,0xc
c001333b:	c3                   	ret    

c001333c <Filesystem::Filesystem()>:
c001333c:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0013341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013345:	89 10                	mov    DWORD PTR [eax],edx
c0013347:	8b 15 f8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6f8
c001334d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013351:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013358:	a3 f8 e6 02 c0       	mov    ds:0xc002e6f8,eax
c001335d:	90                   	nop
c001335e:	c3                   	ret    
c001335f:	90                   	nop

c0013360 <Filesystem::~Filesystem()>:
c0013360:	ba f8 ab 02 c0       	mov    edx,0xc002abf8
c0013365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013369:	89 10                	mov    DWORD PTR [eax],edx
c001336b:	90                   	nop
c001336c:	c3                   	ret    
c001336d:	90                   	nop

c001336e <Filesystem::~Filesystem()>:
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013375:	e8 e6 ff ff ff       	call   c0013360 <Filesystem::~Filesystem()>
c001337a:	83 c4 04             	add    esp,0x4
c001337d:	83 ec 08             	sub    esp,0x8
c0013380:	6a 08                	push   0x8
c0013382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013386:	e8 cd fb ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	83 c4 0c             	add    esp,0xc
c0013391:	c3                   	ret    

c0013392 <Fs::getcwd(Process*, char*, int)>:
c0013392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013396:	31 c0                	xor    eax,eax
c0013398:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001339b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001339f:	7d 15                	jge    c00133b6 <Fs::getcwd(Process*, char*, int)+0x24>
c00133a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00133a5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00133ac:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00133af:	84 c9                	test   cl,cl
c00133b1:	74 06                	je     c00133b9 <Fs::getcwd(Process*, char*, int)+0x27>
c00133b3:	40                   	inc    eax
c00133b4:	eb e2                	jmp    c0013398 <Fs::getcwd(Process*, char*, int)+0x6>
c00133b6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00133b9:	31 c0                	xor    eax,eax
c00133bb:	c3                   	ret    

c00133bc <Fs::initVFS()>:
c00133bc:	83 ec 18             	sub    esp,0x18
c00133bf:	6a 08                	push   0x8
c00133c1:	e8 7d c4 ff ff       	call   c000f843 <malloc>
c00133c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00133c9:	e8 80 dc 00 00       	call   c002104e <FAT::FAT()>
c00133ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00133d5:	e8 69 c4 ff ff       	call   c000f843 <malloc>
c00133da:	89 04 24             	mov    DWORD PTR [esp],eax
c00133dd:	e8 c4 ee 00 00       	call   c00222a6 <ISO9660::ISO9660()>
c00133e2:	83 c4 1c             	add    esp,0x1c
c00133e5:	c3                   	ret    

c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00133e6:	55                   	push   ebp
c00133e7:	57                   	push   edi
c00133e8:	56                   	push   esi
c00133e9:	53                   	push   ebx
c00133ea:	81 ec 10 04 00 00    	sub    esp,0x410
c00133f0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133f7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133fe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013405:	68 00 04 00 00       	push   0x400
c001340a:	6a 00                	push   0x0
c001340c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013410:	56                   	push   esi
c0013411:	e8 62 d3 fe ff       	call   c0000778 <memset>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001341d:	75 0b                	jne    c001342a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001341f:	50                   	push   eax
c0013420:	50                   	push   eax
c0013421:	57                   	push   edi
c0013422:	56                   	push   esi
c0013423:	e8 0c d4 fe ff       	call   c0000834 <strcpy>
c0013428:	eb 41                	jmp    c001346b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001342a:	8a 07                	mov    al,BYTE PTR [edi]
c001342c:	3c 5c                	cmp    al,0x5c
c001342e:	74 04                	je     c0013434 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013430:	3c 2f                	cmp    al,0x2f
c0013432:	75 18                	jne    c001344c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013434:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013437:	3c 60                	cmp    al,0x60
c0013439:	7e 03                	jle    c001343e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001343b:	83 e8 20             	sub    eax,0x20
c001343e:	88 04 24             	mov    BYTE PTR [esp],al
c0013441:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013448:	50                   	push   eax
c0013449:	50                   	push   eax
c001344a:	eb 18                	jmp    c0013464 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001344c:	50                   	push   eax
c001344d:	50                   	push   eax
c001344e:	55                   	push   ebp
c001344f:	56                   	push   esi
c0013450:	e8 df d3 fe ff       	call   c0000834 <strcpy>
c0013455:	5a                   	pop    edx
c0013456:	59                   	pop    ecx
c0013457:	68 54 c3 02 c0       	push   0xc002c354
c001345c:	56                   	push   esi
c001345d:	e8 12 d5 fe ff       	call   c0000974 <strcat>
c0013462:	5d                   	pop    ebp
c0013463:	58                   	pop    eax
c0013464:	57                   	push   edi
c0013465:	56                   	push   esi
c0013466:	e8 09 d5 fe ff       	call   c0000974 <strcat>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013471:	3c 60                	cmp    al,0x60
c0013473:	7e 03                	jle    c0013478 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013475:	83 e8 20             	sub    eax,0x20
c0013478:	88 04 24             	mov    BYTE PTR [esp],al
c001347b:	88 03                	mov    BYTE PTR [ebx],al
c001347d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013484:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001348a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001348e:	bf 03 00 00 00       	mov    edi,0x3
c0013493:	b8 03 00 00 00       	mov    eax,0x3
c0013498:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001349b:	84 d2                	test   dl,dl
c001349d:	0f 84 91 00 00 00    	je     c0013534 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00134a3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00134a6:	80 fa 5c             	cmp    dl,0x5c
c00134a9:	74 05                	je     c00134b0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00134ab:	80 fa 2f             	cmp    dl,0x2f
c00134ae:	75 12                	jne    c00134c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00134b0:	89 c5                	mov    ebp,eax
c00134b2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134b7:	74 09                	je     c00134c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00134b9:	40                   	inc    eax
c00134ba:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00134be:	89 cf                	mov    edi,ecx
c00134c0:	eb d6                	jmp    c0013498 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00134c2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00134c7:	75 5b                	jne    c0013524 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134c9:	80 fa 2e             	cmp    dl,0x2e
c00134cc:	75 56                	jne    c0013524 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134ce:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00134d2:	74 19                	je     c00134ed <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00134d4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134d9:	74 53                	je     c001352e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134db:	89 f9                	mov    ecx,edi
c00134dd:	41                   	inc    ecx
c00134de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134e1:	80 fa 2f             	cmp    dl,0x2f
c00134e4:	74 f7                	je     c00134dd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134e6:	80 fa 5c             	cmp    dl,0x5c
c00134e9:	74 f2                	je     c00134dd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134eb:	eb d1                	jmp    c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ed:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134f2:	74 3a                	je     c001352e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134f4:	83 f8 03             	cmp    eax,0x3
c00134f7:	74 c5                	je     c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134f9:	41                   	inc    ecx
c00134fa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134fd:	80 fa 2f             	cmp    dl,0x2f
c0013500:	74 f7                	je     c00134f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013502:	80 fa 5c             	cmp    dl,0x5c
c0013505:	74 f2                	je     c00134f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013507:	48                   	dec    eax
c0013508:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001350c:	75 06                	jne    c0013514 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001350e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013512:	eb f3                	jmp    c0013507 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013514:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013518:	74 07                	je     c0013521 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001351a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001351e:	48                   	dec    eax
c001351f:	eb f3                	jmp    c0013514 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013521:	40                   	inc    eax
c0013522:	eb 9a                	jmp    c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013524:	80 fa 2f             	cmp    dl,0x2f
c0013527:	74 95                	je     c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013529:	80 fa 5c             	cmp    dl,0x5c
c001352c:	74 90                	je     c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001352e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013531:	40                   	inc    eax
c0013532:	eb 8a                	jmp    c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013534:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	53                   	push   ebx
c001353c:	e8 53 d2 fe ff       	call   c0000794 <strlen>
c0013541:	83 c4 10             	add    esp,0x10
c0013544:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013549:	75 26                	jne    c0013571 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001354b:	83 ec 0c             	sub    esp,0xc
c001354e:	53                   	push   ebx
c001354f:	e8 40 d2 fe ff       	call   c0000794 <strlen>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001355c:	74 26                	je     c0013584 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001355e:	83 ec 0c             	sub    esp,0xc
c0013561:	53                   	push   ebx
c0013562:	e8 2d d2 fe ff       	call   c0000794 <strlen>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001356f:	eb c7                	jmp    c0013538 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	53                   	push   ebx
c0013575:	e8 1a d2 fe ff       	call   c0000794 <strlen>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013582:	74 c7                	je     c001354b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013584:	81 c4 0c 04 00 00    	add    esp,0x40c
c001358a:	5b                   	pop    ebx
c001358b:	5e                   	pop    esi
c001358c:	5f                   	pop    edi
c001358d:	5d                   	pop    ebp
c001358e:	c3                   	ret    
c001358f:	90                   	nop

c0013590 <File::File(char const*, Process*)>:
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013597:	83 ec 08             	sub    esp,0x8
c001359a:	6a 00                	push   0x0
c001359c:	50                   	push   eax
c001359d:	e8 c0 e1 ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	ba 5c ac 02 c0       	mov    edx,0xc002ac5c
c00135aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ae:	89 10                	mov    DWORD PTR [eax],edx
c00135b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135be:	83 c0 0d             	add    eax,0xd
c00135c1:	83 ec 04             	sub    esp,0x4
c00135c4:	52                   	push   edx
c00135c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c9:	50                   	push   eax
c00135ca:	e8 17 fe ff ff       	call   c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135d9:	8d 50 bf             	lea    edx,[eax-0x41]
c00135dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00135e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135ee:	90                   	nop
c00135ef:	83 c4 0c             	add    esp,0xc
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <File::open(FileOpenMode)>:
c00135f4:	53                   	push   ebx
c00135f5:	b8 0b 00 00 00       	mov    eax,0xb
c00135fa:	83 ec 08             	sub    esp,0x8
c00135fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013601:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013608:	80 fa 19             	cmp    dl,0x19
c001360b:	77 40                	ja     c001364d <File::open(FileOpenMode)+0x59>
c001360d:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013614:	85 d2                	test   edx,edx
c0013616:	74 35                	je     c001364d <File::open(FileOpenMode)+0x59>
c0013618:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001361e:	85 d2                	test   edx,edx
c0013620:	74 2b                	je     c001364d <File::open(FileOpenMode)+0x59>
c0013622:	b8 06 00 00 00       	mov    eax,0x6
c0013627:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001362b:	75 20                	jne    c001364d <File::open(FileOpenMode)+0x59>
c001362d:	8b 02                	mov    eax,DWORD PTR [edx]
c001362f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013639:	51                   	push   ecx
c001363a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001363d:	51                   	push   ecx
c001363e:	52                   	push   edx
c001363f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013642:	83 c4 10             	add    esp,0x10
c0013645:	85 c0                	test   eax,eax
c0013647:	75 04                	jne    c001364d <File::open(FileOpenMode)+0x59>
c0013649:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001364d:	83 c4 08             	add    esp,0x8
c0013650:	5b                   	pop    ebx
c0013651:	c3                   	ret    

c0013652 <File::close()>:
c0013652:	53                   	push   ebx
c0013653:	b8 0b 00 00 00       	mov    eax,0xb
c0013658:	83 ec 08             	sub    esp,0x8
c001365b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001365f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013666:	80 fa 19             	cmp    dl,0x19
c0013669:	77 41                	ja     c00136ac <File::close()+0x5a>
c001366b:	8b 1c 95 a0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1460]
c0013672:	85 db                	test   ebx,ebx
c0013674:	74 36                	je     c00136ac <File::close()+0x5a>
c0013676:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001367d:	74 2d                	je     c00136ac <File::close()+0x5a>
c001367f:	b8 05 00 00 00       	mov    eax,0x5
c0013684:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013688:	74 22                	je     c00136ac <File::close()+0x5a>
c001368a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001368e:	8b 04 95 a0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1460]
c0013695:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001369b:	53                   	push   ebx
c001369c:	53                   	push   ebx
c001369d:	8b 10                	mov    edx,DWORD PTR [eax]
c001369f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00136a5:	50                   	push   eax
c00136a6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	83 c4 08             	add    esp,0x8
c00136af:	5b                   	pop    ebx
c00136b0:	c3                   	ret    
c00136b1:	90                   	nop

c00136b2 <File::seek(unsigned long long)>:
c00136b2:	56                   	push   esi
c00136b3:	53                   	push   ebx
c00136b4:	b8 0b 00 00 00       	mov    eax,0xb
c00136b9:	51                   	push   ecx
c00136ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136c2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00136c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cd:	80 fa 19             	cmp    dl,0x19
c00136d0:	77 31                	ja     c0013703 <File::seek(unsigned long long)+0x51>
c00136d2:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c00136d9:	85 d2                	test   edx,edx
c00136db:	74 26                	je     c0013703 <File::seek(unsigned long long)+0x51>
c00136dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136e3:	85 d2                	test   edx,edx
c00136e5:	74 1c                	je     c0013703 <File::seek(unsigned long long)+0x51>
c00136e7:	b8 05 00 00 00       	mov    eax,0x5
c00136ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136f0:	74 11                	je     c0013703 <File::seek(unsigned long long)+0x51>
c00136f2:	8b 02                	mov    eax,DWORD PTR [edx]
c00136f4:	53                   	push   ebx
c00136f5:	51                   	push   ecx
c00136f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136fc:	52                   	push   edx
c00136fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	5a                   	pop    edx
c0013704:	5b                   	pop    ebx
c0013705:	5e                   	pop    esi
c0013706:	c3                   	ret    
c0013707:	90                   	nop

c0013708 <File::tell(unsigned long long*)>:
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	b8 0b 00 00 00       	mov    eax,0xb
c0013710:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013714:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001371b:	80 fa 19             	cmp    dl,0x19
c001371e:	77 34                	ja     c0013754 <File::tell(unsigned long long*)+0x4c>
c0013720:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013727:	85 d2                	test   edx,edx
c0013729:	74 29                	je     c0013754 <File::tell(unsigned long long*)+0x4c>
c001372b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013731:	85 d2                	test   edx,edx
c0013733:	74 1f                	je     c0013754 <File::tell(unsigned long long*)+0x4c>
c0013735:	b8 05 00 00 00       	mov    eax,0x5
c001373a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001373e:	74 14                	je     c0013754 <File::tell(unsigned long long*)+0x4c>
c0013740:	50                   	push   eax
c0013741:	8b 02                	mov    eax,DWORD PTR [edx]
c0013743:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013747:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001374d:	52                   	push   edx
c001374e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013751:	83 c4 10             	add    esp,0x10
c0013754:	83 c4 0c             	add    esp,0xc
c0013757:	c3                   	ret    

c0013758 <File::rewind()>:
c0013758:	83 ec 10             	sub    esp,0x10
c001375b:	6a 00                	push   0x0
c001375d:	6a 00                	push   0x0
c001375f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013763:	e8 4a ff ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c0013768:	83 c4 1c             	add    esp,0x1c
c001376b:	c3                   	ret    

c001376c <File::unlink()>:
c001376c:	83 ec 0c             	sub    esp,0xc
c001376f:	b8 0b 00 00 00       	mov    eax,0xb
c0013774:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013778:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001377f:	80 f9 19             	cmp    cl,0x19
c0013782:	77 2f                	ja     c00137b3 <File::unlink()+0x47>
c0013784:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c001378b:	85 c9                	test   ecx,ecx
c001378d:	74 24                	je     c00137b3 <File::unlink()+0x47>
c001378f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013795:	85 c9                	test   ecx,ecx
c0013797:	74 1a                	je     c00137b3 <File::unlink()+0x47>
c0013799:	b8 06 00 00 00       	mov    eax,0x6
c001379e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a2:	75 0f                	jne    c00137b3 <File::unlink()+0x47>
c00137a4:	83 c2 0d             	add    edx,0xd
c00137a7:	50                   	push   eax
c00137a8:	50                   	push   eax
c00137a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ab:	52                   	push   edx
c00137ac:	51                   	push   ecx
c00137ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 c4 0c             	add    esp,0xc
c00137b6:	c3                   	ret    
c00137b7:	90                   	nop

c00137b8 <File::rename(char const*)>:
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	b8 0b 00 00 00       	mov    eax,0xb
c00137c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137cb:	80 f9 19             	cmp    cl,0x19
c00137ce:	77 32                	ja     c0013802 <File::rename(char const*)+0x4a>
c00137d0:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c00137d7:	85 c9                	test   ecx,ecx
c00137d9:	74 27                	je     c0013802 <File::rename(char const*)+0x4a>
c00137db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e1:	85 c9                	test   ecx,ecx
c00137e3:	74 1d                	je     c0013802 <File::rename(char const*)+0x4a>
c00137e5:	b8 06 00 00 00       	mov    eax,0x6
c00137ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137ee:	75 12                	jne    c0013802 <File::rename(char const*)+0x4a>
c00137f0:	83 c2 0d             	add    edx,0xd
c00137f3:	50                   	push   eax
c00137f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137fa:	52                   	push   edx
c00137fb:	51                   	push   ecx
c00137fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137ff:	83 c4 10             	add    esp,0x10
c0013802:	83 c4 0c             	add    esp,0xc
c0013805:	c3                   	ret    

c0013806 <File::chfatattr(unsigned char, unsigned char)>:
c0013806:	57                   	push   edi
c0013807:	b8 0b 00 00 00       	mov    eax,0xb
c001380c:	56                   	push   esi
c001380d:	53                   	push   ebx
c001380e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013812:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013816:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001381d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013821:	80 f9 19             	cmp    cl,0x19
c0013824:	77 37                	ja     c001385d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013826:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c001382d:	85 c9                	test   ecx,ecx
c001382f:	74 2c                	je     c001385d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013831:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013837:	85 c9                	test   ecx,ecx
c0013839:	74 22                	je     c001385d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001383b:	b8 06 00 00 00       	mov    eax,0x6
c0013840:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013844:	75 17                	jne    c001385d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013846:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013848:	89 f0                	mov    eax,esi
c001384a:	83 c2 0d             	add    edx,0xd
c001384d:	0f b6 f0             	movzx  esi,al
c0013850:	0f b6 db             	movzx  ebx,bl
c0013853:	56                   	push   esi
c0013854:	53                   	push   ebx
c0013855:	52                   	push   edx
c0013856:	51                   	push   ecx
c0013857:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	5b                   	pop    ebx
c001385e:	5e                   	pop    esi
c001385f:	5f                   	pop    edi
c0013860:	c3                   	ret    
c0013861:	90                   	nop

c0013862 <File::exists()>:
c0013862:	83 ec 0c             	sub    esp,0xc
c0013865:	31 c0                	xor    eax,eax
c0013867:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001386b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013872:	80 f9 19             	cmp    cl,0x19
c0013875:	77 24                	ja     c001389b <File::exists()+0x39>
c0013877:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c001387e:	85 c9                	test   ecx,ecx
c0013880:	74 19                	je     c001389b <File::exists()+0x39>
c0013882:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013888:	85 c9                	test   ecx,ecx
c001388a:	74 0f                	je     c001389b <File::exists()+0x39>
c001388c:	83 c2 0d             	add    edx,0xd
c001388f:	50                   	push   eax
c0013890:	50                   	push   eax
c0013891:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013893:	52                   	push   edx
c0013894:	51                   	push   ecx
c0013895:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013898:	83 c4 10             	add    esp,0x10
c001389b:	83 c4 0c             	add    esp,0xc
c001389e:	c3                   	ret    
c001389f:	90                   	nop

c00138a0 <File::stat(unsigned long long*, bool*)>:
c00138a0:	56                   	push   esi
c00138a1:	53                   	push   ebx
c00138a2:	50                   	push   eax
c00138a3:	b8 0b 00 00 00       	mov    eax,0xb
c00138a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138bb:	80 f9 19             	cmp    cl,0x19
c00138be:	77 3d                	ja     c00138fd <File::stat(unsigned long long*, bool*)+0x5d>
c00138c0:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c00138c7:	85 c9                	test   ecx,ecx
c00138c9:	74 32                	je     c00138fd <File::stat(unsigned long long*, bool*)+0x5d>
c00138cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138d1:	85 c9                	test   ecx,ecx
c00138d3:	74 28                	je     c00138fd <File::stat(unsigned long long*, bool*)+0x5d>
c00138d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138db:	74 13                	je     c00138f0 <File::stat(unsigned long long*, bool*)+0x50>
c00138dd:	83 ec 04             	sub    esp,0x4
c00138e0:	56                   	push   esi
c00138e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00138e7:	51                   	push   ecx
c00138e8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00138eb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138ee:	eb 0a                	jmp    c00138fa <File::stat(unsigned long long*, bool*)+0x5a>
c00138f0:	53                   	push   ebx
c00138f1:	83 c2 0d             	add    edx,0xd
c00138f4:	56                   	push   esi
c00138f5:	52                   	push   edx
c00138f6:	51                   	push   ecx
c00138f7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138fa:	83 c4 10             	add    esp,0x10
c00138fd:	5a                   	pop    edx
c00138fe:	5b                   	pop    ebx
c00138ff:	5e                   	pop    esi
c0013900:	c3                   	ret    

c0013901 <Fs::setcwd(Process*, char*)>:
c0013901:	55                   	push   ebp
c0013902:	57                   	push   edi
c0013903:	56                   	push   esi
c0013904:	53                   	push   ebx
c0013905:	81 ec 20 02 00 00    	sub    esp,0x220
c001390b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013912:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013918:	57                   	push   edi
c0013919:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013920:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013924:	56                   	push   esi
c0013925:	e8 bc fa ff ff       	call   c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001392a:	89 34 24             	mov    DWORD PTR [esp],esi
c001392d:	e8 62 ce fe ff       	call   c0000794 <strlen>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 f8 02             	cmp    eax,0x2
c0013938:	77 17                	ja     c0013951 <Fs::setcwd(Process*, char*)+0x50>
c001393a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001393f:	83 e8 41             	sub    eax,0x41
c0013942:	83 f8 19             	cmp    eax,0x19
c0013945:	76 24                	jbe    c001396b <Fs::setcwd(Process*, char*)+0x6a>
c0013947:	b8 03 00 00 00       	mov    eax,0x3
c001394c:	e9 e0 00 00 00       	jmp    c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c0013951:	83 ec 0c             	sub    esp,0xc
c0013954:	56                   	push   esi
c0013955:	e8 3a ce fe ff       	call   c0000794 <strlen>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	83 f8 03             	cmp    eax,0x3
c0013960:	75 34                	jne    c0013996 <Fs::setcwd(Process*, char*)+0x95>
c0013962:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013967:	75 2d                	jne    c0013996 <Fs::setcwd(Process*, char*)+0x95>
c0013969:	eb cf                	jmp    c001393a <Fs::setcwd(Process*, char*)+0x39>
c001396b:	8b 14 85 a0 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1460]
c0013972:	b8 05 00 00 00       	mov    eax,0x5
c0013977:	85 d2                	test   edx,edx
c0013979:	0f 84 b2 00 00 00    	je     c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c001397f:	b8 06 00 00 00       	mov    eax,0x6
c0013984:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001398b:	0f 85 92 00 00 00    	jne    c0013a23 <Fs::setcwd(Process*, char*)+0x122>
c0013991:	e9 9b 00 00 00       	jmp    c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c0013996:	83 ec 0c             	sub    esp,0xc
c0013999:	68 14 01 00 00       	push   0x114
c001399e:	e8 a0 be ff ff       	call   c000f843 <malloc>
c00139a3:	83 c4 0c             	add    esp,0xc
c00139a6:	89 c3                	mov    ebx,eax
c00139a8:	55                   	push   ebp
c00139a9:	56                   	push   esi
c00139aa:	50                   	push   eax
c00139ab:	e8 e0 fb ff ff       	call   c0013590 <File::File(char const*, Process*)>
c00139b0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00139b5:	83 c4 0c             	add    esp,0xc
c00139b8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00139bc:	50                   	push   eax
c00139bd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139c1:	50                   	push   eax
c00139c2:	53                   	push   ebx
c00139c3:	e8 d8 fe ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c00139c8:	83 c4 10             	add    esp,0x10
c00139cb:	83 f8 02             	cmp    eax,0x2
c00139ce:	74 04                	je     c00139d4 <Fs::setcwd(Process*, char*)+0xd3>
c00139d0:	85 c0                	test   eax,eax
c00139d2:	74 1c                	je     c00139f0 <Fs::setcwd(Process*, char*)+0xef>
c00139d4:	b8 01 00 00 00       	mov    eax,0x1
c00139d9:	85 db                	test   ebx,ebx
c00139db:	74 54                	je     c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c00139dd:	83 ec 0c             	sub    esp,0xc
c00139e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139e2:	53                   	push   ebx
c00139e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139e6:	83 c4 10             	add    esp,0x10
c00139e9:	b8 01 00 00 00       	mov    eax,0x1
c00139ee:	eb 41                	jmp    c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c00139f0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139f5:	75 1c                	jne    c0013a13 <Fs::setcwd(Process*, char*)+0x112>
c00139f7:	b8 02 00 00 00       	mov    eax,0x2
c00139fc:	85 db                	test   ebx,ebx
c00139fe:	74 31                	je     c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c0013a00:	83 ec 0c             	sub    esp,0xc
c0013a03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a05:	53                   	push   ebx
c0013a06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a09:	83 c4 10             	add    esp,0x10
c0013a0c:	b8 02 00 00 00       	mov    eax,0x2
c0013a11:	eb 1e                	jmp    c0013a31 <Fs::setcwd(Process*, char*)+0x130>
c0013a13:	85 db                	test   ebx,ebx
c0013a15:	74 0c                	je     c0013a23 <Fs::setcwd(Process*, char*)+0x122>
c0013a17:	83 ec 0c             	sub    esp,0xc
c0013a1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a1c:	53                   	push   ebx
c0013a1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a20:	83 c4 10             	add    esp,0x10
c0013a23:	50                   	push   eax
c0013a24:	50                   	push   eax
c0013a25:	56                   	push   esi
c0013a26:	57                   	push   edi
c0013a27:	e8 08 ce fe ff       	call   c0000834 <strcpy>
c0013a2c:	83 c4 10             	add    esp,0x10
c0013a2f:	31 c0                	xor    eax,eax
c0013a31:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013a37:	5b                   	pop    ebx
c0013a38:	5e                   	pop    esi
c0013a39:	5f                   	pop    edi
c0013a3a:	5d                   	pop    ebp
c0013a3b:	c3                   	ret    

c0013a3c <Directory::Directory(char const*, Process*)>:
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a43:	83 ec 08             	sub    esp,0x8
c0013a46:	6a 00                	push   0x0
c0013a48:	50                   	push   eax
c0013a49:	e8 14 dd ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	89 10                	mov    DWORD PTR [eax],edx
c0013a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a60:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6a:	83 c0 0d             	add    eax,0xd
c0013a6d:	83 ec 04             	sub    esp,0x4
c0013a70:	52                   	push   edx
c0013a71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a75:	50                   	push   eax
c0013a76:	e8 6b f9 ff ff       	call   c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a82:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a85:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a96:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a9a:	90                   	nop
c0013a9b:	83 c4 0c             	add    esp,0xc
c0013a9e:	c3                   	ret    
c0013a9f:	90                   	nop

c0013aa0 <Directory::open()>:
c0013aa0:	53                   	push   ebx
c0013aa1:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa6:	83 ec 08             	sub    esp,0x8
c0013aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013aad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013ab4:	80 fa 19             	cmp    dl,0x19
c0013ab7:	77 3d                	ja     c0013af6 <Directory::open()+0x56>
c0013ab9:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013ac0:	85 d2                	test   edx,edx
c0013ac2:	74 32                	je     c0013af6 <Directory::open()+0x56>
c0013ac4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013aca:	85 d2                	test   edx,edx
c0013acc:	74 28                	je     c0013af6 <Directory::open()+0x56>
c0013ace:	b8 06 00 00 00       	mov    eax,0x6
c0013ad3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013ad7:	75 1d                	jne    c0013af6 <Directory::open()+0x56>
c0013ad9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013adf:	50                   	push   eax
c0013ae0:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ae2:	51                   	push   ecx
c0013ae3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013ae6:	51                   	push   ecx
c0013ae7:	52                   	push   edx
c0013ae8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	85 c0                	test   eax,eax
c0013af0:	75 04                	jne    c0013af6 <Directory::open()+0x56>
c0013af2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013af6:	83 c4 08             	add    esp,0x8
c0013af9:	5b                   	pop    ebx
c0013afa:	c3                   	ret    
c0013afb:	90                   	nop

c0013afc <Directory::close()>:
c0013afc:	53                   	push   ebx
c0013afd:	b8 0b 00 00 00       	mov    eax,0xb
c0013b02:	83 ec 08             	sub    esp,0x8
c0013b05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b09:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b10:	80 fa 19             	cmp    dl,0x19
c0013b13:	77 41                	ja     c0013b56 <Directory::close()+0x5a>
c0013b15:	8b 1c 95 a0 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1460]
c0013b1c:	85 db                	test   ebx,ebx
c0013b1e:	74 36                	je     c0013b56 <Directory::close()+0x5a>
c0013b20:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013b27:	74 2d                	je     c0013b56 <Directory::close()+0x5a>
c0013b29:	b8 05 00 00 00       	mov    eax,0x5
c0013b2e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013b32:	74 22                	je     c0013b56 <Directory::close()+0x5a>
c0013b34:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013b38:	8b 04 95 a0 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1460]
c0013b3f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013b45:	53                   	push   ebx
c0013b46:	53                   	push   ebx
c0013b47:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b49:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b4f:	50                   	push   eax
c0013b50:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b53:	83 c4 10             	add    esp,0x10
c0013b56:	83 c4 08             	add    esp,0x8
c0013b59:	5b                   	pop    ebx
c0013b5a:	c3                   	ret    
c0013b5b:	90                   	nop

c0013b5c <Directory::unlink()>:
c0013b5c:	83 ec 0c             	sub    esp,0xc
c0013b5f:	b8 0b 00 00 00       	mov    eax,0xb
c0013b64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b68:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b6f:	80 f9 19             	cmp    cl,0x19
c0013b72:	77 2f                	ja     c0013ba3 <Directory::unlink()+0x47>
c0013b74:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013b7b:	85 c9                	test   ecx,ecx
c0013b7d:	74 24                	je     c0013ba3 <Directory::unlink()+0x47>
c0013b7f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b85:	85 c9                	test   ecx,ecx
c0013b87:	74 1a                	je     c0013ba3 <Directory::unlink()+0x47>
c0013b89:	b8 06 00 00 00       	mov    eax,0x6
c0013b8e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b92:	75 0f                	jne    c0013ba3 <Directory::unlink()+0x47>
c0013b94:	83 c2 0d             	add    edx,0xd
c0013b97:	50                   	push   eax
c0013b98:	50                   	push   eax
c0013b99:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b9b:	52                   	push   edx
c0013b9c:	51                   	push   ecx
c0013b9d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	83 c4 0c             	add    esp,0xc
c0013ba6:	c3                   	ret    
c0013ba7:	90                   	nop

c0013ba8 <Directory::rename(char const*)>:
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	b8 0b 00 00 00       	mov    eax,0xb
c0013bb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bbb:	80 f9 19             	cmp    cl,0x19
c0013bbe:	77 32                	ja     c0013bf2 <Directory::rename(char const*)+0x4a>
c0013bc0:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013bc7:	85 c9                	test   ecx,ecx
c0013bc9:	74 27                	je     c0013bf2 <Directory::rename(char const*)+0x4a>
c0013bcb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bd1:	85 c9                	test   ecx,ecx
c0013bd3:	74 1d                	je     c0013bf2 <Directory::rename(char const*)+0x4a>
c0013bd5:	b8 06 00 00 00       	mov    eax,0x6
c0013bda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bde:	75 12                	jne    c0013bf2 <Directory::rename(char const*)+0x4a>
c0013be0:	83 c2 0d             	add    edx,0xd
c0013be3:	50                   	push   eax
c0013be4:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013be6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bea:	52                   	push   edx
c0013beb:	51                   	push   ecx
c0013bec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013bef:	83 c4 10             	add    esp,0x10
c0013bf2:	83 c4 0c             	add    esp,0xc
c0013bf5:	c3                   	ret    

c0013bf6 <Directory::exists()>:
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	31 c0                	xor    eax,eax
c0013bfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c06:	80 f9 19             	cmp    cl,0x19
c0013c09:	77 24                	ja     c0013c2f <Directory::exists()+0x39>
c0013c0b:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013c12:	85 c9                	test   ecx,ecx
c0013c14:	74 19                	je     c0013c2f <Directory::exists()+0x39>
c0013c16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c1c:	85 c9                	test   ecx,ecx
c0013c1e:	74 0f                	je     c0013c2f <Directory::exists()+0x39>
c0013c20:	83 c2 0d             	add    edx,0xd
c0013c23:	50                   	push   eax
c0013c24:	50                   	push   eax
c0013c25:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c27:	52                   	push   edx
c0013c28:	51                   	push   ecx
c0013c29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <Directory::read(dirent*)>:
c0013c34:	83 ec 1c             	sub    esp,0x1c
c0013c37:	b8 0b 00 00 00       	mov    eax,0xb
c0013c3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013c40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013c47:	80 fa 19             	cmp    dl,0x19
c0013c4a:	77 30                	ja     c0013c7c <Directory::read(dirent*)+0x48>
c0013c4c:	8b 14 95 a0 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1460]
c0013c53:	85 d2                	test   edx,edx
c0013c55:	74 25                	je     c0013c7c <Directory::read(dirent*)+0x48>
c0013c57:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c5e:	74 1c                	je     c0013c7c <Directory::read(dirent*)+0x48>
c0013c60:	83 ec 0c             	sub    esp,0xc
c0013c63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c65:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c69:	52                   	push   edx
c0013c6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c6e:	6a 00                	push   0x0
c0013c70:	68 10 01 00 00       	push   0x110
c0013c75:	51                   	push   ecx
c0013c76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c79:	83 c4 20             	add    esp,0x20
c0013c7c:	83 c4 1c             	add    esp,0x1c
c0013c7f:	c3                   	ret    

c0013c80 <Directory::create()>:
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	b8 0b 00 00 00       	mov    eax,0xb
c0013c88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c93:	80 f9 19             	cmp    cl,0x19
c0013c96:	77 2f                	ja     c0013cc7 <Directory::create()+0x47>
c0013c98:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0013c9f:	85 c9                	test   ecx,ecx
c0013ca1:	74 24                	je     c0013cc7 <Directory::create()+0x47>
c0013ca3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ca9:	85 c9                	test   ecx,ecx
c0013cab:	74 1a                	je     c0013cc7 <Directory::create()+0x47>
c0013cad:	b8 06 00 00 00       	mov    eax,0x6
c0013cb2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013cb6:	75 0f                	jne    c0013cc7 <Directory::create()+0x47>
c0013cb8:	83 c2 0d             	add    edx,0xd
c0013cbb:	50                   	push   eax
c0013cbc:	50                   	push   eax
c0013cbd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cbf:	52                   	push   edx
c0013cc0:	51                   	push   ecx
c0013cc1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013cc4:	83 c4 10             	add    esp,0x10
c0013cc7:	83 c4 0c             	add    esp,0xc
c0013cca:	c3                   	ret    
c0013ccb:	90                   	nop

c0013ccc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ccc:	b8 0a 00 00 00       	mov    eax,0xa
c0013cd1:	c3                   	ret    

c0013cd2 <Bus::Bus(char const*)>:
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd9:	83 ec 08             	sub    esp,0x8
c0013cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ce0:	50                   	push   eax
c0013ce1:	e8 68 09 00 00       	call   c001464e <Device::Device(char const*)>
c0013ce6:	83 c4 10             	add    esp,0x10
c0013ce9:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c0013cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf2:	89 10                	mov    DWORD PTR [eax],edx
c0013cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013d02:	90                   	nop
c0013d03:	83 c4 0c             	add    esp,0xc
c0013d06:	c3                   	ret    
c0013d07:	90                   	nop

c0013d08 <Bus::~Bus()>:
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c0013d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d14:	89 10                	mov    DWORD PTR [eax],edx
c0013d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d1a:	83 ec 0c             	sub    esp,0xc
c0013d1d:	50                   	push   eax
c0013d1e:	e8 0d 06 00 00       	call   c0014330 <Device::~Device()>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	90                   	nop
c0013d27:	83 c4 0c             	add    esp,0xc
c0013d2a:	c3                   	ret    
c0013d2b:	90                   	nop

c0013d2c <Bus::~Bus()>:
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	83 ec 0c             	sub    esp,0xc
c0013d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d36:	e8 cd ff ff ff       	call   c0013d08 <Bus::~Bus()>
c0013d3b:	83 c4 10             	add    esp,0x10
c0013d3e:	83 ec 08             	sub    esp,0x8
c0013d41:	68 58 01 00 00       	push   0x158
c0013d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d4a:	e8 09 f2 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0013d4f:	83 c4 10             	add    esp,0x10
c0013d52:	83 c4 0c             	add    esp,0xc
c0013d55:	c3                   	ret    

c0013d56 <Buzzer::Buzzer(char const*)>:
c0013d56:	83 ec 0c             	sub    esp,0xc
c0013d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5d:	83 ec 08             	sub    esp,0x8
c0013d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d64:	50                   	push   eax
c0013d65:	e8 e4 08 00 00       	call   c001464e <Device::Device(char const*)>
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c0013d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d76:	89 10                	mov    DWORD PTR [eax],edx
c0013d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d94:	90                   	nop
c0013d95:	83 c4 0c             	add    esp,0xc
c0013d98:	c3                   	ret    
c0013d99:	90                   	nop

c0013d9a <Buzzer::~Buzzer()>:
c0013d9a:	83 ec 0c             	sub    esp,0xc
c0013d9d:	ba c0 ac 02 c0       	mov    edx,0xc002acc0
c0013da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da6:	89 10                	mov    DWORD PTR [eax],edx
c0013da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	50                   	push   eax
c0013db0:	e8 7b 05 00 00       	call   c0014330 <Device::~Device()>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	90                   	nop
c0013db9:	83 c4 0c             	add    esp,0xc
c0013dbc:	c3                   	ret    
c0013dbd:	90                   	nop

c0013dbe <Buzzer::~Buzzer()>:
c0013dbe:	83 ec 0c             	sub    esp,0xc
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc8:	e8 cd ff ff ff       	call   c0013d9a <Buzzer::~Buzzer()>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	83 ec 08             	sub    esp,0x8
c0013dd3:	68 5c 01 00 00       	push   0x15c
c0013dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ddc:	e8 77 f1 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0013de1:	83 c4 10             	add    esp,0x10
c0013de4:	83 c4 0c             	add    esp,0xc
c0013de7:	c3                   	ret    

c0013de8 <Buzzer::stop()>:
c0013de8:	83 ec 14             	sub    esp,0x14
c0013deb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013def:	8b 10                	mov    edx,DWORD PTR [eax]
c0013df1:	6a 00                	push   0x0
c0013df3:	50                   	push   eax
c0013df4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013df7:	83 c4 1c             	add    esp,0x1c
c0013dfa:	c3                   	ret    

c0013dfb <beepThread(void*)>:
c0013dfb:	53                   	push   ebx
c0013dfc:	83 ec 08             	sub    esp,0x8
c0013dff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e03:	e8 d4 a0 00 00       	call   c001dedc <unlockScheduler()>
c0013e08:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013e0d:	52                   	push   edx
c0013e0e:	52                   	push   edx
c0013e0f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013e15:	52                   	push   edx
c0013e16:	50                   	push   eax
c0013e17:	e8 0e a6 00 00       	call   c001e42a <nanoSleep(unsigned long long)>
c0013e1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e1f:	e8 c4 ff ff ff       	call   c0013de8 <Buzzer::stop()>
c0013e24:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013e2c:	83 c4 18             	add    esp,0x18
c0013e2f:	5b                   	pop    ebx
c0013e30:	e9 3b a5 00 00       	jmp    c001e370 <blockTask(TaskState)>
c0013e35:	90                   	nop

c0013e36 <Buzzer::beep(int, int, bool)>:
c0013e36:	57                   	push   edi
c0013e37:	56                   	push   esi
c0013e38:	53                   	push   ebx
c0013e39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e45:	52                   	push   edx
c0013e46:	52                   	push   edx
c0013e47:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e4d:	56                   	push   esi
c0013e4e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	89 f8                	mov    eax,edi
c0013e56:	84 c0                	test   al,al
c0013e58:	74 1f                	je     c0013e79 <Buzzer::beep(int, int, bool)+0x43>
c0013e5a:	50                   	push   eax
c0013e5b:	50                   	push   eax
c0013e5c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e62:	99                   	cdq    
c0013e63:	52                   	push   edx
c0013e64:	50                   	push   eax
c0013e65:	e8 c0 a5 00 00       	call   c001e42a <nanoSleep(unsigned long long)>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e71:	5b                   	pop    ebx
c0013e72:	5e                   	pop    esi
c0013e73:	5f                   	pop    edi
c0013e74:	e9 6f ff ff ff       	jmp    c0013de8 <Buzzer::stop()>
c0013e79:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e7f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0013e84:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e8c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e90:	c7 44 24 14 fb 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013dfb
c0013e98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e9c:	5b                   	pop    ebx
c0013e9d:	5e                   	pop    esi
c0013e9e:	5f                   	pop    edi
c0013e9f:	e9 68 a1 00 00       	jmp    c001e00c <Process::createThread(void (*)(void*), void*, int)>

c0013ea4 <User::loadClockSettings(int)>:
c0013ea4:	53                   	push   ebx
c0013ea5:	83 ec 14             	sub    esp,0x14
c0013ea8:	68 14 01 00 00       	push   0x114
c0013ead:	e8 91 b9 ff ff       	call   c000f843 <malloc>
c0013eb2:	83 c4 0c             	add    esp,0xc
c0013eb5:	89 c3                	mov    ebx,eax
c0013eb7:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c0013ebd:	68 e8 ac 02 c0       	push   0xc002ace8
c0013ec2:	50                   	push   eax
c0013ec3:	e8 c8 f6 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c0013ec8:	58                   	pop    eax
c0013ec9:	5a                   	pop    edx
c0013eca:	6a 01                	push   0x1
c0013ecc:	53                   	push   ebx
c0013ecd:	e8 22 f7 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c0013ed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ed5:	e8 78 f7 ff ff       	call   c0013652 <File::close()>
c0013eda:	83 c4 10             	add    esp,0x10
c0013edd:	85 db                	test   ebx,ebx
c0013edf:	74 0f                	je     c0013ef0 <User::loadClockSettings(int)+0x4c>
c0013ee1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ee7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eea:	83 c4 08             	add    esp,0x8
c0013eed:	5b                   	pop    ebx
c0013eee:	ff e0                	jmp    eax
c0013ef0:	83 c4 08             	add    esp,0x8
c0013ef3:	5b                   	pop    ebx
c0013ef4:	c3                   	ret    
c0013ef5:	90                   	nop

c0013ef6 <Clock::Clock(char const*)>:
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efd:	83 ec 08             	sub    esp,0x8
c0013f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f04:	50                   	push   eax
c0013f05:	e8 44 07 00 00       	call   c001464e <Device::Device(char const*)>
c0013f0a:	83 c4 10             	add    esp,0x10
c0013f0d:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c0013f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f16:	89 10                	mov    DWORD PTR [eax],edx
c0013f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013f26:	90                   	nop
c0013f27:	83 c4 0c             	add    esp,0xc
c0013f2a:	c3                   	ret    
c0013f2b:	90                   	nop

c0013f2c <Clock::~Clock()>:
c0013f2c:	83 ec 0c             	sub    esp,0xc
c0013f2f:	ba 10 ad 02 c0       	mov    edx,0xc002ad10
c0013f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f38:	89 10                	mov    DWORD PTR [eax],edx
c0013f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	50                   	push   eax
c0013f42:	e8 e9 03 00 00       	call   c0014330 <Device::~Device()>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	90                   	nop
c0013f4b:	83 c4 0c             	add    esp,0xc
c0013f4e:	c3                   	ret    
c0013f4f:	90                   	nop

c0013f50 <Clock::~Clock()>:
c0013f50:	83 ec 0c             	sub    esp,0xc
c0013f53:	83 ec 0c             	sub    esp,0xc
c0013f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5a:	e8 cd ff ff ff       	call   c0013f2c <Clock::~Clock()>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	83 ec 08             	sub    esp,0x8
c0013f65:	68 58 01 00 00       	push   0x158
c0013f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f6e:	e8 e5 ef ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	83 c4 0c             	add    esp,0xc
c0013f79:	c3                   	ret    

c0013f7a <Clock::timeInSecondsLocal()>:
c0013f7a:	53                   	push   ebx
c0013f7b:	83 ec 14             	sub    esp,0x14
c0013f7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f82:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f84:	50                   	push   eax
c0013f85:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f88:	0f b6 0d 00 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e700
c0013f8f:	03 0d 04 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e704
c0013f95:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f9b:	89 cb                	mov    ebx,ecx
c0013f9d:	c1 fb 1f             	sar    ebx,0x1f
c0013fa0:	01 c8                	add    eax,ecx
c0013fa2:	11 da                	adc    edx,ebx
c0013fa4:	83 c4 10             	add    esp,0x10
c0013fa7:	31 c9                	xor    ecx,ecx
c0013fa9:	80 3d 01 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e701,0x0
c0013fb0:	74 05                	je     c0013fb7 <Clock::timeInSecondsLocal()+0x3d>
c0013fb2:	b9 08 07 00 00       	mov    ecx,0x708
c0013fb7:	31 db                	xor    ebx,ebx
c0013fb9:	01 c8                	add    eax,ecx
c0013fbb:	11 da                	adc    edx,ebx
c0013fbd:	83 c4 08             	add    esp,0x8
c0013fc0:	5b                   	pop    ebx
c0013fc1:	c3                   	ret    

c0013fc2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013fc2:	57                   	push   edi
c0013fc3:	56                   	push   esi
c0013fc4:	53                   	push   ebx
c0013fc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fcd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fcf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fd3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013fd6:	0f b6 05 00 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e700
c0013fdd:	03 05 04 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e704
c0013fe3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013fe9:	99                   	cdq    
c0013fea:	29 c6                	sub    esi,eax
c0013fec:	19 d7                	sbb    edi,edx
c0013fee:	89 f0                	mov    eax,esi
c0013ff0:	89 fa                	mov    edx,edi
c0013ff2:	31 f6                	xor    esi,esi
c0013ff4:	80 3d 01 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e701,0x0
c0013ffb:	74 05                	je     c0014002 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013ffd:	be 08 07 00 00       	mov    esi,0x708
c0014002:	31 ff                	xor    edi,edi
c0014004:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014008:	29 f0                	sub    eax,esi
c001400a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001400e:	19 fa                	sbb    edx,edi
c0014010:	89 d8                	mov    eax,ebx
c0014012:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014016:	5b                   	pop    ebx
c0014017:	5e                   	pop    esi
c0014018:	5f                   	pop    edi
c0014019:	ff e0                	jmp    eax

c001401b <datetimeToSeconds(datetime_t)>:
c001401b:	55                   	push   ebp
c001401c:	57                   	push   edi
c001401d:	56                   	push   esi
c001401e:	53                   	push   ebx
c001401f:	83 ec 14             	sub    esp,0x14
c0014022:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014026:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001402a:	89 d3                	mov    ebx,edx
c001402c:	0f b6 c6             	movzx  eax,dh
c001402f:	c1 eb 10             	shr    ebx,0x10
c0014032:	48                   	dec    eax
c0014033:	66 81 eb 6c 07       	sub    bx,0x76c
c0014038:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001403c:	0f b6 f5             	movzx  esi,ch
c001403f:	89 cf                	mov    edi,ecx
c0014041:	6b f6 3c             	imul   esi,esi,0x3c
c0014044:	c1 ef 10             	shr    edi,0x10
c0014047:	0f b6 c9             	movzx  ecx,cl
c001404a:	89 f8                	mov    eax,edi
c001404c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014052:	0f b6 f8             	movzx  edi,al
c0014055:	0f b6 d2             	movzx  edx,dl
c0014058:	01 fe                	add    esi,edi
c001405a:	01 f1                	add    ecx,esi
c001405c:	0f b7 f3             	movzx  esi,bx
c001405f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014063:	c1 f9 1f             	sar    ecx,0x1f
c0014066:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001406b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001406f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0014074:	8b 0c 8d 60 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52a0]
c001407b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001407f:	76 29                	jbe    c00140aa <datetimeToSeconds(datetime_t)+0x8f>
c0014081:	f6 c3 03             	test   bl,0x3
c0014084:	75 24                	jne    c00140aa <datetimeToSeconds(datetime_t)+0x8f>
c0014086:	31 d2                	xor    edx,edx
c0014088:	bf 64 00 00 00       	mov    edi,0x64
c001408d:	89 d8                	mov    eax,ebx
c001408f:	66 f7 f7             	div    di
c0014092:	66 85 d2             	test   dx,dx
c0014095:	75 12                	jne    c00140a9 <datetimeToSeconds(datetime_t)+0x8e>
c0014097:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001409d:	bf 90 01 00 00       	mov    edi,0x190
c00140a2:	99                   	cdq    
c00140a3:	f7 ff                	idiv   edi
c00140a5:	85 d2                	test   edx,edx
c00140a7:	75 01                	jne    c00140aa <datetimeToSeconds(datetime_t)+0x8f>
c00140a9:	41                   	inc    ecx
c00140aa:	66 83 fb 46          	cmp    bx,0x46
c00140ae:	76 45                	jbe    c00140f5 <datetimeToSeconds(datetime_t)+0xda>
c00140b0:	bb 46 00 00 00       	mov    ebx,0x46
c00140b5:	bf 64 00 00 00       	mov    edi,0x64
c00140ba:	bd 90 01 00 00       	mov    ebp,0x190
c00140bf:	b8 6d 01 00 00       	mov    eax,0x16d
c00140c4:	f6 c3 03             	test   bl,0x3
c00140c7:	75 23                	jne    c00140ec <datetimeToSeconds(datetime_t)+0xd1>
c00140c9:	89 d8                	mov    eax,ebx
c00140cb:	99                   	cdq    
c00140cc:	f7 ff                	idiv   edi
c00140ce:	b8 6e 01 00 00       	mov    eax,0x16e
c00140d3:	85 d2                	test   edx,edx
c00140d5:	75 15                	jne    c00140ec <datetimeToSeconds(datetime_t)+0xd1>
c00140d7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00140dd:	99                   	cdq    
c00140de:	f7 fd                	idiv   ebp
c00140e0:	83 fa 01             	cmp    edx,0x1
c00140e3:	19 c0                	sbb    eax,eax
c00140e5:	f7 d0                	not    eax
c00140e7:	05 6e 01 00 00       	add    eax,0x16e
c00140ec:	01 c1                	add    ecx,eax
c00140ee:	43                   	inc    ebx
c00140ef:	39 f3                	cmp    ebx,esi
c00140f1:	7c cc                	jl     c00140bf <datetimeToSeconds(datetime_t)+0xa4>
c00140f3:	eb 35                	jmp    c001412a <datetimeToSeconds(datetime_t)+0x10f>
c00140f5:	74 33                	je     c001412a <datetimeToSeconds(datetime_t)+0x10f>
c00140f7:	b8 45 00 00 00       	mov    eax,0x45
c00140fc:	89 c2                	mov    edx,eax
c00140fe:	83 e2 03             	and    edx,0x3
c0014101:	39 f0                	cmp    eax,esi
c0014103:	7e 0f                	jle    c0014114 <datetimeToSeconds(datetime_t)+0xf9>
c0014105:	83 fa 01             	cmp    edx,0x1
c0014108:	19 d2                	sbb    edx,edx
c001410a:	48                   	dec    eax
c001410b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0014112:	eb e8                	jmp    c00140fc <datetimeToSeconds(datetime_t)+0xe1>
c0014114:	b8 6d 01 00 00       	mov    eax,0x16d
c0014119:	85 d2                	test   edx,edx
c001411b:	75 0b                	jne    c0014128 <datetimeToSeconds(datetime_t)+0x10d>
c001411d:	66 83 fb 01          	cmp    bx,0x1
c0014121:	19 c0                	sbb    eax,eax
c0014123:	05 6e 01 00 00       	add    eax,0x16e
c0014128:	29 c1                	sub    ecx,eax
c001412a:	b8 80 51 01 00       	mov    eax,0x15180
c001412f:	f7 e9                	imul   ecx
c0014131:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014135:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014139:	83 c4 14             	add    esp,0x14
c001413c:	5b                   	pop    ebx
c001413d:	5e                   	pop    esi
c001413e:	5f                   	pop    edi
c001413f:	5d                   	pop    ebp
c0014140:	c3                   	ret    
c0014141:	90                   	nop

c0014142 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0014142:	57                   	push   edi
c0014143:	56                   	push   esi
c0014144:	53                   	push   ebx
c0014145:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014149:	8b 06                	mov    eax,DWORD PTR [esi]
c001414b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001414e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014156:	e8 c0 fe ff ff       	call   c001401b <datetimeToSeconds(datetime_t)>
c001415b:	59                   	pop    ecx
c001415c:	0f b6 0d 00 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e700
c0014163:	5b                   	pop    ebx
c0014164:	03 0d 04 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e704
c001416a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014170:	89 cb                	mov    ebx,ecx
c0014172:	c1 fb 1f             	sar    ebx,0x1f
c0014175:	29 c8                	sub    eax,ecx
c0014177:	19 da                	sbb    edx,ebx
c0014179:	31 c9                	xor    ecx,ecx
c001417b:	80 3d 01 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e701,0x0
c0014182:	74 05                	je     c0014189 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0014184:	b9 08 07 00 00       	mov    ecx,0x708
c0014189:	31 db                	xor    ebx,ebx
c001418b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001418f:	29 c8                	sub    eax,ecx
c0014191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014195:	19 da                	sbb    edx,ebx
c0014197:	89 f8                	mov    eax,edi
c0014199:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001419d:	5b                   	pop    ebx
c001419e:	5e                   	pop    esi
c001419f:	5f                   	pop    edi
c00141a0:	ff e0                	jmp    eax

c00141a2 <secondsToDatetime(unsigned long long)>:
c00141a2:	55                   	push   ebp
c00141a3:	57                   	push   edi
c00141a4:	56                   	push   esi
c00141a5:	53                   	push   ebx
c00141a6:	83 ec 1c             	sub    esp,0x1c
c00141a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00141ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00141b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00141b5:	6a 00                	push   0x0
c00141b7:	68 80 51 01 00       	push   0x15180
c00141bc:	55                   	push   ebp
c00141bd:	57                   	push   edi
c00141be:	e8 f9 28 01 00       	call   c0026abc <__udivdi3>
c00141c3:	83 c4 10             	add    esp,0x10
c00141c6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00141cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141d0:	6a 00                	push   0x0
c00141d2:	68 80 51 01 00       	push   0x15180
c00141d7:	55                   	push   ebp
c00141d8:	57                   	push   edi
c00141d9:	bf 10 0e 00 00       	mov    edi,0xe10
c00141de:	e8 d9 29 01 00       	call   c0026bbc <__umoddi3>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	99                   	cdq    
c00141e7:	f7 ff                	idiv   edi
c00141e9:	bf 3c 00 00 00       	mov    edi,0x3c
c00141ee:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141f1:	89 d0                	mov    eax,edx
c00141f3:	99                   	cdq    
c00141f4:	f7 ff                	idiv   edi
c00141f6:	85 db                	test   ebx,ebx
c00141f8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141fb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141fe:	79 11                	jns    c0014211 <secondsToDatetime(unsigned long long)+0x6f>
c0014200:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014204:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001420a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001420f:	eb 07                	jmp    c0014218 <secondsToDatetime(unsigned long long)+0x76>
c0014211:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014216:	89 d8                	mov    eax,ebx
c0014218:	bf b4 05 00 00       	mov    edi,0x5b4
c001421d:	99                   	cdq    
c001421e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014223:	f7 f9                	idiv   ecx
c0014225:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001422a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001422e:	31 d2                	xor    edx,edx
c0014230:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014238:	01 c3                	add    ebx,eax
c001423a:	89 d8                	mov    eax,ebx
c001423c:	f7 f1                	div    ecx
c001423e:	31 d2                	xor    edx,edx
c0014240:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014243:	89 d8                	mov    eax,ebx
c0014245:	f7 f7                	div    edi
c0014247:	31 d2                	xor    edx,edx
c0014249:	29 c1                	sub    ecx,eax
c001424b:	89 d8                	mov    eax,ebx
c001424d:	f7 f5                	div    ebp
c001424f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014254:	29 c1                	sub    ecx,eax
c0014256:	31 d2                	xor    edx,edx
c0014258:	89 c8                	mov    eax,ecx
c001425a:	f7 f5                	div    ebp
c001425c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014265:	31 d2                	xor    edx,edx
c0014267:	89 c8                	mov    eax,ecx
c0014269:	f7 f5                	div    ebp
c001426b:	31 d2                	xor    edx,edx
c001426d:	01 c3                	add    ebx,eax
c001426f:	89 c8                	mov    eax,ecx
c0014271:	f7 f7                	div    edi
c0014273:	bf 99 00 00 00       	mov    edi,0x99
c0014278:	29 c3                	sub    ebx,eax
c001427a:	31 d2                	xor    edx,edx
c001427c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014284:	29 c3                	sub    ebx,eax
c0014286:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014289:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001428c:	bb 05 00 00 00       	mov    ebx,0x5
c0014291:	83 c1 02             	add    ecx,0x2
c0014294:	89 c8                	mov    eax,ecx
c0014296:	f7 f7                	div    edi
c0014298:	31 d2                	xor    edx,edx
c001429a:	89 c7                	mov    edi,eax
c001429c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00142a2:	83 c0 02             	add    eax,0x2
c00142a5:	f7 f3                	div    ebx
c00142a7:	89 eb                	mov    ebx,ebp
c00142a9:	29 c3                	sub    ebx,eax
c00142ab:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00142b1:	88 1e                	mov    BYTE PTR [esi],bl
c00142b3:	19 c0                	sbb    eax,eax
c00142b5:	31 d2                	xor    edx,edx
c00142b7:	83 e0 0c             	and    eax,0xc
c00142ba:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00142be:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00142c6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00142ca:	83 f9 01             	cmp    ecx,0x1
c00142cd:	0f 96 c2             	setbe  dl
c00142d0:	41                   	inc    ecx
c00142d1:	01 d0                	add    eax,edx
c00142d3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00142d6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00142da:	83 c4 1c             	add    esp,0x1c
c00142dd:	89 f0                	mov    eax,esi
c00142df:	5b                   	pop    ebx
c00142e0:	5e                   	pop    esi
c00142e1:	5f                   	pop    edi
c00142e2:	5d                   	pop    ebp
c00142e3:	c2 04 00             	ret    0x4

c00142e6 <Clock::timeInDatetimeLocal()>:
c00142e6:	53                   	push   ebx
c00142e7:	83 ec 14             	sub    esp,0x14
c00142ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142f2:	e8 83 fc ff ff       	call   c0013f7a <Clock::timeInSecondsLocal()>
c00142f7:	83 c4 0c             	add    esp,0xc
c00142fa:	52                   	push   edx
c00142fb:	50                   	push   eax
c00142fc:	53                   	push   ebx
c00142fd:	e8 a0 fe ff ff       	call   c00141a2 <secondsToDatetime(unsigned long long)>
c0014302:	89 d8                	mov    eax,ebx
c0014304:	83 c4 14             	add    esp,0x14
c0014307:	5b                   	pop    ebx
c0014308:	c2 04 00             	ret    0x4
c001430b:	90                   	nop

c001430c <Device::hibernate()>:
c001430c:	c3                   	ret    
c001430d:	90                   	nop

c001430e <Device::wake()>:
c001430e:	c3                   	ret    
c001430f:	90                   	nop

c0014310 <Device::detect()>:
c0014310:	c3                   	ret    
c0014311:	90                   	nop

c0014312 <Device::disableLegacy()>:
c0014312:	c3                   	ret    
c0014313:	90                   	nop

c0014314 <Device::powerSaving(PowerSavingLevel)>:
c0014314:	c3                   	ret    
c0014315:	90                   	nop

c0014316 <DriverlessDevice::close(int, int, void*)>:
c0014316:	31 c0                	xor    eax,eax
c0014318:	c3                   	ret    
c0014319:	90                   	nop

c001431a <DriverlessDevice::detect()>:
c001431a:	c3                   	ret    
c001431b:	90                   	nop

c001431c <DriverlessDevice::open(int, int, void*)>:
c001431c:	83 ec 18             	sub    esp,0x18
c001431f:	68 90 ad 02 c0       	push   0xc002ad90
c0014324:	e8 bc 63 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014329:	83 c8 ff             	or     eax,0xffffffff
c001432c:	83 c4 1c             	add    esp,0x1c
c001432f:	c3                   	ret    

c0014330 <Device::~Device()>:
c0014330:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0014335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014339:	89 10                	mov    DWORD PTR [eax],edx
c001433b:	90                   	nop
c001433c:	c3                   	ret    
c001433d:	90                   	nop

c001433e <Device::~Device()>:
c001433e:	83 ec 0c             	sub    esp,0xc
c0014341:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014345:	e8 e6 ff ff ff       	call   c0014330 <Device::~Device()>
c001434a:	83 c4 04             	add    esp,0x4
c001434d:	83 ec 08             	sub    esp,0x8
c0014350:	68 58 01 00 00       	push   0x158
c0014355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014359:	e8 fa eb ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c001435e:	83 c4 10             	add    esp,0x10
c0014361:	83 c4 0c             	add    esp,0xc
c0014364:	c3                   	ret    
c0014365:	90                   	nop

c0014366 <Device::findAndLoadDriver()>:
c0014366:	c3                   	ret    
c0014367:	90                   	nop

c0014368 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014368:	57                   	push   edi
c0014369:	b9 09 00 00 00       	mov    ecx,0x9
c001436e:	56                   	push   esi
c001436f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014373:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014377:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014381:	81 c7 18 01 00 00    	add    edi,0x118
c0014387:	fc                   	cld    
c0014388:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001438a:	5e                   	pop    esi
c001438b:	5f                   	pop    edi
c001438c:	c3                   	ret    
c001438d:	90                   	nop

c001438e <Device::preOpenACPI(void*, char*, char*)>:
c001438e:	56                   	push   esi
c001438f:	53                   	push   ebx
c0014390:	83 ec 08             	sub    esp,0x8
c0014393:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014397:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001439b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00143a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143a9:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00143af:	6a 1e                	push   0x1e
c00143b1:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00143b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143bb:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00143c1:	50                   	push   eax
c00143c2:	e8 7d c3 fe ff       	call   c0000744 <memcpy>
c00143c7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00143cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00143cf:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00143d7:	83 c4 14             	add    esp,0x14
c00143da:	5b                   	pop    ebx
c00143db:	5e                   	pop    esi
c00143dc:	e9 63 c3 fe ff       	jmp    c0000744 <memcpy>
c00143e1:	90                   	nop

c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143e6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143eb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143f2:	75 0b                	jne    c00143ff <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00143f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143fa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143fd:	eb 1e                	jmp    c001441d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143ff:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014404:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001440a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014410:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014412:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014416:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001441a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001441d:	ff e0                	jmp    eax
c001441f:	90                   	nop

c0014420 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014424:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014429:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014430:	75 0b                	jne    c001443d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014432:	8b 00                	mov    eax,DWORD PTR [eax]
c0014434:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014438:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001443b:	eb 1e                	jmp    c001445b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001443d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014442:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014448:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001444e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014450:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014454:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014458:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001445b:	ff e0                	jmp    eax
c001445d:	90                   	nop

c001445e <Device::addChild(Device*)>:
c001445e:	53                   	push   ebx
c001445f:	83 ec 08             	sub    esp,0x8
c0014462:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014466:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001446a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014470:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014476:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014478:	85 d2                	test   edx,edx
c001447a:	74 04                	je     c0014480 <Device::addChild(Device*)+0x22>
c001447c:	89 d3                	mov    ebx,edx
c001447e:	eb f6                	jmp    c0014476 <Device::addChild(Device*)+0x18>
c0014480:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014483:	83 ec 0c             	sub    esp,0xc
c0014486:	6a 08                	push   0x8
c0014488:	e8 b6 b3 ff ff       	call   c000f843 <malloc>
c001448d:	89 03                	mov    DWORD PTR [ebx],eax
c001448f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014495:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001449c:	83 c4 18             	add    esp,0x18
c001449f:	5b                   	pop    ebx
c00144a0:	c3                   	ret    
c00144a1:	90                   	nop

c00144a2 <Device::removeAllChildren()>:
c00144a2:	56                   	push   esi
c00144a3:	53                   	push   ebx
c00144a4:	52                   	push   edx
c00144a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144a9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00144af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144b2:	74 17                	je     c00144cb <Device::removeAllChildren()+0x29>
c00144b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00144b7:	85 c0                	test   eax,eax
c00144b9:	74 0c                	je     c00144c7 <Device::removeAllChildren()+0x25>
c00144bb:	83 ec 0c             	sub    esp,0xc
c00144be:	8b 10                	mov    edx,DWORD PTR [eax]
c00144c0:	50                   	push   eax
c00144c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c9:	eb e4                	jmp    c00144af <Device::removeAllChildren()+0xd>
c00144cb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144d7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144e4:	58                   	pop    eax
c00144e5:	5b                   	pop    ebx
c00144e6:	5e                   	pop    esi
c00144e7:	c3                   	ret    

c00144e8 <Device::hibernateAll()>:
c00144e8:	53                   	push   ebx
c00144e9:	83 ec 14             	sub    esp,0x14
c00144ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144f2:	53                   	push   ebx
c00144f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144f6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014502:	74 0f                	je     c0014513 <Device::hibernateAll()+0x2b>
c0014504:	83 ec 0c             	sub    esp,0xc
c0014507:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001450a:	e8 d9 ff ff ff       	call   c00144e8 <Device::hibernateAll()>
c001450f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014511:	eb e9                	jmp    c00144fc <Device::hibernateAll()+0x14>
c0014513:	83 c4 08             	add    esp,0x8
c0014516:	5b                   	pop    ebx
c0014517:	c3                   	ret    

c0014518 <Device::wakeAll()>:
c0014518:	53                   	push   ebx
c0014519:	83 ec 14             	sub    esp,0x14
c001451c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014522:	53                   	push   ebx
c0014523:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014526:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014532:	74 0f                	je     c0014543 <Device::wakeAll()+0x2b>
c0014534:	83 ec 0c             	sub    esp,0xc
c0014537:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001453a:	e8 d9 ff ff ff       	call   c0014518 <Device::wakeAll()>
c001453f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014541:	eb e9                	jmp    c001452c <Device::wakeAll()+0x14>
c0014543:	83 c4 08             	add    esp,0x8
c0014546:	5b                   	pop    ebx
c0014547:	c3                   	ret    

c0014548 <Device::detectAll()>:
c0014548:	53                   	push   ebx
c0014549:	83 ec 14             	sub    esp,0x14
c001454c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014552:	53                   	push   ebx
c0014553:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014556:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014562:	74 0f                	je     c0014573 <Device::detectAll()+0x2b>
c0014564:	83 ec 0c             	sub    esp,0xc
c0014567:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001456a:	e8 d9 ff ff ff       	call   c0014548 <Device::detectAll()>
c001456f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014571:	eb e9                	jmp    c001455c <Device::detectAll()+0x14>
c0014573:	83 c4 08             	add    esp,0x8
c0014576:	5b                   	pop    ebx
c0014577:	c3                   	ret    

c0014578 <Device::disableLegacyAll()>:
c0014578:	53                   	push   ebx
c0014579:	83 ec 14             	sub    esp,0x14
c001457c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014580:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014582:	53                   	push   ebx
c0014583:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014586:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001458c:	83 c4 10             	add    esp,0x10
c001458f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014592:	74 0f                	je     c00145a3 <Device::disableLegacyAll()+0x2b>
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001459a:	e8 d9 ff ff ff       	call   c0014578 <Device::disableLegacyAll()>
c001459f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145a1:	eb e9                	jmp    c001458c <Device::disableLegacyAll()+0x14>
c00145a3:	83 c4 08             	add    esp,0x8
c00145a6:	5b                   	pop    ebx
c00145a7:	c3                   	ret    

c00145a8 <Device::loadDriversForAll()>:
c00145a8:	53                   	push   ebx
c00145a9:	83 ec 08             	sub    esp,0x8
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145b6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00145b8:	85 db                	test   ebx,ebx
c00145ba:	74 12                	je     c00145ce <Device::loadDriversForAll()+0x26>
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00145c2:	e8 e1 ff ff ff       	call   c00145a8 <Device::loadDriversForAll()>
c00145c7:	83 c4 10             	add    esp,0x10
c00145ca:	89 d8                	mov    eax,ebx
c00145cc:	eb e8                	jmp    c00145b6 <Device::loadDriversForAll()+0xe>
c00145ce:	83 c4 08             	add    esp,0x8
c00145d1:	5b                   	pop    ebx
c00145d2:	c3                   	ret    
c00145d3:	90                   	nop

c00145d4 <Device::closeAll()>:
c00145d4:	53                   	push   ebx
c00145d5:	83 ec 08             	sub    esp,0x8
c00145d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145de:	6a 00                	push   0x0
c00145e0:	6a 00                	push   0x0
c00145e2:	6a 00                	push   0x0
c00145e4:	53                   	push   ebx
c00145e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145ee:	83 c4 10             	add    esp,0x10
c00145f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145f4:	74 0f                	je     c0014605 <Device::closeAll()+0x31>
c00145f6:	83 ec 0c             	sub    esp,0xc
c00145f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145fc:	e8 d3 ff ff ff       	call   c00145d4 <Device::closeAll()>
c0014601:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014603:	eb e9                	jmp    c00145ee <Device::closeAll()+0x1a>
c0014605:	83 c4 08             	add    esp,0x8
c0014608:	5b                   	pop    ebx
c0014609:	c3                   	ret    

c001460a <Device::powerSavingAll(PowerSavingLevel)>:
c001460a:	56                   	push   esi
c001460b:	53                   	push   ebx
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014613:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014617:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014619:	56                   	push   esi
c001461a:	53                   	push   ebx
c001461b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001461e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014624:	83 c4 10             	add    esp,0x10
c0014627:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001462a:	74 0f                	je     c001463b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001462c:	52                   	push   edx
c001462d:	52                   	push   edx
c001462e:	56                   	push   esi
c001462f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014632:	e8 d3 ff ff ff       	call   c001460a <Device::powerSavingAll(PowerSavingLevel)>
c0014637:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014639:	eb e9                	jmp    c0014624 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001463b:	58                   	pop    eax
c001463c:	5b                   	pop    ebx
c001463d:	5e                   	pop    esi
c001463e:	c3                   	ret    
c001463f:	90                   	nop

c0014640 <Device::setName(char const*)>:
c0014640:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014648:	e9 e7 c1 fe ff       	jmp    c0000834 <strcpy>
c001464d:	90                   	nop

c001464e <Device::Device(char const*)>:
c001464e:	83 ec 1c             	sub    esp,0x1c
c0014651:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0014656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465a:	89 10                	mov    DWORD PTR [eax],edx
c001465c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014660:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001466a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001467c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014694:	83 ec 08             	sub    esp,0x8
c0014697:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001469b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001469f:	e8 9c ff ff ff       	call   c0014640 <Device::setName(char const*)>
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00146af:	83 ec 0c             	sub    esp,0xc
c00146b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146b6:	e8 88 b1 ff ff       	call   c000f843 <malloc>
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146cf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00146d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146fa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014705:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001470c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014710:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001471a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001471e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014728:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001472c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001473a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014744:	90                   	nop
c0014745:	83 c4 1c             	add    esp,0x1c
c0014748:	c3                   	ret    
c0014749:	90                   	nop

c001474a <Device::getName()>:
c001474a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474e:	05 d0 00 00 00       	add    eax,0xd0
c0014753:	c3                   	ret    

c0014754 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014762:	50                   	push   eax
c0014763:	e8 e6 fe ff ff       	call   c001464e <Device::Device(char const*)>
c0014768:	83 c4 10             	add    esp,0x10
c001476b:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0014770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014774:	89 10                	mov    DWORD PTR [eax],edx
c0014776:	90                   	nop
c0014777:	83 c4 0c             	add    esp,0xc
c001477a:	c3                   	ret    
c001477b:	90                   	nop

c001477c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001477c:	57                   	push   edi
c001477d:	56                   	push   esi
c001477e:	53                   	push   ebx
c001477f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001478b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014791:	75 0c                	jne    c001479f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014793:	52                   	push   edx
c0014794:	52                   	push   edx
c0014795:	53                   	push   ebx
c0014796:	56                   	push   esi
c0014797:	e8 5e 42 01 00       	call   c00289fa <LinkedList<Device>::addElement(Device*)>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00147a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00147a8:	74 12                	je     c00147bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00147aa:	50                   	push   eax
c00147ab:	57                   	push   edi
c00147ac:	56                   	push   esi
c00147ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00147b0:	e8 c7 ff ff ff       	call   c001477c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	eb e9                	jmp    c00147a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00147bc:	5b                   	pop    ebx
c00147bd:	5e                   	pop    esi
c00147be:	5f                   	pop    edi
c00147bf:	c3                   	ret    

c00147c0 <getDevicesOfType(DeviceType)>:
c00147c0:	53                   	push   ebx
c00147c1:	83 ec 14             	sub    esp,0x14
c00147c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147c8:	53                   	push   ebx
c00147c9:	e8 08 43 01 00       	call   c0028ad6 <LinkedList<Device>::LinkedList()>
c00147ce:	83 c4 0c             	add    esp,0xc
c00147d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147d5:	53                   	push   ebx
c00147d6:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c00147dc:	e8 9b ff ff ff       	call   c001477c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147e1:	89 d8                	mov    eax,ebx
c00147e3:	83 c4 18             	add    esp,0x18
c00147e6:	5b                   	pop    ebx
c00147e7:	c2 04 00             	ret    0x4

c00147ea <HardDiskController::HardDiskController(char const*)>:
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f1:	83 ec 08             	sub    esp,0x8
c00147f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f8:	50                   	push   eax
c00147f9:	e8 50 fe ff ff       	call   c001464e <Device::Device(char const*)>
c00147fe:	83 c4 10             	add    esp,0x10
c0014801:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c0014806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480a:	89 10                	mov    DWORD PTR [eax],edx
c001480c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014810:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001481a:	90                   	nop
c001481b:	83 c4 0c             	add    esp,0xc
c001481e:	c3                   	ret    
c001481f:	90                   	nop

c0014820 <HardDiskController::~HardDiskController()>:
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c0014828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482c:	89 10                	mov    DWORD PTR [eax],edx
c001482e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	50                   	push   eax
c0014836:	e8 f5 fa ff ff       	call   c0014330 <Device::~Device()>
c001483b:	83 c4 10             	add    esp,0x10
c001483e:	90                   	nop
c001483f:	83 c4 0c             	add    esp,0xc
c0014842:	c3                   	ret    
c0014843:	90                   	nop

c0014844 <HardDiskController::~HardDiskController()>:
c0014844:	83 ec 0c             	sub    esp,0xc
c0014847:	83 ec 0c             	sub    esp,0xc
c001484a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001484e:	e8 cd ff ff ff       	call   c0014820 <HardDiskController::~HardDiskController()>
c0014853:	83 c4 10             	add    esp,0x10
c0014856:	83 ec 08             	sub    esp,0x8
c0014859:	68 58 01 00 00       	push   0x158
c001485e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014862:	e8 f1 e6 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	83 c4 0c             	add    esp,0xc
c001486d:	c3                   	ret    

c001486e <PhysicalDisk::eject()>:
c001486e:	83 ec 18             	sub    esp,0x18
c0014871:	68 34 ae 02 c0       	push   0xc002ae34
c0014876:	e8 bd e7 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001487b:	83 c8 ff             	or     eax,0xffffffff
c001487e:	83 c4 1c             	add    esp,0x1c
c0014881:	c3                   	ret    

c0014882 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014882:	83 ec 0c             	sub    esp,0xc
c0014885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014889:	83 ec 08             	sub    esp,0x8
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	50                   	push   eax
c0014891:	e8 b8 fd ff ff       	call   c001464e <Device::Device(char const*)>
c0014896:	83 c4 10             	add    esp,0x10
c0014899:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c001489e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a2:	89 10                	mov    DWORD PTR [eax],edx
c00148a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00148af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00148ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148be:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00148c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00148d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148e4:	90                   	nop
c00148e5:	83 c4 0c             	add    esp,0xc
c00148e8:	c3                   	ret    
c00148e9:	90                   	nop

c00148ea <PhysicalDisk::startCache()>:
c00148ea:	56                   	push   esi
c00148eb:	53                   	push   ebx
c00148ec:	83 ec 10             	sub    esp,0x10
c00148ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148f3:	6a 44                	push   0x44
c00148f5:	e8 49 af ff ff       	call   c000f843 <malloc>
c00148fa:	89 c6                	mov    esi,eax
c00148fc:	58                   	pop    eax
c00148fd:	5a                   	pop    edx
c00148fe:	53                   	push   ebx
c00148ff:	56                   	push   esi
c0014900:	e8 35 27 00 00       	call   c001703a <VCache::VCache(PhysicalDisk*)>
c0014905:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001490b:	83 c4 14             	add    esp,0x14
c001490e:	5b                   	pop    ebx
c001490f:	5e                   	pop    esi
c0014910:	c3                   	ret    
c0014911:	90                   	nop

c0014912 <PhysicalDisk::~PhysicalDisk()>:
c0014912:	83 ec 0c             	sub    esp,0xc
c0014915:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c001491a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491e:	89 10                	mov    DWORD PTR [eax],edx
c0014920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014924:	83 ec 0c             	sub    esp,0xc
c0014927:	50                   	push   eax
c0014928:	e8 03 fa ff ff       	call   c0014330 <Device::~Device()>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	90                   	nop
c0014931:	83 c4 0c             	add    esp,0xc
c0014934:	c3                   	ret    
c0014935:	90                   	nop

c0014936 <PhysicalDisk::~PhysicalDisk()>:
c0014936:	83 ec 0c             	sub    esp,0xc
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014940:	e8 cd ff ff ff       	call   c0014912 <PhysicalDisk::~PhysicalDisk()>
c0014945:	83 c4 10             	add    esp,0x10
c0014948:	83 ec 08             	sub    esp,0x8
c001494b:	68 6c 01 00 00       	push   0x16c
c0014950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014954:	e8 ff e5 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	83 c4 0c             	add    esp,0xc
c001495f:	c3                   	ret    

c0014960 <FPU::FPU(char const*)>:
c0014960:	83 ec 0c             	sub    esp,0xc
c0014963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014967:	83 ec 08             	sub    esp,0x8
c001496a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001496e:	50                   	push   eax
c001496f:	e8 da fc ff ff       	call   c001464e <Device::Device(char const*)>
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	89 10                	mov    DWORD PTR [eax],edx
c0014982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014986:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014990:	90                   	nop
c0014991:	83 c4 0c             	add    esp,0xc
c0014994:	c3                   	ret    
c0014995:	90                   	nop

c0014996 <FPU::~FPU()>:
c0014996:	83 ec 0c             	sub    esp,0xc
c0014999:	ba a8 ae 02 c0       	mov    edx,0xc002aea8
c001499e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149a2:	89 10                	mov    DWORD PTR [eax],edx
c00149a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149a8:	83 ec 0c             	sub    esp,0xc
c00149ab:	50                   	push   eax
c00149ac:	e8 7f f9 ff ff       	call   c0014330 <Device::~Device()>
c00149b1:	83 c4 10             	add    esp,0x10
c00149b4:	90                   	nop
c00149b5:	83 c4 0c             	add    esp,0xc
c00149b8:	c3                   	ret    
c00149b9:	90                   	nop

c00149ba <FPU::~FPU()>:
c00149ba:	83 ec 0c             	sub    esp,0xc
c00149bd:	83 ec 0c             	sub    esp,0xc
c00149c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c4:	e8 cd ff ff ff       	call   c0014996 <FPU::~FPU()>
c00149c9:	83 c4 10             	add    esp,0x10
c00149cc:	83 ec 08             	sub    esp,0x8
c00149cf:	68 58 01 00 00       	push   0x158
c00149d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149d8:	e8 7b e5 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00149dd:	83 c4 10             	add    esp,0x10
c00149e0:	83 c4 0c             	add    esp,0xc
c00149e3:	c3                   	ret    

c00149e4 <setupFPU()>:
c00149e4:	53                   	push   ebx
c00149e5:	83 ec 08             	sub    esp,0x8
c00149e8:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c00149ee:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149f5:	74 19                	je     c0014a10 <setupFPU()+0x2c>
c00149f7:	83 ec 0c             	sub    esp,0xc
c00149fa:	68 58 01 00 00       	push   0x158
c00149ff:	e8 3f ae ff ff       	call   c000f843 <malloc>
c0014a04:	89 c3                	mov    ebx,eax
c0014a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a09:	e8 32 0c 01 00       	call   c0025640 <AVX::AVX()>
c0014a0e:	eb 5b                	jmp    c0014a6b <setupFPU()+0x87>
c0014a10:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014a16:	84 c0                	test   al,al
c0014a18:	79 19                	jns    c0014a33 <setupFPU()+0x4f>
c0014a1a:	83 ec 0c             	sub    esp,0xc
c0014a1d:	68 58 01 00 00       	push   0x158
c0014a22:	e8 1c ae ff ff       	call   c000f843 <malloc>
c0014a27:	89 c3                	mov    ebx,eax
c0014a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a2c:	e8 35 0d 01 00       	call   c0025766 <SSE::SSE()>
c0014a31:	eb 38                	jmp    c0014a6b <setupFPU()+0x87>
c0014a33:	a8 20                	test   al,0x20
c0014a35:	74 19                	je     c0014a50 <setupFPU()+0x6c>
c0014a37:	83 ec 0c             	sub    esp,0xc
c0014a3a:	68 58 01 00 00       	push   0x158
c0014a3f:	e8 ff ad ff ff       	call   c000f843 <malloc>
c0014a44:	89 c3                	mov    ebx,eax
c0014a46:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a49:	e8 82 0c 01 00       	call   c00256d0 <MMX::MMX()>
c0014a4e:	eb 1b                	jmp    c0014a6b <setupFPU()+0x87>
c0014a50:	a8 10                	test   al,0x10
c0014a52:	74 1c                	je     c0014a70 <setupFPU()+0x8c>
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	68 58 01 00 00       	push   0x158
c0014a5c:	e8 e2 ad ff ff       	call   c000f843 <malloc>
c0014a61:	89 c3                	mov    ebx,eax
c0014a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a66:	e8 89 0d 01 00       	call   c00257f4 <x87::x87()>
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	eb 24                	jmp    c0014a94 <setupFPU()+0xb0>
c0014a70:	83 e0 ef             	and    eax,0xffffffef
c0014a73:	83 ec 0c             	sub    esp,0xc
c0014a76:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a7c:	68 94 ae 02 c0       	push   0xc002ae94
c0014a81:	e8 b2 e5 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014a86:	0f 20 c0             	mov    eax,cr0
c0014a89:	83 c8 04             	or     eax,0x4
c0014a8c:	0f 22 c0             	mov    cr0,eax
c0014a8f:	31 db                	xor    ebx,ebx
c0014a91:	83 c4 10             	add    esp,0x10
c0014a94:	89 d8                	mov    eax,ebx
c0014a96:	83 c4 08             	add    esp,0x8
c0014a99:	5b                   	pop    ebx
c0014a9a:	c3                   	ret    
c0014a9b:	90                   	nop

c0014a9c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014aa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aa4:	c1 e0 04             	shl    eax,0x4
c0014aa7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014aab:	8d 50 10             	lea    edx,[eax+0x10]
c0014aae:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014ab4:	74 08                	je     c0014abe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014ab6:	83 c0 04             	add    eax,0x4
c0014ab9:	39 d0                	cmp    eax,edx
c0014abb:	75 f1                	jne    c0014aae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014abd:	c3                   	ret    
c0014abe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ac8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ad2:	eb e2                	jmp    c0014ab6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014ad4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014ad4:	57                   	push   edi
c0014ad5:	31 c0                	xor    eax,eax
c0014ad7:	56                   	push   esi
c0014ad8:	53                   	push   ebx
c0014ad9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014add:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ae1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014ae5:	89 da                	mov    edx,ebx
c0014ae7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014aeb:	c1 e2 04             	shl    edx,0x4
c0014aee:	01 ca                	add    edx,ecx
c0014af0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014af8:	74 16                	je     c0014b10 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014afa:	40                   	inc    eax
c0014afb:	83 f8 04             	cmp    eax,0x4
c0014afe:	75 f0                	jne    c0014af0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014b00:	c7 44 24 10 d8 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aed8
c0014b08:	5b                   	pop    ebx
c0014b09:	5e                   	pop    esi
c0014b0a:	5f                   	pop    edi
c0014b0b:	e9 d5 5b 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c0014b10:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014b13:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014b16:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014b1c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014b22:	5b                   	pop    ebx
c0014b23:	5e                   	pop    esi
c0014b24:	5f                   	pop    edi
c0014b25:	c3                   	ret    

c0014b26 <doubleFault(regs*, void*)>:
c0014b26:	55                   	push   ebp
c0014b27:	89 e5                	mov    ebp,esp
c0014b29:	83 ec 08             	sub    esp,0x8
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	68 13 af 02 c0       	push   0xc002af13
c0014b34:	e8 ac 5b 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014b39:	83 c4 10             	add    esp,0x10
c0014b3c:	90                   	nop
c0014b3d:	c9                   	leave  
c0014b3e:	c3                   	ret    
c0014b3f:	90                   	nop

c0014b40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014b40:	56                   	push   esi
c0014b41:	53                   	push   ebx
c0014b42:	50                   	push   eax
c0014b43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b4b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b50:	75 35                	jne    c0014b87 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b52:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b55:	31 d2                	xor    edx,edx
c0014b57:	89 c1                	mov    ecx,eax
c0014b59:	c1 e1 04             	shl    ecx,0x4
c0014b5c:	01 f1                	add    ecx,esi
c0014b5e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b66:	74 3e                	je     c0014ba6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b68:	42                   	inc    edx
c0014b69:	83 fa 04             	cmp    edx,0x4
c0014b6c:	75 f0                	jne    c0014b5e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b6e:	83 ec 0c             	sub    esp,0xc
c0014b71:	68 58 af 02 c0       	push   0xc002af58
c0014b76:	e8 6a 5b 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014b7b:	83 c4 10             	add    esp,0x10
c0014b7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b83:	5a                   	pop    edx
c0014b84:	5b                   	pop    ebx
c0014b85:	5e                   	pop    esi
c0014b86:	c3                   	ret    
c0014b87:	83 ec 0c             	sub    esp,0xc
c0014b8a:	56                   	push   esi
c0014b8b:	e8 ba fb ff ff       	call   c001474a <Device::getName()>
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b96:	75 ba                	jne    c0014b52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b98:	83 fb 0f             	cmp    ebx,0xf
c0014b9b:	7f 29                	jg     c0014bc6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b9d:	0f b6 9b c0 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2840]
c0014ba4:	eb ac                	jmp    c0014b52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ba6:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ba9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014bad:	8d 04 86             	lea    eax,[esi+eax*4]
c0014bb0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014bb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bba:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014bc0:	89 d8                	mov    eax,ebx
c0014bc2:	5a                   	pop    edx
c0014bc3:	5b                   	pop    ebx
c0014bc4:	5e                   	pop    esi
c0014bc5:	c3                   	ret    
c0014bc6:	83 ec 0c             	sub    esp,0xc
c0014bc9:	68 20 af 02 c0       	push   0xc002af20
c0014bce:	e8 12 5b 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	e9 77 ff ff ff       	jmp    c0014b52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014bdb:	90                   	nop

c0014bdc <InterruptController::clearAllHandlers(int, bool)>:
c0014bdc:	56                   	push   esi
c0014bdd:	53                   	push   ebx
c0014bde:	52                   	push   edx
c0014bdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014be7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014bec:	75 61                	jne    c0014c4f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014bee:	8d 46 20             	lea    eax,[esi+0x20]
c0014bf1:	c1 e6 04             	shl    esi,0x4
c0014bf4:	c1 e0 04             	shl    eax,0x4
c0014bf7:	01 de                	add    esi,ebx
c0014bf9:	01 d8                	add    eax,ebx
c0014bfb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014c05:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014c0f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014c19:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014c23:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014c2d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014c37:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014c41:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014c4b:	58                   	pop    eax
c0014c4c:	5b                   	pop    ebx
c0014c4d:	5e                   	pop    esi
c0014c4e:	c3                   	ret    
c0014c4f:	83 ec 0c             	sub    esp,0xc
c0014c52:	53                   	push   ebx
c0014c53:	e8 f2 fa ff ff       	call   c001474a <Device::getName()>
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c5e:	75 8e                	jne    c0014bee <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c60:	83 fe 0f             	cmp    esi,0xf
c0014c63:	7f 09                	jg     c0014c6e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c65:	0f b6 b6 c0 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2840]
c0014c6c:	eb 80                	jmp    c0014bee <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c6e:	83 ec 0c             	sub    esp,0xc
c0014c71:	68 94 af 02 c0       	push   0xc002af94
c0014c76:	e8 6a 5a 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	e9 6b ff ff ff       	jmp    c0014bee <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c83:	90                   	nop

c0014c84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c84:	56                   	push   esi
c0014c85:	53                   	push   ebx
c0014c86:	52                   	push   edx
c0014c87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c8f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c94:	75 3a                	jne    c0014cd0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c9a:	8d 50 20             	lea    edx,[eax+0x20]
c0014c9d:	c1 e2 04             	shl    edx,0x4
c0014ca0:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ca3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ca7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014cad:	74 0b                	je     c0014cba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014caf:	83 c0 04             	add    eax,0x4
c0014cb2:	39 d0                	cmp    eax,edx
c0014cb4:	75 f1                	jne    c0014ca7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014cb6:	58                   	pop    eax
c0014cb7:	5b                   	pop    ebx
c0014cb8:	5e                   	pop    esi
c0014cb9:	c3                   	ret    
c0014cba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014cc4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014cce:	eb df                	jmp    c0014caf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014cd0:	83 ec 0c             	sub    esp,0xc
c0014cd3:	56                   	push   esi
c0014cd4:	e8 71 fa ff ff       	call   c001474a <Device::getName()>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014cdf:	75 b5                	jne    c0014c96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ce1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014ce6:	7f 11                	jg     c0014cf9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014ce8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cec:	0f b6 80 c0 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2840]
c0014cf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cf7:	eb 9d                	jmp    c0014c96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cf9:	83 ec 0c             	sub    esp,0xc
c0014cfc:	68 94 af 02 c0       	push   0xc002af94
c0014d01:	e8 df 59 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	eb 8b                	jmp    c0014c96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014d0b <nmiHandler(regs*, void*)>:
c0014d0b:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014d10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d14:	e9 73 a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014d19 <int_handler>:
c0014d19:	55                   	push   ebp
c0014d1a:	57                   	push   edi
c0014d1b:	56                   	push   esi
c0014d1c:	53                   	push   ebx
c0014d1d:	83 ec 0c             	sub    esp,0xc
c0014d20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014d24:	80 3d e4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310e4,0x0
c0014d2b:	74 0b                	je     c0014d38 <int_handler+0x1f>
c0014d2d:	fa                   	cli    
c0014d2e:	f4                   	hlt    
c0014d2f:	80 3d e4 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310e4,0x0
c0014d36:	75 f5                	jne    c0014d2d <int_handler+0x14>
c0014d38:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0014d3d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014d40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d46:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014d4c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d4f:	83 f8 17             	cmp    eax,0x17
c0014d52:	77 13                	ja     c0014d67 <int_handler+0x4e>
c0014d54:	83 ec 08             	sub    esp,0x8
c0014d57:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d59:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d5c:	0f b6 c0             	movzx  eax,al
c0014d5f:	50                   	push   eax
c0014d60:	57                   	push   edi
c0014d61:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d64:	83 c4 10             	add    esp,0x10
c0014d67:	83 c3 15             	add    ebx,0x15
c0014d6a:	c1 e3 04             	shl    ebx,0x4
c0014d6d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d71:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d78:	31 db                	xor    ebx,ebx
c0014d7a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d7e:	85 c0                	test   eax,eax
c0014d80:	74 13                	je     c0014d95 <int_handler+0x7c>
c0014d82:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d85:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d89:	74 1c                	je     c0014da7 <int_handler+0x8e>
c0014d8b:	83 ec 08             	sub    esp,0x8
c0014d8e:	52                   	push   edx
c0014d8f:	56                   	push   esi
c0014d90:	ff d0                	call   eax
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	43                   	inc    ebx
c0014d96:	83 fb 04             	cmp    ebx,0x4
c0014d99:	75 df                	jne    c0014d7a <int_handler+0x61>
c0014d9b:	83 c4 0c             	add    esp,0xc
c0014d9e:	31 c0                	xor    eax,eax
c0014da0:	5b                   	pop    ebx
c0014da1:	31 d2                	xor    edx,edx
c0014da3:	5e                   	pop    esi
c0014da4:	5f                   	pop    edi
c0014da5:	5d                   	pop    ebp
c0014da6:	c3                   	ret    
c0014da7:	83 ec 08             	sub    esp,0x8
c0014daa:	52                   	push   edx
c0014dab:	56                   	push   esi
c0014dac:	ff d0                	call   eax
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	83 c4 0c             	add    esp,0xc
c0014db4:	5b                   	pop    ebx
c0014db5:	5e                   	pop    esi
c0014db6:	5f                   	pop    edi
c0014db7:	5d                   	pop    ebp
c0014db8:	c3                   	ret    
c0014db9:	90                   	nop

c0014dba <InterruptController::InterruptController(char const*)>:
c0014dba:	83 ec 1c             	sub    esp,0x1c
c0014dbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc1:	83 ec 08             	sub    esp,0x8
c0014dc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dc8:	50                   	push   eax
c0014dc9:	e8 80 f8 ff ff       	call   c001464e <Device::Device(char const*)>
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	ba 4c b2 02 c0       	mov    edx,0xc002b24c
c0014dd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dda:	89 10                	mov    DWORD PTR [eax],edx
c0014ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014dea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014df2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014dfa:	7f 5e                	jg     c0014e5a <InterruptController::InterruptController(char const*)+0xa0>
c0014dfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e04:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014e09:	7f 49                	jg     c0014e54 <InterruptController::InterruptController(char const*)+0x9a>
c0014e0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e1e:	01 ca                	add    edx,ecx
c0014e20:	83 c2 54             	add    edx,0x54
c0014e23:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e3e:	01 ca                	add    edx,ecx
c0014e40:	81 c2 54 04 00 00    	add    edx,0x454
c0014e46:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e52:	eb b0                	jmp    c0014e04 <InterruptController::InterruptController(char const*)+0x4a>
c0014e54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e58:	eb 98                	jmp    c0014df2 <InterruptController::InterruptController(char const*)+0x38>
c0014e5a:	90                   	nop
c0014e5b:	83 c4 1c             	add    esp,0x1c
c0014e5e:	c3                   	ret    
c0014e5f:	90                   	nop

c0014e60 <InterruptController::~InterruptController()>:
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	ba 4c b2 02 c0       	mov    edx,0xc002b24c
c0014e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6c:	89 10                	mov    DWORD PTR [eax],edx
c0014e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e72:	83 ec 0c             	sub    esp,0xc
c0014e75:	50                   	push   eax
c0014e76:	e8 b5 f4 ff ff       	call   c0014330 <Device::~Device()>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	90                   	nop
c0014e7f:	83 c4 0c             	add    esp,0xc
c0014e82:	c3                   	ret    
c0014e83:	90                   	nop

c0014e84 <InterruptController::~InterruptController()>:
c0014e84:	83 ec 0c             	sub    esp,0xc
c0014e87:	83 ec 0c             	sub    esp,0xc
c0014e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e8e:	e8 cd ff ff ff       	call   c0014e60 <InterruptController::~InterruptController()>
c0014e93:	83 c4 10             	add    esp,0x10
c0014e96:	83 ec 08             	sub    esp,0x8
c0014e99:	68 58 21 00 00       	push   0x2158
c0014e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea2:	e8 b1 e0 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0014ea7:	83 c4 10             	add    esp,0x10
c0014eaa:	83 c4 0c             	add    esp,0xc
c0014ead:	c3                   	ret    

c0014eae <displayDebugInfo(regs*)>:
c0014eae:	55                   	push   ebp
c0014eaf:	57                   	push   edi
c0014eb0:	56                   	push   esi
c0014eb1:	53                   	push   ebx
c0014eb2:	83 ec 24             	sub    esp,0x24
c0014eb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014eb9:	0f 20 c2             	mov    edx,cr0
c0014ebc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014ec0:	0f 20 d7             	mov    edi,cr2
c0014ec3:	0f 20 de             	mov    esi,cr3
c0014ec6:	0f 20 e5             	mov    ebp,cr4
c0014ec9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014ecc:	68 ce af 02 c0       	push   0xc002afce
c0014ed1:	e8 62 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014ed6:	59                   	pop    ecx
c0014ed7:	58                   	pop    eax
c0014ed8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014edb:	68 d9 af 02 c0       	push   0xc002afd9
c0014ee0:	e8 53 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014ee5:	58                   	pop    eax
c0014ee6:	5a                   	pop    edx
c0014ee7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014eea:	68 e4 af 02 c0       	push   0xc002afe4
c0014eef:	e8 44 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014ef4:	59                   	pop    ecx
c0014ef5:	58                   	pop    eax
c0014ef6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ef9:	68 ef af 02 c0       	push   0xc002afef
c0014efe:	e8 35 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f03:	58                   	pop    eax
c0014f04:	5a                   	pop    edx
c0014f05:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014f08:	68 fa af 02 c0       	push   0xc002affa
c0014f0d:	e8 26 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f12:	59                   	pop    ecx
c0014f13:	58                   	pop    eax
c0014f14:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014f17:	68 05 b0 02 c0       	push   0xc002b005
c0014f1c:	e8 17 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f21:	58                   	pop    eax
c0014f22:	5a                   	pop    edx
c0014f23:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f26:	68 10 b0 02 c0       	push   0xc002b010
c0014f2b:	e8 08 e1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f30:	59                   	pop    ecx
c0014f31:	58                   	pop    eax
c0014f32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014f35:	68 1b b0 02 c0       	push   0xc002b01b
c0014f3a:	e8 f9 e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f3f:	58                   	pop    eax
c0014f40:	5a                   	pop    edx
c0014f41:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f44:	68 26 b0 02 c0       	push   0xc002b026
c0014f49:	e8 ea e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f4e:	59                   	pop    ecx
c0014f4f:	58                   	pop    eax
c0014f50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f53:	68 35 b0 02 c0       	push   0xc002b035
c0014f58:	e8 db e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f5d:	58                   	pop    eax
c0014f5e:	5a                   	pop    edx
c0014f5f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f62:	68 40 b0 02 c0       	push   0xc002b040
c0014f67:	e8 cc e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f6c:	59                   	pop    ecx
c0014f6d:	58                   	pop    eax
c0014f6e:	57                   	push   edi
c0014f6f:	68 4b b0 02 c0       	push   0xc002b04b
c0014f74:	e8 bf e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f79:	58                   	pop    eax
c0014f7a:	5a                   	pop    edx
c0014f7b:	56                   	push   esi
c0014f7c:	68 56 b0 02 c0       	push   0xc002b056
c0014f81:	e8 b2 e0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0014f86:	59                   	pop    ecx
c0014f87:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014f8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f92:	e8 c0 bd ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0014f97:	58                   	pop    eax
c0014f98:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f9b:	5a                   	pop    edx
c0014f9c:	c1 e0 05             	shl    eax,0x5
c0014f9f:	05 20 d5 02 c0       	add    eax,0xc002d520
c0014fa4:	50                   	push   eax
c0014fa5:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014faa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb0:	e8 c1 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fb5:	59                   	pop    ecx
c0014fb6:	58                   	pop    eax
c0014fb7:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fbc:	68 61 b0 02 c0       	push   0xc002b061
c0014fc1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc7:	e8 aa c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fcc:	58                   	pop    eax
c0014fcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fd2:	5a                   	pop    edx
c0014fd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fd6:	83 c0 0c             	add    eax,0xc
c0014fd9:	50                   	push   eax
c0014fda:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014fdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe5:	e8 8c c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fea:	59                   	pop    ecx
c0014feb:	58                   	pop    eax
c0014fec:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0014ff1:	68 6a b0 02 c0       	push   0xc002b06a
c0014ff6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffc:	e8 75 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015001:	58                   	pop    eax
c0015002:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015007:	5a                   	pop    edx
c0015008:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001500b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015011:	e8 86 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015016:	59                   	pop    ecx
c0015017:	58                   	pop    eax
c0015018:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001501d:	68 72 b0 02 c0       	push   0xc002b072
c0015022:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015028:	e8 49 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001502d:	58                   	pop    eax
c001502e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015033:	5a                   	pop    edx
c0015034:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015037:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503d:	e8 5a c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015042:	59                   	pop    ecx
c0015043:	58                   	pop    eax
c0015044:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015049:	68 7a b0 02 c0       	push   0xc002b07a
c001504e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015054:	e8 1d c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015059:	58                   	pop    eax
c001505a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001505f:	5a                   	pop    edx
c0015060:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0015063:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015069:	e8 2e c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001506e:	59                   	pop    ecx
c001506f:	58                   	pop    eax
c0015070:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015075:	68 82 b0 02 c0       	push   0xc002b082
c001507a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015080:	e8 f1 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015085:	58                   	pop    eax
c0015086:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001508b:	5a                   	pop    edx
c001508c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001508f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015095:	e8 02 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001509a:	59                   	pop    ecx
c001509b:	58                   	pop    eax
c001509c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150a1:	68 8a b0 02 c0       	push   0xc002b08a
c00150a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ac:	e8 c5 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150b1:	58                   	pop    eax
c00150b2:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150b7:	5a                   	pop    edx
c00150b8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00150bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c1:	e8 d6 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150c6:	59                   	pop    ecx
c00150c7:	58                   	pop    eax
c00150c8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150cd:	68 92 b0 02 c0       	push   0xc002b092
c00150d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d8:	e8 99 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150dd:	58                   	pop    eax
c00150de:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150e3:	5a                   	pop    edx
c00150e4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00150e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ed:	e8 aa c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150f2:	59                   	pop    ecx
c00150f3:	58                   	pop    eax
c00150f4:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00150f9:	68 9a b0 02 c0       	push   0xc002b09a
c00150fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015104:	e8 6d c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015109:	58                   	pop    eax
c001510a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001510f:	5a                   	pop    edx
c0015110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015114:	52                   	push   edx
c0015115:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511b:	e8 7c c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015120:	59                   	pop    ecx
c0015121:	58                   	pop    eax
c0015122:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015127:	68 a3 b0 02 c0       	push   0xc002b0a3
c001512c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015132:	e8 3f c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015137:	58                   	pop    eax
c0015138:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001513d:	5a                   	pop    edx
c001513e:	57                   	push   edi
c001513f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015145:	e8 52 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001514a:	59                   	pop    ecx
c001514b:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015150:	5f                   	pop    edi
c0015151:	68 ab b0 02 c0       	push   0xc002b0ab
c0015156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515c:	e8 15 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015161:	58                   	pop    eax
c0015162:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015167:	5a                   	pop    edx
c0015168:	56                   	push   esi
c0015169:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516f:	e8 28 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015174:	59                   	pop    ecx
c0015175:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001517a:	5e                   	pop    esi
c001517b:	68 b3 b0 02 c0       	push   0xc002b0b3
c0015180:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015186:	e8 eb bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001518b:	5f                   	pop    edi
c001518c:	58                   	pop    eax
c001518d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015192:	55                   	push   ebp
c0015193:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015199:	e8 fe bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001519e:	58                   	pop    eax
c001519f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151a4:	5a                   	pop    edx
c00151a5:	68 bb b0 02 c0       	push   0xc002b0bb
c00151aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b0:	e8 c1 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00151b5:	0f 21 c0             	mov    eax,db0
c00151b8:	59                   	pop    ecx
c00151b9:	5e                   	pop    esi
c00151ba:	50                   	push   eax
c00151bb:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c6:	e8 d1 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151cb:	5f                   	pop    edi
c00151cc:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151d1:	5d                   	pop    ebp
c00151d2:	68 c4 b0 02 c0       	push   0xc002b0c4
c00151d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151dd:	e8 94 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00151e2:	0f 21 c8             	mov    eax,db1
c00151e5:	5a                   	pop    edx
c00151e6:	59                   	pop    ecx
c00151e7:	50                   	push   eax
c00151e8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f3:	e8 a4 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151f8:	5e                   	pop    esi
c00151f9:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00151fe:	5f                   	pop    edi
c00151ff:	68 cc b0 02 c0       	push   0xc002b0cc
c0015204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001520a:	e8 67 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001520f:	0f 21 d0             	mov    eax,db2
c0015212:	5d                   	pop    ebp
c0015213:	5a                   	pop    edx
c0015214:	50                   	push   eax
c0015215:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001521a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015220:	e8 77 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015225:	59                   	pop    ecx
c0015226:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001522b:	5e                   	pop    esi
c001522c:	68 d4 b0 02 c0       	push   0xc002b0d4
c0015231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015237:	e8 3a bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001523c:	0f 21 d8             	mov    eax,db3
c001523f:	5f                   	pop    edi
c0015240:	5d                   	pop    ebp
c0015241:	50                   	push   eax
c0015242:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001524d:	e8 4a bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015252:	58                   	pop    eax
c0015253:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015258:	5a                   	pop    edx
c0015259:	68 dc b0 02 c0       	push   0xc002b0dc
c001525e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015264:	e8 0d bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015269:	0f 21 f0             	mov    eax,db6
c001526c:	59                   	pop    ecx
c001526d:	5e                   	pop    esi
c001526e:	50                   	push   eax
c001526f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015274:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001527a:	e8 1d bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001527f:	5f                   	pop    edi
c0015280:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015285:	5d                   	pop    ebp
c0015286:	68 e4 b0 02 c0       	push   0xc002b0e4
c001528b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015291:	e8 e0 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015296:	0f 21 f8             	mov    eax,db7
c0015299:	5a                   	pop    edx
c001529a:	59                   	pop    ecx
c001529b:	50                   	push   eax
c001529c:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00152a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a7:	e8 f0 be ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00152ac:	5e                   	pop    esi
c00152ad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152b0:	e8 12 85 00 00       	call   c001d7c7 <Thr::getDriverNameFromAddress(unsigned long)>
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	85 c0                	test   eax,eax
c00152ba:	74 7d                	je     c0015339 <displayDebugInfo(regs*)+0x48b>
c00152bc:	89 c6                	mov    esi,eax
c00152be:	50                   	push   eax
c00152bf:	50                   	push   eax
c00152c0:	56                   	push   esi
c00152c1:	68 ec b0 02 c0       	push   0xc002b0ec
c00152c6:	e8 6d dd ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00152cb:	5a                   	pop    edx
c00152cc:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00152d1:	59                   	pop    ecx
c00152d2:	68 fa b0 02 c0       	push   0xc002b0fa
c00152d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152dd:	e8 94 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00152e2:	5f                   	pop    edi
c00152e3:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00152e8:	5d                   	pop    ebp
c00152e9:	56                   	push   esi
c00152ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152f0:	e8 81 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00152f5:	58                   	pop    eax
c00152f6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00152fb:	5a                   	pop    edx
c00152fc:	68 06 b1 02 c0       	push   0xc002b106
c0015301:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015307:	e8 6a be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001530c:	59                   	pop    ecx
c001530d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0015312:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015318:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001531b:	e8 de 84 00 00       	call   c001d7fe <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015320:	5b                   	pop    ebx
c0015321:	5d                   	pop    ebp
c0015322:	50                   	push   eax
c0015323:	57                   	push   edi
c0015324:	e8 73 be ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015329:	58                   	pop    eax
c001532a:	5a                   	pop    edx
c001532b:	56                   	push   esi
c001532c:	68 12 b1 02 c0       	push   0xc002b112
c0015331:	e8 02 dd ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015336:	83 c4 10             	add    esp,0x10
c0015339:	fa                   	cli    
c001533a:	f4                   	hlt    
c001533b:	eb fe                	jmp    c001533b <displayDebugInfo(regs*)+0x48d>

c001533d <x87EmulHandler(regs*, void*)>:
c001533d:	53                   	push   ebx
c001533e:	83 ec 14             	sub    esp,0x14
c0015341:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015345:	53                   	push   ebx
c0015346:	e8 23 a8 00 00       	call   c001fb6e <Vm::x87Handler(regs*)>
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	84 c0                	test   al,al
c0015350:	74 05                	je     c0015357 <x87EmulHandler(regs*, void*)+0x1a>
c0015352:	83 c4 08             	add    esp,0x8
c0015355:	5b                   	pop    ebx
c0015356:	c3                   	ret    
c0015357:	83 ec 0c             	sub    esp,0xc
c001535a:	68 22 b1 02 c0       	push   0xc002b122
c001535f:	e8 d4 dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015367:	e8 42 fb ff ff       	call   c0014eae <displayDebugInfo(regs*)>

c001536c <gpFault(regs*, void*)>:
c001536c:	53                   	push   ebx
c001536d:	83 ec 14             	sub    esp,0x14
c0015370:	c7 05 20 e7 02 c0 eb ee 01 c0 	mov    DWORD PTR ds:0xc002e720,0xc001eeeb
c001537a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001537e:	53                   	push   ebx
c001537f:	e8 67 9b 00 00       	call   c001eeeb <Vm::faultHandler(regs*)>
c0015384:	83 c4 10             	add    esp,0x10
c0015387:	84 c0                	test   al,al
c0015389:	74 05                	je     c0015390 <gpFault(regs*, void*)+0x24>
c001538b:	83 c4 08             	add    esp,0x8
c001538e:	5b                   	pop    ebx
c001538f:	c3                   	ret    
c0015390:	83 ec 0c             	sub    esp,0xc
c0015393:	68 38 b1 02 c0       	push   0xc002b138
c0015398:	e8 9b dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001539d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153a0:	e8 09 fb ff ff       	call   c0014eae <displayDebugInfo(regs*)>

c00153a5 <pgFault(regs*, void*)>:
c00153a5:	83 ec 18             	sub    esp,0x18
c00153a8:	68 53 b1 02 c0       	push   0xc002b153
c00153ad:	e8 86 dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00153b2:	0f 20 d0             	mov    eax,cr2
c00153b5:	5a                   	pop    edx
c00153b6:	59                   	pop    ecx
c00153b7:	50                   	push   eax
c00153b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153c0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00153c6:	e8 31 d8 ff ff       	call   c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	84 c0                	test   al,al
c00153d0:	74 04                	je     c00153d6 <pgFault(regs*, void*)+0x31>
c00153d2:	83 c4 0c             	add    esp,0xc
c00153d5:	c3                   	ret    
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	68 60 b1 02 c0       	push   0xc002b160
c00153de:	e8 55 dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00153e3:	58                   	pop    eax
c00153e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153e8:	e8 c1 fa ff ff       	call   c0014eae <displayDebugInfo(regs*)>

c00153ed <otherISRHandler(regs*, void*)>:
c00153ed:	53                   	push   ebx
c00153ee:	83 ec 0c             	sub    esp,0xc
c00153f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153f5:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153f8:	50                   	push   eax
c00153f9:	50                   	push   eax
c00153fa:	68 7e b1 02 c0       	push   0xc002b17e
c00153ff:	e8 34 dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015404:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015407:	e8 a2 fa ff ff       	call   c0014eae <displayDebugInfo(regs*)>

c001540c <opcodeFault(regs*, void*)>:
c001540c:	55                   	push   ebp
c001540d:	89 e5                	mov    ebp,esp
c001540f:	56                   	push   esi
c0015410:	53                   	push   ebx
c0015411:	83 ec 40             	sub    esp,0x40
c0015414:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015419:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001541f:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015425:	84 c0                	test   al,al
c0015427:	74 24                	je     c001544d <opcodeFault(regs*, void*)+0x41>
c0015429:	83 ec 0c             	sub    esp,0xc
c001542c:	68 9c b1 02 c0       	push   0xc002b19c
c0015431:	e8 02 dc ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543f:	8d 50 19             	lea    edx,[eax+0x19]
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015448:	e9 be 05 00 00       	jmp    c0015a0b <opcodeFault(regs*, void*)+0x5ff>
c001544d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015450:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015453:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015456:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001545a:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001545e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015461:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015464:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015467:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546a:	8a 00                	mov    al,BYTE PTR [eax]
c001546c:	3c f0                	cmp    al,0xf0
c001546e:	75 17                	jne    c0015487 <opcodeFault(regs*, void*)+0x7b>
c0015470:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015476:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015479:	8d 50 01             	lea    edx,[eax+0x1]
c001547c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015482:	e9 da 00 00 00       	jmp    c0015561 <opcodeFault(regs*, void*)+0x155>
c0015487:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548a:	8a 00                	mov    al,BYTE PTR [eax]
c001548c:	3c f2                	cmp    al,0xf2
c001548e:	74 09                	je     c0015499 <opcodeFault(regs*, void*)+0x8d>
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	8a 00                	mov    al,BYTE PTR [eax]
c0015495:	3c f3                	cmp    al,0xf3
c0015497:	75 1b                	jne    c00154b4 <opcodeFault(regs*, void*)+0xa8>
c0015499:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001549d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154a6:	8d 50 01             	lea    edx,[eax+0x1]
c00154a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154af:	e9 ad 00 00 00       	jmp    c0015561 <opcodeFault(regs*, void*)+0x155>
c00154b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b7:	8a 00                	mov    al,BYTE PTR [eax]
c00154b9:	3c 66                	cmp    al,0x66
c00154bb:	75 1f                	jne    c00154dc <opcodeFault(regs*, void*)+0xd0>
c00154bd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154c1:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00154c5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154ce:	8d 50 01             	lea    edx,[eax+0x1]
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154d7:	e9 85 00 00 00       	jmp    c0015561 <opcodeFault(regs*, void*)+0x155>
c00154dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154df:	8a 00                	mov    al,BYTE PTR [eax]
c00154e1:	3c 67                	cmp    al,0x67
c00154e3:	75 18                	jne    c00154fd <opcodeFault(regs*, void*)+0xf1>
c00154e5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154e9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f2:	8d 50 01             	lea    edx,[eax+0x1]
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154fb:	eb 64                	jmp    c0015561 <opcodeFault(regs*, void*)+0x155>
c00154fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015500:	8a 00                	mov    al,BYTE PTR [eax]
c0015502:	3c 2e                	cmp    al,0x2e
c0015504:	74 09                	je     c001550f <opcodeFault(regs*, void*)+0x103>
c0015506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015509:	8a 00                	mov    al,BYTE PTR [eax]
c001550b:	3c 3e                	cmp    al,0x3e
c001550d:	75 18                	jne    c0015527 <opcodeFault(regs*, void*)+0x11b>
c001550f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015513:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015519:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551c:	8d 50 01             	lea    edx,[eax+0x1]
c001551f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015522:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015525:	eb 3a                	jmp    c0015561 <opcodeFault(regs*, void*)+0x155>
c0015527:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c 36                	cmp    al,0x36
c001552e:	74 1b                	je     c001554b <opcodeFault(regs*, void*)+0x13f>
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	8a 00                	mov    al,BYTE PTR [eax]
c0015535:	3c 26                	cmp    al,0x26
c0015537:	74 12                	je     c001554b <opcodeFault(regs*, void*)+0x13f>
c0015539:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553c:	8a 00                	mov    al,BYTE PTR [eax]
c001553e:	3c 64                	cmp    al,0x64
c0015540:	74 09                	je     c001554b <opcodeFault(regs*, void*)+0x13f>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	8a 00                	mov    al,BYTE PTR [eax]
c0015547:	3c 65                	cmp    al,0x65
c0015549:	75 16                	jne    c0015561 <opcodeFault(regs*, void*)+0x155>
c001554b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001554f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015555:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015558:	8d 50 01             	lea    edx,[eax+0x1]
c001555b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015564:	8a 00                	mov    al,BYTE PTR [eax]
c0015566:	3c 0f                	cmp    al,0xf
c0015568:	0f 85 ad 00 00 00    	jne    c001561b <opcodeFault(regs*, void*)+0x20f>
c001556e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015571:	40                   	inc    eax
c0015572:	8a 00                	mov    al,BYTE PTR [eax]
c0015574:	3c c2                	cmp    al,0xc2
c0015576:	74 0e                	je     c0015586 <opcodeFault(regs*, void*)+0x17a>
c0015578:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001557b:	40                   	inc    eax
c001557c:	8a 00                	mov    al,BYTE PTR [eax]
c001557e:	3c c3                	cmp    al,0xc3
c0015580:	0f 85 95 00 00 00    	jne    c001561b <opcodeFault(regs*, void*)+0x20f>
c0015586:	83 ec 0c             	sub    esp,0xc
c0015589:	68 bf b1 02 c0       	push   0xc002b1bf
c001558e:	e8 a5 da ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015599:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001559c:	8d 50 01             	lea    edx,[eax+0x1]
c001559f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155a5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00155a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ab:	8a 00                	mov    al,BYTE PTR [eax]
c00155ad:	8d 50 fe             	lea    edx,[eax-0x2]
c00155b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b3:	88 10                	mov    BYTE PTR [eax],dl
c00155b5:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00155b8:	50                   	push   eax
c00155b9:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00155bc:	50                   	push   eax
c00155bd:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00155c0:	50                   	push   eax
c00155c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155c4:	e8 e3 47 00 00       	call   c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155d2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155d5:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00155d8:	01 d0                	add    eax,edx
c00155da:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00155dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155e3:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155e6:	48                   	dec    eax
c00155e7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ed:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155f0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f6:	83 ec 04             	sub    esp,0x4
c00155f9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155fc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155ff:	50                   	push   eax
c0015600:	e8 af ab fe ff       	call   c00001b4 <voodooXADD>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001560b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001560e:	01 c2                	add    edx,eax
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015616:	e9 f0 03 00 00       	jmp    c0015a0b <opcodeFault(regs*, void*)+0x5ff>
c001561b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561e:	8a 00                	mov    al,BYTE PTR [eax]
c0015620:	3c 0f                	cmp    al,0xf
c0015622:	0f 85 8b 01 00 00    	jne    c00157b3 <opcodeFault(regs*, void*)+0x3a7>
c0015628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562b:	40                   	inc    eax
c001562c:	8a 00                	mov    al,BYTE PTR [eax]
c001562e:	3c c7                	cmp    al,0xc7
c0015630:	0f 86 7d 01 00 00    	jbe    c00157b3 <opcodeFault(regs*, void*)+0x3a7>
c0015636:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015639:	40                   	inc    eax
c001563a:	8a 00                	mov    al,BYTE PTR [eax]
c001563c:	3c cf                	cmp    al,0xcf
c001563e:	0f 87 6f 01 00 00    	ja     c00157b3 <opcodeFault(regs*, void*)+0x3a7>
c0015644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015647:	40                   	inc    eax
c0015648:	8a 00                	mov    al,BYTE PTR [eax]
c001564a:	83 c0 38             	add    eax,0x38
c001564d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015650:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015654:	75 0b                	jne    c0015661 <opcodeFault(regs*, void*)+0x255>
c0015656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015659:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001565c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001565f:	eb 75                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c0015661:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015665:	75 0b                	jne    c0015672 <opcodeFault(regs*, void*)+0x266>
c0015667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001566d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015670:	eb 64                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c0015672:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015676:	75 0b                	jne    c0015683 <opcodeFault(regs*, void*)+0x277>
c0015678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001567e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015681:	eb 53                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c0015683:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015687:	75 0b                	jne    c0015694 <opcodeFault(regs*, void*)+0x288>
c0015689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001568f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015692:	eb 42                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c0015694:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015698:	75 0b                	jne    c00156a5 <opcodeFault(regs*, void*)+0x299>
c001569a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00156a0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156a3:	eb 31                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c00156a5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156a9:	75 0b                	jne    c00156b6 <opcodeFault(regs*, void*)+0x2aa>
c00156ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00156b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156b4:	eb 20                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c00156b6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156ba:	75 0b                	jne    c00156c7 <opcodeFault(regs*, void*)+0x2bb>
c00156bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00156c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156c5:	eb 0f                	jmp    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c00156c7:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156cb:	75 09                	jne    c00156d6 <opcodeFault(regs*, void*)+0x2ca>
c00156cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00156d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156d6:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00156da:	74 10                	je     c00156ec <opcodeFault(regs*, void*)+0x2e0>
c00156dc:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00156e3:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156ea:	eb 2d                	jmp    c0015719 <opcodeFault(regs*, void*)+0x30d>
c00156ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156ef:	c1 e0 18             	shl    eax,0x18
c00156f2:	89 c2                	mov    edx,eax
c00156f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156f7:	c1 e0 08             	shl    eax,0x8
c00156fa:	25 00 00 ff 00       	and    eax,0xff0000
c00156ff:	09 c2                	or     edx,eax
c0015701:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015704:	c1 e8 08             	shr    eax,0x8
c0015707:	25 00 ff 00 00       	and    eax,0xff00
c001570c:	09 c2                	or     edx,eax
c001570e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015711:	c1 e8 18             	shr    eax,0x18
c0015714:	09 d0                	or     eax,edx
c0015716:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015719:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001571d:	75 0b                	jne    c001572a <opcodeFault(regs*, void*)+0x31e>
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015725:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015728:	eb 75                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001572a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001572e:	75 0b                	jne    c001573b <opcodeFault(regs*, void*)+0x32f>
c0015730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015733:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015736:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015739:	eb 64                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001573b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001573f:	75 0b                	jne    c001574c <opcodeFault(regs*, void*)+0x340>
c0015741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015744:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015747:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001574a:	eb 53                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001574c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015750:	75 0b                	jne    c001575d <opcodeFault(regs*, void*)+0x351>
c0015752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015755:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015758:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001575b:	eb 42                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001575d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015761:	75 0b                	jne    c001576e <opcodeFault(regs*, void*)+0x362>
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015769:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001576c:	eb 31                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001576e:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015772:	75 0b                	jne    c001577f <opcodeFault(regs*, void*)+0x373>
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001577a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001577d:	eb 20                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c001577f:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015783:	75 0b                	jne    c0015790 <opcodeFault(regs*, void*)+0x384>
c0015785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015788:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001578b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001578e:	eb 0f                	jmp    c001579f <opcodeFault(regs*, void*)+0x393>
c0015790:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015794:	75 09                	jne    c001579f <opcodeFault(regs*, void*)+0x393>
c0015796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015799:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001579c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157a5:	8d 50 02             	lea    edx,[eax+0x2]
c00157a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157ae:	e9 58 02 00 00       	jmp    c0015a0b <opcodeFault(regs*, void*)+0x5ff>
c00157b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b6:	8a 00                	mov    al,BYTE PTR [eax]
c00157b8:	3c 0f                	cmp    al,0xf
c00157ba:	0f 85 76 01 00 00    	jne    c0015936 <opcodeFault(regs*, void*)+0x52a>
c00157c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c3:	40                   	inc    eax
c00157c4:	8a 00                	mov    al,BYTE PTR [eax]
c00157c6:	3c c7                	cmp    al,0xc7
c00157c8:	0f 85 68 01 00 00    	jne    c0015936 <opcodeFault(regs*, void*)+0x52a>
c00157ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157d7:	8d 50 01             	lea    edx,[eax+0x1]
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157e0:	8d 45 ba             	lea    eax,[ebp-0x46]
c00157e3:	50                   	push   eax
c00157e4:	8d 45 bb             	lea    eax,[ebp-0x45]
c00157e7:	50                   	push   eax
c00157e8:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157eb:	50                   	push   eax
c00157ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157ef:	e8 b8 45 00 00       	call   c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157fa:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157fd:	83 f0 01             	xor    eax,0x1
c0015800:	84 c0                	test   al,al
c0015802:	0f 84 2e 01 00 00    	je     c0015936 <opcodeFault(regs*, void*)+0x52a>
c0015808:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001580b:	3c 01                	cmp    al,0x1
c001580d:	0f 85 23 01 00 00    	jne    c0015936 <opcodeFault(regs*, void*)+0x52a>
c0015813:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015816:	83 f0 01             	xor    eax,0x1
c0015819:	84 c0                	test   al,al
c001581b:	0f 84 15 01 00 00    	je     c0015936 <opcodeFault(regs*, void*)+0x52a>
c0015821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015824:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015827:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001582a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015831:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015834:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015837:	89 c2                	mov    edx,eax
c0015839:	b8 00 00 00 00       	mov    eax,0x0
c001583e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015841:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015847:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001584a:	ba 00 00 00 00       	mov    edx,0x0
c001584f:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015852:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001585b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001585e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015865:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015868:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001586b:	89 c2                	mov    edx,eax
c001586d:	b8 00 00 00 00       	mov    eax,0x0
c0015872:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015875:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001587e:	ba 00 00 00 00       	mov    edx,0x0
c0015883:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015886:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015889:	e8 4c 86 00 00       	call   c001deda <lockScheduler()>
c001588e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015891:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015894:	8b 00                	mov    eax,DWORD PTR [eax]
c0015896:	89 c1                	mov    ecx,eax
c0015898:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001589b:	89 cb                	mov    ebx,ecx
c001589d:	89 d0                	mov    eax,edx
c001589f:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00158a2:	89 c6                	mov    esi,eax
c00158a4:	89 f0                	mov    eax,esi
c00158a6:	09 d8                	or     eax,ebx
c00158a8:	85 c0                	test   eax,eax
c00158aa:	75 21                	jne    c00158cd <opcodeFault(regs*, void*)+0x4c1>
c00158ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00158af:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00158b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00158b5:	89 01                	mov    DWORD PTR [ecx],eax
c00158b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158c0:	83 c8 40             	or     eax,0x40
c00158c3:	89 c2                	mov    edx,eax
c00158c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158cb:	eb 3e                	jmp    c001590b <opcodeFault(regs*, void*)+0x4ff>
c00158cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00158d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00158d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00158d8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00158db:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00158de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00158e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00158e7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158ea:	89 d0                	mov    eax,edx
c00158ec:	31 d2                	xor    edx,edx
c00158ee:	89 c3                	mov    ebx,eax
c00158f0:	89 d6                	mov    esi,edx
c00158f2:	89 da                	mov    edx,ebx
c00158f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015900:	83 e0 bf             	and    eax,0xffffffbf
c0015903:	89 c2                	mov    edx,eax
c0015905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015908:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001590b:	e8 cc 85 00 00       	call   c001dedc <unlockScheduler()>
c0015910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015913:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015916:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015919:	01 c2                	add    edx,eax
c001591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015921:	83 ec 0c             	sub    esp,0xc
c0015924:	68 ce b1 02 c0       	push   0xc002b1ce
c0015929:	e8 0a d7 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	e9 d5 00 00 00       	jmp    c0015a0b <opcodeFault(regs*, void*)+0x5ff>
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	68 e1 b1 02 c0       	push   0xc002b1e1
c001593e:	e8 f5 d6 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015949:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001594c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015952:	c1 e0 04             	shl    eax,0x4
c0015955:	01 d0                	add    eax,edx
c0015957:	83 c0 03             	add    eax,0x3
c001595a:	8a 00                	mov    al,BYTE PTR [eax]
c001595c:	0f b6 d8             	movzx  ebx,al
c001595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015962:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015968:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001596b:	c1 e0 04             	shl    eax,0x4
c001596e:	01 d0                	add    eax,edx
c0015970:	83 c0 02             	add    eax,0x2
c0015973:	8a 00                	mov    al,BYTE PTR [eax]
c0015975:	0f b6 c8             	movzx  ecx,al
c0015978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001597e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015981:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015984:	c1 e0 04             	shl    eax,0x4
c0015987:	01 d0                	add    eax,edx
c0015989:	40                   	inc    eax
c001598a:	8a 00                	mov    al,BYTE PTR [eax]
c001598c:	0f b6 d0             	movzx  edx,al
c001598f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015992:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001599b:	c1 e0 04             	shl    eax,0x4
c001599e:	01 f0                	add    eax,esi
c00159a0:	8a 00                	mov    al,BYTE PTR [eax]
c00159a2:	0f b6 c0             	movzx  eax,al
c00159a5:	83 ec 0c             	sub    esp,0xc
c00159a8:	53                   	push   ebx
c00159a9:	51                   	push   ecx
c00159aa:	52                   	push   edx
c00159ab:	50                   	push   eax
c00159ac:	68 f4 b1 02 c0       	push   0xc002b1f4
c00159b1:	e8 82 d6 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00159b6:	83 c4 20             	add    esp,0x20
c00159b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159bf:	83 c0 03             	add    eax,0x3
c00159c2:	8a 00                	mov    al,BYTE PTR [eax]
c00159c4:	0f b6 d8             	movzx  ebx,al
c00159c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159cd:	83 c0 02             	add    eax,0x2
c00159d0:	8a 00                	mov    al,BYTE PTR [eax]
c00159d2:	0f b6 c8             	movzx  ecx,al
c00159d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159db:	40                   	inc    eax
c00159dc:	8a 00                	mov    al,BYTE PTR [eax]
c00159de:	0f b6 d0             	movzx  edx,al
c00159e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159e7:	8a 00                	mov    al,BYTE PTR [eax]
c00159e9:	0f b6 c0             	movzx  eax,al
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	53                   	push   ebx
c00159f0:	51                   	push   ecx
c00159f1:	52                   	push   edx
c00159f2:	50                   	push   eax
c00159f3:	68 1c b2 02 c0       	push   0xc002b21c
c00159f8:	e8 3b d6 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00159fd:	83 c4 20             	add    esp,0x20
c0015a00:	83 ec 0c             	sub    esp,0xc
c0015a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015a06:	e8 a3 f4 ff ff       	call   c0014eae <displayDebugInfo(regs*)>
c0015a0b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015a0e:	5b                   	pop    ebx
c0015a0f:	5e                   	pop    esi
c0015a10:	5d                   	pop    ebp
c0015a11:	c3                   	ret    

c0015a12 <displayProgramFault(char const*)>:
c0015a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a20:	85 c0                	test   eax,eax
c0015a22:	74 15                	je     c0015a39 <displayProgramFault(char const*)+0x27>
c0015a24:	83 ec 0c             	sub    esp,0xc
c0015a27:	6a 04                	push   0x4
c0015a29:	6a 0f                	push   0xf
c0015a2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a2f:	50                   	push   eax
c0015a30:	e8 03 b4 ff ff       	call   c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015a35:	83 c4 1c             	add    esp,0x1c
c0015a38:	c3                   	ret    
c0015a39:	c3                   	ret    

c0015a3a <setupInterruptController()>:
c0015a3a:	55                   	push   ebp
c0015a3b:	89 e5                	mov    ebp,esp
c0015a3d:	53                   	push   ebx
c0015a3e:	83 ec 24             	sub    esp,0x24
c0015a41:	b8 00 00 00 00       	mov    eax,0x0
c0015a46:	85 c0                	test   eax,eax
c0015a48:	0f 95 c0             	setne  al
c0015a4b:	84 c0                	test   al,al
c0015a4d:	74 5b                	je     c0015aaa <setupInterruptController()+0x70>
c0015a4f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a56:	83 ec 0c             	sub    esp,0xc
c0015a59:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a5c:	e8 e2 9d ff ff       	call   c000f843 <malloc>
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	89 c3                	mov    ebx,eax
c0015a66:	83 ec 0c             	sub    esp,0xc
c0015a69:	53                   	push   ebx
c0015a6a:	e8 c3 ff 00 00       	call   c0025a32 <APIC::APIC()>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a75:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7d:	83 c0 08             	add    eax,0x8
c0015a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a82:	6a 00                	push   0x0
c0015a84:	6a 00                	push   0x0
c0015a86:	6a 00                	push   0x0
c0015a88:	52                   	push   edx
c0015a89:	ff d0                	call   eax
c0015a8b:	83 c4 10             	add    esp,0x10
c0015a8e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015a93:	83 ec 08             	sub    esp,0x8
c0015a96:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a99:	50                   	push   eax
c0015a9a:	e8 bf e9 ff ff       	call   c001445e <Device::addChild(Device*)>
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015aa5:	e9 52 03 00 00       	jmp    c0015dfc <setupInterruptController()+0x3c2>
c0015aaa:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015aaf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015ab5:	83 e0 01             	and    eax,0x1
c0015ab8:	84 c0                	test   al,al
c0015aba:	0f 95 c0             	setne  al
c0015abd:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015ac0:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015ac7:	83 ec 0c             	sub    esp,0xc
c0015aca:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015acd:	e8 71 9d ff ff       	call   c000f843 <malloc>
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	89 c3                	mov    ebx,eax
c0015ad7:	83 ec 0c             	sub    esp,0xc
c0015ada:	53                   	push   ebx
c0015adb:	e8 aa 04 01 00       	call   c0025f8a <PIC::PIC()>
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015ae6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ae9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	83 c0 08             	add    eax,0x8
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	6a 00                	push   0x0
c0015af5:	6a 00                	push   0x0
c0015af7:	6a 00                	push   0x0
c0015af9:	52                   	push   edx
c0015afa:	ff d0                	call   eax
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015b03:	74 73                	je     c0015b78 <setupInterruptController()+0x13e>
c0015b05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0d:	83 c0 0c             	add    eax,0xc
c0015b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b12:	6a 00                	push   0x0
c0015b14:	6a 00                	push   0x0
c0015b16:	6a 00                	push   0x0
c0015b18:	52                   	push   edx
c0015b19:	ff d0                	call   eax
c0015b1b:	83 c4 10             	add    esp,0x10
c0015b1e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015b22:	74 15                	je     c0015b39 <setupInterruptController()+0xff>
c0015b24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	83 c0 04             	add    eax,0x4
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	83 ec 0c             	sub    esp,0xc
c0015b31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b34:	ff d0                	call   eax
c0015b36:	83 c4 10             	add    esp,0x10
c0015b39:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015b46:	e8 f8 9c ff ff       	call   c000f843 <malloc>
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	89 c3                	mov    ebx,eax
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	53                   	push   ebx
c0015b54:	e8 d9 fe 00 00       	call   c0025a32 <APIC::APIC()>
c0015b59:	83 c4 10             	add    esp,0x10
c0015b5c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b5f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b67:	83 c0 08             	add    eax,0x8
c0015b6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6c:	6a 00                	push   0x0
c0015b6e:	6a 00                	push   0x0
c0015b70:	6a 00                	push   0x0
c0015b72:	52                   	push   edx
c0015b73:	ff d0                	call   eax
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0015b7d:	83 ec 08             	sub    esp,0x8
c0015b80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b83:	50                   	push   eax
c0015b84:	e8 d5 e8 ff ff       	call   c001445e <Device::addChild(Device*)>
c0015b89:	83 c4 10             	add    esp,0x10
c0015b8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b91:	83 c0 24             	add    eax,0x24
c0015b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b96:	6a 00                	push   0x0
c0015b98:	68 ed 53 01 c0       	push   0xc00153ed
c0015b9d:	6a 00                	push   0x0
c0015b9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba2:	ff d0                	call   eax
c0015ba4:	83 c4 10             	add    esp,0x10
c0015ba7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bac:	83 c0 24             	add    eax,0x24
c0015baf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb1:	6a 00                	push   0x0
c0015bb3:	68 ed 53 01 c0       	push   0xc00153ed
c0015bb8:	6a 01                	push   0x1
c0015bba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbd:	ff d0                	call   eax
c0015bbf:	83 c4 10             	add    esp,0x10
c0015bc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc7:	83 c0 24             	add    eax,0x24
c0015bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcc:	6a 00                	push   0x0
c0015bce:	68 0b 4d 01 c0       	push   0xc0014d0b
c0015bd3:	6a 02                	push   0x2
c0015bd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd8:	ff d0                	call   eax
c0015bda:	83 c4 10             	add    esp,0x10
c0015bdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be2:	83 c0 24             	add    eax,0x24
c0015be5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be7:	6a 00                	push   0x0
c0015be9:	68 ed 53 01 c0       	push   0xc00153ed
c0015bee:	6a 03                	push   0x3
c0015bf0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf3:	ff d0                	call   eax
c0015bf5:	83 c4 10             	add    esp,0x10
c0015bf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfd:	83 c0 24             	add    eax,0x24
c0015c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c02:	6a 00                	push   0x0
c0015c04:	68 ed 53 01 c0       	push   0xc00153ed
c0015c09:	6a 04                	push   0x4
c0015c0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0e:	ff d0                	call   eax
c0015c10:	83 c4 10             	add    esp,0x10
c0015c13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c18:	83 c0 24             	add    eax,0x24
c0015c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1d:	6a 00                	push   0x0
c0015c1f:	68 ed 53 01 c0       	push   0xc00153ed
c0015c24:	6a 05                	push   0x5
c0015c26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c29:	ff d0                	call   eax
c0015c2b:	83 c4 10             	add    esp,0x10
c0015c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c33:	83 c0 24             	add    eax,0x24
c0015c36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c38:	6a 00                	push   0x0
c0015c3a:	68 0c 54 01 c0       	push   0xc001540c
c0015c3f:	6a 06                	push   0x6
c0015c41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c44:	ff d0                	call   eax
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4e:	83 c0 24             	add    eax,0x24
c0015c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c53:	6a 00                	push   0x0
c0015c55:	68 3d 53 01 c0       	push   0xc001533d
c0015c5a:	6a 07                	push   0x7
c0015c5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5f:	ff d0                	call   eax
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c69:	83 c0 24             	add    eax,0x24
c0015c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6e:	6a 00                	push   0x0
c0015c70:	68 26 4b 01 c0       	push   0xc0014b26
c0015c75:	6a 08                	push   0x8
c0015c77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7a:	ff d0                	call   eax
c0015c7c:	83 c4 10             	add    esp,0x10
c0015c7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c84:	83 c0 24             	add    eax,0x24
c0015c87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c89:	6a 00                	push   0x0
c0015c8b:	68 ed 53 01 c0       	push   0xc00153ed
c0015c90:	6a 09                	push   0x9
c0015c92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c95:	ff d0                	call   eax
c0015c97:	83 c4 10             	add    esp,0x10
c0015c9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9f:	83 c0 24             	add    eax,0x24
c0015ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca4:	6a 00                	push   0x0
c0015ca6:	68 ed 53 01 c0       	push   0xc00153ed
c0015cab:	6a 0a                	push   0xa
c0015cad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb0:	ff d0                	call   eax
c0015cb2:	83 c4 10             	add    esp,0x10
c0015cb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cba:	83 c0 24             	add    eax,0x24
c0015cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbf:	6a 00                	push   0x0
c0015cc1:	68 ed 53 01 c0       	push   0xc00153ed
c0015cc6:	6a 0b                	push   0xb
c0015cc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ccb:	ff d0                	call   eax
c0015ccd:	83 c4 10             	add    esp,0x10
c0015cd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd5:	83 c0 24             	add    eax,0x24
c0015cd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cda:	6a 00                	push   0x0
c0015cdc:	68 ed 53 01 c0       	push   0xc00153ed
c0015ce1:	6a 0c                	push   0xc
c0015ce3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce6:	ff d0                	call   eax
c0015ce8:	83 c4 10             	add    esp,0x10
c0015ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf0:	83 c0 24             	add    eax,0x24
c0015cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf5:	6a 00                	push   0x0
c0015cf7:	68 6c 53 01 c0       	push   0xc001536c
c0015cfc:	6a 0d                	push   0xd
c0015cfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d01:	ff d0                	call   eax
c0015d03:	83 c4 10             	add    esp,0x10
c0015d06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0b:	83 c0 24             	add    eax,0x24
c0015d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d10:	6a 00                	push   0x0
c0015d12:	68 a5 53 01 c0       	push   0xc00153a5
c0015d17:	6a 0e                	push   0xe
c0015d19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1c:	ff d0                	call   eax
c0015d1e:	83 c4 10             	add    esp,0x10
c0015d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d26:	83 c0 24             	add    eax,0x24
c0015d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2b:	6a 00                	push   0x0
c0015d2d:	68 ed 53 01 c0       	push   0xc00153ed
c0015d32:	6a 0f                	push   0xf
c0015d34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d37:	ff d0                	call   eax
c0015d39:	83 c4 10             	add    esp,0x10
c0015d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d41:	83 c0 24             	add    eax,0x24
c0015d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d46:	6a 00                	push   0x0
c0015d48:	68 ed 53 01 c0       	push   0xc00153ed
c0015d4d:	6a 10                	push   0x10
c0015d4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d52:	ff d0                	call   eax
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d5c:	83 c0 24             	add    eax,0x24
c0015d5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d61:	6a 00                	push   0x0
c0015d63:	68 ed 53 01 c0       	push   0xc00153ed
c0015d68:	6a 11                	push   0x11
c0015d6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d6d:	ff d0                	call   eax
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d77:	83 c0 24             	add    eax,0x24
c0015d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7c:	6a 00                	push   0x0
c0015d7e:	68 ed 53 01 c0       	push   0xc00153ed
c0015d83:	6a 12                	push   0x12
c0015d85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d88:	ff d0                	call   eax
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d92:	83 c0 24             	add    eax,0x24
c0015d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d97:	6a 00                	push   0x0
c0015d99:	68 ed 53 01 c0       	push   0xc00153ed
c0015d9e:	6a 13                	push   0x13
c0015da0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015da3:	ff d0                	call   eax
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dad:	83 c0 24             	add    eax,0x24
c0015db0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015db2:	6a 00                	push   0x0
c0015db4:	68 ed 53 01 c0       	push   0xc00153ed
c0015db9:	6a 14                	push   0x14
c0015dbb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dbe:	ff d0                	call   eax
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dc8:	83 c0 24             	add    eax,0x24
c0015dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dcd:	6a 00                	push   0x0
c0015dcf:	68 ed 53 01 c0       	push   0xc00153ed
c0015dd4:	6a 1e                	push   0x1e
c0015dd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dd9:	ff d0                	call   eax
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015de3:	83 c0 24             	add    eax,0x24
c0015de6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015de8:	6a 00                	push   0x0
c0015dea:	68 6f c8 01 c0       	push   0xc001c86f
c0015def:	6a 60                	push   0x60
c0015df1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015df4:	ff d0                	call   eax
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dfc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dff:	c9                   	leave  
c0015e00:	c3                   	ret    
c0015e01:	90                   	nop

c0015e02 <InterruptController::convertLegacyIRQNumber(int)>:
c0015e02:	55                   	push   ebp
c0015e03:	89 e5                	mov    ebp,esp
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0b:	83 ec 0c             	sub    esp,0xc
c0015e0e:	50                   	push   eax
c0015e0f:	e8 36 e9 ff ff       	call   c001474a <Device::getName()>
c0015e14:	83 c4 10             	add    esp,0x10
c0015e17:	8a 00                	mov    al,BYTE PTR [eax]
c0015e19:	3c 41                	cmp    al,0x41
c0015e1b:	0f 94 c0             	sete   al
c0015e1e:	84 c0                	test   al,al
c0015e20:	74 28                	je     c0015e4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e22:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015e26:	7f 12                	jg     c0015e3a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015e28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e2b:	05 c0 d7 02 c0       	add    eax,0xc002d7c0
c0015e30:	8a 00                	mov    al,BYTE PTR [eax]
c0015e32:	0f b6 c0             	movzx  eax,al
c0015e35:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015e38:	eb 10                	jmp    c0015e4a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e3a:	83 ec 0c             	sub    esp,0xc
c0015e3d:	68 20 af 02 c0       	push   0xc002af20
c0015e42:	e8 9e 48 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e4d:	c9                   	leave  
c0015e4e:	c3                   	ret    
c0015e4f:	90                   	nop

c0015e50 <startGUI(void*)>:
c0015e50:	55                   	push   ebp
c0015e51:	89 e5                	mov    ebp,esp
c0015e53:	53                   	push   ebx
c0015e54:	83 ec 04             	sub    esp,0x4
c0015e57:	e8 80 80 00 00       	call   c001dedc <unlockScheduler()>
c0015e5c:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015e62:	83 ec 08             	sub    esp,0x8
c0015e65:	6a 01                	push   0x1
c0015e67:	68 8c b2 02 c0       	push   0xc002b28c
c0015e6c:	e8 a7 79 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0015e71:	83 c4 10             	add    esp,0x10
c0015e74:	83 ec 08             	sub    esp,0x8
c0015e77:	53                   	push   ebx
c0015e78:	50                   	push   eax
c0015e79:	e8 e9 7b 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015e87:	83 ec 08             	sub    esp,0x8
c0015e8a:	6a 01                	push   0x1
c0015e8c:	68 a6 b2 02 c0       	push   0xc002b2a6
c0015e91:	e8 82 79 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	83 ec 08             	sub    esp,0x8
c0015e9c:	53                   	push   ebx
c0015e9d:	50                   	push   eax
c0015e9e:	e8 c4 7b 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0015ea3:	83 c4 10             	add    esp,0x10
c0015ea6:	90                   	nop
c0015ea7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eaa:	c9                   	leave  
c0015eab:	c3                   	ret    

c0015eac <startGUIVESA(void*)>:
c0015eac:	55                   	push   ebp
c0015ead:	89 e5                	mov    ebp,esp
c0015eaf:	53                   	push   ebx
c0015eb0:	83 ec 04             	sub    esp,0x4
c0015eb3:	e8 24 80 00 00       	call   c001dedc <unlockScheduler()>
c0015eb8:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015ebe:	83 ec 08             	sub    esp,0x8
c0015ec1:	6a 01                	push   0x1
c0015ec3:	68 c0 b2 02 c0       	push   0xc002b2c0
c0015ec8:	e8 4b 79 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0015ecd:	83 c4 10             	add    esp,0x10
c0015ed0:	83 ec 08             	sub    esp,0x8
c0015ed3:	53                   	push   ebx
c0015ed4:	50                   	push   eax
c0015ed5:	e8 8d 7b 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0015ee3:	83 ec 08             	sub    esp,0x8
c0015ee6:	6a 01                	push   0x1
c0015ee8:	68 a6 b2 02 c0       	push   0xc002b2a6
c0015eed:	e8 26 79 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	83 ec 08             	sub    esp,0x8
c0015ef8:	53                   	push   ebx
c0015ef9:	50                   	push   eax
c0015efa:	e8 68 7b 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	90                   	nop
c0015f03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015f06:	c9                   	leave  
c0015f07:	c3                   	ret    

c0015f08 <sendKeyToTerminal(unsigned char)>:
c0015f08:	55                   	push   ebp
c0015f09:	89 e5                	mov    ebp,esp
c0015f0b:	83 ec 28             	sub    esp,0x28
c0015f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f11:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015f14:	a1 44 e6 02 c0       	mov    eax,ds:0xc002e644
c0015f19:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015f1d:	83 ec 08             	sub    esp,0x8
c0015f20:	52                   	push   edx
c0015f21:	50                   	push   eax
c0015f22:	e8 4d b4 ff ff       	call   c0011374 <VgaText::receiveKey(unsigned char)>
c0015f27:	83 c4 10             	add    esp,0x10
c0015f2a:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015f2e:	75 41                	jne    c0015f71 <sendKeyToTerminal(unsigned char)+0x69>
c0015f30:	e8 cc 7f 00 00       	call   c001df01 <lockStuff()>
c0015f35:	a1 40 e7 02 c0       	mov    eax,ds:0xc002e740
c0015f3a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f3d:	c7 05 40 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e740,0x0
c0015f47:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f4b:	74 1f                	je     c0015f6c <sendKeyToTerminal(unsigned char)+0x64>
c0015f4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f59:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f5c:	83 ec 0c             	sub    esp,0xc
c0015f5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f62:	e8 8b 85 00 00       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	eb db                	jmp    c0015f47 <sendKeyToTerminal(unsigned char)+0x3f>
c0015f6c:	e8 2a 83 00 00       	call   c001e29b <unlockStuff()>
c0015f71:	90                   	nop
c0015f72:	c9                   	leave  
c0015f73:	c3                   	ret    

c0015f74 <sendKeyboardToken(KeyboardToken)>:
c0015f74:	55                   	push   ebp
c0015f75:	89 e5                	mov    ebp,esp
c0015f77:	83 ec 18             	sub    esp,0x18
c0015f7a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f80:	0f b7 c0             	movzx  eax,ax
c0015f83:	83 f2 01             	xor    edx,0x1
c0015f86:	88 90 60 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd18a0],dl
c0015f8c:	a1 48 e7 02 c0       	mov    eax,ds:0xc002e748
c0015f91:	85 c0                	test   eax,eax
c0015f93:	74 24                	je     c0015fb9 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f95:	8b 0d 48 e7 02 c0    	mov    ecx,DWORD PTR ds:0xc002e748
c0015f9b:	83 ec 04             	sub    esp,0x4
c0015f9e:	68 60 e7 02 c0       	push   0xc002e760
c0015fa3:	83 ec 08             	sub    esp,0x8
c0015fa6:	89 e2                	mov    edx,esp
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	89 02                	mov    DWORD PTR [edx],eax
c0015fad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015fb0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015fb4:	ff d1                	call   ecx
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbc:	66 3d 03 02          	cmp    ax,0x203
c0015fc0:	75 07                	jne    c0015fc9 <sendKeyboardToken(KeyboardToken)+0x55>
c0015fc2:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0015fc7:	84 c0                	test   al,al
c0015fc9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015fcd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015fd0:	a0 68 eb 02 c0       	mov    al,ds:0xc002eb68
c0015fd5:	38 c2                	cmp    dl,al
c0015fd7:	74 1c                	je     c0015ff5 <sendKeyboardToken(KeyboardToken)+0x81>
c0015fd9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015fdc:	a2 68 eb 02 c0       	mov    ds:0xc002eb68,al
c0015fe1:	a0 68 eb 02 c0       	mov    al,ds:0xc002eb68
c0015fe6:	0f b6 c0             	movzx  eax,al
c0015fe9:	83 ec 0c             	sub    esp,0xc
c0015fec:	50                   	push   eax
c0015fed:	e8 e2 a5 ff ff       	call   c00105d4 <setTerminalScrollLock(bool)>
c0015ff2:	83 c4 10             	add    esp,0x10
c0015ff5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015ff8:	84 c0                	test   al,al
c0015ffa:	0f 84 ae 00 00 00    	je     c00160ae <sendKeyboardToken(KeyboardToken)+0x13a>
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 10 03          	cmp    ax,0x310
c0016007:	75 06                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x9b>
c0016009:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 11 03          	cmp    ax,0x311
c0016016:	75 06                	jne    c001601e <sendKeyboardToken(KeyboardToken)+0xaa>
c0016018:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001601e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016021:	66 3d 12 03          	cmp    ax,0x312
c0016025:	75 06                	jne    c001602d <sendKeyboardToken(KeyboardToken)+0xb9>
c0016027:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016030:	66 3d 13 03          	cmp    ax,0x313
c0016034:	75 06                	jne    c001603c <sendKeyboardToken(KeyboardToken)+0xc8>
c0016036:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001603c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603f:	66 3d 14 03          	cmp    ax,0x314
c0016043:	75 06                	jne    c001604b <sendKeyboardToken(KeyboardToken)+0xd7>
c0016045:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001604b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604e:	66 3d 15 03          	cmp    ax,0x315
c0016052:	75 06                	jne    c001605a <sendKeyboardToken(KeyboardToken)+0xe6>
c0016054:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001605a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605d:	66 3d 16 03          	cmp    ax,0x316
c0016061:	75 06                	jne    c0016069 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016063:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606c:	66 3d 17 03          	cmp    ax,0x317
c0016070:	75 06                	jne    c0016078 <sendKeyboardToken(KeyboardToken)+0x104>
c0016072:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607b:	66 3d 18 03          	cmp    ax,0x318
c001607f:	75 06                	jne    c0016087 <sendKeyboardToken(KeyboardToken)+0x113>
c0016081:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608a:	66 3d 19 03          	cmp    ax,0x319
c001608e:	75 06                	jne    c0016096 <sendKeyboardToken(KeyboardToken)+0x122>
c0016090:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016099:	66 3d 1a 03          	cmp    ax,0x31a
c001609d:	0f 85 c9 00 00 00    	jne    c001616c <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160a3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00160a9:	e9 be 00 00 00       	jmp    c001616c <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b1:	66 3d 10 03          	cmp    ax,0x310
c00160b5:	75 0a                	jne    c00160c1 <sendKeyboardToken(KeyboardToken)+0x14d>
c00160b7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00160bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c4:	66 3d 11 03          	cmp    ax,0x311
c00160c8:	75 0a                	jne    c00160d4 <sendKeyboardToken(KeyboardToken)+0x160>
c00160ca:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00160d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d7:	66 3d 12 03          	cmp    ax,0x312
c00160db:	75 0a                	jne    c00160e7 <sendKeyboardToken(KeyboardToken)+0x173>
c00160dd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ea:	66 3d 13 03          	cmp    ax,0x313
c00160ee:	75 0a                	jne    c00160fa <sendKeyboardToken(KeyboardToken)+0x186>
c00160f0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fd:	66 3d 14 03          	cmp    ax,0x314
c0016101:	75 0a                	jne    c001610d <sendKeyboardToken(KeyboardToken)+0x199>
c0016103:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016109:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001610d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016110:	66 3d 15 03          	cmp    ax,0x315
c0016114:	75 0a                	jne    c0016120 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016116:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001611c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016123:	66 3d 16 03          	cmp    ax,0x316
c0016127:	75 0a                	jne    c0016133 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016129:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001612f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016136:	66 3d 17 03          	cmp    ax,0x317
c001613a:	75 0a                	jne    c0016146 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001613c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016142:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016149:	66 3d 18 03          	cmp    ax,0x318
c001614d:	75 0a                	jne    c0016159 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001614f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016155:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615c:	66 3d 19 03          	cmp    ax,0x319
c0016160:	75 0a                	jne    c001616c <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016162:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016168:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001616c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616f:	66 3d 00 02          	cmp    ax,0x200
c0016173:	75 2c                	jne    c00161a1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016175:	a0 60 eb 02 c0       	mov    al,ds:0xc002eb60
c001617a:	83 f0 01             	xor    eax,0x1
c001617d:	84 c0                	test   al,al
c001617f:	74 20                	je     c00161a1 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016181:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c0016186:	6a 01                	push   0x1
c0016188:	6a 00                	push   0x0
c001618a:	68 50 5e 01 c0       	push   0xc0015e50
c001618f:	50                   	push   eax
c0016190:	e8 77 7e 00 00       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	c6 05 60 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb60,0x1
c001619f:	eb 33                	jmp    c00161d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00161a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a4:	66 3d 01 02          	cmp    ax,0x201
c00161a8:	75 2a                	jne    c00161d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00161aa:	a0 60 eb 02 c0       	mov    al,ds:0xc002eb60
c00161af:	83 f0 01             	xor    eax,0x1
c00161b2:	84 c0                	test   al,al
c00161b4:	74 1e                	je     c00161d4 <sendKeyboardToken(KeyboardToken)+0x260>
c00161b6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00161bb:	6a 01                	push   0x1
c00161bd:	6a 00                	push   0x0
c00161bf:	68 ac 5e 01 c0       	push   0xc0015eac
c00161c4:	50                   	push   eax
c00161c5:	e8 42 7e 00 00       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	c6 05 60 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb60,0x1
c00161d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d7:	66 3d 1d 03          	cmp    ax,0x31d
c00161db:	75 06                	jne    c00161e3 <sendKeyboardToken(KeyboardToken)+0x26f>
c00161dd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e6:	66 3d 1c 03          	cmp    ax,0x31c
c00161ea:	75 06                	jne    c00161f2 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161ec:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f5:	66 3d 1b 03          	cmp    ax,0x31b
c00161f9:	75 06                	jne    c0016201 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161fb:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016204:	66 3d 1e 03          	cmp    ax,0x31e
c0016208:	75 06                	jne    c0016210 <sendKeyboardToken(KeyboardToken)+0x29c>
c001620a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016213:	66 3d 1f 03          	cmp    ax,0x31f
c0016217:	75 06                	jne    c001621f <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016219:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001621f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016222:	66 3d 1a 03          	cmp    ax,0x31a
c0016226:	75 06                	jne    c001622e <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016228:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001622e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016232:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016235:	83 f0 01             	xor    eax,0x1
c0016238:	84 c0                	test   al,al
c001623a:	74 77                	je     c00162b3 <sendKeyboardToken(KeyboardToken)+0x33f>
c001623c:	a0 61 e8 02 c0       	mov    al,ds:0xc002e861
c0016241:	84 c0                	test   al,al
c0016243:	74 41                	je     c0016286 <sendKeyboardToken(KeyboardToken)+0x312>
c0016245:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016249:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001624d:	74 2b                	je     c001627a <sendKeyboardToken(KeyboardToken)+0x306>
c001624f:	8b 15 64 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb64
c0016255:	89 d0                	mov    eax,edx
c0016257:	c1 e0 02             	shl    eax,0x2
c001625a:	01 d0                	add    eax,edx
c001625c:	01 c0                	add    eax,eax
c001625e:	a3 64 eb 02 c0       	mov    ds:0xc002eb64,eax
c0016263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016266:	0f b7 c0             	movzx  eax,ax
c0016269:	8d 50 d0             	lea    edx,[eax-0x30]
c001626c:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c0016271:	01 d0                	add    eax,edx
c0016273:	a3 64 eb 02 c0       	mov    ds:0xc002eb64,eax
c0016278:	eb 6d                	jmp    c00162e7 <sendKeyboardToken(KeyboardToken)+0x373>
c001627a:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c0016284:	eb 61                	jmp    c00162e7 <sendKeyboardToken(KeyboardToken)+0x373>
c0016286:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c001628b:	85 c0                	test   eax,eax
c001628d:	74 18                	je     c00162a7 <sendKeyboardToken(KeyboardToken)+0x333>
c001628f:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c0016294:	0f b6 c0             	movzx  eax,al
c0016297:	83 ec 0c             	sub    esp,0xc
c001629a:	50                   	push   eax
c001629b:	e8 68 fc ff ff       	call   c0015f08 <sendKeyToTerminal(unsigned char)>
c00162a0:	83 c4 10             	add    esp,0x10
c00162a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162a7:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c00162b1:	eb 34                	jmp    c00162e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00162b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b6:	66 3d 01 01          	cmp    ax,0x101
c00162ba:	75 2b                	jne    c00162e7 <sendKeyboardToken(KeyboardToken)+0x373>
c00162bc:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c00162c1:	85 c0                	test   eax,eax
c00162c3:	74 18                	je     c00162dd <sendKeyboardToken(KeyboardToken)+0x369>
c00162c5:	a1 64 eb 02 c0       	mov    eax,ds:0xc002eb64
c00162ca:	0f b6 c0             	movzx  eax,al
c00162cd:	83 ec 0c             	sub    esp,0xc
c00162d0:	50                   	push   eax
c00162d1:	e8 32 fc ff ff       	call   c0015f08 <sendKeyToTerminal(unsigned char)>
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162dd:	c7 05 64 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb64,0x0
c00162e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162ea:	83 f0 01             	xor    eax,0x1
c00162ed:	84 c0                	test   al,al
c00162ef:	74 4c                	je     c001633d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162f4:	83 f0 01             	xor    eax,0x1
c00162f7:	84 c0                	test   al,al
c00162f9:	74 42                	je     c001633d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162fb:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0016300:	83 f0 01             	xor    eax,0x1
c0016303:	84 c0                	test   al,al
c0016305:	74 36                	je     c001633d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630a:	66 83 f8 1f          	cmp    ax,0x1f
c001630e:	76 09                	jbe    c0016319 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016313:	66 83 f8 7e          	cmp    ax,0x7e
c0016317:	76 12                	jbe    c001632b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631c:	66 83 f8 0a          	cmp    ax,0xa
c0016320:	74 09                	je     c001632b <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016325:	66 83 f8 08          	cmp    ax,0x8
c0016329:	75 12                	jne    c001633d <sendKeyboardToken(KeyboardToken)+0x3c9>
c001632b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632e:	0f b6 c0             	movzx  eax,al
c0016331:	83 ec 0c             	sub    esp,0xc
c0016334:	50                   	push   eax
c0016335:	e8 ce fb ff ff       	call   c0015f08 <sendKeyToTerminal(unsigned char)>
c001633a:	83 c4 10             	add    esp,0x10
c001633d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016340:	83 f0 01             	xor    eax,0x1
c0016343:	84 c0                	test   al,al
c0016345:	74 4f                	je     c0016396 <sendKeyboardToken(KeyboardToken)+0x422>
c0016347:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001634a:	83 f0 01             	xor    eax,0x1
c001634d:	84 c0                	test   al,al
c001634f:	74 45                	je     c0016396 <sendKeyboardToken(KeyboardToken)+0x422>
c0016351:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0016356:	84 c0                	test   al,al
c0016358:	74 3c                	je     c0016396 <sendKeyboardToken(KeyboardToken)+0x422>
c001635a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001635d:	66 83 f8 3f          	cmp    ax,0x3f
c0016361:	76 33                	jbe    c0016396 <sendKeyboardToken(KeyboardToken)+0x422>
c0016363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016366:	66 83 f8 7f          	cmp    ax,0x7f
c001636a:	77 2a                	ja     c0016396 <sendKeyboardToken(KeyboardToken)+0x422>
c001636c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636f:	88 c2                	mov    dl,al
c0016371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016374:	66 83 f8 5f          	cmp    ax,0x5f
c0016378:	76 04                	jbe    c001637e <sendKeyboardToken(KeyboardToken)+0x40a>
c001637a:	b0 20                	mov    al,0x20
c001637c:	eb 02                	jmp    c0016380 <sendKeyboardToken(KeyboardToken)+0x40c>
c001637e:	b0 00                	mov    al,0x0
c0016380:	29 c2                	sub    edx,eax
c0016382:	88 d0                	mov    al,dl
c0016384:	83 e8 40             	sub    eax,0x40
c0016387:	0f b6 c0             	movzx  eax,al
c001638a:	83 ec 0c             	sub    esp,0xc
c001638d:	50                   	push   eax
c001638e:	e8 75 fb ff ff       	call   c0015f08 <sendKeyToTerminal(unsigned char)>
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016399:	66 3d 00 03          	cmp    ax,0x300
c001639d:	75 0f                	jne    c00163ae <sendKeyboardToken(KeyboardToken)+0x43a>
c001639f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00163a2:	83 f0 01             	xor    eax,0x1
c00163a5:	84 c0                	test   al,al
c00163a7:	74 05                	je     c00163ae <sendKeyboardToken(KeyboardToken)+0x43a>
c00163a9:	e8 5b aa ff ff       	call   c0010e09 <doTerminalCycle()>
c00163ae:	90                   	nop
c00163af:	c9                   	leave  
c00163b0:	c3                   	ret    

c00163b1 <clearInternalKeybuffer(VgaText*)>:
c00163b1:	55                   	push   ebp
c00163b2:	89 e5                	mov    ebp,esp
c00163b4:	83 ec 08             	sub    esp,0x8
c00163b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ba:	05 34 11 00 00       	add    eax,0x1134
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	50                   	push   eax
c00163c3:	e8 cc a3 fe ff       	call   c0000794 <strlen>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163ce:	81 c2 34 11 00 00    	add    edx,0x1134
c00163d4:	83 ec 04             	sub    esp,0x4
c00163d7:	50                   	push   eax
c00163d8:	6a 00                	push   0x0
c00163da:	52                   	push   edx
c00163db:	e8 98 a3 fe ff       	call   c0000778 <memset>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	90                   	nop
c00163e4:	c9                   	leave  
c00163e5:	c3                   	ret    

c00163e6 <readKeyboard(VgaText*, char*, unsigned long)>:
c00163e6:	55                   	push   ebp
c00163e7:	89 e5                	mov    ebp,esp
c00163e9:	83 ec 18             	sub    esp,0x18
c00163ec:	fb                   	sti    
c00163ed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163f4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163f8:	0f 84 8a 00 00 00    	je     c0016488 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016401:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016407:	84 c0                	test   al,al
c0016409:	75 11                	jne    c001641c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001640b:	e8 ca 7a 00 00       	call   c001deda <lockScheduler()>
c0016410:	e8 01 7e 00 00       	call   c001e216 <schedule()>
c0016415:	e8 c2 7a 00 00       	call   c001dedc <unlockScheduler()>
c001641a:	eb e2                	jmp    c00163fe <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001641c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001641f:	8d 50 01             	lea    edx,[eax+0x1]
c0016422:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016425:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016428:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001642e:	88 10                	mov    BYTE PTR [eax],dl
c0016430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016433:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016439:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001643c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001643f:	05 34 11 00 00       	add    eax,0x1134
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 47 a3 fe ff       	call   c0000794 <strlen>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016453:	81 c2 34 11 00 00    	add    edx,0x1134
c0016459:	8d 4a 01             	lea    ecx,[edx+0x1]
c001645c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001645f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016465:	83 ec 04             	sub    esp,0x4
c0016468:	50                   	push   eax
c0016469:	51                   	push   ecx
c001646a:	52                   	push   edx
c001646b:	e8 0c a2 fe ff       	call   c000067c <memmove>
c0016470:	83 c4 10             	add    esp,0x10
c0016473:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0016476:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016479:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001647d:	0f 85 71 ff ff ff    	jne    c00163f4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016486:	eb 03                	jmp    c001648b <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001648b:	c9                   	leave  
c001648c:	c3                   	ret    
c001648d:	90                   	nop

c001648e <Keyboard::Keyboard(char const*)>:
c001648e:	83 ec 0c             	sub    esp,0xc
c0016491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016495:	83 ec 08             	sub    esp,0x8
c0016498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649c:	50                   	push   eax
c001649d:	e8 ac e1 ff ff       	call   c001464e <Device::Device(char const*)>
c00164a2:	83 c4 10             	add    esp,0x10
c00164a5:	ba e4 b2 02 c0       	mov    edx,0xc002b2e4
c00164aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ae:	89 10                	mov    DWORD PTR [eax],edx
c00164b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164be:	c6 05 44 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e744,0x1
c00164c5:	90                   	nop
c00164c6:	83 c4 0c             	add    esp,0xc
c00164c9:	c3                   	ret    

c00164ca <Keyboard::~Keyboard()>:
c00164ca:	83 ec 0c             	sub    esp,0xc
c00164cd:	ba e4 b2 02 c0       	mov    edx,0xc002b2e4
c00164d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d6:	89 10                	mov    DWORD PTR [eax],edx
c00164d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164dc:	83 ec 0c             	sub    esp,0xc
c00164df:	50                   	push   eax
c00164e0:	e8 4b de ff ff       	call   c0014330 <Device::~Device()>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	90                   	nop
c00164e9:	83 c4 0c             	add    esp,0xc
c00164ec:	c3                   	ret    
c00164ed:	90                   	nop

c00164ee <Keyboard::~Keyboard()>:
c00164ee:	83 ec 0c             	sub    esp,0xc
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f8:	e8 cd ff ff ff       	call   c00164ca <Keyboard::~Keyboard()>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	83 ec 08             	sub    esp,0x8
c0016503:	68 5c 01 00 00       	push   0x15c
c0016508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001650c:	e8 47 ca ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	83 c4 0c             	add    esp,0xc
c0016517:	c3                   	ret    

c0016518 <LogicalDisk::close(int, int, void*)>:
c0016518:	83 c8 ff             	or     eax,0xffffffff
c001651b:	c3                   	ret    

c001651c <LogicalDisk::~LogicalDisk()>:
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c0016524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016528:	89 10                	mov    DWORD PTR [eax],edx
c001652a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652e:	83 ec 0c             	sub    esp,0xc
c0016531:	50                   	push   eax
c0016532:	e8 f9 dd ff ff       	call   c0014330 <Device::~Device()>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	90                   	nop
c001653b:	83 c4 0c             	add    esp,0xc
c001653e:	c3                   	ret    
c001653f:	90                   	nop

c0016540 <LogicalDisk::~LogicalDisk()>:
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	83 ec 0c             	sub    esp,0xc
c0016546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001654a:	e8 cd ff ff ff       	call   c001651c <LogicalDisk::~LogicalDisk()>
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	83 ec 08             	sub    esp,0x8
c0016555:	68 74 01 00 00       	push   0x174
c001655a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655e:	e8 f5 c9 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	83 c4 0c             	add    esp,0xc
c0016569:	c3                   	ret    

c001656a <LogicalDisk::open(int, int, void*)>:
c001656a:	83 ec 18             	sub    esp,0x18
c001656d:	68 10 b3 02 c0       	push   0xc002b310
c0016572:	e8 6e 41 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0016577:	83 c8 ff             	or     eax,0xffffffff
c001657a:	83 c4 1c             	add    esp,0x1c
c001657d:	c3                   	ret    

c001657e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001657e:	53                   	push   ebx
c001657f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016587:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001658b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016591:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016597:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001659d:	77 10                	ja     c00165af <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001659f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165a5:	89 d3                	mov    ebx,edx
c00165a7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165ad:	72 05                	jb     c00165b4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165af:	83 c8 ff             	or     eax,0xffffffff
c00165b2:	89 c2                	mov    edx,eax
c00165b4:	5b                   	pop    ebx
c00165b5:	c3                   	ret    

c00165b6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165b6:	56                   	push   esi
c00165b7:	83 c8 ff             	or     eax,0xffffffff
c00165ba:	53                   	push   ebx
c00165bb:	89 c2                	mov    edx,eax
c00165bd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165c1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165c9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165cf:	77 27                	ja     c00165f8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165d1:	89 d8                	mov    eax,ebx
c00165d3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165d9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e4:	89 c2                	mov    edx,eax
c00165e6:	73 10                	jae    c00165f8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165e8:	89 c8                	mov    eax,ecx
c00165ea:	89 da                	mov    edx,ebx
c00165ec:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165f2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165f8:	5b                   	pop    ebx
c00165f9:	5e                   	pop    esi
c00165fa:	c3                   	ret    
c00165fb:	90                   	nop

c00165fc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165fc:	83 ec 1c             	sub    esp,0x1c
c00165ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016603:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016607:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001660b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001660f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016613:	89 04 24             	mov    DWORD PTR [esp],eax
c0016616:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001661a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001661e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016622:	83 ec 08             	sub    esp,0x8
c0016625:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016629:	50                   	push   eax
c001662a:	e8 1f e0 ff ff       	call   c001464e <Device::Device(char const*)>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	ba 94 b3 02 c0       	mov    edx,0xc002b394
c0016637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663b:	89 10                	mov    DWORD PTR [eax],edx
c001663d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016641:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016657:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016661:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016665:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016669:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001666d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016673:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016679:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001667d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016680:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016684:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001668a:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016698:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001669e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166ac:	90                   	nop
c00166ad:	83 c4 1c             	add    esp,0x1c
c00166b0:	c3                   	ret    
c00166b1:	90                   	nop

c00166b2 <LogicalDisk::assignDriveLetter()>:
c00166b2:	55                   	push   ebp
c00166b3:	57                   	push   edi
c00166b4:	56                   	push   esi
c00166b5:	53                   	push   ebx
c00166b6:	83 ec 14             	sub    esp,0x14
c00166b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166bd:	8b 3d 80 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb80
c00166c3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166c9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166cd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166d3:	8b 3d 84 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb84
c00166d9:	3c 01                	cmp    al,0x1
c00166db:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166e3:	19 c0                	sbb    eax,eax
c00166e5:	83 e0 02             	and    eax,0x2
c00166e8:	83 c0 41             	add    eax,0x41
c00166eb:	0f be e8             	movsx  ebp,al
c00166ee:	3c 43                	cmp    al,0x43
c00166f0:	75 10                	jne    c0016702 <LogicalDisk::assignDriveLetter()+0x50>
c00166f2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166f9:	75 5d                	jne    c0016758 <LogicalDisk::assignDriveLetter()+0xa6>
c00166fb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016700:	75 56                	jne    c0016758 <LogicalDisk::assignDriveLetter()+0xa6>
c0016702:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016705:	ba 01 00 00 00       	mov    edx,0x1
c001670a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001670e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016712:	d3 e2                	shl    edx,cl
c0016714:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016718:	89 d7                	mov    edi,edx
c001671a:	89 d6                	mov    esi,edx
c001671c:	c1 ff 1f             	sar    edi,0x1f
c001671f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016723:	21 f9                	and    ecx,edi
c0016725:	09 d1                	or     ecx,edx
c0016727:	75 2f                	jne    c0016758 <LogicalDisk::assignDriveLetter()+0xa6>
c0016729:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001672d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016731:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016737:	09 f2                	or     edx,esi
c0016739:	89 15 80 eb 02 c0    	mov    DWORD PTR ds:0xc002eb80,edx
c001673f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016743:	09 fa                	or     edx,edi
c0016745:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016749:	89 15 84 eb 02 c0    	mov    DWORD PTR ds:0xc002eb84,edx
c001674f:	89 1c bd a0 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1460],ebx
c0016756:	eb 08                	jmp    c0016760 <LogicalDisk::assignDriveLetter()+0xae>
c0016758:	45                   	inc    ebp
c0016759:	40                   	inc    eax
c001675a:	3c 5b                	cmp    al,0x5b
c001675c:	75 90                	jne    c00166ee <LogicalDisk::assignDriveLetter()+0x3c>
c001675e:	31 c0                	xor    eax,eax
c0016760:	83 c4 14             	add    esp,0x14
c0016763:	5b                   	pop    ebx
c0016764:	5e                   	pop    esi
c0016765:	5f                   	pop    edi
c0016766:	5d                   	pop    ebp
c0016767:	c3                   	ret    

c0016768 <LogicalDisk::mount()>:
c0016768:	56                   	push   esi
c0016769:	53                   	push   ebx
c001676a:	51                   	push   ecx
c001676b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001676f:	8b 1d f8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6f8
c0016775:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001677f:	85 db                	test   ebx,ebx
c0016781:	74 50                	je     c00167d3 <LogicalDisk::mount()+0x6b>
c0016783:	e8 3d 77 00 00       	call   c001dec5 <getIRQNestingLevel()>
c0016788:	52                   	push   edx
c0016789:	52                   	push   edx
c001678a:	50                   	push   eax
c001678b:	68 34 b3 02 c0       	push   0xc002b334
c0016790:	e8 a3 c8 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0016795:	83 c4 0c             	add    esp,0xc
c0016798:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001679f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167a1:	83 e8 41             	sub    eax,0x41
c00167a4:	50                   	push   eax
c00167a5:	56                   	push   esi
c00167a6:	53                   	push   ebx
c00167a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	84 c0                	test   al,al
c00167af:	74 08                	je     c00167b9 <LogicalDisk::mount()+0x51>
c00167b1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167b7:	eb 1c                	jmp    c00167d5 <LogicalDisk::mount()+0x6d>
c00167b9:	e8 07 77 00 00       	call   c001dec5 <getIRQNestingLevel()>
c00167be:	51                   	push   ecx
c00167bf:	51                   	push   ecx
c00167c0:	50                   	push   eax
c00167c1:	68 4f b3 02 c0       	push   0xc002b34f
c00167c6:	e8 6d c8 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00167cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	eb ac                	jmp    c001677f <LogicalDisk::mount()+0x17>
c00167d3:	31 c0                	xor    eax,eax
c00167d5:	5a                   	pop    edx
c00167d6:	5b                   	pop    ebx
c00167d7:	5e                   	pop    esi
c00167d8:	c3                   	ret    
c00167d9:	90                   	nop

c00167da <LogicalDisk::unmount()>:
c00167da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167e8:	c3                   	ret    
c00167e9:	90                   	nop

c00167ea <LogicalDisk::eject()>:
c00167ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00167f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fa:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167fd:	90                   	nop

c00167fe <LogicalDisk::unassignDriveLetter()>:
c00167fe:	57                   	push   edi
c00167ff:	56                   	push   esi
c0016800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016804:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001680b:	84 c9                	test   cl,cl
c001680d:	75 0f                	jne    c001681e <LogicalDisk::unassignDriveLetter()+0x20>
c001680f:	c7 44 24 0c 6a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b36a
c0016817:	5e                   	pop    esi
c0016818:	5f                   	pop    edi
c0016819:	e9 c7 3e 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c001681e:	83 e9 41             	sub    ecx,0x41
c0016821:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016828:	b8 01 00 00 00       	mov    eax,0x1
c001682d:	c7 04 8d a0 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1460],0x0
c0016838:	d3 e0                	shl    eax,cl
c001683a:	89 c7                	mov    edi,eax
c001683c:	f7 d0                	not    eax
c001683e:	c1 ff 1f             	sar    edi,0x1f
c0016841:	21 05 80 eb 02 c0    	and    DWORD PTR ds:0xc002eb80,eax
c0016847:	89 fe                	mov    esi,edi
c0016849:	f7 d6                	not    esi
c001684b:	21 35 84 eb 02 c0    	and    DWORD PTR ds:0xc002eb84,esi
c0016851:	5e                   	pop    esi
c0016852:	5f                   	pop    edi
c0016853:	c3                   	ret    

c0016854 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016854:	57                   	push   edi
c0016855:	56                   	push   esi
c0016856:	53                   	push   ebx
c0016857:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001685b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001685f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016867:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001686d:	77 41                	ja     c00168b0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001686f:	99                   	cdq    
c0016870:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016876:	01 c8                	add    eax,ecx
c0016878:	11 da                	adc    edx,ebx
c001687a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016880:	19 d7                	sbb    edi,edx
c0016882:	72 33                	jb     c00168b7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016884:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001688a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016894:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016898:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001689e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168a8:	5b                   	pop    ebx
c00168a9:	5e                   	pop    esi
c00168aa:	5f                   	pop    edi
c00168ab:	e9 b0 0a 00 00       	jmp    c0017360 <VCache::read(unsigned long long, int, void*)>
c00168b0:	b8 05 00 00 00       	mov    eax,0x5
c00168b5:	eb 05                	jmp    c00168bc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168b7:	b8 07 00 00 00       	mov    eax,0x7
c00168bc:	5b                   	pop    ebx
c00168bd:	5e                   	pop    esi
c00168be:	5f                   	pop    edi
c00168bf:	c3                   	ret    

c00168c0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168c0:	57                   	push   edi
c00168c1:	56                   	push   esi
c00168c2:	53                   	push   ebx
c00168c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168d9:	77 41                	ja     c001691c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168db:	99                   	cdq    
c00168dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168e2:	01 c8                	add    eax,ecx
c00168e4:	11 da                	adc    edx,ebx
c00168e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168ec:	19 d7                	sbb    edi,edx
c00168ee:	72 33                	jb     c0016923 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016900:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016904:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001690a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016910:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016914:	5b                   	pop    ebx
c0016915:	5e                   	pop    esi
c0016916:	5f                   	pop    edi
c0016917:	e9 4e 09 00 00       	jmp    c001726a <VCache::write(unsigned long long, int, void*)>
c001691c:	b8 05 00 00 00       	mov    eax,0x5
c0016921:	eb 05                	jmp    c0016928 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016923:	b8 07 00 00 00       	mov    eax,0x7
c0016928:	5b                   	pop    ebx
c0016929:	5e                   	pop    esi
c001692a:	5f                   	pop    edi
c001692b:	c3                   	ret    

c001692c <Mouse::Mouse(char const*)>:
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016933:	83 ec 08             	sub    esp,0x8
c0016936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693a:	50                   	push   eax
c001693b:	e8 0e dd ff ff       	call   c001464e <Device::Device(char const*)>
c0016940:	83 c4 10             	add    esp,0x10
c0016943:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c0016948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001694c:	89 10                	mov    DWORD PTR [eax],edx
c001694e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016952:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001695c:	90                   	nop
c001695d:	83 c4 0c             	add    esp,0xc
c0016960:	c3                   	ret    
c0016961:	90                   	nop

c0016962 <Mouse::~Mouse()>:
c0016962:	83 ec 0c             	sub    esp,0xc
c0016965:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c001696a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001696e:	89 10                	mov    DWORD PTR [eax],edx
c0016970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	50                   	push   eax
c0016978:	e8 b3 d9 ff ff       	call   c0014330 <Device::~Device()>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	90                   	nop
c0016981:	83 c4 0c             	add    esp,0xc
c0016984:	c3                   	ret    
c0016985:	90                   	nop

c0016986 <Mouse::~Mouse()>:
c0016986:	83 ec 0c             	sub    esp,0xc
c0016989:	83 ec 0c             	sub    esp,0xc
c001698c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016990:	e8 cd ff ff ff       	call   c0016962 <Mouse::~Mouse()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	83 ec 08             	sub    esp,0x8
c001699b:	68 58 01 00 00       	push   0x158
c00169a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a4:	e8 af c5 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	83 c4 0c             	add    esp,0xc
c00169af:	c3                   	ret    

c00169b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169b0:	55                   	push   ebp
c00169b1:	57                   	push   edi
c00169b2:	56                   	push   esi
c00169b3:	53                   	push   ebx
c00169b4:	81 ec 28 01 00 00    	sub    esp,0x128
c00169ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00169c1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00169c8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169cf:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169de:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169e5:	e8 60 dd ff ff       	call   c001474a <Device::getName()>
c00169ea:	5a                   	pop    edx
c00169eb:	59                   	pop    ecx
c00169ec:	50                   	push   eax
c00169ed:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169f1:	55                   	push   ebp
c00169f2:	e8 3d 9e fe ff       	call   c0000834 <strcpy>
c00169f7:	5b                   	pop    ebx
c00169f8:	58                   	pop    eax
c00169f9:	68 e4 b3 02 c0       	push   0xc002b3e4
c00169fe:	55                   	push   ebp
c00169ff:	e8 70 9f fe ff       	call   c0000974 <strcat>
c0016a04:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a0b:	e8 33 8e ff ff       	call   c000f843 <malloc>
c0016a10:	83 c4 0c             	add    esp,0xc
c0016a13:	89 c3                	mov    ebx,eax
c0016a15:	57                   	push   edi
c0016a16:	56                   	push   esi
c0016a17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a1f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a26:	55                   	push   ebp
c0016a27:	50                   	push   eax
c0016a28:	e8 cf fb ff ff       	call   c00165fc <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a2d:	83 c4 14             	add    esp,0x14
c0016a30:	53                   	push   ebx
c0016a31:	e8 7c fc ff ff       	call   c00166b2 <LogicalDisk::assignDriveLetter()>
c0016a36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a39:	89 c6                	mov    esi,eax
c0016a3b:	e8 28 fd ff ff       	call   c0016768 <LogicalDisk::mount()>
c0016a40:	58                   	pop    eax
c0016a41:	5a                   	pop    edx
c0016a42:	53                   	push   ebx
c0016a43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a4a:	e8 0f da ff ff       	call   c001445e <Device::addChild(Device*)>
c0016a4f:	59                   	pop    ecx
c0016a50:	89 f0                	mov    eax,esi
c0016a52:	5b                   	pop    ebx
c0016a53:	0f be f0             	movsx  esi,al
c0016a56:	56                   	push   esi
c0016a57:	68 ef b3 02 c0       	push   0xc002b3ef
c0016a5c:	e8 d7 c5 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0016a61:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a67:	5b                   	pop    ebx
c0016a68:	5e                   	pop    esi
c0016a69:	5f                   	pop    edi
c0016a6a:	5d                   	pop    ebp
c0016a6b:	c3                   	ret    

c0016a6c <createPartitionsForDisk(PhysicalDisk*)>:
c0016a6c:	55                   	push   ebp
c0016a6d:	57                   	push   edi
c0016a6e:	56                   	push   esi
c0016a6f:	53                   	push   ebx
c0016a70:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a76:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a7d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a83:	3d 00 02 00 00       	cmp    eax,0x200
c0016a88:	74 27                	je     c0016ab1 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a8a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a90:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a96:	83 ec 10             	sub    esp,0x10
c0016a99:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a9d:	99                   	cdq    
c0016a9e:	c1 e6 0a             	shl    esi,0xa
c0016aa1:	52                   	push   edx
c0016aa2:	89 fd                	mov    ebp,edi
c0016aa4:	50                   	push   eax
c0016aa5:	55                   	push   ebp
c0016aa6:	56                   	push   esi
c0016aa7:	e8 10 00 01 00       	call   c0026abc <__udivdi3>
c0016aac:	e9 b1 00 00 00       	jmp    c0016b62 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ab1:	83 ec 0c             	sub    esp,0xc
c0016ab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab6:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016aba:	56                   	push   esi
c0016abb:	6a 01                	push   0x1
c0016abd:	6a 00                	push   0x0
c0016abf:	6a 00                	push   0x0
c0016ac1:	53                   	push   ebx
c0016ac2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016ac5:	83 c4 20             	add    esp,0x20
c0016ac8:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ad0:	75 0a                	jne    c0016adc <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016ad2:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016ada:	74 2c                	je     c0016b08 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016adc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ae2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ae8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aee:	83 ec 10             	sub    esp,0x10
c0016af1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016af5:	89 f7                	mov    edi,esi
c0016af7:	c1 e0 0a             	shl    eax,0xa
c0016afa:	c1 ff 1f             	sar    edi,0x1f
c0016afd:	57                   	push   edi
c0016afe:	56                   	push   esi
c0016aff:	52                   	push   edx
c0016b00:	50                   	push   eax
c0016b01:	e8 b6 ff 00 00       	call   c0026abc <__udivdi3>
c0016b06:	eb 5a                	jmp    c0016b62 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b08:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b0f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b16:	83 e1 7f             	and    ecx,0x7f
c0016b19:	83 e0 7f             	and    eax,0x7f
c0016b1c:	01 c1                	add    ecx,eax
c0016b1e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b25:	83 e0 7f             	and    eax,0x7f
c0016b28:	01 c1                	add    ecx,eax
c0016b2a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b31:	83 e0 7f             	and    eax,0x7f
c0016b34:	00 c1                	add    cl,al
c0016b36:	74 41                	je     c0016b79 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b38:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b3e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b44:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b4a:	83 ec 10             	sub    esp,0x10
c0016b4d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b51:	89 f7                	mov    edi,esi
c0016b53:	c1 e0 0a             	shl    eax,0xa
c0016b56:	c1 ff 1f             	sar    edi,0x1f
c0016b59:	57                   	push   edi
c0016b5a:	56                   	push   esi
c0016b5b:	52                   	push   edx
c0016b5c:	50                   	push   eax
c0016b5d:	e8 5a ff 00 00       	call   c0026abc <__udivdi3>
c0016b62:	83 c4 14             	add    esp,0x14
c0016b65:	52                   	push   edx
c0016b66:	50                   	push   eax
c0016b67:	6a 00                	push   0x0
c0016b69:	6a 00                	push   0x0
c0016b6b:	53                   	push   ebx
c0016b6c:	e8 3f fe ff ff       	call   c00169b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b71:	83 c4 20             	add    esp,0x20
c0016b74:	e9 79 01 00 00       	jmp    c0016cf2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b79:	89 f0                	mov    eax,esi
c0016b7b:	31 f6                	xor    esi,esi
c0016b7d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b84:	75 02                	jne    c0016b88 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b86:	89 f1                	mov    ecx,esi
c0016b88:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b8f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b96:	c1 e2 08             	shl    edx,0x8
c0016b99:	c1 e7 10             	shl    edi,0x10
c0016b9c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ba4:	09 fa                	or     edx,edi
c0016ba6:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bae:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bb5:	83 c0 10             	add    eax,0x10
c0016bb8:	09 fa                	or     edx,edi
c0016bba:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016bc1:	c1 e7 18             	shl    edi,0x18
c0016bc4:	09 fa                	or     edx,edi
c0016bc6:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bcd:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bd1:	c1 e7 10             	shl    edi,0x10
c0016bd4:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bdb:	c1 e2 08             	shl    edx,0x8
c0016bde:	09 fa                	or     edx,edi
c0016be0:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016be7:	09 fa                	or     edx,edi
c0016be9:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bf0:	c1 e7 18             	shl    edi,0x18
c0016bf3:	09 fa                	or     edx,edi
c0016bf5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bf9:	46                   	inc    esi
c0016bfa:	83 fe 04             	cmp    esi,0x4
c0016bfd:	0f 85 7a ff ff ff    	jne    c0016b7d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c07:	83 f0 01             	xor    eax,0x1
c0016c0a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c0e:	75 57                	jne    c0016c67 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c14:	83 f0 01             	xor    eax,0x1
c0016c17:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c1b:	75 4a                	jne    c0016c67 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c1d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c29:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c31:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c37:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c3d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c43:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c47:	89 f7                	mov    edi,esi
c0016c49:	c1 e0 0a             	shl    eax,0xa
c0016c4c:	c1 ff 1f             	sar    edi,0x1f
c0016c4f:	57                   	push   edi
c0016c50:	56                   	push   esi
c0016c51:	52                   	push   edx
c0016c52:	50                   	push   eax
c0016c53:	e8 64 fe 00 00       	call   c0026abc <__udivdi3>
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c63:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c67:	84 c9                	test   cl,cl
c0016c69:	74 53                	je     c0016cbe <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c6b:	0f b6 c9             	movzx  ecx,cl
c0016c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c76:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c7a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c86:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c8a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c9e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016ca2:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016ca6:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016caa:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cb6:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cba:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016cbe:	31 ed                	xor    ebp,ebp
c0016cc0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cc4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cc8:	89 f8                	mov    eax,edi
c0016cca:	09 f0                	or     eax,esi
c0016ccc:	74 1e                	je     c0016cec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016cd2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cd6:	89 d1                	mov    ecx,edx
c0016cd8:	09 c1                	or     ecx,eax
c0016cda:	74 10                	je     c0016cec <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cdc:	83 ec 0c             	sub    esp,0xc
c0016cdf:	57                   	push   edi
c0016ce0:	56                   	push   esi
c0016ce1:	52                   	push   edx
c0016ce2:	50                   	push   eax
c0016ce3:	53                   	push   ebx
c0016ce4:	e8 c7 fc ff ff       	call   c00169b0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ce9:	83 c4 20             	add    esp,0x20
c0016cec:	45                   	inc    ebp
c0016ced:	83 fd 04             	cmp    ebp,0x4
c0016cf0:	75 ce                	jne    c0016cc0 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cf2:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cf8:	5b                   	pop    ebx
c0016cf9:	5e                   	pop    esi
c0016cfa:	5f                   	pop    edi
c0016cfb:	5d                   	pop    ebp
c0016cfc:	c3                   	ret    
c0016cfd:	90                   	nop

c0016cfe <Serial::Serial(char const*)>:
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d05:	83 ec 08             	sub    esp,0x8
c0016d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0c:	50                   	push   eax
c0016d0d:	e8 3c d9 ff ff       	call   c001464e <Device::Device(char const*)>
c0016d12:	83 c4 10             	add    esp,0x10
c0016d15:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0016d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1e:	89 10                	mov    DWORD PTR [eax],edx
c0016d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d24:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d2e:	90                   	nop
c0016d2f:	83 c4 0c             	add    esp,0xc
c0016d32:	c3                   	ret    
c0016d33:	90                   	nop

c0016d34 <Serial::~Serial()>:
c0016d34:	83 ec 0c             	sub    esp,0xc
c0016d37:	ba 1c b4 02 c0       	mov    edx,0xc002b41c
c0016d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d40:	89 10                	mov    DWORD PTR [eax],edx
c0016d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	50                   	push   eax
c0016d4a:	e8 e1 d5 ff ff       	call   c0014330 <Device::~Device()>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	90                   	nop
c0016d53:	83 c4 0c             	add    esp,0xc
c0016d56:	c3                   	ret    
c0016d57:	90                   	nop

c0016d58 <Serial::~Serial()>:
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	83 ec 0c             	sub    esp,0xc
c0016d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d62:	e8 cd ff ff ff       	call   c0016d34 <Serial::~Serial()>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	83 ec 08             	sub    esp,0x8
c0016d6d:	68 58 01 00 00       	push   0x158
c0016d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d76:	e8 dd c1 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	83 c4 0c             	add    esp,0xc
c0016d81:	c3                   	ret    

c0016d82 <Timer::Timer(char const*)>:
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d89:	83 ec 08             	sub    esp,0x8
c0016d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d90:	50                   	push   eax
c0016d91:	e8 b8 d8 ff ff       	call   c001464e <Device::Device(char const*)>
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c0016d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da2:	89 10                	mov    DWORD PTR [eax],edx
c0016da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da8:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016db2:	90                   	nop
c0016db3:	83 c4 0c             	add    esp,0xc
c0016db6:	c3                   	ret    
c0016db7:	90                   	nop

c0016db8 <Timer::~Timer()>:
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	ba 60 b4 02 c0       	mov    edx,0xc002b460
c0016dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc4:	89 10                	mov    DWORD PTR [eax],edx
c0016dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	50                   	push   eax
c0016dce:	e8 5d d5 ff ff       	call   c0014330 <Device::~Device()>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	90                   	nop
c0016dd7:	83 c4 0c             	add    esp,0xc
c0016dda:	c3                   	ret    
c0016ddb:	90                   	nop

c0016ddc <Timer::~Timer()>:
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	83 ec 0c             	sub    esp,0xc
c0016de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de6:	e8 cd ff ff ff       	call   c0016db8 <Timer::~Timer()>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	83 ec 08             	sub    esp,0x8
c0016df1:	68 5c 01 00 00       	push   0x15c
c0016df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfa:	e8 59 c1 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	83 c4 0c             	add    esp,0xc
c0016e05:	c3                   	ret    

c0016e06 <Timer::read()>:
c0016e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e10:	c3                   	ret    

c0016e11 <timerHandler(unsigned long long)>:
c0016e11:	55                   	push   ebp
c0016e12:	57                   	push   edi
c0016e13:	56                   	push   esi
c0016e14:	53                   	push   ebx
c0016e15:	83 ec 0c             	sub    esp,0xc
c0016e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e1c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e20:	01 35 10 ec 02 c0    	add    DWORD PTR ds:0xc002ec10,esi
c0016e26:	11 3d 14 ec 02 c0    	adc    DWORD PTR ds:0xc002ec14,edi
c0016e2c:	80 3d 6d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e56d,0x0
c0016e33:	0f 84 07 01 00 00    	je     c0016f40 <timerHandler(unsigned long long)+0x12f>
c0016e39:	e8 c3 70 00 00       	call   c001df01 <lockStuff()>
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	68 dc 1a 03 c0       	push   0xc0031adc
c0016e46:	e8 e3 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4b:	c7 04 24 dc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031adc
c0016e52:	89 c3                	mov    ebx,eax
c0016e54:	e8 dd 1c 01 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	84 c0                	test   al,al
c0016e5e:	74 60                	je     c0016ec0 <timerHandler(unsigned long long)+0xaf>
c0016e60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e66:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e69:	85 c0                	test   eax,eax
c0016e6b:	0f 85 91 00 00 00    	jne    c0016f02 <timerHandler(unsigned long long)+0xf1>
c0016e71:	e9 be 00 00 00       	jmp    c0016f34 <timerHandler(unsigned long long)+0x123>
c0016e76:	83 ec 0c             	sub    esp,0xc
c0016e79:	55                   	push   ebp
c0016e7a:	e8 73 76 00 00       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c0016e7f:	83 c4 10             	add    esp,0x10
c0016e82:	39 eb                	cmp    ebx,ebp
c0016e84:	75 12                	jne    c0016e98 <timerHandler(unsigned long long)+0x87>
c0016e86:	83 ec 0c             	sub    esp,0xc
c0016e89:	68 dc 1a 03 c0       	push   0xc0031adc
c0016e8e:	e8 9b 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e93:	89 c3                	mov    ebx,eax
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	68 dc 1a 03 c0       	push   0xc0031adc
c0016ea0:	e8 91 1c 01 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ea5:	83 c4 10             	add    esp,0x10
c0016ea8:	84 c0                	test   al,al
c0016eaa:	75 b4                	jne    c0016e60 <timerHandler(unsigned long long)+0x4f>
c0016eac:	83 ec 0c             	sub    esp,0xc
c0016eaf:	68 dc 1a 03 c0       	push   0xc0031adc
c0016eb4:	e8 75 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eb9:	83 c4 10             	add    esp,0x10
c0016ebc:	39 d8                	cmp    eax,ebx
c0016ebe:	74 a0                	je     c0016e60 <timerHandler(unsigned long long)+0x4f>
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	68 dc 1a 03 c0       	push   0xc0031adc
c0016ec8:	e8 61 1c 01 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ecd:	c7 04 24 dc 1a 03 c0 	mov    DWORD PTR [esp],0xc0031adc
c0016ed4:	89 c5                	mov    ebp,eax
c0016ed6:	e8 77 1c 01 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016edb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ede:	83 c4 10             	add    esp,0x10
c0016ee1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ee4:	39 15 10 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec10,edx
c0016eea:	a1 14 ec 02 c0       	mov    eax,ds:0xc002ec14
c0016eef:	19 c8                	sbb    eax,ecx
c0016ef1:	73 83                	jae    c0016e76 <timerHandler(unsigned long long)+0x65>
c0016ef3:	50                   	push   eax
c0016ef4:	50                   	push   eax
c0016ef5:	55                   	push   ebp
c0016ef6:	68 dc 1a 03 c0       	push   0xc0031adc
c0016efb:	e8 00 1d 01 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f00:	eb 93                	jmp    c0016e95 <timerHandler(unsigned long long)+0x84>
c0016f02:	80 3d 6c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e56c,0x0
c0016f09:	74 29                	je     c0016f34 <timerHandler(unsigned long long)+0x123>
c0016f0b:	39 c6                	cmp    esi,eax
c0016f0d:	bb 00 00 00 00       	mov    ebx,0x0
c0016f12:	19 df                	sbb    edi,ebx
c0016f14:	72 19                	jb     c0016f2f <timerHandler(unsigned long long)+0x11e>
c0016f16:	e8 bf 6f 00 00       	call   c001deda <lockScheduler()>
c0016f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f20:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f23:	e8 ee 72 00 00       	call   c001e216 <schedule()>
c0016f28:	e8 af 6f 00 00       	call   c001dedc <unlockScheduler()>
c0016f2d:	eb 05                	jmp    c0016f34 <timerHandler(unsigned long long)+0x123>
c0016f2f:	29 f0                	sub    eax,esi
c0016f31:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016f34:	83 c4 0c             	add    esp,0xc
c0016f37:	5b                   	pop    ebx
c0016f38:	5e                   	pop    esi
c0016f39:	5f                   	pop    edi
c0016f3a:	5d                   	pop    ebp
c0016f3b:	e9 5b 73 00 00       	jmp    c001e29b <unlockStuff()>
c0016f40:	83 c4 0c             	add    esp,0xc
c0016f43:	5b                   	pop    ebx
c0016f44:	5e                   	pop    esi
c0016f45:	5f                   	pop    edi
c0016f46:	5d                   	pop    ebp
c0016f47:	c3                   	ret    

c0016f48 <setupTimer(int)>:
c0016f48:	57                   	push   edi
c0016f49:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016f4e:	56                   	push   esi
c0016f4f:	53                   	push   ebx
c0016f50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f5a:	83 ec 0c             	sub    esp,0xc
c0016f5d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f63:	e8 e2 d7 ff ff       	call   c001474a <Device::getName()>
c0016f68:	83 c4 10             	add    esp,0x10
c0016f6b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f6e:	0f 85 8d 00 00 00    	jne    c0017001 <setupTimer(int)+0xb9>
c0016f74:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016f79:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f80:	74 7f                	je     c0017001 <setupTimer(int)+0xb9>
c0016f82:	83 ec 0c             	sub    esp,0xc
c0016f85:	68 5c 01 00 00       	push   0x15c
c0016f8a:	e8 b4 88 ff ff       	call   c000f843 <malloc>
c0016f8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f92:	89 c3                	mov    ebx,eax
c0016f94:	e8 fb f6 00 00       	call   c0026694 <PIT::PIT()>
c0016f99:	59                   	pop    ecx
c0016f9a:	5f                   	pop    edi
c0016f9b:	53                   	push   ebx
c0016f9c:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0016fa2:	e8 b7 d4 ff ff       	call   c001445e <Device::addChild(Device*)>
c0016fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa9:	6a 00                	push   0x0
c0016fab:	6a 00                	push   0x0
c0016fad:	56                   	push   esi
c0016fae:	53                   	push   ebx
c0016faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb2:	83 c4 14             	add    esp,0x14
c0016fb5:	68 60 01 00 00       	push   0x160
c0016fba:	e8 84 88 ff ff       	call   c000f843 <malloc>
c0016fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc2:	89 c7                	mov    edi,eax
c0016fc4:	e8 7b f5 00 00       	call   c0026544 <APICTimer::APICTimer()>
c0016fc9:	6a 00                	push   0x0
c0016fcb:	6a 00                	push   0x0
c0016fcd:	56                   	push   esi
c0016fce:	57                   	push   edi
c0016fcf:	e8 72 f4 00 00       	call   c0026446 <APICTimer::open(int, int, void*)>
c0016fd4:	83 c4 20             	add    esp,0x20
c0016fd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fd9:	6a 00                	push   0x0
c0016fdb:	6a 00                	push   0x0
c0016fdd:	6a 00                	push   0x0
c0016fdf:	53                   	push   ebx
c0016fe0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fe3:	58                   	pop    eax
c0016fe4:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0016fe9:	5a                   	pop    edx
c0016fea:	57                   	push   edi
c0016feb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ff1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ff7:	e8 62 d4 ff ff       	call   c001445e <Device::addChild(Device*)>
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	eb 33                	jmp    c0017034 <setupTimer(int)+0xec>
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	68 5c 01 00 00       	push   0x15c
c0017009:	e8 35 88 ff ff       	call   c000f843 <malloc>
c001700e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017011:	89 c3                	mov    ebx,eax
c0017013:	e8 7c f6 00 00       	call   c0026694 <PIT::PIT()>
c0017018:	58                   	pop    eax
c0017019:	5a                   	pop    edx
c001701a:	53                   	push   ebx
c001701b:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0017021:	e8 38 d4 ff ff       	call   c001445e <Device::addChild(Device*)>
c0017026:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017028:	6a 00                	push   0x0
c001702a:	6a 00                	push   0x0
c001702c:	56                   	push   esi
c001702d:	53                   	push   ebx
c001702e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017031:	83 c4 20             	add    esp,0x20
c0017034:	89 d8                	mov    eax,ebx
c0017036:	5b                   	pop    ebx
c0017037:	5e                   	pop    esi
c0017038:	5f                   	pop    edi
c0017039:	c3                   	ret    

c001703a <VCache::VCache(PhysicalDisk*)>:
c001703a:	53                   	push   ebx
c001703b:	83 ec 18             	sub    esp,0x18
c001703e:	ba 90 b4 02 c0       	mov    edx,0xc002b490
c0017043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017047:	89 10                	mov    DWORD PTR [eax],edx
c0017049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017058:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001705f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017063:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001706a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017075:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001707c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017087:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001708e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017092:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00170a1:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bc:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c4:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170cb:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170d3:	83 ec 0c             	sub    esp,0xc
c00170d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170da:	e8 64 87 ff ff       	call   c000f843 <malloc>
c00170df:	83 c4 10             	add    esp,0x10
c00170e2:	89 c3                	mov    ebx,eax
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	53                   	push   ebx
c00170e8:	e8 0d 6f 00 00       	call   c001dffa <Mutex::Mutex()>
c00170ed:	83 c4 10             	add    esp,0x10
c00170f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001710d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017111:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001711e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017122:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017128:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001712e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017132:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017135:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001713c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017140:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017144:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714a:	05 00 01 00 00       	add    eax,0x100
c001714f:	c1 e0 04             	shl    eax,0x4
c0017152:	83 ec 0c             	sub    esp,0xc
c0017155:	50                   	push   eax
c0017156:	e8 e8 86 ff ff       	call   c000f843 <malloc>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	89 c2                	mov    edx,eax
c0017160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017164:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001716b:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017176:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001717a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001717e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017184:	c1 e0 07             	shl    eax,0x7
c0017187:	83 ec 0c             	sub    esp,0xc
c001718a:	50                   	push   eax
c001718b:	e8 b3 86 ff ff       	call   c000f843 <malloc>
c0017190:	83 c4 10             	add    esp,0x10
c0017193:	89 c2                	mov    edx,eax
c0017195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017199:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001719c:	90                   	nop
c001719d:	83 c4 18             	add    esp,0x18
c00171a0:	5b                   	pop    ebx
c00171a1:	c3                   	ret    

c00171a2 <VCache::invalidateReadBuffer()>:
c00171a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a6:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00171ac:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00171b0:	c3                   	ret    
c00171b1:	90                   	nop

c00171b2 <VCache::writeWriteBuffer()>:
c00171b2:	53                   	push   ebx
c00171b3:	83 ec 14             	sub    esp,0x14
c00171b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00171bf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171cb:	50                   	push   eax
c00171cc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171cf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171d6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171dd:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171e1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171e8:	83 c4 28             	add    esp,0x28
c00171eb:	5b                   	pop    ebx
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop

c00171ee <VCache::~VCache()>:
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	ba 90 b4 02 c0       	mov    edx,0xc002b490
c00171f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171fa:	89 10                	mov    DWORD PTR [eax],edx
c00171fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017200:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017203:	84 c0                	test   al,al
c0017205:	74 0f                	je     c0017216 <VCache::~VCache()+0x28>
c0017207:	83 ec 0c             	sub    esp,0xc
c001720a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001720e:	e8 9f ff ff ff       	call   c00171b2 <VCache::writeWriteBuffer()>
c0017213:	83 c4 10             	add    esp,0x10
c0017216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001721a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001721d:	83 ec 0c             	sub    esp,0xc
c0017220:	50                   	push   eax
c0017221:	e8 2d 86 ff ff       	call   c000f853 <free>
c0017226:	83 c4 10             	add    esp,0x10
c0017229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001722d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	50                   	push   eax
c0017234:	e8 1a 86 ff ff       	call   c000f853 <free>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	90                   	nop
c001723d:	83 c4 0c             	add    esp,0xc
c0017240:	c3                   	ret    
c0017241:	90                   	nop

c0017242 <VCache::~VCache()>:
c0017242:	83 ec 0c             	sub    esp,0xc
c0017245:	83 ec 0c             	sub    esp,0xc
c0017248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001724c:	e8 9d ff ff ff       	call   c00171ee <VCache::~VCache()>
c0017251:	83 c4 10             	add    esp,0x10
c0017254:	83 ec 08             	sub    esp,0x8
c0017257:	6a 44                	push   0x44
c0017259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001725d:	e8 f6 bc ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0017262:	83 c4 10             	add    esp,0x10
c0017265:	83 c4 0c             	add    esp,0xc
c0017268:	c3                   	ret    
c0017269:	90                   	nop

c001726a <VCache::write(unsigned long long, int, void*)>:
c001726a:	55                   	push   ebp
c001726b:	57                   	push   edi
c001726c:	56                   	push   esi
c001726d:	53                   	push   ebx
c001726e:	83 ec 28             	sub    esp,0x28
c0017271:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017275:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017279:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001727d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017281:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017284:	e8 d3 71 00 00       	call   c001e45c <Semaphore::acquire()>
c0017289:	83 c4 10             	add    esp,0x10
c001728c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017290:	74 0c                	je     c001729e <VCache::write(unsigned long long, int, void*)+0x34>
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	53                   	push   ebx
c0017296:	e8 07 ff ff ff       	call   c00171a2 <VCache::invalidateReadBuffer()>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172a2:	74 66                	je     c001730a <VCache::write(unsigned long long, int, void*)+0xa0>
c00172a4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172a7:	99                   	cdq    
c00172a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172ac:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00172af:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00172b2:	89 c1                	mov    ecx,eax
c00172b4:	89 d0                	mov    eax,edx
c00172b6:	31 f1                	xor    ecx,esi
c00172b8:	31 f8                	xor    eax,edi
c00172ba:	89 ca                	mov    edx,ecx
c00172bc:	09 c2                	or     edx,eax
c00172be:	75 3e                	jne    c00172fe <VCache::write(unsigned long long, int, void*)+0x94>
c00172c0:	83 fd 01             	cmp    ebp,0x1
c00172c3:	75 39                	jne    c00172fe <VCache::write(unsigned long long, int, void*)+0x94>
c00172c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172ce:	51                   	push   ecx
c00172cf:	50                   	push   eax
c00172d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172d4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00172d8:	0f af c8             	imul   ecx,eax
c00172db:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172de:	51                   	push   ecx
c00172df:	e8 60 94 fe ff       	call   c0000744 <memcpy>
c00172e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172e7:	83 c4 10             	add    esp,0x10
c00172ea:	40                   	inc    eax
c00172eb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172ee:	83 c0 80             	add    eax,0xffffff80
c00172f1:	75 57                	jne    c001734a <VCache::write(unsigned long long, int, void*)+0xe0>
c00172f3:	83 ec 0c             	sub    esp,0xc
c00172f6:	53                   	push   ebx
c00172f7:	e8 b6 fe ff ff       	call   c00171b2 <VCache::writeWriteBuffer()>
c00172fc:	eb 34                	jmp    c0017332 <VCache::write(unsigned long long, int, void*)+0xc8>
c00172fe:	83 ec 0c             	sub    esp,0xc
c0017301:	53                   	push   ebx
c0017302:	e8 ab fe ff ff       	call   c00171b2 <VCache::writeWriteBuffer()>
c0017307:	83 c4 10             	add    esp,0x10
c001730a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001730d:	83 fd 7f             	cmp    ebp,0x7f
c0017310:	7f 25                	jg     c0017337 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017312:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017315:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017318:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001731b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001731f:	52                   	push   edx
c0017320:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017326:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001732a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001732d:	e8 12 94 fe ff       	call   c0000744 <memcpy>
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	eb 13                	jmp    c001734a <VCache::write(unsigned long long, int, void*)+0xe0>
c0017337:	83 ec 0c             	sub    esp,0xc
c001733a:	8b 10                	mov    edx,DWORD PTR [eax]
c001733c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017340:	55                   	push   ebp
c0017341:	57                   	push   edi
c0017342:	56                   	push   esi
c0017343:	50                   	push   eax
c0017344:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017347:	83 c4 20             	add    esp,0x20
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017350:	e8 b5 76 00 00       	call   c001ea0a <Semaphore::release()>
c0017355:	83 c4 2c             	add    esp,0x2c
c0017358:	31 c0                	xor    eax,eax
c001735a:	5b                   	pop    ebx
c001735b:	5e                   	pop    esi
c001735c:	5f                   	pop    edi
c001735d:	5d                   	pop    ebp
c001735e:	c3                   	ret    
c001735f:	90                   	nop

c0017360 <VCache::read(unsigned long long, int, void*)>:
c0017360:	55                   	push   ebp
c0017361:	57                   	push   edi
c0017362:	56                   	push   esi
c0017363:	53                   	push   ebx
c0017364:	83 ec 28             	sub    esp,0x28
c0017367:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001736b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001736f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017377:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001737b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001737f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017383:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017386:	e8 d1 70 00 00       	call   c001e45c <Semaphore::acquire()>
c001738b:	83 c4 10             	add    esp,0x10
c001738e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017392:	74 0c                	je     c00173a0 <VCache::read(unsigned long long, int, void*)+0x40>
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	53                   	push   ebx
c0017398:	e8 15 fe ff ff       	call   c00171b2 <VCache::writeWriteBuffer()>
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	83 fe 01             	cmp    esi,0x1
c00173a3:	0f 85 80 00 00 00    	jne    c0017429 <VCache::read(unsigned long long, int, void*)+0xc9>
c00173a9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ac:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00173b3:	75 74                	jne    c0017429 <VCache::read(unsigned long long, int, void*)+0xc9>
c00173b5:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173b8:	89 d1                	mov    ecx,edx
c00173ba:	f7 d9                	neg    ecx
c00173bc:	89 cf                	mov    edi,ecx
c00173be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173c2:	c1 ff 1f             	sar    edi,0x1f
c00173c5:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00173c8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173cc:	89 ce                	mov    esi,ecx
c00173ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173d2:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173d6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173da:	89 cf                	mov    edi,ecx
c00173dc:	74 0a                	je     c00173e8 <VCache::read(unsigned long long, int, void*)+0x88>
c00173de:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173e1:	75 05                	jne    c00173e8 <VCache::read(unsigned long long, int, void*)+0x88>
c00173e3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173e6:	74 1c                	je     c0017404 <VCache::read(unsigned long long, int, void*)+0xa4>
c00173e8:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173ec:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173ef:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173f2:	83 ec 0c             	sub    esp,0xc
c00173f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173f7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173fa:	52                   	push   edx
c00173fb:	57                   	push   edi
c00173fc:	56                   	push   esi
c00173fd:	50                   	push   eax
c00173fe:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017401:	83 c4 20             	add    esp,0x20
c0017404:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017407:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001740d:	50                   	push   eax
c001740e:	52                   	push   edx
c001740f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017412:	48                   	dec    eax
c0017413:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017417:	0f af c2             	imul   eax,edx
c001741a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001741d:	50                   	push   eax
c001741e:	55                   	push   ebp
c001741f:	e8 20 93 fe ff       	call   c0000744 <memcpy>
c0017424:	83 c4 10             	add    esp,0x10
c0017427:	eb 21                	jmp    c001744a <VCache::read(unsigned long long, int, void*)+0xea>
c0017429:	83 ec 0c             	sub    esp,0xc
c001742c:	53                   	push   ebx
c001742d:	e8 70 fd ff ff       	call   c00171a2 <VCache::invalidateReadBuffer()>
c0017432:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017435:	8b 10                	mov    edx,DWORD PTR [eax]
c0017437:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001743a:	56                   	push   esi
c001743b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017443:	50                   	push   eax
c0017444:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017447:	83 c4 20             	add    esp,0x20
c001744a:	83 ec 0c             	sub    esp,0xc
c001744d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017450:	e8 b5 75 00 00       	call   c001ea0a <Semaphore::release()>
c0017455:	83 c4 2c             	add    esp,0x2c
c0017458:	31 c0                	xor    eax,eax
c001745a:	5b                   	pop    ebx
c001745b:	5e                   	pop    esi
c001745c:	5f                   	pop    edi
c001745d:	5d                   	pop    ebp
c001745e:	c3                   	ret    
c001745f:	90                   	nop

c0017460 <Video::putrect(int, int, int, int, unsigned int)>:
c0017460:	55                   	push   ebp
c0017461:	57                   	push   edi
c0017462:	56                   	push   esi
c0017463:	53                   	push   ebx
c0017464:	83 ec 1c             	sub    esp,0x1c
c0017467:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001746b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001746f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017473:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017477:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001747b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001747f:	01 df                	add    edi,ebx
c0017481:	39 fb                	cmp    ebx,edi
c0017483:	7d 1f                	jge    c00174a4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017485:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017489:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001748d:	7d 12                	jge    c00174a1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001748f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017491:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017495:	53                   	push   ebx
c0017496:	55                   	push   ebp
c0017497:	45                   	inc    ebp
c0017498:	56                   	push   esi
c0017499:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	eb e8                	jmp    c0017489 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00174a1:	43                   	inc    ebx
c00174a2:	eb dd                	jmp    c0017481 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00174a4:	83 c4 1c             	add    esp,0x1c
c00174a7:	5b                   	pop    ebx
c00174a8:	5e                   	pop    esi
c00174a9:	5f                   	pop    edi
c00174aa:	5d                   	pop    ebp
c00174ab:	c3                   	ret    

c00174ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00174ac:	55                   	push   ebp
c00174ad:	57                   	push   edi
c00174ae:	31 ff                	xor    edi,edi
c00174b0:	56                   	push   esi
c00174b1:	53                   	push   ebx
c00174b2:	83 ec 1c             	sub    esp,0x1c
c00174b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174bd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174c4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174cd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174d5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174d8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174dc:	01 f9                	add    ecx,edi
c00174de:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174e2:	7d 2f                	jge    c0017513 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174e4:	31 f6                	xor    esi,esi
c00174e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174ea:	01 f2                	add    edx,esi
c00174ec:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174f0:	7d 1a                	jge    c001750c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174f5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174f8:	46                   	inc    esi
c00174f9:	51                   	push   ecx
c00174fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174fe:	52                   	push   edx
c00174ff:	55                   	push   ebp
c0017500:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001750a:	eb da                	jmp    c00174e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001750c:	47                   	inc    edi
c001750d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017511:	eb c5                	jmp    c00174d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017513:	83 c4 1c             	add    esp,0x1c
c0017516:	5b                   	pop    ebx
c0017517:	5e                   	pop    esi
c0017518:	5f                   	pop    edi
c0017519:	5d                   	pop    ebp
c001751a:	c3                   	ret    
c001751b:	90                   	nop

c001751c <Video::blit(unsigned int*, int, int, int, int)>:
c001751c:	55                   	push   ebp
c001751d:	57                   	push   edi
c001751e:	56                   	push   esi
c001751f:	53                   	push   ebx
c0017520:	83 ec 1c             	sub    esp,0x1c
c0017523:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017527:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001752b:	85 c0                	test   eax,eax
c001752d:	79 02                	jns    c0017531 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001752f:	31 c0                	xor    eax,eax
c0017531:	c1 e0 02             	shl    eax,0x2
c0017534:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001753c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017540:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017544:	39 d8                	cmp    eax,ebx
c0017546:	7e 49                	jle    c0017591 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017548:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001754e:	7c 41                	jl     c0017591 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017550:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017554:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017558:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001755c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017560:	39 f9                	cmp    ecx,edi
c0017562:	7e 22                	jle    c0017586 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017564:	83 c5 04             	add    ebp,0x4
c0017567:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001756d:	7c 14                	jl     c0017583 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001756f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017571:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017574:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017578:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001757c:	56                   	push   esi
c001757d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	47                   	inc    edi
c0017584:	eb d2                	jmp    c0017558 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001758a:	43                   	inc    ebx
c001758b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001758f:	eb ab                	jmp    c001753c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017591:	83 c4 1c             	add    esp,0x1c
c0017594:	5b                   	pop    ebx
c0017595:	5e                   	pop    esi
c0017596:	5f                   	pop    edi
c0017597:	5d                   	pop    ebp
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <Video::clearScreen(unsigned int)>:
c001759a:	57                   	push   edi
c001759b:	56                   	push   esi
c001759c:	53                   	push   ebx
c001759d:	31 db                	xor    ebx,ebx
c001759f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00175a3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175a9:	7e 1f                	jle    c00175ca <Video::clearScreen(unsigned int)+0x30>
c00175ab:	31 ff                	xor    edi,edi
c00175ad:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175b3:	7e 12                	jle    c00175c7 <Video::clearScreen(unsigned int)+0x2d>
c00175b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00175b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175bb:	53                   	push   ebx
c00175bc:	57                   	push   edi
c00175bd:	47                   	inc    edi
c00175be:	56                   	push   esi
c00175bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	eb e6                	jmp    c00175ad <Video::clearScreen(unsigned int)+0x13>
c00175c7:	43                   	inc    ebx
c00175c8:	eb d9                	jmp    c00175a3 <Video::clearScreen(unsigned int)+0x9>
c00175ca:	5b                   	pop    ebx
c00175cb:	5e                   	pop    esi
c00175cc:	5f                   	pop    edi
c00175cd:	c3                   	ret    

c00175ce <Video::putpixel(int, int, unsigned int)>:
c00175ce:	c7 44 24 04 98 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b498
c00175d6:	e9 0a 31 00 00       	jmp    c001a6e5 <Krnl::panic(char const*)>
c00175db:	90                   	nop

c00175dc <Video::Video(char const*)>:
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e3:	83 ec 08             	sub    esp,0x8
c00175e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ea:	50                   	push   eax
c00175eb:	e8 5e d0 ff ff       	call   c001464e <Device::Device(char const*)>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	ba 1c b5 02 c0       	mov    edx,0xc002b51c
c00175f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175fc:	89 10                	mov    DWORD PTR [eax],edx
c00175fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017602:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001760c:	90                   	nop
c001760d:	83 c4 0c             	add    esp,0xc
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <Video::~Video()>:
c0017612:	83 ec 0c             	sub    esp,0xc
c0017615:	ba 1c b5 02 c0       	mov    edx,0xc002b51c
c001761a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761e:	89 10                	mov    DWORD PTR [eax],edx
c0017620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	50                   	push   eax
c0017628:	e8 03 cd ff ff       	call   c0014330 <Device::~Device()>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	90                   	nop
c0017631:	83 c4 0c             	add    esp,0xc
c0017634:	c3                   	ret    
c0017635:	90                   	nop

c0017636 <Video::~Video()>:
c0017636:	83 ec 0c             	sub    esp,0xc
c0017639:	83 ec 0c             	sub    esp,0xc
c001763c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017640:	e8 cd ff ff ff       	call   c0017612 <Video::~Video()>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	68 64 01 00 00       	push   0x164
c0017650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017654:	e8 ff b8 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	83 c4 0c             	add    esp,0xc
c001765f:	c3                   	ret    

c0017660 <Video::isMonochrome()>:
c0017660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017664:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001766a:	c3                   	ret    
c001766b:	90                   	nop

c001766c <Video::getWidth()>:
c001766c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017670:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017676:	c3                   	ret    
c0017677:	90                   	nop

c0017678 <Video::getHeight()>:
c0017678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001767c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017682:	c3                   	ret    
c0017683:	90                   	nop

c0017684 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017684:	55                   	push   ebp
c0017685:	57                   	push   edi
c0017686:	56                   	push   esi
c0017687:	53                   	push   ebx
c0017688:	83 ec 2c             	sub    esp,0x2c
c001768b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001768f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017693:	83 f8 01             	cmp    eax,0x1
c0017696:	19 c9                	sbb    ecx,ecx
c0017698:	31 db                	xor    ebx,ebx
c001769a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001769e:	89 cd                	mov    ebp,ecx
c00176a0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00176a8:	f7 d5                	not    ebp
c00176aa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00176b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00176b4:	01 d8                	add    eax,ebx
c00176b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176ba:	56                   	push   esi
c00176bb:	e8 b8 ff ff ff       	call   c0017678 <Video::getHeight()>
c00176c0:	59                   	pop    ecx
c00176c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176c5:	7e 70                	jle    c0017737 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176cb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176cf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176da:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176e5:	89 f8                	mov    eax,edi
c00176e7:	83 c0 20             	add    eax,0x20
c00176ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176ee:	56                   	push   esi
c00176ef:	e8 78 ff ff ff       	call   c001766c <Video::getWidth()>
c00176f4:	5a                   	pop    edx
c00176f5:	39 c7                	cmp    edi,eax
c00176f7:	7d 34                	jge    c001772d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176f9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176fe:	74 05                	je     c0017705 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017700:	8b 06                	mov    eax,DWORD PTR [esi]
c0017702:	55                   	push   ebp
c0017703:	eb 0d                	jmp    c0017712 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017705:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001770a:	74 12                	je     c001771e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001770c:	8b 06                	mov    eax,DWORD PTR [esi]
c001770e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017712:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017716:	57                   	push   edi
c0017717:	56                   	push   esi
c0017718:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017722:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017726:	47                   	inc    edi
c0017727:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001772b:	75 c1                	jne    c00176ee <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001772d:	43                   	inc    ebx
c001772e:	83 fb 20             	cmp    ebx,0x20
c0017731:	0f 85 79 ff ff ff    	jne    c00176b0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017737:	83 c4 2c             	add    esp,0x2c
c001773a:	5b                   	pop    ebx
c001773b:	5e                   	pop    esi
c001773c:	5f                   	pop    edi
c001773d:	5d                   	pop    ebp
c001773e:	c3                   	ret    
c001773f:	90                   	nop

c0017740 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017740:	55                   	push   ebp
c0017741:	57                   	push   edi
c0017742:	56                   	push   esi
c0017743:	53                   	push   ebx
c0017744:	83 ec 28             	sub    esp,0x28
c0017747:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001774b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001774f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017753:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017757:	c1 e7 08             	shl    edi,0x8
c001775a:	01 c7                	add    edi,eax
c001775c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017760:	c1 e0 08             	shl    eax,0x8
c0017763:	01 d0                	add    eax,edx
c0017765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001776d:	0f af c7             	imul   eax,edi
c0017770:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017777:	50                   	push   eax
c0017778:	e8 c6 80 ff ff       	call   c000f843 <malloc>
c001777d:	83 c4 10             	add    esp,0x10
c0017780:	89 c5                	mov    ebp,eax
c0017782:	85 c0                	test   eax,eax
c0017784:	75 15                	jne    c001779b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017786:	83 ec 0c             	sub    esp,0xc
c0017789:	68 b9 b4 02 c0       	push   0xc002b4b9
c001778e:	e8 a5 b8 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0017793:	83 c4 10             	add    esp,0x10
c0017796:	e9 1c 01 00 00       	jmp    c00178b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001779b:	be 12 00 00 00       	mov    esi,0x12
c00177a0:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177a4:	74 11                	je     c00177b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00177a6:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00177aa:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00177ae:	c1 fe 03             	sar    esi,0x3
c00177b1:	0f af f0             	imul   esi,eax
c00177b4:	83 c6 12             	add    esi,0x12
c00177b7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177bb:	74 04                	je     c00177c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177bd:	85 ff                	test   edi,edi
c00177bf:	75 12                	jne    c00177d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177c1:	83 ec 0c             	sub    esp,0xc
c00177c4:	68 d0 b4 02 c0       	push   0xc002b4d0
c00177c9:	e8 6a b8 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00177ce:	e9 ce 00 00 00       	jmp    c00178a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177d3:	52                   	push   edx
c00177d4:	52                   	push   edx
c00177d5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177d9:	50                   	push   eax
c00177da:	68 e5 b4 02 c0       	push   0xc002b4e5
c00177df:	e8 54 b8 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00177e4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177e8:	83 c4 10             	add    esp,0x10
c00177eb:	80 fa 02             	cmp    dl,0x2
c00177ee:	0f 85 98 00 00 00    	jne    c001788c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177f9:	75 10                	jne    c001780b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177fb:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177ff:	75 0a                	jne    c001780b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017801:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017804:	83 e8 18             	sub    eax,0x18
c0017807:	a8 f7                	test   al,0xf7
c0017809:	74 0a                	je     c0017815 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	68 f2 b4 02 c0       	push   0xc002b4f2
c0017813:	eb 7f                	jmp    c0017894 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017815:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001781d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017825:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017829:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017831:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017835:	75 0c                	jne    c0017843 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017837:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001783c:	c1 e0 18             	shl    eax,0x18
c001783f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017843:	41                   	inc    ecx
c0017844:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017849:	c1 e2 10             	shl    edx,0x10
c001784c:	89 d0                	mov    eax,edx
c001784e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017853:	c1 e2 08             	shl    edx,0x8
c0017856:	09 c2                	or     edx,eax
c0017858:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001785c:	09 c2                	or     edx,eax
c001785e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017862:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017866:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001786a:	c1 f8 03             	sar    eax,0x3
c001786d:	01 c6                	add    esi,eax
c001786f:	89 c8                	mov    eax,ecx
c0017871:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017875:	39 c7                	cmp    edi,eax
c0017877:	7f b0                	jg     c0017829 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017879:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001787d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017881:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017884:	7e 22                	jle    c00178a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017886:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001788a:	eb 99                	jmp    c0017825 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001788c:	50                   	push   eax
c001788d:	50                   	push   eax
c001788e:	52                   	push   edx
c001788f:	68 00 b5 02 c0       	push   0xc002b500
c0017894:	e8 9f b7 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0017899:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001789c:	e8 b2 7f ff ff       	call   c000f853 <free>
c00178a1:	83 c4 10             	add    esp,0x10
c00178a4:	31 ed                	xor    ebp,ebp
c00178a6:	eb 0f                	jmp    c00178b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00178a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178ac:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00178af:	89 38                	mov    DWORD PTR [eax],edi
c00178b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178b5:	89 08                	mov    DWORD PTR [eax],ecx
c00178b7:	83 c4 1c             	add    esp,0x1c
c00178ba:	89 e8                	mov    eax,ebp
c00178bc:	5b                   	pop    ebx
c00178bd:	5e                   	pop    esi
c00178be:	5f                   	pop    edi
c00178bf:	5d                   	pop    ebp
c00178c0:	c3                   	ret    
c00178c1:	90                   	nop

c00178c2 <Video::putTGA(int, int, unsigned char*, int)>:
c00178c2:	55                   	push   ebp
c00178c3:	57                   	push   edi
c00178c4:	56                   	push   esi
c00178c5:	53                   	push   ebx
c00178c6:	83 ec 28             	sub    esp,0x28
c00178c9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d1:	50                   	push   eax
c00178d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178d6:	50                   	push   eax
c00178d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178df:	56                   	push   esi
c00178e0:	e8 5b fe ff ff       	call   c0017740 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178e5:	83 c4 20             	add    esp,0x20
c00178e8:	85 c0                	test   eax,eax
c00178ea:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178ee:	74 35                	je     c0017925 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178f0:	89 c7                	mov    edi,eax
c00178f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178f6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178fa:	39 d8                	cmp    eax,ebx
c00178fc:	7e 27                	jle    c0017925 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017902:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017906:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001790a:	39 e8                	cmp    eax,ebp
c001790c:	7e 14                	jle    c0017922 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001790e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017910:	83 c7 04             	add    edi,0x4
c0017913:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017916:	53                   	push   ebx
c0017917:	55                   	push   ebp
c0017918:	45                   	inc    ebp
c0017919:	56                   	push   esi
c001791a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001791d:	83 c4 10             	add    esp,0x10
c0017920:	eb e0                	jmp    c0017902 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017922:	43                   	inc    ebx
c0017923:	eb cd                	jmp    c00178f2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017925:	83 c4 1c             	add    esp,0x1c
c0017928:	5b                   	pop    ebx
c0017929:	5e                   	pop    esi
c001792a:	5f                   	pop    edi
c001792b:	5d                   	pop    ebp
c001792c:	c3                   	ret    
c001792d:	90                   	nop

c001792e <ACPI::close(int, int, void*)>:
c001792e:	83 ec 1c             	sub    esp,0x1c
c0017931:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017939:	74 0a                	je     c0017945 <ACPI::close(int, int, void*)+0x17>
c001793b:	b8 00 00 00 00       	mov    eax,0x0
c0017940:	e9 9a 00 00 00       	jmp    c00179df <ACPI::close(int, int, void*)+0xb1>
c0017945:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001794a:	75 37                	jne    c0017983 <ACPI::close(int, int, void*)+0x55>
c001794c:	83 ec 0c             	sub    esp,0xc
c001794f:	68 5c b5 02 c0       	push   0xc002b55c
c0017954:	e8 df b6 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0017961:	85 c0                	test   eax,eax
c0017963:	74 07                	je     c001796c <ACPI::close(int, int, void*)+0x3e>
c0017965:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c001796a:	ff d0                	call   eax
c001796c:	83 ec 0c             	sub    esp,0xc
c001796f:	68 80 b6 02 c0       	push   0xc002b680
c0017974:	e8 6c 2d 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017981:	eb 5c                	jmp    c00179df <ACPI::close(int, int, void*)+0xb1>
c0017983:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017988:	75 50                	jne    c00179da <ACPI::close(int, int, void*)+0xac>
c001798a:	a1 44 0c 03 c0       	mov    eax,ds:0xc0030c44
c001798f:	85 c0                	test   eax,eax
c0017991:	74 07                	je     c001799a <ACPI::close(int, int, void*)+0x6c>
c0017993:	a1 44 0c 03 c0       	mov    eax,ds:0xc0030c44
c0017998:	ff d0                	call   eax
c001799a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001799f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179a4:	83 e0 02             	and    eax,0x2
c00179a7:	74 1c                	je     c00179c5 <ACPI::close(int, int, void*)+0x97>
c00179a9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00179b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b4:	89 c2                	mov    edx,eax
c00179b6:	ec                   	in     al,dx
c00179b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179c3:	eb da                	jmp    c001799f <ACPI::close(int, int, void*)+0x71>
c00179c5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179cc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179d9:	ee                   	out    dx,al
c00179da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179df:	83 c4 1c             	add    esp,0x1c
c00179e2:	c3                   	ret    

c00179e3 <findRSDP()>:
c00179e3:	83 ec 1c             	sub    esp,0x1c
c00179e6:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00179eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179f1:	83 e0 04             	and    eax,0x4
c00179f4:	84 c0                	test   al,al
c00179f6:	75 07                	jne    c00179ff <findRSDP()+0x1c>
c00179f8:	b8 00 00 00 00       	mov    eax,0x0
c00179fd:	eb 6a                	jmp    c0017a69 <findRSDP()+0x86>
c00179ff:	a1 b4 e5 02 c0       	mov    eax,ds:0xc002e5b4
c0017a04:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a09:	7f 1b                	jg     c0017a26 <findRSDP()+0x43>
c0017a0b:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017a10:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a16:	83 e2 fb             	and    edx,0xfffffffb
c0017a19:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a1f:	b8 00 00 00 00       	mov    eax,0x0
c0017a24:	eb 43                	jmp    c0017a69 <findRSDP()+0x86>
c0017a26:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a2e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a36:	77 2c                	ja     c0017a64 <findRSDP()+0x81>
c0017a38:	83 ec 04             	sub    esp,0x4
c0017a3b:	6a 08                	push   0x8
c0017a3d:	68 69 b5 02 c0       	push   0xc002b569
c0017a42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a46:	e8 f5 8b fe ff       	call   c0000640 <memcmp>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	85 c0                	test   eax,eax
c0017a50:	0f 94 c0             	sete   al
c0017a53:	84 c0                	test   al,al
c0017a55:	74 06                	je     c0017a5d <findRSDP()+0x7a>
c0017a57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a5b:	eb 0c                	jmp    c0017a69 <findRSDP()+0x86>
c0017a5d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a62:	eb ca                	jmp    c0017a2e <findRSDP()+0x4b>
c0017a64:	b8 00 00 00 00       	mov    eax,0x0
c0017a69:	83 c4 1c             	add    esp,0x1c
c0017a6c:	c3                   	ret    

c0017a6d <loadACPITables(unsigned char*)>:
c0017a6d:	56                   	push   esi
c0017a6e:	53                   	push   ebx
c0017a6f:	83 ec 44             	sub    esp,0x44
c0017a72:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017a77:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a7d:	83 e0 04             	and    eax,0x4
c0017a80:	84 c0                	test   al,al
c0017a82:	0f 84 05 02 00 00    	je     c0017c8d <loadACPITables(unsigned char*)+0x220>
c0017a88:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0017a8d:	84 c0                	test   al,al
c0017a8f:	74 75                	je     c0017b06 <loadACPITables(unsigned char*)+0x99>
c0017a91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa0:	83 e8 24             	sub    eax,0x24
c0017aa3:	c1 e8 03             	shr    eax,0x3
c0017aa6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017aaa:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017ab2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ab6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017aba:	0f 8d b2 00 00 00    	jge    c0017b72 <loadACPITables(unsigned char*)+0x105>
c0017ac0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac4:	83 c0 24             	add    eax,0x24
c0017ac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017acb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ad3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ad7:	c1 e0 03             	shl    eax,0x3
c0017ada:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017ade:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ae2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ae7:	89 c1                	mov    ecx,eax
c0017ae9:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017aee:	8d 50 01             	lea    edx,[eax+0x1]
c0017af1:	89 15 4c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c4c,edx
c0017af7:	89 ca                	mov    edx,ecx
c0017af9:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c0017b00:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b04:	eb ac                	jmp    c0017ab2 <loadACPITables(unsigned char*)+0x45>
c0017b06:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b15:	83 e8 24             	sub    eax,0x24
c0017b18:	c1 e8 02             	shr    eax,0x2
c0017b1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b1f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b2b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b2f:	7d 41                	jge    c0017b72 <loadACPITables(unsigned char*)+0x105>
c0017b31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b35:	83 c0 24             	add    eax,0x24
c0017b38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b48:	c1 e0 02             	shl    eax,0x2
c0017b4b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b53:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b55:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017b5a:	8d 50 01             	lea    edx,[eax+0x1]
c0017b5d:	89 15 4c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c4c,edx
c0017b63:	89 ca                	mov    edx,ecx
c0017b65:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c0017b6c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b70:	eb b5                	jmp    c0017b27 <loadACPITables(unsigned char*)+0xba>
c0017b72:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b7a:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017b7f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b83:	0f 8d 05 01 00 00    	jge    c0017c8e <loadACPITables(unsigned char*)+0x221>
c0017b89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8d:	8b 04 c5 64 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf39c]
c0017b94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba4:	25 ff 0f 00 00       	and    eax,0xfff
c0017ba9:	89 c6                	mov    esi,eax
c0017bab:	e8 90 a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017bb0:	89 c3                	mov    ebx,eax
c0017bb2:	83 ec 0c             	sub    esp,0xc
c0017bb5:	6a 01                	push   0x1
c0017bb7:	e8 e9 9f ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bc3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bc9:	83 ec 0c             	sub    esp,0xc
c0017bcc:	6a 01                	push   0x1
c0017bce:	6a 01                	push   0x1
c0017bd0:	50                   	push   eax
c0017bd1:	52                   	push   edx
c0017bd2:	53                   	push   ebx
c0017bd3:	e8 98 aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bd8:	83 c4 20             	add    esp,0x20
c0017bdb:	09 f0                	or     eax,esi
c0017bdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017be1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be5:	c1 e0 03             	shl    eax,0x3
c0017be8:	05 60 0c 03 c0       	add    eax,0xc0030c60
c0017bed:	83 ec 04             	sub    esp,0x4
c0017bf0:	6a 04                	push   0x4
c0017bf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bf6:	50                   	push   eax
c0017bf7:	e8 48 8b fe ff       	call   c0000744 <memcpy>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c0e:	05 00 10 00 00       	add    eax,0x1000
c0017c13:	c1 e8 0c             	shr    eax,0xc
c0017c16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c25:	25 ff 0f 00 00       	and    eax,0xfff
c0017c2a:	89 c6                	mov    esi,eax
c0017c2c:	e8 0f a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017c31:	89 c3                	mov    ebx,eax
c0017c33:	83 ec 0c             	sub    esp,0xc
c0017c36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c3a:	e8 66 9f ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017c3f:	83 c4 10             	add    esp,0x10
c0017c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c46:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c4c:	83 ec 0c             	sub    esp,0xc
c0017c4f:	6a 01                	push   0x1
c0017c51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c55:	50                   	push   eax
c0017c56:	52                   	push   edx
c0017c57:	53                   	push   ebx
c0017c58:	e8 13 aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c5d:	83 c4 20             	add    esp,0x20
c0017c60:	09 f0                	or     eax,esi
c0017c62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c66:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c69:	83 ec 0c             	sub    esp,0xc
c0017c6c:	50                   	push   eax
c0017c6d:	e8 a3 a3 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c7d:	89 14 c5 64 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf39c],edx
c0017c84:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c88:	e9 ed fe ff ff       	jmp    c0017b7a <loadACPITables(unsigned char*)+0x10d>
c0017c8d:	90                   	nop
c0017c8e:	83 c4 44             	add    esp,0x44
c0017c91:	5b                   	pop    ebx
c0017c92:	5e                   	pop    esi
c0017c93:	c3                   	ret    

c0017c94 <findRSDT(unsigned char*)>:
c0017c94:	56                   	push   esi
c0017c95:	53                   	push   ebx
c0017c96:	83 ec 44             	sub    esp,0x44
c0017c99:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017c9e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ca4:	83 e0 04             	and    eax,0x4
c0017ca7:	84 c0                	test   al,al
c0017ca9:	75 0a                	jne    c0017cb5 <findRSDT(unsigned char*)+0x21>
c0017cab:	b8 00 00 00 00       	mov    eax,0x0
c0017cb0:	e9 f7 00 00 00       	jmp    c0017dac <findRSDT(unsigned char*)+0x118>
c0017cb5:	83 ec 04             	sub    esp,0x4
c0017cb8:	6a 24                	push   0x24
c0017cba:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017cbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017cc2:	50                   	push   eax
c0017cc3:	e8 7c 8a fe ff       	call   c0000744 <memcpy>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ccf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017cd3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017cdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ce7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ceb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cf3:	25 ff 0f 00 00       	and    eax,0xfff
c0017cf8:	89 c6                	mov    esi,eax
c0017cfa:	e8 41 a1 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017cff:	89 c3                	mov    ebx,eax
c0017d01:	83 ec 0c             	sub    esp,0xc
c0017d04:	6a 02                	push   0x2
c0017d06:	e8 9a 9e ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017d0b:	83 c4 10             	add    esp,0x10
c0017d0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d12:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	6a 01                	push   0x1
c0017d1d:	6a 02                	push   0x2
c0017d1f:	50                   	push   eax
c0017d20:	52                   	push   edx
c0017d21:	53                   	push   ebx
c0017d22:	e8 49 a9 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d27:	83 c4 20             	add    esp,0x20
c0017d2a:	09 f0                	or     eax,esi
c0017d2c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d34:	25 ff 0f 00 00       	and    eax,0xfff
c0017d39:	89 c6                	mov    esi,eax
c0017d3b:	e8 00 a1 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017d40:	89 c3                	mov    ebx,eax
c0017d42:	83 ec 0c             	sub    esp,0xc
c0017d45:	6a 02                	push   0x2
c0017d47:	e8 59 9e ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d53:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d59:	83 ec 0c             	sub    esp,0xc
c0017d5c:	6a 01                	push   0x1
c0017d5e:	6a 02                	push   0x2
c0017d60:	50                   	push   eax
c0017d61:	52                   	push   edx
c0017d62:	53                   	push   ebx
c0017d63:	e8 08 a9 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d68:	83 c4 20             	add    esp,0x20
c0017d6b:	09 f0                	or     eax,esi
c0017d6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d71:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d76:	75 11                	jne    c0017d89 <findRSDT(unsigned char*)+0xf5>
c0017d78:	c6 05 60 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e60,0x0
c0017d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d83:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d87:	eb 1f                	jmp    c0017da8 <findRSDT(unsigned char*)+0x114>
c0017d89:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d8e:	75 11                	jne    c0017da1 <findRSDT(unsigned char*)+0x10d>
c0017d90:	c6 05 60 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e60,0x1
c0017d97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d9b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d9f:	eb 07                	jmp    c0017da8 <findRSDT(unsigned char*)+0x114>
c0017da1:	b8 00 00 00 00       	mov    eax,0x0
c0017da6:	eb 04                	jmp    c0017dac <findRSDT(unsigned char*)+0x118>
c0017da8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dac:	83 c4 44             	add    esp,0x44
c0017daf:	5b                   	pop    ebx
c0017db0:	5e                   	pop    esi
c0017db1:	c3                   	ret    

c0017db2 <findDataTable(unsigned char*, char*)>:
c0017db2:	83 ec 1c             	sub    esp,0x1c
c0017db5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017dba:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dc0:	83 e0 04             	and    eax,0x4
c0017dc3:	84 c0                	test   al,al
c0017dc5:	75 07                	jne    c0017dce <findDataTable(unsigned char*, char*)+0x1c>
c0017dc7:	b8 00 00 00 00       	mov    eax,0x0
c0017dcc:	eb 7c                	jmp    c0017e4a <findDataTable(unsigned char*, char*)+0x98>
c0017dce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dd6:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017ddb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ddf:	7d 3a                	jge    c0017e1b <findDataTable(unsigned char*, char*)+0x69>
c0017de1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de5:	c1 e0 03             	shl    eax,0x3
c0017de8:	05 60 0c 03 c0       	add    eax,0xc0030c60
c0017ded:	83 ec 04             	sub    esp,0x4
c0017df0:	6a 04                	push   0x4
c0017df2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df6:	50                   	push   eax
c0017df7:	e8 44 88 fe ff       	call   c0000640 <memcmp>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	85 c0                	test   eax,eax
c0017e01:	0f 94 c0             	sete   al
c0017e04:	84 c0                	test   al,al
c0017e06:	74 0d                	je     c0017e15 <findDataTable(unsigned char*, char*)+0x63>
c0017e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e0c:	8b 04 c5 64 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf39c]
c0017e13:	eb 35                	jmp    c0017e4a <findDataTable(unsigned char*, char*)+0x98>
c0017e15:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e19:	eb bb                	jmp    c0017dd6 <findDataTable(unsigned char*, char*)+0x24>
c0017e1b:	a0 60 0e 03 c0       	mov    al,ds:0xc0030e60
c0017e20:	84 c0                	test   al,al
c0017e22:	74 07                	je     c0017e2b <findDataTable(unsigned char*, char*)+0x79>
c0017e24:	b8 58 00 00 00       	mov    eax,0x58
c0017e29:	eb 05                	jmp    c0017e30 <findDataTable(unsigned char*, char*)+0x7e>
c0017e2b:	b8 52 00 00 00       	mov    eax,0x52
c0017e30:	83 ec 04             	sub    esp,0x4
c0017e33:	50                   	push   eax
c0017e34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e38:	68 a4 b6 02 c0       	push   0xc002b6a4
c0017e3d:	e8 f6 b1 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0017e42:	83 c4 10             	add    esp,0x10
c0017e45:	b8 00 00 00 00       	mov    eax,0x0
c0017e4a:	83 c4 1c             	add    esp,0x1c
c0017e4d:	c3                   	ret    

c0017e4e <scanMADT()>:
c0017e4e:	53                   	push   ebx
c0017e4f:	83 ec 38             	sub    esp,0x38
c0017e52:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017e57:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e5d:	83 e0 04             	and    eax,0x4
c0017e60:	84 c0                	test   al,al
c0017e62:	0f 84 63 04 00 00    	je     c00182cb <scanMADT()+0x47d>
c0017e68:	e8 76 fb ff ff       	call   c00179e3 <findRSDP()>
c0017e6d:	a3 6c 0e 03 c0       	mov    ds:0xc0030e6c,eax
c0017e72:	a1 6c 0e 03 c0       	mov    eax,ds:0xc0030e6c
c0017e77:	85 c0                	test   eax,eax
c0017e79:	75 19                	jne    c0017e94 <scanMADT()+0x46>
c0017e7b:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017e80:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e86:	83 e2 fb             	and    edx,0xfffffffb
c0017e89:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e8f:	e9 3b 04 00 00       	jmp    c00182cf <scanMADT()+0x481>
c0017e94:	a1 6c 0e 03 c0       	mov    eax,ds:0xc0030e6c
c0017e99:	83 ec 0c             	sub    esp,0xc
c0017e9c:	50                   	push   eax
c0017e9d:	e8 f2 fd ff ff       	call   c0017c94 <findRSDT(unsigned char*)>
c0017ea2:	83 c4 10             	add    esp,0x10
c0017ea5:	a3 68 0e 03 c0       	mov    ds:0xc0030e68,eax
c0017eaa:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017eaf:	85 c0                	test   eax,eax
c0017eb1:	75 19                	jne    c0017ecc <scanMADT()+0x7e>
c0017eb3:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017eb8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ebe:	83 e2 fb             	and    edx,0xfffffffb
c0017ec1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ec7:	e9 03 04 00 00       	jmp    c00182cf <scanMADT()+0x481>
c0017ecc:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017ed1:	83 ec 0c             	sub    esp,0xc
c0017ed4:	50                   	push   eax
c0017ed5:	e8 93 fb ff ff       	call   c0017a6d <loadACPITables(unsigned char*)>
c0017eda:	83 c4 10             	add    esp,0x10
c0017edd:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0017ee2:	83 ec 08             	sub    esp,0x8
c0017ee5:	68 72 b5 02 c0       	push   0xc002b572
c0017eea:	50                   	push   eax
c0017eeb:	e8 c2 fe ff ff       	call   c0017db2 <findDataTable(unsigned char*, char*)>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ef7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017efc:	75 19                	jne    c0017f17 <scanMADT()+0xc9>
c0017efe:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0017f03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f09:	83 e2 fe             	and    edx,0xfffffffe
c0017f0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f12:	e9 b8 03 00 00       	jmp    c00182cf <scanMADT()+0x481>
c0017f17:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f26:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f2a:	0f 87 9f 03 00 00    	ja     c00182cf <scanMADT()+0x481>
c0017f30:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f38:	0f 87 91 03 00 00    	ja     c00182cf <scanMADT()+0x481>
c0017f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f4a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f55:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f59:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f61:	8d 50 01             	lea    edx,[eax+0x1]
c0017f64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f6c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f70:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f74:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f79:	0f 86 4f 03 00 00    	jbe    c00182ce <scanMADT()+0x480>
c0017f7f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f84:	75 57                	jne    c0017fdd <scanMADT()+0x18f>
c0017f86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f91:	8a 15 60 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031060
c0017f97:	0f b6 d2             	movzx  edx,dl
c0017f9a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f9e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fa2:	88 82 a0 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef60],al
c0017fa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fac:	8d 50 01             	lea    edx,[eax+0x1]
c0017faf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb3:	8a 15 60 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031060
c0017fb9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fbc:	88 0d 60 10 03 c0    	mov    BYTE PTR ds:0xc0031060,cl
c0017fc2:	0f b6 d2             	movzx  edx,dl
c0017fc5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fc9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fcd:	88 82 80 10 03 c0    	mov    BYTE PTR [edx-0x3ffcef80],al
c0017fd3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fd8:	e9 da 02 00 00       	jmp    c00182b7 <scanMADT()+0x469>
c0017fdd:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fe2:	0f 85 14 01 00 00    	jne    c00180fc <scanMADT()+0x2ae>
c0017fe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fec:	8d 50 01             	lea    edx,[eax+0x1]
c0017fef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ff3:	8a 15 20 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f20
c0017ff9:	0f b6 d2             	movzx  edx,dl
c0017ffc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018000:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018004:	88 82 40 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf0c0],al
c001800a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001800e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018012:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018016:	01 d0                	add    eax,edx
c0018018:	83 c0 2c             	add    eax,0x2c
c001801b:	8a 00                	mov    al,BYTE PTR [eax]
c001801d:	0f b6 d0             	movzx  edx,al
c0018020:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018024:	8d 48 01             	lea    ecx,[eax+0x1]
c0018027:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001802f:	0f b6 c0             	movzx  eax,al
c0018032:	c1 e0 08             	shl    eax,0x8
c0018035:	89 d1                	mov    ecx,edx
c0018037:	09 c1                	or     ecx,eax
c0018039:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803d:	8d 50 02             	lea    edx,[eax+0x2]
c0018040:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018044:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018048:	0f b6 c0             	movzx  eax,al
c001804b:	c1 e0 10             	shl    eax,0x10
c001804e:	09 c1                	or     ecx,eax
c0018050:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018054:	8d 50 03             	lea    edx,[eax+0x3]
c0018057:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001805f:	0f b6 c0             	movzx  eax,al
c0018062:	c1 e0 18             	shl    eax,0x18
c0018065:	09 c1                	or     ecx,eax
c0018067:	89 ca                	mov    edx,ecx
c0018069:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c001806e:	0f b6 c0             	movzx  eax,al
c0018071:	89 14 85 60 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0a0],edx
c0018078:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001807d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018081:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018085:	01 d0                	add    eax,edx
c0018087:	83 c0 2c             	add    eax,0x2c
c001808a:	8a 00                	mov    al,BYTE PTR [eax]
c001808c:	0f b6 d0             	movzx  edx,al
c001808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018093:	8d 48 01             	lea    ecx,[eax+0x1]
c0018096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001809e:	0f b6 c0             	movzx  eax,al
c00180a1:	c1 e0 08             	shl    eax,0x8
c00180a4:	89 d1                	mov    ecx,edx
c00180a6:	09 c1                	or     ecx,eax
c00180a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ac:	8d 50 02             	lea    edx,[eax+0x2]
c00180af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b7:	0f b6 c0             	movzx  eax,al
c00180ba:	c1 e0 10             	shl    eax,0x10
c00180bd:	09 c1                	or     ecx,eax
c00180bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c3:	8d 50 03             	lea    edx,[eax+0x3]
c00180c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ce:	0f b6 c0             	movzx  eax,al
c00180d1:	c1 e0 18             	shl    eax,0x18
c00180d4:	09 c1                	or     ecx,eax
c00180d6:	89 ca                	mov    edx,ecx
c00180d8:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c00180dd:	0f b6 c0             	movzx  eax,al
c00180e0:	89 14 85 e0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf020],edx
c00180e7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ec:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c00180f1:	40                   	inc    eax
c00180f2:	a2 20 0f 03 c0       	mov    ds:0xc0030f20,al
c00180f7:	e9 bb 01 00 00       	jmp    c00182b7 <scanMADT()+0x469>
c00180fc:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0018101:	0f 85 e9 00 00 00    	jne    c00181f0 <scanMADT()+0x3a2>
c0018107:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810b:	8d 50 01             	lea    edx,[eax+0x1]
c001810e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018112:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018116:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001811a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001811e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018122:	8d 50 01             	lea    edx,[eax+0x1]
c0018125:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001812d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018131:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018135:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813d:	01 d0                	add    eax,edx
c001813f:	83 c0 2c             	add    eax,0x2c
c0018142:	8a 00                	mov    al,BYTE PTR [eax]
c0018144:	0f b6 d0             	movzx  edx,al
c0018147:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814b:	8d 48 01             	lea    ecx,[eax+0x1]
c001814e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018152:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018156:	0f b6 c0             	movzx  eax,al
c0018159:	c1 e0 08             	shl    eax,0x8
c001815c:	89 d1                	mov    ecx,edx
c001815e:	09 c1                	or     ecx,eax
c0018160:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018164:	8d 50 02             	lea    edx,[eax+0x2]
c0018167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001816f:	0f b6 c0             	movzx  eax,al
c0018172:	c1 e0 10             	shl    eax,0x10
c0018175:	09 c1                	or     ecx,eax
c0018177:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817b:	8d 50 03             	lea    edx,[eax+0x3]
c001817e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018182:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018186:	0f b6 c0             	movzx  eax,al
c0018189:	c1 e0 18             	shl    eax,0x18
c001818c:	09 c8                	or     eax,ecx
c001818e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018192:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018197:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001819b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001819f:	01 d0                	add    eax,edx
c00181a1:	83 c0 2c             	add    eax,0x2c
c00181a4:	8a 00                	mov    al,BYTE PTR [eax]
c00181a6:	0f b6 c0             	movzx  eax,al
c00181a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181ad:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b4:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181b8:	0f b6 d2             	movzx  edx,dl
c00181bb:	c1 e2 08             	shl    edx,0x8
c00181be:	09 d0                	or     eax,edx
c00181c0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181c5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ca:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181d3:	88 90 c0 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2840],dl
c00181d9:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181de:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181e3:	66 89 84 12 00 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf100],ax
c00181eb:	e9 c7 00 00 00       	jmp    c00182b7 <scanMADT()+0x469>
c00181f0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181f5:	0f 85 b0 00 00 00    	jne    c00182ab <scanMADT()+0x45d>
c00181fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ff:	8d 50 01             	lea    edx,[eax+0x1]
c0018202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018206:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001820e:	0f b6 c0             	movzx  eax,al
c0018211:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018215:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018219:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001821d:	01 d0                	add    eax,edx
c001821f:	83 c0 2c             	add    eax,0x2c
c0018222:	8a 00                	mov    al,BYTE PTR [eax]
c0018224:	0f b6 d0             	movzx  edx,al
c0018227:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822b:	8d 48 01             	lea    ecx,[eax+0x1]
c001822e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018232:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018236:	0f b6 c0             	movzx  eax,al
c0018239:	c1 e0 08             	shl    eax,0x8
c001823c:	09 d0                	or     eax,edx
c001823e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018242:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001824b:	8d 50 01             	lea    edx,[eax+0x1]
c001824e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018252:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018256:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001825a:	0f b6 c0             	movzx  eax,al
c001825d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018265:	c1 e0 08             	shl    eax,0x8
c0018268:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001826c:	89 c1                	mov    ecx,eax
c001826e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018272:	c1 e0 18             	shl    eax,0x18
c0018275:	89 c3                	mov    ebx,eax
c0018277:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c001827c:	8d 50 01             	lea    edx,[eax+0x1]
c001827f:	89 15 70 0e 03 c0    	mov    DWORD PTR ds:0xc0030e70,edx
c0018285:	09 d9                	or     ecx,ebx
c0018287:	89 ca                	mov    edx,ecx
c0018289:	89 14 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],edx
c0018290:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001829c:	68 d4 b6 02 c0       	push   0xc002b6d4
c00182a1:	e8 92 ad ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00182a6:	83 c4 10             	add    esp,0x10
c00182a9:	eb 0c                	jmp    c00182b7 <scanMADT()+0x469>
c00182ab:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182b0:	75 05                	jne    c00182b7 <scanMADT()+0x469>
c00182b2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182b7:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182c0:	01 d0                	add    eax,edx
c00182c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182c6:	e9 54 fc ff ff       	jmp    c0017f1f <scanMADT()+0xd1>
c00182cb:	90                   	nop
c00182cc:	eb 01                	jmp    c00182cf <scanMADT()+0x481>
c00182ce:	90                   	nop
c00182cf:	83 c4 38             	add    esp,0x38
c00182d2:	5b                   	pop    ebx
c00182d3:	c3                   	ret    

c00182d4 <ACPI::ACPI()>:
c00182d4:	83 ec 0c             	sub    esp,0xc
c00182d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182db:	83 ec 08             	sub    esp,0x8
c00182de:	68 77 b5 02 c0       	push   0xc002b577
c00182e3:	50                   	push   eax
c00182e4:	e8 65 c3 ff ff       	call   c001464e <Device::Device(char const*)>
c00182e9:	83 c4 10             	add    esp,0x10
c00182ec:	ba 48 b7 02 c0       	mov    edx,0xc002b748
c00182f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f5:	89 10                	mov    DWORD PTR [eax],edx
c00182f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018306:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0018310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018314:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001831e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018322:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001832d:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018334:	e8 15 fb ff ff       	call   c0017e4e <scanMADT()>
c0018339:	90                   	nop
c001833a:	83 c4 0c             	add    esp,0xc
c001833d:	c3                   	ret    

c001833e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001833e:	83 ec 2c             	sub    esp,0x2c
c0018341:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018345:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018349:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001834d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018351:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018356:	88 d0                	mov    al,dl
c0018358:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001835c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018361:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001836d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018373:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018377:	0f 8d 97 00 00 00    	jge    c0018414 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001837d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018381:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018385:	83 c2 2a             	add    edx,0x2a
c0018388:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001838c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018391:	75 78                	jne    c001840b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018393:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018397:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839b:	83 c2 2a             	add    edx,0x2a
c001839e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183a2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183a6:	75 63                	jne    c001840b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183a8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183ad:	74 3a                	je     c00183e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b7:	83 c2 2a             	add    edx,0x2a
c00183ba:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183c5:	39 c2                	cmp    edx,eax
c00183c7:	74 10                	je     c00183d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183c9:	83 ec 0c             	sub    esp,0xc
c00183cc:	68 10 b7 02 c0       	push   0xc002b710
c00183d1:	e8 0f 23 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00183d6:	83 c4 10             	add    esp,0x10
c00183d9:	83 ec 0c             	sub    esp,0xc
c00183dc:	68 7c b5 02 c0       	push   0xc002b57c
c00183e1:	e8 ff 22 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f5:	83 c2 2a             	add    edx,0x2a
c00183f8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00183fe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018401:	89 01                	mov    DWORD PTR [ecx],eax
c0018403:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018406:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001840b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001840f:	e9 55 ff ff ff       	jmp    c0018369 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018414:	90                   	nop
c0018415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018419:	83 c4 2c             	add    esp,0x2c
c001841c:	c2 04 00             	ret    0x4
c001841f:	90                   	nop

c0018420 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018420:	83 ec 1c             	sub    esp,0x1c
c0018423:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018427:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001842b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001842f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018434:	88 c8                	mov    al,cl
c0018436:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001843a:	88 d0                	mov    al,dl
c001843c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018444:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001844a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018451:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018455:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018463:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018467:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001846a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001846e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018477:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001847d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018481:	8d 48 01             	lea    ecx,[eax+0x1]
c0018484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018488:	83 c2 2a             	add    edx,0x2a
c001848b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001848f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018493:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184a4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ac:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184b2:	8d 50 01             	lea    edx,[eax+0x1]
c00184b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184c9:	3d 00 02 00 00       	cmp    eax,0x200
c00184ce:	75 10                	jne    c00184e0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184d0:	83 ec 0c             	sub    esp,0xc
c00184d3:	68 8b b5 02 c0       	push   0xc002b58b
c00184d8:	e8 08 22 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c00184dd:	83 c4 10             	add    esp,0x10
c00184e0:	90                   	nop
c00184e1:	83 c4 1c             	add    esp,0x1c
c00184e4:	c3                   	ret    
c00184e5:	90                   	nop

c00184e6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184e6:	b8 00 00 00 00       	mov    eax,0x0
c00184eb:	c3                   	ret    

c00184ec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184ec:	83 ec 1c             	sub    esp,0x1c
c00184ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184f3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184fa:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00184ff:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018504:	83 ec 08             	sub    esp,0x8
c0018507:	52                   	push   edx
c0018508:	50                   	push   eax
c0018509:	e8 4a 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018515:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001851a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001851f:	83 ec 04             	sub    esp,0x4
c0018522:	6a 01                	push   0x1
c0018524:	52                   	push   edx
c0018525:	50                   	push   eax
c0018526:	e8 43 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	90                   	nop
c001852f:	83 c4 1c             	add    esp,0x1c
c0018532:	c3                   	ret    
c0018533:	90                   	nop

c0018534 <ACPI::open(int, int, void*)>:
c0018534:	53                   	push   ebx
c0018535:	83 ec 28             	sub    esp,0x28
c0018538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001853c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018547:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001854e:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0018553:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018559:	83 e0 04             	and    eax,0x4
c001855c:	84 c0                	test   al,al
c001855e:	74 47                	je     c00185a7 <ACPI::open(int, int, void*)+0x73>
c0018560:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0018565:	83 ec 08             	sub    esp,0x8
c0018568:	68 a8 b5 02 c0       	push   0xc002b5a8
c001856d:	50                   	push   eax
c001856e:	e8 3f f8 ff ff       	call   c0017db2 <findDataTable(unsigned char*, char*)>
c0018573:	83 c4 10             	add    esp,0x10
c0018576:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001857a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001857f:	74 26                	je     c00185a7 <ACPI::open(int, int, void*)+0x73>
c0018581:	83 ec 0c             	sub    esp,0xc
c0018584:	68 ad b5 02 c0       	push   0xc002b5ad
c0018589:	e8 aa aa ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018595:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001859c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a7:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00185af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185b3:	8a 00                	mov    al,BYTE PTR [eax]
c00185b5:	3c 01                	cmp    al,0x1
c00185b7:	75 28                	jne    c00185e1 <ACPI::open(int, int, void*)+0xad>
c00185b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185bd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	68 be b5 02 c0       	push   0xc002b5be
c00185d7:	e8 5c aa ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	eb 25                	jmp    c0018606 <ACPI::open(int, int, void*)+0xd2>
c00185e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185e5:	8a 00                	mov    al,BYTE PTR [eax]
c00185e7:	3c 02                	cmp    al,0x2
c00185e9:	75 1b                	jne    c0018606 <ACPI::open(int, int, void*)+0xd2>
c00185eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ef:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f6:	83 ec 0c             	sub    esp,0xc
c00185f9:	68 c6 b5 02 c0       	push   0xc002b5c6
c00185fe:	e8 35 aa ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001860a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018610:	83 f0 01             	xor    eax,0x1
c0018613:	84 c0                	test   al,al
c0018615:	74 6a                	je     c0018681 <ACPI::open(int, int, void*)+0x14d>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 ce b5 02 c0       	push   0xc002b5ce
c001861f:	e8 14 aa ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	e8 24 7b fe ff       	call   c0000150 <manualPCIProbe>
c001862c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018630:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018635:	75 28                	jne    c001865f <ACPI::open(int, int, void*)+0x12b>
c0018637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018642:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018646:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001864d:	83 ec 0c             	sub    esp,0xc
c0018650:	68 dc b5 02 c0       	push   0xc002b5dc
c0018655:	e8 de a9 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	eb 22                	jmp    c0018681 <ACPI::open(int, int, void*)+0x14d>
c001865f:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018664:	75 1b                	jne    c0018681 <ACPI::open(int, int, void*)+0x14d>
c0018666:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001866a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018671:	83 ec 0c             	sub    esp,0xc
c0018674:	68 e6 b5 02 c0       	push   0xc002b5e6
c0018679:	e8 ba a9 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018685:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001868b:	84 c0                	test   al,al
c001868d:	74 13                	je     c00186a2 <ACPI::open(int, int, void*)+0x16e>
c001868f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018693:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018699:	83 f0 01             	xor    eax,0x1
c001869c:	0f b6 c0             	movzx  eax,al
c001869f:	40                   	inc    eax
c00186a0:	eb 05                	jmp    c00186a7 <ACPI::open(int, int, void*)+0x173>
c00186a2:	b8 00 00 00 00       	mov    eax,0x0
c00186a7:	83 ec 08             	sub    esp,0x8
c00186aa:	50                   	push   eax
c00186ab:	68 f0 b5 02 c0       	push   0xc002b5f0
c00186b0:	e8 83 a9 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186bc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186c2:	84 c0                	test   al,al
c00186c4:	74 67                	je     c001872d <ACPI::open(int, int, void*)+0x1f9>
c00186c6:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00186ce:	83 ec 0c             	sub    esp,0xc
c00186d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186d5:	e8 69 71 ff ff       	call   c000f843 <malloc>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	89 c3                	mov    ebx,eax
c00186df:	83 ec 0c             	sub    esp,0xc
c00186e2:	53                   	push   ebx
c00186e3:	e8 f6 a2 00 00       	call   c00229de <PCI::PCI()>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186f3:	83 ec 08             	sub    esp,0x8
c00186f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186fa:	50                   	push   eax
c00186fb:	e8 5e bd ff ff       	call   c001445e <Device::addChild(Device*)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018707:	8b 00                	mov    eax,DWORD PTR [eax]
c0018709:	83 c0 08             	add    eax,0x8
c001870c:	8b 00                	mov    eax,DWORD PTR [eax]
c001870e:	6a 00                	push   0x0
c0018710:	6a 00                	push   0x0
c0018712:	6a 00                	push   0x0
c0018714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018718:	ff d0                	call   eax
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	83 ec 0c             	sub    esp,0xc
c0018720:	68 f9 b5 02 c0       	push   0xc002b5f9
c0018725:	e8 0e a9 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	68 04 b6 02 c0       	push   0xc002b604
c0018735:	e8 81 46 00 00       	call   c001cdbb <Thr::loadKernelSymbolTable(char const*)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0018743:	83 ec 08             	sub    esp,0x8
c0018746:	6a 01                	push   0x1
c0018748:	68 22 b6 02 c0       	push   0xc002b622
c001874d:	e8 c6 50 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0018752:	83 c4 10             	add    esp,0x10
c0018755:	83 ec 08             	sub    esp,0x8
c0018758:	53                   	push   ebx
c0018759:	50                   	push   eax
c001875a:	e8 08 53 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0018768:	83 ec 08             	sub    esp,0x8
c001876b:	6a 01                	push   0x1
c001876d:	68 3f b6 02 c0       	push   0xc002b63f
c0018772:	e8 a1 50 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	83 ec 08             	sub    esp,0x8
c001877d:	53                   	push   ebx
c001877e:	50                   	push   eax
c001877f:	e8 e3 52 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001878c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018792:	83 e0 04             	and    eax,0x4
c0018795:	84 c0                	test   al,al
c0018797:	0f 84 d2 00 00 00    	je     c001886f <ACPI::open(int, int, void*)+0x33b>
c001879d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00187a4:	83 ec 0c             	sub    esp,0xc
c00187a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00187ab:	e8 93 70 ff ff       	call   c000f843 <malloc>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	89 c3                	mov    ebx,eax
c00187b5:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c00187ba:	83 ec 04             	sub    esp,0x4
c00187bd:	50                   	push   eax
c00187be:	68 5c b6 02 c0       	push   0xc002b65c
c00187c3:	53                   	push   ebx
c00187c4:	e8 c7 ad ff ff       	call   c0013590 <File::File(char const*, Process*)>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d5:	74 17                	je     c00187ee <ACPI::open(int, int, void*)+0x2ba>
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187de:	e8 7f b0 ff ff       	call   c0013862 <File::exists()>
c00187e3:	83 c4 10             	add    esp,0x10
c00187e6:	84 c0                	test   al,al
c00187e8:	74 04                	je     c00187ee <ACPI::open(int, int, void*)+0x2ba>
c00187ea:	b0 01                	mov    al,0x1
c00187ec:	eb 02                	jmp    c00187f0 <ACPI::open(int, int, void*)+0x2bc>
c00187ee:	b0 00                	mov    al,0x0
c00187f0:	84 c0                	test   al,al
c00187f2:	74 22                	je     c0018816 <ACPI::open(int, int, void*)+0x2e2>
c00187f4:	83 ec 08             	sub    esp,0x8
c00187f7:	6a 01                	push   0x1
c00187f9:	68 5c b6 02 c0       	push   0xc002b65c
c00187fe:	e8 15 50 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	83 ec 08             	sub    esp,0x8
c0018809:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001880d:	50                   	push   eax
c001880e:	e8 54 52 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c0018813:	83 c4 10             	add    esp,0x10
c0018816:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001881b:	74 1e                	je     c001883b <ACPI::open(int, int, void*)+0x307>
c001881d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018822:	74 17                	je     c001883b <ACPI::open(int, int, void*)+0x307>
c0018824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018828:	8b 00                	mov    eax,DWORD PTR [eax]
c001882a:	83 c0 08             	add    eax,0x8
c001882d:	8b 00                	mov    eax,DWORD PTR [eax]
c001882f:	83 ec 0c             	sub    esp,0xc
c0018832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018836:	ff d0                	call   eax
c0018838:	83 c4 10             	add    esp,0x10
c001883b:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c0018840:	83 ec 08             	sub    esp,0x8
c0018843:	68 79 b6 02 c0       	push   0xc002b679
c0018848:	50                   	push   eax
c0018849:	e8 64 f5 ff ff       	call   c0017db2 <findDataTable(unsigned char*, char*)>
c001884e:	83 c4 10             	add    esp,0x10
c0018851:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018855:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001885a:	74 13                	je     c001886f <ACPI::open(int, int, void*)+0x33b>
c001885c:	83 ec 08             	sub    esp,0x8
c001885f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018863:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018867:	e8 80 fc ff ff       	call   c00184ec <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	b8 00 00 00 00       	mov    eax,0x0
c0018874:	83 c4 28             	add    esp,0x28
c0018877:	5b                   	pop    ebx
c0018878:	c3                   	ret    
c0018879:	90                   	nop

c001887a <ACPI::sleep()>:
c001887a:	83 ec 0c             	sub    esp,0xc
c001887d:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c0018882:	85 c0                	test   eax,eax
c0018884:	74 07                	je     c001888d <ACPI::sleep()+0x13>
c0018886:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c001888b:	ff d0                	call   eax
c001888d:	90                   	nop
c001888e:	83 c4 0c             	add    esp,0xc
c0018891:	c3                   	ret    

c0018892 <CPU::close(int, int, void*)>:
c0018892:	31 c0                	xor    eax,eax
c0018894:	c3                   	ret    
c0018895:	90                   	nop

c0018896 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018896:	55                   	push   ebp
c0018897:	57                   	push   edi
c0018898:	56                   	push   esi
c0018899:	53                   	push   ebx
c001889a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001889e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188a2:	89 ce                	mov    esi,ecx
c00188a4:	89 d5                	mov    ebp,edx
c00188a6:	80 f9 04             	cmp    cl,0x4
c00188a9:	75 28                	jne    c00188d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00188ab:	8d 42 f9             	lea    eax,[edx-0x7]
c00188ae:	3c 03                	cmp    al,0x3
c00188b0:	0f 86 63 01 00 00    	jbe    c0018a19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00188b6:	80 fa 03             	cmp    dl,0x3
c00188b9:	0f 84 5a 01 00 00    	je     c0018a19 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00188bf:	8d 7a f2             	lea    edi,[edx-0xe]
c00188c2:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c00188c7:	89 fb                	mov    ebx,edi
c00188c9:	80 fb 01             	cmp    bl,0x1
c00188cc:	77 4e                	ja     c001891c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00188ce:	e9 52 01 00 00       	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d3:	80 f9 05             	cmp    cl,0x5
c00188d6:	75 4d                	jne    c0018925 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00188d8:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00188dd:	80 fa 03             	cmp    dl,0x3
c00188e0:	0f 86 3f 01 00 00    	jbe    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e6:	8d 7a fa             	lea    edi,[edx-0x6]
c00188e9:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00188ee:	89 fb                	mov    ebx,edi
c00188f0:	80 fb 01             	cmp    bl,0x1
c00188f3:	0f 86 2c 01 00 00    	jbe    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f9:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00188fe:	80 fa 08             	cmp    dl,0x8
c0018901:	0f 84 1e 01 00 00    	je     c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018907:	89 d7                	mov    edi,edx
c0018909:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c001890e:	83 e7 fb             	and    edi,0xfffffffb
c0018911:	89 fb                	mov    ebx,edi
c0018913:	80 fb 09             	cmp    bl,0x9
c0018916:	0f 84 09 01 00 00    	je     c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891c:	31 c0                	xor    eax,eax
c001891e:	89 eb                	mov    ebx,ebp
c0018920:	0f b6 fb             	movzx  edi,bl
c0018923:	eb 30                	jmp    c0018955 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018925:	31 c0                	xor    eax,eax
c0018927:	80 f9 06             	cmp    cl,0x6
c001892a:	75 f2                	jne    c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001892c:	80 fa 0a             	cmp    dl,0xa
c001892f:	77 ed                	ja     c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018931:	bf de 05 00 00       	mov    edi,0x5de
c0018936:	0f a3 d7             	bt     edi,edx
c0018939:	73 e3                	jae    c001891e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001893b:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018940:	e9 e0 00 00 00       	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018945:	39 c7                	cmp    edi,eax
c0018947:	0f 84 d3 00 00 00    	je     c0018a20 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001894d:	40                   	inc    eax
c001894e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018953:	74 09                	je     c001895e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018955:	89 f3                	mov    ebx,esi
c0018957:	80 fb 0f             	cmp    bl,0xf
c001895a:	75 f1                	jne    c001894d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001895c:	eb e7                	jmp    c0018945 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001895e:	80 f9 10             	cmp    cl,0x10
c0018961:	75 14                	jne    c0018977 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018963:	8d 42 fc             	lea    eax,[edx-0x4]
c0018966:	83 e0 fb             	and    eax,0xfffffffb
c0018969:	3c 02                	cmp    al,0x2
c001896b:	76 34                	jbe    c00189a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001896d:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018972:	80 fa 02             	cmp    dl,0x2
c0018975:	eb 24                	jmp    c001899b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018977:	80 f9 11             	cmp    cl,0x11
c001897a:	75 13                	jne    c001898f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001897c:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018981:	80 fa 03             	cmp    dl,0x3
c0018984:	0f 85 9b 00 00 00    	jne    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001898a:	e9 91 00 00 00       	jmp    c0018a20 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001898f:	80 f9 12             	cmp    cl,0x12
c0018992:	75 14                	jne    c00189a8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018994:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018999:	fe ca                	dec    dl
c001899b:	0f 85 84 00 00 00    	jne    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a1:	b8 00 da 02 c0       	mov    eax,0xc002da00
c00189a6:	eb 7d                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a8:	80 f9 14             	cmp    cl,0x14
c00189ab:	75 12                	jne    c00189bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00189ad:	4a                   	dec    edx
c00189ae:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c00189b3:	80 fa 01             	cmp    dl,0x1
c00189b6:	77 6d                	ja     c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b8:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00189bd:	eb 66                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189bf:	80 f9 15             	cmp    cl,0x15
c00189c2:	75 31                	jne    c00189f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00189c4:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00189c9:	80 fa 01             	cmp    dl,0x1
c00189cc:	74 57                	je     c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ce:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c00189d3:	80 fa 13             	cmp    dl,0x13
c00189d6:	76 0c                	jbe    c00189e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00189d8:	80 fa 30             	cmp    dl,0x30
c00189db:	75 48                	jne    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189dd:	b8 40 da 02 c0       	mov    eax,0xc002da40
c00189e2:	eb 41                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189e4:	b9 04 00 09 00       	mov    ecx,0x90004
c00189e9:	0f a3 d1             	bt     ecx,edx
c00189ec:	73 37                	jae    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ee:	b8 30 da 02 c0       	mov    eax,0xc002da30
c00189f3:	eb 30                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f5:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c00189fa:	80 f9 16             	cmp    cl,0x16
c00189fd:	75 26                	jne    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ff:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018a04:	84 d2                	test   dl,dl
c0018a06:	74 1d                	je     c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a08:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018a0d:	80 fa 30             	cmp    dl,0x30
c0018a10:	75 13                	jne    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a12:	b8 60 da 02 c0       	mov    eax,0xc002da60
c0018a17:	eb 0c                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a19:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a1e:	eb 05                	jmp    c0018a25 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a20:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018a25:	5b                   	pop    ebx
c0018a26:	5e                   	pop    esi
c0018a27:	5f                   	pop    edi
c0018a28:	5d                   	pop    ebp
c0018a29:	c3                   	ret    

c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018a2a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a32:	80 f9 04             	cmp    cl,0x4
c0018a35:	75 6b                	jne    c0018aa2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018a37:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a3c:	80 fa 01             	cmp    dl,0x1
c0018a3f:	0f 86 92 02 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a45:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a4a:	80 fa 02             	cmp    dl,0x2
c0018a4d:	0f 84 84 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a53:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a58:	80 fa 03             	cmp    dl,0x3
c0018a5b:	0f 84 76 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a61:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a66:	80 fa 04             	cmp    dl,0x4
c0018a69:	0f 84 68 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a6f:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018a74:	80 fa 05             	cmp    dl,0x5
c0018a77:	0f 84 5a 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7d:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a82:	80 fa 07             	cmp    dl,0x7
c0018a85:	0f 84 4c 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8b:	83 ea 08             	sub    edx,0x8
c0018a8e:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018a93:	80 fa 01             	cmp    dl,0x1
c0018a96:	0f 87 3b 02 00 00    	ja     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018aa1:	c3                   	ret    
c0018aa2:	80 f9 05             	cmp    cl,0x5
c0018aa5:	75 45                	jne    c0018aec <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018aa7:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018aaa:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018aaf:	80 f9 02             	cmp    cl,0x2
c0018ab2:	0f 86 1f 02 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab8:	80 fa 04             	cmp    dl,0x4
c0018abb:	0f 84 f3 01 00 00    	je     c0018cb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018ac1:	80 fa 07             	cmp    dl,0x7
c0018ac4:	0f 84 0d 02 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aca:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018acf:	80 fa 08             	cmp    dl,0x8
c0018ad2:	0f 84 ff 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad8:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018add:	80 fa 09             	cmp    dl,0x9
c0018ae0:	0f 85 f1 01 00 00    	jne    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae6:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018aeb:	c3                   	ret    
c0018aec:	80 f9 06             	cmp    cl,0x6
c0018aef:	0f 85 85 01 00 00    	jne    c0018c7a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018af5:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018afa:	80 fa 01             	cmp    dl,0x1
c0018afd:	0f 84 d4 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	8d 42 fb             	lea    eax,[edx-0x5]
c0018b06:	3c 01                	cmp    al,0x1
c0018b08:	0f 86 ac 01 00 00    	jbe    c0018cba <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018b0e:	80 fa 03             	cmp    dl,0x3
c0018b11:	0f 84 a3 01 00 00    	je     c0018cba <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018b17:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018b1a:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018b1f:	80 f9 01             	cmp    cl,0x1
c0018b22:	0f 86 af 01 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b28:	80 fa 09             	cmp    dl,0x9
c0018b2b:	0f 84 8f 01 00 00    	je     c0018cc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018b31:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018b34:	80 f9 01             	cmp    cl,0x1
c0018b37:	0f 86 9a 01 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3d:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b42:	80 fa 0d             	cmp    dl,0xd
c0018b45:	0f 84 8c 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4b:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b50:	80 fa 0e             	cmp    dl,0xe
c0018b53:	0f 84 7e 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b5e:	80 fa 0f             	cmp    dl,0xf
c0018b61:	0f 84 70 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b67:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b6c:	80 fa 15             	cmp    dl,0x15
c0018b6f:	0f 84 62 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b75:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b78:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b7d:	80 f9 01             	cmp    cl,0x1
c0018b80:	0f 86 51 01 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	80 fa 1a             	cmp    dl,0x1a
c0018b89:	0f 84 37 01 00 00    	je     c0018cc6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b8f:	80 fa 1c             	cmp    dl,0x1c
c0018b92:	0f 84 34 01 00 00    	je     c0018ccc <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b98:	80 fa 1d             	cmp    dl,0x1d
c0018b9b:	0f 84 36 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba1:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018ba6:	80 fa 25             	cmp    dl,0x25
c0018ba9:	0f 84 28 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baf:	8d 4a da             	lea    ecx,[edx-0x26]
c0018bb2:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018bb7:	80 f9 01             	cmp    cl,0x1
c0018bba:	0f 86 17 01 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc0:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bc5:	80 fa 2a             	cmp    dl,0x2a
c0018bc8:	0f 84 09 01 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bce:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bd3:	80 fa 2c             	cmp    dl,0x2c
c0018bd6:	0f 84 fb 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdc:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018be1:	80 fa 2d             	cmp    dl,0x2d
c0018be4:	0f 84 ed 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bea:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018bef:	80 fa 2e             	cmp    dl,0x2e
c0018bf2:	0f 84 df 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf8:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bfd:	80 fa 2f             	cmp    dl,0x2f
c0018c00:	0f 84 d1 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c06:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018c09:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c0e:	80 f9 01             	cmp    cl,0x1
c0018c11:	0f 86 c0 00 00 00    	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c17:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c1c:	80 fa 37             	cmp    dl,0x37
c0018c1f:	0f 84 b2 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c25:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018c2a:	80 fa 3a             	cmp    dl,0x3a
c0018c2d:	0f 84 a4 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c33:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c38:	80 fa 3c             	cmp    dl,0x3c
c0018c3b:	0f 84 96 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c41:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018c46:	80 fa 3d             	cmp    dl,0x3d
c0018c49:	0f 84 88 00 00 00    	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c4f:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018c54:	80 fa 3e             	cmp    dl,0x3e
c0018c57:	74 7e                	je     c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c59:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c5c:	3c 01                	cmp    al,0x1
c0018c5e:	76 72                	jbe    c0018cd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c60:	80 fa 3f             	cmp    dl,0x3f
c0018c63:	74 6d                	je     c0018cd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c65:	80 fa 4a             	cmp    dl,0x4a
c0018c68:	74 0a                	je     c0018c74 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c6a:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018c6f:	80 fa 4d             	cmp    dl,0x4d
c0018c72:	75 63                	jne    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c74:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c79:	c3                   	ret    
c0018c7a:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018c7f:	80 f9 0b             	cmp    cl,0xb
c0018c82:	75 0a                	jne    c0018c8e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c84:	fe ca                	dec    dl
c0018c86:	75 4f                	jne    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c88:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018c8d:	c3                   	ret    
c0018c8e:	80 f9 0f             	cmp    cl,0xf
c0018c91:	75 44                	jne    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c93:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018c98:	80 fa 02             	cmp    dl,0x2
c0018c9b:	76 3a                	jbe    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c9d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018ca0:	3c 01                	cmp    al,0x1
c0018ca2:	76 0a                	jbe    c0018cae <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ca4:	b8 5e ba 02 c0       	mov    eax,0xc002ba5e
c0018ca9:	80 fa 06             	cmp    dl,0x6
c0018cac:	75 29                	jne    c0018cd7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cae:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018cb3:	c3                   	ret    
c0018cb4:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018cb9:	c3                   	ret    
c0018cba:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018cbf:	c3                   	ret    
c0018cc0:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018cc5:	c3                   	ret    
c0018cc6:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018ccb:	c3                   	ret    
c0018ccc:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018cd1:	c3                   	ret    
c0018cd2:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018cd7:	c3                   	ret    

c0018cd8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018cd8:	60                   	pusha  
c0018cd9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ce5:	9c                   	pushf  
c0018ce6:	fa                   	cli    
c0018ce7:	0f 09                	wbinvd 
c0018ce9:	0f 30                	wrmsr  
c0018ceb:	9d                   	popf   
c0018cec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cf0:	89 02                	mov    DWORD PTR [edx],eax
c0018cf2:	61                   	popa   
c0018cf3:	c3                   	ret    

c0018cf4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cf4:	60                   	pusha  
c0018cf5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cf9:	9c                   	pushf  
c0018cfa:	fa                   	cli    
c0018cfb:	0f 09                	wbinvd 
c0018cfd:	31 c0                	xor    eax,eax
c0018cff:	31 d2                	xor    edx,edx
c0018d01:	0f 32                	rdmsr  
c0018d03:	9d                   	popf   
c0018d04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d08:	89 02                	mov    DWORD PTR [edx],eax
c0018d0a:	61                   	popa   
c0018d0b:	c3                   	ret    

c0018d0c <CPU::AMD_K6_writeback(int, int, int)>:
c0018d0c:	56                   	push   esi
c0018d0d:	53                   	push   ebx
c0018d0e:	83 ec 10             	sub    esp,0x10
c0018d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d15:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018d1a:	75 5d                	jne    c0018d79 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d1c:	83 f8 08             	cmp    eax,0x8
c0018d1f:	75 09                	jne    c0018d2a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018d21:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018d26:	7e 13                	jle    c0018d3b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d28:	eb 30                	jmp    c0018d5a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d2a:	83 f8 06             	cmp    eax,0x6
c0018d2d:	7c 4a                	jl     c0018d79 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d2f:	83 f8 07             	cmp    eax,0x7
c0018d32:	7e 07                	jle    c0018d3b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d34:	83 f8 09             	cmp    eax,0x9
c0018d37:	74 21                	je     c0018d5a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d39:	eb 3e                	jmp    c0018d79 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d3b:	89 e6                	mov    esi,esp
c0018d3d:	8b 1d a8 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e5a8
c0018d43:	56                   	push   esi
c0018d44:	c1 eb 15             	shr    ebx,0x15
c0018d47:	68 82 00 00 c0       	push   0xc0000082
c0018d4c:	83 e3 7e             	and    ebx,0x7e
c0018d4f:	e8 a0 ff ff ff       	call   c0018cf4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d54:	56                   	push   esi
c0018d55:	6a 00                	push   0x0
c0018d57:	53                   	push   ebx
c0018d58:	eb 12                	jmp    c0018d6c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d5a:	89 e3                	mov    ebx,esp
c0018d5c:	53                   	push   ebx
c0018d5d:	68 82 00 00 c0       	push   0xc0000082
c0018d62:	e8 8d ff ff ff       	call   c0018cf4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d67:	53                   	push   ebx
c0018d68:	6a 00                	push   0x0
c0018d6a:	6a 00                	push   0x0
c0018d6c:	68 82 00 00 c0       	push   0xc0000082
c0018d71:	e8 62 ff ff ff       	call   c0018cd8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d76:	83 c4 18             	add    esp,0x18
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	5b                   	pop    ebx
c0018d7d:	5e                   	pop    esi
c0018d7e:	c3                   	ret    
c0018d7f:	90                   	nop

c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d80:	55                   	push   ebp
c0018d81:	57                   	push   edi
c0018d82:	56                   	push   esi
c0018d83:	53                   	push   ebx
c0018d84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d88:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d8c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d90:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d94:	39 05 80 da 02 c0    	cmp    DWORD PTR ds:0xc002da80,eax
c0018d9a:	75 23                	jne    c0018dbf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d9c:	a1 cc 10 03 c0       	mov    eax,ds:0xc00310cc
c0018da1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018da5:	89 06                	mov    DWORD PTR [esi],eax
c0018da7:	a1 c8 10 03 c0       	mov    eax,ds:0xc00310c8
c0018dac:	89 07                	mov    DWORD PTR [edi],eax
c0018dae:	a1 c4 10 03 c0       	mov    eax,ds:0xc00310c4
c0018db3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018db6:	a1 c0 10 03 c0       	mov    eax,ds:0xc00310c0
c0018dbb:	89 02                	mov    DWORD PTR [edx],eax
c0018dbd:	eb 3f                	jmp    c0018dfe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018dbf:	31 c9                	xor    ecx,ecx
c0018dc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dc5:	0f a2                	cpuid  
c0018dc7:	89 06                	mov    DWORD PTR [esi],eax
c0018dc9:	89 1f                	mov    DWORD PTR [edi],ebx
c0018dcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dcf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018dd2:	89 10                	mov    DWORD PTR [eax],edx
c0018dd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dd8:	a3 80 da 02 c0       	mov    ds:0xc002da80,eax
c0018ddd:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ddf:	a3 cc 10 03 c0       	mov    ds:0xc00310cc,eax
c0018de4:	8b 07                	mov    eax,DWORD PTR [edi]
c0018de6:	a3 c8 10 03 c0       	mov    ds:0xc00310c8,eax
c0018deb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dee:	a3 c4 10 03 c0       	mov    ds:0xc00310c4,eax
c0018df3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0018df9:	a3 c0 10 03 c0       	mov    ds:0xc00310c0,eax
c0018dfe:	5b                   	pop    ebx
c0018dff:	5e                   	pop    esi
c0018e00:	5f                   	pop    edi
c0018e01:	5d                   	pop    ebp
c0018e02:	c3                   	ret    
c0018e03:	90                   	nop

c0018e04 <CPU::cpuidCheckEDX(unsigned int)>:
c0018e04:	83 ec 10             	sub    esp,0x10
c0018e07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e0b:	50                   	push   eax
c0018e0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e10:	50                   	push   eax
c0018e11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e15:	50                   	push   eax
c0018e16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1a:	50                   	push   eax
c0018e1b:	6a 01                	push   0x1
c0018e1d:	e8 5e ff ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e26:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018e2a:	0f 95 c0             	setne  al
c0018e2d:	83 c4 24             	add    esp,0x24
c0018e30:	c3                   	ret    
c0018e31:	90                   	nop

c0018e32 <CPU::cpuidCheckECX(unsigned int)>:
c0018e32:	83 ec 10             	sub    esp,0x10
c0018e35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e39:	50                   	push   eax
c0018e3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e3e:	50                   	push   eax
c0018e3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e43:	50                   	push   eax
c0018e44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e48:	50                   	push   eax
c0018e49:	6a 01                	push   0x1
c0018e4b:	e8 30 ff ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e54:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e58:	0f 95 c0             	setne  al
c0018e5b:	83 c4 24             	add    esp,0x24
c0018e5e:	c3                   	ret    
c0018e5f:	90                   	nop

c0018e60 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e60:	83 ec 10             	sub    esp,0x10
c0018e63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e67:	50                   	push   eax
c0018e68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e6c:	50                   	push   eax
c0018e6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e71:	50                   	push   eax
c0018e72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e76:	50                   	push   eax
c0018e77:	6a 07                	push   0x7
c0018e79:	e8 02 ff ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e82:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e86:	0f 95 c0             	setne  al
c0018e89:	83 c4 24             	add    esp,0x24
c0018e8c:	c3                   	ret    
c0018e8d:	90                   	nop

c0018e8e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e8e:	83 ec 10             	sub    esp,0x10
c0018e91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e95:	50                   	push   eax
c0018e96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e9a:	50                   	push   eax
c0018e9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e9f:	50                   	push   eax
c0018ea0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ea4:	50                   	push   eax
c0018ea5:	6a 07                	push   0x7
c0018ea7:	e8 d4 fe ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018eac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018eb0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018eb4:	0f 95 c0             	setne  al
c0018eb7:	83 c4 24             	add    esp,0x24
c0018eba:	c3                   	ret    
c0018ebb:	90                   	nop

c0018ebc <CPU::CPU()>:
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec3:	83 ec 08             	sub    esp,0x8
c0018ec6:	68 5e ba 02 c0       	push   0xc002ba5e
c0018ecb:	50                   	push   eax
c0018ecc:	e8 7d b7 ff ff       	call   c001464e <Device::Device(char const*)>
c0018ed1:	83 c4 10             	add    esp,0x10
c0018ed4:	ba 38 bb 02 c0       	mov    edx,0xc002bb38
c0018ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018edd:	89 10                	mov    DWORD PTR [eax],edx
c0018edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef1:	05 78 01 00 00       	add    eax,0x178
c0018ef6:	83 ec 0c             	sub    esp,0xc
c0018ef9:	50                   	push   eax
c0018efa:	e8 59 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f06:	05 7c 09 00 00       	add    eax,0x97c
c0018f0b:	83 ec 0c             	sub    esp,0xc
c0018f0e:	50                   	push   eax
c0018f0f:	e8 a6 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f1b:	05 7c 11 00 00       	add    eax,0x117c
c0018f20:	83 ec 0c             	sub    esp,0xc
c0018f23:	50                   	push   eax
c0018f24:	e8 ad 85 ff ff       	call   c00114d6 <TSS::TSS()>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f30:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f3b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018f45:	90                   	nop
c0018f46:	83 c4 0c             	add    esp,0xc
c0018f49:	c3                   	ret    

c0018f4a <CPU::displayFeatures()>:
c0018f4a:	53                   	push   ebx
c0018f4b:	83 ec 10             	sub    esp,0x10
c0018f4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f52:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f58:	68 6c b7 02 c0       	push   0xc002b76c
c0018f5d:	e8 d6 a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018f62:	59                   	pop    ecx
c0018f63:	58                   	pop    eax
c0018f64:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f6a:	50                   	push   eax
c0018f6b:	68 7d b7 02 c0       	push   0xc002b77d
c0018f70:	e8 c3 a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018f75:	58                   	pop    eax
c0018f76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7c:	5a                   	pop    edx
c0018f7d:	c1 e8 0e             	shr    eax,0xe
c0018f80:	0f b6 c0             	movzx  eax,al
c0018f83:	50                   	push   eax
c0018f84:	68 8e b7 02 c0       	push   0xc002b78e
c0018f89:	e8 aa a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018f8e:	59                   	pop    ecx
c0018f8f:	58                   	pop    eax
c0018f90:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f96:	66 c1 e8 06          	shr    ax,0x6
c0018f9a:	0f b6 c0             	movzx  eax,al
c0018f9d:	50                   	push   eax
c0018f9e:	68 9f b7 02 c0       	push   0xc002b79f
c0018fa3:	e8 90 a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018fa8:	c7 04 24 4c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc4c
c0018faf:	e8 84 a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018fb4:	83 c4 10             	add    esp,0x10
c0018fb7:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0018fbc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018fc3:	74 05                	je     c0018fca <CPU::displayFeatures()+0x80>
c0018fc5:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0018fca:	52                   	push   edx
c0018fcb:	52                   	push   edx
c0018fcc:	50                   	push   eax
c0018fcd:	68 b0 b7 02 c0       	push   0xc002b7b0
c0018fd2:	e8 61 a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018fd7:	83 c4 10             	add    esp,0x10
c0018fda:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0018fdf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018fe6:	78 05                	js     c0018fed <CPU::displayFeatures()+0xa3>
c0018fe8:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0018fed:	51                   	push   ecx
c0018fee:	51                   	push   ecx
c0018fef:	50                   	push   eax
c0018ff0:	68 c7 b7 02 c0       	push   0xc002b7c7
c0018ff5:	e8 3e a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0019002:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019009:	75 05                	jne    c0019010 <CPU::displayFeatures()+0xc6>
c001900b:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019010:	52                   	push   edx
c0019011:	52                   	push   edx
c0019012:	50                   	push   eax
c0019013:	68 de b7 02 c0       	push   0xc002b7de
c0019018:	e8 1b a0 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0019025:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001902c:	75 05                	jne    c0019033 <CPU::displayFeatures()+0xe9>
c001902e:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019033:	51                   	push   ecx
c0019034:	51                   	push   ecx
c0019035:	50                   	push   eax
c0019036:	68 f5 b7 02 c0       	push   0xc002b7f5
c001903b:	e8 f8 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019040:	83 c4 10             	add    esp,0x10
c0019043:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0019048:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001904f:	75 05                	jne    c0019056 <CPU::displayFeatures()+0x10c>
c0019051:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019056:	52                   	push   edx
c0019057:	52                   	push   edx
c0019058:	50                   	push   eax
c0019059:	68 0c b8 02 c0       	push   0xc002b80c
c001905e:	e8 d5 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c001906b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0019072:	75 05                	jne    c0019079 <CPU::displayFeatures()+0x12f>
c0019074:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019079:	51                   	push   ecx
c001907a:	51                   	push   ecx
c001907b:	50                   	push   eax
c001907c:	68 23 b8 02 c0       	push   0xc002b823
c0019081:	e8 b2 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c001908e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0019095:	75 05                	jne    c001909c <CPU::displayFeatures()+0x152>
c0019097:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c001909c:	52                   	push   edx
c001909d:	52                   	push   edx
c001909e:	50                   	push   eax
c001909f:	68 3a b8 02 c0       	push   0xc002b83a
c00190a4:	e8 8f 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c00190b1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00190b8:	75 05                	jne    c00190bf <CPU::displayFeatures()+0x175>
c00190ba:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c00190bf:	51                   	push   ecx
c00190c0:	51                   	push   ecx
c00190c1:	50                   	push   eax
c00190c2:	68 51 b8 02 c0       	push   0xc002b851
c00190c7:	e8 6c 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c00190d4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00190db:	75 05                	jne    c00190e2 <CPU::displayFeatures()+0x198>
c00190dd:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c00190e2:	52                   	push   edx
c00190e3:	52                   	push   edx
c00190e4:	50                   	push   eax
c00190e5:	68 68 b8 02 c0       	push   0xc002b868
c00190ea:	e8 49 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c00190f7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190fe:	75 05                	jne    c0019105 <CPU::displayFeatures()+0x1bb>
c0019100:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019105:	51                   	push   ecx
c0019106:	51                   	push   ecx
c0019107:	50                   	push   eax
c0019108:	68 7f b8 02 c0       	push   0xc002b87f
c001910d:	e8 26 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c001911a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019121:	75 05                	jne    c0019128 <CPU::displayFeatures()+0x1de>
c0019123:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019128:	52                   	push   edx
c0019129:	52                   	push   edx
c001912a:	50                   	push   eax
c001912b:	68 96 b8 02 c0       	push   0xc002b896
c0019130:	e8 03 9f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019135:	83 c4 10             	add    esp,0x10
c0019138:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c001913d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019144:	75 05                	jne    c001914b <CPU::displayFeatures()+0x201>
c0019146:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c001914b:	51                   	push   ecx
c001914c:	51                   	push   ecx
c001914d:	50                   	push   eax
c001914e:	68 ad b8 02 c0       	push   0xc002b8ad
c0019153:	e8 e0 9e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019158:	83 c4 10             	add    esp,0x10
c001915b:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0019160:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019167:	75 05                	jne    c001916e <CPU::displayFeatures()+0x224>
c0019169:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c001916e:	52                   	push   edx
c001916f:	52                   	push   edx
c0019170:	50                   	push   eax
c0019171:	68 c4 b8 02 c0       	push   0xc002b8c4
c0019176:	e8 bd 9e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001917b:	83 c4 10             	add    esp,0x10
c001917e:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c0019183:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001918a:	78 05                	js     c0019191 <CPU::displayFeatures()+0x247>
c001918c:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c0019191:	51                   	push   ecx
c0019192:	51                   	push   ecx
c0019193:	50                   	push   eax
c0019194:	68 db b8 02 c0       	push   0xc002b8db
c0019199:	e8 9a 9e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001919e:	83 c4 10             	add    esp,0x10
c00191a1:	b8 12 a1 02 c0       	mov    eax,0xc002a112
c00191a6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00191ad:	75 05                	jne    c00191b4 <CPU::displayFeatures()+0x26a>
c00191af:	b8 16 a1 02 c0       	mov    eax,0xc002a116
c00191b4:	52                   	push   edx
c00191b5:	52                   	push   edx
c00191b6:	50                   	push   eax
c00191b7:	68 f2 b8 02 c0       	push   0xc002b8f2
c00191bc:	e8 77 9e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00191c1:	83 c4 18             	add    esp,0x18
c00191c4:	5b                   	pop    ebx
c00191c5:	c3                   	ret    

c00191c6 <CPU::detectFeatures()>:
c00191c6:	55                   	push   ebp
c00191c7:	57                   	push   edi
c00191c8:	56                   	push   esi
c00191c9:	53                   	push   ebx
c00191ca:	83 ec 50             	sub    esp,0x50
c00191cd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00191d1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00191db:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00191e2:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00191e8:	6a 0d                	push   0xd
c00191ea:	6a 00                	push   0x0
c00191ec:	57                   	push   edi
c00191ed:	e8 86 75 fe ff       	call   c0000778 <memset>
c00191f2:	83 c4 10             	add    esp,0x10
c00191f5:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c00191fa:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019201:	0f 84 20 09 00 00    	je     c0019b27 <CPU::detectFeatures()+0x961>
c0019207:	83 ec 0c             	sub    esp,0xc
c001920a:	6a 10                	push   0x10
c001920c:	e8 f3 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c0019211:	83 e0 01             	and    eax,0x1
c0019214:	8d 14 00             	lea    edx,[eax+eax*1]
c0019217:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001921d:	83 e0 fd             	and    eax,0xfffffffd
c0019220:	09 d0                	or     eax,edx
c0019222:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019228:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001922f:	e8 d0 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c0019234:	83 e0 01             	and    eax,0x1
c0019237:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001923e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019244:	83 e0 fb             	and    eax,0xfffffffb
c0019247:	09 d0                	or     eax,edx
c0019249:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001924f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019256:	e8 a9 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c001925b:	83 e0 01             	and    eax,0x1
c001925e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019265:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926b:	83 e0 f7             	and    eax,0xfffffff7
c001926e:	09 d0                	or     eax,edx
c0019270:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019276:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001927d:	e8 82 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c0019282:	83 e0 01             	and    eax,0x1
c0019285:	c1 e0 04             	shl    eax,0x4
c0019288:	88 c2                	mov    dl,al
c001928a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019290:	83 e0 ef             	and    eax,0xffffffef
c0019293:	09 d0                	or     eax,edx
c0019295:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001929b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00192a2:	e8 5d fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c00192a7:	83 e0 01             	and    eax,0x1
c00192aa:	c1 e0 05             	shl    eax,0x5
c00192ad:	88 c2                	mov    dl,al
c00192af:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192b5:	83 e0 df             	and    eax,0xffffffdf
c00192b8:	09 d0                	or     eax,edx
c00192ba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192c0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00192c7:	e8 38 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c00192cc:	83 e0 01             	and    eax,0x1
c00192cf:	8d 14 00             	lea    edx,[eax+eax*1]
c00192d2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192d8:	83 e0 fd             	and    eax,0xfffffffd
c00192db:	09 d0                	or     eax,edx
c00192dd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192e3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192ea:	e8 15 fb ff ff       	call   c0018e04 <CPU::cpuidCheckEDX(unsigned int)>
c00192ef:	83 e0 01             	and    eax,0x1
c00192f2:	c1 e0 06             	shl    eax,0x6
c00192f5:	88 c2                	mov    dl,al
c00192f7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192fd:	83 e0 bf             	and    eax,0xffffffbf
c0019300:	09 d0                	or     eax,edx
c0019302:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019308:	58                   	pop    eax
c0019309:	8d 74 24 28          	lea    esi,[esp+0x28]
c001930d:	56                   	push   esi
c001930e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019312:	55                   	push   ebp
c0019313:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019317:	50                   	push   eax
c0019318:	8d 54 24 28          	lea    edx,[esp+0x28]
c001931c:	52                   	push   edx
c001931d:	6a 00                	push   0x0
c001931f:	e8 5c fa ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019324:	83 c4 1c             	add    esp,0x1c
c0019327:	6a 04                	push   0x4
c0019329:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001932d:	50                   	push   eax
c001932e:	57                   	push   edi
c001932f:	e8 10 74 fe ff       	call   c0000744 <memcpy>
c0019334:	83 c4 0c             	add    esp,0xc
c0019337:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001933d:	6a 04                	push   0x4
c001933f:	56                   	push   esi
c0019340:	50                   	push   eax
c0019341:	e8 fe 73 fe ff       	call   c0000744 <memcpy>
c0019346:	83 c4 0c             	add    esp,0xc
c0019349:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001934f:	6a 04                	push   0x4
c0019351:	55                   	push   ebp
c0019352:	50                   	push   eax
c0019353:	e8 ec 73 fe ff       	call   c0000744 <memcpy>
c0019358:	58                   	pop    eax
c0019359:	5a                   	pop    edx
c001935a:	68 09 b9 02 c0       	push   0xc002b909
c001935f:	57                   	push   edi
c0019360:	e8 5b 75 fe ff       	call   c00008c0 <strcmp>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	85 c0                	test   eax,eax
c001936a:	75 0f                	jne    c001937b <CPU::detectFeatures()+0x1b5>
c001936c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019376:	e9 22 02 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c001937b:	50                   	push   eax
c001937c:	50                   	push   eax
c001937d:	68 16 b9 02 c0       	push   0xc002b916
c0019382:	57                   	push   edi
c0019383:	e8 38 75 fe ff       	call   c00008c0 <strcmp>
c0019388:	83 c4 10             	add    esp,0x10
c001938b:	85 c0                	test   eax,eax
c001938d:	74 dd                	je     c001936c <CPU::detectFeatures()+0x1a6>
c001938f:	51                   	push   ecx
c0019390:	51                   	push   ecx
c0019391:	68 23 b9 02 c0       	push   0xc002b923
c0019396:	57                   	push   edi
c0019397:	e8 24 75 fe ff       	call   c00008c0 <strcmp>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	85 c0                	test   eax,eax
c00193a1:	74 2a                	je     c00193cd <CPU::detectFeatures()+0x207>
c00193a3:	52                   	push   edx
c00193a4:	52                   	push   edx
c00193a5:	68 30 b9 02 c0       	push   0xc002b930
c00193aa:	57                   	push   edi
c00193ab:	e8 10 75 fe ff       	call   c00008c0 <strcmp>
c00193b0:	83 c4 10             	add    esp,0x10
c00193b3:	85 c0                	test   eax,eax
c00193b5:	74 16                	je     c00193cd <CPU::detectFeatures()+0x207>
c00193b7:	50                   	push   eax
c00193b8:	50                   	push   eax
c00193b9:	68 3d b9 02 c0       	push   0xc002b93d
c00193be:	57                   	push   edi
c00193bf:	e8 fc 74 fe ff       	call   c00008c0 <strcmp>
c00193c4:	83 c4 10             	add    esp,0x10
c00193c7:	85 c0                	test   eax,eax
c00193c9:	74 48                	je     c0019413 <CPU::detectFeatures()+0x24d>
c00193cb:	eb 0f                	jmp    c00193dc <CPU::detectFeatures()+0x216>
c00193cd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00193d7:	e9 c1 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c00193dc:	50                   	push   eax
c00193dd:	50                   	push   eax
c00193de:	68 4a b9 02 c0       	push   0xc002b94a
c00193e3:	57                   	push   edi
c00193e4:	e8 d7 74 fe ff       	call   c00008c0 <strcmp>
c00193e9:	83 c4 10             	add    esp,0x10
c00193ec:	85 c0                	test   eax,eax
c00193ee:	74 23                	je     c0019413 <CPU::detectFeatures()+0x24d>
c00193f0:	50                   	push   eax
c00193f1:	50                   	push   eax
c00193f2:	68 57 b9 02 c0       	push   0xc002b957
c00193f7:	57                   	push   edi
c00193f8:	e8 c3 74 fe ff       	call   c00008c0 <strcmp>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	85 c0                	test   eax,eax
c0019402:	75 1e                	jne    c0019422 <CPU::detectFeatures()+0x25c>
c0019404:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001940e:	e9 8a 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019413:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001941d:	e9 7b 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019422:	50                   	push   eax
c0019423:	50                   	push   eax
c0019424:	68 64 b9 02 c0       	push   0xc002b964
c0019429:	57                   	push   edi
c001942a:	e8 91 74 fe ff       	call   c00008c0 <strcmp>
c001942f:	83 c4 10             	add    esp,0x10
c0019432:	85 c0                	test   eax,eax
c0019434:	75 0f                	jne    c0019445 <CPU::detectFeatures()+0x27f>
c0019436:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019440:	e9 58 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019445:	50                   	push   eax
c0019446:	50                   	push   eax
c0019447:	68 23 b9 02 c0       	push   0xc002b923
c001944c:	57                   	push   edi
c001944d:	e8 6e 74 fe ff       	call   c00008c0 <strcmp>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	85 c0                	test   eax,eax
c0019457:	75 0f                	jne    c0019468 <CPU::detectFeatures()+0x2a2>
c0019459:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019463:	e9 35 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019468:	50                   	push   eax
c0019469:	50                   	push   eax
c001946a:	68 71 b9 02 c0       	push   0xc002b971
c001946f:	57                   	push   edi
c0019470:	e8 4b 74 fe ff       	call   c00008c0 <strcmp>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	85 c0                	test   eax,eax
c001947a:	75 0f                	jne    c001948b <CPU::detectFeatures()+0x2c5>
c001947c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019486:	e9 12 01 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c001948b:	51                   	push   ecx
c001948c:	51                   	push   ecx
c001948d:	68 7e b9 02 c0       	push   0xc002b97e
c0019492:	57                   	push   edi
c0019493:	e8 28 74 fe ff       	call   c00008c0 <strcmp>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	85 c0                	test   eax,eax
c001949d:	75 0f                	jne    c00194ae <CPU::detectFeatures()+0x2e8>
c001949f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00194a9:	e9 ef 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c00194ae:	52                   	push   edx
c00194af:	52                   	push   edx
c00194b0:	68 8b b9 02 c0       	push   0xc002b98b
c00194b5:	57                   	push   edi
c00194b6:	e8 05 74 fe ff       	call   c00008c0 <strcmp>
c00194bb:	83 c4 10             	add    esp,0x10
c00194be:	85 c0                	test   eax,eax
c00194c0:	75 0f                	jne    c00194d1 <CPU::detectFeatures()+0x30b>
c00194c2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00194cc:	e9 cc 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c00194d1:	50                   	push   eax
c00194d2:	50                   	push   eax
c00194d3:	68 98 b9 02 c0       	push   0xc002b998
c00194d8:	57                   	push   edi
c00194d9:	e8 e2 73 fe ff       	call   c00008c0 <strcmp>
c00194de:	83 c4 10             	add    esp,0x10
c00194e1:	85 c0                	test   eax,eax
c00194e3:	75 0f                	jne    c00194f4 <CPU::detectFeatures()+0x32e>
c00194e5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194ef:	e9 a9 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c00194f4:	50                   	push   eax
c00194f5:	50                   	push   eax
c00194f6:	68 a5 b9 02 c0       	push   0xc002b9a5
c00194fb:	57                   	push   edi
c00194fc:	e8 bf 73 fe ff       	call   c00008c0 <strcmp>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	85 c0                	test   eax,eax
c0019506:	75 0f                	jne    c0019517 <CPU::detectFeatures()+0x351>
c0019508:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019512:	e9 86 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019517:	50                   	push   eax
c0019518:	50                   	push   eax
c0019519:	68 b2 b9 02 c0       	push   0xc002b9b2
c001951e:	57                   	push   edi
c001951f:	e8 9c 73 fe ff       	call   c00008c0 <strcmp>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	85 c0                	test   eax,eax
c0019529:	75 0c                	jne    c0019537 <CPU::detectFeatures()+0x371>
c001952b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019535:	eb 66                	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019537:	50                   	push   eax
c0019538:	50                   	push   eax
c0019539:	68 bf b9 02 c0       	push   0xc002b9bf
c001953e:	57                   	push   edi
c001953f:	e8 7c 73 fe ff       	call   c00008c0 <strcmp>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	85 c0                	test   eax,eax
c0019549:	75 0c                	jne    c0019557 <CPU::detectFeatures()+0x391>
c001954b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019555:	eb 46                	jmp    c001959d <CPU::detectFeatures()+0x3d7>
c0019557:	50                   	push   eax
c0019558:	50                   	push   eax
c0019559:	68 cc b9 02 c0       	push   0xc002b9cc
c001955e:	57                   	push   edi
c001955f:	e8 5c 73 fe ff       	call   c00008c0 <strcmp>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	85 c0                	test   eax,eax
c0019569:	74 e0                	je     c001954b <CPU::detectFeatures()+0x385>
c001956b:	50                   	push   eax
c001956c:	50                   	push   eax
c001956d:	68 d9 b9 02 c0       	push   0xc002b9d9
c0019572:	57                   	push   edi
c0019573:	e8 48 73 fe ff       	call   c00008c0 <strcmp>
c0019578:	83 c4 10             	add    esp,0x10
c001957b:	85 c0                	test   eax,eax
c001957d:	74 cc                	je     c001954b <CPU::detectFeatures()+0x385>
c001957f:	51                   	push   ecx
c0019580:	51                   	push   ecx
c0019581:	68 e6 b9 02 c0       	push   0xc002b9e6
c0019586:	57                   	push   edi
c0019587:	e8 34 73 fe ff       	call   c00008c0 <strcmp>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	85 c0                	test   eax,eax
c0019591:	74 b8                	je     c001954b <CPU::detectFeatures()+0x385>
c0019593:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001959d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00195a2:	0f 86 be 00 00 00    	jbe    c0019666 <CPU::detectFeatures()+0x4a0>
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	68 80 00 00 00       	push   0x80
c00195b0:	e8 ab f8 ff ff       	call   c0018e60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195b5:	83 e0 01             	and    eax,0x1
c00195b8:	c1 e0 06             	shl    eax,0x6
c00195bb:	88 c2                	mov    dl,al
c00195bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195c3:	83 e0 bf             	and    eax,0xffffffbf
c00195c6:	09 d0                	or     eax,edx
c00195c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195ce:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00195d5:	e8 86 f8 ff ff       	call   c0018e60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195da:	83 e0 01             	and    eax,0x1
c00195dd:	c1 e0 04             	shl    eax,0x4
c00195e0:	88 c2                	mov    dl,al
c00195e2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195e8:	83 e0 ef             	and    eax,0xffffffef
c00195eb:	09 d0                	or     eax,edx
c00195ed:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195f3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195fa:	e8 61 f8 ff ff       	call   c0018e60 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195ff:	c1 e0 07             	shl    eax,0x7
c0019602:	88 c2                	mov    dl,al
c0019604:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001960a:	83 e0 7f             	and    eax,0x7f
c001960d:	09 d0                	or     eax,edx
c001960f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019615:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001961c:	e8 6d f8 ff ff       	call   c0018e8e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019621:	83 e0 01             	and    eax,0x1
c0019624:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001962b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019631:	83 e0 f7             	and    eax,0xfffffff7
c0019634:	09 d0                	or     eax,edx
c0019636:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001963c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019643:	e8 46 f8 ff ff       	call   c0018e8e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019648:	83 c4 10             	add    esp,0x10
c001964b:	83 e0 01             	and    eax,0x1
c001964e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019655:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001965b:	83 e0 fb             	and    eax,0xfffffffb
c001965e:	09 d0                	or     eax,edx
c0019660:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019666:	83 ec 0c             	sub    esp,0xc
c0019669:	56                   	push   esi
c001966a:	55                   	push   ebp
c001966b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001966f:	57                   	push   edi
c0019670:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019674:	50                   	push   eax
c0019675:	6a 01                	push   0x1
c0019677:	e8 04 f7 ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001967c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019680:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019686:	88 ca                	mov    dl,cl
c0019688:	83 e0 f0             	and    eax,0xfffffff0
c001968b:	83 e2 0f             	and    edx,0xf
c001968e:	09 d0                	or     eax,edx
c0019690:	88 ca                	mov    dl,cl
c0019692:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019698:	c0 ea 04             	shr    dl,0x4
c001969b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001969f:	0f b6 c2             	movzx  eax,dl
c00196a2:	83 c4 20             	add    esp,0x20
c00196a5:	c1 e0 06             	shl    eax,0x6
c00196a8:	89 c5                	mov    ebp,eax
c00196aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00196b0:	66 25 3f c0          	and    ax,0xc03f
c00196b4:	09 e8                	or     eax,ebp
c00196b6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00196bd:	89 c8                	mov    eax,ecx
c00196bf:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00196c5:	c1 e8 08             	shr    eax,0x8
c00196c8:	83 e2 3f             	and    edx,0x3f
c00196cb:	83 e0 0f             	and    eax,0xf
c00196ce:	89 c5                	mov    ebp,eax
c00196d0:	c1 e5 06             	shl    ebp,0x6
c00196d3:	09 d5                	or     ebp,edx
c00196d5:	89 ea                	mov    edx,ebp
c00196d7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00196dd:	88 c2                	mov    dl,al
c00196df:	c0 ea 02             	shr    dl,0x2
c00196e2:	89 d5                	mov    ebp,edx
c00196e4:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196ea:	83 e2 c0             	and    edx,0xffffffc0
c00196ed:	09 d5                	or     ebp,edx
c00196ef:	89 ea                	mov    edx,ebp
c00196f1:	89 cd                	mov    ebp,ecx
c00196f3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196f9:	c1 ed 0c             	shr    ebp,0xc
c00196fc:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019702:	83 e5 03             	and    ebp,0x3
c0019705:	83 e2 cf             	and    edx,0xffffffcf
c0019708:	c1 e5 04             	shl    ebp,0x4
c001970b:	09 d5                	or     ebp,edx
c001970d:	3c 06                	cmp    al,0x6
c001970f:	89 ea                	mov    edx,ebp
c0019711:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019717:	74 04                	je     c001971d <CPU::detectFeatures()+0x557>
c0019719:	3c 0f                	cmp    al,0xf
c001971b:	75 5c                	jne    c0019779 <CPU::detectFeatures()+0x5b3>
c001971d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019721:	89 cd                	mov    ebp,ecx
c0019723:	c1 ed 10             	shr    ebp,0x10
c0019726:	c1 e5 04             	shl    ebp,0x4
c0019729:	09 ea                	or     edx,ebp
c001972b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019731:	0f b6 d2             	movzx  edx,dl
c0019734:	66 81 e5 3f c0       	and    bp,0xc03f
c0019739:	c1 e2 06             	shl    edx,0x6
c001973c:	09 ea                	or     edx,ebp
c001973e:	3c 0f                	cmp    al,0xf
c0019740:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019747:	75 30                	jne    c0019779 <CPU::detectFeatures()+0x5b3>
c0019749:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001974f:	c1 e9 14             	shr    ecx,0x14
c0019752:	83 e0 3f             	and    eax,0x3f
c0019755:	83 c1 0f             	add    ecx,0xf
c0019758:	88 ca                	mov    dl,cl
c001975a:	c0 e9 02             	shr    cl,0x2
c001975d:	c1 e2 06             	shl    edx,0x6
c0019760:	09 d0                	or     eax,edx
c0019762:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019768:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001976e:	83 e0 c0             	and    eax,0xffffffc0
c0019771:	09 c1                	or     ecx,eax
c0019773:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019779:	83 ec 0c             	sub    esp,0xc
c001977c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019783:	56                   	push   esi
c0019784:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019788:	50                   	push   eax
c0019789:	57                   	push   edi
c001978a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001978e:	55                   	push   ebp
c001978f:	68 00 00 00 80       	push   0x80000000
c0019794:	e8 e7 f5 ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019799:	83 c4 20             	add    esp,0x20
c001979c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00197a4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00197a8:	76 1e                	jbe    c00197c8 <CPU::detectFeatures()+0x602>
c00197aa:	83 ec 0c             	sub    esp,0xc
c00197ad:	56                   	push   esi
c00197ae:	50                   	push   eax
c00197af:	57                   	push   edi
c00197b0:	55                   	push   ebp
c00197b1:	68 01 00 00 80       	push   0x80000001
c00197b6:	e8 c5 f5 ff ff       	call   c0018d80 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197bb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00197c5:	83 c4 20             	add    esp,0x20
c00197c8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00197ce:	83 f8 01             	cmp    eax,0x1
c00197d1:	75 6f                	jne    c0019842 <CPU::detectFeatures()+0x67c>
c00197d3:	51                   	push   ecx
c00197d4:	51                   	push   ecx
c00197d5:	68 f2 b9 02 c0       	push   0xc002b9f2
c00197da:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197de:	56                   	push   esi
c00197df:	e8 50 70 fe ff       	call   c0000834 <strcpy>
c00197e4:	5f                   	pop    edi
c00197e5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197eb:	5d                   	pop    ebp
c00197ec:	66 c1 e8 06          	shr    ax,0x6
c00197f0:	0f b6 c0             	movzx  eax,al
c00197f3:	50                   	push   eax
c00197f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197fa:	c1 e8 0e             	shr    eax,0xe
c00197fd:	0f b6 c0             	movzx  eax,al
c0019800:	50                   	push   eax
c0019801:	e8 24 f2 ff ff       	call   c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019806:	5a                   	pop    edx
c0019807:	59                   	pop    ecx
c0019808:	50                   	push   eax
c0019809:	56                   	push   esi
c001980a:	e8 65 71 fe ff       	call   c0000974 <strcat>
c001980f:	5f                   	pop    edi
c0019810:	5d                   	pop    ebp
c0019811:	56                   	push   esi
c0019812:	53                   	push   ebx
c0019813:	e8 28 ae ff ff       	call   c0014640 <Device::setName(char const*)>
c0019818:	58                   	pop    eax
c0019819:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001981f:	5a                   	pop    edx
c0019820:	68 f9 b9 02 c0       	push   0xc002b9f9
c0019825:	50                   	push   eax
c0019826:	e8 95 70 fe ff       	call   c00008c0 <strcmp>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	85 c0                	test   eax,eax
c0019830:	0f 85 71 03 00 00    	jne    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019836:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001983d:	e9 65 03 00 00       	jmp    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019842:	83 f8 02             	cmp    eax,0x2
c0019845:	0f 85 b5 00 00 00    	jne    c0019900 <CPU::detectFeatures()+0x73a>
c001984b:	57                   	push   edi
c001984c:	57                   	push   edi
c001984d:	68 0b ba 02 c0       	push   0xc002ba0b
c0019852:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019856:	56                   	push   esi
c0019857:	e8 d8 6f fe ff       	call   c0000834 <strcpy>
c001985c:	5d                   	pop    ebp
c001985d:	58                   	pop    eax
c001985e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019864:	66 c1 e8 06          	shr    ax,0x6
c0019868:	0f b6 c0             	movzx  eax,al
c001986b:	50                   	push   eax
c001986c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019872:	c1 e8 0e             	shr    eax,0xe
c0019875:	0f b6 c0             	movzx  eax,al
c0019878:	50                   	push   eax
c0019879:	e8 18 f0 ff ff       	call   c0018896 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001987e:	5a                   	pop    edx
c001987f:	59                   	pop    ecx
c0019880:	50                   	push   eax
c0019881:	56                   	push   esi
c0019882:	e8 ed 70 fe ff       	call   c0000974 <strcat>
c0019887:	5f                   	pop    edi
c0019888:	5d                   	pop    ebp
c0019889:	56                   	push   esi
c001988a:	53                   	push   ebx
c001988b:	e8 b0 ad ff ff       	call   c0014640 <Device::setName(char const*)>
c0019890:	58                   	pop    eax
c0019891:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019897:	5a                   	pop    edx
c0019898:	68 10 ba 02 c0       	push   0xc002ba10
c001989d:	50                   	push   eax
c001989e:	e8 1d 70 fe ff       	call   c00008c0 <strcmp>
c00198a3:	83 c4 10             	add    esp,0x10
c00198a6:	85 c0                	test   eax,eax
c00198a8:	75 20                	jne    c00198ca <CPU::detectFeatures()+0x704>
c00198aa:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c00198b0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00198b6:	a8 01                	test   al,0x1
c00198b8:	74 10                	je     c00198ca <CPU::detectFeatures()+0x704>
c00198ba:	83 e0 fe             	and    eax,0xfffffffe
c00198bd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00198c3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00198ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198d0:	c1 e8 0e             	shr    eax,0xe
c00198d3:	3c 05                	cmp    al,0x5
c00198d5:	0f 85 cc 02 00 00    	jne    c0019ba7 <CPU::detectFeatures()+0x9e1>
c00198db:	56                   	push   esi
c00198dc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00198e2:	83 e0 0f             	and    eax,0xf
c00198e5:	50                   	push   eax
c00198e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198ec:	66 c1 e8 06          	shr    ax,0x6
c00198f0:	0f b6 c0             	movzx  eax,al
c00198f3:	50                   	push   eax
c00198f4:	6a 05                	push   0x5
c00198f6:	e8 11 f4 ff ff       	call   c0018d0c <CPU::AMD_K6_writeback(int, int, int)>
c00198fb:	e9 1f 02 00 00       	jmp    c0019b1f <CPU::detectFeatures()+0x959>
c0019900:	8d 50 fd             	lea    edx,[eax-0x3]
c0019903:	83 fa 01             	cmp    edx,0x1
c0019906:	76 09                	jbe    c0019911 <CPU::detectFeatures()+0x74b>
c0019908:	83 f8 06             	cmp    eax,0x6
c001990b:	0f 85 91 01 00 00    	jne    c0019aa2 <CPU::detectFeatures()+0x8dc>
c0019911:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019917:	c1 ea 0e             	shr    edx,0xe
c001991a:	80 fa 05             	cmp    dl,0x5
c001991d:	75 7b                	jne    c001999a <CPU::detectFeatures()+0x7d4>
c001991f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019925:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001992a:	66 81 fa 00 01       	cmp    dx,0x100
c001992f:	75 0c                	jne    c001993d <CPU::detectFeatures()+0x777>
c0019931:	51                   	push   ecx
c0019932:	51                   	push   ecx
c0019933:	68 17 ba 02 c0       	push   0xc002ba17
c0019938:	e9 dc 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c001993d:	66 81 fa 00 02       	cmp    dx,0x200
c0019942:	75 0c                	jne    c0019950 <CPU::detectFeatures()+0x78a>
c0019944:	52                   	push   edx
c0019945:	52                   	push   edx
c0019946:	68 2a ba 02 c0       	push   0xc002ba2a
c001994b:	e9 c9 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019950:	66 81 fa 40 02       	cmp    dx,0x240
c0019955:	75 0c                	jne    c0019963 <CPU::detectFeatures()+0x79d>
c0019957:	50                   	push   eax
c0019958:	50                   	push   eax
c0019959:	68 3c ba 02 c0       	push   0xc002ba3c
c001995e:	e9 b6 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019963:	83 f8 06             	cmp    eax,0x6
c0019966:	75 0c                	jne    c0019974 <CPU::detectFeatures()+0x7ae>
c0019968:	50                   	push   eax
c0019969:	50                   	push   eax
c001996a:	68 4e ba 02 c0       	push   0xc002ba4e
c001996f:	e9 a5 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019974:	83 f8 04             	cmp    eax,0x4
c0019977:	75 0c                	jne    c0019985 <CPU::detectFeatures()+0x7bf>
c0019979:	50                   	push   eax
c001997a:	50                   	push   eax
c001997b:	68 5a ba 02 c0       	push   0xc002ba5a
c0019980:	e9 94 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019985:	83 f8 03             	cmp    eax,0x3
c0019988:	0f 85 19 02 00 00    	jne    c0019ba7 <CPU::detectFeatures()+0x9e1>
c001998e:	50                   	push   eax
c001998f:	50                   	push   eax
c0019990:	68 62 ba 02 c0       	push   0xc002ba62
c0019995:	e9 7f 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c001999a:	80 fa 06             	cmp    dl,0x6
c001999d:	0f 85 db 00 00 00    	jne    c0019a7e <CPU::detectFeatures()+0x8b8>
c00199a3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00199a9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00199ae:	66 81 fa 80 01       	cmp    dx,0x180
c00199b3:	75 0c                	jne    c00199c1 <CPU::detectFeatures()+0x7fb>
c00199b5:	50                   	push   eax
c00199b6:	50                   	push   eax
c00199b7:	68 6d ba 02 c0       	push   0xc002ba6d
c00199bc:	e9 58 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c00199c1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00199c7:	66 f7 c1 80 ff       	test   cx,0xff80
c00199cc:	75 0c                	jne    c00199da <CPU::detectFeatures()+0x814>
c00199ce:	50                   	push   eax
c00199cf:	50                   	push   eax
c00199d0:	68 7d ba 02 c0       	push   0xc002ba7d
c00199d5:	e9 3f 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c00199da:	66 81 fa 40 02       	cmp    dx,0x240
c00199df:	75 0c                	jne    c00199ed <CPU::detectFeatures()+0x827>
c00199e1:	55                   	push   ebp
c00199e2:	55                   	push   ebp
c00199e3:	68 84 ba 02 c0       	push   0xc002ba84
c00199e8:	e9 2c 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c00199ed:	66 81 fa 80 02       	cmp    dx,0x280
c00199f2:	75 0c                	jne    c0019a00 <CPU::detectFeatures()+0x83a>
c00199f4:	57                   	push   edi
c00199f5:	57                   	push   edi
c00199f6:	68 8d ba 02 c0       	push   0xc002ba8d
c00199fb:	e9 19 01 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019a00:	66 81 fa 40 03       	cmp    dx,0x340
c0019a05:	74 ed                	je     c00199f4 <CPU::detectFeatures()+0x82e>
c0019a07:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019a0c:	75 0c                	jne    c0019a1a <CPU::detectFeatures()+0x854>
c0019a0e:	56                   	push   esi
c0019a0f:	56                   	push   esi
c0019a10:	68 94 ba 02 c0       	push   0xc002ba94
c0019a15:	e9 ff 00 00 00       	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019a1a:	83 f8 06             	cmp    eax,0x6
c0019a1d:	0f 84 45 ff ff ff    	je     c0019968 <CPU::detectFeatures()+0x7a2>
c0019a23:	83 f8 04             	cmp    eax,0x4
c0019a26:	0f 84 4d ff ff ff    	je     c0019979 <CPU::detectFeatures()+0x7b3>
c0019a2c:	83 f8 03             	cmp    eax,0x3
c0019a2f:	0f 85 72 01 00 00    	jne    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019a35:	51                   	push   ecx
c0019a36:	51                   	push   ecx
c0019a37:	68 9d ba 02 c0       	push   0xc002ba9d
c0019a3c:	53                   	push   ebx
c0019a3d:	e8 fe ab ff ff       	call   c0014640 <Device::setName(char const*)>
c0019a42:	b1 c1                	mov    cl,0xc1
c0019a44:	88 c8                	mov    al,cl
c0019a46:	e6 22                	out    0x22,al
c0019a48:	e4 23                	in     al,0x23
c0019a4a:	88 c2                	mov    dl,al
c0019a4c:	88 c8                	mov    al,cl
c0019a4e:	e6 22                	out    0x22,al
c0019a50:	88 d0                	mov    al,dl
c0019a52:	83 c8 10             	or     eax,0x10
c0019a55:	e6 23                	out    0x23,al
c0019a57:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a5e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a61:	89 d0                	mov    eax,edx
c0019a63:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a69:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a6d:	40                   	inc    eax
c0019a6e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a74:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a79:	e9 a1 00 00 00       	jmp    c0019b1f <CPU::detectFeatures()+0x959>
c0019a7e:	83 f8 06             	cmp    eax,0x6
c0019a81:	0f 84 e1 fe ff ff    	je     c0019968 <CPU::detectFeatures()+0x7a2>
c0019a87:	83 f8 04             	cmp    eax,0x4
c0019a8a:	0f 84 e9 fe ff ff    	je     c0019979 <CPU::detectFeatures()+0x7b3>
c0019a90:	83 f8 03             	cmp    eax,0x3
c0019a93:	0f 85 0e 01 00 00    	jne    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019a99:	52                   	push   edx
c0019a9a:	52                   	push   edx
c0019a9b:	68 a8 ba 02 c0       	push   0xc002baa8
c0019aa0:	eb 77                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019aa2:	83 f8 07             	cmp    eax,0x7
c0019aa5:	75 09                	jne    c0019ab0 <CPU::detectFeatures()+0x8ea>
c0019aa7:	50                   	push   eax
c0019aa8:	50                   	push   eax
c0019aa9:	68 b2 ba 02 c0       	push   0xc002bab2
c0019aae:	eb 69                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019ab0:	83 f8 0a             	cmp    eax,0xa
c0019ab3:	75 09                	jne    c0019abe <CPU::detectFeatures()+0x8f8>
c0019ab5:	50                   	push   eax
c0019ab6:	50                   	push   eax
c0019ab7:	68 bd ba 02 c0       	push   0xc002babd
c0019abc:	eb 5b                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019abe:	83 f8 0b             	cmp    eax,0xb
c0019ac1:	75 09                	jne    c0019acc <CPU::detectFeatures()+0x906>
c0019ac3:	50                   	push   eax
c0019ac4:	50                   	push   eax
c0019ac5:	68 c5 ba 02 c0       	push   0xc002bac5
c0019aca:	eb 4d                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019acc:	83 f8 08             	cmp    eax,0x8
c0019acf:	75 09                	jne    c0019ada <CPU::detectFeatures()+0x914>
c0019ad1:	50                   	push   eax
c0019ad2:	50                   	push   eax
c0019ad3:	68 ce ba 02 c0       	push   0xc002bace
c0019ad8:	eb 3f                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019ada:	83 f8 09             	cmp    eax,0x9
c0019add:	75 09                	jne    c0019ae8 <CPU::detectFeatures()+0x922>
c0019adf:	50                   	push   eax
c0019ae0:	50                   	push   eax
c0019ae1:	68 d6 ba 02 c0       	push   0xc002bad6
c0019ae6:	eb 31                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019ae8:	83 f8 05             	cmp    eax,0x5
c0019aeb:	75 09                	jne    c0019af6 <CPU::detectFeatures()+0x930>
c0019aed:	50                   	push   eax
c0019aee:	50                   	push   eax
c0019aef:	68 de ba 02 c0       	push   0xc002bade
c0019af4:	eb 23                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019af6:	83 f8 0c             	cmp    eax,0xc
c0019af9:	75 09                	jne    c0019b04 <CPU::detectFeatures()+0x93e>
c0019afb:	55                   	push   ebp
c0019afc:	55                   	push   ebp
c0019afd:	68 ec ba 02 c0       	push   0xc002baec
c0019b02:	eb 15                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019b04:	83 f8 0d             	cmp    eax,0xd
c0019b07:	75 09                	jne    c0019b12 <CPU::detectFeatures()+0x94c>
c0019b09:	57                   	push   edi
c0019b0a:	57                   	push   edi
c0019b0b:	68 f7 ba 02 c0       	push   0xc002baf7
c0019b10:	eb 07                	jmp    c0019b19 <CPU::detectFeatures()+0x953>
c0019b12:	56                   	push   esi
c0019b13:	56                   	push   esi
c0019b14:	68 0b bb 02 c0       	push   0xc002bb0b
c0019b19:	53                   	push   ebx
c0019b1a:	e8 21 ab ff ff       	call   c0014640 <Device::setName(char const*)>
c0019b1f:	83 c4 10             	add    esp,0x10
c0019b22:	e9 80 00 00 00       	jmp    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019b27:	51                   	push   ecx
c0019b28:	51                   	push   ecx
c0019b29:	68 57 b9 02 c0       	push   0xc002b957
c0019b2e:	57                   	push   edi
c0019b2f:	e8 00 6d fe ff       	call   c0000834 <strcpy>
c0019b34:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019b3e:	e8 6b 67 fe ff       	call   c00002ae <is486>
c0019b43:	83 c4 10             	add    esp,0x10
c0019b46:	85 c0                	test   eax,eax
c0019b48:	74 2b                	je     c0019b75 <CPU::detectFeatures()+0x9af>
c0019b4a:	52                   	push   edx
c0019b4b:	52                   	push   edx
c0019b4c:	68 17 bb 02 c0       	push   0xc002bb17
c0019b51:	53                   	push   ebx
c0019b52:	e8 e9 aa ff ff       	call   c0014640 <Device::setName(char const*)>
c0019b57:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b5e:	0f 20 c0             	mov    eax,cr0
c0019b61:	83 e0 14             	and    eax,0x14
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	83 f8 04             	cmp    eax,0x4
c0019b6a:	75 1f                	jne    c0019b8b <CPU::detectFeatures()+0x9c5>
c0019b6c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b73:	eb 32                	jmp    c0019ba7 <CPU::detectFeatures()+0x9e1>
c0019b75:	50                   	push   eax
c0019b76:	50                   	push   eax
c0019b77:	68 22 bb 02 c0       	push   0xc002bb22
c0019b7c:	53                   	push   ebx
c0019b7d:	e8 be aa ff ff       	call   c0014640 <Device::setName(char const*)>
c0019b82:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b89:	eb d3                	jmp    c0019b5e <CPU::detectFeatures()+0x998>
c0019b8b:	e8 f9 66 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b90:	83 e0 01             	and    eax,0x1
c0019b93:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b96:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b9c:	83 e0 fd             	and    eax,0xfffffffd
c0019b9f:	09 d0                	or     eax,edx
c0019ba1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ba7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019bae:	83 c4 4c             	add    esp,0x4c
c0019bb1:	5b                   	pop    ebx
c0019bb2:	5e                   	pop    esi
c0019bb3:	5f                   	pop    edi
c0019bb4:	5d                   	pop    ebp
c0019bb5:	c3                   	ret    

c0019bb6 <CPU::setupSMEP()>:
c0019bb6:	0f 20 e0             	mov    eax,cr4
c0019bb9:	0d 00 00 10 00       	or     eax,0x100000
c0019bbe:	0f 22 e0             	mov    cr4,eax
c0019bc1:	c3                   	ret    

c0019bc2 <CPU::setupUMIP()>:
c0019bc2:	0f 20 e0             	mov    eax,cr4
c0019bc5:	80 cc 08             	or     ah,0x8
c0019bc8:	0f 22 e0             	mov    cr4,eax
c0019bcb:	c3                   	ret    

c0019bcc <CPU::setupTSC()>:
c0019bcc:	0f 20 e0             	mov    eax,cr4
c0019bcf:	83 c8 04             	or     eax,0x4
c0019bd2:	0f 22 e0             	mov    cr4,eax
c0019bd5:	c3                   	ret    

c0019bd6 <CPU::setupLargePages()>:
c0019bd6:	0f 20 e0             	mov    eax,cr4
c0019bd9:	83 c8 10             	or     eax,0x10
c0019bdc:	0f 22 e0             	mov    cr4,eax
c0019bdf:	c3                   	ret    

c0019be0 <CPU::setupPAT()>:
c0019be0:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0019be5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bec:	74 2c                	je     c0019c1a <CPU::setupPAT()+0x3a>
c0019bee:	53                   	push   ebx
c0019bef:	83 ec 10             	sub    esp,0x10
c0019bf2:	68 77 02 00 00       	push   0x277
c0019bf7:	50                   	push   eax
c0019bf8:	e8 eb 51 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019bfd:	83 e2 f8             	and    edx,0xfffffff8
c0019c00:	83 ca 01             	or     edx,0x1
c0019c03:	52                   	push   edx
c0019c04:	50                   	push   eax
c0019c05:	68 77 02 00 00       	push   0x277
c0019c0a:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0019c10:	e8 ff 51 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019c15:	83 c4 28             	add    esp,0x28
c0019c18:	5b                   	pop    ebx
c0019c19:	c3                   	ret    
c0019c1a:	c3                   	ret    
c0019c1b:	90                   	nop

c0019c1c <CPU::setupMTRR()>:
c0019c1c:	c3                   	ret    
c0019c1d:	90                   	nop

c0019c1e <CPU::setupGlobalPages()>:
c0019c1e:	0f 20 e0             	mov    eax,cr4
c0019c21:	0c 80                	or     al,0x80
c0019c23:	0f 22 e0             	mov    cr4,eax
c0019c26:	c3                   	ret    
c0019c27:	90                   	nop

c0019c28 <CPU::allowUsermodeDataAccess()>:
c0019c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c33:	74 03                	je     c0019c38 <CPU::allowUsermodeDataAccess()+0x10>
c0019c35:	0f 01 cb             	stac   
c0019c38:	c3                   	ret    
c0019c39:	90                   	nop

c0019c3a <CPU::prohibitUsermodeDataAccess()>:
c0019c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c3e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c45:	74 03                	je     c0019c4a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019c47:	0f 01 ca             	clac   
c0019c4a:	c3                   	ret    
c0019c4b:	90                   	nop

c0019c4c <CPU::setupSMAP()>:
c0019c4c:	0f 20 e0             	mov    eax,cr4
c0019c4f:	0d 00 00 20 00       	or     eax,0x200000
c0019c54:	0f 22 e0             	mov    cr4,eax
c0019c57:	eb e1                	jmp    c0019c3a <CPU::prohibitUsermodeDataAccess()>
c0019c59:	90                   	nop

c0019c5a <CPU::setupFeatures()>:
c0019c5a:	83 ec 0c             	sub    esp,0xc
c0019c5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c61:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c68:	74 07                	je     c0019c71 <CPU::setupFeatures()+0x17>
c0019c6a:	52                   	push   edx
c0019c6b:	e8 46 ff ff ff       	call   c0019bb6 <CPU::setupSMEP()>
c0019c70:	58                   	pop    eax
c0019c71:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c78:	74 07                	je     c0019c81 <CPU::setupFeatures()+0x27>
c0019c7a:	52                   	push   edx
c0019c7b:	e8 cc ff ff ff       	call   c0019c4c <CPU::setupSMAP()>
c0019c80:	58                   	pop    eax
c0019c81:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c88:	74 07                	je     c0019c91 <CPU::setupFeatures()+0x37>
c0019c8a:	52                   	push   edx
c0019c8b:	e8 32 ff ff ff       	call   c0019bc2 <CPU::setupUMIP()>
c0019c90:	58                   	pop    eax
c0019c91:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c98:	74 07                	je     c0019ca1 <CPU::setupFeatures()+0x47>
c0019c9a:	52                   	push   edx
c0019c9b:	e8 2c ff ff ff       	call   c0019bcc <CPU::setupTSC()>
c0019ca0:	58                   	pop    eax
c0019ca1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019ca8:	74 07                	je     c0019cb1 <CPU::setupFeatures()+0x57>
c0019caa:	52                   	push   edx
c0019cab:	e8 26 ff ff ff       	call   c0019bd6 <CPU::setupLargePages()>
c0019cb0:	59                   	pop    ecx
c0019cb1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019cb8:	74 07                	je     c0019cc1 <CPU::setupFeatures()+0x67>
c0019cba:	52                   	push   edx
c0019cbb:	e8 5e ff ff ff       	call   c0019c1e <CPU::setupGlobalPages()>
c0019cc0:	58                   	pop    eax
c0019cc1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019cc8:	74 0c                	je     c0019cd6 <CPU::setupFeatures()+0x7c>
c0019cca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019cce:	83 c4 0c             	add    esp,0xc
c0019cd1:	e9 0a ff ff ff       	jmp    c0019be0 <CPU::setupPAT()>
c0019cd6:	83 c4 0c             	add    esp,0xc
c0019cd9:	c3                   	ret    

c0019cda <CPU::open(int, int, void*)>:
c0019cda:	57                   	push   edi
c0019cdb:	56                   	push   esi
c0019cdc:	53                   	push   ebx
c0019cdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ce1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ce5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ceb:	83 ec 0c             	sub    esp,0xc
c0019cee:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cf4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cfa:	50                   	push   eax
c0019cfb:	e8 d4 53 ff ff       	call   c000f0d4 <GDT::setup()>
c0019d00:	83 c4 0c             	add    esp,0xc
c0019d03:	6a 00                	push   0x0
c0019d05:	68 ef be ad de       	push   0xdeadbeef
c0019d0a:	57                   	push   edi
c0019d0b:	e8 06 78 ff ff       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c0019d10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019d13:	e8 de 77 ff ff       	call   c00114f6 <TSS::flush()>
c0019d18:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019d1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d21:	e8 0a 56 ff ff       	call   c000f330 <IDT::setup()>
c0019d26:	b8 00 04 00 00       	mov    eax,0x400
c0019d2b:	0f 23 f8             	mov    db7,eax
c0019d2e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019d38:	e8 a8 61 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019d3d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019d43:	89 30                	mov    DWORD PTR [eax],esi
c0019d45:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d4b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d4e:	58                   	pop    eax
c0019d4f:	5a                   	pop    edx
c0019d50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d5a:	e8 f5 88 ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0019d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d62:	e8 5f f4 ff ff       	call   c00191c6 <CPU::detectFeatures()>
c0019d67:	e8 ce bc ff ff       	call   c0015a3a <setupInterruptController()>
c0019d6c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d72:	a1 80 e5 02 c0       	mov    eax,ds:0xc002e580
c0019d77:	83 e0 10             	and    eax,0x10
c0019d7a:	83 f8 01             	cmp    eax,0x1
c0019d7d:	19 c0                	sbb    eax,eax
c0019d7f:	83 e0 46             	and    eax,0x46
c0019d82:	83 c0 1e             	add    eax,0x1e
c0019d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d88:	e8 bb d1 ff ff       	call   c0016f48 <setupTimer(int)>
c0019d8d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d96:	e8 bf fe ff ff       	call   c0019c5a <CPU::setupFeatures()>
c0019d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d9e:	e8 a7 f1 ff ff       	call   c0018f4a <CPU::displayFeatures()>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	31 c0                	xor    eax,eax
c0019da8:	5b                   	pop    ebx
c0019da9:	5e                   	pop    esi
c0019daa:	5f                   	pop    edi
c0019dab:	c3                   	ret    

c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019dac:	57                   	push   edi
c0019dad:	56                   	push   esi
c0019dae:	53                   	push   ebx
c0019daf:	51                   	push   ecx
c0019db0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019db4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019db7:	0f 02 c0             	lar    eax,ax
c0019dba:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019dbd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019dc1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019dc4:	88 ca                	mov    dl,cl
c0019dc6:	c0 ea 06             	shr    dl,0x6
c0019dc9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019dcd:	89 ca                	mov    edx,ecx
c0019dcf:	66 c1 ea 03          	shr    dx,0x3
c0019dd3:	83 e2 07             	and    edx,0x7
c0019dd6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ddb:	88 17                	mov    BYTE PTR [edi],dl
c0019ddd:	0f 84 a6 01 00 00    	je     c0019f89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019de3:	83 e1 07             	and    ecx,0x7
c0019de6:	80 f9 04             	cmp    cl,0x4
c0019de9:	0f 84 98 00 00 00    	je     c0019e87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019def:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019df4:	0f 95 c0             	setne  al
c0019df7:	80 f9 05             	cmp    cl,0x5
c0019dfa:	0f 95 c2             	setne  dl
c0019dfd:	08 c2                	or     dl,al
c0019dff:	74 79                	je     c0019e7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019e01:	84 c9                	test   cl,cl
c0019e03:	75 05                	jne    c0019e0a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019e05:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e08:	eb 3c                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e0a:	80 f9 01             	cmp    cl,0x1
c0019e0d:	75 05                	jne    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019e0f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e12:	eb 32                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e14:	80 f9 02             	cmp    cl,0x2
c0019e17:	75 05                	jne    c0019e1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019e19:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e1c:	eb 28                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e1e:	31 c0                	xor    eax,eax
c0019e20:	80 f9 03             	cmp    cl,0x3
c0019e23:	75 05                	jne    c0019e2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019e25:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e28:	eb 1c                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e2a:	80 f9 05             	cmp    cl,0x5
c0019e2d:	75 05                	jne    c0019e34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019e2f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e32:	eb 12                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e34:	80 f9 06             	cmp    cl,0x6
c0019e37:	75 05                	jne    c0019e3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019e39:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e3c:	eb 08                	jmp    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e3e:	80 f9 07             	cmp    cl,0x7
c0019e41:	75 03                	jne    c0019e46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e43:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e46:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e4b:	75 10                	jne    c0019e5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e4d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e51:	b9 03 00 00 00       	mov    ecx,0x3
c0019e56:	01 d0                	add    eax,edx
c0019e58:	e9 37 01 00 00       	jmp    c0019f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e5d:	b9 02 00 00 00       	mov    ecx,0x2
c0019e62:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e67:	0f 85 27 01 00 00    	jne    c0019f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e6d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e70:	b9 06 00 00 00       	mov    ecx,0x6
c0019e75:	e9 1a 01 00 00       	jmp    c0019f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e7a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e7d:	b9 06 00 00 00       	mov    ecx,0x6
c0019e82:	e9 0f 01 00 00       	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e87:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e8a:	88 ca                	mov    dl,cl
c0019e8c:	c0 ea 06             	shr    dl,0x6
c0019e8f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e93:	89 ca                	mov    edx,ecx
c0019e95:	66 c1 ea 03          	shr    dx,0x3
c0019e99:	83 e2 07             	and    edx,0x7
c0019e9c:	80 e1 07             	and    cl,0x7
c0019e9f:	75 05                	jne    c0019ea6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ea1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019ea4:	eb 4c                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea6:	80 f9 01             	cmp    cl,0x1
c0019ea9:	75 05                	jne    c0019eb0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019eab:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019eae:	eb 42                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eb0:	80 f9 02             	cmp    cl,0x2
c0019eb3:	75 05                	jne    c0019eba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019eb5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019eb8:	eb 38                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eba:	80 f9 03             	cmp    cl,0x3
c0019ebd:	75 05                	jne    c0019ec4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ebf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ec2:	eb 2e                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ec4:	80 f9 04             	cmp    cl,0x4
c0019ec7:	75 12                	jne    c0019edb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019ec9:	f6 c4 60             	test   ah,0x60
c0019ecc:	75 08                	jne    c0019ed6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019ece:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ed1:	8d 78 14             	lea    edi,[eax+0x14]
c0019ed4:	eb 1c                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ed6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ed9:	eb 17                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019edb:	80 f9 05             	cmp    cl,0x5
c0019ede:	75 05                	jne    c0019ee5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ee0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ee3:	eb 0d                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ee5:	80 f9 06             	cmp    cl,0x6
c0019ee8:	75 05                	jne    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019eea:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019eed:	eb 03                	jmp    c0019ef2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eef:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ef2:	84 d2                	test   dl,dl
c0019ef4:	75 05                	jne    c0019efb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ef6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ef9:	eb 3c                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019efb:	80 fa 01             	cmp    dl,0x1
c0019efe:	75 05                	jne    c0019f05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019f00:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f03:	eb 32                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f05:	80 fa 02             	cmp    dl,0x2
c0019f08:	75 05                	jne    c0019f0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019f0a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f0d:	eb 28                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f0f:	80 fa 03             	cmp    dl,0x3
c0019f12:	75 05                	jne    c0019f19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019f14:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f17:	eb 1e                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f19:	31 c0                	xor    eax,eax
c0019f1b:	80 fa 04             	cmp    dl,0x4
c0019f1e:	74 17                	je     c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f20:	80 fa 05             	cmp    dl,0x5
c0019f23:	75 05                	jne    c0019f2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019f25:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f28:	eb 0d                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f2a:	80 fa 06             	cmp    dl,0x6
c0019f2d:	75 05                	jne    c0019f34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019f2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f32:	eb 03                	jmp    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f37:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f3c:	0f 94 c2             	sete   dl
c0019f3f:	80 f9 05             	cmp    cl,0x5
c0019f42:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019f46:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f4b:	d3 e0                	shl    eax,cl
c0019f4d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f51:	74 0a                	je     c0019f5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f53:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f56:	b9 07 00 00 00       	mov    ecx,0x7
c0019f5b:	eb 37                	jmp    c0019f94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f5d:	01 f8                	add    eax,edi
c0019f5f:	b9 03 00 00 00       	mov    ecx,0x3
c0019f64:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f69:	74 2b                	je     c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f6b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f70:	75 0d                	jne    c0019f7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f72:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f76:	01 c8                	add    eax,ecx
c0019f78:	b9 04 00 00 00       	mov    ecx,0x4
c0019f7d:	eb 17                	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f7f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f82:	b9 07 00 00 00       	mov    ecx,0x7
c0019f87:	eb 0d                	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f89:	b9 02 00 00 00       	mov    ecx,0x2
c0019f8e:	b2 01                	mov    dl,0x1
c0019f90:	31 c0                	xor    eax,eax
c0019f92:	eb 02                	jmp    c0019f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f94:	31 d2                	xor    edx,edx
c0019f96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f9a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019fa0:	88 11                	mov    BYTE PTR [ecx],dl
c0019fa2:	5a                   	pop    edx
c0019fa3:	5b                   	pop    ebx
c0019fa4:	5e                   	pop    esi
c0019fa5:	5f                   	pop    edi
c0019fa6:	c3                   	ret    

c0019fa7 <Krnl::smpEntry()>:
c0019fa7:	eb fe                	jmp    c0019fa7 <Krnl::smpEntry()>

c0019fa9 <Krnl::startCPU(int)>:
c0019fa9:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0019fae:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019fb5:	0f 84 36 01 00 00    	je     c001a0f1 <Krnl::startCPU(int)+0x148>
c0019fbb:	53                   	push   ebx
c0019fbc:	83 ec 08             	sub    esp,0x8
c0019fbf:	e8 16 3f 00 00       	call   c001deda <lockScheduler()>
c0019fc4:	52                   	push   edx
c0019fc5:	52                   	push   edx
c0019fc6:	6a 1b                	push   0x1b
c0019fc8:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c0019fce:	e8 15 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019fd3:	59                   	pop    ecx
c0019fd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019fd9:	89 c3                	mov    ebx,eax
c0019fdb:	58                   	pop    eax
c0019fdc:	53                   	push   ebx
c0019fdd:	68 5c bb 02 c0       	push   0xc002bb5c
c0019fe2:	e8 51 90 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0019fe7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ff5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fff:	c1 e0 18             	shl    eax,0x18
c001a002:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a008:	83 c4 10             	add    esp,0x10
c001a00b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a011:	09 c2                	or     edx,eax
c001a013:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a019:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a01f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a025:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a02b:	80 cd c5             	or     ch,0xc5
c001a02e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a034:	f3 90                	pause  
c001a036:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a038:	0f ba e1 0c          	bt     ecx,0xc
c001a03c:	72 f6                	jb     c001a034 <Krnl::startCPU(int)+0x8b>
c001a03e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a044:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a04a:	09 c1                	or     ecx,eax
c001a04c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a052:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a058:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a05e:	80 cd 85             	or     ch,0x85
c001a061:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a067:	f3 90                	pause  
c001a069:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a06b:	0f ba e1 0c          	bt     ecx,0xc
c001a06f:	72 f6                	jb     c001a067 <Krnl::startCPU(int)+0xbe>
c001a071:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a07b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a081:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a087:	09 c1                	or     ecx,eax
c001a089:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a08f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a095:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a09b:	81 c9 02 06 00 00    	or     ecx,0x602
c001a0a1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a0a7:	f3 90                	pause  
c001a0a9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a0ab:	0f ba e1 0c          	bt     ecx,0xc
c001a0af:	72 f6                	jb     c001a0a7 <Krnl::startCPU(int)+0xfe>
c001a0b1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a0bb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a0c1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a0c7:	09 c8                	or     eax,ecx
c001a0c9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a0cf:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a0d5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a0da:	0d 02 06 00 00       	or     eax,0x602
c001a0df:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a0e5:	f3 90                	pause  
c001a0e7:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0e9:	0f ba e0 0c          	bt     eax,0xc
c001a0ed:	72 f6                	jb     c001a0e5 <Krnl::startCPU(int)+0x13c>
c001a0ef:	eb fe                	jmp    c001a0ef <Krnl::startCPU(int)+0x146>
c001a0f1:	c3                   	ret    

c001a0f2 <Krnl::startCPUs()>:
c001a0f2:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001a0f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0fd:	88 c2                	mov    dl,al
c001a0ff:	83 e2 0a             	and    edx,0xa
c001a102:	80 fa 0a             	cmp    dl,0xa
c001a105:	75 09                	jne    c001a110 <Krnl::startCPUs()+0x1e>
c001a107:	a8 01                	test   al,0x1
c001a109:	74 05                	je     c001a110 <Krnl::startCPUs()+0x1e>
c001a10b:	e9 8b 60 fe ff       	jmp    c000019b <prepareTramp>
c001a110:	c3                   	ret    
c001a111:	90                   	nop

c001a112 <EnvVarContainer::getEnv(char const*)>:
c001a112:	57                   	push   edi
c001a113:	56                   	push   esi
c001a114:	53                   	push   ebx
c001a115:	31 db                	xor    ebx,ebx
c001a117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a11b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a11d:	7e 2b                	jle    c001a14a <EnvVarContainer::getEnv(char const*)+0x38>
c001a11f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a126:	50                   	push   eax
c001a127:	50                   	push   eax
c001a128:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a12b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a12e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a132:	e8 89 67 fe ff       	call   c00008c0 <strcmp>
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	85 c0                	test   eax,eax
c001a13c:	75 09                	jne    c001a147 <EnvVarContainer::getEnv(char const*)+0x35>
c001a13e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a141:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a145:	eb 05                	jmp    c001a14c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a147:	43                   	inc    ebx
c001a148:	eb d1                	jmp    c001a11b <EnvVarContainer::getEnv(char const*)+0x9>
c001a14a:	31 c0                	xor    eax,eax
c001a14c:	5b                   	pop    ebx
c001a14d:	5e                   	pop    esi
c001a14e:	5f                   	pop    edi
c001a14f:	c3                   	ret    

c001a150 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a150:	57                   	push   edi
c001a151:	56                   	push   esi
c001a152:	53                   	push   ebx
c001a153:	83 ec 1c             	sub    esp,0x1c
c001a156:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a15a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a15e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a162:	57                   	push   edi
c001a163:	e8 2c 66 fe ff       	call   c0000794 <strlen>
c001a168:	40                   	inc    eax
c001a169:	89 04 24             	mov    DWORD PTR [esp],eax
c001a16c:	e8 d2 56 ff ff       	call   c000f843 <malloc>
c001a171:	89 34 24             	mov    DWORD PTR [esp],esi
c001a174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a178:	e8 17 66 fe ff       	call   c0000794 <strlen>
c001a17d:	40                   	inc    eax
c001a17e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a181:	e8 bd 56 ff ff       	call   c000f843 <malloc>
c001a186:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a189:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a18d:	e8 02 66 fe ff       	call   c0000794 <strlen>
c001a192:	83 c4 0c             	add    esp,0xc
c001a195:	40                   	inc    eax
c001a196:	50                   	push   eax
c001a197:	6a 00                	push   0x0
c001a199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a19d:	e8 d6 65 fe ff       	call   c0000778 <memset>
c001a1a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a1a5:	e8 ea 65 fe ff       	call   c0000794 <strlen>
c001a1aa:	83 c4 0c             	add    esp,0xc
c001a1ad:	40                   	inc    eax
c001a1ae:	50                   	push   eax
c001a1af:	57                   	push   edi
c001a1b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a1b4:	e8 8b 65 fe ff       	call   c0000744 <memcpy>
c001a1b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1bc:	e8 d3 65 fe ff       	call   c0000794 <strlen>
c001a1c1:	83 c4 0c             	add    esp,0xc
c001a1c4:	40                   	inc    eax
c001a1c5:	50                   	push   eax
c001a1c6:	6a 00                	push   0x0
c001a1c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1cc:	e8 a7 65 fe ff       	call   c0000778 <memset>
c001a1d1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1d4:	e8 bb 65 fe ff       	call   c0000794 <strlen>
c001a1d9:	83 c4 0c             	add    esp,0xc
c001a1dc:	40                   	inc    eax
c001a1dd:	50                   	push   eax
c001a1de:	56                   	push   esi
c001a1df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1e3:	e8 5c 65 fe ff       	call   c0000744 <memcpy>
c001a1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1ea:	40                   	inc    eax
c001a1eb:	89 03                	mov    DWORD PTR [ebx],eax
c001a1ed:	c1 e0 03             	shl    eax,0x3
c001a1f0:	5a                   	pop    edx
c001a1f1:	59                   	pop    ecx
c001a1f2:	50                   	push   eax
c001a1f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1f6:	e8 34 56 ff ff       	call   c000f82f <realloc>
c001a1fb:	83 c4 0c             	add    esp,0xc
c001a1fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a201:	6a 08                	push   0x8
c001a203:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a207:	52                   	push   edx
c001a208:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a20a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a20e:	50                   	push   eax
c001a20f:	e8 30 65 fe ff       	call   c0000744 <memcpy>
c001a214:	83 c4 20             	add    esp,0x20
c001a217:	5b                   	pop    ebx
c001a218:	5e                   	pop    esi
c001a219:	5f                   	pop    edi
c001a21a:	c3                   	ret    
c001a21b:	90                   	nop

c001a21c <EnvVarContainer::deleteEnv(char const*)>:
c001a21c:	c3                   	ret    
c001a21d:	90                   	nop

c001a21e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a21e:	55                   	push   ebp
c001a21f:	57                   	push   edi
c001a220:	56                   	push   esi
c001a221:	53                   	push   ebx
c001a222:	81 ec 38 01 00 00    	sub    esp,0x138
c001a228:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a22f:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a236:	68 14 01 00 00       	push   0x114
c001a23b:	e8 03 56 ff ff       	call   c000f843 <malloc>
c001a240:	83 c4 0c             	add    esp,0xc
c001a243:	89 c7                	mov    edi,eax
c001a245:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a248:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a24f:	50                   	push   eax
c001a250:	e8 3b 93 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001a255:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a258:	e8 05 96 ff ff       	call   c0013862 <File::exists()>
c001a25d:	83 c4 10             	add    esp,0x10
c001a260:	84 c0                	test   al,al
c001a262:	75 31                	jne    c001a295 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a264:	51                   	push   ecx
c001a265:	51                   	push   ecx
c001a266:	6a 12                	push   0x12
c001a268:	57                   	push   edi
c001a269:	e8 86 93 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001a26e:	8b 07                	mov    eax,DWORD PTR [edi]
c001a270:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a273:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a276:	e8 19 65 fe ff       	call   c0000794 <strlen>
c001a27b:	5a                   	pop    edx
c001a27c:	31 d2                	xor    edx,edx
c001a27e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a282:	51                   	push   ecx
c001a283:	55                   	push   ebp
c001a284:	52                   	push   edx
c001a285:	50                   	push   eax
c001a286:	57                   	push   edi
c001a287:	ff d3                	call   ebx
c001a289:	83 c4 14             	add    esp,0x14
c001a28c:	57                   	push   edi
c001a28d:	e8 c0 93 ff ff       	call   c0013652 <File::close()>
c001a292:	83 c4 10             	add    esp,0x10
c001a295:	31 db                	xor    ebx,ebx
c001a297:	50                   	push   eax
c001a298:	31 ed                	xor    ebp,ebp
c001a29a:	68 00 01 00 00       	push   0x100
c001a29f:	6a 00                	push   0x0
c001a2a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a2a5:	50                   	push   eax
c001a2a6:	e8 cd 64 fe ff       	call   c0000778 <memset>
c001a2ab:	58                   	pop    eax
c001a2ac:	5a                   	pop    edx
c001a2ad:	6a 01                	push   0x1
c001a2af:	57                   	push   edi
c001a2b0:	e8 3f 93 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	83 ec 0c             	sub    esp,0xc
c001a2bb:	8b 07                	mov    eax,DWORD PTR [edi]
c001a2bd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a2c1:	51                   	push   ecx
c001a2c2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a2c6:	52                   	push   edx
c001a2c7:	6a 00                	push   0x0
c001a2c9:	6a 01                	push   0x1
c001a2cb:	57                   	push   edi
c001a2cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a2cf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a2d3:	83 c4 20             	add    esp,0x20
c001a2d6:	3c 0d                	cmp    al,0xd
c001a2d8:	0f 84 12 01 00 00    	je     c001a3f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2de:	85 db                	test   ebx,ebx
c001a2e0:	0f 84 fd 00 00 00    	je     c001a3e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2e6:	3c 0a                	cmp    al,0xa
c001a2e8:	74 13                	je     c001a2fd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2ef:	74 0c                	je     c001a2fd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2f1:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2f7:	0f 8e e6 00 00 00    	jle    c001a3e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2fd:	83 ec 0c             	sub    esp,0xc
c001a300:	8d 53 01             	lea    edx,[ebx+0x1]
c001a303:	29 dd                	sub    ebp,ebx
c001a305:	52                   	push   edx
c001a306:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a30a:	e8 34 55 ff ff       	call   c000f843 <malloc>
c001a30f:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a312:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a316:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a319:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a31d:	e8 21 55 ff ff       	call   c000f843 <malloc>
c001a322:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a326:	83 c4 0c             	add    esp,0xc
c001a329:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a32d:	52                   	push   edx
c001a32e:	6a 00                	push   0x0
c001a330:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a334:	e8 3f 64 fe ff       	call   c0000778 <memset>
c001a339:	83 c4 0c             	add    esp,0xc
c001a33c:	53                   	push   ebx
c001a33d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a341:	55                   	push   ebp
c001a342:	01 eb                	add    ebx,ebp
c001a344:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a348:	e8 f7 63 fe ff       	call   c0000744 <memcpy>
c001a34d:	83 c4 0c             	add    esp,0xc
c001a350:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a354:	51                   	push   ecx
c001a355:	6a 00                	push   0x0
c001a357:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a35b:	e8 18 64 fe ff       	call   c0000778 <memset>
c001a360:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a363:	e8 2c 64 fe ff       	call   c0000794 <strlen>
c001a368:	83 c4 0c             	add    esp,0xc
c001a36b:	50                   	push   eax
c001a36c:	53                   	push   ebx
c001a36d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a371:	e8 ce 63 fe ff       	call   c0000744 <memcpy>
c001a376:	5b                   	pop    ebx
c001a377:	58                   	pop    eax
c001a378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a37c:	68 6d bb 02 c0       	push   0xc002bb6d
c001a381:	e8 b2 8c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a386:	8b 06                	mov    eax,DWORD PTR [esi]
c001a388:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a38b:	40                   	inc    eax
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	89 06                	mov    DWORD PTR [esi],eax
c001a391:	85 d2                	test   edx,edx
c001a393:	75 0c                	jne    c001a3a1 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a395:	83 ec 0c             	sub    esp,0xc
c001a398:	6a 08                	push   0x8
c001a39a:	e8 a4 54 ff ff       	call   c000f843 <malloc>
c001a39f:	eb 0c                	jmp    c001a3ad <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a3a1:	c1 e0 03             	shl    eax,0x3
c001a3a4:	51                   	push   ecx
c001a3a5:	51                   	push   ecx
c001a3a6:	50                   	push   eax
c001a3a7:	52                   	push   edx
c001a3a8:	e8 82 54 ff ff       	call   c000f82f <realloc>
c001a3ad:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a3b0:	83 c4 10             	add    esp,0x10
c001a3b3:	31 db                	xor    ebx,ebx
c001a3b5:	52                   	push   edx
c001a3b6:	6a 08                	push   0x8
c001a3b8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a3bc:	50                   	push   eax
c001a3bd:	8b 16                	mov    edx,DWORD PTR [esi]
c001a3bf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3c2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3c6:	50                   	push   eax
c001a3c7:	e8 78 63 fe ff       	call   c0000744 <memcpy>
c001a3cc:	83 c4 0c             	add    esp,0xc
c001a3cf:	68 00 01 00 00       	push   0x100
c001a3d4:	6a 00                	push   0x0
c001a3d6:	55                   	push   ebp
c001a3d7:	31 ed                	xor    ebp,ebp
c001a3d9:	e8 9a 63 fe ff       	call   c0000778 <memset>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	eb 0d                	jmp    c001a3f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3e3:	3c 3d                	cmp    al,0x3d
c001a3e5:	74 07                	je     c001a3ee <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a3e7:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3eb:	45                   	inc    ebp
c001a3ec:	eb 02                	jmp    c001a3f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3ee:	89 eb                	mov    ebx,ebp
c001a3f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3f5:	0f 85 bd fe ff ff    	jne    c001a2b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3fb:	50                   	push   eax
c001a3fc:	50                   	push   eax
c001a3fd:	ff 36                	push   DWORD PTR [esi]
c001a3ff:	68 7b bb 02 c0       	push   0xc002bb7b
c001a404:	e8 2f 8c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a409:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a40f:	5b                   	pop    ebx
c001a410:	5e                   	pop    esi
c001a411:	5f                   	pop    edi
c001a412:	5d                   	pop    ebp
c001a413:	c3                   	ret    

c001a414 <EnvVarContainer::__loadSystem()>:
c001a414:	83 ec 10             	sub    esp,0x10
c001a417:	68 a0 da 02 c0       	push   0xc002daa0
c001a41c:	68 a6 bb 02 c0       	push   0xc002bba6
c001a421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a425:	e8 f4 fd ff ff       	call   c001a21e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a42a:	83 c4 1c             	add    esp,0x1c
c001a42d:	c3                   	ret    

c001a42e <EnvVarContainer::__loadUser()>:
c001a42e:	c3                   	ret    
c001a42f:	90                   	nop

c001a430 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a434:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a43a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a43e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a442:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a449:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a450:	90                   	nop
c001a451:	c3                   	ret    

c001a452 <EnvVarContainer::~EnvVarContainer()>:
c001a452:	83 ec 0c             	sub    esp,0xc
c001a455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a459:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a45c:	85 c0                	test   eax,eax
c001a45e:	74 1d                	je     c001a47d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a464:	8b 00                	mov    eax,DWORD PTR [eax]
c001a466:	85 c0                	test   eax,eax
c001a468:	74 13                	je     c001a47d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a471:	83 ec 0c             	sub    esp,0xc
c001a474:	50                   	push   eax
c001a475:	e8 d9 53 ff ff       	call   c000f853 <free>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	90                   	nop
c001a47e:	83 c4 0c             	add    esp,0xc
c001a481:	c3                   	ret    

c001a482 <Krnl::getEnv(Process*, char const*)>:
c001a482:	53                   	push   ebx
c001a483:	83 ec 08             	sub    esp,0x8
c001a486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a48e:	39 05 f4 1a 03 c0    	cmp    DWORD PTR ds:0xc0031af4,eax
c001a494:	74 04                	je     c001a49a <Krnl::getEnv(Process*, char const*)+0x18>
c001a496:	85 c0                	test   eax,eax
c001a498:	75 0b                	jne    c001a4a5 <Krnl::getEnv(Process*, char const*)+0x23>
c001a49a:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a49f:	85 c0                	test   eax,eax
c001a4a1:	75 19                	jne    c001a4bc <Krnl::getEnv(Process*, char const*)+0x3a>
c001a4a3:	eb 27                	jmp    c001a4cc <Krnl::getEnv(Process*, char const*)+0x4a>
c001a4a5:	52                   	push   edx
c001a4a6:	52                   	push   edx
c001a4a7:	53                   	push   ebx
c001a4a8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a4ae:	e8 5f fc ff ff       	call   c001a112 <EnvVarContainer::getEnv(char const*)>
c001a4b3:	83 c4 10             	add    esp,0x10
c001a4b6:	85 c0                	test   eax,eax
c001a4b8:	75 28                	jne    c001a4e2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a4ba:	eb de                	jmp    c001a49a <Krnl::getEnv(Process*, char const*)+0x18>
c001a4bc:	52                   	push   edx
c001a4bd:	52                   	push   edx
c001a4be:	53                   	push   ebx
c001a4bf:	50                   	push   eax
c001a4c0:	e8 4d fc ff ff       	call   c001a112 <EnvVarContainer::getEnv(char const*)>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	85 c0                	test   eax,eax
c001a4ca:	75 16                	jne    c001a4e2 <Krnl::getEnv(Process*, char const*)+0x60>
c001a4cc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a4d0:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a4d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4d9:	83 c4 08             	add    esp,0x8
c001a4dc:	5b                   	pop    ebx
c001a4dd:	e9 30 fc ff ff       	jmp    c001a112 <EnvVarContainer::getEnv(char const*)>
c001a4e2:	83 c4 08             	add    esp,0x8
c001a4e5:	5b                   	pop    ebx
c001a4e6:	c3                   	ret    

c001a4e7 <Krnl::setEnvSystem(char const*, char const*)>:
c001a4e7:	83 ec 10             	sub    esp,0x10
c001a4ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f2:	ff 35 d8 10 03 c0    	push   DWORD PTR ds:0xc00310d8
c001a4f8:	e8 53 fc ff ff       	call   c001a150 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4fd:	83 c4 1c             	add    esp,0x1c
c001a500:	c3                   	ret    

c001a501 <Krnl::setEnvUser(char const*, char const*)>:
c001a501:	a1 d4 10 03 c0       	mov    eax,ds:0xc00310d4
c001a506:	85 c0                	test   eax,eax
c001a508:	74 15                	je     c001a51f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a50a:	83 ec 10             	sub    esp,0x10
c001a50d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a511:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a515:	50                   	push   eax
c001a516:	e8 35 fc ff ff       	call   c001a150 <EnvVarContainer::setEnv(char const*, char const*)>
c001a51b:	83 c4 1c             	add    esp,0x1c
c001a51e:	c3                   	ret    
c001a51f:	c3                   	ret    

c001a520 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a524:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a52a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a52e:	e9 1d fc ff ff       	jmp    c001a150 <EnvVarContainer::setEnv(char const*, char const*)>

c001a533 <Krnl::deleteEnvSystem(char const*)>:
c001a533:	c3                   	ret    

c001a534 <Krnl::deleteEnvUser(char const*)>:
c001a534:	c3                   	ret    

c001a535 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a535:	c3                   	ret    

c001a536 <Krnl::newProcessEnv(Process*)>:
c001a536:	83 ec 28             	sub    esp,0x28
c001a539:	6a 0c                	push   0xc
c001a53b:	e8 03 53 ff ff       	call   c000f843 <malloc>
c001a540:	5a                   	pop    edx
c001a541:	59                   	pop    ecx
c001a542:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a546:	50                   	push   eax
c001a547:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a54b:	e8 e0 fe ff ff       	call   c001a430 <EnvVarContainer::EnvVarContainer(Process*)>
c001a550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a554:	83 c4 2c             	add    esp,0x2c
c001a557:	c3                   	ret    

c001a558 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a558:	56                   	push   esi
c001a559:	53                   	push   ebx
c001a55a:	83 ec 10             	sub    esp,0x10
c001a55d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a561:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a567:	6a 0c                	push   0xc
c001a569:	e8 d5 52 ff ff       	call   c000f843 <malloc>
c001a56e:	89 c3                	mov    ebx,eax
c001a570:	58                   	pop    eax
c001a571:	5a                   	pop    edx
c001a572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a576:	53                   	push   ebx
c001a577:	e8 b4 fe ff ff       	call   c001a430 <EnvVarContainer::EnvVarContainer(Process*)>
c001a57c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a57e:	89 03                	mov    DWORD PTR [ebx],eax
c001a580:	c1 e0 03             	shl    eax,0x3
c001a583:	89 04 24             	mov    DWORD PTR [esp],eax
c001a586:	e8 b8 52 ff ff       	call   c000f843 <malloc>
c001a58b:	83 c4 0c             	add    esp,0xc
c001a58e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a591:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a593:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a59a:	52                   	push   edx
c001a59b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a59e:	50                   	push   eax
c001a59f:	e8 a0 61 fe ff       	call   c0000744 <memcpy>
c001a5a4:	89 d8                	mov    eax,ebx
c001a5a6:	83 c4 14             	add    esp,0x14
c001a5a9:	5b                   	pop    ebx
c001a5aa:	5e                   	pop    esi
c001a5ab:	c3                   	ret    

c001a5ac <Krnl::loadSystemEnv()>:
c001a5ac:	53                   	push   ebx
c001a5ad:	83 ec 14             	sub    esp,0x14
c001a5b0:	6a 0c                	push   0xc
c001a5b2:	e8 8c 52 ff ff       	call   c000f843 <malloc>
c001a5b7:	89 c3                	mov    ebx,eax
c001a5b9:	58                   	pop    eax
c001a5ba:	5a                   	pop    edx
c001a5bb:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001a5c1:	53                   	push   ebx
c001a5c2:	e8 69 fe ff ff       	call   c001a430 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5ca:	89 1d d8 10 03 c0    	mov    DWORD PTR ds:0xc00310d8,ebx
c001a5d0:	e8 3f fe ff ff       	call   c001a414 <EnvVarContainer::__loadSystem()>
c001a5d5:	83 c4 18             	add    esp,0x18
c001a5d8:	5b                   	pop    ebx
c001a5d9:	c3                   	ret    

c001a5da <Krnl::loadUserEnv()>:
c001a5da:	53                   	push   ebx
c001a5db:	83 ec 14             	sub    esp,0x14
c001a5de:	6a 0c                	push   0xc
c001a5e0:	e8 5e 52 ff ff       	call   c000f843 <malloc>
c001a5e5:	89 c3                	mov    ebx,eax
c001a5e7:	58                   	pop    eax
c001a5e8:	5a                   	pop    edx
c001a5e9:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001a5ef:	53                   	push   ebx
c001a5f0:	e8 3b fe ff ff       	call   c001a430 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5f5:	89 1d d4 10 03 c0    	mov    DWORD PTR ds:0xc00310d4,ebx
c001a5fb:	83 c4 18             	add    esp,0x18
c001a5fe:	5b                   	pop    ebx
c001a5ff:	c3                   	ret    

c001a600 <Krnl::flushEnv()>:
c001a600:	c3                   	ret    

c001a601 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a605:	8b 15 d4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d4
c001a60b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a611:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a616:	8b 00                	mov    eax,DWORD PTR [eax]
c001a618:	03 01                	add    eax,DWORD PTR [ecx]
c001a61a:	85 d2                	test   edx,edx
c001a61c:	74 02                	je     c001a620 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a61e:	03 02                	add    eax,DWORD PTR [edx]
c001a620:	c3                   	ret    

c001a621 <Krnl::getProcessEnvPair(Process*, int)>:
c001a621:	57                   	push   edi
c001a622:	8b 0d d4 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310d4
c001a628:	56                   	push   esi
c001a629:	85 c9                	test   ecx,ecx
c001a62b:	53                   	push   ebx
c001a62c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a630:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a634:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a63a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a63e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a640:	75 47                	jne    c001a689 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a642:	39 c3                	cmp    ebx,eax
c001a644:	7c 47                	jl     c001a68d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a646:	8b 15 d8 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310d8
c001a64c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a64e:	01 c1                	add    ecx,eax
c001a650:	39 d9                	cmp    ecx,ebx
c001a652:	7e 6c                	jle    c001a6c0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a654:	51                   	push   ecx
c001a655:	89 d9                	mov    ecx,ebx
c001a657:	29 c1                	sub    ecx,eax
c001a659:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a65c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a660:	53                   	push   ebx
c001a661:	68 c8 bb 02 c0       	push   0xc002bbc8
c001a666:	e8 cd 89 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a66b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a671:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a673:	a1 d8 10 03 c0       	mov    eax,ds:0xc00310d8
c001a678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a67b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a67f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a682:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a685:	89 06                	mov    DWORD PTR [esi],eax
c001a687:	eb 51                	jmp    c001a6da <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a689:	39 c3                	cmp    ebx,eax
c001a68b:	7d 05                	jge    c001a692 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a68d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a690:	eb 20                	jmp    c001a6b2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a692:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a694:	8d 14 07             	lea    edx,[edi+eax*1]
c001a697:	39 da                	cmp    edx,ebx
c001a699:	7e 04                	jle    c001a69f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a69b:	29 c3                	sub    ebx,eax
c001a69d:	eb 10                	jmp    c001a6af <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a69f:	8b 0d d8 10 03 c0    	mov    ecx,DWORD PTR ds:0xc00310d8
c001a6a5:	03 11                	add    edx,DWORD PTR [ecx]
c001a6a7:	39 da                	cmp    edx,ebx
c001a6a9:	7e 15                	jle    c001a6c0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a6ab:	29 c3                	sub    ebx,eax
c001a6ad:	29 fb                	sub    ebx,edi
c001a6af:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a6b2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a6b6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a6b9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a6bc:	89 06                	mov    DWORD PTR [esi],eax
c001a6be:	eb 1d                	jmp    c001a6dd <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a6c0:	83 ec 0c             	sub    esp,0xc
c001a6c3:	68 dc bb 02 c0       	push   0xc002bbdc
c001a6c8:	e8 18 00 00 00       	call   c001a6e5 <Krnl::panic(char const*)>
c001a6cd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a6d3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6da:	83 c4 10             	add    esp,0x10
c001a6dd:	89 f0                	mov    eax,esi
c001a6df:	5b                   	pop    ebx
c001a6e0:	5e                   	pop    esi
c001a6e1:	5f                   	pop    edi
c001a6e2:	c2 04 00             	ret    0x4

c001a6e5 <Krnl::panic(char const*)>:
c001a6e5:	55                   	push   ebp
c001a6e6:	89 e5                	mov    ebp,esp
c001a6e8:	53                   	push   ebx
c001a6e9:	83 ec 0c             	sub    esp,0xc
c001a6ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6ef:	fa                   	cli    
c001a6f0:	c6 05 e4 10 03 c0 01 	mov    BYTE PTR ds:0xc00310e4,0x1
c001a6f7:	53                   	push   ebx
c001a6f8:	c6 05 a4 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d4a4,0x0
c001a6ff:	68 f6 bb 02 c0       	push   0xc002bbf6
c001a704:	e8 2f 89 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a709:	58                   	pop    eax
c001a70a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a70f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a715:	e8 3d 66 ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001a71a:	83 c4 0c             	add    esp,0xc
c001a71d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a722:	6a 01                	push   0x1
c001a724:	6a 0f                	push   0xf
c001a726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a72c:	e8 57 60 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a731:	58                   	pop    eax
c001a732:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a737:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73d:	e8 b6 68 ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001a742:	58                   	pop    eax
c001a743:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a748:	5a                   	pop    edx
c001a749:	68 0f bc 02 c0       	push   0xc002bc0f
c001a74e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a754:	e8 1d 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a759:	59                   	pop    ecx
c001a75a:	58                   	pop    eax
c001a75b:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a760:	68 b4 bc 02 c0       	push   0xc002bcb4
c001a765:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76b:	e8 06 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a770:	58                   	pop    eax
c001a771:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a776:	5a                   	pop    edx
c001a777:	68 2b bc 02 c0       	push   0xc002bc2b
c001a77c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a782:	e8 ef 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a787:	59                   	pop    ecx
c001a788:	58                   	pop    eax
c001a789:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a78e:	53                   	push   ebx
c001a78f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a795:	e8 dc 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a79a:	58                   	pop    eax
c001a79b:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a7a0:	5a                   	pop    edx
c001a7a1:	68 4b bc 02 c0       	push   0xc002bc4b
c001a7a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ac:	e8 c5 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7b1:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001a7b6:	83 c4 10             	add    esp,0x10
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	74 02                	je     c001a7bf <Krnl::panic(char const*)+0xda>
c001a7bd:	ff d0                	call   eax
c001a7bf:	83 ec 0c             	sub    esp,0xc
c001a7c2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7c5:	e8 fd 2f 00 00       	call   c001d7c7 <Thr::getDriverNameFromAddress(unsigned long)>
c001a7ca:	83 c4 10             	add    esp,0x10
c001a7cd:	89 c3                	mov    ebx,eax
c001a7cf:	85 c0                	test   eax,eax
c001a7d1:	0f 84 50 02 00 00    	je     c001aa27 <Krnl::panic(char const*)+0x342>
c001a7d7:	83 ec 08             	sub    esp,0x8
c001a7da:	8b 15 f4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031af4
c001a7e0:	68 f0 bc 02 c0       	push   0xc002bcf0
c001a7e5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7eb:	e8 86 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7f0:	58                   	pop    eax
c001a7f1:	5a                   	pop    edx
c001a7f2:	8b 15 f4 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031af4
c001a7f8:	68 2b bc 02 c0       	push   0xc002bc2b
c001a7fd:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a803:	e8 6e 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a808:	59                   	pop    ecx
c001a809:	58                   	pop    eax
c001a80a:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a80f:	53                   	push   ebx
c001a810:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a816:	e8 5b 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a81b:	83 c4 10             	add    esp,0x10
c001a81e:	83 ec 08             	sub    esp,0x8
c001a821:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a826:	68 4a bc 02 c0       	push   0xc002bc4a
c001a82b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a831:	e8 40 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a836:	58                   	pop    eax
c001a837:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a83c:	5a                   	pop    edx
c001a83d:	68 48 bd 02 c0       	push   0xc002bd48
c001a842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a848:	e8 29 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a84d:	59                   	pop    ecx
c001a84e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a853:	5b                   	pop    ebx
c001a854:	68 88 bd 02 c0       	push   0xc002bd88
c001a859:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85f:	e8 12 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a864:	58                   	pop    eax
c001a865:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a86a:	5a                   	pop    edx
c001a86b:	68 36 bc 02 c0       	push   0xc002bc36
c001a870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a876:	e8 fb 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a87b:	59                   	pop    ecx
c001a87c:	5b                   	pop    ebx
c001a87d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a880:	68 4e bc 02 c0       	push   0xc002bc4e
c001a885:	e8 ae 87 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a88a:	58                   	pop    eax
c001a88b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a88e:	5a                   	pop    edx
c001a88f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a892:	68 57 bc 02 c0       	push   0xc002bc57
c001a897:	e8 9c 87 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a89c:	59                   	pop    ecx
c001a89d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a8a0:	5b                   	pop    ebx
c001a8a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8a3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a8a6:	68 60 bc 02 c0       	push   0xc002bc60
c001a8ab:	e8 88 87 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001a8b0:	58                   	pop    eax
c001a8b1:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8b6:	5a                   	pop    edx
c001a8b7:	68 cc bd 02 c0       	push   0xc002bdcc
c001a8bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c2:	e8 af 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8c7:	59                   	pop    ecx
c001a8c8:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8cd:	5b                   	pop    ebx
c001a8ce:	68 69 bc 02 c0       	push   0xc002bc69
c001a8d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d9:	e8 98 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8de:	0f 20 c0             	mov    eax,cr0
c001a8e1:	5a                   	pop    edx
c001a8e2:	59                   	pop    ecx
c001a8e3:	50                   	push   eax
c001a8e4:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ef:	e8 a8 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a8f4:	5b                   	pop    ebx
c001a8f5:	58                   	pop    eax
c001a8f6:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a8fb:	68 73 bc 02 c0       	push   0xc002bc73
c001a900:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a906:	e8 6b 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a90b:	0f 20 d0             	mov    eax,cr2
c001a90e:	5a                   	pop    edx
c001a90f:	59                   	pop    ecx
c001a910:	50                   	push   eax
c001a911:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91c:	e8 7b 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a921:	5b                   	pop    ebx
c001a922:	58                   	pop    eax
c001a923:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a928:	68 7d bc 02 c0       	push   0xc002bc7d
c001a92d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a933:	e8 3e 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a938:	0f 20 d8             	mov    eax,cr3
c001a93b:	5a                   	pop    edx
c001a93c:	59                   	pop    ecx
c001a93d:	50                   	push   eax
c001a93e:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a943:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a949:	e8 4e 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a94e:	5b                   	pop    ebx
c001a94f:	58                   	pop    eax
c001a950:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a955:	68 90 bc 02 c0       	push   0xc002bc90
c001a95a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a960:	e8 11 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a965:	0f 20 e0             	mov    eax,cr4
c001a968:	5a                   	pop    edx
c001a969:	59                   	pop    ecx
c001a96a:	50                   	push   eax
c001a96b:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a970:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a976:	e8 21 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a97b:	5b                   	pop    ebx
c001a97c:	58                   	pop    eax
c001a97d:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a982:	68 9a bc 02 c0       	push   0xc002bc9a
c001a987:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98d:	e8 e4 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a992:	5a                   	pop    edx
c001a993:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a998:	59                   	pop    ecx
c001a999:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a99f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9a2:	50                   	push   eax
c001a9a3:	e8 f4 67 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a9a8:	5b                   	pop    ebx
c001a9a9:	58                   	pop    eax
c001a9aa:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a9af:	68 b1 bc 02 c0       	push   0xc002bcb1
c001a9b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ba:	e8 b7 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a9bf:	5a                   	pop    edx
c001a9c0:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a9c5:	59                   	pop    ecx
c001a9c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9cc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9cf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9d2:	50                   	push   eax
c001a9d3:	e8 c4 67 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a9d8:	5b                   	pop    ebx
c001a9d9:	58                   	pop    eax
c001a9da:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a9df:	68 b1 bc 02 c0       	push   0xc002bcb1
c001a9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ea:	e8 87 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a9ef:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001a9f4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9f7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9fd:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9ff:	59                   	pop    ecx
c001aa00:	5b                   	pop    ebx
c001aa01:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aa04:	50                   	push   eax
c001aa05:	e8 92 67 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	b2 fe                	mov    dl,0xfe
c001aa0f:	e4 60                	in     al,0x60
c001aa11:	3c 1c                	cmp    al,0x1c
c001aa13:	74 04                	je     c001aa19 <Krnl::panic(char const*)+0x334>
c001aa15:	3c 5a                	cmp    al,0x5a
c001aa17:	75 f6                	jne    c001aa0f <Krnl::panic(char const*)+0x32a>
c001aa19:	e4 64                	in     al,0x64
c001aa1b:	a8 02                	test   al,0x2
c001aa1d:	75 fa                	jne    c001aa19 <Krnl::panic(char const*)+0x334>
c001aa1f:	88 d0                	mov    al,dl
c001aa21:	e6 64                	out    0x64,al
c001aa23:	fa                   	cli    
c001aa24:	f4                   	hlt    
c001aa25:	eb e8                	jmp    c001aa0f <Krnl::panic(char const*)+0x32a>
c001aa27:	50                   	push   eax
c001aa28:	50                   	push   eax
c001aa29:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001aa2e:	68 1c bd 02 c0       	push   0xc002bd1c
c001aa33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa39:	e8 38 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa3e:	58                   	pop    eax
c001aa3f:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001aa44:	5a                   	pop    edx
c001aa45:	68 2b bc 02 c0       	push   0xc002bc2b
c001aa4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa50:	e8 21 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa55:	59                   	pop    ecx
c001aa56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa5b:	5b                   	pop    ebx
c001aa5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa5f:	83 c0 0c             	add    eax,0xc
c001aa62:	50                   	push   eax
c001aa63:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001aa68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa6e:	e8 03 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa73:	83 c4 10             	add    esp,0x10
c001aa76:	e9 a3 fd ff ff       	jmp    c001a81e <Krnl::panic(char const*)+0x139>

c001aa7b <Net::switchEndian16(unsigned short)>:
c001aa7b:	83 ec 04             	sub    esp,0x4
c001aa7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa82:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa8a:	c1 f8 08             	sar    eax,0x8
c001aa8d:	89 c2                	mov    edx,eax
c001aa8f:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa93:	c1 e0 08             	shl    eax,0x8
c001aa96:	09 d0                	or     eax,edx
c001aa98:	83 c4 04             	add    esp,0x4
c001aa9b:	c3                   	ret    

c001aa9c <Net::switchEndian32(unsigned int)>:
c001aa9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa0:	c1 e8 18             	shr    eax,0x18
c001aaa3:	89 c2                	mov    edx,eax
c001aaa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaa9:	c1 e0 08             	shl    eax,0x8
c001aaac:	25 00 00 ff 00       	and    eax,0xff0000
c001aab1:	09 c2                	or     edx,eax
c001aab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aab7:	c1 e8 08             	shr    eax,0x8
c001aaba:	25 00 ff 00 00       	and    eax,0xff00
c001aabf:	09 c2                	or     edx,eax
c001aac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aac5:	c1 e0 18             	shl    eax,0x18
c001aac8:	09 d0                	or     eax,edx
c001aaca:	c3                   	ret    

c001aacb <Net::crc32Calc(unsigned char*, int)>:
c001aacb:	83 ec 10             	sub    esp,0x10
c001aace:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aad3:	75 07                	jne    c001aadc <Net::crc32Calc(unsigned char*, int)+0x11>
c001aad5:	b8 00 00 00 00       	mov    eax,0x0
c001aada:	eb 7c                	jmp    c001ab58 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aadc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aae1:	7f 07                	jg     c001aaea <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aae3:	b8 00 00 00 00       	mov    eax,0x0
c001aae8:	eb 6e                	jmp    c001ab58 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aaea:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaf2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aafa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aafe:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ab02:	7d 4e                	jge    c001ab52 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ab04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab0c:	01 d0                	add    eax,edx
c001ab0e:	8a 00                	mov    al,BYTE PTR [eax]
c001ab10:	0f b6 c0             	movzx  eax,al
c001ab13:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ab17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab1f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ab24:	7f 26                	jg     c001ab4c <Net::crc32Calc(unsigned char*, int)+0x81>
c001ab26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab2a:	83 e0 01             	and    eax,0x1
c001ab2d:	74 0d                	je     c001ab3c <Net::crc32Calc(unsigned char*, int)+0x71>
c001ab2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab33:	d1 e8                	shr    eax,1
c001ab35:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ab3a:	eb 06                	jmp    c001ab42 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ab3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab40:	d1 e8                	shr    eax,1
c001ab42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab4a:	eb d3                	jmp    c001ab1f <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab4c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab50:	eb a8                	jmp    c001aafa <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab56:	f7 d0                	not    eax
c001ab58:	83 c4 10             	add    esp,0x10
c001ab5b:	c3                   	ret    

c001ab5c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab5c:	83 ec 1c             	sub    esp,0x1c
c001ab5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab6f:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab74:	7f 14                	jg     c001ab8a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab7a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab7d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab81:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab88:	eb e5                	jmp    c001ab6f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab91:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab95:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab98:	83 ec 04             	sub    esp,0x4
c001ab9b:	6a 06                	push   0x6
c001ab9d:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aba1:	50                   	push   eax
c001aba2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aba6:	e8 99 5b fe ff       	call   c0000744 <memcpy>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001abb3:	83 ec 04             	sub    esp,0x4
c001abb6:	6a 06                	push   0x6
c001abb8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001abbc:	50                   	push   eax
c001abbd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abc1:	e8 7e 5b fe ff       	call   c0000744 <memcpy>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001abce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abd2:	0f b7 c0             	movzx  eax,ax
c001abd5:	c1 f8 08             	sar    eax,0x8
c001abd8:	89 c1                	mov    ecx,eax
c001abda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abde:	8d 50 01             	lea    edx,[eax+0x1]
c001abe1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abe5:	88 ca                	mov    dl,cl
c001abe7:	88 10                	mov    BYTE PTR [eax],dl
c001abe9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf1:	8d 48 01             	lea    ecx,[eax+0x1]
c001abf4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abf8:	88 10                	mov    BYTE PTR [eax],dl
c001abfa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac02:	83 ec 04             	sub    esp,0x4
c001ac05:	52                   	push   edx
c001ac06:	50                   	push   eax
c001ac07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ac0b:	e8 34 5b fe ff       	call   c0000744 <memcpy>
c001ac10:	83 c4 10             	add    esp,0x10
c001ac13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac17:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ac1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac1f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ac23:	83 ec 08             	sub    esp,0x8
c001ac26:	50                   	push   eax
c001ac27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ac2b:	e8 9b fe ff ff       	call   c001aacb <Net::crc32Calc(unsigned char*, int)>
c001ac30:	83 c4 10             	add    esp,0x10
c001ac33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac3b:	c1 e8 18             	shr    eax,0x18
c001ac3e:	89 c1                	mov    ecx,eax
c001ac40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac44:	8d 50 01             	lea    edx,[eax+0x1]
c001ac47:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac4b:	88 ca                	mov    dl,cl
c001ac4d:	88 10                	mov    BYTE PTR [eax],dl
c001ac4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac53:	c1 e8 10             	shr    eax,0x10
c001ac56:	89 c1                	mov    ecx,eax
c001ac58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac63:	88 ca                	mov    dl,cl
c001ac65:	88 10                	mov    BYTE PTR [eax],dl
c001ac67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6b:	c1 e8 08             	shr    eax,0x8
c001ac6e:	89 c1                	mov    ecx,eax
c001ac70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac74:	8d 50 01             	lea    edx,[eax+0x1]
c001ac77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac7b:	88 ca                	mov    dl,cl
c001ac7d:	88 10                	mov    BYTE PTR [eax],dl
c001ac7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac83:	8d 50 01             	lea    edx,[eax+0x1]
c001ac86:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac8e:	88 10                	mov    BYTE PTR [eax],dl
c001ac90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac94:	83 c4 1c             	add    esp,0x1c
c001ac97:	c3                   	ret    

c001ac98 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac98:	83 ec 2c             	sub    esp,0x2c
c001ac9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aca3:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aca8:	83 ec 04             	sub    esp,0x4
c001acab:	6a 06                	push   0x6
c001acad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acb5:	83 c0 0e             	add    eax,0xe
c001acb8:	50                   	push   eax
c001acb9:	e8 86 5a fe ff       	call   c0000744 <memcpy>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001acc6:	83 ec 04             	sub    esp,0x4
c001acc9:	6a 06                	push   0x6
c001accb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001accf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acd3:	83 c0 08             	add    eax,0x8
c001acd6:	50                   	push   eax
c001acd7:	e8 68 5a fe ff       	call   c0000744 <memcpy>
c001acdc:	83 c4 10             	add    esp,0x10
c001acdf:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ace4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace8:	8d 50 01             	lea    edx,[eax+0x1]
c001aceb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acef:	8a 00                	mov    al,BYTE PTR [eax]
c001acf1:	0f b6 c0             	movzx  eax,al
c001acf4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001acf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acfd:	8d 50 01             	lea    edx,[eax+0x1]
c001ad00:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad04:	8a 00                	mov    al,BYTE PTR [eax]
c001ad06:	0f b6 c0             	movzx  eax,al
c001ad09:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ad0e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ad13:	c1 e0 08             	shl    eax,0x8
c001ad16:	89 c2                	mov    edx,eax
c001ad18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad1c:	09 d0                	or     eax,edx
c001ad1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad22:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ad26:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ad2b:	75 3a                	jne    c001ad67 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad31:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad34:	66 3d dc 05          	cmp    ax,0x5dc
c001ad38:	77 10                	ja     c001ad4a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ad3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad3e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad41:	0f b7 c0             	movzx  eax,ax
c001ad44:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad48:	eb 1d                	jmp    c001ad67 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad4a:	83 ec 0c             	sub    esp,0xc
c001ad4d:	68 f4 bd 02 c0       	push   0xc002bdf4
c001ad52:	e8 e1 82 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001ad57:	83 c4 10             	add    esp,0x10
c001ad5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad5e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad62:	e9 c0 00 00 00       	jmp    c001ae27 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad67:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad71:	83 ec 04             	sub    esp,0x4
c001ad74:	52                   	push   edx
c001ad75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad79:	50                   	push   eax
c001ad7a:	e8 c5 59 fe ff       	call   c0000744 <memcpy>
c001ad7f:	83 c4 10             	add    esp,0x10
c001ad82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad86:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad95:	8a 00                	mov    al,BYTE PTR [eax]
c001ad97:	0f b6 c0             	movzx  eax,al
c001ad9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ada2:	8d 50 01             	lea    edx,[eax+0x1]
c001ada5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ada9:	8a 00                	mov    al,BYTE PTR [eax]
c001adab:	0f b6 c0             	movzx  eax,al
c001adae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001adb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb6:	8d 50 01             	lea    edx,[eax+0x1]
c001adb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001adbd:	8a 00                	mov    al,BYTE PTR [eax]
c001adbf:	0f b6 c0             	movzx  eax,al
c001adc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adca:	8d 50 01             	lea    edx,[eax+0x1]
c001adcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001add1:	8a 00                	mov    al,BYTE PTR [eax]
c001add3:	0f b6 c0             	movzx  eax,al
c001add6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adde:	c1 e0 18             	shl    eax,0x18
c001ade1:	89 c2                	mov    edx,eax
c001ade3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade7:	c1 e0 10             	shl    eax,0x10
c001adea:	09 c2                	or     edx,eax
c001adec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adf0:	c1 e0 08             	shl    eax,0x8
c001adf3:	09 d0                	or     eax,edx
c001adf5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001adf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adfd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae01:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ae05:	83 e8 04             	sub    eax,0x4
c001ae08:	83 ec 08             	sub    esp,0x8
c001ae0b:	50                   	push   eax
c001ae0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ae10:	e8 b6 fc ff ff       	call   c001aacb <Net::crc32Calc(unsigned char*, int)>
c001ae15:	83 c4 10             	add    esp,0x10
c001ae18:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ae1c:	0f 94 c2             	sete   dl
c001ae1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae23:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ae26:	90                   	nop
c001ae27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae2b:	83 c4 2c             	add    esp,0x2c
c001ae2e:	c2 04 00             	ret    0x4

c001ae31 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ae31:	55                   	push   ebp
c001ae32:	57                   	push   edi
c001ae33:	56                   	push   esi
c001ae34:	53                   	push   ebx
c001ae35:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae3b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ae42:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ae44:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ae47:	80 fb 40             	cmp    bl,0x40
c001ae4a:	75 1b                	jne    c001ae67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae4c:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae4e:	84 d2                	test   dl,dl
c001ae50:	0f 84 f1 00 00 00    	je     c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae56:	8d 46 01             	lea    eax,[esi+0x1]
c001ae59:	80 fa 3a             	cmp    dl,0x3a
c001ae5c:	74 04                	je     c001ae62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae5e:	89 c6                	mov    esi,eax
c001ae60:	eb ea                	jmp    c001ae4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae62:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae65:	89 c6                	mov    esi,eax
c001ae67:	50                   	push   eax
c001ae68:	6a 40                	push   0x40
c001ae6a:	6a 00                	push   0x0
c001ae6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae70:	50                   	push   eax
c001ae71:	e8 02 59 fe ff       	call   c0000778 <memset>
c001ae76:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae7d:	31 c0                	xor    eax,eax
c001ae7f:	83 c4 10             	add    esp,0x10
c001ae82:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae84:	84 c9                	test   cl,cl
c001ae86:	0f 84 bb 00 00 00    	je     c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae8c:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae91:	0f 8f b0 00 00 00    	jg     c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae97:	80 f9 0a             	cmp    cl,0xa
c001ae9a:	0f 85 98 00 00 00    	jne    c001af38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001aea0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001aea5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001aea9:	a8 df                	test   al,0xdf
c001aeab:	0f 94 c1             	sete   cl
c001aeae:	3c 23                	cmp    al,0x23
c001aeb0:	0f 94 c2             	sete   dl
c001aeb3:	08 d1                	or     cl,dl
c001aeb5:	75 4a                	jne    c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeb7:	8d 50 f7             	lea    edx,[eax-0x9]
c001aeba:	80 fa 01             	cmp    dl,0x1
c001aebd:	76 42                	jbe    c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aebf:	3c 5b                	cmp    al,0x5b
c001aec1:	75 42                	jne    c001af05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aec3:	80 fb 40             	cmp    bl,0x40
c001aec6:	75 39                	jne    c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aec8:	83 ec 0c             	sub    esp,0xc
c001aecb:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aecf:	52                   	push   edx
c001aed0:	e8 bf 58 fe ff       	call   c0000794 <strlen>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	83 f8 3f             	cmp    eax,0x3f
c001aedb:	77 6a                	ja     c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aedd:	50                   	push   eax
c001aede:	50                   	push   eax
c001aedf:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aee3:	52                   	push   edx
c001aee4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aee8:	52                   	push   edx
c001aee9:	e8 46 59 fe ff       	call   c0000834 <strcpy>
c001aeee:	58                   	pop    eax
c001aeef:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aef3:	52                   	push   edx
c001aef4:	e8 9b 58 fe ff       	call   c0000794 <strlen>
c001aef9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aefe:	83 c4 10             	add    esp,0x10
c001af01:	31 d2                	xor    edx,edx
c001af03:	eb 3a                	jmp    c001af3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001af05:	80 fb 40             	cmp    bl,0x40
c001af08:	74 06                	je     c001af10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001af0a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af0e:	eb 20                	jmp    c001af30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001af10:	50                   	push   eax
c001af11:	50                   	push   eax
c001af12:	55                   	push   ebp
c001af13:	8d 44 24 24          	lea    eax,[esp+0x24]
c001af17:	50                   	push   eax
c001af18:	e8 a3 59 fe ff       	call   c00008c0 <strcmp>
c001af1d:	83 c4 10             	add    esp,0x10
c001af20:	85 c0                	test   eax,eax
c001af22:	75 dd                	jne    c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af24:	eb e4                	jmp    c001af0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001af26:	8d 50 01             	lea    edx,[eax+0x1]
c001af29:	80 f9 3d             	cmp    cl,0x3d
c001af2c:	74 1d                	je     c001af4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001af2e:	89 d0                	mov    eax,edx
c001af30:	8a 08                	mov    cl,BYTE PTR [eax]
c001af32:	84 c9                	test   cl,cl
c001af34:	75 f0                	jne    c001af26 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001af36:	eb 0f                	jmp    c001af47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af38:	8d 50 01             	lea    edx,[eax+0x1]
c001af3b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001af3f:	47                   	inc    edi
c001af40:	89 d0                	mov    eax,edx
c001af42:	e9 3b ff ff ff       	jmp    c001ae82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001af47:	31 c0                	xor    eax,eax
c001af49:	eb 33                	jmp    c001af7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af52:	50                   	push   eax
c001af53:	50                   	push   eax
c001af54:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af58:	50                   	push   eax
c001af59:	56                   	push   esi
c001af5a:	e8 61 59 fe ff       	call   c00008c0 <strcmp>
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	85 c0                	test   eax,eax
c001af64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af68:	75 97                	jne    c001af01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af6a:	51                   	push   ecx
c001af6b:	51                   	push   ecx
c001af6c:	52                   	push   edx
c001af6d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af74:	e8 bb 58 fe ff       	call   c0000834 <strcpy>
c001af79:	83 c4 10             	add    esp,0x10
c001af7c:	b0 01                	mov    al,0x1
c001af7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af84:	5b                   	pop    ebx
c001af85:	5e                   	pop    esi
c001af86:	5f                   	pop    edi
c001af87:	5d                   	pop    ebp
c001af88:	c3                   	ret    

c001af89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af89:	57                   	push   edi
c001af8a:	56                   	push   esi
c001af8b:	53                   	push   ebx
c001af8c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af92:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af99:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001afa0:	53                   	push   ebx
c001afa1:	e8 ee 57 fe ff       	call   c0000794 <strlen>
c001afa6:	89 34 24             	mov    DWORD PTR [esp],esi
c001afa9:	89 c7                	mov    edi,eax
c001afab:	e8 e4 57 fe ff       	call   c0000794 <strlen>
c001afb0:	83 c4 10             	add    esp,0x10
c001afb3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001afb7:	3d ff 00 00 00       	cmp    eax,0xff
c001afbc:	0f 87 d3 00 00 00    	ja     c001b095 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afc2:	57                   	push   edi
c001afc3:	57                   	push   edi
c001afc4:	56                   	push   esi
c001afc5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001afc9:	56                   	push   esi
c001afca:	e8 65 58 fe ff       	call   c0000834 <strcpy>
c001afcf:	58                   	pop    eax
c001afd0:	5a                   	pop    edx
c001afd1:	68 54 c3 02 c0       	push   0xc002c354
c001afd6:	56                   	push   esi
c001afd7:	e8 98 59 fe ff       	call   c0000974 <strcat>
c001afdc:	59                   	pop    ecx
c001afdd:	5f                   	pop    edi
c001afde:	53                   	push   ebx
c001afdf:	56                   	push   esi
c001afe0:	e8 8f 59 fe ff       	call   c0000974 <strcat>
c001afe5:	58                   	pop    eax
c001afe6:	5a                   	pop    edx
c001afe7:	68 40 be 02 c0       	push   0xc002be40
c001afec:	56                   	push   esi
c001afed:	e8 82 59 fe ff       	call   c0000974 <strcat>
c001aff2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aff9:	e8 45 48 ff ff       	call   c000f843 <malloc>
c001affe:	83 c4 0c             	add    esp,0xc
c001b001:	89 c3                	mov    ebx,eax
c001b003:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001b009:	56                   	push   esi
c001b00a:	50                   	push   eax
c001b00b:	e8 80 85 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	85 db                	test   ebx,ebx
c001b015:	74 7e                	je     c001b095 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b017:	51                   	push   ecx
c001b018:	51                   	push   ecx
c001b019:	6a 01                	push   0x1
c001b01b:	53                   	push   ebx
c001b01c:	e8 d3 85 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	85 c0                	test   eax,eax
c001b026:	74 08                	je     c001b030 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b02d:	53                   	push   ebx
c001b02e:	eb 5f                	jmp    c001b08f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b030:	52                   	push   edx
c001b031:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b035:	50                   	push   eax
c001b036:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b03a:	50                   	push   eax
c001b03b:	53                   	push   ebx
c001b03c:	e8 5f 88 ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c001b041:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	89 c1                	mov    ecx,eax
c001b04a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b04e:	74 31                	je     c001b081 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b050:	83 ec 0c             	sub    esp,0xc
c001b053:	50                   	push   eax
c001b054:	e8 ea 47 ff ff       	call   c000f843 <malloc>
c001b059:	89 c6                	mov    esi,eax
c001b05b:	58                   	pop    eax
c001b05c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b05e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b062:	52                   	push   edx
c001b063:	56                   	push   esi
c001b064:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b06c:	53                   	push   ebx
c001b06d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b070:	83 c4 20             	add    esp,0x20
c001b073:	85 c0                	test   eax,eax
c001b075:	75 0a                	jne    c001b081 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b07b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b07f:	74 18                	je     c001b099 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b081:	83 ec 0c             	sub    esp,0xc
c001b084:	53                   	push   ebx
c001b085:	e8 c8 85 ff ff       	call   c0013652 <File::close()>
c001b08a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b08c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b08f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b092:	83 c4 10             	add    esp,0x10
c001b095:	31 c0                	xor    eax,eax
c001b097:	eb 3b                	jmp    c001b0d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b099:	83 ec 0c             	sub    esp,0xc
c001b09c:	53                   	push   ebx
c001b09d:	e8 b0 85 ff ff       	call   c0013652 <File::close()>
c001b0a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b0aa:	83 c4 0c             	add    esp,0xc
c001b0ad:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b0b4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b0bb:	56                   	push   esi
c001b0bc:	e8 70 fd ff ff       	call   c001ae31 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b0c1:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b0c8:	e8 86 47 ff ff       	call   c000f853 <free>
c001b0cd:	83 c4 10             	add    esp,0x10
c001b0d0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b0d4:	81 c4 20 01 00 00    	add    esp,0x120
c001b0da:	5b                   	pop    ebx
c001b0db:	5e                   	pop    esi
c001b0dc:	5f                   	pop    edi
c001b0dd:	c3                   	ret    

c001b0de <Reg::getLine(char*, char*, char*)>:
c001b0de:	57                   	push   edi
c001b0df:	56                   	push   esi
c001b0e0:	53                   	push   ebx
c001b0e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0ed:	57                   	push   edi
c001b0ee:	56                   	push   esi
c001b0ef:	53                   	push   ebx
c001b0f0:	68 45 be 02 c0       	push   0xc002be45
c001b0f5:	e8 8f fe ff ff       	call   c001af89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	84 c0                	test   al,al
c001b0ff:	75 10                	jne    c001b111 <Reg::getLine(char*, char*, char*)+0x33>
c001b101:	57                   	push   edi
c001b102:	56                   	push   esi
c001b103:	53                   	push   ebx
c001b104:	68 6a be 02 c0       	push   0xc002be6a
c001b109:	e8 7b fe ff ff       	call   c001af89 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b10e:	83 c4 10             	add    esp,0x10
c001b111:	5b                   	pop    ebx
c001b112:	5e                   	pop    esi
c001b113:	5f                   	pop    edi
c001b114:	c3                   	ret    

c001b115 <Reg::readInt(char*, char*, int*)>:
c001b115:	55                   	push   ebp
c001b116:	57                   	push   edi
c001b117:	56                   	push   esi
c001b118:	53                   	push   ebx
c001b119:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b11f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b123:	57                   	push   edi
c001b124:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b12b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b132:	e8 a7 ff ff ff       	call   c001b0de <Reg::getLine(char*, char*, char*)>
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	84 c0                	test   al,al
c001b13c:	0f 84 b3 00 00 00    	je     c001b1f5 <Reg::readInt(char*, char*, int*)+0xe0>
c001b142:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b146:	80 fa 2b             	cmp    dl,0x2b
c001b149:	74 0c                	je     c001b157 <Reg::readInt(char*, char*, int*)+0x42>
c001b14b:	80 fa 2d             	cmp    dl,0x2d
c001b14e:	75 0e                	jne    c001b15e <Reg::readInt(char*, char*, int*)+0x49>
c001b150:	ba 01 00 00 00       	mov    edx,0x1
c001b155:	eb 0b                	jmp    c001b162 <Reg::readInt(char*, char*, int*)+0x4d>
c001b157:	ba 01 00 00 00       	mov    edx,0x1
c001b15c:	eb 02                	jmp    c001b160 <Reg::readInt(char*, char*, int*)+0x4b>
c001b15e:	31 d2                	xor    edx,edx
c001b160:	31 c0                	xor    eax,eax
c001b162:	be 0a 00 00 00       	mov    esi,0xa
c001b167:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b16c:	75 20                	jne    c001b18e <Reg::readInt(char*, char*, int*)+0x79>
c001b16e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b172:	80 f9 78             	cmp    cl,0x78
c001b175:	75 0a                	jne    c001b181 <Reg::readInt(char*, char*, int*)+0x6c>
c001b177:	83 c2 02             	add    edx,0x2
c001b17a:	be 10 00 00 00       	mov    esi,0x10
c001b17f:	eb 0d                	jmp    c001b18e <Reg::readInt(char*, char*, int*)+0x79>
c001b181:	80 f9 62             	cmp    cl,0x62
c001b184:	75 08                	jne    c001b18e <Reg::readInt(char*, char*, int*)+0x79>
c001b186:	83 c2 02             	add    edx,0x2
c001b189:	be 02 00 00 00       	mov    esi,0x2
c001b18e:	01 d7                	add    edi,edx
c001b190:	31 d2                	xor    edx,edx
c001b192:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b194:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b198:	80 fb 0d             	cmp    bl,0xd
c001b19b:	0f 94 c3             	sete   bl
c001b19e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b1a3:	0f 94 c1             	sete   cl
c001b1a6:	08 cb                	or     bl,cl
c001b1a8:	75 3a                	jne    c001b1e4 <Reg::readInt(char*, char*, int*)+0xcf>
c001b1aa:	0f af d6             	imul   edx,esi
c001b1ad:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b1b2:	83 fe 10             	cmp    esi,0x10
c001b1b5:	75 26                	jne    c001b1dd <Reg::readInt(char*, char*, int*)+0xc8>
c001b1b7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1bb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b1be:	89 e9                	mov    ecx,ebp
c001b1c0:	80 f9 05             	cmp    cl,0x5
c001b1c3:	77 06                	ja     c001b1cb <Reg::readInt(char*, char*, int*)+0xb6>
c001b1c5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b1c9:	eb 16                	jmp    c001b1e1 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1cb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1cf:	83 e9 61             	sub    ecx,0x61
c001b1d2:	80 f9 05             	cmp    cl,0x5
c001b1d5:	77 06                	ja     c001b1dd <Reg::readInt(char*, char*, int*)+0xc8>
c001b1d7:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b1db:	eb 04                	jmp    c001b1e1 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1dd:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b1e1:	47                   	inc    edi
c001b1e2:	eb ae                	jmp    c001b192 <Reg::readInt(char*, char*, int*)+0x7d>
c001b1e4:	84 c0                	test   al,al
c001b1e6:	74 02                	je     c001b1ea <Reg::readInt(char*, char*, int*)+0xd5>
c001b1e8:	f7 da                	neg    edx
c001b1ea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1f1:	89 10                	mov    DWORD PTR [eax],edx
c001b1f3:	88 d8                	mov    al,bl
c001b1f5:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1fb:	5b                   	pop    ebx
c001b1fc:	5e                   	pop    esi
c001b1fd:	5f                   	pop    edi
c001b1fe:	5d                   	pop    ebp
c001b1ff:	c3                   	ret    

c001b200 <Reg::readString(char*, char*, char*, int)>:
c001b200:	57                   	push   edi
c001b201:	56                   	push   esi
c001b202:	53                   	push   ebx
c001b203:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b209:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b210:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b214:	57                   	push   edi
c001b215:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b21c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b223:	e8 b6 fe ff ff       	call   c001b0de <Reg::getLine(char*, char*, char*)>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	89 c6                	mov    esi,eax
c001b22d:	84 c0                	test   al,al
c001b22f:	74 44                	je     c001b275 <Reg::readString(char*, char*, char*, int)+0x75>
c001b231:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b238:	31 c0                	xor    eax,eax
c001b23a:	4a                   	dec    edx
c001b23b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b23e:	84 c9                	test   cl,cl
c001b240:	74 0f                	je     c001b251 <Reg::readString(char*, char*, char*, int)+0x51>
c001b242:	39 c2                	cmp    edx,eax
c001b244:	7e 0b                	jle    c001b251 <Reg::readString(char*, char*, char*, int)+0x51>
c001b246:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b249:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b24e:	40                   	inc    eax
c001b24f:	eb ea                	jmp    c001b23b <Reg::readString(char*, char*, char*, int)+0x3b>
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	53                   	push   ebx
c001b255:	e8 3a 55 fe ff       	call   c0000794 <strlen>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b262:	75 11                	jne    c001b275 <Reg::readString(char*, char*, char*, int)+0x75>
c001b264:	83 ec 0c             	sub    esp,0xc
c001b267:	53                   	push   ebx
c001b268:	e8 27 55 fe ff       	call   c0000794 <strlen>
c001b26d:	83 c4 10             	add    esp,0x10
c001b270:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b275:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b27b:	89 f0                	mov    eax,esi
c001b27d:	5b                   	pop    ebx
c001b27e:	5e                   	pop    esi
c001b27f:	5f                   	pop    edi
c001b280:	c3                   	ret    

c001b281 <Reg::readBool(char*, char*, bool*)>:
c001b281:	83 ec 20             	sub    esp,0x20
c001b284:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b288:	50                   	push   eax
c001b289:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b28d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b291:	e8 7f fe ff ff       	call   c001b115 <Reg::readInt(char*, char*, int*)>
c001b296:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b29b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b29f:	0f 95 02             	setne  BYTE PTR [edx]
c001b2a2:	83 c4 2c             	add    esp,0x2c
c001b2a5:	c3                   	ret    

c001b2a6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b2a6:	53                   	push   ebx
c001b2a7:	83 ec 1c             	sub    esp,0x1c
c001b2aa:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b2ae:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b2b2:	50                   	push   eax
c001b2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2bb:	e8 c1 ff ff ff       	call   c001b281 <Reg::readBool(char*, char*, bool*)>
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	84 c0                	test   al,al
c001b2c5:	74 04                	je     c001b2cb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b2c7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b2cb:	88 d8                	mov    al,bl
c001b2cd:	83 c4 18             	add    esp,0x18
c001b2d0:	5b                   	pop    ebx
c001b2d1:	c3                   	ret    

c001b2d2 <Reg::readIntWithDefault(char*, char*, int)>:
c001b2d2:	53                   	push   ebx
c001b2d3:	83 ec 1c             	sub    esp,0x1c
c001b2d6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2da:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2de:	50                   	push   eax
c001b2df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2e7:	e8 29 fe ff ff       	call   c001b115 <Reg::readInt(char*, char*, int*)>
c001b2ec:	83 c4 10             	add    esp,0x10
c001b2ef:	84 c0                	test   al,al
c001b2f1:	74 04                	je     c001b2f7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2f7:	89 d8                	mov    eax,ebx
c001b2f9:	83 c4 18             	add    esp,0x18
c001b2fc:	5b                   	pop    ebx
c001b2fd:	c3                   	ret    

c001b2fe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2fe:	57                   	push   edi
c001b2ff:	56                   	push   esi
c001b300:	53                   	push   ebx
c001b301:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b305:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b309:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b30d:	56                   	push   esi
c001b30e:	53                   	push   ebx
c001b30f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b317:	e8 e4 fe ff ff       	call   c001b200 <Reg::readString(char*, char*, char*, int)>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	84 c0                	test   al,al
c001b321:	75 1b                	jne    c001b33e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b323:	50                   	push   eax
c001b324:	56                   	push   esi
c001b325:	4e                   	dec    esi
c001b326:	6a 00                	push   0x0
c001b328:	53                   	push   ebx
c001b329:	e8 4a 54 fe ff       	call   c0000778 <memset>
c001b32e:	83 c4 0c             	add    esp,0xc
c001b331:	56                   	push   esi
c001b332:	57                   	push   edi
c001b333:	53                   	push   ebx
c001b334:	89 fb                	mov    ebx,edi
c001b336:	e8 09 54 fe ff       	call   c0000744 <memcpy>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	89 d8                	mov    eax,ebx
c001b340:	5b                   	pop    ebx
c001b341:	5e                   	pop    esi
c001b342:	5f                   	pop    edi
c001b343:	c3                   	ret    

c001b344 <Sys::eject(regs*)>:
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	83 ca ff             	or     edx,0xffffffff
c001b34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b351:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b356:	83 e9 41             	sub    ecx,0x41
c001b359:	83 f9 19             	cmp    ecx,0x19
c001b35c:	77 18                	ja     c001b376 <Sys::eject(regs*)+0x32>
c001b35e:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c001b365:	85 c9                	test   ecx,ecx
c001b367:	74 0d                	je     c001b376 <Sys::eject(regs*)+0x32>
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	51                   	push   ecx
c001b36d:	e8 78 b4 ff ff       	call   c00167ea <LogicalDisk::eject()>
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	99                   	cdq    
c001b376:	83 c4 0c             	add    esp,0xc
c001b379:	c3                   	ret    

c001b37a <Sys::exit(regs*)>:
c001b37a:	83 ec 18             	sub    esp,0x18
c001b37d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b381:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b384:	e8 94 35 00 00       	call   c001e91d <terminateTask(int)>
c001b389:	83 c8 ff             	or     eax,0xffffffff
c001b38c:	83 c4 1c             	add    esp,0x1c
c001b38f:	89 c2                	mov    edx,eax
c001b391:	c3                   	ret    

c001b392 <Sys::getCwd(regs*)>:
c001b392:	83 ec 10             	sub    esp,0x10
c001b395:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b399:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b39c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b39f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3a7:	e8 e6 7f ff ff       	call   c0013392 <Fs::getcwd(Process*, char*, int)>
c001b3ac:	83 c4 1c             	add    esp,0x1c
c001b3af:	99                   	cdq    
c001b3b0:	c3                   	ret    

c001b3b1 <Sys::getPID(regs*)>:
c001b3b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3bb:	99                   	cdq    
c001b3bc:	c3                   	ret    

c001b3bd <Sys::getRAMData(regs*)>:
c001b3bd:	8b 0d b4 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e5b4
c001b3c3:	6b 05 b0 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e5b0,0x64
c001b3ca:	99                   	cdq    
c001b3cb:	f7 f9                	idiv   ecx
c001b3cd:	c1 e0 18             	shl    eax,0x18
c001b3d0:	09 c8                	or     eax,ecx
c001b3d2:	99                   	cdq    
c001b3d3:	c3                   	ret    

c001b3d4 <Sys::loadDLL(regs*)>:
c001b3d4:	56                   	push   esi
c001b3d5:	53                   	push   ebx
c001b3d6:	31 d2                	xor    edx,edx
c001b3d8:	51                   	push   ecx
c001b3d9:	b8 01 00 00 00       	mov    eax,0x1
c001b3de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3e2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b3e6:	0f 84 8c 00 00 00    	je     c001b478 <Sys::loadDLL(regs*)+0xa4>
c001b3ec:	83 ec 0c             	sub    esp,0xc
c001b3ef:	68 14 01 00 00       	push   0x114
c001b3f4:	e8 4a 44 ff ff       	call   c000f843 <malloc>
c001b3f9:	83 c4 0c             	add    esp,0xc
c001b3fc:	89 c3                	mov    ebx,eax
c001b3fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b403:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b406:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b409:	53                   	push   ebx
c001b40a:	e8 81 81 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	31 d2                	xor    edx,edx
c001b414:	b8 02 00 00 00       	mov    eax,0x2
c001b419:	85 db                	test   ebx,ebx
c001b41b:	74 5b                	je     c001b478 <Sys::loadDLL(regs*)+0xa4>
c001b41d:	83 ec 0c             	sub    esp,0xc
c001b420:	53                   	push   ebx
c001b421:	e8 3c 84 ff ff       	call   c0013862 <File::exists()>
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	84 c0                	test   al,al
c001b42b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b42d:	75 11                	jne    c001b440 <Sys::loadDLL(regs*)+0x6c>
c001b42f:	83 ec 0c             	sub    esp,0xc
c001b432:	53                   	push   ebx
c001b433:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	b8 03 00 00 00       	mov    eax,0x3
c001b43e:	eb 36                	jmp    c001b476 <Sys::loadDLL(regs*)+0xa2>
c001b440:	83 ec 0c             	sub    esp,0xc
c001b443:	53                   	push   ebx
c001b444:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b447:	58                   	pop    eax
c001b448:	5a                   	pop    edx
c001b449:	6a 00                	push   0x0
c001b44b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b44e:	e8 c5 23 00 00       	call   c001d818 <Thr::loadDLL(char const*, bool)>
c001b453:	83 c4 10             	add    esp,0x10
c001b456:	89 c1                	mov    ecx,eax
c001b458:	31 d2                	xor    edx,edx
c001b45a:	b8 04 00 00 00       	mov    eax,0x4
c001b45f:	85 c9                	test   ecx,ecx
c001b461:	74 15                	je     c001b478 <Sys::loadDLL(regs*)+0xa4>
c001b463:	53                   	push   ebx
c001b464:	53                   	push   ebx
c001b465:	ff 35 68 e5 02 c0    	push   DWORD PTR ds:0xc002e568
c001b46b:	51                   	push   ecx
c001b46c:	e8 f6 25 00 00       	call   c001da67 <Thr::executeDLL(unsigned long, void*)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	31 c0                	xor    eax,eax
c001b476:	31 d2                	xor    edx,edx
c001b478:	59                   	pop    ecx
c001b479:	5b                   	pop    ebx
c001b47a:	5e                   	pop    esi
c001b47b:	c3                   	ret    

c001b47c <Sys::read(regs*)>:
c001b47c:	57                   	push   edi
c001b47d:	56                   	push   esi
c001b47e:	53                   	push   ebx
c001b47f:	83 ec 10             	sub    esp,0x10
c001b482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b486:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b489:	83 f8 02             	cmp    eax,0x2
c001b48c:	77 10                	ja     c001b49e <Sys::read(regs*)+0x22>
c001b48e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b493:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b496:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b49c:	eb 0e                	jmp    c001b4ac <Sys::read(regs*)+0x30>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	50                   	push   eax
c001b4a2:	e8 a8 65 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	89 c1                	mov    ecx,eax
c001b4ac:	83 c8 ff             	or     eax,0xffffffff
c001b4af:	85 c9                	test   ecx,ecx
c001b4b1:	89 c2                	mov    edx,eax
c001b4b3:	74 28                	je     c001b4dd <Sys::read(regs*)+0x61>
c001b4b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4bd:	31 ff                	xor    edi,edi
c001b4bf:	83 ec 0c             	sub    esp,0xc
c001b4c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4c8:	52                   	push   edx
c001b4c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4cc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4cf:	57                   	push   edi
c001b4d0:	56                   	push   esi
c001b4d1:	51                   	push   ecx
c001b4d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4d9:	83 c4 20             	add    esp,0x20
c001b4dc:	99                   	cdq    
c001b4dd:	83 c4 10             	add    esp,0x10
c001b4e0:	5b                   	pop    ebx
c001b4e1:	5e                   	pop    esi
c001b4e2:	5f                   	pop    edi
c001b4e3:	c3                   	ret    

c001b4e4 <Sys::sbrk(regs*)>:
c001b4e4:	56                   	push   esi
c001b4e5:	53                   	push   ebx
c001b4e6:	50                   	push   eax
c001b4e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f3:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4f6:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4fc:	85 db                	test   ebx,ebx
c001b4fe:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b501:	74 02                	je     c001b505 <Sys::sbrk(regs*)+0x21>
c001b503:	79 06                	jns    c001b50b <Sys::sbrk(regs*)+0x27>
c001b505:	89 f0                	mov    eax,esi
c001b507:	31 d2                	xor    edx,edx
c001b509:	eb 2a                	jmp    c001b535 <Sys::sbrk(regs*)+0x51>
c001b50b:	83 c8 ff             	or     eax,0xffffffff
c001b50e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b514:	89 c2                	mov    edx,eax
c001b516:	77 1d                	ja     c001b535 <Sys::sbrk(regs*)+0x51>
c001b518:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b51e:	50                   	push   eax
c001b51f:	c1 ea 0c             	shr    edx,0xc
c001b522:	68 07 0c 00 00       	push   0xc07
c001b527:	52                   	push   edx
c001b528:	51                   	push   ecx
c001b529:	e8 4e 6f ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001b52e:	89 f0                	mov    eax,esi
c001b530:	31 d2                	xor    edx,edx
c001b532:	83 c4 10             	add    esp,0x10
c001b535:	59                   	pop    ecx
c001b536:	5b                   	pop    ebx
c001b537:	5e                   	pop    esi
c001b538:	c3                   	ret    

c001b539 <Sys::setCwd(regs*)>:
c001b539:	83 ec 14             	sub    esp,0x14
c001b53c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b540:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b548:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b54b:	e8 b1 83 ff ff       	call   c0013901 <Fs::setcwd(Process*, char*)>
c001b550:	83 c4 1c             	add    esp,0x1c
c001b553:	99                   	cdq    
c001b554:	c3                   	ret    

c001b555 <Sys::setTime(regs*)>:
c001b555:	55                   	push   ebp
c001b556:	31 d2                	xor    edx,edx
c001b558:	57                   	push   edi
c001b559:	bf 18 00 00 00       	mov    edi,0x18
c001b55e:	56                   	push   esi
c001b55f:	53                   	push   ebx
c001b560:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b565:	83 ec 30             	sub    esp,0x30
c001b568:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b56c:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b56f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b572:	f7 f3                	div    ebx
c001b574:	89 d6                	mov    esi,edx
c001b576:	31 d2                	xor    edx,edx
c001b578:	f7 f3                	div    ebx
c001b57a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b57d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b581:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b586:	31 d2                	xor    edx,edx
c001b588:	f7 f3                	div    ebx
c001b58a:	31 d2                	xor    edx,edx
c001b58c:	bb 0c 00 00 00       	mov    ebx,0xc
c001b591:	f7 f7                	div    edi
c001b593:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b596:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b59a:	0f b7 cd             	movzx  ecx,bp
c001b59d:	56                   	push   esi
c001b59e:	89 c7                	mov    edi,eax
c001b5a0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b5a4:	c1 e6 10             	shl    esi,0x10
c001b5a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5ab:	83 e7 1f             	and    edi,0x1f
c001b5ae:	51                   	push   ecx
c001b5af:	47                   	inc    edi
c001b5b0:	c1 e8 05             	shr    eax,0x5
c001b5b3:	31 d2                	xor    edx,edx
c001b5b5:	f7 f3                	div    ebx
c001b5b7:	31 db                	xor    ebx,ebx
c001b5b9:	52                   	push   edx
c001b5ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5be:	57                   	push   edi
c001b5bf:	68 85 be 02 c0       	push   0xc002be85
c001b5c4:	e8 6f 7a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001b5c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5cd:	89 f8                	mov    eax,edi
c001b5cf:	31 c9                	xor    ecx,ecx
c001b5d1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5d5:	88 c1                	mov    cl,al
c001b5d7:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5dd:	88 d5                	mov    ch,dl
c001b5df:	c1 e0 10             	shl    eax,0x10
c001b5e2:	0f b7 d1             	movzx  edx,cx
c001b5e5:	09 c2                	or     edx,eax
c001b5e7:	89 d8                	mov    eax,ebx
c001b5e9:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5ee:	09 f0                	or     eax,esi
c001b5f0:	89 c3                	mov    ebx,eax
c001b5f2:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5f6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5fa:	83 c4 18             	add    esp,0x18
c001b5fd:	53                   	push   ebx
c001b5fe:	52                   	push   edx
c001b5ff:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b603:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b607:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b60b:	e8 0b 8a ff ff       	call   c001401b <datetimeToSeconds(datetime_t)>
c001b610:	83 c4 0c             	add    esp,0xc
c001b613:	52                   	push   edx
c001b614:	50                   	push   eax
c001b615:	56                   	push   esi
c001b616:	e8 87 8b ff ff       	call   c00141a2 <secondsToDatetime(unsigned long long)>
c001b61b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b61f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b623:	51                   	push   ecx
c001b624:	89 d6                	mov    esi,edx
c001b626:	51                   	push   ecx
c001b627:	c1 ee 10             	shr    esi,0x10
c001b62a:	89 f3                	mov    ebx,esi
c001b62c:	0f b6 f3             	movzx  esi,bl
c001b62f:	56                   	push   esi
c001b630:	0f b6 f6             	movzx  esi,dh
c001b633:	0f b6 d2             	movzx  edx,dl
c001b636:	56                   	push   esi
c001b637:	52                   	push   edx
c001b638:	89 c2                	mov    edx,eax
c001b63a:	c1 ea 10             	shr    edx,0x10
c001b63d:	52                   	push   edx
c001b63e:	0f b6 d4             	movzx  edx,ah
c001b641:	0f b6 c0             	movzx  eax,al
c001b644:	52                   	push   edx
c001b645:	50                   	push   eax
c001b646:	68 a1 be 02 c0       	push   0xc002bea1
c001b64b:	e8 e8 79 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001b650:	83 c4 2c             	add    esp,0x2c
c001b653:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b658:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b65c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b660:	53                   	push   ebx
c001b661:	51                   	push   ecx
c001b662:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b668:	e8 d5 8a ff ff       	call   c0014142 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b66d:	83 f0 01             	xor    eax,0x1
c001b670:	31 d2                	xor    edx,edx
c001b672:	0f b6 c0             	movzx  eax,al
c001b675:	83 c4 3c             	add    esp,0x3c
c001b678:	5b                   	pop    ebx
c001b679:	5e                   	pop    esi
c001b67a:	5f                   	pop    edi
c001b67b:	5d                   	pop    ebp
c001b67c:	c3                   	ret    

c001b67d <Sys::timezone(regs*)>:
c001b67d:	53                   	push   ebx
c001b67e:	83 ec 08             	sub    esp,0x8
c001b681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b685:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b689:	75 17                	jne    c001b6a2 <Sys::timezone(regs*)+0x25>
c001b68b:	83 ec 0c             	sub    esp,0xc
c001b68e:	68 bd be 02 c0       	push   0xc002bebd
c001b693:	e8 a0 79 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001b698:	83 c8 ff             	or     eax,0xffffffff
c001b69b:	83 c4 10             	add    esp,0x10
c001b69e:	89 c2                	mov    edx,eax
c001b6a0:	eb 20                	jmp    c001b6c2 <Sys::timezone(regs*)+0x45>
c001b6a2:	83 ec 0c             	sub    esp,0xc
c001b6a5:	68 f5 be 02 c0       	push   0xc002bef5
c001b6aa:	e8 89 79 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001b6af:	58                   	pop    eax
c001b6b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b6b3:	e8 ec 87 ff ff       	call   c0013ea4 <User::loadClockSettings(int)>
c001b6b8:	83 c4 10             	add    esp,0x10
c001b6bb:	b8 01 00 00 00       	mov    eax,0x1
c001b6c0:	31 d2                	xor    edx,edx
c001b6c2:	83 c4 08             	add    esp,0x8
c001b6c5:	5b                   	pop    ebx
c001b6c6:	c3                   	ret    

c001b6c7 <Sys::write(regs*)>:
c001b6c7:	57                   	push   edi
c001b6c8:	56                   	push   esi
c001b6c9:	53                   	push   ebx
c001b6ca:	83 ec 10             	sub    esp,0x10
c001b6cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6d4:	83 f8 02             	cmp    eax,0x2
c001b6d7:	77 10                	ja     c001b6e9 <Sys::write(regs*)+0x22>
c001b6d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6e7:	eb 0e                	jmp    c001b6f7 <Sys::write(regs*)+0x30>
c001b6e9:	83 ec 0c             	sub    esp,0xc
c001b6ec:	50                   	push   eax
c001b6ed:	e8 5d 63 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b6f2:	83 c4 10             	add    esp,0x10
c001b6f5:	89 c1                	mov    ecx,eax
c001b6f7:	83 c8 ff             	or     eax,0xffffffff
c001b6fa:	85 c9                	test   ecx,ecx
c001b6fc:	89 c2                	mov    edx,eax
c001b6fe:	74 28                	je     c001b728 <Sys::write(regs*)+0x61>
c001b700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b708:	31 ff                	xor    edi,edi
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b70f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b713:	52                   	push   edx
c001b714:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b717:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b71a:	57                   	push   edi
c001b71b:	56                   	push   esi
c001b71c:	51                   	push   ecx
c001b71d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b724:	83 c4 20             	add    esp,0x20
c001b727:	99                   	cdq    
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	5b                   	pop    ebx
c001b72c:	5e                   	pop    esi
c001b72d:	5f                   	pop    edi
c001b72e:	c3                   	ret    

c001b72f <Sys::wsbe(regs*)>:
c001b72f:	57                   	push   edi
c001b730:	b9 0b 00 00 00       	mov    ecx,0xb
c001b735:	56                   	push   esi
c001b736:	be 34 bf 02 c0       	mov    esi,0xc002bf34
c001b73b:	53                   	push   ebx
c001b73c:	83 ec 30             	sub    esp,0x30
c001b73f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b743:	fc                   	cld    
c001b744:	83 ec 0c             	sub    esp,0xc
c001b747:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b749:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b74d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b752:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b755:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b75b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b75d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b760:	57                   	push   edi
c001b761:	e8 2e 50 fe ff       	call   c0000794 <strlen>
c001b766:	5a                   	pop    edx
c001b767:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b76b:	52                   	push   edx
c001b76c:	31 d2                	xor    edx,edx
c001b76e:	57                   	push   edi
c001b76f:	52                   	push   edx
c001b770:	50                   	push   eax
c001b771:	56                   	push   esi
c001b772:	ff d3                	call   ebx
c001b774:	83 c4 14             	add    esp,0x14
c001b777:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b77b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b77e:	e8 9a 31 00 00       	call   c001e91d <terminateTask(int)>
c001b783:	83 c4 40             	add    esp,0x40
c001b786:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b78b:	5b                   	pop    ebx
c001b78c:	31 d2                	xor    edx,edx
c001b78e:	5e                   	pop    esi
c001b78f:	5f                   	pop    edi
c001b790:	c3                   	ret    

c001b791 <Sys::yield(regs*)>:
c001b791:	57                   	push   edi
c001b792:	56                   	push   esi
c001b793:	53                   	push   ebx
c001b794:	e8 41 27 00 00       	call   c001deda <lockScheduler()>
c001b799:	e8 78 2a 00 00       	call   c001e216 <schedule()>
c001b79e:	e8 39 27 00 00       	call   c001dedc <unlockScheduler()>
c001b7a3:	8b 35 10 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec10
c001b7a9:	8b 3d 14 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec14
c001b7af:	89 f0                	mov    eax,esi
c001b7b1:	89 fb                	mov    ebx,edi
c001b7b3:	89 f1                	mov    ecx,esi
c001b7b5:	c1 e0 07             	shl    eax,0x7
c001b7b8:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7bc:	25 80 30 0f 00       	and    eax,0xf3080
c001b7c1:	c1 eb 17             	shr    ebx,0x17
c001b7c4:	31 c8                	xor    eax,ecx
c001b7c6:	89 da                	mov    edx,ebx
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	5f                   	pop    edi
c001b7cb:	c3                   	ret    

c001b7cc <sysCallSeekDir(regs*)>:
c001b7cc:	31 c0                	xor    eax,eax
c001b7ce:	31 d2                	xor    edx,edx
c001b7d0:	c3                   	ret    

c001b7d1 <sysCallTellDir(regs*)>:
c001b7d1:	31 c0                	xor    eax,eax
c001b7d3:	31 d2                	xor    edx,edx
c001b7d5:	c3                   	ret    

c001b7d6 <sysCallVerify(regs*)>:
c001b7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7da:	31 d2                	xor    edx,edx
c001b7dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7df:	c3                   	ret    

c001b7e0 <sysFormatDisk(regs*)>:
c001b7e0:	56                   	push   esi
c001b7e1:	53                   	push   ebx
c001b7e2:	53                   	push   ebx
c001b7e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7e7:	8b 1d f8 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6f8
c001b7ed:	eb 25                	jmp    c001b814 <sysFormatDisk(regs*)+0x34>
c001b7ef:	83 ec 0c             	sub    esp,0xc
c001b7f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7f7:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7fa:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7fd:	50                   	push   eax
c001b7fe:	ff 34 85 a0 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd1460]
c001b805:	53                   	push   ebx
c001b806:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b809:	83 c4 20             	add    esp,0x20
c001b80c:	83 f8 08             	cmp    eax,0x8
c001b80f:	75 12                	jne    c001b823 <sysFormatDisk(regs*)+0x43>
c001b811:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b814:	85 db                	test   ebx,ebx
c001b816:	75 d7                	jne    c001b7ef <sysFormatDisk(regs*)+0xf>
c001b818:	59                   	pop    ecx
c001b819:	b8 03 00 00 00       	mov    eax,0x3
c001b81e:	31 d2                	xor    edx,edx
c001b820:	5b                   	pop    ebx
c001b821:	5e                   	pop    esi
c001b822:	c3                   	ret    
c001b823:	85 c0                	test   eax,eax
c001b825:	74 1b                	je     c001b842 <sysFormatDisk(regs*)+0x62>
c001b827:	83 f8 09             	cmp    eax,0x9
c001b82a:	74 0b                	je     c001b837 <sysFormatDisk(regs*)+0x57>
c001b82c:	59                   	pop    ecx
c001b82d:	b8 02 00 00 00       	mov    eax,0x2
c001b832:	31 d2                	xor    edx,edx
c001b834:	5b                   	pop    ebx
c001b835:	5e                   	pop    esi
c001b836:	c3                   	ret    
c001b837:	59                   	pop    ecx
c001b838:	b8 01 00 00 00       	mov    eax,0x1
c001b83d:	31 d2                	xor    edx,edx
c001b83f:	5b                   	pop    ebx
c001b840:	5e                   	pop    esi
c001b841:	c3                   	ret    
c001b842:	59                   	pop    ecx
c001b843:	31 c0                	xor    eax,eax
c001b845:	31 d2                	xor    edx,edx
c001b847:	5b                   	pop    ebx
c001b848:	5e                   	pop    esi
c001b849:	c3                   	ret    

c001b84a <sysSetDiskVolumeLabel(regs*)>:
c001b84a:	56                   	push   esi
c001b84b:	53                   	push   ebx
c001b84c:	53                   	push   ebx
c001b84d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b851:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b854:	83 f8 19             	cmp    eax,0x19
c001b857:	77 29                	ja     c001b882 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b859:	8b 0c 85 a0 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1460]
c001b860:	85 c9                	test   ecx,ecx
c001b862:	74 1e                	je     c001b882 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b864:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b867:	85 d2                	test   edx,edx
c001b869:	74 17                	je     c001b882 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b86b:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b871:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b873:	52                   	push   edx
c001b874:	50                   	push   eax
c001b875:	51                   	push   ecx
c001b876:	53                   	push   ebx
c001b877:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b87a:	83 c4 10             	add    esp,0x10
c001b87d:	99                   	cdq    
c001b87e:	59                   	pop    ecx
c001b87f:	5b                   	pop    ebx
c001b880:	5e                   	pop    esi
c001b881:	c3                   	ret    
c001b882:	59                   	pop    ecx
c001b883:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b888:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88d:	5b                   	pop    ebx
c001b88e:	5e                   	pop    esi
c001b88f:	c3                   	ret    

c001b890 <sysGetDiskVolumeLabel(regs*)>:
c001b890:	57                   	push   edi
c001b891:	56                   	push   esi
c001b892:	53                   	push   ebx
c001b893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b897:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b89a:	83 fa 19             	cmp    edx,0x19
c001b89d:	77 34                	ja     c001b8d3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b89f:	8b 0c 95 a0 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1460]
c001b8a6:	85 c9                	test   ecx,ecx
c001b8a8:	74 29                	je     c001b8d3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8aa:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b8ad:	85 db                	test   ebx,ebx
c001b8af:	74 22                	je     c001b8d3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8b1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b8b4:	85 c0                	test   eax,eax
c001b8b6:	74 1b                	je     c001b8d3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8b8:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8c3:	50                   	push   eax
c001b8c4:	53                   	push   ebx
c001b8c5:	52                   	push   edx
c001b8c6:	51                   	push   ecx
c001b8c7:	56                   	push   esi
c001b8c8:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8cb:	83 c4 20             	add    esp,0x20
c001b8ce:	99                   	cdq    
c001b8cf:	5b                   	pop    ebx
c001b8d0:	5e                   	pop    esi
c001b8d1:	5f                   	pop    edi
c001b8d2:	c3                   	ret    
c001b8d3:	5b                   	pop    ebx
c001b8d4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8de:	5e                   	pop    esi
c001b8df:	5f                   	pop    edi
c001b8e0:	c3                   	ret    

c001b8e1 <sysShutdown(regs*)>:
c001b8e1:	83 ec 0c             	sub    esp,0xc
c001b8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8eb:	85 c0                	test   eax,eax
c001b8ed:	74 18                	je     c001b907 <sysShutdown(regs*)+0x26>
c001b8ef:	83 f8 01             	cmp    eax,0x1
c001b8f2:	74 38                	je     c001b92c <sysShutdown(regs*)+0x4b>
c001b8f4:	83 f8 02             	cmp    eax,0x2
c001b8f7:	74 24                	je     c001b91d <sysShutdown(regs*)+0x3c>
c001b8f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b903:	83 c4 0c             	add    esp,0xc
c001b906:	c3                   	ret    
c001b907:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b90c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90e:	6a 00                	push   0x0
c001b910:	6a 00                	push   0x0
c001b912:	6a 00                	push   0x0
c001b914:	50                   	push   eax
c001b915:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	eb dc                	jmp    c001b8f9 <sysShutdown(regs*)+0x18>
c001b91d:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001b922:	8b 10                	mov    edx,DWORD PTR [eax]
c001b924:	6a 00                	push   0x0
c001b926:	6a 00                	push   0x0
c001b928:	6a 01                	push   0x1
c001b92a:	eb e8                	jmp    c001b914 <sysShutdown(regs*)+0x33>
c001b92c:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c001b931:	85 c0                	test   eax,eax
c001b933:	74 02                	je     c001b937 <sysShutdown(regs*)+0x56>
c001b935:	ff d0                	call   eax
c001b937:	31 c0                	xor    eax,eax
c001b939:	31 d2                	xor    edx,edx
c001b93b:	83 c4 0c             	add    esp,0xc
c001b93e:	c3                   	ret    

c001b93f <sysCallRealpath(regs*)>:
c001b93f:	83 ec 0c             	sub    esp,0xc
c001b942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b946:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b949:	85 d2                	test   edx,edx
c001b94b:	74 07                	je     c001b954 <sysCallRealpath(regs*)+0x15>
c001b94d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b950:	85 c0                	test   eax,eax
c001b952:	75 0b                	jne    c001b95f <sysCallRealpath(regs*)+0x20>
c001b954:	b8 01 00 00 00       	mov    eax,0x1
c001b959:	31 d2                	xor    edx,edx
c001b95b:	83 c4 0c             	add    esp,0xc
c001b95e:	c3                   	ret    
c001b95f:	51                   	push   ecx
c001b960:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b966:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b969:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b96f:	51                   	push   ecx
c001b970:	52                   	push   edx
c001b971:	50                   	push   eax
c001b972:	e8 6f 7a ff ff       	call   c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	31 c0                	xor    eax,eax
c001b97c:	31 d2                	xor    edx,edx
c001b97e:	83 c4 0c             	add    esp,0xc
c001b981:	c3                   	ret    

c001b982 <sysCallGetArgc(regs*)>:
c001b982:	83 ec 14             	sub    esp,0x14
c001b985:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98d:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b993:	68 60 bf 02 c0       	push   0xc002bf60
c001b998:	e8 9b 76 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001b99d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a5:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b9ab:	83 c4 1c             	add    esp,0x1c
c001b9ae:	99                   	cdq    
c001b9af:	c3                   	ret    

c001b9b0 <sysCallReadDir(regs*)>:
c001b9b0:	53                   	push   ebx
c001b9b1:	83 ec 18             	sub    esp,0x18
c001b9b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9b8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9bb:	83 f8 02             	cmp    eax,0x2
c001b9be:	76 53                	jbe    c001ba13 <sysCallReadDir(regs*)+0x63>
c001b9c0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9c3:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9c9:	77 4f                	ja     c001ba1a <sysCallReadDir(regs*)+0x6a>
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	50                   	push   eax
c001b9cf:	e8 7b 60 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b9d4:	83 c4 10             	add    esp,0x10
c001b9d7:	85 c0                	test   eax,eax
c001b9d9:	74 50                	je     c001ba2b <sysCallReadDir(regs*)+0x7b>
c001b9db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9e3:	83 ec 0c             	sub    esp,0xc
c001b9e6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9e8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9ec:	51                   	push   ecx
c001b9ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9f0:	6a 00                	push   0x0
c001b9f2:	68 10 01 00 00       	push   0x110
c001b9f7:	50                   	push   eax
c001b9f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9fb:	83 c4 20             	add    esp,0x20
c001b9fe:	85 c0                	test   eax,eax
c001ba00:	74 38                	je     c001ba3a <sysCallReadDir(regs*)+0x8a>
c001ba02:	83 f8 07             	cmp    eax,0x7
c001ba05:	74 0c                	je     c001ba13 <sysCallReadDir(regs*)+0x63>
c001ba07:	b8 02 00 00 00       	mov    eax,0x2
c001ba0c:	31 d2                	xor    edx,edx
c001ba0e:	83 c4 18             	add    esp,0x18
c001ba11:	5b                   	pop    ebx
c001ba12:	c3                   	ret    
c001ba13:	b8 01 00 00 00       	mov    eax,0x1
c001ba18:	eb f2                	jmp    c001ba0c <sysCallReadDir(regs*)+0x5c>
c001ba1a:	83 ec 08             	sub    esp,0x8
c001ba1d:	52                   	push   edx
c001ba1e:	68 78 c0 02 c0       	push   0xc002c078
c001ba23:	e8 10 76 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001ba28:	83 c4 10             	add    esp,0x10
c001ba2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba30:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba35:	83 c4 18             	add    esp,0x18
c001ba38:	5b                   	pop    ebx
c001ba39:	c3                   	ret    
c001ba3a:	31 c0                	xor    eax,eax
c001ba3c:	eb ce                	jmp    c001ba0c <sysCallReadDir(regs*)+0x5c>

c001ba3e <sysCallIsATTY(regs*)>:
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba48:	83 f8 02             	cmp    eax,0x2
c001ba4b:	76 07                	jbe    c001ba54 <sysCallIsATTY(regs*)+0x16>
c001ba4d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba52:	75 26                	jne    c001ba7a <sysCallIsATTY(regs*)+0x3c>
c001ba54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba5c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba62:	85 c0                	test   eax,eax
c001ba64:	74 24                	je     c001ba8a <sysCallIsATTY(regs*)+0x4c>
c001ba66:	83 ec 0c             	sub    esp,0xc
c001ba69:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba6b:	50                   	push   eax
c001ba6c:	ff 12                	call   DWORD PTR [edx]
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	0f b6 c0             	movzx  eax,al
c001ba73:	83 c4 10             	add    esp,0x10
c001ba76:	83 c4 0c             	add    esp,0xc
c001ba79:	c3                   	ret    
c001ba7a:	83 ec 0c             	sub    esp,0xc
c001ba7d:	50                   	push   eax
c001ba7e:	e8 cc 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	85 c0                	test   eax,eax
c001ba88:	75 dc                	jne    c001ba66 <sysCallIsATTY(regs*)+0x28>
c001ba8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba94:	83 c4 0c             	add    esp,0xc
c001ba97:	c3                   	ret    

c001ba98 <sysCallSeek(regs*)>:
c001ba98:	53                   	push   ebx
c001ba99:	83 ec 08             	sub    esp,0x8
c001ba9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baa3:	83 f8 02             	cmp    eax,0x2
c001baa6:	76 4a                	jbe    c001baf2 <sysCallSeek(regs*)+0x5a>
c001baa8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001baad:	77 32                	ja     c001bae1 <sysCallSeek(regs*)+0x49>
c001baaf:	83 ec 0c             	sub    esp,0xc
c001bab2:	50                   	push   eax
c001bab3:	e8 97 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bab8:	83 c4 0c             	add    esp,0xc
c001babb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001babe:	31 db                	xor    ebx,ebx
c001bac0:	53                   	push   ebx
c001bac1:	51                   	push   ecx
c001bac2:	50                   	push   eax
c001bac3:	e8 ea 7b ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001bac8:	83 c4 10             	add    esp,0x10
c001bacb:	85 c0                	test   eax,eax
c001bacd:	0f 95 c0             	setne  al
c001bad0:	31 d2                	xor    edx,edx
c001bad2:	0f b6 c0             	movzx  eax,al
c001bad5:	f7 d8                	neg    eax
c001bad7:	83 d2 00             	adc    edx,0x0
c001bada:	83 c4 08             	add    esp,0x8
c001badd:	f7 da                	neg    edx
c001badf:	5b                   	pop    ebx
c001bae0:	c3                   	ret    
c001bae1:	83 ec 08             	sub    esp,0x8
c001bae4:	50                   	push   eax
c001bae5:	68 6b bf 02 c0       	push   0xc002bf6b
c001baea:	e8 49 75 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001baef:	83 c4 10             	add    esp,0x10
c001baf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baf7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bafc:	83 c4 08             	add    esp,0x8
c001baff:	5b                   	pop    ebx
c001bb00:	c3                   	ret    

c001bb01 <sysCallTell(regs*)>:
c001bb01:	53                   	push   ebx
c001bb02:	83 ec 08             	sub    esp,0x8
c001bb05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb09:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb0c:	83 f8 02             	cmp    eax,0x2
c001bb0f:	76 5e                	jbe    c001bb6f <sysCallTell(regs*)+0x6e>
c001bb11:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb16:	77 2d                	ja     c001bb45 <sysCallTell(regs*)+0x44>
c001bb18:	83 ec 0c             	sub    esp,0xc
c001bb1b:	50                   	push   eax
c001bb1c:	e8 2e 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bb21:	5a                   	pop    edx
c001bb22:	59                   	pop    ecx
c001bb23:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb26:	50                   	push   eax
c001bb27:	e8 dc 7b ff ff       	call   c0013708 <File::tell(unsigned long long*)>
c001bb2c:	83 c4 10             	add    esp,0x10
c001bb2f:	85 c0                	test   eax,eax
c001bb31:	0f 95 c0             	setne  al
c001bb34:	31 d2                	xor    edx,edx
c001bb36:	0f b6 c0             	movzx  eax,al
c001bb39:	f7 d8                	neg    eax
c001bb3b:	83 d2 00             	adc    edx,0x0
c001bb3e:	83 c4 08             	add    esp,0x8
c001bb41:	f7 da                	neg    edx
c001bb43:	5b                   	pop    ebx
c001bb44:	c3                   	ret    
c001bb45:	83 ec 08             	sub    esp,0x8
c001bb48:	50                   	push   eax
c001bb49:	68 85 bf 02 c0       	push   0xc002bf85
c001bb4e:	e8 e5 74 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001bb53:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb56:	83 c4 10             	add    esp,0x10
c001bb59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb66:	31 d2                	xor    edx,edx
c001bb68:	31 c0                	xor    eax,eax
c001bb6a:	83 c4 08             	add    esp,0x8
c001bb6d:	5b                   	pop    ebx
c001bb6e:	c3                   	ret    
c001bb6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb74:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb79:	83 c4 08             	add    esp,0x8
c001bb7c:	5b                   	pop    ebx
c001bb7d:	c3                   	ret    

c001bb7e <sysCallSize(regs*)>:
c001bb7e:	53                   	push   ebx
c001bb7f:	83 ec 18             	sub    esp,0x18
c001bb82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb86:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb89:	83 f8 02             	cmp    eax,0x2
c001bb8c:	76 64                	jbe    c001bbf2 <sysCallSize(regs*)+0x74>
c001bb8e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb93:	77 33                	ja     c001bbc8 <sysCallSize(regs*)+0x4a>
c001bb95:	83 ec 0c             	sub    esp,0xc
c001bb98:	50                   	push   eax
c001bb99:	e8 b1 5e ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bb9e:	83 c4 0c             	add    esp,0xc
c001bba1:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bba5:	52                   	push   edx
c001bba6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bba9:	50                   	push   eax
c001bbaa:	e8 f1 7c ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	85 c0                	test   eax,eax
c001bbb4:	0f 95 c0             	setne  al
c001bbb7:	31 d2                	xor    edx,edx
c001bbb9:	0f b6 c0             	movzx  eax,al
c001bbbc:	f7 d8                	neg    eax
c001bbbe:	83 d2 00             	adc    edx,0x0
c001bbc1:	83 c4 18             	add    esp,0x18
c001bbc4:	f7 da                	neg    edx
c001bbc6:	5b                   	pop    ebx
c001bbc7:	c3                   	ret    
c001bbc8:	83 ec 08             	sub    esp,0x8
c001bbcb:	50                   	push   eax
c001bbcc:	68 9f bf 02 c0       	push   0xc002bf9f
c001bbd1:	e8 62 74 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001bbd6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbe2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbe9:	31 d2                	xor    edx,edx
c001bbeb:	31 c0                	xor    eax,eax
c001bbed:	83 c4 18             	add    esp,0x18
c001bbf0:	5b                   	pop    ebx
c001bbf1:	c3                   	ret    
c001bbf2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbf7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbfc:	83 c4 18             	add    esp,0x18
c001bbff:	5b                   	pop    ebx
c001bc00:	c3                   	ret    

c001bc01 <sysCallSizeFromFilename(regs*)>:
c001bc01:	57                   	push   edi
c001bc02:	56                   	push   esi
c001bc03:	53                   	push   ebx
c001bc04:	83 ec 20             	sub    esp,0x20
c001bc07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc0b:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bc0e:	83 fb 02             	cmp    ebx,0x2
c001bc11:	0f 86 99 00 00 00    	jbe    c001bcb0 <sysCallSizeFromFilename(regs*)+0xaf>
c001bc17:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc1d:	77 65                	ja     c001bc84 <sysCallSizeFromFilename(regs*)+0x83>
c001bc1f:	83 ec 0c             	sub    esp,0xc
c001bc22:	68 14 01 00 00       	push   0x114
c001bc27:	e8 17 3c ff ff       	call   c000f843 <malloc>
c001bc2c:	83 c4 0c             	add    esp,0xc
c001bc2f:	89 c6                	mov    esi,eax
c001bc31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc39:	53                   	push   ebx
c001bc3a:	56                   	push   esi
c001bc3b:	e8 50 79 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001bc40:	83 c4 0c             	add    esp,0xc
c001bc43:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc47:	50                   	push   eax
c001bc48:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc4b:	56                   	push   esi
c001bc4c:	e8 4f 7c ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c001bc51:	83 c4 10             	add    esp,0x10
c001bc54:	85 f6                	test   esi,esi
c001bc56:	74 14                	je     c001bc6c <sysCallSizeFromFilename(regs*)+0x6b>
c001bc58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc5c:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc5e:	83 ec 0c             	sub    esp,0xc
c001bc61:	56                   	push   esi
c001bc62:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc65:	83 c4 10             	add    esp,0x10
c001bc68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc6c:	85 c0                	test   eax,eax
c001bc6e:	0f 95 c0             	setne  al
c001bc71:	31 d2                	xor    edx,edx
c001bc73:	0f b6 c0             	movzx  eax,al
c001bc76:	f7 d8                	neg    eax
c001bc78:	83 d2 00             	adc    edx,0x0
c001bc7b:	83 c4 20             	add    esp,0x20
c001bc7e:	f7 da                	neg    edx
c001bc80:	5b                   	pop    ebx
c001bc81:	5e                   	pop    esi
c001bc82:	5f                   	pop    edi
c001bc83:	c3                   	ret    
c001bc84:	83 ec 08             	sub    esp,0x8
c001bc87:	53                   	push   ebx
c001bc88:	68 9f bf 02 c0       	push   0xc002bf9f
c001bc8d:	e8 a6 73 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001bc92:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc95:	83 c4 10             	add    esp,0x10
c001bc98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bca5:	31 d2                	xor    edx,edx
c001bca7:	83 c4 20             	add    esp,0x20
c001bcaa:	31 c0                	xor    eax,eax
c001bcac:	5b                   	pop    ebx
c001bcad:	5e                   	pop    esi
c001bcae:	5f                   	pop    edi
c001bcaf:	c3                   	ret    
c001bcb0:	83 c4 20             	add    esp,0x20
c001bcb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb8:	5b                   	pop    ebx
c001bcb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcbe:	5e                   	pop    esi
c001bcbf:	5f                   	pop    edi
c001bcc0:	c3                   	ret    

c001bcc1 <sysCallClose(regs*)>:
c001bcc1:	53                   	push   ebx
c001bcc2:	83 ec 08             	sub    esp,0x8
c001bcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcc9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bccc:	83 f8 02             	cmp    eax,0x2
c001bccf:	76 50                	jbe    c001bd21 <sysCallClose(regs*)+0x60>
c001bcd1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcd6:	74 58                	je     c001bd30 <sysCallClose(regs*)+0x6f>
c001bcd8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcdd:	74 60                	je     c001bd3f <sysCallClose(regs*)+0x7e>
c001bcdf:	77 2f                	ja     c001bd10 <sysCallClose(regs*)+0x4f>
c001bce1:	83 ec 0c             	sub    esp,0xc
c001bce4:	50                   	push   eax
c001bce5:	e8 65 5d ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bcea:	89 c3                	mov    ebx,eax
c001bcec:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcef:	e8 5e 79 ff ff       	call   c0013652 <File::close()>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	85 db                	test   ebx,ebx
c001bcf9:	74 0c                	je     c001bd07 <sysCallClose(regs*)+0x46>
c001bcfb:	83 ec 0c             	sub    esp,0xc
c001bcfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd00:	53                   	push   ebx
c001bd01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd04:	83 c4 10             	add    esp,0x10
c001bd07:	31 c0                	xor    eax,eax
c001bd09:	31 d2                	xor    edx,edx
c001bd0b:	83 c4 08             	add    esp,0x8
c001bd0e:	5b                   	pop    ebx
c001bd0f:	c3                   	ret    
c001bd10:	83 ec 08             	sub    esp,0x8
c001bd13:	50                   	push   eax
c001bd14:	68 9c c0 02 c0       	push   0xc002c09c
c001bd19:	e8 1a 73 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd26:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2b:	83 c4 08             	add    esp,0x8
c001bd2e:	5b                   	pop    ebx
c001bd2f:	c3                   	ret    
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	68 ba bf 02 c0       	push   0xc002bfba
c001bd38:	e8 fb 72 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001bd3d:	eb c5                	jmp    c001bd04 <sysCallClose(regs*)+0x43>
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	68 c8 bf 02 c0       	push   0xc002bfc8
c001bd47:	eb ef                	jmp    c001bd38 <sysCallClose(regs*)+0x77>

c001bd49 <sysCallOpenDir(regs*)>:
c001bd49:	56                   	push   esi
c001bd4a:	53                   	push   ebx
c001bd4b:	53                   	push   ebx
c001bd4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd50:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd53:	85 f6                	test   esi,esi
c001bd55:	74 59                	je     c001bdb0 <sysCallOpenDir(regs*)+0x67>
c001bd57:	83 ec 0c             	sub    esp,0xc
c001bd5a:	68 14 01 00 00       	push   0x114
c001bd5f:	e8 df 3a ff ff       	call   c000f843 <malloc>
c001bd64:	83 c4 0c             	add    esp,0xc
c001bd67:	89 c6                	mov    esi,eax
c001bd69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd6e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd71:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd74:	56                   	push   esi
c001bd75:	e8 c2 7c ff ff       	call   c0013a3c <Directory::Directory(char const*, Process*)>
c001bd7a:	83 c4 10             	add    esp,0x10
c001bd7d:	85 f6                	test   esi,esi
c001bd7f:	74 2f                	je     c001bdb0 <sysCallOpenDir(regs*)+0x67>
c001bd81:	83 ec 0c             	sub    esp,0xc
c001bd84:	56                   	push   esi
c001bd85:	e8 16 7d ff ff       	call   c0013aa0 <Directory::open()>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	85 c0                	test   eax,eax
c001bd8f:	75 1f                	jne    c001bdb0 <sysCallOpenDir(regs*)+0x67>
c001bd91:	83 ec 0c             	sub    esp,0xc
c001bd94:	56                   	push   esi
c001bd95:	e8 c0 59 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001bd9a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd9d:	83 c4 10             	add    esp,0x10
c001bda0:	89 02                	mov    DWORD PTR [edx],eax
c001bda2:	c1 f8 1f             	sar    eax,0x1f
c001bda5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bda8:	31 c0                	xor    eax,eax
c001bdaa:	59                   	pop    ecx
c001bdab:	31 d2                	xor    edx,edx
c001bdad:	5b                   	pop    ebx
c001bdae:	5e                   	pop    esi
c001bdaf:	c3                   	ret    
c001bdb0:	59                   	pop    ecx
c001bdb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdbb:	5b                   	pop    ebx
c001bdbc:	5e                   	pop    esi
c001bdbd:	c3                   	ret    

c001bdbe <sysCallCloseDir(regs*)>:
c001bdbe:	53                   	push   ebx
c001bdbf:	83 ec 08             	sub    esp,0x8
c001bdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdc9:	83 f8 02             	cmp    eax,0x2
c001bdcc:	76 47                	jbe    c001be15 <sysCallCloseDir(regs*)+0x57>
c001bdce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdd3:	77 2f                	ja     c001be04 <sysCallCloseDir(regs*)+0x46>
c001bdd5:	83 ec 0c             	sub    esp,0xc
c001bdd8:	50                   	push   eax
c001bdd9:	e8 71 5c ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bdde:	89 c3                	mov    ebx,eax
c001bde0:	89 04 24             	mov    DWORD PTR [esp],eax
c001bde3:	e8 14 7d ff ff       	call   c0013afc <Directory::close()>
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	85 db                	test   ebx,ebx
c001bded:	74 0c                	je     c001bdfb <sysCallCloseDir(regs*)+0x3d>
c001bdef:	83 ec 0c             	sub    esp,0xc
c001bdf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdf4:	53                   	push   ebx
c001bdf5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	31 c0                	xor    eax,eax
c001bdfd:	31 d2                	xor    edx,edx
c001bdff:	83 c4 08             	add    esp,0x8
c001be02:	5b                   	pop    ebx
c001be03:	c3                   	ret    
c001be04:	83 ec 08             	sub    esp,0x8
c001be07:	50                   	push   eax
c001be08:	68 c4 c0 02 c0       	push   0xc002c0c4
c001be0d:	e8 26 72 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001be12:	83 c4 10             	add    esp,0x10
c001be15:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be1f:	83 c4 08             	add    esp,0x8
c001be22:	5b                   	pop    ebx
c001be23:	c3                   	ret    

c001be24 <sysCallMakeDir(regs*)>:
c001be24:	56                   	push   esi
c001be25:	53                   	push   ebx
c001be26:	83 ec 10             	sub    esp,0x10
c001be29:	68 14 01 00 00       	push   0x114
c001be2e:	e8 10 3a ff ff       	call   c000f843 <malloc>
c001be33:	83 c4 0c             	add    esp,0xc
c001be36:	89 c3                	mov    ebx,eax
c001be38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be44:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be47:	53                   	push   ebx
c001be48:	e8 ef 7b ff ff       	call   c0013a3c <Directory::Directory(char const*, Process*)>
c001be4d:	83 c4 10             	add    esp,0x10
c001be50:	85 db                	test   ebx,ebx
c001be52:	74 32                	je     c001be86 <sysCallMakeDir(regs*)+0x62>
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	53                   	push   ebx
c001be58:	e8 23 7e ff ff       	call   c0013c80 <Directory::create()>
c001be5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be60:	89 c6                	mov    esi,eax
c001be62:	e8 95 7c ff ff       	call   c0013afc <Directory::close()>
c001be67:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be6f:	83 c4 10             	add    esp,0x10
c001be72:	31 c0                	xor    eax,eax
c001be74:	59                   	pop    ecx
c001be75:	85 f6                	test   esi,esi
c001be77:	5b                   	pop    ebx
c001be78:	0f 95 c0             	setne  al
c001be7b:	5e                   	pop    esi
c001be7c:	31 d2                	xor    edx,edx
c001be7e:	f7 d8                	neg    eax
c001be80:	83 d2 00             	adc    edx,0x0
c001be83:	f7 da                	neg    edx
c001be85:	c3                   	ret    
c001be86:	59                   	pop    ecx
c001be87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be8c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be91:	5b                   	pop    ebx
c001be92:	5e                   	pop    esi
c001be93:	c3                   	ret    

c001be94 <sysCallWait(regs*)>:
c001be94:	83 ec 10             	sub    esp,0x10
c001be97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be9b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be9e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bea1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bea4:	e8 e8 24 00 00       	call   c001e391 <waitTask(int, int*, int)>
c001bea9:	83 c4 1c             	add    esp,0x1c
c001beac:	99                   	cdq    
c001bead:	c3                   	ret    

c001beae <sysCallNotImpl(regs*)>:
c001beae:	83 ec 18             	sub    esp,0x18
c001beb1:	68 d6 bf 02 c0       	push   0xc002bfd6
c001beb6:	e8 2a e8 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001bebb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bec0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bec5:	83 c4 1c             	add    esp,0x1c
c001bec8:	c3                   	ret    

c001bec9 <sysPanic(regs*)>:
c001bec9:	83 ec 18             	sub    esp,0x18
c001becc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bed0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bed3:	e8 0d e8 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001bed8:	c7 04 24 f0 bf 02 c0 	mov    DWORD PTR [esp],0xc002bff0
c001bedf:	e8 01 e8 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001bee4:	b8 01 00 00 00       	mov    eax,0x1
c001bee9:	31 d2                	xor    edx,edx
c001beeb:	83 c4 1c             	add    esp,0x1c
c001beee:	c3                   	ret    

c001beef <sysCallRmdir(regs*)>:
c001beef:	56                   	push   esi
c001bef0:	53                   	push   ebx
c001bef1:	83 ec 20             	sub    esp,0x20
c001bef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bef8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001befb:	68 14 01 00 00       	push   0x114
c001bf00:	e8 3e 39 ff ff       	call   c000f843 <malloc>
c001bf05:	83 c4 0c             	add    esp,0xc
c001bf08:	89 c3                	mov    ebx,eax
c001bf0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf0f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf12:	56                   	push   esi
c001bf13:	53                   	push   ebx
c001bf14:	e8 77 76 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001bf19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf1c:	e8 4b 78 ff ff       	call   c001376c <File::unlink()>
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	85 db                	test   ebx,ebx
c001bf26:	74 14                	je     c001bf3c <sysCallRmdir(regs*)+0x4d>
c001bf28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf2c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf2e:	83 ec 0c             	sub    esp,0xc
c001bf31:	53                   	push   ebx
c001bf32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf3c:	85 c0                	test   eax,eax
c001bf3e:	0f 95 c0             	setne  al
c001bf41:	31 d2                	xor    edx,edx
c001bf43:	0f b6 c0             	movzx  eax,al
c001bf46:	f7 d8                	neg    eax
c001bf48:	83 d2 00             	adc    edx,0x0
c001bf4b:	83 c4 14             	add    esp,0x14
c001bf4e:	f7 da                	neg    edx
c001bf50:	5b                   	pop    ebx
c001bf51:	5e                   	pop    esi
c001bf52:	c3                   	ret    

c001bf53 <sysCallUnlink(regs*)>:
c001bf53:	56                   	push   esi
c001bf54:	53                   	push   ebx
c001bf55:	83 ec 20             	sub    esp,0x20
c001bf58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf5c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf5f:	68 14 01 00 00       	push   0x114
c001bf64:	e8 da 38 ff ff       	call   c000f843 <malloc>
c001bf69:	83 c4 0c             	add    esp,0xc
c001bf6c:	89 c3                	mov    ebx,eax
c001bf6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf73:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	e8 13 76 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001bf7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf80:	e8 e7 77 ff ff       	call   c001376c <File::unlink()>
c001bf85:	83 c4 10             	add    esp,0x10
c001bf88:	85 db                	test   ebx,ebx
c001bf8a:	74 14                	je     c001bfa0 <sysCallUnlink(regs*)+0x4d>
c001bf8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf90:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	53                   	push   ebx
c001bf96:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf99:	83 c4 10             	add    esp,0x10
c001bf9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfa0:	85 c0                	test   eax,eax
c001bfa2:	0f 95 c0             	setne  al
c001bfa5:	31 d2                	xor    edx,edx
c001bfa7:	0f b6 c0             	movzx  eax,al
c001bfaa:	f7 d8                	neg    eax
c001bfac:	83 d2 00             	adc    edx,0x0
c001bfaf:	83 c4 14             	add    esp,0x14
c001bfb2:	f7 da                	neg    edx
c001bfb4:	5b                   	pop    ebx
c001bfb5:	5e                   	pop    esi
c001bfb6:	c3                   	ret    

c001bfb7 <sysCallGetArgv(regs*)>:
c001bfb7:	83 ec 0c             	sub    esp,0xc
c001bfba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfbe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfc1:	85 c0                	test   eax,eax
c001bfc3:	78 2b                	js     c001bff0 <sysCallGetArgv(regs*)+0x39>
c001bfc5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfcb:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfce:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfd4:	7d 1a                	jge    c001bff0 <sysCallGetArgv(regs*)+0x39>
c001bfd6:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfdd:	85 c0                	test   eax,eax
c001bfdf:	74 17                	je     c001bff8 <sysCallGetArgv(regs*)+0x41>
c001bfe1:	83 ec 08             	sub    esp,0x8
c001bfe4:	50                   	push   eax
c001bfe5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfe8:	e8 47 48 fe ff       	call   c0000834 <strcpy>
c001bfed:	83 c4 10             	add    esp,0x10
c001bff0:	31 c0                	xor    eax,eax
c001bff2:	31 d2                	xor    edx,edx
c001bff4:	83 c4 0c             	add    esp,0xc
c001bff7:	c3                   	ret    
c001bff8:	b8 01 00 00 00       	mov    eax,0x1
c001bffd:	31 d2                	xor    edx,edx
c001bfff:	83 c4 0c             	add    esp,0xc
c001c002:	c3                   	ret    

c001c003 <sysCallTTYName(regs*)>:
c001c003:	56                   	push   esi
c001c004:	53                   	push   ebx
c001c005:	53                   	push   ebx
c001c006:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c00a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c00d:	85 c0                	test   eax,eax
c001c00f:	74 5f                	je     c001c070 <sysCallTTYName(regs*)+0x6d>
c001c011:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c014:	83 f8 02             	cmp    eax,0x2
c001c017:	77 3e                	ja     c001c057 <sysCallTTYName(regs*)+0x54>
c001c019:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c01e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c021:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c027:	85 db                	test   ebx,ebx
c001c029:	74 45                	je     c001c070 <sysCallTTYName(regs*)+0x6d>
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c030:	53                   	push   ebx
c001c031:	ff 10                	call   DWORD PTR [eax]
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	84 c0                	test   al,al
c001c038:	74 41                	je     c001c07b <sysCallTTYName(regs*)+0x78>
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c043:	53                   	push   ebx
c001c044:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c047:	e8 e8 47 fe ff       	call   c0000834 <strcpy>
c001c04c:	83 c4 10             	add    esp,0x10
c001c04f:	31 c0                	xor    eax,eax
c001c051:	59                   	pop    ecx
c001c052:	31 d2                	xor    edx,edx
c001c054:	5b                   	pop    ebx
c001c055:	5e                   	pop    esi
c001c056:	c3                   	ret    
c001c057:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c05c:	74 bb                	je     c001c019 <sysCallTTYName(regs*)+0x16>
c001c05e:	83 ec 0c             	sub    esp,0xc
c001c061:	50                   	push   eax
c001c062:	e8 e8 59 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001c067:	83 c4 10             	add    esp,0x10
c001c06a:	89 c3                	mov    ebx,eax
c001c06c:	85 db                	test   ebx,ebx
c001c06e:	75 bb                	jne    c001c02b <sysCallTTYName(regs*)+0x28>
c001c070:	59                   	pop    ecx
c001c071:	b8 01 00 00 00       	mov    eax,0x1
c001c076:	31 d2                	xor    edx,edx
c001c078:	5b                   	pop    ebx
c001c079:	5e                   	pop    esi
c001c07a:	c3                   	ret    
c001c07b:	59                   	pop    ecx
c001c07c:	b8 02 00 00 00       	mov    eax,0x2
c001c081:	31 d2                	xor    edx,edx
c001c083:	5b                   	pop    ebx
c001c084:	5e                   	pop    esi
c001c085:	c3                   	ret    

c001c086 <sysCallUSleep(regs*)>:
c001c086:	83 ec 14             	sub    esp,0x14
c001c089:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c08e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c092:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c099:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c09c:	01 ca                	add    edx,ecx
c001c09e:	52                   	push   edx
c001c09f:	50                   	push   eax
c001c0a0:	e8 85 23 00 00       	call   c001e42a <nanoSleep(unsigned long long)>
c001c0a5:	31 c0                	xor    eax,eax
c001c0a7:	31 d2                	xor    edx,edx
c001c0a9:	83 c4 1c             	add    esp,0x1c
c001c0ac:	c3                   	ret    

c001c0ad <sysCallSpawn(regs*)>:
c001c0ad:	56                   	push   esi
c001c0ae:	53                   	push   ebx
c001c0af:	53                   	push   ebx
c001c0b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0b4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c0b7:	85 f6                	test   esi,esi
c001c0b9:	75 08                	jne    c001c0c3 <sysCallSpawn(regs*)+0x16>
c001c0bb:	59                   	pop    ecx
c001c0bc:	31 c0                	xor    eax,eax
c001c0be:	31 d2                	xor    edx,edx
c001c0c0:	5b                   	pop    ebx
c001c0c1:	5e                   	pop    esi
c001c0c2:	c3                   	ret    
c001c0c3:	83 ec 0c             	sub    esp,0xc
c001c0c6:	68 3f 07 00 00       	push   0x73f
c001c0cb:	e8 73 37 ff ff       	call   c000f843 <malloc>
c001c0d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0d3:	89 c6                	mov    esi,eax
c001c0d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0e0:	56                   	push   esi
c001c0e1:	e8 44 1a 00 00       	call   c001db2a <Process::Process(char const*, Process*, char**)>
c001c0e6:	83 c4 20             	add    esp,0x20
c001c0e9:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0f0:	75 c9                	jne    c001c0bb <sysCallSpawn(regs*)+0xe>
c001c0f2:	83 ec 0c             	sub    esp,0xc
c001c0f5:	56                   	push   esi
c001c0f6:	e8 f5 1f 00 00       	call   c001e0f0 <Process::createUserThread()>
c001c0fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0fd:	83 c4 10             	add    esp,0x10
c001c100:	99                   	cdq    
c001c101:	59                   	pop    ecx
c001c102:	5b                   	pop    ebx
c001c103:	5e                   	pop    esi
c001c104:	c3                   	ret    

c001c105 <sysCallGetEnv(regs*)>:
c001c105:	55                   	push   ebp
c001c106:	57                   	push   edi
c001c107:	56                   	push   esi
c001c108:	53                   	push   ebx
c001c109:	83 ec 28             	sub    esp,0x28
c001c10c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c110:	68 ff bf 02 c0       	push   0xc002bfff
c001c115:	e8 1e 6f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c11a:	5f                   	pop    edi
c001c11b:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c11e:	5d                   	pop    ebp
c001c11f:	53                   	push   ebx
c001c120:	68 45 c3 02 c0       	push   0xc002c345
c001c125:	e8 0e 6f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c12a:	58                   	pop    eax
c001c12b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c12e:	5a                   	pop    edx
c001c12f:	57                   	push   edi
c001c130:	68 08 c0 02 c0       	push   0xc002c008
c001c135:	e8 fe 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c13a:	59                   	pop    ecx
c001c13b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c140:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c143:	e8 b9 e4 ff ff       	call   c001a601 <Krnl::getProcessTotalEnvCount(Process*)>
c001c148:	5a                   	pop    edx
c001c149:	89 c5                	mov    ebp,eax
c001c14b:	59                   	pop    ecx
c001c14c:	50                   	push   eax
c001c14d:	68 12 c0 02 c0       	push   0xc002c012
c001c152:	e8 e1 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c157:	83 c4 10             	add    esp,0x10
c001c15a:	39 ef                	cmp    edi,ebp
c001c15c:	7c 15                	jl     c001c173 <sysCallGetEnv(regs*)+0x6e>
c001c15e:	85 db                	test   ebx,ebx
c001c160:	75 0c                	jne    c001c16e <sysCallGetEnv(regs*)+0x69>
c001c162:	83 c4 1c             	add    esp,0x1c
c001c165:	31 c0                	xor    eax,eax
c001c167:	5b                   	pop    ebx
c001c168:	31 d2                	xor    edx,edx
c001c16a:	5e                   	pop    esi
c001c16b:	5f                   	pop    edi
c001c16c:	5d                   	pop    ebp
c001c16d:	c3                   	ret    
c001c16e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c171:	eb ef                	jmp    c001c162 <sysCallGetEnv(regs*)+0x5d>
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	68 1e c0 02 c0       	push   0xc002c01e
c001c17b:	e8 b8 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c180:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c184:	83 c4 0c             	add    esp,0xc
c001c187:	57                   	push   edi
c001c188:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c18e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c191:	50                   	push   eax
c001c192:	e8 8a e4 ff ff       	call   c001a621 <Krnl::getProcessEnvPair(Process*, int)>
c001c197:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c19b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c19f:	68 c4 c3 02 c0       	push   0xc002c3c4
c001c1a4:	e8 8f 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c1a9:	83 c4 10             	add    esp,0x10
c001c1ac:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c1af:	85 f6                	test   esi,esi
c001c1b1:	75 47                	jne    c001c1fa <sysCallGetEnv(regs*)+0xf5>
c001c1b3:	83 ec 0c             	sub    esp,0xc
c001c1b6:	55                   	push   ebp
c001c1b7:	e8 d8 45 fe ff       	call   c0000794 <strlen>
c001c1bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1bf:	89 c3                	mov    ebx,eax
c001c1c1:	e8 ce 45 fe ff       	call   c0000794 <strlen>
c001c1c6:	5a                   	pop    edx
c001c1c7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1cb:	59                   	pop    ecx
c001c1cc:	50                   	push   eax
c001c1cd:	68 21 c0 02 c0       	push   0xc002c021
c001c1d2:	e8 61 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c1d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1da:	e8 b5 45 fe ff       	call   c0000794 <strlen>
c001c1df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1e2:	89 c3                	mov    ebx,eax
c001c1e4:	e8 ab 45 fe ff       	call   c0000794 <strlen>
c001c1e9:	83 c4 10             	add    esp,0x10
c001c1ec:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1f0:	83 c4 1c             	add    esp,0x1c
c001c1f3:	31 d2                	xor    edx,edx
c001c1f5:	5b                   	pop    ebx
c001c1f6:	5e                   	pop    esi
c001c1f7:	5f                   	pop    edi
c001c1f8:	5d                   	pop    ebp
c001c1f9:	c3                   	ret    
c001c1fa:	83 ec 0c             	sub    esp,0xc
c001c1fd:	68 de c3 02 c0       	push   0xc002c3de
c001c202:	e8 31 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c207:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c20a:	58                   	pop    eax
c001c20b:	5a                   	pop    edx
c001c20c:	55                   	push   ebp
c001c20d:	53                   	push   ebx
c001c20e:	e8 21 46 fe ff       	call   c0000834 <strcpy>
c001c213:	59                   	pop    ecx
c001c214:	5e                   	pop    esi
c001c215:	68 2b c0 02 c0       	push   0xc002c02b
c001c21a:	53                   	push   ebx
c001c21b:	e8 54 47 fe ff       	call   c0000974 <strcat>
c001c220:	5d                   	pop    ebp
c001c221:	58                   	pop    eax
c001c222:	57                   	push   edi
c001c223:	53                   	push   ebx
c001c224:	e8 4b 47 fe ff       	call   c0000974 <strcat>
c001c229:	c7 04 24 f8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3f8
c001c230:	e8 03 6e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c235:	83 c4 10             	add    esp,0x10
c001c238:	e9 25 ff ff ff       	jmp    c001c162 <sysCallGetEnv(regs*)+0x5d>

c001c23d <sysAppSettings(regs*)>:
c001c23d:	53                   	push   ebx
c001c23e:	83 ec 08             	sub    esp,0x8
c001c241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c245:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c248:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c24e:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c253:	66 3d c0 09          	cmp    ax,0x9c0
c001c257:	75 2f                	jne    c001c288 <sysAppSettings(regs*)+0x4b>
c001c259:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c25f:	83 e0 1f             	and    eax,0x1f
c001c262:	3c 01                	cmp    al,0x1
c001c264:	74 2e                	je     c001c294 <sysAppSettings(regs*)+0x57>
c001c266:	3c 07                	cmp    al,0x7
c001c268:	0f 84 bd 00 00 00    	je     c001c32b <sysAppSettings(regs*)+0xee>
c001c26e:	84 c0                	test   al,al
c001c270:	0f 84 dc 00 00 00    	je     c001c352 <sysAppSettings(regs*)+0x115>
c001c276:	3c 08                	cmp    al,0x8
c001c278:	74 6d                	je     c001c2e7 <sysAppSettings(regs*)+0xaa>
c001c27a:	0f b6 c0             	movzx  eax,al
c001c27d:	83 c4 08             	add    esp,0x8
c001c280:	05 e8 03 00 00       	add    eax,0x3e8
c001c285:	5b                   	pop    ebx
c001c286:	99                   	cdq    
c001c287:	c3                   	ret    
c001c288:	b8 01 00 00 00       	mov    eax,0x1
c001c28d:	31 d2                	xor    edx,edx
c001c28f:	83 c4 08             	add    esp,0x8
c001c292:	5b                   	pop    ebx
c001c293:	c3                   	ret    
c001c294:	51                   	push   ecx
c001c295:	68 00 01 00 00       	push   0x100
c001c29a:	6a 00                	push   0x0
c001c29c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a4:	83 c0 0c             	add    eax,0xc
c001c2a7:	50                   	push   eax
c001c2a8:	e8 cb 44 fe ff       	call   c0000778 <memset>
c001c2ad:	83 c4 0c             	add    esp,0xc
c001c2b0:	68 ff 00 00 00       	push   0xff
c001c2b5:	53                   	push   ebx
c001c2b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2be:	83 c0 0c             	add    eax,0xc
c001c2c1:	50                   	push   eax
c001c2c2:	e8 7d 44 fe ff       	call   c0000744 <memcpy>
c001c2c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2cc:	5b                   	pop    ebx
c001c2cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d0:	5a                   	pop    edx
c001c2d1:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2d4:	52                   	push   edx
c001c2d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2db:	e8 ea 48 ff ff       	call   c0010bca <VgaText::setTitle(char*)>
c001c2e0:	83 c4 10             	add    esp,0x10
c001c2e3:	31 c0                	xor    eax,eax
c001c2e5:	eb a6                	jmp    c001c28d <sysAppSettings(regs*)+0x50>
c001c2e7:	83 ec 08             	sub    esp,0x8
c001c2ea:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2f0:	83 e0 0f             	and    eax,0xf
c001c2f3:	50                   	push   eax
c001c2f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c302:	e8 b3 48 ff ff       	call   c0010bba <VgaText::setTitleColour(VgaColour)>
c001c307:	58                   	pop    eax
c001c308:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c30e:	5a                   	pop    edx
c001c30f:	c1 e8 04             	shr    eax,0x4
c001c312:	83 e0 0f             	and    eax,0xf
c001c315:	50                   	push   eax
c001c316:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c31b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c31e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c324:	e8 81 48 ff ff       	call   c0010baa <VgaText::setTitleTextColour(VgaColour)>
c001c329:	eb b5                	jmp    c001c2e0 <sysAppSettings(regs*)+0xa3>
c001c32b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c330:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c333:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c339:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c33f:	c0 e8 06             	shr    al,0x6
c001c342:	83 e0 01             	and    eax,0x1
c001c345:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c34b:	31 c0                	xor    eax,eax
c001c34d:	e9 3b ff ff ff       	jmp    c001c28d <sysAppSettings(regs*)+0x50>
c001c352:	b8 02 00 00 00       	mov    eax,0x2
c001c357:	e9 31 ff ff ff       	jmp    c001c28d <sysAppSettings(regs*)+0x50>

c001c35c <sysSetFatAttrib(regs*)>:
c001c35c:	57                   	push   edi
c001c35d:	56                   	push   esi
c001c35e:	53                   	push   ebx
c001c35f:	83 ec 1c             	sub    esp,0x1c
c001c362:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c366:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c369:	68 14 01 00 00       	push   0x114
c001c36e:	e8 d0 34 ff ff       	call   c000f843 <malloc>
c001c373:	83 c4 0c             	add    esp,0xc
c001c376:	89 c3                	mov    ebx,eax
c001c378:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c37d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c380:	57                   	push   edi
c001c381:	53                   	push   ebx
c001c382:	e8 09 72 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001c387:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c38a:	83 c4 0c             	add    esp,0xc
c001c38d:	0f b6 d4             	movzx  edx,ah
c001c390:	0f b6 c0             	movzx  eax,al
c001c393:	52                   	push   edx
c001c394:	50                   	push   eax
c001c395:	53                   	push   ebx
c001c396:	e8 6b 74 ff ff       	call   c0013806 <File::chfatattr(unsigned char, unsigned char)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	85 db                	test   ebx,ebx
c001c3a0:	74 14                	je     c001c3b6 <sysSetFatAttrib(regs*)+0x5a>
c001c3a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	53                   	push   ebx
c001c3ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c3af:	83 c4 10             	add    esp,0x10
c001c3b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3b6:	85 c0                	test   eax,eax
c001c3b8:	0f 95 c0             	setne  al
c001c3bb:	31 d2                	xor    edx,edx
c001c3bd:	0f b6 c0             	movzx  eax,al
c001c3c0:	f7 d8                	neg    eax
c001c3c2:	83 d2 00             	adc    edx,0x0
c001c3c5:	83 c4 10             	add    esp,0x10
c001c3c8:	f7 da                	neg    edx
c001c3ca:	5b                   	pop    ebx
c001c3cb:	5e                   	pop    esi
c001c3cc:	5f                   	pop    edi
c001c3cd:	c3                   	ret    

c001c3ce <sysPipe(regs*)>:
c001c3ce:	57                   	push   edi
c001c3cf:	56                   	push   esi
c001c3d0:	53                   	push   ebx
c001c3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3db:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3de:	6a 20                	push   0x20
c001c3e0:	e8 5e 34 ff ff       	call   c000f843 <malloc>
c001c3e5:	89 c3                	mov    ebx,eax
c001c3e7:	58                   	pop    eax
c001c3e8:	5a                   	pop    edx
c001c3e9:	68 00 50 00 00       	push   0x5000
c001c3ee:	53                   	push   ebx
c001c3ef:	e8 06 41 ff ff       	call   c00104fa <Pipe::Pipe(int)>
c001c3f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3f7:	e8 5e 53 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c3fc:	89 07                	mov    DWORD PTR [edi],eax
c001c3fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c401:	e8 54 53 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c406:	83 c4 10             	add    esp,0x10
c001c409:	89 06                	mov    DWORD PTR [esi],eax
c001c40b:	31 d2                	xor    edx,edx
c001c40d:	5b                   	pop    ebx
c001c40e:	31 c0                	xor    eax,eax
c001c410:	5e                   	pop    esi
c001c411:	5f                   	pop    edi
c001c412:	c3                   	ret    

c001c413 <sysGetUnixTime(regs*)>:
c001c413:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001c418:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c41e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c422:	e9 53 7b ff ff       	jmp    c0013f7a <Clock::timeInSecondsLocal()>

c001c427 <string_ends_with(char const*, char const*)>:
c001c427:	57                   	push   edi
c001c428:	56                   	push   esi
c001c429:	53                   	push   ebx
c001c42a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c42e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	53                   	push   ebx
c001c436:	e8 59 43 fe ff       	call   c0000794 <strlen>
c001c43b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c43e:	89 c6                	mov    esi,eax
c001c440:	e8 4f 43 fe ff       	call   c0000794 <strlen>
c001c445:	83 c4 10             	add    esp,0x10
c001c448:	39 c6                	cmp    esi,eax
c001c44a:	7d 06                	jge    c001c452 <string_ends_with(char const*, char const*)+0x2b>
c001c44c:	5b                   	pop    ebx
c001c44d:	31 c0                	xor    eax,eax
c001c44f:	5e                   	pop    esi
c001c450:	5f                   	pop    edi
c001c451:	c3                   	ret    
c001c452:	83 ec 08             	sub    esp,0x8
c001c455:	29 c6                	sub    esi,eax
c001c457:	57                   	push   edi
c001c458:	01 f3                	add    ebx,esi
c001c45a:	53                   	push   ebx
c001c45b:	e8 60 44 fe ff       	call   c00008c0 <strcmp>
c001c460:	83 c4 10             	add    esp,0x10
c001c463:	85 c0                	test   eax,eax
c001c465:	5b                   	pop    ebx
c001c466:	0f 94 c0             	sete   al
c001c469:	5e                   	pop    esi
c001c46a:	0f b6 c0             	movzx  eax,al
c001c46d:	5f                   	pop    edi
c001c46e:	c3                   	ret    

c001c46f <sysCallOpen(regs*)>:
c001c46f:	56                   	push   esi
c001c470:	53                   	push   ebx
c001c471:	81 ec 04 01 00 00    	sub    esp,0x104
c001c477:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c47e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c481:	85 c9                	test   ecx,ecx
c001c483:	0f 84 b3 00 00 00    	je     c001c53c <sysCallOpen(regs*)+0xcd>
c001c489:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c48c:	85 c0                	test   eax,eax
c001c48e:	0f 84 a8 00 00 00    	je     c001c53c <sysCallOpen(regs*)+0xcd>
c001c494:	52                   	push   edx
c001c495:	68 2d c0 02 c0       	push   0xc002c02d
c001c49a:	50                   	push   eax
c001c49b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c49f:	56                   	push   esi
c001c4a0:	e8 41 6f ff ff       	call   c00133e6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c4a5:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4a8:	e8 e7 42 fe ff       	call   c0000794 <strlen>
c001c4ad:	83 c4 10             	add    esp,0x10
c001c4b0:	48                   	dec    eax
c001c4b1:	74 1d                	je     c001c4d0 <sysCallOpen(regs*)+0x61>
c001c4b3:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c4b6:	eb 0f                	jmp    c001c4c7 <sysCallOpen(regs*)+0x58>
c001c4b8:	80 fa 3a             	cmp    dl,0x3a
c001c4bb:	74 0f                	je     c001c4cc <sysCallOpen(regs*)+0x5d>
c001c4bd:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4c1:	48                   	dec    eax
c001c4c2:	74 0c                	je     c001c4d0 <sysCallOpen(regs*)+0x61>
c001c4c4:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4c7:	80 fa 2e             	cmp    dl,0x2e
c001c4ca:	75 ec                	jne    c001c4b8 <sysCallOpen(regs*)+0x49>
c001c4cc:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4d0:	83 ec 08             	sub    esp,0x8
c001c4d3:	68 31 c0 02 c0       	push   0xc002c031
c001c4d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4db:	e8 47 ff ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	75 17                	jne    c001c4fe <sysCallOpen(regs*)+0x8f>
c001c4e7:	83 ec 08             	sub    esp,0x8
c001c4ea:	68 52 c0 02 c0       	push   0xc002c052
c001c4ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f2:	e8 30 ff ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c4f7:	83 c4 10             	add    esp,0x10
c001c4fa:	85 c0                	test   eax,eax
c001c4fc:	74 51                	je     c001c54f <sysCallOpen(regs*)+0xe0>
c001c4fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c501:	83 ec 08             	sub    esp,0x8
c001c504:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c50a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c511:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c514:	ff 30                	push   DWORD PTR [eax]
c001c516:	68 36 c0 02 c0       	push   0xc002c036
c001c51b:	e8 18 6b ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c520:	c7 04 24 45 c0 02 c0 	mov    DWORD PTR [esp],0xc002c045
c001c527:	e8 0c 6b ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	81 c4 04 01 00 00    	add    esp,0x104
c001c535:	31 c0                	xor    eax,eax
c001c537:	31 d2                	xor    edx,edx
c001c539:	5b                   	pop    ebx
c001c53a:	5e                   	pop    esi
c001c53b:	c3                   	ret    
c001c53c:	81 c4 04 01 00 00    	add    esp,0x104
c001c542:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c547:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c54c:	5b                   	pop    ebx
c001c54d:	5e                   	pop    esi
c001c54e:	c3                   	ret    
c001c54f:	83 ec 08             	sub    esp,0x8
c001c552:	68 32 c0 02 c0       	push   0xc002c032
c001c557:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c55a:	e8 61 43 fe ff       	call   c00008c0 <strcmp>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	85 c0                	test   eax,eax
c001c564:	74 98                	je     c001c4fe <sysCallOpen(regs*)+0x8f>
c001c566:	83 ec 08             	sub    esp,0x8
c001c569:	68 31 c0 02 c0       	push   0xc002c031
c001c56e:	56                   	push   esi
c001c56f:	e8 b3 fe ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	85 c0                	test   eax,eax
c001c579:	75 83                	jne    c001c4fe <sysCallOpen(regs*)+0x8f>
c001c57b:	83 ec 08             	sub    esp,0x8
c001c57e:	68 57 c0 02 c0       	push   0xc002c057
c001c583:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c586:	e8 9c fe ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	85 c0                	test   eax,eax
c001c590:	0f 85 d9 00 00 00    	jne    c001c66f <sysCallOpen(regs*)+0x200>
c001c596:	83 ec 08             	sub    esp,0x8
c001c599:	68 5c c0 02 c0       	push   0xc002c05c
c001c59e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5a1:	e8 81 fe ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c5a6:	83 c4 10             	add    esp,0x10
c001c5a9:	85 c0                	test   eax,eax
c001c5ab:	0f 85 be 00 00 00    	jne    c001c66f <sysCallOpen(regs*)+0x200>
c001c5b1:	83 ec 08             	sub    esp,0x8
c001c5b4:	68 58 c0 02 c0       	push   0xc002c058
c001c5b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5bc:	e8 ff 42 fe ff       	call   c00008c0 <strcmp>
c001c5c1:	83 c4 10             	add    esp,0x10
c001c5c4:	85 c0                	test   eax,eax
c001c5c6:	0f 84 a3 00 00 00    	je     c001c66f <sysCallOpen(regs*)+0x200>
c001c5cc:	83 ec 08             	sub    esp,0x8
c001c5cf:	68 57 c0 02 c0       	push   0xc002c057
c001c5d4:	56                   	push   esi
c001c5d5:	e8 4d fe ff ff       	call   c001c427 <string_ends_with(char const*, char const*)>
c001c5da:	83 c4 10             	add    esp,0x10
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	0f 85 8a 00 00 00    	jne    c001c66f <sysCallOpen(regs*)+0x200>
c001c5e5:	83 ec 0c             	sub    esp,0xc
c001c5e8:	68 14 01 00 00       	push   0x114
c001c5ed:	e8 51 32 ff ff       	call   c000f843 <malloc>
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	89 c6                	mov    esi,eax
c001c5f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5ff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c602:	56                   	push   esi
c001c603:	e8 88 6f ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	85 f6                	test   esi,esi
c001c60d:	0f 84 29 ff ff ff    	je     c001c53c <sysCallOpen(regs*)+0xcd>
c001c613:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c616:	0f b6 c2             	movzx  eax,dl
c001c619:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c61c:	89 d0                	mov    eax,edx
c001c61e:	83 e0 01             	and    eax,0x1
c001c621:	f6 c2 02             	test   dl,0x2
c001c624:	74 03                	je     c001c629 <sysCallOpen(regs*)+0x1ba>
c001c626:	83 c8 02             	or     eax,0x2
c001c629:	f6 c2 04             	test   dl,0x4
c001c62c:	74 03                	je     c001c631 <sysCallOpen(regs*)+0x1c2>
c001c62e:	83 c8 04             	or     eax,0x4
c001c631:	f6 c2 08             	test   dl,0x8
c001c634:	74 03                	je     c001c639 <sysCallOpen(regs*)+0x1ca>
c001c636:	83 c8 0a             	or     eax,0xa
c001c639:	83 e2 10             	and    edx,0x10
c001c63c:	74 03                	je     c001c641 <sysCallOpen(regs*)+0x1d2>
c001c63e:	83 c8 12             	or     eax,0x12
c001c641:	83 ec 08             	sub    esp,0x8
c001c644:	50                   	push   eax
c001c645:	56                   	push   esi
c001c646:	e8 a9 6f ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001c64b:	83 c4 10             	add    esp,0x10
c001c64e:	85 c0                	test   eax,eax
c001c650:	0f 85 e6 fe ff ff    	jne    c001c53c <sysCallOpen(regs*)+0xcd>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	56                   	push   esi
c001c65a:	e8 fb 50 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c65f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c662:	89 02                	mov    DWORD PTR [edx],eax
c001c664:	c1 f8 1f             	sar    eax,0x1f
c001c667:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c66a:	e9 bd fe ff ff       	jmp    c001c52c <sysCallOpen(regs*)+0xbd>
c001c66f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c672:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c678:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c67f:	e9 ab fe ff ff       	jmp    c001c52f <sysCallOpen(regs*)+0xc0>

c001c684 <Sys::loadSyscalls()>:
c001c684:	c7 05 00 11 03 c0 91 b7 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001b791
c001c68e:	c7 05 04 11 03 c0 7a b3 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001b37a
c001c698:	c7 05 08 11 03 c0 e4 b4 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001b4e4
c001c6a2:	c7 05 0c 11 03 c0 c7 b6 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b6c7
c001c6ac:	c7 05 10 11 03 c0 7c b4 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001b47c
c001c6b6:	c7 05 14 11 03 c0 b1 b3 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b3b1
c001c6c0:	c7 05 18 11 03 c0 92 b3 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001b392
c001c6ca:	c7 05 1c 11 03 c0 39 b5 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001b539
c001c6d4:	c7 05 24 11 03 c0 c1 bc 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001bcc1
c001c6de:	c7 05 20 11 03 c0 6f c4 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001c46f
c001c6e8:	c7 05 28 11 03 c0 49 bd 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001bd49
c001c6f2:	c7 05 2c 11 03 c0 b0 b9 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b9b0
c001c6fc:	c7 05 30 11 03 c0 cc b7 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b7cc
c001c706:	c7 05 34 11 03 c0 d1 b7 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b7d1
c001c710:	c7 05 38 11 03 c0 24 be 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001be24
c001c71a:	c7 05 3c 11 03 c0 be bd 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001bdbe
c001c724:	c7 05 40 11 03 c0 98 ba 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001ba98
c001c72e:	c7 05 44 11 03 c0 01 bb 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001bb01
c001c738:	c7 05 48 11 03 c0 7e bb 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001bb7e
c001c742:	c7 05 4c 11 03 c0 d6 b7 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b7d6
c001c74c:	c7 05 50 11 03 c0 94 be 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001be94
c001c756:	c7 05 54 11 03 c0 ae be 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001beae
c001c760:	c7 05 58 11 03 c0 ae be 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001beae
c001c76a:	c7 05 5c 11 03 c0 ef be 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001beef
c001c774:	c7 05 60 11 03 c0 53 bf 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001bf53
c001c77e:	c7 05 64 11 03 c0 82 b9 01 c0 	mov    DWORD PTR ds:0xc0031164,0xc001b982
c001c788:	c7 05 68 11 03 c0 b7 bf 01 c0 	mov    DWORD PTR ds:0xc0031168,0xc001bfb7
c001c792:	c7 05 6c 11 03 c0 3f b9 01 c0 	mov    DWORD PTR ds:0xc003116c,0xc001b93f
c001c79c:	c7 05 70 11 03 c0 03 c0 01 c0 	mov    DWORD PTR ds:0xc0031170,0xc001c003
c001c7a6:	c7 05 74 11 03 c0 3e ba 01 c0 	mov    DWORD PTR ds:0xc0031174,0xc001ba3e
c001c7b0:	c7 05 78 11 03 c0 86 c0 01 c0 	mov    DWORD PTR ds:0xc0031178,0xc001c086
c001c7ba:	c7 05 7c 11 03 c0 01 bc 01 c0 	mov    DWORD PTR ds:0xc003117c,0xc001bc01
c001c7c4:	c7 05 80 11 03 c0 ad c0 01 c0 	mov    DWORD PTR ds:0xc0031180,0xc001c0ad
c001c7ce:	c7 05 84 11 03 c0 05 c1 01 c0 	mov    DWORD PTR ds:0xc0031184,0xc001c105
c001c7d8:	c7 05 88 11 03 c0 3d c2 01 c0 	mov    DWORD PTR ds:0xc0031188,0xc001c23d
c001c7e2:	c7 05 8c 11 03 c0 e0 b7 01 c0 	mov    DWORD PTR ds:0xc003118c,0xc001b7e0
c001c7ec:	c7 05 90 11 03 c0 4a b8 01 c0 	mov    DWORD PTR ds:0xc0031190,0xc001b84a
c001c7f6:	c7 05 94 11 03 c0 90 b8 01 c0 	mov    DWORD PTR ds:0xc0031194,0xc001b890
c001c800:	c7 05 98 11 03 c0 5c c3 01 c0 	mov    DWORD PTR ds:0xc0031198,0xc001c35c
c001c80a:	c7 05 9c 11 03 c0 c9 be 01 c0 	mov    DWORD PTR ds:0xc003119c,0xc001bec9
c001c814:	c7 05 a0 11 03 c0 e1 b8 01 c0 	mov    DWORD PTR ds:0xc00311a0,0xc001b8e1
c001c81e:	c7 05 a4 11 03 c0 ce c3 01 c0 	mov    DWORD PTR ds:0xc00311a4,0xc001c3ce
c001c828:	c7 05 a8 11 03 c0 13 c4 01 c0 	mov    DWORD PTR ds:0xc00311a8,0xc001c413
c001c832:	c7 05 ac 11 03 c0 d4 b3 01 c0 	mov    DWORD PTR ds:0xc00311ac,0xc001b3d4
c001c83c:	c7 05 b0 11 03 c0 55 b5 01 c0 	mov    DWORD PTR ds:0xc00311b0,0xc001b555
c001c846:	c7 05 b4 11 03 c0 7d b6 01 c0 	mov    DWORD PTR ds:0xc00311b4,0xc001b67d
c001c850:	c7 05 b8 11 03 c0 44 b3 01 c0 	mov    DWORD PTR ds:0xc00311b8,0xc001b344
c001c85a:	c7 05 bc 11 03 c0 2f b7 01 c0 	mov    DWORD PTR ds:0xc00311bc,0xc001b72f
c001c864:	c7 05 c0 11 03 c0 bd b3 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b3bd
c001c86e:	c3                   	ret    

c001c86f <Sys::systemCall(regs*, void*)>:
c001c86f:	53                   	push   ebx
c001c870:	83 ec 08             	sub    esp,0x8
c001c873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c877:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c87a:	83 f8 7f             	cmp    eax,0x7f
c001c87d:	77 16                	ja     c001c895 <Sys::systemCall(regs*, void*)+0x26>
c001c87f:	8b 14 85 00 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef00]
c001c886:	85 d2                	test   edx,edx
c001c888:	74 0b                	je     c001c895 <Sys::systemCall(regs*, void*)+0x26>
c001c88a:	83 ec 0c             	sub    esp,0xc
c001c88d:	53                   	push   ebx
c001c88e:	ff d2                	call   edx
c001c890:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c893:	eb 0d                	jmp    c001c8a2 <Sys::systemCall(regs*, void*)+0x33>
c001c895:	52                   	push   edx
c001c896:	52                   	push   edx
c001c897:	50                   	push   eax
c001c898:	68 61 c0 02 c0       	push   0xc002c061
c001c89d:	e8 96 67 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c8a2:	83 c4 10             	add    esp,0x10
c001c8a5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c8aa:	31 d2                	xor    edx,edx
c001c8ac:	83 c4 08             	add    esp,0x8
c001c8af:	5b                   	pop    ebx
c001c8b0:	c3                   	ret    

c001c8b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c8b1:	55                   	push   ebp
c001c8b2:	57                   	push   edi
c001c8b3:	56                   	push   esi
c001c8b4:	53                   	push   ebx
c001c8b5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8bb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8c2:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	0f 95 c1             	setne  cl
c001c8ce:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8d6:	0f 94 c2             	sete   dl
c001c8d9:	84 d1                	test   cl,dl
c001c8db:	74 23                	je     c001c900 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8dd:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8e3:	74 1b                	je     c001c900 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8eb:	89 da                	mov    edx,ebx
c001c8ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8f3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8f9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c900:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c907:	05 ff 0f 00 00       	add    eax,0xfff
c001c90c:	83 ec 0c             	sub    esp,0xc
c001c90f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c913:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c919:	c1 e8 0c             	shr    eax,0xc
c001c91c:	89 ef                	mov    edi,ebp
c001c91e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c922:	c1 ef 0c             	shr    edi,0xc
c001c925:	6a 01                	push   0x1
c001c927:	e8 79 52 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001c92c:	89 c6                	mov    esi,eax
c001c92e:	58                   	pop    eax
c001c92f:	5a                   	pop    edx
c001c930:	57                   	push   edi
c001c931:	68 e7 c0 02 c0       	push   0xc002c0e7
c001c936:	e8 fd 66 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c93b:	59                   	pop    ecx
c001c93c:	58                   	pop    eax
c001c93d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c941:	68 f9 c0 02 c0       	push   0xc002c0f9
c001c946:	e8 ed 66 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c954:	0f 86 24 01 00 00    	jbe    c001ca7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c95a:	c1 e7 0c             	shl    edi,0xc
c001c95d:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c960:	89 df                	mov    edi,ebx
c001c962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c966:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c96d:	01 dd                	add    ebp,ebx
c001c96f:	29 fd                	sub    ebp,edi
c001c971:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c975:	0f 84 01 01 00 00    	je     c001ca7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c97b:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c981:	76 05                	jbe    c001c988 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c983:	bd 00 10 00 00       	mov    ebp,0x1000
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	31 d2                	xor    edx,edx
c001c98d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c994:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c996:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c99a:	50                   	push   eax
c001c99b:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c99f:	50                   	push   eax
c001c9a0:	52                   	push   edx
c001c9a1:	55                   	push   ebp
c001c9a2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c9a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9ac:	83 c4 20             	add    esp,0x20
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	74 0a                	je     c001c9bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c9b3:	53                   	push   ebx
c001c9b4:	53                   	push   ebx
c001c9b5:	50                   	push   eax
c001c9b6:	68 0b c1 02 c0       	push   0xc002c10b
c001c9bb:	eb 0f                	jmp    c001c9cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9bd:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9c1:	74 20                	je     c001c9e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9c3:	51                   	push   ecx
c001c9c4:	51                   	push   ecx
c001c9c5:	6a 00                	push   0x0
c001c9c7:	68 36 c1 02 c0       	push   0xc002c136
c001c9cc:	e8 67 66 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001c9d1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9d4:	e8 3c 56 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9d9:	83 c4 10             	add    esp,0x10
c001c9dc:	31 c0                	xor    eax,eax
c001c9de:	e9 55 01 00 00       	jmp    c001cb38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9e3:	e8 f2 14 00 00       	call   c001deda <lockScheduler()>
c001c9e8:	e8 f8 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c9ed:	6a 07                	push   0x7
c001c9ef:	89 c5                	mov    ebp,eax
c001c9f1:	56                   	push   esi
c001c9f2:	50                   	push   eax
c001c9f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca01:	e8 76 59 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca06:	83 c4 0c             	add    esp,0xc
c001ca09:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca10:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca16:	6a 00                	push   0x0
c001ca18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca20:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca26:	e8 bb 57 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca2b:	58                   	pop    eax
c001ca2c:	5a                   	pop    edx
c001ca2d:	68 07 0c 00 00       	push   0xc07
c001ca32:	57                   	push   edi
c001ca33:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca39:	55                   	push   ebp
c001ca3a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca41:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca47:	6a 00                	push   0x0
c001ca49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca51:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca57:	e8 da 5c ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca5c:	83 c4 1c             	add    esp,0x1c
c001ca5f:	68 00 10 00 00       	push   0x1000
c001ca64:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca68:	50                   	push   eax
c001ca69:	56                   	push   esi
c001ca6a:	e8 d5 3c fe ff       	call   c0000744 <memcpy>
c001ca6f:	e8 68 14 00 00       	call   c001dedc <unlockScheduler()>
c001ca74:	83 c4 10             	add    esp,0x10
c001ca77:	e9 ea fe ff ff       	jmp    c001c966 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca7c:	89 fb                	mov    ebx,edi
c001ca7e:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca86:	0f 86 9e 00 00 00    	jbe    c001cb2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca8c:	e8 49 14 00 00       	call   c001deda <lockScheduler()>
c001ca91:	51                   	push   ecx
c001ca92:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca99:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca9f:	6a 00                	push   0x0
c001caa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caa9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caaf:	e8 32 57 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001cab4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cab8:	c1 e7 0c             	shl    edi,0xc
c001cabb:	01 df                	add    edi,ebx
c001cabd:	83 c4 10             	add    esp,0x10
c001cac0:	39 fb                	cmp    ebx,edi
c001cac2:	74 61                	je     c001cb25 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001cac4:	e8 1c 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001cac9:	6a 07                	push   0x7
c001cacb:	89 c5                	mov    ebp,eax
c001cacd:	56                   	push   esi
c001cace:	50                   	push   eax
c001cacf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cad4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cad7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cadd:	e8 9a 58 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001cae2:	58                   	pop    eax
c001cae3:	5a                   	pop    edx
c001cae4:	68 07 0c 00 00       	push   0xc07
c001cae9:	53                   	push   ebx
c001caea:	81 c3 00 10 00 00    	add    ebx,0x1000
c001caf0:	55                   	push   ebp
c001caf1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001caf8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cafe:	6a 00                	push   0x0
c001cb00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cb08:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cb0e:	e8 23 5c ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cb13:	83 c4 1c             	add    esp,0x1c
c001cb16:	68 00 10 00 00       	push   0x1000
c001cb1b:	6a 00                	push   0x0
c001cb1d:	56                   	push   esi
c001cb1e:	e8 55 3c fe ff       	call   c0000778 <memset>
c001cb23:	eb 98                	jmp    c001cabd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb25:	e8 b2 13 00 00       	call   c001dedc <unlockScheduler()>
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	56                   	push   esi
c001cb2e:	e8 e2 54 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	b0 01                	mov    al,0x1
c001cb38:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb3e:	5b                   	pop    ebx
c001cb3f:	5e                   	pop    esi
c001cb40:	5f                   	pop    edi
c001cb41:	5d                   	pop    ebp
c001cb42:	c3                   	ret    

c001cb43 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb43:	55                   	push   ebp
c001cb44:	57                   	push   edi
c001cb45:	56                   	push   esi
c001cb46:	53                   	push   ebx
c001cb47:	83 ec 48             	sub    esp,0x48
c001cb4a:	68 14 01 00 00       	push   0x114
c001cb4f:	e8 ef 2c ff ff       	call   c000f843 <malloc>
c001cb54:	83 c4 0c             	add    esp,0xc
c001cb57:	89 c6                	mov    esi,eax
c001cb59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb61:	50                   	push   eax
c001cb62:	e8 29 6a ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001cb67:	58                   	pop    eax
c001cb68:	5a                   	pop    edx
c001cb69:	6a 01                	push   0x1
c001cb6b:	56                   	push   esi
c001cb6c:	e8 83 6a ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001cb71:	83 c4 10             	add    esp,0x10
c001cb74:	85 c0                	test   eax,eax
c001cb76:	0f 85 47 01 00 00    	jne    c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb84:	83 ec 0c             	sub    esp,0xc
c001cb87:	6a 34                	push   0x34
c001cb89:	e8 b5 2c ff ff       	call   c000f843 <malloc>
c001cb8e:	89 c3                	mov    ebx,eax
c001cb90:	58                   	pop    eax
c001cb91:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb93:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb97:	57                   	push   edi
c001cb98:	53                   	push   ebx
c001cb99:	6a 00                	push   0x0
c001cb9b:	6a 34                	push   0x34
c001cb9d:	56                   	push   esi
c001cb9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cba1:	83 c4 20             	add    esp,0x20
c001cba4:	85 c0                	test   eax,eax
c001cba6:	0f 85 17 01 00 00    	jne    c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbac:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cbb2:	0f 85 0b 01 00 00    	jne    c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbb8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cbbb:	85 c0                	test   eax,eax
c001cbbd:	0f 84 00 01 00 00    	je     c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbc3:	31 d2                	xor    edx,edx
c001cbc5:	55                   	push   ebp
c001cbc6:	52                   	push   edx
c001cbc7:	50                   	push   eax
c001cbc8:	56                   	push   esi
c001cbc9:	e8 e4 6a ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	85 c0                	test   eax,eax
c001cbd3:	0f 85 ea 00 00 00    	jne    c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd9:	83 ec 0c             	sub    esp,0xc
c001cbdc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbdf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbe3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbe7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbeb:	0f af c2             	imul   eax,edx
c001cbee:	50                   	push   eax
c001cbef:	e8 4f 2c ff ff       	call   c000f843 <malloc>
c001cbf4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbfa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc01:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cc05:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cc09:	0f af c2             	imul   eax,edx
c001cc0c:	99                   	cdq    
c001cc0d:	52                   	push   edx
c001cc0e:	50                   	push   eax
c001cc0f:	56                   	push   esi
c001cc10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cc16:	83 c4 20             	add    esp,0x20
c001cc19:	85 c0                	test   eax,eax
c001cc1b:	0f 84 a2 00 00 00    	je     c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc21:	31 d2                	xor    edx,edx
c001cc23:	51                   	push   ecx
c001cc24:	52                   	push   edx
c001cc25:	50                   	push   eax
c001cc26:	56                   	push   esi
c001cc27:	e8 86 6a ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	85 c0                	test   eax,eax
c001cc31:	0f 85 8c 00 00 00    	jne    c001ccc3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc37:	83 ec 0c             	sub    esp,0xc
c001cc3a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc3e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc42:	31 ed                	xor    ebp,ebp
c001cc44:	0f af c2             	imul   eax,edx
c001cc47:	50                   	push   eax
c001cc48:	e8 f6 2b ff ff       	call   c000f843 <malloc>
c001cc4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc53:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc5a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc5e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc62:	0f af c2             	imul   eax,edx
c001cc65:	99                   	cdq    
c001cc66:	52                   	push   edx
c001cc67:	50                   	push   eax
c001cc68:	56                   	push   esi
c001cc69:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc6c:	83 c4 20             	add    esp,0x20
c001cc6f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc77:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc7b:	0f 86 80 00 00 00    	jbe    c001cd01 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc81:	0f b7 fd             	movzx  edi,bp
c001cc84:	c1 e7 05             	shl    edi,0x5
c001cc87:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc8b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc8e:	75 6b                	jne    c001ccfb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc90:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc97:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc9e:	52                   	push   edx
c001cc9f:	31 d2                	xor    edx,edx
c001cca1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cca4:	52                   	push   edx
c001cca5:	50                   	push   eax
c001cca6:	56                   	push   esi
c001cca7:	e8 06 6a ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	85 c0                	test   eax,eax
c001ccb1:	74 17                	je     c001ccca <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	68 62 c1 02 c0       	push   0xc002c162
c001ccbb:	e8 78 63 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001ccc0:	83 c4 10             	add    esp,0x10
c001ccc3:	31 c0                	xor    eax,eax
c001ccc5:	e9 87 00 00 00       	jmp    c001cd51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ccca:	83 ec 0c             	sub    esp,0xc
c001cccd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ccd0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccd3:	50                   	push   eax
c001ccd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccdc:	56                   	push   esi
c001ccdd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cce1:	e8 cb fb ff ff       	call   c001c8b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cce6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccea:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccee:	83 c4 20             	add    esp,0x20
c001ccf1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccf5:	73 04                	jae    c001ccfb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccfb:	45                   	inc    ebp
c001ccfc:	e9 76 ff ff ff       	jmp    c001cc77 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cd01:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cd05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd0d:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd21:	05 00 10 00 00       	add    eax,0x1000
c001cd26:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2d:	e8 21 2b ff ff       	call   c000f853 <free>
c001cd32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd35:	e8 19 2b ff ff       	call   c000f853 <free>
c001cd3a:	58                   	pop    eax
c001cd3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd3f:	e8 0f 2b ff ff       	call   c000f853 <free>
c001cd44:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd47:	e8 06 69 ff ff       	call   c0013652 <File::close()>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	b0 01                	mov    al,0x1
c001cd51:	83 c4 3c             	add    esp,0x3c
c001cd54:	5b                   	pop    ebx
c001cd55:	5e                   	pop    esi
c001cd56:	5f                   	pop    edi
c001cd57:	5d                   	pop    ebp
c001cd58:	c3                   	ret    

c001cd59 <Thr::runtimeReferenceHelper()>:
c001cd59:	83 ec 18             	sub    esp,0x18
c001cd5c:	68 6a c1 02 c0       	push   0xc002c16a
c001cd61:	e8 d2 62 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001cd66:	fa                   	cli    
c001cd67:	83 c4 10             	add    esp,0x10
c001cd6a:	eb fe                	jmp    c001cd6a <Thr::runtimeReferenceHelper()+0x11>

c001cd6c <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd6c:	57                   	push   edi
c001cd6d:	56                   	push   esi
c001cd6e:	53                   	push   ebx
c001cd6f:	31 db                	xor    ebx,ebx
c001cd71:	39 1d a0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031aa0,ebx
c001cd77:	7e 3c                	jle    c001cdb5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd79:	8b 34 9d 20 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce5e0]
c001cd80:	31 ff                	xor    edi,edi
c001cd82:	39 3c 9d 20 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce6e0],edi
c001cd89:	7e 27                	jle    c001cdb2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd8b:	50                   	push   eax
c001cd8c:	50                   	push   eax
c001cd8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd91:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd93:	03 04 9d a0 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce660]
c001cd9a:	50                   	push   eax
c001cd9b:	e8 20 3b fe ff       	call   c00008c0 <strcmp>
c001cda0:	83 c4 10             	add    esp,0x10
c001cda3:	85 c0                	test   eax,eax
c001cda5:	75 05                	jne    c001cdac <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cda7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cdaa:	eb 0b                	jmp    c001cdb7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cdac:	83 c6 10             	add    esi,0x10
c001cdaf:	47                   	inc    edi
c001cdb0:	eb d0                	jmp    c001cd82 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cdb2:	43                   	inc    ebx
c001cdb3:	eb bc                	jmp    c001cd71 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cdb5:	31 c0                	xor    eax,eax
c001cdb7:	5b                   	pop    ebx
c001cdb8:	5e                   	pop    esi
c001cdb9:	5f                   	pop    edi
c001cdba:	c3                   	ret    

c001cdbb <Thr::loadKernelSymbolTable(char const*)>:
c001cdbb:	55                   	push   ebp
c001cdbc:	57                   	push   edi
c001cdbd:	56                   	push   esi
c001cdbe:	53                   	push   ebx
c001cdbf:	83 ec 68             	sub    esp,0x68
c001cdc2:	8b 35 f4 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031af4
c001cdc8:	68 14 01 00 00       	push   0x114
c001cdcd:	e8 71 2a ff ff       	call   c000f843 <malloc>
c001cdd2:	83 c4 0c             	add    esp,0xc
c001cdd5:	89 c3                	mov    ebx,eax
c001cdd7:	56                   	push   esi
c001cdd8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cddc:	50                   	push   eax
c001cddd:	e8 ae 67 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001cde2:	5e                   	pop    esi
c001cde3:	5f                   	pop    edi
c001cde4:	6a 01                	push   0x1
c001cde6:	53                   	push   ebx
c001cde7:	e8 08 68 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001cdec:	83 c4 10             	add    esp,0x10
c001cdef:	85 c0                	test   eax,eax
c001cdf1:	74 0a                	je     c001cdfd <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cdf3:	83 ec 0c             	sub    esp,0xc
c001cdf6:	68 8c c1 02 c0       	push   0xc002c18c
c001cdfb:	eb 34                	jmp    c001ce31 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdfd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ce05:	83 ec 0c             	sub    esp,0xc
c001ce08:	6a 34                	push   0x34
c001ce0a:	e8 34 2a ff ff       	call   c000f843 <malloc>
c001ce0f:	59                   	pop    ecx
c001ce10:	89 c7                	mov    edi,eax
c001ce12:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ce16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce18:	56                   	push   esi
c001ce19:	57                   	push   edi
c001ce1a:	6a 00                	push   0x0
c001ce1c:	6a 34                	push   0x34
c001ce1e:	53                   	push   ebx
c001ce1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce22:	83 c4 20             	add    esp,0x20
c001ce25:	85 c0                	test   eax,eax
c001ce27:	74 17                	je     c001ce40 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce29:	83 ec 0c             	sub    esp,0xc
c001ce2c:	68 a3 c1 02 c0       	push   0xc002c1a3
c001ce31:	e8 af d8 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	31 c0                	xor    eax,eax
c001ce3b:	e9 31 02 00 00       	jmp    c001d071 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce40:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce46:	75 e1                	jne    c001ce29 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce48:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce4b:	85 c0                	test   eax,eax
c001ce4d:	74 da                	je     c001ce29 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce4f:	52                   	push   edx
c001ce50:	31 d2                	xor    edx,edx
c001ce52:	52                   	push   edx
c001ce53:	50                   	push   eax
c001ce54:	53                   	push   ebx
c001ce55:	e8 58 68 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001ce5a:	83 c4 10             	add    esp,0x10
c001ce5d:	85 c0                	test   eax,eax
c001ce5f:	75 c8                	jne    c001ce29 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce61:	83 ec 0c             	sub    esp,0xc
c001ce64:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce68:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce6c:	31 ed                	xor    ebp,ebp
c001ce6e:	0f af c2             	imul   eax,edx
c001ce71:	50                   	push   eax
c001ce72:	e8 cc 29 ff ff       	call   c000f843 <malloc>
c001ce77:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce84:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce88:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce8c:	0f af c2             	imul   eax,edx
c001ce8f:	99                   	cdq    
c001ce90:	52                   	push   edx
c001ce91:	50                   	push   eax
c001ce92:	53                   	push   ebx
c001ce93:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce96:	83 c4 20             	add    esp,0x20
c001ce99:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cea1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cea9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ceb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ceb9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cebd:	0f 86 aa 00 00 00    	jbe    c001cf6d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cec3:	0f b7 f5             	movzx  esi,bp
c001cec6:	6b f6 28             	imul   esi,esi,0x28
c001cec9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cecd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ced0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced4:	50                   	push   eax
c001ced5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ced9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cedd:	8b 16                	mov    edx,DWORD PTR [esi]
c001cedf:	6b c0 28             	imul   eax,eax,0x28
c001cee2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cee6:	89 d0                	mov    eax,edx
c001cee8:	31 d2                	xor    edx,edx
c001ceea:	52                   	push   edx
c001ceeb:	50                   	push   eax
c001ceec:	53                   	push   ebx
c001ceed:	e8 c0 67 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001cef2:	83 c4 0c             	add    esp,0xc
c001cef5:	6a 20                	push   0x20
c001cef7:	6a 00                	push   0x0
c001cef9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cefd:	52                   	push   edx
c001cefe:	e8 75 38 fe ff       	call   c0000778 <memset>
c001cf03:	58                   	pop    eax
c001cf04:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf06:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cf0a:	51                   	push   ecx
c001cf0b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cf0f:	52                   	push   edx
c001cf10:	6a 00                	push   0x0
c001cf12:	6a 1f                	push   0x1f
c001cf14:	53                   	push   ebx
c001cf15:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf18:	83 c4 18             	add    esp,0x18
c001cf1b:	68 ba c1 02 c0       	push   0xc002c1ba
c001cf20:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf24:	52                   	push   edx
c001cf25:	e8 96 39 fe ff       	call   c00008c0 <strcmp>
c001cf2a:	83 c4 10             	add    esp,0x10
c001cf2d:	85 c0                	test   eax,eax
c001cf2f:	75 0f                	jne    c001cf40 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf31:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf40:	50                   	push   eax
c001cf41:	50                   	push   eax
c001cf42:	68 c2 c1 02 c0       	push   0xc002c1c2
c001cf47:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf4b:	50                   	push   eax
c001cf4c:	e8 6f 39 fe ff       	call   c00008c0 <strcmp>
c001cf51:	83 c4 10             	add    esp,0x10
c001cf54:	85 c0                	test   eax,eax
c001cf56:	75 0f                	jne    c001cf67 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf67:	45                   	inc    ebp
c001cf68:	e9 4c ff ff ff       	jmp    c001ceb9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf6d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf72:	75 10                	jne    c001cf84 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf74:	83 ec 0c             	sub    esp,0xc
c001cf77:	68 ca c1 02 c0       	push   0xc002c1ca
c001cf7c:	e8 64 d7 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001cf81:	83 c4 10             	add    esp,0x10
c001cf84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf89:	75 10                	jne    c001cf9b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf8b:	83 ec 0c             	sub    esp,0xc
c001cf8e:	68 ca c1 02 c0       	push   0xc002c1ca
c001cf93:	e8 4d d7 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001cf98:	83 c4 10             	add    esp,0x10
c001cf9b:	31 d2                	xor    edx,edx
c001cf9d:	50                   	push   eax
c001cf9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfa2:	52                   	push   edx
c001cfa3:	50                   	push   eax
c001cfa4:	53                   	push   ebx
c001cfa5:	e8 08 67 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001cfaa:	5a                   	pop    edx
c001cfab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cfaf:	e8 8f 28 ff ff       	call   c000f843 <malloc>
c001cfb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfbc:	31 c9                	xor    ecx,ecx
c001cfbe:	5e                   	pop    esi
c001cfbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfc1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfc5:	55                   	push   ebp
c001cfc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfca:	51                   	push   ecx
c001cfcb:	52                   	push   edx
c001cfcc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfd0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfd4:	53                   	push   ebx
c001cfd5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfd8:	83 c4 14             	add    esp,0x14
c001cfdb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfdf:	e8 5f 28 ff ff       	call   c000f843 <malloc>
c001cfe4:	89 c6                	mov    esi,eax
c001cfe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfe8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfeb:	56                   	push   esi
c001cfec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cff0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cff4:	51                   	push   ecx
c001cff5:	52                   	push   edx
c001cff6:	53                   	push   ebx
c001cff7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cffa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cffe:	8b 15 a0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031aa0
c001d004:	83 c4 1c             	add    esp,0x1c
c001d007:	c1 e8 04             	shr    eax,0x4
c001d00a:	89 04 95 20 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce6e0],eax
c001d011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d015:	31 d2                	xor    edx,edx
c001d017:	52                   	push   edx
c001d018:	50                   	push   eax
c001d019:	53                   	push   ebx
c001d01a:	e8 93 66 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d01f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d021:	31 d2                	xor    edx,edx
c001d023:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d026:	56                   	push   esi
c001d027:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d02b:	52                   	push   edx
c001d02c:	50                   	push   eax
c001d02d:	53                   	push   ebx
c001d02e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d031:	83 c4 14             	add    esp,0x14
c001d034:	53                   	push   ebx
c001d035:	e8 18 66 ff ff       	call   c0013652 <File::close()>
c001d03a:	5d                   	pop    ebp
c001d03b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d03f:	e8 0f 28 ff ff       	call   c000f853 <free>
c001d044:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d047:	e8 07 28 ff ff       	call   c000f853 <free>
c001d04c:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c001d051:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d055:	8d 50 01             	lea    edx,[eax+0x1]
c001d058:	89 0c 85 20 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5e0],ecx
c001d05f:	89 34 85 a0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce660],esi
c001d066:	89 15 a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,edx
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	b0 01                	mov    al,0x1
c001d071:	83 c4 5c             	add    esp,0x5c
c001d074:	5b                   	pop    ebx
c001d075:	5e                   	pop    esi
c001d076:	5f                   	pop    edi
c001d077:	5d                   	pop    ebp
c001d078:	c3                   	ret    

c001d079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d079:	55                   	push   ebp
c001d07a:	57                   	push   edi
c001d07b:	56                   	push   esi
c001d07c:	53                   	push   ebx
c001d07d:	81 ec 68 03 00 00    	sub    esp,0x368
c001d083:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d08a:	8b 1d f4 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031af4
c001d090:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d094:	68 14 01 00 00       	push   0x114
c001d099:	e8 a5 27 ff ff       	call   c000f843 <malloc>
c001d09e:	83 c4 0c             	add    esp,0xc
c001d0a1:	89 c5                	mov    ebp,eax
c001d0a3:	53                   	push   ebx
c001d0a4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d0ab:	50                   	push   eax
c001d0ac:	e8 df 64 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001d0b1:	5e                   	pop    esi
c001d0b2:	5f                   	pop    edi
c001d0b3:	6a 01                	push   0x1
c001d0b5:	55                   	push   ebp
c001d0b6:	e8 39 65 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001d0bb:	83 c4 10             	add    esp,0x10
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	0f 85 8d 06 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0ce:	83 ec 0c             	sub    esp,0xc
c001d0d1:	6a 34                	push   0x34
c001d0d3:	e8 6b 27 ff ff       	call   c000f843 <malloc>
c001d0d8:	5b                   	pop    ebx
c001d0d9:	89 c7                	mov    edi,eax
c001d0db:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0e2:	53                   	push   ebx
c001d0e3:	57                   	push   edi
c001d0e4:	6a 00                	push   0x0
c001d0e6:	6a 34                	push   0x34
c001d0e8:	55                   	push   ebp
c001d0e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0ec:	83 c4 20             	add    esp,0x20
c001d0ef:	85 c0                	test   eax,eax
c001d0f1:	0f 85 5c 06 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0fd:	0f 85 50 06 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d103:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d106:	85 c0                	test   eax,eax
c001d108:	0f 84 45 06 00 00    	je     c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d10e:	31 d2                	xor    edx,edx
c001d110:	51                   	push   ecx
c001d111:	52                   	push   edx
c001d112:	50                   	push   eax
c001d113:	55                   	push   ebp
c001d114:	e8 99 65 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	85 c0                	test   eax,eax
c001d11e:	0f 85 2f 06 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d124:	83 ec 0c             	sub    esp,0xc
c001d127:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d12a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d12e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d132:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d136:	0f af c2             	imul   eax,edx
c001d139:	50                   	push   eax
c001d13a:	e8 04 27 ff ff       	call   c000f843 <malloc>
c001d13f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d142:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d146:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d149:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d14d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d151:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d155:	0f af c2             	imul   eax,edx
c001d158:	99                   	cdq    
c001d159:	52                   	push   edx
c001d15a:	50                   	push   eax
c001d15b:	55                   	push   ebp
c001d15c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d15f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d162:	83 c4 20             	add    esp,0x20
c001d165:	85 c0                	test   eax,eax
c001d167:	0f 84 e6 05 00 00    	je     c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d16d:	52                   	push   edx
c001d16e:	31 d2                	xor    edx,edx
c001d170:	52                   	push   edx
c001d171:	50                   	push   eax
c001d172:	55                   	push   ebp
c001d173:	e8 3a 65 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d178:	83 c4 10             	add    esp,0x10
c001d17b:	85 c0                	test   eax,eax
c001d17d:	0f 85 d0 05 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d183:	83 ec 0c             	sub    esp,0xc
c001d186:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d18a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d18e:	31 f6                	xor    esi,esi
c001d190:	0f af c2             	imul   eax,edx
c001d193:	50                   	push   eax
c001d194:	e8 aa 26 ff ff       	call   c000f843 <malloc>
c001d199:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d19c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1a7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d1ab:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d1af:	0f af c2             	imul   eax,edx
c001d1b2:	99                   	cdq    
c001d1b3:	52                   	push   edx
c001d1b4:	50                   	push   eax
c001d1b5:	55                   	push   ebp
c001d1b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1b9:	83 c4 20             	add    esp,0x20
c001d1bc:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1c0:	0f 86 8a 00 00 00    	jbe    c001d250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1c6:	0f b7 de             	movzx  ebx,si
c001d1c9:	c1 e3 05             	shl    ebx,0x5
c001d1cc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1d0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1d3:	75 75                	jne    c001d24a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1d8:	31 d2                	xor    edx,edx
c001d1da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e5:	50                   	push   eax
c001d1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1e9:	52                   	push   edx
c001d1ea:	50                   	push   eax
c001d1eb:	55                   	push   ebp
c001d1ec:	e8 c1 64 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d1f1:	83 c4 10             	add    esp,0x10
c001d1f4:	85 c0                	test   eax,eax
c001d1f6:	0f 85 57 05 00 00    	jne    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1fc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d203:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d206:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d20a:	31 d2                	xor    edx,edx
c001d20c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d210:	83 ec 0c             	sub    esp,0xc
c001d213:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d217:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d21e:	50                   	push   eax
c001d21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d227:	52                   	push   edx
c001d228:	50                   	push   eax
c001d229:	55                   	push   ebp
c001d22a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d22d:	83 c4 1c             	add    esp,0x1c
c001d230:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d233:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d236:	50                   	push   eax
c001d237:	6a 00                	push   0x0
c001d239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d241:	50                   	push   eax
c001d242:	e8 31 35 fe ff       	call   c0000778 <memset>
c001d247:	83 c4 10             	add    esp,0x10
c001d24a:	46                   	inc    esi
c001d24b:	e9 6c ff ff ff       	jmp    c001d1bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d250:	53                   	push   ebx
c001d251:	31 db                	xor    ebx,ebx
c001d253:	68 00 01 00 00       	push   0x100
c001d258:	6a 00                	push   0x0
c001d25a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d25e:	50                   	push   eax
c001d25f:	e8 14 35 fe ff       	call   c0000778 <memset>
c001d264:	83 c4 0c             	add    esp,0xc
c001d267:	68 00 01 00 00       	push   0x100
c001d26c:	6a 00                	push   0x0
c001d26e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d275:	50                   	push   eax
c001d276:	e8 fd 34 fe ff       	call   c0000778 <memset>
c001d27b:	83 c4 10             	add    esp,0x10
c001d27e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d286:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d28e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d296:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d29e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2a6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d2aa:	0f 86 30 01 00 00    	jbe    c001d3e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d2b0:	0f b7 f3             	movzx  esi,bx
c001d2b3:	6b f6 28             	imul   esi,esi,0x28
c001d2b6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2ba:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2c1:	52                   	push   edx
c001d2c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2c6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2cc:	6b d2 28             	imul   edx,edx,0x28
c001d2cf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2d3:	31 d2                	xor    edx,edx
c001d2d5:	52                   	push   edx
c001d2d6:	50                   	push   eax
c001d2d7:	55                   	push   ebp
c001d2d8:	e8 d5 63 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d2dd:	83 c4 0c             	add    esp,0xc
c001d2e0:	6a 20                	push   0x20
c001d2e2:	6a 00                	push   0x0
c001d2e4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2eb:	51                   	push   ecx
c001d2ec:	e8 87 34 fe ff       	call   c0000778 <memset>
c001d2f1:	59                   	pop    ecx
c001d2f2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2f5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2f9:	52                   	push   edx
c001d2fa:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d301:	51                   	push   ecx
c001d302:	6a 00                	push   0x0
c001d304:	6a 1f                	push   0x1f
c001d306:	55                   	push   ebp
c001d307:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d30a:	83 c4 1c             	add    esp,0x1c
c001d30d:	6a 09                	push   0x9
c001d30f:	68 e4 c1 02 c0       	push   0xc002c1e4
c001d314:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d31b:	51                   	push   ecx
c001d31c:	e8 1f 33 fe ff       	call   c0000640 <memcmp>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	85 c0                	test   eax,eax
c001d326:	75 21                	jne    c001d349 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d330:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d334:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d338:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d33b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d342:	89 d0                	mov    eax,edx
c001d344:	40                   	inc    eax
c001d345:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d349:	50                   	push   eax
c001d34a:	6a 09                	push   0x9
c001d34c:	68 ee c1 02 c0       	push   0xc002c1ee
c001d351:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d358:	50                   	push   eax
c001d359:	e8 e2 32 fe ff       	call   c0000640 <memcmp>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	85 c0                	test   eax,eax
c001d363:	75 21                	jne    c001d386 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d369:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d36d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d371:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d375:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d378:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d37f:	89 d0                	mov    eax,edx
c001d381:	40                   	inc    eax
c001d382:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d386:	50                   	push   eax
c001d387:	50                   	push   eax
c001d388:	68 ba c1 02 c0       	push   0xc002c1ba
c001d38d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d394:	50                   	push   eax
c001d395:	e8 26 35 fe ff       	call   c00008c0 <strcmp>
c001d39a:	83 c4 10             	add    esp,0x10
c001d39d:	85 c0                	test   eax,eax
c001d39f:	75 0f                	jne    c001d3b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d3a1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3b0:	50                   	push   eax
c001d3b1:	50                   	push   eax
c001d3b2:	68 c2 c1 02 c0       	push   0xc002c1c2
c001d3b7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3be:	50                   	push   eax
c001d3bf:	e8 fc 34 fe ff       	call   c00008c0 <strcmp>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	85 c0                	test   eax,eax
c001d3c9:	75 0f                	jne    c001d3da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3da:	43                   	inc    ebx
c001d3db:	e9 c6 fe ff ff       	jmp    c001d2a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3e0:	31 d2                	xor    edx,edx
c001d3e2:	50                   	push   eax
c001d3e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3e7:	52                   	push   edx
c001d3e8:	50                   	push   eax
c001d3e9:	55                   	push   ebp
c001d3ea:	e8 c3 62 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d3ef:	58                   	pop    eax
c001d3f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3f4:	e8 4a 24 ff ff       	call   c000f843 <malloc>
c001d3f9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3fc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d400:	31 d2                	xor    edx,edx
c001d402:	58                   	pop    eax
c001d403:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d407:	53                   	push   ebx
c001d408:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d40c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d410:	52                   	push   edx
c001d411:	50                   	push   eax
c001d412:	55                   	push   ebp
c001d413:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d416:	83 c4 14             	add    esp,0x14
c001d419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d41d:	e8 21 24 ff ff       	call   c000f843 <malloc>
c001d422:	31 d2                	xor    edx,edx
c001d424:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d428:	83 c4 0c             	add    esp,0xc
c001d42b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d42f:	52                   	push   edx
c001d430:	50                   	push   eax
c001d431:	55                   	push   ebp
c001d432:	e8 7b 62 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d437:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d43a:	31 d2                	xor    edx,edx
c001d43c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d43f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d447:	52                   	push   edx
c001d448:	50                   	push   eax
c001d449:	55                   	push   ebp
c001d44a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d44d:	83 c4 20             	add    esp,0x20
c001d450:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d458:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d45c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d460:	0f 84 f1 02 00 00    	je     c001d757 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d466:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d46d:	31 d2                	xor    edx,edx
c001d46f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d473:	c1 e8 03             	shr    eax,0x3
c001d476:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d47a:	51                   	push   ecx
c001d47b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d47f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d483:	52                   	push   edx
c001d484:	50                   	push   eax
c001d485:	55                   	push   ebp
c001d486:	e8 27 62 ff ff       	call   c00136b2 <File::seek(unsigned long long)>
c001d48b:	5b                   	pop    ebx
c001d48c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d490:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d497:	e8 a7 23 ff ff       	call   c000f843 <malloc>
c001d49c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d49f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4a3:	31 d2                	xor    edx,edx
c001d4a5:	5e                   	pop    esi
c001d4a6:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d4aa:	50                   	push   eax
c001d4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4b3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4ba:	52                   	push   edx
c001d4bb:	50                   	push   eax
c001d4bc:	55                   	push   ebp
c001d4bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4c0:	83 c4 20             	add    esp,0x20
c001d4c3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4cf:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4d3:	0f 8d 62 02 00 00    	jge    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4e1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4e6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4f1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4f5:	89 d8                	mov    eax,ebx
c001d4f7:	c1 e8 08             	shr    eax,0x8
c001d4fa:	89 c6                	mov    esi,eax
c001d4fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d500:	c1 e6 04             	shl    esi,0x4
c001d503:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d507:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d50a:	85 d2                	test   edx,edx
c001d50c:	0f 85 bf 00 00 00    	jne    c001d5d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d512:	83 ec 0c             	sub    esp,0xc
c001d515:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d519:	03 06                	add    eax,DWORD PTR [esi]
c001d51b:	50                   	push   eax
c001d51c:	e8 4b f8 ff ff       	call   c001cd6c <Thr::getAddressOfKernelSymbol(char const*)>
c001d521:	83 c4 10             	add    esp,0x10
c001d524:	89 c2                	mov    edx,eax
c001d526:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d52b:	85 c0                	test   eax,eax
c001d52d:	0f 85 9e 00 00 00    	jne    c001d5d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d53a:	03 06                	add    eax,DWORD PTR [esi]
c001d53c:	50                   	push   eax
c001d53d:	e8 b3 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	89 c2                	mov    edx,eax
c001d547:	85 c0                	test   eax,eax
c001d549:	0f 85 82 00 00 00    	jne    c001d5d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d54f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d553:	50                   	push   eax
c001d554:	50                   	push   eax
c001d555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d559:	03 06                	add    eax,DWORD PTR [esi]
c001d55b:	50                   	push   eax
c001d55c:	68 f8 c1 02 c0       	push   0xc002c1f8
c001d561:	e8 d2 5a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001d566:	58                   	pop    eax
c001d567:	5a                   	pop    edx
c001d568:	68 12 c2 02 c0       	push   0xc002c212
c001d56d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d574:	50                   	push   eax
c001d575:	e8 ba 32 fe ff       	call   c0000834 <strcpy>
c001d57a:	59                   	pop    ecx
c001d57b:	58                   	pop    eax
c001d57c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d580:	03 06                	add    eax,DWORD PTR [esi]
c001d582:	50                   	push   eax
c001d583:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d58a:	50                   	push   eax
c001d58b:	e8 e4 33 fe ff       	call   c0000974 <strcat>
c001d590:	58                   	pop    eax
c001d591:	5a                   	pop    edx
c001d592:	68 a8 c2 02 c0       	push   0xc002c2a8
c001d597:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d59e:	50                   	push   eax
c001d59f:	e8 d0 33 fe ff       	call   c0000974 <strcat>
c001d5a4:	83 c4 10             	add    esp,0x10
c001d5a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ac:	0f 84 43 01 00 00    	je     c001d6f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5b2:	83 ec 0c             	sub    esp,0xc
c001d5b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5bc:	50                   	push   eax
c001d5bd:	e8 23 d1 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5c9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5cd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5d1:	80 fb 01             	cmp    bl,0x1
c001d5d4:	75 7d                	jne    c001d653 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5d6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5dd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5e1:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5e5:	01 ce                	add    esi,ecx
c001d5e7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5ed:	0f 94 c0             	sete   al
c001d5f0:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5f6:	0f 94 c3             	sete   bl
c001d5f9:	09 c3                	or     ebx,eax
c001d5fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5fd:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d602:	74 36                	je     c001d63a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d604:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d607:	84 db                	test   bl,bl
c001d609:	75 0a                	jne    c001d615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d60b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d60f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d613:	76 37                	jbe    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d615:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d619:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d61e:	0f 84 d1 00 00 00    	je     c001d6f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	68 29 c2 02 c0       	push   0xc002c229
c001d62c:	e8 b4 d0 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d638:	eb 12                	jmp    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d63a:	01 c1                	add    ecx,eax
c001d63c:	84 db                	test   bl,bl
c001d63e:	75 0c                	jne    c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d640:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d644:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d648:	77 02                	ja     c001d64c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d64a:	01 d1                	add    ecx,edx
c001d64c:	89 0e                	mov    DWORD PTR [esi],ecx
c001d64e:	e9 df 00 00 00       	jmp    c001d732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d653:	80 fb 02             	cmp    bl,0x2
c001d656:	75 71                	jne    c001d6c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d658:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d65f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d663:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d667:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d66d:	74 15                	je     c001d684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d66f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d675:	74 0d                	je     c001d684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d677:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d67b:	83 e8 04             	sub    eax,0x4
c001d67e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d682:	76 1f                	jbe    c001d6a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d684:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d688:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d68d:	74 66                	je     c001d6f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d68f:	83 ec 0c             	sub    esp,0xc
c001d692:	68 45 c2 02 c0       	push   0xc002c245
c001d697:	e8 49 d0 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d69c:	83 c4 10             	add    esp,0x10
c001d69f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6a3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d6a5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d6aa:	74 13                	je     c001d6bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d6ac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d6b0:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d6b7:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6bb:	01 c8                	add    eax,ecx
c001d6bd:	eb 04                	jmp    c001d6c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d6bf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6c3:	01 c2                	add    edx,eax
c001d6c5:	89 16                	mov    DWORD PTR [esi],edx
c001d6c7:	eb 69                	jmp    c001d732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6c9:	0f b6 db             	movzx  ebx,bl
c001d6cc:	50                   	push   eax
c001d6cd:	50                   	push   eax
c001d6ce:	53                   	push   ebx
c001d6cf:	68 61 c2 02 c0       	push   0xc002c261
c001d6d4:	e8 5f 59 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001d6d9:	83 c4 10             	add    esp,0x10
c001d6dc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6e1:	74 12                	je     c001d6f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6e3:	83 ec 0c             	sub    esp,0xc
c001d6e6:	68 6c c2 02 c0       	push   0xc002c26c
c001d6eb:	e8 f5 cf ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d6f0:	83 c4 10             	add    esp,0x10
c001d6f3:	eb 3d                	jmp    c001d732 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6f5:	83 ec 0c             	sub    esp,0xc
c001d6f8:	55                   	push   ebp
c001d6f9:	e8 54 5f ff ff       	call   c0013652 <File::close()>
c001d6fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d701:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d704:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d707:	59                   	pop    ecx
c001d708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d70c:	e8 42 21 ff ff       	call   c000f853 <free>
c001d711:	5b                   	pop    ebx
c001d712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d716:	e8 38 21 ff ff       	call   c000f853 <free>
c001d71b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d71e:	e8 30 21 ff ff       	call   c000f853 <free>
c001d723:	5e                   	pop    esi
c001d724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d728:	e8 26 21 ff ff       	call   c000f853 <free>
c001d72d:	83 c4 10             	add    esp,0x10
c001d730:	eb 21                	jmp    c001d753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d732:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d736:	e9 90 fd ff ff       	jmp    c001d4cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d73b:	83 ec 0c             	sub    esp,0xc
c001d73e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d742:	e8 0c 21 ff ff       	call   c000f853 <free>
c001d747:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	e9 05 fd ff ff       	jmp    c001d458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d753:	31 c0                	xor    eax,eax
c001d755:	eb 33                	jmp    c001d78a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d757:	83 ec 0c             	sub    esp,0xc
c001d75a:	55                   	push   ebp
c001d75b:	e8 f2 5e ff ff       	call   c0013652 <File::close()>
c001d760:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d763:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d769:	58                   	pop    eax
c001d76a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d76e:	e8 e0 20 ff ff       	call   c000f853 <free>
c001d773:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d776:	e8 d8 20 ff ff       	call   c000f853 <free>
c001d77b:	5a                   	pop    edx
c001d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d780:	e8 ce 20 ff ff       	call   c000f853 <free>
c001d785:	83 c4 10             	add    esp,0x10
c001d788:	b0 01                	mov    al,0x1
c001d78a:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d790:	5b                   	pop    ebx
c001d791:	5e                   	pop    esi
c001d792:	5f                   	pop    edi
c001d793:	5d                   	pop    ebp
c001d794:	c3                   	ret    

c001d795 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d795:	56                   	push   esi
c001d796:	31 d2                	xor    edx,edx
c001d798:	53                   	push   ebx
c001d799:	8b 1d 00 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031300
c001d79f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7a3:	39 d3                	cmp    ebx,edx
c001d7a5:	7e 1b                	jle    c001d7c2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d7a7:	8b 04 95 20 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceae0]
c001d7ae:	39 c8                	cmp    eax,ecx
c001d7b0:	77 0d                	ja     c001d7bf <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d7b2:	8b 34 95 20 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcece0]
c001d7b9:	01 c6                	add    esi,eax
c001d7bb:	39 ce                	cmp    esi,ecx
c001d7bd:	77 05                	ja     c001d7c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7bf:	42                   	inc    edx
c001d7c0:	eb e1                	jmp    c001d7a3 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7c2:	31 c0                	xor    eax,eax
c001d7c4:	5b                   	pop    ebx
c001d7c5:	5e                   	pop    esi
c001d7c6:	c3                   	ret    

c001d7c7 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7c7:	53                   	push   ebx
c001d7c8:	31 c0                	xor    eax,eax
c001d7ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7ce:	8b 1d 00 13 03 c0    	mov    ebx,DWORD PTR ds:0xc0031300
c001d7d4:	39 c3                	cmp    ebx,eax
c001d7d6:	7e 22                	jle    c001d7fa <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7d8:	8b 14 85 20 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceae0]
c001d7df:	39 ca                	cmp    edx,ecx
c001d7e1:	77 14                	ja     c001d7f7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7e3:	03 14 85 20 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcece0]
c001d7ea:	39 ca                	cmp    edx,ecx
c001d7ec:	76 09                	jbe    c001d7f7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7ee:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c001d7f5:	eb 05                	jmp    c001d7fc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7f7:	40                   	inc    eax
c001d7f8:	eb da                	jmp    c001d7d4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7fa:	31 c0                	xor    eax,eax
c001d7fc:	5b                   	pop    ebx
c001d7fd:	c3                   	ret    

c001d7fe <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7fe:	53                   	push   ebx
c001d7ff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d803:	53                   	push   ebx
c001d804:	e8 8c ff ff ff       	call   c001d795 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d809:	5a                   	pop    edx
c001d80a:	31 d2                	xor    edx,edx
c001d80c:	85 c0                	test   eax,eax
c001d80e:	74 04                	je     c001d814 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d810:	89 da                	mov    edx,ebx
c001d812:	29 c2                	sub    edx,eax
c001d814:	89 d0                	mov    eax,edx
c001d816:	5b                   	pop    ebx
c001d817:	c3                   	ret    

c001d818 <Thr::loadDLL(char const*, bool)>:
c001d818:	55                   	push   ebp
c001d819:	57                   	push   edi
c001d81a:	56                   	push   esi
c001d81b:	53                   	push   ebx
c001d81c:	81 ec 34 01 00 00    	sub    esp,0x134
c001d822:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d829:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d830:	56                   	push   esi
c001d831:	68 84 c2 02 c0       	push   0xc002c284
c001d836:	e8 fd 57 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001d83b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d842:	e8 fc 1f ff ff       	call   c000f843 <malloc>
c001d847:	83 c4 0c             	add    esp,0xc
c001d84a:	89 c3                	mov    ebx,eax
c001d84c:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001d852:	56                   	push   esi
c001d853:	50                   	push   eax
c001d854:	e8 37 5d ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001d859:	83 c4 10             	add    esp,0x10
c001d85c:	85 db                	test   ebx,ebx
c001d85e:	75 3c                	jne    c001d89c <Thr::loadDLL(char const*, bool)+0x84>
c001d860:	89 e8                	mov    eax,ebp
c001d862:	84 c0                	test   al,al
c001d864:	0f 84 f0 01 00 00    	je     c001da5a <Thr::loadDLL(char const*, bool)+0x242>
c001d86a:	50                   	push   eax
c001d86b:	50                   	push   eax
c001d86c:	68 95 c2 02 c0       	push   0xc002c295
c001d871:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d875:	57                   	push   edi
c001d876:	e8 b9 2f fe ff       	call   c0000834 <strcpy>
c001d87b:	58                   	pop    eax
c001d87c:	5a                   	pop    edx
c001d87d:	56                   	push   esi
c001d87e:	57                   	push   edi
c001d87f:	e8 f0 30 fe ff       	call   c0000974 <strcat>
c001d884:	59                   	pop    ecx
c001d885:	58                   	pop    eax
c001d886:	68 a8 c2 02 c0       	push   0xc002c2a8
c001d88b:	57                   	push   edi
c001d88c:	e8 e3 30 fe ff       	call   c0000974 <strcat>
c001d891:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d894:	e8 4c ce ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d899:	83 c4 10             	add    esp,0x10
c001d89c:	50                   	push   eax
c001d89d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d8a1:	50                   	push   eax
c001d8a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d8a6:	50                   	push   eax
c001d8a7:	53                   	push   ebx
c001d8a8:	e8 f3 5f ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	85 db                	test   ebx,ebx
c001d8b2:	74 0c                	je     c001d8c0 <Thr::loadDLL(char const*, bool)+0xa8>
c001d8b4:	83 ec 0c             	sub    esp,0xc
c001d8b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8b9:	53                   	push   ebx
c001d8ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8bd:	83 c4 10             	add    esp,0x10
c001d8c0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8c5:	75 0a                	jne    c001d8d1 <Thr::loadDLL(char const*, bool)+0xb9>
c001d8c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8cb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8cf:	75 3c                	jne    c001d90d <Thr::loadDLL(char const*, bool)+0xf5>
c001d8d1:	89 e8                	mov    eax,ebp
c001d8d3:	84 c0                	test   al,al
c001d8d5:	0f 84 67 01 00 00    	je     c001da42 <Thr::loadDLL(char const*, bool)+0x22a>
c001d8db:	50                   	push   eax
c001d8dc:	50                   	push   eax
c001d8dd:	68 95 c2 02 c0       	push   0xc002c295
c001d8e2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8e6:	53                   	push   ebx
c001d8e7:	e8 48 2f fe ff       	call   c0000834 <strcpy>
c001d8ec:	58                   	pop    eax
c001d8ed:	5a                   	pop    edx
c001d8ee:	56                   	push   esi
c001d8ef:	53                   	push   ebx
c001d8f0:	e8 7f 30 fe ff       	call   c0000974 <strcat>
c001d8f5:	59                   	pop    ecx
c001d8f6:	5f                   	pop    edi
c001d8f7:	68 a8 c2 02 c0       	push   0xc002c2a8
c001d8fc:	53                   	push   ebx
c001d8fd:	e8 72 30 fe ff       	call   c0000974 <strcat>
c001d902:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d905:	e8 db cd ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d90a:	83 c4 10             	add    esp,0x10
c001d90d:	e8 2e 45 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d912:	51                   	push   ecx
c001d913:	68 03 08 00 00       	push   0x803
c001d918:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d91c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d920:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d926:	83 d3 00             	adc    ebx,0x0
c001d929:	89 ca                	mov    edx,ecx
c001d92b:	89 d1                	mov    ecx,edx
c001d92d:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d931:	51                   	push   ecx
c001d932:	50                   	push   eax
c001d933:	e8 44 4b ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001d938:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d93c:	89 c3                	mov    ebx,eax
c001d93e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d942:	05 ff 0f 00 00       	add    eax,0xfff
c001d947:	83 d2 00             	adc    edx,0x0
c001d94a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d94e:	c1 ea 0c             	shr    edx,0xc
c001d951:	52                   	push   edx
c001d952:	50                   	push   eax
c001d953:	53                   	push   ebx
c001d954:	68 aa c2 02 c0       	push   0xc002c2aa
c001d959:	e8 da 56 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001d95e:	83 c4 14             	add    esp,0x14
c001d961:	56                   	push   esi
c001d962:	e8 2d 2e fe ff       	call   c0000794 <strlen>
c001d967:	8b 3d 00 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031300
c001d96d:	40                   	inc    eax
c001d96e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d971:	e8 cd 1e ff ff       	call   c000f843 <malloc>
c001d976:	89 04 bd 20 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce8e0],eax
c001d97d:	5f                   	pop    edi
c001d97e:	58                   	pop    eax
c001d97f:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c001d984:	56                   	push   esi
c001d985:	ff 34 85 20 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce8e0]
c001d98c:	e8 a3 2e fe ff       	call   c0000834 <strcpy>
c001d991:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c001d996:	8d 50 01             	lea    edx,[eax+0x1]
c001d999:	89 1c 85 20 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceae0],ebx
c001d9a0:	89 15 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,edx
c001d9a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9aa:	83 c4 0c             	add    esp,0xc
c001d9ad:	89 14 85 20 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcece0],edx
c001d9b4:	6a 01                	push   0x1
c001d9b6:	53                   	push   ebx
c001d9b7:	56                   	push   esi
c001d9b8:	e8 bc f6 ff ff       	call   c001d079 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	89 c7                	mov    edi,eax
c001d9c2:	84 c0                	test   al,al
c001d9c4:	0f 85 8c 00 00 00    	jne    c001da56 <Thr::loadDLL(char const*, bool)+0x23e>
c001d9ca:	89 e8                	mov    eax,ebp
c001d9cc:	84 c0                	test   al,al
c001d9ce:	74 76                	je     c001da46 <Thr::loadDLL(char const*, bool)+0x22e>
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	68 ce c2 02 c0       	push   0xc002c2ce
c001d9d8:	e8 08 cd ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001d9dd:	83 c4 10             	add    esp,0x10
c001d9e0:	eb 64                	jmp    c001da46 <Thr::loadDLL(char const*, bool)+0x22e>
c001d9e2:	e8 59 44 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d9e7:	89 f5                	mov    ebp,esi
c001d9e9:	c1 e5 0c             	shl    ebp,0xc
c001d9ec:	52                   	push   edx
c001d9ed:	01 dd                	add    ebp,ebx
c001d9ef:	52                   	push   edx
c001d9f0:	55                   	push   ebp
c001d9f1:	50                   	push   eax
c001d9f2:	e8 ff 45 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9fd:	75 0c                	jne    c001da0b <Thr::loadDLL(char const*, bool)+0x1f3>
c001d9ff:	83 ec 0c             	sub    esp,0xc
c001da02:	55                   	push   ebp
c001da03:	e8 53 24 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001da08:	83 c4 10             	add    esp,0x10
c001da0b:	46                   	inc    esi
c001da0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da14:	05 ff 0f 00 00       	add    eax,0xfff
c001da19:	83 d2 00             	adc    edx,0x0
c001da1c:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da20:	c1 ea 0c             	shr    edx,0xc
c001da23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da2b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da2f:	ba 00 00 00 00       	mov    edx,0x0
c001da34:	89 d0                	mov    eax,edx
c001da36:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da3a:	72 a6                	jb     c001d9e2 <Thr::loadDLL(char const*, bool)+0x1ca>
c001da3c:	89 f8                	mov    eax,edi
c001da3e:	84 c0                	test   al,al
c001da40:	75 18                	jne    c001da5a <Thr::loadDLL(char const*, bool)+0x242>
c001da42:	31 db                	xor    ebx,ebx
c001da44:	eb 14                	jmp    c001da5a <Thr::loadDLL(char const*, bool)+0x242>
c001da46:	83 ec 0c             	sub    esp,0xc
c001da49:	68 ed c2 02 c0       	push   0xc002c2ed
c001da4e:	e8 92 cc ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001da53:	83 c4 10             	add    esp,0x10
c001da56:	31 f6                	xor    esi,esi
c001da58:	eb b2                	jmp    c001da0c <Thr::loadDLL(char const*, bool)+0x1f4>
c001da5a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da60:	89 d8                	mov    eax,ebx
c001da62:	5b                   	pop    ebx
c001da63:	5e                   	pop    esi
c001da64:	5f                   	pop    edi
c001da65:	5d                   	pop    ebp
c001da66:	c3                   	ret    

c001da67 <Thr::executeDLL(unsigned long, void*)>:
c001da67:	56                   	push   esi
c001da68:	53                   	push   ebx
c001da69:	52                   	push   edx
c001da6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da6e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da72:	85 db                	test   ebx,ebx
c001da74:	75 10                	jne    c001da86 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da76:	83 ec 0c             	sub    esp,0xc
c001da79:	68 09 c3 02 c0       	push   0xc002c309
c001da7e:	e8 62 cc ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001da83:	83 c4 10             	add    esp,0x10
c001da86:	50                   	push   eax
c001da87:	50                   	push   eax
c001da88:	53                   	push   ebx
c001da89:	68 33 c3 02 c0       	push   0xc002c333
c001da8e:	e8 a5 55 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001da93:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da97:	89 d8                	mov    eax,ebx
c001da99:	83 c4 14             	add    esp,0x14
c001da9c:	5b                   	pop    ebx
c001da9d:	5e                   	pop    esi
c001da9e:	ff e0                	jmp    eax

c001daa0 <changeTSS>:
c001daa0:	83 ec 14             	sub    esp,0x14
c001daa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daa8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001daab:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dab0:	c1 e2 15             	shl    edx,0x15
c001dab3:	29 d0                	sub    eax,edx
c001dab5:	50                   	push   eax
c001dab6:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001dabb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dac1:	05 7c 11 00 00       	add    eax,0x117c
c001dac6:	50                   	push   eax
c001dac7:	e8 18 3a ff ff       	call   c00114e4 <TSS::setESP(unsigned long)>
c001dacc:	83 c4 1c             	add    esp,0x1c
c001dacf:	c3                   	ret    

c001dad0 <Process::addArgs(char**)>:
c001dad0:	57                   	push   edi
c001dad1:	56                   	push   esi
c001dad2:	53                   	push   ebx
c001dad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dad7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dadb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dae5:	85 ff                	test   edi,edi
c001dae7:	74 3d                	je     c001db26 <Process::addArgs(char**)+0x56>
c001dae9:	8b 07                	mov    eax,DWORD PTR [edi]
c001daeb:	85 c0                	test   eax,eax
c001daed:	74 37                	je     c001db26 <Process::addArgs(char**)+0x56>
c001daef:	31 db                	xor    ebx,ebx
c001daf1:	83 ec 0c             	sub    esp,0xc
c001daf4:	50                   	push   eax
c001daf5:	e8 9a 2c fe ff       	call   c0000794 <strlen>
c001dafa:	40                   	inc    eax
c001dafb:	89 04 24             	mov    DWORD PTR [esp],eax
c001dafe:	e8 40 1d ff ff       	call   c000f843 <malloc>
c001db03:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db0a:	5a                   	pop    edx
c001db0b:	59                   	pop    ecx
c001db0c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db0f:	43                   	inc    ebx
c001db10:	50                   	push   eax
c001db11:	e8 1e 2d fe ff       	call   c0000834 <strcpy>
c001db16:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db1c:	83 c4 10             	add    esp,0x10
c001db1f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db22:	85 c0                	test   eax,eax
c001db24:	75 cb                	jne    c001daf1 <Process::addArgs(char**)+0x21>
c001db26:	5b                   	pop    ebx
c001db27:	5e                   	pop    esi
c001db28:	5f                   	pop    edi
c001db29:	c3                   	ret    

c001db2a <Process::Process(char const*, Process*, char**)>:
c001db2a:	56                   	push   esi
c001db2b:	53                   	push   ebx
c001db2c:	83 ec 14             	sub    esp,0x14
c001db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db33:	05 0c 02 00 00       	add    eax,0x20c
c001db38:	bb 07 00 00 00       	mov    ebx,0x7
c001db3d:	89 c6                	mov    esi,eax
c001db3f:	85 db                	test   ebx,ebx
c001db41:	78 12                	js     c001db55 <Process::Process(char const*, Process*, char**)+0x2b>
c001db43:	83 ec 0c             	sub    esp,0xc
c001db46:	56                   	push   esi
c001db47:	e8 26 b2 00 00       	call   c0028d72 <ThreadControlBlock::ThreadControlBlock()>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	83 c6 63             	add    esi,0x63
c001db52:	4b                   	dec    ebx
c001db53:	eb ea                	jmp    c001db3f <Process::Process(char const*, Process*, char**)+0x15>
c001db55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db59:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db60:	83 ec 0c             	sub    esp,0xc
c001db63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db67:	e8 ca c9 ff ff       	call   c001a536 <Krnl::newProcessEnv(Process*)>
c001db6c:	83 c4 10             	add    esp,0x10
c001db6f:	89 c2                	mov    edx,eax
c001db71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db75:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db88:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c001db8d:	8d 50 01             	lea    edx,[eax+0x1]
c001db90:	89 15 f0 da 02 c0    	mov    DWORD PTR ds:0xc002daf0,edx
c001db96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db9a:	89 02                	mov    DWORD PTR [edx],eax
c001db9c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbab:	e8 93 1c ff ff       	call   c000f843 <malloc>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	89 c3                	mov    ebx,eax
c001dbb5:	83 ec 08             	sub    esp,0x8
c001dbb8:	6a 00                	push   0x0
c001dbba:	53                   	push   ebx
c001dbbb:	e8 64 4c ff ff       	call   c0012824 <VAS::VAS(bool)>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbe3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbf3:	85 c0                	test   eax,eax
c001dbf5:	74 42                	je     c001dc39 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc01:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc1b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc25:	05 0c 01 00 00       	add    eax,0x10c
c001dc2a:	83 ec 08             	sub    esp,0x8
c001dc2d:	52                   	push   edx
c001dc2e:	50                   	push   eax
c001dc2f:	e8 00 2c fe ff       	call   c0000834 <strcpy>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	eb 63                	jmp    c001dc9c <Process::Process(char const*, Process*, char**)+0x172>
c001dc39:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc48:	e8 f6 1b ff ff       	call   c000f843 <malloc>
c001dc4d:	83 c4 10             	add    esp,0x10
c001dc50:	89 c3                	mov    ebx,eax
c001dc52:	83 ec 08             	sub    esp,0x8
c001dc55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc59:	53                   	push   ebx
c001dc5a:	e8 83 35 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc66:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc70:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc76:	83 ec 0c             	sub    esp,0xc
c001dc79:	50                   	push   eax
c001dc7a:	e8 56 29 ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc86:	05 0c 01 00 00       	add    eax,0x10c
c001dc8b:	83 ec 08             	sub    esp,0x8
c001dc8e:	68 52 c3 02 c0       	push   0xc002c352
c001dc93:	50                   	push   eax
c001dc94:	e8 9b 2b fe ff       	call   c0000834 <strcpy>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca0:	83 c0 0c             	add    eax,0xc
c001dca3:	83 ec 08             	sub    esp,0x8
c001dca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcaa:	50                   	push   eax
c001dcab:	e8 84 2b fe ff       	call   c0000834 <strcpy>
c001dcb0:	83 c4 10             	add    esp,0x10
c001dcb3:	83 ec 08             	sub    esp,0x8
c001dcb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dcba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcbe:	e8 0d fe ff ff       	call   c001dad0 <Process::addArgs(char**)>
c001dcc3:	83 c4 10             	add    esp,0x10
c001dcc6:	83 ec 08             	sub    esp,0x8
c001dcc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcd1:	e8 6d ee ff ff       	call   c001cb43 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcd6:	83 c4 10             	add    esp,0x10
c001dcd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dce1:	83 f0 01             	xor    eax,0x1
c001dce4:	88 c2                	mov    dl,al
c001dce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcea:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcf5:	83 ec 08             	sub    esp,0x8
c001dcf8:	50                   	push   eax
c001dcf9:	68 50 c4 02 c0       	push   0xc002c450
c001dcfe:	e8 35 53 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001dd03:	83 c4 10             	add    esp,0x10
c001dd06:	90                   	nop
c001dd07:	83 c4 14             	add    esp,0x14
c001dd0a:	5b                   	pop    ebx
c001dd0b:	5e                   	pop    esi
c001dd0c:	c3                   	ret    
c001dd0d:	90                   	nop

c001dd0e <Process::Process(bool, char const*, Process*, char**)>:
c001dd0e:	56                   	push   esi
c001dd0f:	53                   	push   ebx
c001dd10:	83 ec 24             	sub    esp,0x24
c001dd13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1f:	05 0c 02 00 00       	add    eax,0x20c
c001dd24:	bb 07 00 00 00       	mov    ebx,0x7
c001dd29:	89 c6                	mov    esi,eax
c001dd2b:	85 db                	test   ebx,ebx
c001dd2d:	78 12                	js     c001dd41 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	56                   	push   esi
c001dd33:	e8 3a b0 00 00       	call   c0028d72 <ThreadControlBlock::ThreadControlBlock()>
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	83 c6 63             	add    esi,0x63
c001dd3e:	4b                   	dec    ebx
c001dd3f:	eb ea                	jmp    c001dd2b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd45:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd4c:	83 ec 0c             	sub    esp,0xc
c001dd4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd53:	e8 de c7 ff ff       	call   c001a536 <Krnl::newProcessEnv(Process*)>
c001dd58:	83 c4 10             	add    esp,0x10
c001dd5b:	89 c2                	mov    edx,eax
c001dd5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd61:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6b:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd74:	a1 f0 da 02 c0       	mov    eax,ds:0xc002daf0
c001dd79:	8d 50 01             	lea    edx,[eax+0x1]
c001dd7c:	89 15 f0 da 02 c0    	mov    DWORD PTR ds:0xc002daf0,edx
c001dd82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd86:	89 02                	mov    DWORD PTR [edx],eax
c001dd88:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd90:	83 ec 0c             	sub    esp,0xc
c001dd93:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd97:	e8 a7 1a ff ff       	call   c000f843 <malloc>
c001dd9c:	83 c4 10             	add    esp,0x10
c001dd9f:	89 c3                	mov    ebx,eax
c001dda1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dda6:	83 ec 08             	sub    esp,0x8
c001dda9:	50                   	push   eax
c001ddaa:	53                   	push   ebx
c001ddab:	e8 74 4a ff ff       	call   c0012824 <VAS::VAS(bool)>
c001ddb0:	83 c4 10             	add    esp,0x10
c001ddb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb7:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ddbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddd3:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dddd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dde3:	85 c0                	test   eax,eax
c001dde5:	74 42                	je     c001de29 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dde7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddeb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddf1:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfb:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de0b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de15:	05 0c 01 00 00       	add    eax,0x10c
c001de1a:	83 ec 08             	sub    esp,0x8
c001de1d:	52                   	push   edx
c001de1e:	50                   	push   eax
c001de1f:	e8 10 2a fe ff       	call   c0000834 <strcpy>
c001de24:	83 c4 10             	add    esp,0x10
c001de27:	eb 63                	jmp    c001de8c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de29:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001de31:	83 ec 0c             	sub    esp,0xc
c001de34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de38:	e8 06 1a ff ff       	call   c000f843 <malloc>
c001de3d:	83 c4 10             	add    esp,0x10
c001de40:	89 c3                	mov    ebx,eax
c001de42:	83 ec 08             	sub    esp,0x8
c001de45:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de49:	53                   	push   ebx
c001de4a:	e8 93 33 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de56:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de60:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de66:	83 ec 0c             	sub    esp,0xc
c001de69:	50                   	push   eax
c001de6a:	e8 66 27 ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001de6f:	83 c4 10             	add    esp,0x10
c001de72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de76:	05 0c 01 00 00       	add    eax,0x10c
c001de7b:	83 ec 08             	sub    esp,0x8
c001de7e:	68 52 c3 02 c0       	push   0xc002c352
c001de83:	50                   	push   eax
c001de84:	e8 ab 29 fe ff       	call   c0000834 <strcpy>
c001de89:	83 c4 10             	add    esp,0x10
c001de8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de90:	83 c0 0c             	add    eax,0xc
c001de93:	83 ec 08             	sub    esp,0x8
c001de96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de9a:	50                   	push   eax
c001de9b:	e8 94 29 fe ff       	call   c0000834 <strcpy>
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	83 ec 08             	sub    esp,0x8
c001dea6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001deaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deae:	e8 1d fc ff ff       	call   c001dad0 <Process::addArgs(char**)>
c001deb3:	83 c4 10             	add    esp,0x10
c001deb6:	90                   	nop
c001deb7:	83 c4 24             	add    esp,0x24
c001deba:	5b                   	pop    ebx
c001debb:	5e                   	pop    esi
c001debc:	c3                   	ret    

c001debd <disableIRQs()>:
c001debd:	fa                   	cli    
c001debe:	ff 05 cc 1a 03 c0    	inc    DWORD PTR ds:0xc0031acc
c001dec4:	c3                   	ret    

c001dec5 <getIRQNestingLevel()>:
c001dec5:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001deca:	c3                   	ret    

c001decb <enableIRQs()>:
c001decb:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ded0:	48                   	dec    eax
c001ded1:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c001ded6:	75 01                	jne    c001ded9 <enableIRQs()+0xe>
c001ded8:	fb                   	sti    
c001ded9:	c3                   	ret    

c001deda <lockScheduler()>:
c001deda:	eb e1                	jmp    c001debd <disableIRQs()>

c001dedc <unlockScheduler()>:
c001dedc:	eb ed                	jmp    c001decb <enableIRQs()>

c001dede <userModeEntryPoint(void*)>:
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	e8 f6 ff ff ff       	call   c001dedc <unlockScheduler()>
c001dee6:	fb                   	sti    
c001dee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001deef:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001def5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001def9:	83 c4 0c             	add    esp,0xc
c001defc:	e9 29 24 fe ff       	jmp    c000032a <goToUsermode>

c001df01 <lockStuff()>:
c001df01:	e8 b7 ff ff ff       	call   c001debd <disableIRQs()>
c001df06:	ff 05 c8 1a 03 c0    	inc    DWORD PTR ds:0xc0031ac8
c001df0c:	c3                   	ret    

c001df0d <taskStartupFunction>:
c001df0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df12:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001df15:	c3                   	ret    

c001df16 <updateTimeUsed()>:
c001df16:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c001df1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df21:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df28:	74 50                	je     c001df7a <updateTimeUsed()+0x64>
c001df2a:	57                   	push   edi
c001df2b:	56                   	push   esi
c001df2c:	53                   	push   ebx
c001df2d:	0f 31                	rdtsc  
c001df2f:	89 c1                	mov    ecx,eax
c001df31:	a3 08 1b 03 c0       	mov    ds:0xc0031b08,eax
c001df36:	2b 0d f8 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031af8
c001df3c:	89 d3                	mov    ebx,edx
c001df3e:	89 0d 00 1b 03 c0    	mov    DWORD PTR ds:0xc0031b00,ecx
c001df44:	1b 1d fc 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031afc
c001df4a:	a3 f8 1a 03 c0       	mov    ds:0xc0031af8,eax
c001df4f:	89 1d 04 1b 03 c0    	mov    DWORD PTR ds:0xc0031b04,ebx
c001df55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df5a:	89 15 0c 1b 03 c0    	mov    DWORD PTR ds:0xc0031b0c,edx
c001df60:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df63:	89 15 fc 1a 03 c0    	mov    DWORD PTR ds:0xc0031afc,edx
c001df69:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df6c:	01 f1                	add    ecx,esi
c001df6e:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df71:	11 fb                	adc    ebx,edi
c001df73:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df76:	5b                   	pop    ebx
c001df77:	5e                   	pop    esi
c001df78:	5f                   	pop    edi
c001df79:	c3                   	ret    
c001df7a:	c3                   	ret    

c001df7b <switchToThread(ThreadControlBlock*)>:
c001df7b:	53                   	push   ebx
c001df7c:	83 ec 08             	sub    esp,0x8
c001df7f:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001df84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df88:	85 c0                	test   eax,eax
c001df8a:	75 30                	jne    c001dfbc <switchToThread(ThreadControlBlock*)+0x41>
c001df8c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df8f:	3c ff                	cmp    al,0xff
c001df91:	74 25                	je     c001dfb8 <switchToThread(ThreadControlBlock*)+0x3d>
c001df93:	0f b6 d0             	movzx  edx,al
c001df96:	b8 84 03 00 00       	mov    eax,0x384
c001df9b:	29 d0                	sub    eax,edx
c001df9d:	c1 e0 10             	shl    eax,0x10
c001dfa0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dfa3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dfa6:	e8 6b ff ff ff       	call   c001df16 <updateTimeUsed()>
c001dfab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dfaf:	83 c4 08             	add    esp,0x8
c001dfb2:	5b                   	pop    ebx
c001dfb3:	e9 aa 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dfb8:	31 c0                	xor    eax,eax
c001dfba:	eb e7                	jmp    c001dfa3 <switchToThread(ThreadControlBlock*)+0x28>
c001dfbc:	c7 05 c4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x1
c001dfc6:	83 c4 08             	add    esp,0x8
c001dfc9:	5b                   	pop    ebx
c001dfca:	c3                   	ret    
c001dfcb:	90                   	nop

c001dfcc <Semaphore::Semaphore(int)>:
c001dfcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfd4:	89 10                	mov    DWORD PTR [eax],edx
c001dfd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfda:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dfe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dff0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dff7:	90                   	nop
c001dff8:	c3                   	ret    
c001dff9:	90                   	nop

c001dffa <Mutex::Mutex()>:
c001dffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dffe:	6a 01                	push   0x1
c001e000:	50                   	push   eax
c001e001:	e8 c6 ff ff ff       	call   c001dfcc <Semaphore::Semaphore(int)>
c001e006:	83 c4 08             	add    esp,0x8
c001e009:	90                   	nop
c001e00a:	c3                   	ret    
c001e00b:	90                   	nop

c001e00c <Process::createThread(void (*)(void*), void*, int)>:
c001e00c:	55                   	push   ebp
c001e00d:	31 c9                	xor    ecx,ecx
c001e00f:	57                   	push   edi
c001e010:	56                   	push   esi
c001e011:	53                   	push   ebx
c001e012:	83 ec 1c             	sub    esp,0x1c
c001e015:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e019:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e020:	89 f2                	mov    edx,esi
c001e022:	0f b7 c2             	movzx  eax,dx
c001e025:	83 e2 01             	and    edx,0x1
c001e028:	74 14                	je     c001e03e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001e02a:	d1 f8                	sar    eax,1
c001e02c:	41                   	inc    ecx
c001e02d:	89 c2                	mov    edx,eax
c001e02f:	83 f9 10             	cmp    ecx,0x10
c001e032:	75 ee                	jne    c001e022 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e034:	83 c4 1c             	add    esp,0x1c
c001e037:	31 c0                	xor    eax,eax
c001e039:	5b                   	pop    ebx
c001e03a:	5e                   	pop    esi
c001e03b:	5f                   	pop    edi
c001e03c:	5d                   	pop    ebp
c001e03d:	c3                   	ret    
c001e03e:	83 ec 08             	sub    esp,0x8
c001e041:	b8 01 00 00 00       	mov    eax,0x1
c001e046:	d3 e0                	shl    eax,cl
c001e048:	09 c6                	or     esi,eax
c001e04a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e050:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e057:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e05a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e05d:	01 ce                	add    esi,ecx
c001e05f:	89 f0                	mov    eax,esi
c001e061:	c1 e0 05             	shl    eax,0x5
c001e064:	01 c6                	add    esi,eax
c001e066:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e069:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e06f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e075:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e079:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e07f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e085:	89 ca                	mov    edx,ecx
c001e087:	f7 da                	neg    edx
c001e089:	c1 e2 15             	shl    edx,0x15
c001e08c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e092:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e098:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e09c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e0a6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e0ac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0b0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e0b6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0c0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e0ca:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e0d1:	50                   	push   eax
c001e0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0d6:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e0db:	e8 20 ab 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0e0:	83 c4 10             	add    esp,0x10
c001e0e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0e7:	83 c4 1c             	add    esp,0x1c
c001e0ea:	5b                   	pop    ebx
c001e0eb:	5e                   	pop    esi
c001e0ec:	5f                   	pop    edi
c001e0ed:	5d                   	pop    ebp
c001e0ee:	c3                   	ret    
c001e0ef:	90                   	nop

c001e0f0 <Process::createUserThread()>:
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	68 80 00 00 00       	push   0x80
c001e0f8:	6a 00                	push   0x0
c001e0fa:	68 de de 01 c0       	push   0xc001dede
c001e0ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e103:	e8 04 ff ff ff       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c001e108:	83 c4 1c             	add    esp,0x1c
c001e10b:	c3                   	ret    

c001e10c <setupMultitasking(void (*)())>:
c001e10c:	56                   	push   esi
c001e10d:	53                   	push   ebx
c001e10e:	53                   	push   ebx
c001e10f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e113:	eb 10                	jmp    c001e125 <setupMultitasking(void (*)())+0x19>
c001e115:	83 ec 0c             	sub    esp,0xc
c001e118:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e11d:	e8 30 aa 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	83 ec 0c             	sub    esp,0xc
c001e128:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e12d:	e8 04 aa 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e132:	83 c4 10             	add    esp,0x10
c001e135:	84 c0                	test   al,al
c001e137:	74 dc                	je     c001e115 <setupMultitasking(void (*)())+0x9>
c001e139:	83 ec 0c             	sub    esp,0xc
c001e13c:	68 3f 07 00 00       	push   0x73f
c001e141:	e8 fd 16 ff ff       	call   c000f843 <malloc>
c001e146:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e14d:	89 c3                	mov    ebx,eax
c001e14f:	6a 00                	push   0x0
c001e151:	68 56 c3 02 c0       	push   0xc002c356
c001e156:	6a 01                	push   0x1
c001e158:	50                   	push   eax
c001e159:	e8 b0 fb ff ff       	call   c001dd0e <Process::Process(bool, char const*, Process*, char**)>
c001e15e:	83 c4 18             	add    esp,0x18
c001e161:	89 1d f4 1a 03 c0    	mov    DWORD PTR ds:0xc0031af4,ebx
c001e167:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e16d:	68 78 c4 02 c0       	push   0xc002c478
c001e172:	e8 c1 4e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e177:	58                   	pop    eax
c001e178:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e17e:	e8 d4 2b ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001e183:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e18b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e191:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e194:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e19e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e1a4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e1aa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e1b4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e1be:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e1c8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1ce:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e1d4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e1de:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1e4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1ee:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1f4:	5a                   	pop    edx
c001e1f5:	59                   	pop    ecx
c001e1f6:	68 52 c3 02 c0       	push   0xc002c352
c001e1fb:	50                   	push   eax
c001e1fc:	e8 33 26 fe ff       	call   c0000834 <strcpy>
c001e201:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e208:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e20c:	83 c4 14             	add    esp,0x14
c001e20f:	5b                   	pop    ebx
c001e210:	5e                   	pop    esi
c001e211:	e9 3e 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e216 <schedule()>:
c001e216:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e21b:	85 c0                	test   eax,eax
c001e21d:	74 0b                	je     c001e22a <schedule()+0x14>
c001e21f:	c7 05 c4 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x1
c001e229:	c3                   	ret    
c001e22a:	53                   	push   ebx
c001e22b:	83 ec 14             	sub    esp,0x14
c001e22e:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e233:	e8 fe a8 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	84 c0                	test   al,al
c001e23d:	75 38                	jne    c001e277 <schedule()+0x61>
c001e23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e244:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e247:	4a                   	dec    edx
c001e248:	74 32                	je     c001e27c <schedule()+0x66>
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e252:	e8 d7 a8 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e257:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e25e:	89 c3                	mov    ebx,eax
c001e260:	e8 ed a8 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e265:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e26c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e26f:	e8 07 fd ff ff       	call   c001df7b <switchToThread(ThreadControlBlock*)>
c001e274:	83 c4 10             	add    esp,0x10
c001e277:	83 c4 08             	add    esp,0x8
c001e27a:	5b                   	pop    ebx
c001e27b:	c3                   	ret    
c001e27c:	83 ec 08             	sub    esp,0x8
c001e27f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e286:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e28c:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e291:	e8 6a a9 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e296:	83 c4 10             	add    esp,0x10
c001e299:	eb af                	jmp    c001e24a <schedule()+0x34>

c001e29b <unlockStuff()>:
c001e29b:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001e2a0:	48                   	dec    eax
c001e2a1:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c001e2a6:	75 09                	jne    c001e2b1 <unlockStuff()+0x16>
c001e2a8:	a1 c4 1a 03 c0       	mov    eax,ds:0xc0031ac4
c001e2ad:	85 c0                	test   eax,eax
c001e2af:	75 05                	jne    c001e2b6 <unlockStuff()+0x1b>
c001e2b1:	e9 15 fc ff ff       	jmp    c001decb <enableIRQs()>
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	c7 05 c4 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ac4,0x0
c001e2c3:	e8 4e ff ff ff       	call   c001e216 <schedule()>
c001e2c8:	83 c4 0c             	add    esp,0xc
c001e2cb:	e9 fb fb ff ff       	jmp    c001decb <enableIRQs()>

c001e2d0 <Semaphore::tryAcquire()>:
c001e2d0:	83 ec 0c             	sub    esp,0xc
c001e2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d7:	e8 25 fc ff ff       	call   c001df01 <lockStuff()>
c001e2dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2df:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2e1:	7c 0b                	jl     c001e2ee <Semaphore::tryAcquire()+0x1e>
c001e2e3:	e8 b3 ff ff ff       	call   c001e29b <unlockStuff()>
c001e2e8:	31 c0                	xor    eax,eax
c001e2ea:	83 c4 0c             	add    esp,0xc
c001e2ed:	c3                   	ret    
c001e2ee:	42                   	inc    edx
c001e2ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2f2:	e8 a4 ff ff ff       	call   c001e29b <unlockStuff()>
c001e2f7:	b0 01                	mov    al,0x1
c001e2f9:	83 c4 0c             	add    esp,0xc
c001e2fc:	c3                   	ret    
c001e2fd:	90                   	nop

c001e2fe <Semaphore::assertLocked(char const*)>:
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e305:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e309:	e8 f3 fb ff ff       	call   c001df01 <lockStuff()>
c001e30e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e310:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e313:	7c 05                	jl     c001e31a <Semaphore::assertLocked(char const*)+0x1c>
c001e315:	83 c4 0c             	add    esp,0xc
c001e318:	eb 81                	jmp    c001e29b <unlockStuff()>
c001e31a:	83 ec 0c             	sub    esp,0xc
c001e31d:	52                   	push   edx
c001e31e:	e8 c2 c3 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001e323:	83 c4 10             	add    esp,0x10
c001e326:	83 c4 0c             	add    esp,0xc
c001e329:	e9 6d ff ff ff       	jmp    c001e29b <unlockStuff()>

c001e32e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e32e:	83 ec 0c             	sub    esp,0xc
c001e331:	e8 8f fb ff ff       	call   c001dec5 <getIRQNestingLevel()>
c001e336:	83 ec 08             	sub    esp,0x8
c001e339:	50                   	push   eax
c001e33a:	68 ac c4 02 c0       	push   0xc002c4ac
c001e33f:	e8 f4 4c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e344:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e34d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e350:	e8 c1 fe ff ff       	call   c001e216 <schedule()>
c001e355:	e8 82 fb ff ff       	call   c001dedc <unlockScheduler()>
c001e35a:	e8 66 fb ff ff       	call   c001dec5 <getIRQNestingLevel()>
c001e35f:	5a                   	pop    edx
c001e360:	59                   	pop    ecx
c001e361:	50                   	push   eax
c001e362:	68 e0 c4 02 c0       	push   0xc002c4e0
c001e367:	e8 cc 4c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e36c:	83 c4 1c             	add    esp,0x1c
c001e36f:	c3                   	ret    

c001e370 <blockTask(TaskState)>:
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e377:	e8 5e fb ff ff       	call   c001deda <lockScheduler()>
c001e37c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e381:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e384:	e8 8d fe ff ff       	call   c001e216 <schedule()>
c001e389:	83 c4 0c             	add    esp,0xc
c001e38c:	e9 4b fb ff ff       	jmp    c001dedc <unlockScheduler()>

c001e391 <waitTask(int, int*, int)>:
c001e391:	83 ec 18             	sub    esp,0x18
c001e394:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e399:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e39d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e3a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e3a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3a9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e3ac:	6a 07                	push   0x7
c001e3ae:	e8 bd ff ff ff       	call   c001e370 <blockTask(TaskState)>
c001e3b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3b8:	83 c4 10             	add    esp,0x10
c001e3bb:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3be:	85 d2                	test   edx,edx
c001e3c0:	74 0a                	je     c001e3cc <waitTask(int, int*, int)+0x3b>
c001e3c2:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3c5:	89 02                	mov    DWORD PTR [edx],eax
c001e3c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3cc:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3cf:	83 c4 0c             	add    esp,0xc
c001e3d2:	c3                   	ret    

c001e3d3 <nanoSleepUntil(unsigned long long)>:
c001e3d3:	83 ec 0c             	sub    esp,0xc
c001e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3de:	3b 05 10 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ec10
c001e3e4:	89 d1                	mov    ecx,edx
c001e3e6:	1b 0d 14 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ec14
c001e3ec:	73 04                	jae    c001e3f2 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3ee:	83 c4 0c             	add    esp,0xc
c001e3f1:	c3                   	ret    
c001e3f2:	e8 0a fb ff ff       	call   c001df01 <lockStuff()>
c001e3f7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3fd:	83 ec 08             	sub    esp,0x8
c001e400:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e403:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e406:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e40c:	68 dc 1a 03 c0       	push   0xc0031adc
c001e411:	e8 ea a7 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e416:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e41d:	e8 4e ff ff ff       	call   c001e370 <blockTask(TaskState)>
c001e422:	83 c4 1c             	add    esp,0x1c
c001e425:	e9 71 fe ff ff       	jmp    c001e29b <unlockStuff()>

c001e42a <nanoSleep(unsigned long long)>:
c001e42a:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c001e42f:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c001e435:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e439:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e43d:	eb 94                	jmp    c001e3d3 <nanoSleepUntil(unsigned long long)>

c001e43f <sleep(unsigned long long)>:
c001e43f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e447:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e44c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e450:	01 ca                	add    edx,ecx
c001e452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e456:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e45a:	eb ce                	jmp    c001e42a <nanoSleep(unsigned long long)>

c001e45c <Semaphore::acquire()>:
c001e45c:	83 ec 0c             	sub    esp,0xc
c001e45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e463:	e8 99 fa ff ff       	call   c001df01 <lockStuff()>
c001e468:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e46b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e46d:	7d 0c                	jge    c001e47b <Semaphore::acquire()+0x1f>
c001e46f:	42                   	inc    edx
c001e470:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e473:	83 c4 0c             	add    esp,0xc
c001e476:	e9 20 fe ff ff       	jmp    c001e29b <unlockStuff()>
c001e47b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e481:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e488:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e48b:	85 d2                	test   edx,edx
c001e48d:	74 2a                	je     c001e4b9 <Semaphore::acquire()+0x5d>
c001e48f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e492:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e498:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e49b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4a1:	83 ec 0c             	sub    esp,0xc
c001e4a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4a7:	6a 05                	push   0x5
c001e4a9:	e8 c2 fe ff ff       	call   c001e370 <blockTask(TaskState)>
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	83 c4 0c             	add    esp,0xc
c001e4b4:	e9 e2 fd ff ff       	jmp    c001e29b <unlockStuff()>
c001e4b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4c2:	eb d7                	jmp    c001e49b <Semaphore::acquire()+0x3f>

c001e4c4 <taskReturned>:
c001e4c4:	83 ec 18             	sub    esp,0x18
c001e4c7:	68 14 c5 02 c0       	push   0xc002c514
c001e4cc:	e8 14 c2 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001e4d1:	83 c4 10             	add    esp,0x10
c001e4d4:	83 ec 0c             	sub    esp,0xc
c001e4d7:	6a 02                	push   0x2
c001e4d9:	e8 92 fe ff ff       	call   c001e370 <blockTask(TaskState)>
c001e4de:	e8 f7 f9 ff ff       	call   c001deda <lockScheduler()>
c001e4e3:	e8 2e fd ff ff       	call   c001e216 <schedule()>
c001e4e8:	e8 ef f9 ff ff       	call   c001dedc <unlockScheduler()>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	eb e2                	jmp    c001e4d4 <taskReturned+0x10>

c001e4f2 <unblockTask(ThreadControlBlock*)>:
c001e4f2:	53                   	push   ebx
c001e4f3:	83 ec 08             	sub    esp,0x8
c001e4f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4fa:	e8 db f9 ff ff       	call   c001deda <lockScheduler()>
c001e4ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e502:	85 c0                	test   eax,eax
c001e504:	74 5c                	je     c001e562 <unblockTask(ThreadControlBlock*)+0x70>
c001e506:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e509:	48                   	dec    eax
c001e50a:	74 31                	je     c001e53d <unblockTask(ThreadControlBlock*)+0x4b>
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e514:	e8 15 a6 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	85 c0                	test   eax,eax
c001e51e:	75 17                	jne    c001e537 <unblockTask(ThreadControlBlock*)+0x45>
c001e520:	eb 65                	jmp    c001e587 <unblockTask(ThreadControlBlock*)+0x95>
c001e522:	83 ec 08             	sub    esp,0x8
c001e525:	50                   	push   eax
c001e526:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e52b:	e8 d8 a8 00 00       	call   c0028e08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	85 c0                	test   eax,eax
c001e535:	74 50                	je     c001e587 <unblockTask(ThreadControlBlock*)+0x95>
c001e537:	39 c3                	cmp    ebx,eax
c001e539:	75 e7                	jne    c001e522 <unblockTask(ThreadControlBlock*)+0x30>
c001e53b:	eb 1c                	jmp    c001e559 <unblockTask(ThreadControlBlock*)+0x67>
c001e53d:	83 ec 0c             	sub    esp,0xc
c001e540:	68 04 c6 02 c0       	push   0xc002c604
c001e545:	e8 ee 4a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e54a:	c7 04 24 90 c5 02 c0 	mov    DWORD PTR [esp],0xc002c590
c001e551:	e8 e2 4a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e556:	83 c4 10             	add    esp,0x10
c001e559:	83 c4 08             	add    esp,0x8
c001e55c:	5b                   	pop    ebx
c001e55d:	e9 7a f9 ff ff       	jmp    c001dedc <unlockScheduler()>
c001e562:	83 ec 0c             	sub    esp,0xc
c001e565:	68 48 c5 02 c0       	push   0xc002c548
c001e56a:	e8 c9 4a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e56f:	c7 04 24 90 c5 02 c0 	mov    DWORD PTR [esp],0xc002c590
c001e576:	e8 bd 4a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	83 c4 08             	add    esp,0x8
c001e581:	5b                   	pop    ebx
c001e582:	e9 55 f9 ff ff       	jmp    c001dedc <unlockScheduler()>
c001e587:	83 ec 08             	sub    esp,0x8
c001e58a:	53                   	push   ebx
c001e58b:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e590:	e8 6b a6 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e595:	83 c4 10             	add    esp,0x10
c001e598:	83 c4 08             	add    esp,0x8
c001e59b:	5b                   	pop    ebx
c001e59c:	e9 3b f9 ff ff       	jmp    c001dedc <unlockScheduler()>

c001e5a1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e5a1:	55                   	push   ebp
c001e5a2:	57                   	push   edi
c001e5a3:	56                   	push   esi
c001e5a4:	53                   	push   ebx
c001e5a5:	83 ec 1c             	sub    esp,0x1c
c001e5a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e5ac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5af:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e5b5:	85 ff                	test   edi,edi
c001e5b7:	7e 20                	jle    c001e5d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e5b9:	31 f6                	xor    esi,esi
c001e5bb:	83 ec 0c             	sub    esp,0xc
c001e5be:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5c5:	46                   	inc    esi
c001e5c6:	e8 88 12 ff ff       	call   c000f853 <free>
c001e5cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ce:	83 c4 10             	add    esp,0x10
c001e5d1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5d7:	7f e2                	jg     c001e5bb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5d9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5e8:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5ee:	d3 c0                	rol    eax,cl
c001e5f0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5f7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5fa:	89 f7                	mov    edi,esi
c001e5fc:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e604:	0f 85 74 01 00 00    	jne    c001e77e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e60a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e610:	85 ed                	test   ebp,ebp
c001e612:	74 1b                	je     c001e62f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e614:	83 ec 0c             	sub    esp,0xc
c001e617:	55                   	push   ebp
c001e618:	e8 35 be ff ff       	call   c001a452 <EnvVarContainer::~EnvVarContainer()>
c001e61d:	59                   	pop    ecx
c001e61e:	5e                   	pop    esi
c001e61f:	6a 0c                	push   0xc
c001e621:	55                   	push   ebp
c001e622:	e8 31 49 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c001e627:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e62a:	83 c4 10             	add    esp,0x10
c001e62d:	89 f7                	mov    edi,esi
c001e62f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e635:	85 c0                	test   eax,eax
c001e637:	0f 84 aa 00 00 00    	je     c001e6e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e63d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e640:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e644:	31 c9                	xor    ecx,ecx
c001e646:	eb 10                	jmp    c001e658 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e648:	41                   	inc    ecx
c001e649:	83 f9 10             	cmp    ecx,0x10
c001e64c:	0f 84 95 00 00 00    	je     c001e6e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e652:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e658:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e65f:	d3 fa                	sar    edx,cl
c001e661:	83 e2 01             	and    edx,0x1
c001e664:	74 e2                	je     c001e648 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e666:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e669:	01 ca                	add    edx,ecx
c001e66b:	89 d5                	mov    ebp,edx
c001e66d:	c1 e5 05             	shl    ebp,0x5
c001e670:	01 ea                	add    edx,ebp
c001e672:	01 d0                	add    eax,edx
c001e674:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e67a:	83 fd 07             	cmp    ebp,0x7
c001e67d:	75 c9                	jne    c001e648 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e67f:	05 40 02 00 00       	add    eax,0x240
c001e684:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e687:	83 fd ff             	cmp    ebp,0xffffffff
c001e68a:	0f 8c 08 01 00 00    	jl     c001e798 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e690:	0f 84 b9 01 00 00    	je     c001e84f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e696:	85 ed                	test   ebp,ebp
c001e698:	0f 84 a0 01 00 00    	je     c001e83e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e69e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e6a0:	75 a6                	jne    c001e648 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6a2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6ac:	01 d0                	add    eax,edx
c001e6ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e6b2:	83 ec 0c             	sub    esp,0xc
c001e6b5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6be:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6c4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6cb:	50                   	push   eax
c001e6cc:	e8 21 fe ff ff       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6db:	89 f7                	mov    edi,esi
c001e6dd:	41                   	inc    ecx
c001e6de:	83 f9 10             	cmp    ecx,0x10
c001e6e1:	0f 85 6b ff ff ff    	jne    c001e652 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6e7:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6ed:	85 c0                	test   eax,eax
c001e6ef:	74 5d                	je     c001e74e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6f1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6f7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6fd:	74 4f                	je     c001e74e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6ff:	83 ec 0c             	sub    esp,0xc
c001e702:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e707:	e8 22 a4 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e70c:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e713:	89 c7                	mov    edi,eax
c001e715:	e8 1c a4 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	84 c0                	test   al,al
c001e71f:	0f 84 e4 00 00 00    	je     c001e809 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e725:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e728:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e72e:	85 d2                	test   edx,edx
c001e730:	74 0f                	je     c001e741 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e732:	83 ec 0c             	sub    esp,0xc
c001e735:	8b 02                	mov    eax,DWORD PTR [edx]
c001e737:	52                   	push   edx
c001e738:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e73b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e73e:	83 c4 10             	add    esp,0x10
c001e741:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e74b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e74e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e754:	85 db                	test   ebx,ebx
c001e756:	74 16                	je     c001e76e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e758:	83 ec 0c             	sub    esp,0xc
c001e75b:	53                   	push   ebx
c001e75c:	e8 af 3a ff ff       	call   c0012210 <VAS::~VAS()>
c001e761:	58                   	pop    eax
c001e762:	5a                   	pop    edx
c001e763:	6a 10                	push   0x10
c001e765:	53                   	push   ebx
c001e766:	e8 ed 47 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	83 ec 0c             	sub    esp,0xc
c001e771:	68 5d c3 02 c0       	push   0xc002c35d
c001e776:	e8 bd 48 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e77b:	83 c4 10             	add    esp,0x10
c001e77e:	83 ec 08             	sub    esp,0x8
c001e781:	68 3f 07 00 00       	push   0x73f
c001e786:	68 6b c3 02 c0       	push   0xc002c36b
c001e78b:	e8 a8 48 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e790:	83 c4 2c             	add    esp,0x2c
c001e793:	5b                   	pop    ebx
c001e794:	5e                   	pop    esi
c001e795:	5f                   	pop    edi
c001e796:	5d                   	pop    ebp
c001e797:	c3                   	ret    
c001e798:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	68 48 c6 02 c0       	push   0xc002c648
c001e7a4:	e8 3c bf ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001e7a9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7ac:	83 c4 10             	add    esp,0x10
c001e7af:	89 f7                	mov    edi,esi
c001e7b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7b5:	e9 8e fe ff ff       	jmp    c001e648 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7ba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7c0:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7c6:	75 1c                	jne    c001e7e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7c8:	83 ec 0c             	sub    esp,0xc
c001e7cb:	68 b0 c6 02 c0       	push   0xc002c6b0
c001e7d0:	e8 63 48 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e7d5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e7dc:	e8 8f fb ff ff       	call   c001e370 <blockTask(TaskState)>
c001e7e1:	83 c4 10             	add    esp,0x10
c001e7e4:	83 ec 08             	sub    esp,0x8
c001e7e7:	56                   	push   esi
c001e7e8:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e7ed:	e8 0e a4 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7f2:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e7f9:	e8 30 a3 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7fe:	83 c4 10             	add    esp,0x10
c001e801:	39 f8                	cmp    eax,edi
c001e803:	0f 84 1c ff ff ff    	je     c001e725 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e809:	83 ec 0c             	sub    esp,0xc
c001e80c:	68 e8 1a 03 c0       	push   0xc0031ae8
c001e811:	e8 18 a3 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e816:	c7 04 24 e8 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ae8
c001e81d:	89 c6                	mov    esi,eax
c001e81f:	e8 2e a3 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e824:	83 c4 10             	add    esp,0x10
c001e827:	39 f3                	cmp    ebx,esi
c001e829:	74 b9                	je     c001e7e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e82b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e82e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e831:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e837:	75 ab                	jne    c001e7e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e839:	e9 7c ff ff ff       	jmp    c001e7ba <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e83e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e842:	83 ec 0c             	sub    esp,0xc
c001e845:	68 7c c6 02 c0       	push   0xc002c67c
c001e84a:	e9 55 ff ff ff       	jmp    c001e7a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e84f:	8b 36                	mov    esi,DWORD PTR [esi]
c001e851:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e855:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e858:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e85b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e861:	01 d7                	add    edi,edx
c001e863:	89 f8                	mov    eax,edi
c001e865:	e9 44 fe ff ff       	jmp    c001e6ae <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e86a <cleanerTaskFunction(void*)>:
c001e86a:	53                   	push   ebx
c001e86b:	83 ec 08             	sub    esp,0x8
c001e86e:	e8 69 f6 ff ff       	call   c001dedc <unlockScheduler()>
c001e873:	e8 62 f6 ff ff       	call   c001deda <lockScheduler()>
c001e878:	80 3d ac 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aac,0x0
c001e87f:	0f 85 8e 00 00 00    	jne    c001e913 <cleanerTaskFunction(void*)+0xa9>
c001e885:	83 ec 0c             	sub    esp,0xc
c001e888:	6a 02                	push   0x2
c001e88a:	e8 9f fa ff ff       	call   c001e32e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	c6 05 ac 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031aac,0x0
c001e899:	e8 63 f6 ff ff       	call   c001df01 <lockStuff()>
c001e89e:	e8 37 f6 ff ff       	call   c001deda <lockScheduler()>
c001e8a3:	83 ec 0c             	sub    esp,0xc
c001e8a6:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e8ab:	e8 86 a2 00 00       	call   c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e8b0:	83 c4 10             	add    esp,0x10
c001e8b3:	84 c0                	test   al,al
c001e8b5:	75 40                	jne    c001e8f7 <cleanerTaskFunction(void*)+0x8d>
c001e8b7:	83 ec 0c             	sub    esp,0xc
c001e8ba:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e8bf:	e8 6a a2 00 00       	call   c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8c4:	c7 04 24 d0 1a 03 c0 	mov    DWORD PTR [esp],0xc0031ad0
c001e8cb:	89 c3                	mov    ebx,eax
c001e8cd:	e8 80 a2 00 00       	call   c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8d2:	c7 04 24 81 c3 02 c0 	mov    DWORD PTR [esp],0xc002c381
c001e8d9:	e8 5a 47 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e8de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8e1:	e8 bb fc ff ff       	call   c001e5a1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8e6:	c7 04 24 9a c3 02 c0 	mov    DWORD PTR [esp],0xc002c39a
c001e8ed:	e8 46 47 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e8f2:	83 c4 10             	add    esp,0x10
c001e8f5:	eb ac                	jmp    c001e8a3 <cleanerTaskFunction(void*)+0x39>
c001e8f7:	e8 e0 f5 ff ff       	call   c001dedc <unlockScheduler()>
c001e8fc:	e8 9a f9 ff ff       	call   c001e29b <unlockStuff()>
c001e901:	e8 d4 f5 ff ff       	call   c001deda <lockScheduler()>
c001e906:	80 3d ac 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031aac,0x0
c001e90d:	0f 84 72 ff ff ff    	je     c001e885 <cleanerTaskFunction(void*)+0x1b>
c001e913:	e8 c4 f5 ff ff       	call   c001dedc <unlockScheduler()>
c001e918:	e9 75 ff ff ff       	jmp    c001e892 <cleanerTaskFunction(void*)+0x28>

c001e91d <terminateTask(int)>:
c001e91d:	83 ec 14             	sub    esp,0x14
c001e920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e925:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e928:	83 c0 0c             	add    eax,0xc
c001e92b:	50                   	push   eax
c001e92c:	68 d8 c6 02 c0       	push   0xc002c6d8
c001e931:	e8 02 47 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e936:	e8 c6 f5 ff ff       	call   c001df01 <lockStuff()>
c001e93b:	e8 9a f5 ff ff       	call   c001deda <lockScheduler()>
c001e940:	c7 04 24 ad c3 02 c0 	mov    DWORD PTR [esp],0xc002c3ad
c001e947:	e8 ec 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e94c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e950:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e955:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e95d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e960:	5a                   	pop    edx
c001e961:	59                   	pop    ecx
c001e962:	50                   	push   eax
c001e963:	68 d0 1a 03 c0       	push   0xc0031ad0
c001e968:	e8 93 a2 00 00       	call   c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e96d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e972:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e979:	c7 04 24 c7 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3c7
c001e980:	e8 b3 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e985:	83 c4 10             	add    esp,0x10
c001e988:	a1 a8 1a 03 c0       	mov    eax,ds:0xc0031aa8
c001e98d:	85 c0                	test   eax,eax
c001e98f:	74 5a                	je     c001e9eb <terminateTask(int)+0xce>
c001e991:	83 ec 0c             	sub    esp,0xc
c001e994:	68 e1 c3 02 c0       	push   0xc002c3e1
c001e999:	e8 9a 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e99e:	58                   	pop    eax
c001e99f:	c6 05 ac 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031aac,0x1
c001e9a6:	ff 35 a8 1a 03 c0    	push   DWORD PTR ds:0xc0031aa8
c001e9ac:	e8 41 fb ff ff       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c001e9b1:	c7 04 24 fb c3 02 c0 	mov    DWORD PTR [esp],0xc002c3fb
c001e9b8:	e8 7b 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	e8 17 f5 ff ff       	call   c001dedc <unlockScheduler()>
c001e9c5:	e8 d1 f8 ff ff       	call   c001e29b <unlockStuff()>
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 33 c4 02 c0       	push   0xc002c433
c001e9d2:	e8 61 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e9d7:	83 c4 10             	add    esp,0x10
c001e9da:	e8 fb f4 ff ff       	call   c001deda <lockScheduler()>
c001e9df:	e8 32 f8 ff ff       	call   c001e216 <schedule()>
c001e9e4:	e8 f3 f4 ff ff       	call   c001dedc <unlockScheduler()>
c001e9e9:	eb ef                	jmp    c001e9da <terminateTask(int)+0xbd>
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	68 15 c4 02 c0       	push   0xc002c415
c001e9f3:	e8 40 46 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001e9f8:	83 c4 10             	add    esp,0x10
c001e9fb:	eb c3                	jmp    c001e9c0 <terminateTask(int)+0xa3>

c001e9fd <Thr::terminateFromIRQ(int)>:
c001e9fd:	83 ec 18             	sub    esp,0x18
c001ea00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea04:	e8 14 ff ff ff       	call   c001e91d <terminateTask(int)>
c001ea09:	90                   	nop

c001ea0a <Semaphore::release()>:
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea11:	e8 eb f4 ff ff       	call   c001df01 <lockStuff()>
c001ea16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ea19:	85 d2                	test   edx,edx
c001ea1b:	74 1a                	je     c001ea37 <Semaphore::release()+0x2d>
c001ea1d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea26:	52                   	push   edx
c001ea27:	e8 c6 fa ff ff       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c001ea2c:	83 c4 10             	add    esp,0x10
c001ea2f:	83 c4 0c             	add    esp,0xc
c001ea32:	e9 64 f8 ff ff       	jmp    c001e29b <unlockStuff()>
c001ea37:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea3a:	83 c4 0c             	add    esp,0xc
c001ea3d:	e9 59 f8 ff ff       	jmp    c001e29b <unlockStuff()>

c001ea42 <__static_initialization_and_destruction_0(int, int)>:
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea4a:	0f 85 88 00 00 00    	jne    c001ead8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea50:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea58:	75 7e                	jne    c001ead8 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea5a:	83 ec 0c             	sub    esp,0xc
c001ea5d:	68 e8 1a 03 c0       	push   0xc0031ae8
c001ea62:	e8 49 a3 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	83 ec 04             	sub    esp,0x4
c001ea6d:	68 90 d4 02 c0       	push   0xc002d490
c001ea72:	68 e8 1a 03 c0       	push   0xc0031ae8
c001ea77:	68 70 8d 02 c0       	push   0xc0028d70
c001ea7c:	e8 51 44 ff ff       	call   c0012ed2 <__cxa_atexit>
c001ea81:	83 c4 10             	add    esp,0x10
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	68 dc 1a 03 c0       	push   0xc0031adc
c001ea8c:	e8 1f a3 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea91:	83 c4 10             	add    esp,0x10
c001ea94:	83 ec 04             	sub    esp,0x4
c001ea97:	68 90 d4 02 c0       	push   0xc002d490
c001ea9c:	68 dc 1a 03 c0       	push   0xc0031adc
c001eaa1:	68 70 8d 02 c0       	push   0xc0028d70
c001eaa6:	e8 27 44 ff ff       	call   c0012ed2 <__cxa_atexit>
c001eaab:	83 c4 10             	add    esp,0x10
c001eaae:	83 ec 0c             	sub    esp,0xc
c001eab1:	68 d0 1a 03 c0       	push   0xc0031ad0
c001eab6:	e8 f5 a2 00 00       	call   c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	83 ec 04             	sub    esp,0x4
c001eac1:	68 90 d4 02 c0       	push   0xc002d490
c001eac6:	68 d0 1a 03 c0       	push   0xc0031ad0
c001eacb:	68 70 8d 02 c0       	push   0xc0028d70
c001ead0:	e8 fd 43 ff ff       	call   c0012ed2 <__cxa_atexit>
c001ead5:	83 c4 10             	add    esp,0x10
c001ead8:	90                   	nop
c001ead9:	83 c4 0c             	add    esp,0xc
c001eadc:	c3                   	ret    

c001eadd <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eadd:	83 ec 0c             	sub    esp,0xc
c001eae0:	83 ec 08             	sub    esp,0x8
c001eae3:	68 ff ff 00 00       	push   0xffff
c001eae8:	6a 01                	push   0x1
c001eaea:	e8 53 ff ff ff       	call   c001ea42 <__static_initialization_and_destruction_0(int, int)>
c001eaef:	83 c4 10             	add    esp,0x10
c001eaf2:	83 c4 0c             	add    esp,0xc
c001eaf5:	c3                   	ret    

c001eaf6 <Vm::inbv(unsigned short)>:
c001eaf6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eafa:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eaff:	75 06                	jne    c001eb07 <Vm::inbv(unsigned short)+0x11>
c001eb01:	a0 2c 1b 03 c0       	mov    al,ds:0xc0031b2c
c001eb06:	c3                   	ret    
c001eb07:	ec                   	in     al,dx
c001eb08:	c3                   	ret    

c001eb09 <Vm::outbv(unsigned short, unsigned char)>:
c001eb09:	53                   	push   ebx
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb15:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb1a:	75 38                	jne    c001eb54 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eb1c:	0f b6 c3             	movzx  eax,bl
c001eb1f:	51                   	push   ecx
c001eb20:	51                   	push   ecx
c001eb21:	50                   	push   eax
c001eb22:	68 f7 c6 02 c0       	push   0xc002c6f7
c001eb27:	e8 0c 45 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001eb2c:	8b 15 2c 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b2c
c001eb32:	83 c4 10             	add    esp,0x10
c001eb35:	8d 42 01             	lea    eax,[edx+0x1]
c001eb38:	88 9a 40 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4c0],bl
c001eb3e:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c001eb43:	83 f8 20             	cmp    eax,0x20
c001eb46:	75 0f                	jne    c001eb57 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb48:	c7 05 2c 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x1f
c001eb52:	eb 03                	jmp    c001eb57 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb54:	88 d8                	mov    al,bl
c001eb56:	ee                   	out    dx,al
c001eb57:	83 c4 08             	add    esp,0x8
c001eb5a:	5b                   	pop    ebx
c001eb5b:	c3                   	ret    

c001eb5c <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb66:	c1 e0 04             	shl    eax,0x4
c001eb69:	01 d0                	add    eax,edx
c001eb6b:	c3                   	ret    

c001eb6c <Vm::getSegment(unsigned int)>:
c001eb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb70:	c1 e8 10             	shr    eax,0x10
c001eb73:	c3                   	ret    

c001eb74 <Vm::getOffset(unsigned int)>:
c001eb74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb78:	c3                   	ret    

c001eb79 <Vm::mainloop2()>:
c001eb79:	83 ec 0c             	sub    esp,0xc
c001eb7c:	e8 59 f3 ff ff       	call   c001deda <lockScheduler()>
c001eb81:	83 ec 0c             	sub    esp,0xc
c001eb84:	c6 05 25 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b25,0x1
c001eb8b:	6a 02                	push   0x2
c001eb8d:	e8 9c f7 ff ff       	call   c001e32e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb97:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb9b:	52                   	push   edx
c001eb9c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eba0:	52                   	push   edx
c001eba1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eba5:	52                   	push   edx
c001eba6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ebaa:	50                   	push   eax
c001ebab:	e8 4a 17 fe ff       	call   c00002fa <goToVM86>
c001ebb0:	83 c4 2c             	add    esp,0x2c
c001ebb3:	c3                   	ret    

c001ebb4 <Vm::mainVm8086Loop(void*)>:
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	e8 20 f3 ff ff       	call   c001dedc <unlockScheduler()>
c001ebbc:	83 c4 0c             	add    esp,0xc
c001ebbf:	eb b8                	jmp    c001eb79 <Vm::mainloop2()>

c001ebc1 <Vm::mainloop3(unsigned long)>:
c001ebc1:	53                   	push   ebx
c001ebc2:	83 ec 08             	sub    esp,0x8
c001ebc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebc9:	e8 0c f3 ff ff       	call   c001deda <lockScheduler()>
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	89 1d 20 1b 03 c0    	mov    DWORD PTR ds:0xc0031b20,ebx
c001ebd7:	6a 02                	push   0x2
c001ebd9:	c6 05 24 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b24,0x1
c001ebe0:	e8 49 f7 ff ff       	call   c001e32e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebe5:	83 c4 18             	add    esp,0x18
c001ebe8:	5b                   	pop    ebx
c001ebe9:	eb 8e                	jmp    c001eb79 <Vm::mainloop2()>

c001ebeb <Vm::initialise8086()>:
c001ebeb:	83 ec 0c             	sub    esp,0xc
c001ebee:	68 80 00 00 00       	push   0x80
c001ebf3:	6a 00                	push   0x0
c001ebf5:	68 b4 eb 01 c0       	push   0xc001ebb4
c001ebfa:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001ec00:	e8 07 f4 ff ff       	call   c001e00c <Process::createThread(void (*)(void*), void*, int)>
c001ec05:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ec0c:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c001ec11:	68 00 01 00 00       	push   0x100
c001ec16:	a1 f4 1a 03 c0       	mov    eax,ds:0xc0031af4
c001ec1b:	6a 00                	push   0x0
c001ec1d:	6a 00                	push   0x0
c001ec1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec25:	e8 46 3a ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec2a:	83 c4 2c             	add    esp,0x2c
c001ec2d:	c3                   	ret    

c001ec2e <Vm::finish8086()>:
c001ec2e:	53                   	push   ebx
c001ec2f:	83 ec 08             	sub    esp,0x8
c001ec32:	e8 a3 f2 ff ff       	call   c001deda <lockScheduler()>
c001ec37:	80 3d 24 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b24,0x0
c001ec3e:	75 0c                	jne    c001ec4c <Vm::finish8086()+0x1e>
c001ec40:	e8 d1 f5 ff ff       	call   c001e216 <schedule()>
c001ec45:	e8 92 f2 ff ff       	call   c001dedc <unlockScheduler()>
c001ec4a:	eb e6                	jmp    c001ec32 <Vm::finish8086()+0x4>
c001ec4c:	83 ec 0c             	sub    esp,0xc
c001ec4f:	8b 1d 20 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031b20
c001ec55:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001ec5b:	c6 05 24 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b24,0x0
c001ec62:	e8 8b f8 ff ff       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c001ec67:	e8 70 f2 ff ff       	call   c001dedc <unlockScheduler()>
c001ec6c:	89 d8                	mov    eax,ebx
c001ec6e:	83 c4 18             	add    esp,0x18
c001ec71:	5b                   	pop    ebx
c001ec72:	c3                   	ret    

c001ec73 <Vm::getOutput8086(unsigned char*)>:
c001ec73:	83 ec 10             	sub    esp,0x10
c001ec76:	ff 35 2c 1b 03 c0    	push   DWORD PTR ds:0xc0031b2c
c001ec7c:	68 40 1b 03 c0       	push   0xc0031b40
c001ec81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec85:	e8 ba 1a fe ff       	call   c0000744 <memcpy>
c001ec8a:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c001ec8f:	c7 05 2c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x0
c001ec99:	83 c4 1c             	add    esp,0x1c
c001ec9c:	c3                   	ret    

c001ec9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec9d:	55                   	push   ebp
c001ec9e:	57                   	push   edi
c001ec9f:	56                   	push   esi
c001eca0:	53                   	push   ebx
c001eca1:	83 ec 2c             	sub    esp,0x2c
c001eca4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eca8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ecac:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ecb0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ecb4:	e8 21 f2 ff ff       	call   c001deda <lockScheduler()>
c001ecb9:	a0 25 1b 03 c0       	mov    al,ds:0xc0031b25
c001ecbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ecc2:	84 c0                	test   al,al
c001ecc4:	75 0c                	jne    c001ecd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ecc6:	e8 4b f5 ff ff       	call   c001e216 <schedule()>
c001eccb:	e8 0c f2 ff ff       	call   c001dedc <unlockScheduler()>
c001ecd0:	eb e2                	jmp    c001ecb4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecd2:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001ecd7:	c7 05 2c 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b2c,0x0
c001ece1:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ece5:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ece9:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eced:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecf1:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecf5:	50                   	push   eax
c001ecf6:	6a 20                	push   0x20
c001ecf8:	6a 00                	push   0x0
c001ecfa:	68 40 1b 03 c0       	push   0xc0031b40
c001ecff:	e8 74 1a fe ff       	call   c0000778 <memset>
c001ed04:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ed0b:	e8 33 0b ff ff       	call   c000f843 <malloc>
c001ed10:	83 c4 0c             	add    esp,0xc
c001ed13:	89 c7                	mov    edi,eax
c001ed15:	ff 35 f4 1a 03 c0    	push   DWORD PTR ds:0xc0031af4
c001ed1b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ed1f:	50                   	push   eax
c001ed20:	e8 6b 48 ff ff       	call   c0013590 <File::File(char const*, Process*)>
c001ed25:	83 c4 10             	add    esp,0x10
c001ed28:	85 ff                	test   edi,edi
c001ed2a:	75 0a                	jne    c001ed36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed2c:	83 ec 0c             	sub    esp,0xc
c001ed2f:	68 13 c7 02 c0       	push   0xc002c713
c001ed34:	eb 27                	jmp    c001ed5d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed36:	50                   	push   eax
c001ed37:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed3b:	50                   	push   eax
c001ed3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed40:	50                   	push   eax
c001ed41:	57                   	push   edi
c001ed42:	e8 59 4b ff ff       	call   c00138a0 <File::stat(unsigned long long*, bool*)>
c001ed47:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	89 e8                	mov    eax,ebp
c001ed51:	84 c0                	test   al,al
c001ed53:	74 19                	je     c001ed6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed55:	83 ec 0c             	sub    esp,0xc
c001ed58:	68 27 c7 02 c0       	push   0xc002c727
c001ed5d:	e8 83 b9 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001ed62:	31 ed                	xor    ebp,ebp
c001ed64:	e8 73 f1 ff ff       	call   c001dedc <unlockScheduler()>
c001ed69:	83 c4 10             	add    esp,0x10
c001ed6c:	eb 75                	jmp    c001ede3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed6e:	50                   	push   eax
c001ed6f:	50                   	push   eax
c001ed70:	6a 01                	push   0x1
c001ed72:	57                   	push   edi
c001ed73:	e8 7c 48 ff ff       	call   c00135f4 <File::open(FileOpenMode)>
c001ed78:	83 c4 10             	add    esp,0x10
c001ed7b:	85 c0                	test   eax,eax
c001ed7d:	74 17                	je     c001ed96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed7f:	83 ec 0c             	sub    esp,0xc
c001ed82:	68 40 c7 02 c0       	push   0xc002c740
c001ed87:	e8 59 b9 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001ed8c:	e8 4b f1 ff ff       	call   c001dedc <unlockScheduler()>
c001ed91:	83 c4 10             	add    esp,0x10
c001ed94:	eb 4d                	jmp    c001ede3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed96:	0f b7 f6             	movzx  esi,si
c001ed99:	50                   	push   eax
c001ed9a:	0f b7 db             	movzx  ebx,bx
c001ed9d:	50                   	push   eax
c001ed9e:	56                   	push   esi
c001ed9f:	53                   	push   ebx
c001eda0:	e8 b7 fd ff ff       	call   c001eb5c <Vm::realToLinear(unsigned short, unsigned short)>
c001eda5:	5a                   	pop    edx
c001eda6:	8b 17                	mov    edx,DWORD PTR [edi]
c001eda8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001edac:	51                   	push   ecx
c001edad:	50                   	push   eax
c001edae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edb6:	57                   	push   edi
c001edb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001edba:	83 c4 14             	add    esp,0x14
c001edbd:	57                   	push   edi
c001edbe:	e8 8f 48 ff ff       	call   c0013652 <File::close()>
c001edc3:	c6 05 25 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b25,0x0
c001edca:	e8 0d f1 ff ff       	call   c001dedc <unlockScheduler()>
c001edcf:	59                   	pop    ecx
c001edd0:	ff 35 28 1b 03 c0    	push   DWORD PTR ds:0xc0031b28
c001edd6:	e8 17 f7 ff ff       	call   c001e4f2 <unblockTask(ThreadControlBlock*)>
c001eddb:	83 c4 10             	add    esp,0x10
c001edde:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ede3:	83 c4 2c             	add    esp,0x2c
c001ede6:	89 e8                	mov    eax,ebp
c001ede8:	5b                   	pop    ebx
c001ede9:	5e                   	pop    esi
c001edea:	5f                   	pop    edi
c001edeb:	5d                   	pop    ebp
c001edec:	c3                   	ret    

c001eded <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eded:	57                   	push   edi
c001edee:	56                   	push   esi
c001edef:	53                   	push   ebx
c001edf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edfc:	83 e8 06             	sub    eax,0x6
c001edff:	0f b7 c0             	movzx  eax,ax
c001ee02:	50                   	push   eax
c001ee03:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ee08:	50                   	push   eax
c001ee09:	e8 4e fd ff ff       	call   c001eb5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ee0e:	5a                   	pop    edx
c001ee0f:	5e                   	pop    esi
c001ee10:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ee13:	8d 56 fa             	lea    edx,[esi-0x6]
c001ee16:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ee1c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ee1f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee22:	83 c2 02             	add    edx,0x2
c001ee25:	66 89 10             	mov    WORD PTR [eax],dx
c001ee28:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee2b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee2f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee32:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee36:	89 d6                	mov    esi,edx
c001ee38:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee3e:	66 81 e6 ff fd       	and    si,0xfdff
c001ee43:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee47:	74 07                	je     c001ee50 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee49:	89 d6                	mov    esi,edx
c001ee4b:	66 81 ce 00 02       	or     si,0x200
c001ee50:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee59:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee5d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee65:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee68:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee70:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee73:	5b                   	pop    ebx
c001ee74:	5e                   	pop    esi
c001ee75:	5f                   	pop    edi
c001ee76:	c3                   	ret    

c001ee77 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee7c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee81:	c1 e0 04             	shl    eax,0x4
c001ee84:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee87:	c3                   	ret    

c001ee88 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee88:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee8d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee92:	c1 e0 04             	shl    eax,0x4
c001ee95:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee99:	c3                   	ret    

c001ee9a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee9a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee9f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eea4:	c1 e0 04             	shl    eax,0x4
c001eea7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001eeaa:	c3                   	ret    

c001eeab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001eeab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eeb0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeb5:	c1 e0 04             	shl    eax,0x4
c001eeb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eebc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eebf:	c3                   	ret    

c001eec0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eec0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eec5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeca:	c1 e0 04             	shl    eax,0x4
c001eecd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eed1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eed5:	c3                   	ret    

c001eed6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eed6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eedb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eee0:	c1 e0 04             	shl    eax,0x4
c001eee3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eee7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eeea:	c3                   	ret    

c001eeeb <Vm::faultHandler(regs*)>:
c001eeeb:	55                   	push   ebp
c001eeec:	57                   	push   edi
c001eeed:	56                   	push   esi
c001eeee:	53                   	push   ebx
c001eeef:	83 ec 1c             	sub    esp,0x1c
c001eef2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eef6:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eef9:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eefc:	0f b7 c1             	movzx  eax,cx
c001eeff:	50                   	push   eax
c001ef00:	0f b7 c3             	movzx  eax,bx
c001ef03:	c1 e3 04             	shl    ebx,0x4
c001ef06:	50                   	push   eax
c001ef07:	e8 50 fc ff ff       	call   c001eb5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ef0c:	5a                   	pop    edx
c001ef0d:	89 c5                	mov    ebp,eax
c001ef0f:	5e                   	pop    esi
c001ef10:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ef14:	50                   	push   eax
c001ef15:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef19:	50                   	push   eax
c001ef1a:	e8 3d fc ff ff       	call   c001eb5c <Vm::realToLinear(unsigned short, unsigned short)>
c001ef1f:	01 cb                	add    ebx,ecx
c001ef21:	89 c6                	mov    esi,eax
c001ef23:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef27:	50                   	push   eax
c001ef28:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef2c:	50                   	push   eax
c001ef2d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef31:	50                   	push   eax
c001ef32:	55                   	push   ebp
c001ef33:	53                   	push   ebx
c001ef34:	b3 06                	mov    bl,0x6
c001ef36:	68 59 c7 02 c0       	push   0xc002c759
c001ef3b:	e8 f8 40 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001ef40:	83 c4 20             	add    esp,0x20
c001ef43:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef48:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef4d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef51:	3c 9d                	cmp    al,0x9d
c001ef53:	0f 84 d7 02 00 00    	je     c001f230 <Vm::faultHandler(regs*)+0x345>
c001ef59:	0f 87 a3 00 00 00    	ja     c001f002 <Vm::faultHandler(regs*)+0x117>
c001ef5f:	3c 66                	cmp    al,0x66
c001ef61:	0f 84 15 02 00 00    	je     c001f17c <Vm::faultHandler(regs*)+0x291>
c001ef67:	77 5f                	ja     c001efc8 <Vm::faultHandler(regs*)+0xdd>
c001ef69:	3c 36                	cmp    al,0x36
c001ef6b:	0f 84 f1 01 00 00    	je     c001f162 <Vm::faultHandler(regs*)+0x277>
c001ef71:	77 28                	ja     c001ef9b <Vm::faultHandler(regs*)+0xb0>
c001ef73:	3c 26                	cmp    al,0x26
c001ef75:	0f 84 99 01 00 00    	je     c001f114 <Vm::faultHandler(regs*)+0x229>
c001ef7b:	3c 2e                	cmp    al,0x2e
c001ef7d:	0f 85 3b 07 00 00    	jne    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001ef83:	83 ec 0c             	sub    esp,0xc
c001ef86:	31 db                	xor    ebx,ebx
c001ef88:	68 6e c7 02 c0       	push   0xc002c76e
c001ef8d:	e8 a6 40 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001ef92:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef95:	83 c4 10             	add    esp,0x10
c001ef98:	45                   	inc    ebp
c001ef99:	eb b2                	jmp    c001ef4d <Vm::faultHandler(regs*)+0x62>
c001ef9b:	3c 64                	cmp    al,0x64
c001ef9d:	0f 84 8b 01 00 00    	je     c001f12e <Vm::faultHandler(regs*)+0x243>
c001efa3:	0f 87 9f 01 00 00    	ja     c001f148 <Vm::faultHandler(regs*)+0x25d>
c001efa9:	3c 3e                	cmp    al,0x3e
c001efab:	0f 85 0d 07 00 00    	jne    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001efb1:	83 ec 0c             	sub    esp,0xc
c001efb4:	b3 01                	mov    bl,0x1
c001efb6:	68 72 c7 02 c0       	push   0xc002c772
c001efbb:	e8 78 40 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001efc0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	eb d0                	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001efc8:	3c 6d                	cmp    al,0x6d
c001efca:	0f 84 af 03 00 00    	je     c001f37f <Vm::faultHandler(regs*)+0x494>
c001efd0:	77 15                	ja     c001efe7 <Vm::faultHandler(regs*)+0xfc>
c001efd2:	3c 67                	cmp    al,0x67
c001efd4:	0f 84 bf 01 00 00    	je     c001f199 <Vm::faultHandler(regs*)+0x2ae>
c001efda:	3c 6c                	cmp    al,0x6c
c001efdc:	0f 84 3f 03 00 00    	je     c001f321 <Vm::faultHandler(regs*)+0x436>
c001efe2:	e9 d7 06 00 00       	jmp    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001efe7:	3c 6f                	cmp    al,0x6f
c001efe9:	0f 84 a4 04 00 00    	je     c001f493 <Vm::faultHandler(regs*)+0x5a8>
c001efef:	0f 82 11 04 00 00    	jb     c001f406 <Vm::faultHandler(regs*)+0x51b>
c001eff5:	3c 9c                	cmp    al,0x9c
c001eff7:	0f 84 ba 01 00 00    	je     c001f1b7 <Vm::faultHandler(regs*)+0x2cc>
c001effd:	e9 bc 06 00 00       	jmp    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001f002:	3c ec                	cmp    al,0xec
c001f004:	0f 84 24 06 00 00    	je     c001f62e <Vm::faultHandler(regs*)+0x743>
c001f00a:	0f 87 93 00 00 00    	ja     c001f0a3 <Vm::faultHandler(regs*)+0x1b8>
c001f010:	3c e4                	cmp    al,0xe4
c001f012:	0f 84 5c 05 00 00    	je     c001f574 <Vm::faultHandler(regs*)+0x689>
c001f018:	77 6a                	ja     c001f084 <Vm::faultHandler(regs*)+0x199>
c001f01a:	3c cd                	cmp    al,0xcd
c001f01c:	0f 84 7e 02 00 00    	je     c001f2a0 <Vm::faultHandler(regs*)+0x3b5>
c001f022:	3c cf                	cmp    al,0xcf
c001f024:	0f 85 94 06 00 00    	jne    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001f02a:	83 ec 0c             	sub    esp,0xc
c001f02d:	68 b6 c7 02 c0       	push   0xc002c7b6
c001f032:	e8 01 40 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f037:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f03a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f03d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f041:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f044:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f048:	0d 00 02 02 00       	or     eax,0x20200
c001f04d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f050:	56                   	push   esi
c001f051:	53                   	push   ebx
c001f052:	52                   	push   edx
c001f053:	68 bc c7 02 c0       	push   0xc002c7bc
c001f058:	e8 db 3f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f05d:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f061:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f067:	66 c1 e8 09          	shr    ax,0x9
c001f06b:	83 e0 01             	and    eax,0x1
c001f06e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f071:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f074:	83 c0 06             	add    eax,0x6
c001f077:	25 ff ff 00 00       	and    eax,0xffff
c001f07c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f07f:	e9 95 02 00 00       	jmp    c001f319 <Vm::faultHandler(regs*)+0x42e>
c001f084:	3c e6                	cmp    al,0xe6
c001f086:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f08a:	0f 84 4e 05 00 00    	je     c001f5de <Vm::faultHandler(regs*)+0x6f3>
c001f090:	0f 82 0a 05 00 00    	jb     c001f5a0 <Vm::faultHandler(regs*)+0x6b5>
c001f096:	3c e7                	cmp    al,0xe7
c001f098:	0f 84 69 05 00 00    	je     c001f607 <Vm::faultHandler(regs*)+0x71c>
c001f09e:	e9 1b 06 00 00       	jmp    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001f0a3:	3c ef                	cmp    al,0xef
c001f0a5:	0f 84 e6 05 00 00    	je     c001f691 <Vm::faultHandler(regs*)+0x7a6>
c001f0ab:	77 37                	ja     c001f0e4 <Vm::faultHandler(regs*)+0x1f9>
c001f0ad:	3c ed                	cmp    al,0xed
c001f0af:	0f 84 a3 05 00 00    	je     c001f658 <Vm::faultHandler(regs*)+0x76d>
c001f0b5:	3c ee                	cmp    al,0xee
c001f0b7:	0f 85 01 06 00 00    	jne    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001f0bd:	52                   	push   edx
c001f0be:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0c1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0c4:	68 57 c8 02 c0       	push   0xc002c857
c001f0c9:	e8 6a 3f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f0ce:	59                   	pop    ecx
c001f0cf:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0d3:	5b                   	pop    ebx
c001f0d4:	50                   	push   eax
c001f0d5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0d9:	50                   	push   eax
c001f0da:	e8 2a fa ff ff       	call   c001eb09 <Vm::outbv(unsigned short, unsigned char)>
c001f0df:	e9 a5 05 00 00       	jmp    c001f689 <Vm::faultHandler(regs*)+0x79e>
c001f0e4:	3c fa                	cmp    al,0xfa
c001f0e6:	0f 84 f7 01 00 00    	je     c001f2e3 <Vm::faultHandler(regs*)+0x3f8>
c001f0ec:	3c fb                	cmp    al,0xfb
c001f0ee:	0f 84 0a 02 00 00    	je     c001f2fe <Vm::faultHandler(regs*)+0x413>
c001f0f4:	3c f3                	cmp    al,0xf3
c001f0f6:	0f 85 c2 05 00 00    	jne    c001f6be <Vm::faultHandler(regs*)+0x7d3>
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	68 8f c7 02 c0       	push   0xc002c78f
c001f104:	e8 2f 3f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f109:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f10c:	83 c4 10             	add    esp,0x10
c001f10f:	e9 84 fe ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	b3 02                	mov    bl,0x2
c001f119:	68 6a c7 02 c0       	push   0xc002c76a
c001f11e:	e8 15 3f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f123:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f126:	83 c4 10             	add    esp,0x10
c001f129:	e9 6a fe ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	b3 03                	mov    bl,0x3
c001f133:	68 76 c7 02 c0       	push   0xc002c776
c001f138:	e8 fb 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f13d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f140:	83 c4 10             	add    esp,0x10
c001f143:	e9 50 fe ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	b3 04                	mov    bl,0x4
c001f14d:	68 7a c7 02 c0       	push   0xc002c77a
c001f152:	e8 e1 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f157:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f15a:	83 c4 10             	add    esp,0x10
c001f15d:	e9 36 fe ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	b3 05                	mov    bl,0x5
c001f167:	68 7e c7 02 c0       	push   0xc002c77e
c001f16c:	e8 c7 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f171:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	e9 1c fe ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	68 82 c7 02 c0       	push   0xc002c782
c001f184:	e8 af 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f189:	83 c4 10             	add    esp,0x10
c001f18c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f18f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f194:	e9 ff fd ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f199:	50                   	push   eax
c001f19a:	50                   	push   eax
c001f19b:	6a 01                	push   0x1
c001f19d:	68 87 c7 02 c0       	push   0xc002c787
c001f1a2:	e8 91 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f1a7:	83 c4 10             	add    esp,0x10
c001f1aa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1ad:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f1b2:	e9 e1 fd ff ff       	jmp    c001ef98 <Vm::faultHandler(regs*)+0xad>
c001f1b7:	83 ec 0c             	sub    esp,0xc
c001f1ba:	68 95 c7 02 c0       	push   0xc002c795
c001f1bf:	e8 74 3e ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f1c4:	83 c4 10             	add    esp,0x10
c001f1c7:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1cf:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1d2:	74 2f                	je     c001f203 <Vm::faultHandler(regs*)+0x318>
c001f1d4:	83 ea 04             	sub    edx,0x4
c001f1d7:	25 ff 0d 00 00       	and    eax,0xdff
c001f1dc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1e2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1e5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1ee:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1f2:	0f 84 bf 04 00 00    	je     c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f1f8:	80 cc 02             	or     ah,0x2
c001f1fb:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1fe:	e9 b4 04 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f203:	83 ea 02             	sub    edx,0x2
c001f206:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f20c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f20f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f213:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f219:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f21d:	74 05                	je     c001f224 <Vm::faultHandler(regs*)+0x339>
c001f21f:	80 cc 02             	or     ah,0x2
c001f222:	eb 03                	jmp    c001f227 <Vm::faultHandler(regs*)+0x33c>
c001f224:	80 e4 fd             	and    ah,0xfd
c001f227:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f22b:	e9 87 04 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	68 9c c7 02 c0       	push   0xc002c79c
c001f238:	e8 fb 3d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f245:	74 28                	je     c001f26f <Vm::faultHandler(regs*)+0x384>
c001f247:	8b 06                	mov    eax,DWORD PTR [esi]
c001f249:	25 ff 0d 00 00       	and    eax,0xdff
c001f24e:	0d 00 02 02 00       	or     eax,0x20200
c001f253:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f256:	8b 06                	mov    eax,DWORD PTR [esi]
c001f258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f25e:	c1 e8 09             	shr    eax,0x9
c001f261:	83 e0 01             	and    eax,0x1
c001f264:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f267:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f26a:	83 c0 04             	add    eax,0x4
c001f26d:	eb 24                	jmp    c001f293 <Vm::faultHandler(regs*)+0x3a8>
c001f26f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f272:	0d 00 02 02 00       	or     eax,0x20200
c001f277:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f27a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f27d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f283:	66 c1 e8 09          	shr    ax,0x9
c001f287:	83 e0 01             	and    eax,0x1
c001f28a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f28d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f290:	83 c0 02             	add    eax,0x2
c001f293:	25 ff ff 00 00       	and    eax,0xffff
c001f298:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f29b:	e9 17 04 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f2a0:	53                   	push   ebx
c001f2a1:	53                   	push   ebx
c001f2a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2a6:	50                   	push   eax
c001f2a7:	68 a2 c7 02 c0       	push   0xc002c7a2
c001f2ac:	e8 87 3d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f2b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	3c ee                	cmp    al,0xee
c001f2ba:	75 10                	jne    c001f2cc <Vm::faultHandler(regs*)+0x3e1>
c001f2bc:	83 ec 0c             	sub    esp,0xc
c001f2bf:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2c2:	e8 fa f8 ff ff       	call   c001ebc1 <Vm::mainloop3(unsigned long)>
c001f2c7:	e9 c0 03 00 00       	jmp    c001f68c <Vm::faultHandler(regs*)+0x7a1>
c001f2cc:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	53                   	push   ebx
c001f2d4:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2d8:	53                   	push   ebx
c001f2d9:	55                   	push   ebp
c001f2da:	50                   	push   eax
c001f2db:	57                   	push   edi
c001f2dc:	e8 0c fb ff ff       	call   c001eded <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f2e1:	eb 36                	jmp    c001f319 <Vm::faultHandler(regs*)+0x42e>
c001f2e3:	83 ec 0c             	sub    esp,0xc
c001f2e6:	68 ac c7 02 c0       	push   0xc002c7ac
c001f2eb:	e8 48 3d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f2f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2f5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2f9:	e9 8b 03 00 00       	jmp    c001f689 <Vm::faultHandler(regs*)+0x79e>
c001f2fe:	83 ec 0c             	sub    esp,0xc
c001f301:	68 b1 c7 02 c0       	push   0xc002c7b1
c001f306:	e8 2d 3d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f30b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f310:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f314:	e9 70 03 00 00       	jmp    c001f689 <Vm::faultHandler(regs*)+0x79e>
c001f319:	83 c4 20             	add    esp,0x20
c001f31c:	e9 99 03 00 00       	jmp    c001f6ba <Vm::faultHandler(regs*)+0x7cf>
c001f321:	83 ec 0c             	sub    esp,0xc
c001f324:	68 ef c7 02 c0       	push   0xc002c7ef
c001f329:	e8 0a 3d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f32e:	83 c4 10             	add    esp,0x10
c001f331:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f334:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f339:	74 0d                	je     c001f348 <Vm::faultHandler(regs*)+0x45d>
c001f33b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f342:	0f 87 9e 01 00 00    	ja     c001f4e6 <Vm::faultHandler(regs*)+0x5fb>
c001f348:	83 ec 0c             	sub    esp,0xc
c001f34b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f34f:	0f b7 db             	movzx  ebx,bx
c001f352:	50                   	push   eax
c001f353:	e8 9e f7 ff ff       	call   c001eaf6 <Vm::inbv(unsigned short)>
c001f358:	83 c4 0c             	add    esp,0xc
c001f35b:	0f b6 c0             	movzx  eax,al
c001f35e:	50                   	push   eax
c001f35f:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f363:	50                   	push   eax
c001f364:	53                   	push   ebx
c001f365:	e8 41 fb ff ff       	call   c001eeab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f36a:	83 c4 10             	add    esp,0x10
c001f36d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f370:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f374:	74 03                	je     c001f379 <Vm::faultHandler(regs*)+0x48e>
c001f376:	48                   	dec    eax
c001f377:	eb 01                	jmp    c001f37a <Vm::faultHandler(regs*)+0x48f>
c001f379:	40                   	inc    eax
c001f37a:	0f b7 c0             	movzx  eax,ax
c001f37d:	eb 7f                	jmp    c001f3fe <Vm::faultHandler(regs*)+0x513>
c001f37f:	83 ec 0c             	sub    esp,0xc
c001f382:	68 21 c8 02 c0       	push   0xc002c821
c001f387:	e8 ac 3c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f392:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f397:	74 0d                	je     c001f3a6 <Vm::faultHandler(regs*)+0x4bb>
c001f399:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f3a0:	0f 87 40 01 00 00    	ja     c001f4e6 <Vm::faultHandler(regs*)+0x5fb>
c001f3a6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3a9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f3ad:	0f b7 db             	movzx  ebx,bx
c001f3b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b5:	74 20                	je     c001f3d7 <Vm::faultHandler(regs*)+0x4ec>
c001f3b7:	ed                   	in     eax,dx
c001f3b8:	51                   	push   ecx
c001f3b9:	50                   	push   eax
c001f3ba:	56                   	push   esi
c001f3bb:	53                   	push   ebx
c001f3bc:	e8 15 fb ff ff       	call   c001eed6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3c1:	83 c4 10             	add    esp,0x10
c001f3c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3c7:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3cb:	74 05                	je     c001f3d2 <Vm::faultHandler(regs*)+0x4e7>
c001f3cd:	83 e8 04             	sub    eax,0x4
c001f3d0:	eb 27                	jmp    c001f3f9 <Vm::faultHandler(regs*)+0x50e>
c001f3d2:	83 c0 04             	add    eax,0x4
c001f3d5:	eb 22                	jmp    c001f3f9 <Vm::faultHandler(regs*)+0x50e>
c001f3d7:	66 ed                	in     ax,dx
c001f3d9:	0f b7 c0             	movzx  eax,ax
c001f3dc:	52                   	push   edx
c001f3dd:	50                   	push   eax
c001f3de:	56                   	push   esi
c001f3df:	53                   	push   ebx
c001f3e0:	e8 db fa ff ff       	call   c001eec0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3eb:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3ef:	74 05                	je     c001f3f6 <Vm::faultHandler(regs*)+0x50b>
c001f3f1:	83 e8 02             	sub    eax,0x2
c001f3f4:	eb 03                	jmp    c001f3f9 <Vm::faultHandler(regs*)+0x50e>
c001f3f6:	83 c0 02             	add    eax,0x2
c001f3f9:	25 ff ff 00 00       	and    eax,0xffff
c001f3fe:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f401:	e9 b1 02 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f406:	83 ec 0c             	sub    esp,0xc
c001f409:	4b                   	dec    ebx
c001f40a:	68 27 c8 02 c0       	push   0xc002c827
c001f40f:	e8 24 3c ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f414:	83 c4 10             	add    esp,0x10
c001f417:	80 fb 05             	cmp    bl,0x5
c001f41a:	77 0a                	ja     c001f426 <Vm::faultHandler(regs*)+0x53b>
c001f41c:	0f b6 db             	movzx  ebx,bl
c001f41f:	ff 24 9d 98 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3768]
c001f426:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f42a:	eb 1b                	jmp    c001f447 <Vm::faultHandler(regs*)+0x55c>
c001f42c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f430:	eb 15                	jmp    c001f447 <Vm::faultHandler(regs*)+0x55c>
c001f432:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f436:	eb 0f                	jmp    c001f447 <Vm::faultHandler(regs*)+0x55c>
c001f438:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f43c:	eb 09                	jmp    c001f447 <Vm::faultHandler(regs*)+0x55c>
c001f43e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f441:	eb 04                	jmp    c001f447 <Vm::faultHandler(regs*)+0x55c>
c001f443:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f447:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f44c:	74 0d                	je     c001f45b <Vm::faultHandler(regs*)+0x570>
c001f44e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f455:	0f 87 8b 00 00 00    	ja     c001f4e6 <Vm::faultHandler(regs*)+0x5fb>
c001f45b:	53                   	push   ebx
c001f45c:	53                   	push   ebx
c001f45d:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f461:	52                   	push   edx
c001f462:	50                   	push   eax
c001f463:	e8 0f fa ff ff       	call   c001ee77 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f468:	5e                   	pop    esi
c001f469:	0f b6 c0             	movzx  eax,al
c001f46c:	5d                   	pop    ebp
c001f46d:	50                   	push   eax
c001f46e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f472:	50                   	push   eax
c001f473:	e8 91 f6 ff ff       	call   c001eb09 <Vm::outbv(unsigned short, unsigned char)>
c001f478:	83 c4 10             	add    esp,0x10
c001f47b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f47e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f482:	74 03                	je     c001f487 <Vm::faultHandler(regs*)+0x59c>
c001f484:	48                   	dec    eax
c001f485:	eb 01                	jmp    c001f488 <Vm::faultHandler(regs*)+0x59d>
c001f487:	40                   	inc    eax
c001f488:	0f b7 c0             	movzx  eax,ax
c001f48b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f48e:	e9 24 02 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f493:	83 ec 0c             	sub    esp,0xc
c001f496:	4b                   	dec    ebx
c001f497:	68 27 c8 02 c0       	push   0xc002c827
c001f49c:	e8 97 3b ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f4a1:	83 c4 10             	add    esp,0x10
c001f4a4:	80 fb 05             	cmp    bl,0x5
c001f4a7:	77 0a                	ja     c001f4b3 <Vm::faultHandler(regs*)+0x5c8>
c001f4a9:	0f b6 db             	movzx  ebx,bl
c001f4ac:	ff 24 9d b0 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3750]
c001f4b3:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f4b7:	eb 1b                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x5e9>
c001f4b9:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f4bd:	eb 15                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x5e9>
c001f4bf:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4c3:	eb 0f                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x5e9>
c001f4c5:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4c9:	eb 09                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x5e9>
c001f4cb:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4ce:	eb 04                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x5e9>
c001f4d0:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4d4:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f4dc:	74 39                	je     c001f517 <Vm::faultHandler(regs*)+0x62c>
c001f4de:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4e4:	76 31                	jbe    c001f517 <Vm::faultHandler(regs*)+0x62c>
c001f4e6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4ea:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4ee:	51                   	push   ecx
c001f4ef:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4f3:	51                   	push   ecx
c001f4f4:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4f8:	51                   	push   ecx
c001f4f9:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4fd:	51                   	push   ecx
c001f4fe:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f502:	52                   	push   edx
c001f503:	50                   	push   eax
c001f504:	50                   	push   eax
c001f505:	68 f4 c7 02 c0       	push   0xc002c7f4
c001f50a:	e8 29 3b ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f50f:	83 c4 20             	add    esp,0x20
c001f512:	e9 fb 01 00 00       	jmp    c001f712 <Vm::faultHandler(regs*)+0x827>
c001f517:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f51a:	0f b7 d3             	movzx  edx,bx
c001f51d:	81 e6 00 04 00 00    	and    esi,0x400
c001f523:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f526:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f52b:	74 1d                	je     c001f54a <Vm::faultHandler(regs*)+0x65f>
c001f52d:	51                   	push   ecx
c001f52e:	51                   	push   ecx
c001f52f:	52                   	push   edx
c001f530:	50                   	push   eax
c001f531:	e8 64 f9 ff ff       	call   c001ee9a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	89 ea                	mov    edx,ebp
c001f53b:	ef                   	out    dx,eax
c001f53c:	85 f6                	test   esi,esi
c001f53e:	74 05                	je     c001f545 <Vm::faultHandler(regs*)+0x65a>
c001f540:	83 eb 04             	sub    ebx,0x4
c001f543:	eb 21                	jmp    c001f566 <Vm::faultHandler(regs*)+0x67b>
c001f545:	83 c3 04             	add    ebx,0x4
c001f548:	eb 1c                	jmp    c001f566 <Vm::faultHandler(regs*)+0x67b>
c001f54a:	51                   	push   ecx
c001f54b:	51                   	push   ecx
c001f54c:	52                   	push   edx
c001f54d:	50                   	push   eax
c001f54e:	e8 35 f9 ff ff       	call   c001ee88 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f553:	83 c4 10             	add    esp,0x10
c001f556:	89 ea                	mov    edx,ebp
c001f558:	66 ef                	out    dx,ax
c001f55a:	85 f6                	test   esi,esi
c001f55c:	74 05                	je     c001f563 <Vm::faultHandler(regs*)+0x678>
c001f55e:	83 eb 02             	sub    ebx,0x2
c001f561:	eb 03                	jmp    c001f566 <Vm::faultHandler(regs*)+0x67b>
c001f563:	83 c3 02             	add    ebx,0x2
c001f566:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f56c:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f56f:	e9 43 01 00 00       	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f574:	53                   	push   ebx
c001f575:	53                   	push   ebx
c001f576:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f57a:	50                   	push   eax
c001f57b:	68 2d c8 02 c0       	push   0xc002c82d
c001f580:	e8 b3 3a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f585:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f58c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f590:	89 04 24             	mov    DWORD PTR [esp],eax
c001f593:	e8 5e f5 ff ff       	call   c001eaf6 <Vm::inbv(unsigned short)>
c001f598:	0f b6 c0             	movzx  eax,al
c001f59b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f59e:	eb 5e                	jmp    c001f5fe <Vm::faultHandler(regs*)+0x713>
c001f5a0:	51                   	push   ecx
c001f5a1:	51                   	push   ecx
c001f5a2:	53                   	push   ebx
c001f5a3:	68 33 c8 02 c0       	push   0xc002c833
c001f5a8:	e8 8b 3a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f5ad:	83 c4 10             	add    esp,0x10
c001f5b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5b5:	74 07                	je     c001f5be <Vm::faultHandler(regs*)+0x6d3>
c001f5b7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5bb:	ed                   	in     eax,dx
c001f5bc:	eb 14                	jmp    c001f5d2 <Vm::faultHandler(regs*)+0x6e7>
c001f5be:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5c1:	66 31 db             	xor    bx,bx
c001f5c4:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5c7:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5cb:	66 ed                	in     ax,dx
c001f5cd:	0f b7 c0             	movzx  eax,ax
c001f5d0:	09 d8                	or     eax,ebx
c001f5d2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5d5:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5d9:	e9 dc 00 00 00       	jmp    c001f6ba <Vm::faultHandler(regs*)+0x7cf>
c001f5de:	50                   	push   eax
c001f5df:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5e2:	53                   	push   ebx
c001f5e3:	68 39 c8 02 c0       	push   0xc002c839
c001f5e8:	e8 4b 3a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f5ed:	58                   	pop    eax
c001f5ee:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5f2:	5a                   	pop    edx
c001f5f3:	50                   	push   eax
c001f5f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5f8:	50                   	push   eax
c001f5f9:	e8 0b f5 ff ff       	call   c001eb09 <Vm::outbv(unsigned short, unsigned char)>
c001f5fe:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f602:	e9 85 00 00 00       	jmp    c001f68c <Vm::faultHandler(regs*)+0x7a1>
c001f607:	50                   	push   eax
c001f608:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f60b:	53                   	push   ebx
c001f60c:	68 42 c8 02 c0       	push   0xc002c842
c001f611:	e8 22 3a ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f616:	83 c4 10             	add    esp,0x10
c001f619:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f61d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f622:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f625:	74 03                	je     c001f62a <Vm::faultHandler(regs*)+0x73f>
c001f627:	ef                   	out    dx,eax
c001f628:	eb ab                	jmp    c001f5d5 <Vm::faultHandler(regs*)+0x6ea>
c001f62a:	66 ef                	out    dx,ax
c001f62c:	eb a7                	jmp    c001f5d5 <Vm::faultHandler(regs*)+0x6ea>
c001f62e:	55                   	push   ebp
c001f62f:	55                   	push   ebp
c001f630:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f633:	68 4b c8 02 c0       	push   0xc002c84b
c001f638:	e8 fb 39 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f63d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f644:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f648:	89 04 24             	mov    DWORD PTR [esp],eax
c001f64b:	e8 a6 f4 ff ff       	call   c001eaf6 <Vm::inbv(unsigned short)>
c001f650:	0f b6 c0             	movzx  eax,al
c001f653:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f656:	eb 31                	jmp    c001f689 <Vm::faultHandler(regs*)+0x79e>
c001f658:	56                   	push   esi
c001f659:	56                   	push   esi
c001f65a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f65d:	68 51 c8 02 c0       	push   0xc002c851
c001f662:	e8 d1 39 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f667:	83 c4 10             	add    esp,0x10
c001f66a:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f66d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f672:	74 03                	je     c001f677 <Vm::faultHandler(regs*)+0x78c>
c001f674:	ed                   	in     eax,dx
c001f675:	eb 0d                	jmp    c001f684 <Vm::faultHandler(regs*)+0x799>
c001f677:	66 ed                	in     ax,dx
c001f679:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f67c:	0f b7 c0             	movzx  eax,ax
c001f67f:	66 31 d2             	xor    dx,dx
c001f682:	09 d0                	or     eax,edx
c001f684:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f687:	eb 2e                	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f689:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f68c:	83 c4 10             	add    esp,0x10
c001f68f:	eb 29                	jmp    c001f6ba <Vm::faultHandler(regs*)+0x7cf>
c001f691:	50                   	push   eax
c001f692:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f695:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f698:	68 60 c8 02 c0       	push   0xc002c860
c001f69d:	e8 96 39 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f6a2:	83 c4 10             	add    esp,0x10
c001f6a5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f6a8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f6ad:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f6b0:	74 03                	je     c001f6b5 <Vm::faultHandler(regs*)+0x7ca>
c001f6b2:	ef                   	out    dx,eax
c001f6b3:	eb 02                	jmp    c001f6b7 <Vm::faultHandler(regs*)+0x7cc>
c001f6b5:	66 ef                	out    dx,ax
c001f6b7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6ba:	b0 01                	mov    al,0x1
c001f6bc:	eb 56                	jmp    c001f714 <Vm::faultHandler(regs*)+0x829>
c001f6be:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6c2:	51                   	push   ecx
c001f6c3:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6c7:	51                   	push   ecx
c001f6c8:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6cc:	51                   	push   ecx
c001f6cd:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6d1:	51                   	push   ecx
c001f6d2:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6d6:	52                   	push   edx
c001f6d7:	50                   	push   eax
c001f6d8:	50                   	push   eax
c001f6d9:	68 69 c8 02 c0       	push   0xc002c869
c001f6de:	e8 55 39 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c001f6e3:	83 c4 20             	add    esp,0x20
c001f6e6:	83 ec 0c             	sub    esp,0xc
c001f6e9:	6a 60                	push   0x60
c001f6eb:	e8 06 f4 ff ff       	call   c001eaf6 <Vm::inbv(unsigned short)>
c001f6f0:	83 c4 10             	add    esp,0x10
c001f6f3:	3c 1c                	cmp    al,0x1c
c001f6f5:	74 04                	je     c001f6fb <Vm::faultHandler(regs*)+0x810>
c001f6f7:	3c 5a                	cmp    al,0x5a
c001f6f9:	75 eb                	jne    c001f6e6 <Vm::faultHandler(regs*)+0x7fb>
c001f6fb:	3c 1c                	cmp    al,0x1c
c001f6fd:	74 04                	je     c001f703 <Vm::faultHandler(regs*)+0x818>
c001f6ff:	3c 5a                	cmp    al,0x5a
c001f701:	75 0f                	jne    c001f712 <Vm::faultHandler(regs*)+0x827>
c001f703:	83 ec 0c             	sub    esp,0xc
c001f706:	6a 60                	push   0x60
c001f708:	e8 e9 f3 ff ff       	call   c001eaf6 <Vm::inbv(unsigned short)>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	eb e9                	jmp    c001f6fb <Vm::faultHandler(regs*)+0x810>
c001f712:	31 c0                	xor    eax,eax
c001f714:	83 c4 1c             	add    esp,0x1c
c001f717:	5b                   	pop    ebx
c001f718:	5e                   	pop    esi
c001f719:	5f                   	pop    edi
c001f71a:	5d                   	pop    ebp
c001f71b:	c3                   	ret    

c001f71c <Vm::fpuInternalTo32(unsigned long long)>:
c001f71c:	57                   	push   edi
c001f71d:	56                   	push   esi
c001f71e:	53                   	push   ebx
c001f71f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f727:	89 d6                	mov    esi,edx
c001f729:	89 d7                	mov    edi,edx
c001f72b:	89 c1                	mov    ecx,eax
c001f72d:	c1 ef 14             	shr    edi,0x14
c001f730:	89 d3                	mov    ebx,edx
c001f732:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f738:	31 d2                	xor    edx,edx
c001f73a:	89 f8                	mov    eax,edi
c001f73c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f742:	bf ff 00 00 00       	mov    edi,0xff
c001f747:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f74c:	83 d2 ff             	adc    edx,0xffffffff
c001f74f:	39 c7                	cmp    edi,eax
c001f751:	bf 00 00 00 00       	mov    edi,0x0
c001f756:	19 d7                	sbb    edi,edx
c001f758:	72 15                	jb     c001f76f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f75a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f75e:	c1 e0 17             	shl    eax,0x17
c001f761:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f767:	09 f1                	or     ecx,esi
c001f769:	09 c1                	or     ecx,eax
c001f76b:	89 cf                	mov    edi,ecx
c001f76d:	eb 02                	jmp    c001f771 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f76f:	31 ff                	xor    edi,edi
c001f771:	89 f8                	mov    eax,edi
c001f773:	5b                   	pop    ebx
c001f774:	5e                   	pop    esi
c001f775:	5f                   	pop    edi
c001f776:	c3                   	ret    

c001f777 <Vm::fpuInternalTo64(unsigned long long)>:
c001f777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f77f:	c3                   	ret    

c001f780 <Vm::fpu32ToInternal(unsigned int)>:
c001f780:	57                   	push   edi
c001f781:	31 ff                	xor    edi,edi
c001f783:	56                   	push   esi
c001f784:	53                   	push   ebx
c001f785:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f789:	89 cb                	mov    ebx,ecx
c001f78b:	89 ce                	mov    esi,ecx
c001f78d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f793:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f799:	c1 e9 17             	shr    ecx,0x17
c001f79c:	89 f0                	mov    eax,esi
c001f79e:	0f b6 d1             	movzx  edx,cl
c001f7a1:	81 c2 80 03 00 00    	add    edx,0x380
c001f7a7:	89 d1                	mov    ecx,edx
c001f7a9:	89 fa                	mov    edx,edi
c001f7ab:	c1 e1 14             	shl    ecx,0x14
c001f7ae:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7b2:	c1 e0 1d             	shl    eax,0x1d
c001f7b5:	89 d7                	mov    edi,edx
c001f7b7:	89 c6                	mov    esi,eax
c001f7b9:	89 ca                	mov    edx,ecx
c001f7bb:	89 f0                	mov    eax,esi
c001f7bd:	09 fa                	or     edx,edi
c001f7bf:	09 da                	or     edx,ebx
c001f7c1:	5b                   	pop    ebx
c001f7c2:	5e                   	pop    esi
c001f7c3:	5f                   	pop    edi
c001f7c4:	c3                   	ret    

c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7cd:	c3                   	ret    

c001f7ce <Vm::fpuFloatToLong(unsigned long long)>:
c001f7ce:	57                   	push   edi
c001f7cf:	31 c0                	xor    eax,eax
c001f7d1:	56                   	push   esi
c001f7d2:	31 d2                	xor    edx,edx
c001f7d4:	53                   	push   ebx
c001f7d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7dd:	89 d9                	mov    ecx,ebx
c001f7df:	c1 e9 14             	shr    ecx,0x14
c001f7e2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7e8:	89 cf                	mov    edi,ecx
c001f7ea:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7f0:	78 33                	js     c001f825 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7f2:	89 d9                	mov    ecx,ebx
c001f7f4:	89 f0                	mov    eax,esi
c001f7f6:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7fc:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f802:	89 ca                	mov    edx,ecx
c001f804:	b9 34 00 00 00       	mov    ecx,0x34
c001f809:	29 f9                	sub    ecx,edi
c001f80b:	0f ad d0             	shrd   eax,edx,cl
c001f80e:	d3 fa                	sar    edx,cl
c001f810:	f6 c1 20             	test   cl,0x20
c001f813:	74 05                	je     c001f81a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f815:	89 d0                	mov    eax,edx
c001f817:	c1 fa 1f             	sar    edx,0x1f
c001f81a:	85 db                	test   ebx,ebx
c001f81c:	79 07                	jns    c001f825 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f81e:	f7 d8                	neg    eax
c001f820:	83 d2 00             	adc    edx,0x0
c001f823:	f7 da                	neg    edx
c001f825:	5b                   	pop    ebx
c001f826:	5e                   	pop    esi
c001f827:	5f                   	pop    edi
c001f828:	c3                   	ret    

c001f829 <Vm::fpuULongToFloat(unsigned long long)>:
c001f829:	57                   	push   edi
c001f82a:	31 c9                	xor    ecx,ecx
c001f82c:	56                   	push   esi
c001f82d:	53                   	push   ebx
c001f82e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f836:	0f ba e7 14          	bt     edi,0x14
c001f83a:	72 07                	jb     c001f843 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f83c:	01 f6                	add    esi,esi
c001f83e:	11 ff                	adc    edi,edi
c001f840:	41                   	inc    ecx
c001f841:	eb f3                	jmp    c001f836 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f843:	89 fa                	mov    edx,edi
c001f845:	89 f0                	mov    eax,esi
c001f847:	bb 33 04 00 00       	mov    ebx,0x433
c001f84c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f852:	29 cb                	sub    ebx,ecx
c001f854:	89 d9                	mov    ecx,ebx
c001f856:	5b                   	pop    ebx
c001f857:	c1 e1 14             	shl    ecx,0x14
c001f85a:	5e                   	pop    esi
c001f85b:	09 ca                	or     edx,ecx
c001f85d:	5f                   	pop    edi
c001f85e:	c3                   	ret    

c001f85f <Vm::fpuLongToFloat(long long)>:
c001f85f:	56                   	push   esi
c001f860:	31 c0                	xor    eax,eax
c001f862:	53                   	push   ebx
c001f863:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f86b:	39 c8                	cmp    eax,ecx
c001f86d:	19 d8                	sbb    eax,ebx
c001f86f:	7d 04                	jge    c001f875 <Vm::fpuLongToFloat(long long)+0x16>
c001f871:	31 f6                	xor    esi,esi
c001f873:	eb 0c                	jmp    c001f881 <Vm::fpuLongToFloat(long long)+0x22>
c001f875:	f7 d9                	neg    ecx
c001f877:	be 01 00 00 00       	mov    esi,0x1
c001f87c:	83 d3 00             	adc    ebx,0x0
c001f87f:	f7 db                	neg    ebx
c001f881:	31 c0                	xor    eax,eax
c001f883:	0f ba e3 14          	bt     ebx,0x14
c001f887:	72 07                	jb     c001f890 <Vm::fpuLongToFloat(long long)+0x31>
c001f889:	01 c9                	add    ecx,ecx
c001f88b:	11 db                	adc    ebx,ebx
c001f88d:	40                   	inc    eax
c001f88e:	eb f3                	jmp    c001f883 <Vm::fpuLongToFloat(long long)+0x24>
c001f890:	ba 33 04 00 00       	mov    edx,0x433
c001f895:	29 c2                	sub    edx,eax
c001f897:	89 c8                	mov    eax,ecx
c001f899:	c1 e2 14             	shl    edx,0x14
c001f89c:	89 d9                	mov    ecx,ebx
c001f89e:	89 f3                	mov    ebx,esi
c001f8a0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8a6:	09 ca                	or     edx,ecx
c001f8a8:	84 db                	test   bl,bl
c001f8aa:	74 06                	je     c001f8b2 <Vm::fpuLongToFloat(long long)+0x53>
c001f8ac:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8b2:	5b                   	pop    ebx
c001f8b3:	5e                   	pop    esi
c001f8b4:	c3                   	ret    

c001f8b5 <Vm::fpuGet0()>:
c001f8b5:	31 c0                	xor    eax,eax
c001f8b7:	31 d2                	xor    edx,edx
c001f8b9:	c3                   	ret    

c001f8ba <Vm::fpuGet1()>:
c001f8ba:	b8 01 00 00 00       	mov    eax,0x1
c001f8bf:	31 d2                	xor    edx,edx
c001f8c1:	c3                   	ret    

c001f8c2 <Vm::fpuGetPi()>:
c001f8c2:	b8 03 00 00 00       	mov    eax,0x3
c001f8c7:	31 d2                	xor    edx,edx
c001f8c9:	c3                   	ret    

c001f8ca <Vm::fpuGetLog2E()>:
c001f8ca:	83 ec 18             	sub    esp,0x18
c001f8cd:	68 c8 c8 02 c0       	push   0xc002c8c8
c001f8d2:	e8 0e ae ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001f8d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8dc:	31 d2                	xor    edx,edx
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	c3                   	ret    

c001f8e2 <Vm::fpuGetLogE2()>:
c001f8e2:	83 ec 18             	sub    esp,0x18
c001f8e5:	68 d4 c8 02 c0       	push   0xc002c8d4
c001f8ea:	e8 f6 ad ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001f8ef:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8f4:	31 d2                	xor    edx,edx
c001f8f6:	83 c4 1c             	add    esp,0x1c
c001f8f9:	c3                   	ret    

c001f8fa <Vm::fpuGetLog210()>:
c001f8fa:	83 ec 18             	sub    esp,0x18
c001f8fd:	68 e0 c8 02 c0       	push   0xc002c8e0
c001f902:	e8 de ad ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001f907:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f90c:	31 d2                	xor    edx,edx
c001f90e:	83 c4 1c             	add    esp,0x1c
c001f911:	c3                   	ret    

c001f912 <Vm::fpuGetLog102()>:
c001f912:	83 ec 18             	sub    esp,0x18
c001f915:	68 ed c8 02 c0       	push   0xc002c8ed
c001f91a:	e8 c6 ad ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001f91f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f924:	31 d2                	xor    edx,edx
c001f926:	83 c4 1c             	add    esp,0x1c
c001f929:	c3                   	ret    

c001f92a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f92e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f936:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f93a:	0f 92 c0             	setb   al
c001f93d:	c3                   	ret    

c001f93e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f93e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f94a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f94e:	09 c2                	or     edx,eax
c001f950:	0f 94 c0             	sete   al
c001f953:	c3                   	ret    

c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f954:	57                   	push   edi
c001f955:	56                   	push   esi
c001f956:	53                   	push   ebx
c001f957:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f95b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f95f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f963:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f967:	57                   	push   edi
c001f968:	56                   	push   esi
c001f969:	53                   	push   ebx
c001f96a:	51                   	push   ecx
c001f96b:	e8 ce ff ff ff       	call   c001f93e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	88 c2                	mov    dl,al
c001f975:	31 c0                	xor    eax,eax
c001f977:	84 d2                	test   dl,dl
c001f979:	75 0c                	jne    c001f987 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f97b:	57                   	push   edi
c001f97c:	56                   	push   esi
c001f97d:	53                   	push   ebx
c001f97e:	51                   	push   ecx
c001f97f:	e8 a6 ff ff ff       	call   c001f92a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f984:	83 c4 10             	add    esp,0x10
c001f987:	83 e0 01             	and    eax,0x1
c001f98a:	5b                   	pop    ebx
c001f98b:	88 c1                	mov    cl,al
c001f98d:	83 e2 01             	and    edx,0x1
c001f990:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001f995:	c1 e2 06             	shl    edx,0x6
c001f998:	83 e0 ba             	and    eax,0xffffffba
c001f99b:	5e                   	pop    esi
c001f99c:	09 c8                	or     eax,ecx
c001f99e:	5f                   	pop    edi
c001f99f:	09 d0                	or     eax,edx
c001f9a1:	a2 61 1b 03 c0       	mov    ds:0xc0031b61,al
c001f9a6:	c3                   	ret    

c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9af:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9b3:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9b7:	c3                   	ret    

c001f9b8 <Vm::fpuAbs(unsigned long long)>:
c001f9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9c0:	c3                   	ret    

c001f9c1 <Vm::fpuChs(unsigned long long)>:
c001f9c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9c9:	f7 d8                	neg    eax
c001f9cb:	83 d2 00             	adc    edx,0x0
c001f9ce:	f7 da                	neg    edx
c001f9d0:	c3                   	ret    

c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9d1:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9d5:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9da:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9de:	eb c7                	jmp    c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9e0:	53                   	push   ebx
c001f9e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9ed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9f1:	0f af ca             	imul   ecx,edx
c001f9f4:	0f af d8             	imul   ebx,eax
c001f9f7:	f7 e2                	mul    edx
c001f9f9:	01 d9                	add    ecx,ebx
c001f9fb:	5b                   	pop    ebx
c001f9fc:	01 ca                	add    edx,ecx
c001f9fe:	c3                   	ret    

c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9ff:	83 ec 0c             	sub    esp,0xc
c001fa02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa12:	e8 a5 70 00 00       	call   c0026abc <__udivdi3>
c001fa17:	83 c4 1c             	add    esp,0x1c
c001fa1a:	c3                   	ret    

c001fa1b <Vm::fpuSquare(unsigned long long)>:
c001fa1b:	50                   	push   eax
c001fa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa24:	52                   	push   edx
c001fa25:	50                   	push   eax
c001fa26:	52                   	push   edx
c001fa27:	50                   	push   eax
c001fa28:	e8 b3 ff ff ff       	call   c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa2d:	83 c4 14             	add    esp,0x14
c001fa30:	c3                   	ret    

c001fa31 <Vm::fpuGetReg(int)>:
c001fa31:	83 ec 0c             	sub    esp,0xc
c001fa34:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa39:	76 10                	jbe    c001fa4b <Vm::fpuGetReg(int)+0x1a>
c001fa3b:	83 ec 0c             	sub    esp,0xc
c001fa3e:	68 fa c8 02 c0       	push   0xc002c8fa
c001fa43:	e8 9d ac ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001fa48:	83 c4 10             	add    esp,0x10
c001fa4b:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001fa50:	b9 08 00 00 00       	mov    ecx,0x8
c001fa55:	c0 e8 03             	shr    al,0x3
c001fa58:	83 e0 07             	and    eax,0x7
c001fa5b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa5f:	99                   	cdq    
c001fa60:	f7 f9                	idiv   ecx
c001fa62:	8b 04 d5 64 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce49c]
c001fa69:	8b 14 d5 68 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce498]
c001fa70:	83 c4 0c             	add    esp,0xc
c001fa73:	c3                   	ret    

c001fa74 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa74:	57                   	push   edi
c001fa75:	56                   	push   esi
c001fa76:	52                   	push   edx
c001fa77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa7f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa84:	76 10                	jbe    c001fa96 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa86:	83 ec 0c             	sub    esp,0xc
c001fa89:	68 0d c9 02 c0       	push   0xc002c90d
c001fa8e:	e8 52 ac ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001fa9b:	b9 08 00 00 00       	mov    ecx,0x8
c001faa0:	c0 e8 03             	shr    al,0x3
c001faa3:	83 e0 07             	and    eax,0x7
c001faa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001faaa:	99                   	cdq    
c001faab:	f7 f9                	idiv   ecx
c001faad:	89 34 d5 64 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce49c],esi
c001fab4:	89 3c d5 68 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce498],edi
c001fabb:	58                   	pop    eax
c001fabc:	5e                   	pop    esi
c001fabd:	5f                   	pop    edi
c001fabe:	c3                   	ret    

c001fabf <Vm::fpuPush(unsigned long long)>:
c001fabf:	a0 61 1b 03 c0       	mov    al,ds:0xc0031b61
c001fac4:	c0 e8 03             	shr    al,0x3
c001fac7:	83 e0 07             	and    eax,0x7
c001faca:	83 c0 07             	add    eax,0x7
c001facd:	88 c2                	mov    dl,al
c001facf:	83 e0 07             	and    eax,0x7
c001fad2:	83 e2 07             	and    edx,0x7
c001fad5:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fadc:	8a 15 61 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b61
c001fae2:	83 e2 c7             	and    edx,0xffffffc7
c001fae5:	09 ca                	or     edx,ecx
c001fae7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faeb:	88 15 61 1b 03 c0    	mov    BYTE PTR ds:0xc0031b61,dl
c001faf1:	89 0c c5 68 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce498],ecx
c001faf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fafc:	89 14 c5 64 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce49c],edx
c001fb03:	a1 a4 1b 03 c0       	mov    eax,ds:0xc0031ba4
c001fb08:	83 f8 08             	cmp    eax,0x8
c001fb0b:	75 08                	jne    c001fb15 <Vm::fpuPush(unsigned long long)+0x56>
c001fb0d:	80 0d 60 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b60,0x40
c001fb14:	c3                   	ret    
c001fb15:	40                   	inc    eax
c001fb16:	a3 a4 1b 03 c0       	mov    ds:0xc0031ba4,eax
c001fb1b:	c3                   	ret    

c001fb1c <Vm::fpuPop()>:
c001fb1c:	8a 0d 61 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b61
c001fb22:	53                   	push   ebx
c001fb23:	c0 e9 03             	shr    cl,0x3
c001fb26:	8a 1d 61 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b61
c001fb2c:	83 e1 07             	and    ecx,0x7
c001fb2f:	83 e3 c7             	and    ebx,0xffffffc7
c001fb32:	8b 04 cd 64 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce49c]
c001fb39:	8b 14 cd 68 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce498]
c001fb40:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb47:	83 e1 38             	and    ecx,0x38
c001fb4a:	09 d9                	or     ecx,ebx
c001fb4c:	88 0d 61 1b 03 c0    	mov    BYTE PTR ds:0xc0031b61,cl
c001fb52:	8b 0d a4 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ba4
c001fb58:	85 c9                	test   ecx,ecx
c001fb5a:	74 09                	je     c001fb65 <Vm::fpuPop()+0x49>
c001fb5c:	49                   	dec    ecx
c001fb5d:	89 0d a4 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba4,ecx
c001fb63:	eb 07                	jmp    c001fb6c <Vm::fpuPop()+0x50>
c001fb65:	80 0d 60 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b60,0x40
c001fb6c:	5b                   	pop    ebx
c001fb6d:	c3                   	ret    

c001fb6e <Vm::x87Handler(regs*)>:
c001fb6e:	55                   	push   ebp
c001fb6f:	57                   	push   edi
c001fb70:	56                   	push   esi
c001fb71:	53                   	push   ebx
c001fb72:	83 ec 1c             	sub    esp,0x1c
c001fb75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb79:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb7e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb81:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb89:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb8d:	50                   	push   eax
c001fb8e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb92:	50                   	push   eax
c001fb93:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb97:	50                   	push   eax
c001fb98:	53                   	push   ebx
c001fb99:	e8 0e a2 ff ff       	call   c0019dac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb9e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fba1:	83 c4 10             	add    esp,0x10
c001fba4:	89 c6                	mov    esi,eax
c001fba6:	80 fa d9             	cmp    dl,0xd9
c001fba9:	0f 85 52 01 00 00    	jne    c001fd01 <Vm::x87Handler(regs*)+0x193>
c001fbaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbb3:	8d 50 20             	lea    edx,[eax+0x20]
c001fbb6:	80 fa 0e             	cmp    dl,0xe
c001fbb9:	0f 87 86 00 00 00    	ja     c001fc45 <Vm::x87Handler(regs*)+0xd7>
c001fbbf:	0f b6 d2             	movzx  edx,dl
c001fbc2:	ff 24 95 20 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd36e0]
c001fbc9:	e8 e7 fc ff ff       	call   c001f8b5 <Vm::fpuGet0()>
c001fbce:	eb 05                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fbd0:	e8 e5 fc ff ff       	call   c001f8ba <Vm::fpuGet1()>
c001fbd5:	57                   	push   edi
c001fbd6:	57                   	push   edi
c001fbd7:	52                   	push   edx
c001fbd8:	50                   	push   eax
c001fbd9:	e8 e1 fe ff ff       	call   c001fabf <Vm::fpuPush(unsigned long long)>
c001fbde:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	b0 01                	mov    al,0x1
c001fbe7:	e9 e3 09 00 00       	jmp    c00205cf <Vm::x87Handler(regs*)+0xa61>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	6a 00                	push   0x0
c001fbf1:	e8 3b fe ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fbf6:	59                   	pop    ecx
c001fbf7:	5e                   	pop    esi
c001fbf8:	52                   	push   edx
c001fbf9:	50                   	push   eax
c001fbfa:	e8 c2 fd ff ff       	call   c001f9c1 <Vm::fpuChs(unsigned long long)>
c001fbff:	eb 13                	jmp    c001fc14 <Vm::x87Handler(regs*)+0xa6>
c001fc01:	83 ec 0c             	sub    esp,0xc
c001fc04:	6a 00                	push   0x0
c001fc06:	e8 26 fe ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fc0b:	5f                   	pop    edi
c001fc0c:	5d                   	pop    ebp
c001fc0d:	52                   	push   edx
c001fc0e:	50                   	push   eax
c001fc0f:	e8 a4 fd ff ff       	call   c001f9b8 <Vm::fpuAbs(unsigned long long)>
c001fc14:	83 c4 0c             	add    esp,0xc
c001fc17:	52                   	push   edx
c001fc18:	50                   	push   eax
c001fc19:	6a 00                	push   0x0
c001fc1b:	e8 54 fe ff ff       	call   c001fa74 <Vm::fpuSetReg(int, unsigned long long)>
c001fc20:	eb bc                	jmp    c001fbde <Vm::x87Handler(regs*)+0x70>
c001fc22:	e8 d3 fc ff ff       	call   c001f8fa <Vm::fpuGetLog210()>
c001fc27:	eb ac                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fc29:	e8 9c fc ff ff       	call   c001f8ca <Vm::fpuGetLog2E()>
c001fc2e:	eb a5                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fc30:	e8 8d fc ff ff       	call   c001f8c2 <Vm::fpuGetPi()>
c001fc35:	eb 9e                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fc37:	e8 d6 fc ff ff       	call   c001f912 <Vm::fpuGetLog102()>
c001fc3c:	eb 97                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fc3e:	e8 9f fc ff ff       	call   c001f8e2 <Vm::fpuGetLogE2()>
c001fc43:	eb 90                	jmp    c001fbd5 <Vm::x87Handler(regs*)+0x67>
c001fc45:	8d 50 40             	lea    edx,[eax+0x40]
c001fc48:	80 fa 07             	cmp    dl,0x7
c001fc4b:	77 15                	ja     c001fc62 <Vm::x87Handler(regs*)+0xf4>
c001fc4d:	83 ec 0c             	sub    esp,0xc
c001fc50:	2d c0 00 00 00       	sub    eax,0xc0
c001fc55:	50                   	push   eax
c001fc56:	e8 d6 fd ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fc5b:	59                   	pop    ecx
c001fc5c:	5e                   	pop    esi
c001fc5d:	e9 75 ff ff ff       	jmp    c001fbd7 <Vm::x87Handler(regs*)+0x69>
c001fc62:	8d 50 38             	lea    edx,[eax+0x38]
c001fc65:	80 fa 07             	cmp    dl,0x7
c001fc68:	77 3c                	ja     c001fca6 <Vm::x87Handler(regs*)+0x138>
c001fc6a:	83 ec 0c             	sub    esp,0xc
c001fc6d:	2d c8 00 00 00       	sub    eax,0xc8
c001fc72:	50                   	push   eax
c001fc73:	e8 b9 fd ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fc78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7f:	89 c6                	mov    esi,eax
c001fc81:	89 d7                	mov    edi,edx
c001fc83:	e8 a9 fd ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fc88:	83 c4 0c             	add    esp,0xc
c001fc8b:	52                   	push   edx
c001fc8c:	50                   	push   eax
c001fc8d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc91:	2d c8 00 00 00       	sub    eax,0xc8
c001fc96:	50                   	push   eax
c001fc97:	e8 d8 fd ff ff       	call   c001fa74 <Vm::fpuSetReg(int, unsigned long long)>
c001fc9c:	83 c4 0c             	add    esp,0xc
c001fc9f:	57                   	push   edi
c001fca0:	56                   	push   esi
c001fca1:	e9 73 ff ff ff       	jmp    c001fc19 <Vm::x87Handler(regs*)+0xab>
c001fca6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcaa:	84 d2                	test   dl,dl
c001fcac:	75 0f                	jne    c001fcbd <Vm::x87Handler(regs*)+0x14f>
c001fcae:	83 ec 0c             	sub    esp,0xc
c001fcb1:	ff 36                	push   DWORD PTR [esi]
c001fcb3:	e8 c8 fa ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c001fcb8:	e9 bf 00 00 00       	jmp    c001fd7c <Vm::x87Handler(regs*)+0x20e>
c001fcbd:	80 fa 03             	cmp    dl,0x3
c001fcc0:	75 13                	jne    c001fcd5 <Vm::x87Handler(regs*)+0x167>
c001fcc2:	e8 55 fe ff ff       	call   c001fb1c <Vm::fpuPop()>
c001fcc7:	55                   	push   ebp
c001fcc8:	55                   	push   ebp
c001fcc9:	52                   	push   edx
c001fcca:	50                   	push   eax
c001fccb:	e8 4c fa ff ff       	call   c001f71c <Vm::fpuInternalTo32(unsigned long long)>
c001fcd0:	e9 88 00 00 00       	jmp    c001fd5d <Vm::x87Handler(regs*)+0x1ef>
c001fcd5:	80 fa 05             	cmp    dl,0x5
c001fcd8:	75 0e                	jne    c001fce8 <Vm::x87Handler(regs*)+0x17a>
c001fcda:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcdd:	66 a3 62 1b 03 c0    	mov    ds:0xc0031b62,ax
c001fce3:	e9 df 00 00 00       	jmp    c001fdc7 <Vm::x87Handler(regs*)+0x259>
c001fce8:	31 c0                	xor    eax,eax
c001fcea:	80 fa 07             	cmp    dl,0x7
c001fced:	0f 85 dc 08 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c001fcf3:	66 a1 62 1b 03 c0    	mov    ax,ds:0xc0031b62
c001fcf9:	66 89 06             	mov    WORD PTR [esi],ax
c001fcfc:	e9 c6 00 00 00       	jmp    c001fdc7 <Vm::x87Handler(regs*)+0x259>
c001fd01:	80 fa d8             	cmp    dl,0xd8
c001fd04:	0f 84 c9 00 00 00    	je     c001fdd3 <Vm::x87Handler(regs*)+0x265>
c001fd0a:	80 fa dc             	cmp    dl,0xdc
c001fd0d:	0f 84 0d 02 00 00    	je     c001ff20 <Vm::x87Handler(regs*)+0x3b2>
c001fd13:	80 fa de             	cmp    dl,0xde
c001fd16:	0f 84 cd 02 00 00    	je     c001ffe9 <Vm::x87Handler(regs*)+0x47b>
c001fd1c:	80 fa dd             	cmp    dl,0xdd
c001fd1f:	0f 84 5f 04 00 00    	je     c0020184 <Vm::x87Handler(regs*)+0x616>
c001fd25:	80 fa da             	cmp    dl,0xda
c001fd28:	0f 84 24 05 00 00    	je     c0020252 <Vm::x87Handler(regs*)+0x6e4>
c001fd2e:	80 fa df             	cmp    dl,0xdf
c001fd31:	0f 84 68 05 00 00    	je     c002029f <Vm::x87Handler(regs*)+0x731>
c001fd37:	31 c0                	xor    eax,eax
c001fd39:	80 fa db             	cmp    dl,0xdb
c001fd3c:	0f 85 8d 08 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c001fd42:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd46:	80 fa 03             	cmp    dl,0x3
c001fd49:	0f 85 70 06 00 00    	jne    c00203bf <Vm::x87Handler(regs*)+0x851>
c001fd4f:	e8 c8 fd ff ff       	call   c001fb1c <Vm::fpuPop()>
c001fd54:	55                   	push   ebp
c001fd55:	55                   	push   ebp
c001fd56:	52                   	push   edx
c001fd57:	50                   	push   eax
c001fd58:	e8 71 fa ff ff       	call   c001f7ce <Vm::fpuFloatToLong(unsigned long long)>
c001fd5d:	83 c4 10             	add    esp,0x10
c001fd60:	89 06                	mov    DWORD PTR [esi],eax
c001fd62:	eb 63                	jmp    c001fdc7 <Vm::x87Handler(regs*)+0x259>
c001fd64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd68:	84 d2                	test   dl,dl
c001fd6a:	0f 85 e6 05 00 00    	jne    c0020356 <Vm::x87Handler(regs*)+0x7e8>
c001fd70:	57                   	push   edi
c001fd71:	57                   	push   edi
c001fd72:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd75:	ff 36                	push   DWORD PTR [esi]
c001fd77:	e8 49 fa ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c001fd7c:	5e                   	pop    esi
c001fd7d:	5f                   	pop    edi
c001fd7e:	52                   	push   edx
c001fd7f:	50                   	push   eax
c001fd80:	e8 3a fd ff ff       	call   c001fabf <Vm::fpuPush(unsigned long long)>
c001fd85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd89:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd8c:	e9 51 fe ff ff       	jmp    c001fbe2 <Vm::x87Handler(regs*)+0x74>
c001fd91:	80 fa 03             	cmp    dl,0x3
c001fd94:	0f 85 d7 06 00 00    	jne    c0020471 <Vm::x87Handler(regs*)+0x903>
c001fd9a:	57                   	push   edi
c001fd9b:	57                   	push   edi
c001fd9c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd9f:	ff 36                	push   DWORD PTR [esi]
c001fda1:	e8 1f fa ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c001fda6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdad:	89 c6                	mov    esi,eax
c001fdaf:	89 d7                	mov    edi,edx
c001fdb1:	e8 7b fc ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fdb6:	57                   	push   edi
c001fdb7:	56                   	push   esi
c001fdb8:	52                   	push   edx
c001fdb9:	50                   	push   eax
c001fdba:	e8 95 fb ff ff       	call   c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdbf:	83 c4 20             	add    esp,0x20
c001fdc2:	e8 55 fd ff ff       	call   c001fb1c <Vm::fpuPop()>
c001fdc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdcb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdce:	e9 12 fe ff ff       	jmp    c001fbe5 <Vm::x87Handler(regs*)+0x77>
c001fdd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdd7:	8d 50 40             	lea    edx,[eax+0x40]
c001fdda:	80 fa 07             	cmp    dl,0x7
c001fddd:	77 29                	ja     c001fe08 <Vm::x87Handler(regs*)+0x29a>
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	2d c0 00 00 00       	sub    eax,0xc0
c001fde7:	50                   	push   eax
c001fde8:	e8 44 fc ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fded:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf4:	89 c6                	mov    esi,eax
c001fdf6:	89 d7                	mov    edi,edx
c001fdf8:	e8 34 fc ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fdfd:	57                   	push   edi
c001fdfe:	56                   	push   esi
c001fdff:	52                   	push   edx
c001fe00:	50                   	push   eax
c001fe01:	e8 a1 fb ff ff       	call   c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe06:	eb 2f                	jmp    c001fe37 <Vm::x87Handler(regs*)+0x2c9>
c001fe08:	8d 50 38             	lea    edx,[eax+0x38]
c001fe0b:	80 fa 07             	cmp    dl,0x7
c001fe0e:	77 2f                	ja     c001fe3f <Vm::x87Handler(regs*)+0x2d1>
c001fe10:	83 ec 0c             	sub    esp,0xc
c001fe13:	2d c8 00 00 00       	sub    eax,0xc8
c001fe18:	50                   	push   eax
c001fe19:	e8 13 fc ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fe1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe25:	89 c6                	mov    esi,eax
c001fe27:	89 d7                	mov    edi,edx
c001fe29:	e8 03 fc ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fe2e:	57                   	push   edi
c001fe2f:	56                   	push   esi
c001fe30:	52                   	push   edx
c001fe31:	50                   	push   eax
c001fe32:	e8 a9 fb ff ff       	call   c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe37:	83 c4 1c             	add    esp,0x1c
c001fe3a:	e9 d8 fd ff ff       	jmp    c001fc17 <Vm::x87Handler(regs*)+0xa9>
c001fe3f:	8d 50 30             	lea    edx,[eax+0x30]
c001fe42:	80 fa 07             	cmp    dl,0x7
c001fe45:	77 0d                	ja     c001fe54 <Vm::x87Handler(regs*)+0x2e6>
c001fe47:	83 ec 0c             	sub    esp,0xc
c001fe4a:	2d d0 00 00 00       	sub    eax,0xd0
c001fe4f:	e9 99 03 00 00       	jmp    c00201ed <Vm::x87Handler(regs*)+0x67f>
c001fe54:	8d 50 28             	lea    edx,[eax+0x28]
c001fe57:	80 fa 07             	cmp    dl,0x7
c001fe5a:	77 0d                	ja     c001fe69 <Vm::x87Handler(regs*)+0x2fb>
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	2d d8 00 00 00       	sub    eax,0xd8
c001fe64:	e9 c0 03 00 00       	jmp    c0020229 <Vm::x87Handler(regs*)+0x6bb>
c001fe69:	8d 50 20             	lea    edx,[eax+0x20]
c001fe6c:	80 fa 07             	cmp    dl,0x7
c001fe6f:	77 1b                	ja     c001fe8c <Vm::x87Handler(regs*)+0x31e>
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	2d e0 00 00 00       	sub    eax,0xe0
c001fe79:	50                   	push   eax
c001fe7a:	e8 b2 fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fe7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe86:	89 c6                	mov    esi,eax
c001fe88:	89 d7                	mov    edi,edx
c001fe8a:	eb 22                	jmp    c001feae <Vm::x87Handler(regs*)+0x340>
c001fe8c:	8d 50 18             	lea    edx,[eax+0x18]
c001fe8f:	80 fa 07             	cmp    dl,0x7
c001fe92:	77 2d                	ja     c001fec1 <Vm::x87Handler(regs*)+0x353>
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	6a 00                	push   0x0
c001fe99:	e8 93 fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fe9e:	89 c6                	mov    esi,eax
c001fea0:	89 d7                	mov    edi,edx
c001fea2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea6:	2d e8 00 00 00       	sub    eax,0xe8
c001feab:	89 04 24             	mov    DWORD PTR [esp],eax
c001feae:	e8 7e fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001feb3:	57                   	push   edi
c001feb4:	56                   	push   esi
c001feb5:	52                   	push   edx
c001feb6:	50                   	push   eax
c001feb7:	e8 15 fb ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001febc:	e9 76 ff ff ff       	jmp    c001fe37 <Vm::x87Handler(regs*)+0x2c9>
c001fec1:	8d 50 10             	lea    edx,[eax+0x10]
c001fec4:	80 fa 07             	cmp    dl,0x7
c001fec7:	77 1b                	ja     c001fee4 <Vm::x87Handler(regs*)+0x376>
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	2d f0 00 00 00       	sub    eax,0xf0
c001fed1:	50                   	push   eax
c001fed2:	e8 5a fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fed7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fede:	89 c6                	mov    esi,eax
c001fee0:	89 d7                	mov    edi,edx
c001fee2:	eb 22                	jmp    c001ff06 <Vm::x87Handler(regs*)+0x398>
c001fee4:	3c f7                	cmp    al,0xf7
c001fee6:	0f 86 d1 03 00 00    	jbe    c00202bd <Vm::x87Handler(regs*)+0x74f>
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	6a 00                	push   0x0
c001fef1:	e8 3b fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001fef6:	89 c6                	mov    esi,eax
c001fef8:	89 d7                	mov    edi,edx
c001fefa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fefe:	2d f8 00 00 00       	sub    eax,0xf8
c001ff03:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff06:	e8 26 fb ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ff0b:	57                   	push   edi
c001ff0c:	56                   	push   esi
c001ff0d:	52                   	push   edx
c001ff0e:	50                   	push   eax
c001ff0f:	e8 eb fa ff ff       	call   c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff14:	83 c4 1c             	add    esp,0x1c
c001ff17:	52                   	push   edx
c001ff18:	50                   	push   eax
c001ff19:	6a 00                	push   0x0
c001ff1b:	e9 51 02 00 00       	jmp    c0020171 <Vm::x87Handler(regs*)+0x603>
c001ff20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff24:	8d 50 40             	lea    edx,[eax+0x40]
c001ff27:	80 fa 07             	cmp    dl,0x7
c001ff2a:	77 37                	ja     c001ff63 <Vm::x87Handler(regs*)+0x3f5>
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	2d c0 00 00 00       	sub    eax,0xc0
c001ff34:	50                   	push   eax
c001ff35:	e8 f7 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ff3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff41:	89 c6                	mov    esi,eax
c001ff43:	89 d7                	mov    edi,edx
c001ff45:	e8 e7 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ff4a:	57                   	push   edi
c001ff4b:	56                   	push   esi
c001ff4c:	52                   	push   edx
c001ff4d:	50                   	push   eax
c001ff4e:	e8 54 fa ff ff       	call   c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff53:	83 c4 1c             	add    esp,0x1c
c001ff56:	52                   	push   edx
c001ff57:	50                   	push   eax
c001ff58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5c:	2d c0 00 00 00       	sub    eax,0xc0
c001ff61:	eb 3d                	jmp    c001ffa0 <Vm::x87Handler(regs*)+0x432>
c001ff63:	8d 50 38             	lea    edx,[eax+0x38]
c001ff66:	80 fa 07             	cmp    dl,0x7
c001ff69:	77 3b                	ja     c001ffa6 <Vm::x87Handler(regs*)+0x438>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	2d c8 00 00 00       	sub    eax,0xc8
c001ff73:	50                   	push   eax
c001ff74:	e8 b8 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ff79:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff80:	89 c6                	mov    esi,eax
c001ff82:	89 d7                	mov    edi,edx
c001ff84:	e8 a8 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ff89:	57                   	push   edi
c001ff8a:	56                   	push   esi
c001ff8b:	52                   	push   edx
c001ff8c:	50                   	push   eax
c001ff8d:	e8 4e fa ff ff       	call   c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff92:	83 c4 1c             	add    esp,0x1c
c001ff95:	52                   	push   edx
c001ff96:	50                   	push   eax
c001ff97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9b:	2d c8 00 00 00       	sub    eax,0xc8
c001ffa0:	50                   	push   eax
c001ffa1:	e9 75 fc ff ff       	jmp    c001fc1b <Vm::x87Handler(regs*)+0xad>
c001ffa6:	83 c0 18             	add    eax,0x18
c001ffa9:	3c 07                	cmp    al,0x7
c001ffab:	0f 87 3b 04 00 00    	ja     c00203ec <Vm::x87Handler(regs*)+0x87e>
c001ffb1:	83 ec 0c             	sub    esp,0xc
c001ffb4:	6a 00                	push   0x0
c001ffb6:	e8 76 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ffbb:	89 c6                	mov    esi,eax
c001ffbd:	89 d7                	mov    edi,edx
c001ffbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc3:	2d e8 00 00 00       	sub    eax,0xe8
c001ffc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcb:	e8 61 fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c001ffd0:	57                   	push   edi
c001ffd1:	56                   	push   esi
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 f8 f9 ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffd9:	83 c4 1c             	add    esp,0x1c
c001ffdc:	52                   	push   edx
c001ffdd:	50                   	push   eax
c001ffde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe2:	2d e8 00 00 00       	sub    eax,0xe8
c001ffe7:	eb b7                	jmp    c001ffa0 <Vm::x87Handler(regs*)+0x432>
c001ffe9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffed:	8d 50 40             	lea    edx,[eax+0x40]
c001fff0:	80 fa 07             	cmp    dl,0x7
c001fff3:	77 3a                	ja     c002002f <Vm::x87Handler(regs*)+0x4c1>
c001fff5:	83 ec 0c             	sub    esp,0xc
c001fff8:	2d c0 00 00 00       	sub    eax,0xc0
c001fffd:	50                   	push   eax
c001fffe:	e8 2e fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020003:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000a:	89 c6                	mov    esi,eax
c002000c:	89 d7                	mov    edi,edx
c002000e:	e8 1e fa ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020013:	57                   	push   edi
c0020014:	56                   	push   esi
c0020015:	52                   	push   edx
c0020016:	50                   	push   eax
c0020017:	e8 8b f9 ff ff       	call   c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002001c:	83 c4 1c             	add    esp,0x1c
c002001f:	52                   	push   edx
c0020020:	50                   	push   eax
c0020021:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020025:	2d c0 00 00 00       	sub    eax,0xc0
c002002a:	e9 9e 01 00 00       	jmp    c00201cd <Vm::x87Handler(regs*)+0x65f>
c002002f:	8d 50 20             	lea    edx,[eax+0x20]
c0020032:	80 fa 07             	cmp    dl,0x7
c0020035:	77 3a                	ja     c0020071 <Vm::x87Handler(regs*)+0x503>
c0020037:	83 ec 0c             	sub    esp,0xc
c002003a:	2d e0 00 00 00       	sub    eax,0xe0
c002003f:	50                   	push   eax
c0020040:	e8 ec f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020045:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002004c:	89 c6                	mov    esi,eax
c002004e:	89 d7                	mov    edi,edx
c0020050:	e8 dc f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020055:	57                   	push   edi
c0020056:	56                   	push   esi
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	e8 73 f9 ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002005e:	83 c4 1c             	add    esp,0x1c
c0020061:	52                   	push   edx
c0020062:	50                   	push   eax
c0020063:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020067:	2d e0 00 00 00       	sub    eax,0xe0
c002006c:	e9 5c 01 00 00       	jmp    c00201cd <Vm::x87Handler(regs*)+0x65f>
c0020071:	8d 50 18             	lea    edx,[eax+0x18]
c0020074:	80 fa 07             	cmp    dl,0x7
c0020077:	77 3b                	ja     c00200b4 <Vm::x87Handler(regs*)+0x546>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	6a 00                	push   0x0
c002007e:	e8 ae f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020083:	89 c6                	mov    esi,eax
c0020085:	89 d7                	mov    edi,edx
c0020087:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002008b:	2d e8 00 00 00       	sub    eax,0xe8
c0020090:	89 04 24             	mov    DWORD PTR [esp],eax
c0020093:	e8 99 f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020098:	57                   	push   edi
c0020099:	56                   	push   esi
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	e8 30 f9 ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200a1:	83 c4 1c             	add    esp,0x1c
c00200a4:	52                   	push   edx
c00200a5:	50                   	push   eax
c00200a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200aa:	2d e8 00 00 00       	sub    eax,0xe8
c00200af:	e9 19 01 00 00       	jmp    c00201cd <Vm::x87Handler(regs*)+0x65f>
c00200b4:	8d 50 38             	lea    edx,[eax+0x38]
c00200b7:	80 fa 07             	cmp    dl,0x7
c00200ba:	77 37                	ja     c00200f3 <Vm::x87Handler(regs*)+0x585>
c00200bc:	83 ec 0c             	sub    esp,0xc
c00200bf:	2d c8 00 00 00       	sub    eax,0xc8
c00200c4:	50                   	push   eax
c00200c5:	e8 67 f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00200ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200d1:	89 c6                	mov    esi,eax
c00200d3:	89 d7                	mov    edi,edx
c00200d5:	e8 57 f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00200da:	57                   	push   edi
c00200db:	56                   	push   esi
c00200dc:	52                   	push   edx
c00200dd:	50                   	push   eax
c00200de:	e8 fd f8 ff ff       	call   c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200e3:	83 c4 1c             	add    esp,0x1c
c00200e6:	52                   	push   edx
c00200e7:	50                   	push   eax
c00200e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ec:	2d c8 00 00 00       	sub    eax,0xc8
c00200f1:	eb 7d                	jmp    c0020170 <Vm::x87Handler(regs*)+0x602>
c00200f3:	3c f7                	cmp    al,0xf7
c00200f5:	76 38                	jbe    c002012f <Vm::x87Handler(regs*)+0x5c1>
c00200f7:	83 ec 0c             	sub    esp,0xc
c00200fa:	6a 00                	push   0x0
c00200fc:	e8 30 f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020101:	89 c6                	mov    esi,eax
c0020103:	89 d7                	mov    edi,edx
c0020105:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020109:	2d f8 00 00 00       	sub    eax,0xf8
c002010e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020111:	e8 1b f9 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020116:	57                   	push   edi
c0020117:	56                   	push   esi
c0020118:	52                   	push   edx
c0020119:	50                   	push   eax
c002011a:	e8 e0 f8 ff ff       	call   c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002011f:	83 c4 1c             	add    esp,0x1c
c0020122:	52                   	push   edx
c0020123:	50                   	push   eax
c0020124:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020128:	2d f8 00 00 00       	sub    eax,0xf8
c002012d:	eb 41                	jmp    c0020170 <Vm::x87Handler(regs*)+0x602>
c002012f:	8d 50 10             	lea    edx,[eax+0x10]
c0020132:	80 fa 07             	cmp    dl,0x7
c0020135:	0f 87 5a 01 00 00    	ja     c0020295 <Vm::x87Handler(regs*)+0x727>
c002013b:	83 ec 0c             	sub    esp,0xc
c002013e:	2d f0 00 00 00       	sub    eax,0xf0
c0020143:	50                   	push   eax
c0020144:	e8 e8 f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020149:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020150:	89 c6                	mov    esi,eax
c0020152:	89 d7                	mov    edi,edx
c0020154:	e8 d8 f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020159:	57                   	push   edi
c002015a:	56                   	push   esi
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	e8 9d f8 ff ff       	call   c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020162:	83 c4 1c             	add    esp,0x1c
c0020165:	52                   	push   edx
c0020166:	50                   	push   eax
c0020167:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002016b:	2d f0 00 00 00       	sub    eax,0xf0
c0020170:	50                   	push   eax
c0020171:	e8 fe f8 ff ff       	call   c001fa74 <Vm::fpuSetReg(int, unsigned long long)>
c0020176:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002017a:	e8 9d f9 ff ff       	call   c001fb1c <Vm::fpuPop()>
c002017f:	e9 5e fa ff ff       	jmp    c001fbe2 <Vm::x87Handler(regs*)+0x74>
c0020184:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020188:	8d 50 30             	lea    edx,[eax+0x30]
c002018b:	80 fa 07             	cmp    dl,0x7
c002018e:	77 1d                	ja     c00201ad <Vm::x87Handler(regs*)+0x63f>
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	6a 00                	push   0x0
c0020195:	e8 97 f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c002019a:	83 c4 0c             	add    esp,0xc
c002019d:	52                   	push   edx
c002019e:	50                   	push   eax
c002019f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201a3:	2d d0 00 00 00       	sub    eax,0xd0
c00201a8:	e9 f3 fd ff ff       	jmp    c001ffa0 <Vm::x87Handler(regs*)+0x432>
c00201ad:	8d 50 28             	lea    edx,[eax+0x28]
c00201b0:	80 fa 07             	cmp    dl,0x7
c00201b3:	77 28                	ja     c00201dd <Vm::x87Handler(regs*)+0x66f>
c00201b5:	83 ec 0c             	sub    esp,0xc
c00201b8:	6a 00                	push   0x0
c00201ba:	e8 72 f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00201bf:	83 c4 0c             	add    esp,0xc
c00201c2:	52                   	push   edx
c00201c3:	50                   	push   eax
c00201c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201c8:	2d d8 00 00 00       	sub    eax,0xd8
c00201cd:	50                   	push   eax
c00201ce:	e8 a1 f8 ff ff       	call   c001fa74 <Vm::fpuSetReg(int, unsigned long long)>
c00201d3:	e8 44 f9 ff ff       	call   c001fb1c <Vm::fpuPop()>
c00201d8:	e9 01 fa ff ff       	jmp    c001fbde <Vm::x87Handler(regs*)+0x70>
c00201dd:	8d 50 20             	lea    edx,[eax+0x20]
c00201e0:	80 fa 07             	cmp    dl,0x7
c00201e3:	77 30                	ja     c0020215 <Vm::x87Handler(regs*)+0x6a7>
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	2d e0 00 00 00       	sub    eax,0xe0
c00201ed:	50                   	push   eax
c00201ee:	e8 3e f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00201f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201fa:	89 c6                	mov    esi,eax
c00201fc:	89 d7                	mov    edi,edx
c00201fe:	e8 2e f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020203:	57                   	push   edi
c0020204:	56                   	push   esi
c0020205:	52                   	push   edx
c0020206:	50                   	push   eax
c0020207:	e8 48 f7 ff ff       	call   c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002020c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020210:	e9 54 02 00 00       	jmp    c0020469 <Vm::x87Handler(regs*)+0x8fb>
c0020215:	8d 50 18             	lea    edx,[eax+0x18]
c0020218:	80 fa 07             	cmp    dl,0x7
c002021b:	0f 87 43 fb ff ff    	ja     c001fd64 <Vm::x87Handler(regs*)+0x1f6>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	2d e8 00 00 00       	sub    eax,0xe8
c0020229:	50                   	push   eax
c002022a:	e8 02 f8 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c002022f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020236:	89 c6                	mov    esi,eax
c0020238:	89 d7                	mov    edi,edx
c002023a:	e8 f2 f7 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c002023f:	57                   	push   edi
c0020240:	56                   	push   esi
c0020241:	52                   	push   edx
c0020242:	50                   	push   eax
c0020243:	e8 0c f7 ff ff       	call   c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020248:	83 c4 20             	add    esp,0x20
c002024b:	e8 cc f8 ff ff       	call   c001fb1c <Vm::fpuPop()>
c0020250:	eb 62                	jmp    c00202b4 <Vm::x87Handler(regs*)+0x746>
c0020252:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020256:	0f 85 0f 01 00 00    	jne    c002036b <Vm::x87Handler(regs*)+0x7fd>
c002025c:	83 ec 0c             	sub    esp,0xc
c002025f:	6a 01                	push   0x1
c0020261:	e8 cb f7 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020266:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002026d:	89 c6                	mov    esi,eax
c002026f:	89 d7                	mov    edi,edx
c0020271:	e8 bb f7 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020276:	57                   	push   edi
c0020277:	56                   	push   esi
c0020278:	52                   	push   edx
c0020279:	50                   	push   eax
c002027a:	e8 d5 f6 ff ff       	call   c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002027f:	83 c4 20             	add    esp,0x20
c0020282:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020286:	e8 91 f8 ff ff       	call   c001fb1c <Vm::fpuPop()>
c002028b:	e8 8c f8 ff ff       	call   c001fb1c <Vm::fpuPop()>
c0020290:	e9 50 f9 ff ff       	jmp    c001fbe5 <Vm::x87Handler(regs*)+0x77>
c0020295:	3c d9                	cmp    al,0xd9
c0020297:	0f 85 b5 02 00 00    	jne    c0020552 <Vm::x87Handler(regs*)+0x9e4>
c002029d:	eb bd                	jmp    c002025c <Vm::x87Handler(regs*)+0x6ee>
c002029f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202a3:	0f 85 ea 02 00 00    	jne    c0020593 <Vm::x87Handler(regs*)+0xa25>
c00202a9:	0f b7 05 60 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b60
c00202b0:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202b4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202b8:	e9 28 f9 ff ff       	jmp    c001fbe5 <Vm::x87Handler(regs*)+0x77>
c00202bd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202c1:	84 d2                	test   dl,dl
c00202c3:	75 0f                	jne    c00202d4 <Vm::x87Handler(regs*)+0x766>
c00202c5:	83 ec 0c             	sub    esp,0xc
c00202c8:	ff 36                	push   DWORD PTR [esi]
c00202ca:	e8 b1 f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c00202cf:	e9 2c 01 00 00       	jmp    c0020400 <Vm::x87Handler(regs*)+0x892>
c00202d4:	80 fa 01             	cmp    dl,0x1
c00202d7:	75 0f                	jne    c00202e8 <Vm::x87Handler(regs*)+0x77a>
c00202d9:	83 ec 0c             	sub    esp,0xc
c00202dc:	ff 36                	push   DWORD PTR [esi]
c00202de:	e8 9d f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c00202e3:	e9 81 02 00 00       	jmp    c0020569 <Vm::x87Handler(regs*)+0x9fb>
c00202e8:	80 fa 04             	cmp    dl,0x4
c00202eb:	75 0f                	jne    c00202fc <Vm::x87Handler(regs*)+0x78e>
c00202ed:	83 ec 0c             	sub    esp,0xc
c00202f0:	ff 36                	push   DWORD PTR [esi]
c00202f2:	e8 89 f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c00202f7:	e9 86 01 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0x914>
c00202fc:	80 fa 05             	cmp    dl,0x5
c00202ff:	75 1b                	jne    c002031c <Vm::x87Handler(regs*)+0x7ae>
c0020301:	83 ec 0c             	sub    esp,0xc
c0020304:	6a 00                	push   0x0
c0020306:	e8 26 f7 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c002030b:	89 c7                	mov    edi,eax
c002030d:	89 d5                	mov    ebp,edx
c002030f:	58                   	pop    eax
c0020310:	ff 36                	push   DWORD PTR [esi]
c0020312:	e8 69 f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c0020317:	e9 a3 01 00 00       	jmp    c00204bf <Vm::x87Handler(regs*)+0x951>
c002031c:	80 fa 06             	cmp    dl,0x6
c002031f:	75 0f                	jne    c0020330 <Vm::x87Handler(regs*)+0x7c2>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	ff 36                	push   DWORD PTR [esi]
c0020326:	e8 55 f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c002032b:	e9 ae 01 00 00       	jmp    c00204de <Vm::x87Handler(regs*)+0x970>
c0020330:	31 c0                	xor    eax,eax
c0020332:	80 fa 07             	cmp    dl,0x7
c0020335:	0f 85 94 02 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c002033b:	83 ec 0c             	sub    esp,0xc
c002033e:	6a 00                	push   0x0
c0020340:	e8 ec f6 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020345:	89 c7                	mov    edi,eax
c0020347:	89 d5                	mov    ebp,edx
c0020349:	58                   	pop    eax
c002034a:	ff 36                	push   DWORD PTR [esi]
c002034c:	e8 2f f4 ff ff       	call   c001f780 <Vm::fpu32ToInternal(unsigned int)>
c0020351:	e9 cb 01 00 00       	jmp    c0020521 <Vm::x87Handler(regs*)+0x9b3>
c0020356:	80 fa 03             	cmp    dl,0x3
c0020359:	0f 85 d3 01 00 00    	jne    c0020532 <Vm::x87Handler(regs*)+0x9c4>
c002035f:	e8 b8 f7 ff ff       	call   c001fb1c <Vm::fpuPop()>
c0020364:	51                   	push   ecx
c0020365:	51                   	push   ecx
c0020366:	e9 de 01 00 00       	jmp    c0020549 <Vm::x87Handler(regs*)+0x9db>
c002036b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002036f:	80 fa 01             	cmp    dl,0x1
c0020372:	75 09                	jne    c002037d <Vm::x87Handler(regs*)+0x80f>
c0020374:	57                   	push   edi
c0020375:	57                   	push   edi
c0020376:	8b 06                	mov    eax,DWORD PTR [esi]
c0020378:	e9 e3 01 00 00       	jmp    c0020560 <Vm::x87Handler(regs*)+0x9f2>
c002037d:	80 fa 04             	cmp    dl,0x4
c0020380:	75 12                	jne    c0020394 <Vm::x87Handler(regs*)+0x826>
c0020382:	31 d2                	xor    edx,edx
c0020384:	51                   	push   ecx
c0020385:	51                   	push   ecx
c0020386:	8b 06                	mov    eax,DWORD PTR [esi]
c0020388:	52                   	push   edx
c0020389:	50                   	push   eax
c002038a:	e8 d0 f4 ff ff       	call   c001f85f <Vm::fpuLongToFloat(long long)>
c002038f:	e9 ee 00 00 00       	jmp    c0020482 <Vm::x87Handler(regs*)+0x914>
c0020394:	31 c0                	xor    eax,eax
c0020396:	80 fa 07             	cmp    dl,0x7
c0020399:	0f 85 30 02 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c002039f:	83 ec 0c             	sub    esp,0xc
c00203a2:	6a 00                	push   0x0
c00203a4:	e8 88 f6 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00203a9:	89 c7                	mov    edi,eax
c00203ab:	89 d5                	mov    ebp,edx
c00203ad:	58                   	pop    eax
c00203ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00203b0:	5a                   	pop    edx
c00203b1:	31 d2                	xor    edx,edx
c00203b3:	52                   	push   edx
c00203b4:	50                   	push   eax
c00203b5:	e8 a5 f4 ff ff       	call   c001f85f <Vm::fpuLongToFloat(long long)>
c00203ba:	e9 62 01 00 00       	jmp    c0020521 <Vm::x87Handler(regs*)+0x9b3>
c00203bf:	84 d2                	test   dl,dl
c00203c1:	75 0d                	jne    c00203d0 <Vm::x87Handler(regs*)+0x862>
c00203c3:	31 d2                	xor    edx,edx
c00203c5:	55                   	push   ebp
c00203c6:	55                   	push   ebp
c00203c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00203c9:	52                   	push   edx
c00203ca:	50                   	push   eax
c00203cb:	e9 d3 01 00 00       	jmp    c00205a3 <Vm::x87Handler(regs*)+0xa35>
c00203d0:	31 c0                	xor    eax,eax
c00203d2:	80 fa 02             	cmp    dl,0x2
c00203d5:	0f 85 f4 01 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c00203db:	83 ec 0c             	sub    esp,0xc
c00203de:	6a 00                	push   0x0
c00203e0:	e8 4c f6 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00203e5:	59                   	pop    ecx
c00203e6:	5f                   	pop    edi
c00203e7:	e9 6a f9 ff ff       	jmp    c001fd56 <Vm::x87Handler(regs*)+0x1e8>
c00203ec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203f0:	84 d2                	test   dl,dl
c00203f2:	75 2a                	jne    c002041e <Vm::x87Handler(regs*)+0x8b0>
c00203f4:	50                   	push   eax
c00203f5:	50                   	push   eax
c00203f6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203f9:	ff 36                	push   DWORD PTR [esi]
c00203fb:	e8 c5 f3 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020400:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020407:	89 c6                	mov    esi,eax
c0020409:	89 d7                	mov    edi,edx
c002040b:	e8 21 f6 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020410:	57                   	push   edi
c0020411:	56                   	push   esi
c0020412:	52                   	push   edx
c0020413:	50                   	push   eax
c0020414:	e8 8e f5 ff ff       	call   c001f9a7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020419:	e9 64 01 00 00       	jmp    c0020582 <Vm::x87Handler(regs*)+0xa14>
c002041e:	80 fa 01             	cmp    dl,0x1
c0020421:	75 11                	jne    c0020434 <Vm::x87Handler(regs*)+0x8c6>
c0020423:	50                   	push   eax
c0020424:	50                   	push   eax
c0020425:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020428:	ff 36                	push   DWORD PTR [esi]
c002042a:	e8 96 f3 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c002042f:	e9 35 01 00 00       	jmp    c0020569 <Vm::x87Handler(regs*)+0x9fb>
c0020434:	80 fa 02             	cmp    dl,0x2
c0020437:	0f 85 54 f9 ff ff    	jne    c001fd91 <Vm::x87Handler(regs*)+0x223>
c002043d:	55                   	push   ebp
c002043e:	55                   	push   ebp
c002043f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020442:	ff 36                	push   DWORD PTR [esi]
c0020444:	e8 7c f3 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020449:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020450:	89 c6                	mov    esi,eax
c0020452:	89 d7                	mov    edi,edx
c0020454:	e8 d8 f5 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020459:	57                   	push   edi
c002045a:	56                   	push   esi
c002045b:	52                   	push   edx
c002045c:	50                   	push   eax
c002045d:	e8 f2 f4 ff ff       	call   c001f954 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020462:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020466:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020469:	83 c4 20             	add    esp,0x20
c002046c:	e9 74 f7 ff ff       	jmp    c001fbe5 <Vm::x87Handler(regs*)+0x77>
c0020471:	80 fa 04             	cmp    dl,0x4
c0020474:	75 2a                	jne    c00204a0 <Vm::x87Handler(regs*)+0x932>
c0020476:	51                   	push   ecx
c0020477:	51                   	push   ecx
c0020478:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002047b:	ff 36                	push   DWORD PTR [esi]
c002047d:	e8 43 f3 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020482:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020489:	89 c6                	mov    esi,eax
c002048b:	89 d7                	mov    edi,edx
c002048d:	e8 9f f5 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020492:	57                   	push   edi
c0020493:	56                   	push   esi
c0020494:	52                   	push   edx
c0020495:	50                   	push   eax
c0020496:	e8 36 f5 ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002049b:	e9 e2 00 00 00       	jmp    c0020582 <Vm::x87Handler(regs*)+0xa14>
c00204a0:	80 fa 05             	cmp    dl,0x5
c00204a3:	75 28                	jne    c00204cd <Vm::x87Handler(regs*)+0x95f>
c00204a5:	83 ec 0c             	sub    esp,0xc
c00204a8:	6a 00                	push   0x0
c00204aa:	e8 82 f5 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00204af:	89 c7                	mov    edi,eax
c00204b1:	89 d5                	mov    ebp,edx
c00204b3:	58                   	pop    eax
c00204b4:	5a                   	pop    edx
c00204b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204b8:	ff 36                	push   DWORD PTR [esi]
c00204ba:	e8 06 f3 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c00204bf:	83 c4 10             	add    esp,0x10
c00204c2:	55                   	push   ebp
c00204c3:	57                   	push   edi
c00204c4:	52                   	push   edx
c00204c5:	50                   	push   eax
c00204c6:	e8 06 f5 ff ff       	call   c001f9d1 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204cb:	eb 60                	jmp    c002052d <Vm::x87Handler(regs*)+0x9bf>
c00204cd:	80 fa 06             	cmp    dl,0x6
c00204d0:	75 2a                	jne    c00204fc <Vm::x87Handler(regs*)+0x98e>
c00204d2:	51                   	push   ecx
c00204d3:	51                   	push   ecx
c00204d4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d7:	ff 36                	push   DWORD PTR [esi]
c00204d9:	e8 e7 f2 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c00204de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204e5:	89 c6                	mov    esi,eax
c00204e7:	89 d7                	mov    edi,edx
c00204e9:	e8 43 f5 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c00204ee:	57                   	push   edi
c00204ef:	56                   	push   esi
c00204f0:	52                   	push   edx
c00204f1:	50                   	push   eax
c00204f2:	e8 08 f5 ff ff       	call   c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204f7:	e9 86 00 00 00       	jmp    c0020582 <Vm::x87Handler(regs*)+0xa14>
c00204fc:	31 c0                	xor    eax,eax
c00204fe:	80 fa 07             	cmp    dl,0x7
c0020501:	0f 85 c8 00 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c0020507:	83 ec 0c             	sub    esp,0xc
c002050a:	6a 00                	push   0x0
c002050c:	e8 20 f5 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020511:	89 c7                	mov    edi,eax
c0020513:	89 d5                	mov    ebp,edx
c0020515:	58                   	pop    eax
c0020516:	5a                   	pop    edx
c0020517:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002051a:	ff 36                	push   DWORD PTR [esi]
c002051c:	e8 a4 f2 ff ff       	call   c001f7c5 <Vm::fpu64ToInternal(unsigned long long)>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	55                   	push   ebp
c0020525:	57                   	push   edi
c0020526:	52                   	push   edx
c0020527:	50                   	push   eax
c0020528:	e8 d2 f4 ff ff       	call   c001f9ff <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002052d:	83 c4 0c             	add    esp,0xc
c0020530:	eb 53                	jmp    c0020585 <Vm::x87Handler(regs*)+0xa17>
c0020532:	31 c0                	xor    eax,eax
c0020534:	80 fa 02             	cmp    dl,0x2
c0020537:	0f 85 92 00 00 00    	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c002053d:	83 ec 0c             	sub    esp,0xc
c0020540:	6a 00                	push   0x0
c0020542:	e8 ea f4 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020547:	59                   	pop    ecx
c0020548:	5f                   	pop    edi
c0020549:	52                   	push   edx
c002054a:	50                   	push   eax
c002054b:	e8 27 f2 ff ff       	call   c001f777 <Vm::fpuInternalTo64(unsigned long long)>
c0020550:	eb 70                	jmp    c00205c2 <Vm::x87Handler(regs*)+0xa54>
c0020552:	31 c0                	xor    eax,eax
c0020554:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020559:	75 74                	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c002055b:	50                   	push   eax
c002055c:	50                   	push   eax
c002055d:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020560:	31 d2                	xor    edx,edx
c0020562:	52                   	push   edx
c0020563:	50                   	push   eax
c0020564:	e8 f6 f2 ff ff       	call   c001f85f <Vm::fpuLongToFloat(long long)>
c0020569:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020570:	89 c6                	mov    esi,eax
c0020572:	89 d7                	mov    edi,edx
c0020574:	e8 b8 f4 ff ff       	call   c001fa31 <Vm::fpuGetReg(int)>
c0020579:	57                   	push   edi
c002057a:	56                   	push   esi
c002057b:	52                   	push   edx
c002057c:	50                   	push   eax
c002057d:	e8 5e f4 ff ff       	call   c001f9e0 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020582:	83 c4 1c             	add    esp,0x1c
c0020585:	52                   	push   edx
c0020586:	50                   	push   eax
c0020587:	6a 00                	push   0x0
c0020589:	e8 e6 f4 ff ff       	call   c001fa74 <Vm::fpuSetReg(int, unsigned long long)>
c002058e:	e9 f2 f7 ff ff       	jmp    c001fd85 <Vm::x87Handler(regs*)+0x217>
c0020593:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020597:	80 fa 05             	cmp    dl,0x5
c002059a:	75 11                	jne    c00205ad <Vm::x87Handler(regs*)+0xa3f>
c002059c:	55                   	push   ebp
c002059d:	55                   	push   ebp
c002059e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205a1:	ff 36                	push   DWORD PTR [esi]
c00205a3:	e8 81 f2 ff ff       	call   c001f829 <Vm::fpuULongToFloat(unsigned long long)>
c00205a8:	e9 cf f7 ff ff       	jmp    c001fd7c <Vm::x87Handler(regs*)+0x20e>
c00205ad:	31 c0                	xor    eax,eax
c00205af:	80 fa 07             	cmp    dl,0x7
c00205b2:	75 1b                	jne    c00205cf <Vm::x87Handler(regs*)+0xa61>
c00205b4:	e8 63 f5 ff ff       	call   c001fb1c <Vm::fpuPop()>
c00205b9:	51                   	push   ecx
c00205ba:	51                   	push   ecx
c00205bb:	52                   	push   edx
c00205bc:	50                   	push   eax
c00205bd:	e8 0c f2 ff ff       	call   c001f7ce <Vm::fpuFloatToLong(unsigned long long)>
c00205c2:	83 c4 10             	add    esp,0x10
c00205c5:	89 06                	mov    DWORD PTR [esi],eax
c00205c7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205ca:	e9 f8 f7 ff ff       	jmp    c001fdc7 <Vm::x87Handler(regs*)+0x259>
c00205cf:	83 c4 1c             	add    esp,0x1c
c00205d2:	5b                   	pop    ebx
c00205d3:	5e                   	pop    esi
c00205d4:	5f                   	pop    edi
c00205d5:	5d                   	pop    ebp
c00205d6:	c3                   	ret    

c00205d7 <__static_initialization_and_destruction_0(int, int)>:
c00205d7:	83 ec 0c             	sub    esp,0xc
c00205da:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205df:	75 1a                	jne    c00205fb <__static_initialization_and_destruction_0(int, int)+0x24>
c00205e1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205e9:	75 10                	jne    c00205fb <__static_initialization_and_destruction_0(int, int)+0x24>
c00205eb:	83 ec 0c             	sub    esp,0xc
c00205ee:	68 60 1b 03 c0       	push   0xc0031b60
c00205f3:	e8 18 88 00 00       	call   c0028e10 <Vm::_FPUState::_FPUState()>
c00205f8:	83 c4 10             	add    esp,0x10
c00205fb:	90                   	nop
c00205fc:	83 c4 0c             	add    esp,0xc
c00205ff:	c3                   	ret    

c0020600 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020600:	83 ec 0c             	sub    esp,0xc
c0020603:	83 ec 08             	sub    esp,0x8
c0020606:	68 ff ff 00 00       	push   0xffff
c002060b:	6a 01                	push   0x1
c002060d:	e8 c5 ff ff ff       	call   c00205d7 <__static_initialization_and_destruction_0(int, int)>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	83 c4 0c             	add    esp,0xc
c0020618:	c3                   	ret    
c0020619:	90                   	nop

c002061a <FAT::getName()>:
c002061a:	b8 5c c9 02 c0       	mov    eax,0xc002c95c
c002061f:	c3                   	ret    

c0020620 <FAT::tell(void*, unsigned long long*)>:
c0020620:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020625:	75 06                	jne    c002062d <FAT::tell(void*, unsigned long long*)+0xd>
c0020627:	b8 04 00 00 00       	mov    eax,0x4
c002062c:	c3                   	ret    
c002062d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020632:	75 06                	jne    c002063a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020634:	b8 04 00 00 00       	mov    eax,0x4
c0020639:	c3                   	ret    
c002063a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002063e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020641:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020644:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020648:	89 01                	mov    DWORD PTR [ecx],eax
c002064a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002064d:	b8 00 00 00 00       	mov    eax,0x0
c0020652:	c3                   	ret    
c0020653:	90                   	nop

c0020654 <FAT::stat(void*, unsigned long long*)>:
c0020654:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020659:	75 06                	jne    c0020661 <FAT::stat(void*, unsigned long long*)+0xd>
c002065b:	b8 04 00 00 00       	mov    eax,0x4
c0020660:	c3                   	ret    
c0020661:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020666:	75 06                	jne    c002066e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020668:	b8 04 00 00 00       	mov    eax,0x4
c002066d:	c3                   	ret    
c002066e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020672:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020675:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002067c:	89 01                	mov    DWORD PTR [ecx],eax
c002067e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020681:	b8 00 00 00 00       	mov    eax,0x0
c0020686:	c3                   	ret    
c0020687:	90                   	nop

c0020688 <FAT::~FAT()>:
c0020688:	83 ec 0c             	sub    esp,0xc
c002068b:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0020690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020694:	89 10                	mov    DWORD PTR [eax],edx
c0020696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069a:	83 ec 0c             	sub    esp,0xc
c002069d:	50                   	push   eax
c002069e:	e8 bd 2c ff ff       	call   c0013360 <Filesystem::~Filesystem()>
c00206a3:	83 c4 10             	add    esp,0x10
c00206a6:	90                   	nop
c00206a7:	83 c4 0c             	add    esp,0xc
c00206aa:	c3                   	ret    
c00206ab:	90                   	nop

c00206ac <FAT::~FAT()>:
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	83 ec 0c             	sub    esp,0xc
c00206b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b6:	e8 cd ff ff ff       	call   c0020688 <FAT::~FAT()>
c00206bb:	83 c4 10             	add    esp,0x10
c00206be:	83 ec 08             	sub    esp,0x8
c00206c1:	6a 08                	push   0x8
c00206c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c7:	e8 8c 28 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00206cc:	83 c4 10             	add    esp,0x10
c00206cf:	83 c4 0c             	add    esp,0xc
c00206d2:	c3                   	ret    
c00206d3:	90                   	nop

c00206d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206d4:	83 ec 1c             	sub    esp,0x1c
c00206d7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206de:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206e7:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c00206ee:	83 f8 ff             	cmp    eax,0xffffffff
c00206f1:	75 34                	jne    c0020727 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206f7:	88 c2                	mov    dl,al
c00206f9:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00206fe:	01 d0                	add    eax,edx
c0020700:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020704:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c002070a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002070e:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0020715:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c002071a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002071e:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020725:	eb 17                	jmp    c002073e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020727:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002072b:	88 c2                	mov    dl,al
c002072d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020731:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020738:	01 d0                	add    eax,edx
c002073a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002073e:	83 ec 04             	sub    esp,0x4
c0020741:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020745:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020749:	8d 44 24 15          	lea    eax,[esp+0x15]
c002074d:	50                   	push   eax
c002074e:	e8 e5 65 fe ff       	call   c0006d38 <f_getlabel>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002075a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002075f:	75 07                	jne    c0020768 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020761:	b8 00 00 00 00       	mov    eax,0x0
c0020766:	eb 05                	jmp    c002076d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020768:	b8 01 00 00 00       	mov    eax,0x1
c002076d:	83 c4 1c             	add    esp,0x1c
c0020770:	c3                   	ret    
c0020771:	90                   	nop

c0020772 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020772:	57                   	push   edi
c0020773:	83 ec 58             	sub    esp,0x58
c0020776:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002077e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020782:	b9 0f 00 00 00       	mov    ecx,0xf
c0020787:	b8 00 00 00 00       	mov    eax,0x0
c002078c:	fc                   	cld    
c002078d:	89 d7                	mov    edi,edx
c002078f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020791:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020795:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c002079c:	83 f8 ff             	cmp    eax,0xffffffff
c002079f:	75 34                	jne    c00207d5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207a5:	88 c2                	mov    dl,al
c00207a7:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00207ac:	01 d0                	add    eax,edx
c00207ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207b2:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c00207b8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207bc:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c00207c3:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c00207c8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207cc:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c00207d3:	eb 17                	jmp    c00207ec <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207d5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207d9:	88 c2                	mov    dl,al
c00207db:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207df:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c00207e6:	01 d0                	add    eax,edx
c00207e8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207ec:	83 ec 08             	sub    esp,0x8
c00207ef:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207f7:	50                   	push   eax
c00207f8:	e8 77 01 fe ff       	call   c0000974 <strcat>
c00207fd:	83 c4 10             	add    esp,0x10
c0020800:	83 ec 0c             	sub    esp,0xc
c0020803:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020807:	50                   	push   eax
c0020808:	e8 19 67 fe ff       	call   c0006f26 <f_setlabel>
c002080d:	83 c4 10             	add    esp,0x10
c0020810:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020814:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020819:	75 07                	jne    c0020822 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002081b:	b8 00 00 00 00       	mov    eax,0x0
c0020820:	eb 05                	jmp    c0020827 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020822:	b8 01 00 00 00       	mov    eax,0x1
c0020827:	83 c4 58             	add    esp,0x58
c002082a:	5f                   	pop    edi
c002082b:	c3                   	ret    

c002082c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002082c:	83 ec 2c             	sub    esp,0x2c
c002082f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020837:	83 ec 08             	sub    esp,0x8
c002083a:	68 80 c9 02 c0       	push   0xc002c980
c002083f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020843:	e8 78 00 fe ff       	call   c00008c0 <strcmp>
c0020848:	83 c4 10             	add    esp,0x10
c002084b:	85 c0                	test   eax,eax
c002084d:	0f 94 c0             	sete   al
c0020850:	84 c0                	test   al,al
c0020852:	74 0d                	je     c0020861 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020854:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002085c:	e9 a6 00 00 00       	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020861:	83 ec 08             	sub    esp,0x8
c0020864:	68 72 c9 02 c0       	push   0xc002c972
c0020869:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002086d:	e8 4e 00 fe ff       	call   c00008c0 <strcmp>
c0020872:	83 c4 10             	add    esp,0x10
c0020875:	85 c0                	test   eax,eax
c0020877:	0f 94 c0             	sete   al
c002087a:	84 c0                	test   al,al
c002087c:	74 0a                	je     c0020888 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002087e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020886:	eb 7f                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020888:	83 ec 08             	sub    esp,0x8
c002088b:	68 78 c9 02 c0       	push   0xc002c978
c0020890:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020894:	e8 27 00 fe ff       	call   c00008c0 <strcmp>
c0020899:	83 c4 10             	add    esp,0x10
c002089c:	85 c0                	test   eax,eax
c002089e:	0f 94 c0             	sete   al
c00208a1:	84 c0                	test   al,al
c00208a3:	74 0a                	je     c00208af <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208ad:	eb 58                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208af:	83 ec 08             	sub    esp,0x8
c00208b2:	68 6c 95 02 c0       	push   0xc002956c
c00208b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208bb:	e8 00 00 fe ff       	call   c00008c0 <strcmp>
c00208c0:	83 c4 10             	add    esp,0x10
c00208c3:	85 c0                	test   eax,eax
c00208c5:	0f 94 c0             	sete   al
c00208c8:	84 c0                	test   al,al
c00208ca:	74 0a                	je     c00208d6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208cc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208d4:	eb 31                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208d6:	83 ec 08             	sub    esp,0x8
c00208d9:	68 7e c9 02 c0       	push   0xc002c97e
c00208de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208e2:	e8 d9 ff fd ff       	call   c00008c0 <strcmp>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	85 c0                	test   eax,eax
c00208ec:	0f 94 c0             	sete   al
c00208ef:	84 c0                	test   al,al
c00208f1:	74 0a                	je     c00208fd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208f3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208fb:	eb 0a                	jmp    c0020907 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208fd:	b8 08 00 00 00       	mov    eax,0x8
c0020902:	e9 04 01 00 00       	jmp    c0020a0b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020907:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002090e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020913:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020917:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c002091e:	83 f8 ff             	cmp    eax,0xffffffff
c0020921:	75 34                	jne    c0020957 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020923:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020927:	88 c2                	mov    dl,al
c0020929:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c002092e:	01 d0                	add    eax,edx
c0020930:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020934:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c002093a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002093e:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0020945:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c002094a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002094e:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020955:	eb 17                	jmp    c002096e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020957:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002095b:	88 c2                	mov    dl,al
c002095d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020961:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020968:	01 d0                	add    eax,edx
c002096a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002096e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020972:	88 04 24             	mov    BYTE PTR [esp],al
c0020975:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020979:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002097d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020985:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002098a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020992:	83 ec 0c             	sub    esp,0xc
c0020995:	68 00 20 00 00       	push   0x2000
c002099a:	e8 a4 ee fe ff       	call   c000f843 <malloc>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209a6:	68 00 20 00 00       	push   0x2000
c00209ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209b3:	50                   	push   eax
c00209b4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209b8:	50                   	push   eax
c00209b9:	e8 b3 69 fe ff       	call   c0007371 <f_mkfs>
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209ca:	75 07                	jne    c00209d3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209cc:	b8 00 00 00 00       	mov    eax,0x0
c00209d1:	eb 38                	jmp    c0020a0b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209d3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209d8:	75 17                	jne    c00209f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	68 b0 c9 02 c0       	push   0xc002c9b0
c00209e2:	e8 51 26 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00209e7:	83 c4 10             	add    esp,0x10
c00209ea:	b8 09 00 00 00       	mov    eax,0x9
c00209ef:	eb 1a                	jmp    c0020a0b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209f5:	83 ec 08             	sub    esp,0x8
c00209f8:	50                   	push   eax
c00209f9:	68 84 c9 02 c0       	push   0xc002c984
c00209fe:	e8 35 26 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0020a03:	83 c4 10             	add    esp,0x10
c0020a06:	b8 01 00 00 00       	mov    eax,0x1
c0020a0b:	83 c4 2c             	add    esp,0x2c
c0020a0e:	c3                   	ret    
c0020a0f:	90                   	nop

c0020a10 <FAT::tryMount(LogicalDisk*, int)>:
c0020a10:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a16:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020a1b:	83 f8 14             	cmp    eax,0x14
c0020a1e:	75 17                	jne    c0020a37 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a20:	83 ec 0c             	sub    esp,0xc
c0020a23:	68 96 c9 02 c0       	push   0xc002c996
c0020a28:	e8 b8 9c ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0020a2d:	83 c4 10             	add    esp,0x10
c0020a30:	b0 00                	mov    al,0x0
c0020a32:	e9 d7 01 00 00       	jmp    c0020c0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a37:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a44:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a4a:	3d 00 02 00 00       	cmp    eax,0x200
c0020a4f:	74 07                	je     c0020a58 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a51:	b0 00                	mov    al,0x0
c0020a53:	e9 b6 01 00 00       	jmp    c0020c0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a58:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a60:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a67:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c0020a6e:	83 f8 ff             	cmp    eax,0xffffffff
c0020a71:	74 07                	je     c0020a7a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a73:	b0 01                	mov    al,0x1
c0020a75:	e9 94 01 00 00       	jmp    c0020c0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a7a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a84:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a8c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a93:	88 c2                	mov    dl,al
c0020a95:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020a9a:	01 d0                	add    eax,edx
c0020a9c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020aa3:	8b 15 c0 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bc0
c0020aa9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ab0:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0020ab7:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020abc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ac3:	89 14 85 60 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3a0],edx
c0020aca:	83 ec 0c             	sub    esp,0xc
c0020acd:	68 54 02 00 00       	push   0x254
c0020ad2:	e8 6c ed fe ff       	call   c000f843 <malloc>
c0020ad7:	83 c4 10             	add    esp,0x10
c0020ada:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ae1:	83 ec 04             	sub    esp,0x4
c0020ae4:	6a 00                	push   0x0
c0020ae6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aed:	50                   	push   eax
c0020aee:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020af5:	e8 35 44 fe ff       	call   c0004f2f <f_mount>
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b04:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b0c:	74 19                	je     c0020b27 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b0e:	83 ec 0c             	sub    esp,0xc
c0020b11:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b18:	e8 46 ed fe ff       	call   c000f863 <rfree>
c0020b1d:	83 c4 10             	add    esp,0x10
c0020b20:	b0 00                	mov    al,0x0
c0020b22:	e9 e7 00 00 00       	jmp    c0020c0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b27:	83 ec 04             	sub    esp,0x4
c0020b2a:	68 00 01 00 00       	push   0x100
c0020b2f:	6a 00                	push   0x0
c0020b31:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b38:	50                   	push   eax
c0020b39:	e8 3a fc fd ff       	call   c0000778 <memset>
c0020b3e:	83 c4 10             	add    esp,0x10
c0020b41:	83 ec 08             	sub    esp,0x8
c0020b44:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b4b:	50                   	push   eax
c0020b4c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b53:	50                   	push   eax
c0020b54:	e8 1b fe fd ff       	call   c0000974 <strcat>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	83 ec 08             	sub    esp,0x8
c0020b5f:	68 a4 c9 02 c0       	push   0xc002c9a4
c0020b64:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b6b:	50                   	push   eax
c0020b6c:	e8 03 fe fd ff       	call   c0000974 <strcat>
c0020b71:	83 c4 10             	add    esp,0x10
c0020b74:	83 ec 04             	sub    esp,0x4
c0020b77:	6a 01                	push   0x1
c0020b79:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b80:	50                   	push   eax
c0020b81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b85:	50                   	push   eax
c0020b86:	e8 06 44 fe ff       	call   c0004f91 <f_open>
c0020b8b:	83 c4 10             	add    esp,0x10
c0020b8e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b95:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b9c:	85 c0                	test   eax,eax
c0020b9e:	74 0a                	je     c0020baa <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020ba0:	78 2d                	js     c0020bcf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ba2:	83 e8 04             	sub    eax,0x4
c0020ba5:	83 f8 01             	cmp    eax,0x1
c0020ba8:	77 25                	ja     c0020bcf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020baa:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bb2:	83 ec 0c             	sub    esp,0xc
c0020bb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bb9:	50                   	push   eax
c0020bba:	e8 24 4f fe ff       	call   c0005ae3 <f_close>
c0020bbf:	83 c4 10             	add    esp,0x10
c0020bc2:	90                   	nop
c0020bc3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bcb:	74 3a                	je     c0020c07 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bcd:	eb 2d                	jmp    c0020bfc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bcf:	83 ec 0c             	sub    esp,0xc
c0020bd2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bd9:	e8 85 ec fe ff       	call   c000f863 <rfree>
c0020bde:	83 c4 10             	add    esp,0x10
c0020be1:	83 ec 04             	sub    esp,0x4
c0020be4:	6a 00                	push   0x0
c0020be6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bed:	50                   	push   eax
c0020bee:	6a 00                	push   0x0
c0020bf0:	e8 3a 43 fe ff       	call   c0004f2f <f_mount>
c0020bf5:	83 c4 10             	add    esp,0x10
c0020bf8:	b0 00                	mov    al,0x0
c0020bfa:	eb 12                	jmp    c0020c0e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bfc:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c0020c01:	40                   	inc    eax
c0020c02:	a3 c0 1b 03 c0       	mov    ds:0xc0031bc0,eax
c0020c07:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c0e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c14:	c3                   	ret    
c0020c15:	90                   	nop

c0020c16 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020c16:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c1c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c24:	74 0a                	je     c0020c30 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c26:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c2e:	75 0a                	jne    c0020c3a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c30:	b8 04 00 00 00       	mov    eax,0x4
c0020c35:	e9 db 00 00 00       	jmp    c0020d15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c3a:	83 ec 08             	sub    esp,0x8
c0020c3d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c44:	50                   	push   eax
c0020c45:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c4c:	e8 9c 54 fe ff       	call   c00060ed <f_readdir>
c0020c51:	83 c4 10             	add    esp,0x10
c0020c54:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c5b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c61:	83 ec 0c             	sub    esp,0xc
c0020c64:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c6b:	83 c0 1a             	add    eax,0x1a
c0020c6e:	50                   	push   eax
c0020c6f:	e8 20 fb fd ff       	call   c0000794 <strlen>
c0020c74:	83 c4 10             	add    esp,0x10
c0020c77:	ba 00 00 00 00       	mov    edx,0x0
c0020c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c80:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c84:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c8b:	0f b6 c0             	movzx  eax,al
c0020c8e:	83 e0 10             	and    eax,0x10
c0020c91:	74 07                	je     c0020c9a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c93:	b8 02 00 00 00       	mov    eax,0x2
c0020c98:	eb 05                	jmp    c0020c9f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c9a:	b8 01 00 00 00       	mov    eax,0x1
c0020c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ca3:	83 ec 08             	sub    esp,0x8
c0020ca6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020cad:	83 c0 1a             	add    eax,0x1a
c0020cb0:	50                   	push   eax
c0020cb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cb5:	83 c0 10             	add    eax,0x10
c0020cb8:	50                   	push   eax
c0020cb9:	e8 76 fb fd ff       	call   c0000834 <strcpy>
c0020cbe:	83 c4 10             	add    esp,0x10
c0020cc1:	83 ec 04             	sub    esp,0x4
c0020cc4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020ccb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ccf:	50                   	push   eax
c0020cd0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020cd7:	e8 68 fa fd ff       	call   c0000744 <memcpy>
c0020cdc:	83 c4 10             	add    esp,0x10
c0020cdf:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ce6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020cec:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cf3:	84 c0                	test   al,al
c0020cf5:	75 07                	jne    c0020cfe <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cf7:	b8 07 00 00 00       	mov    eax,0x7
c0020cfc:	eb 17                	jmp    c0020d15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cfe:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020d05:	85 c0                	test   eax,eax
c0020d07:	75 07                	jne    c0020d10 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020d09:	b8 00 00 00 00       	mov    eax,0x0
c0020d0e:	eb 05                	jmp    c0020d15 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020d10:	b8 01 00 00 00       	mov    eax,0x1
c0020d15:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d1b:	c3                   	ret    

c0020d1c <FAT::read(void*, unsigned long, void*, int*)>:
c0020d1c:	83 ec 1c             	sub    esp,0x1c
c0020d1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d24:	74 07                	je     c0020d2d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d2b:	75 07                	jne    c0020d34 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d2d:	b8 04 00 00 00       	mov    eax,0x4
c0020d32:	eb 3d                	jmp    c0020d71 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d38:	50                   	push   eax
c0020d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d45:	e8 83 46 fe ff       	call   c00053cd <f_read>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d55:	89 c2                	mov    edx,eax
c0020d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d5b:	89 10                	mov    DWORD PTR [eax],edx
c0020d5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d61:	85 c0                	test   eax,eax
c0020d63:	75 07                	jne    c0020d6c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d65:	b8 00 00 00 00       	mov    eax,0x0
c0020d6a:	eb 05                	jmp    c0020d71 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d6c:	b8 01 00 00 00       	mov    eax,0x1
c0020d71:	83 c4 1c             	add    esp,0x1c
c0020d74:	c3                   	ret    
c0020d75:	90                   	nop

c0020d76 <FAT::write(void*, unsigned long, void*, int*)>:
c0020d76:	83 ec 1c             	sub    esp,0x1c
c0020d79:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d7e:	74 07                	je     c0020d87 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d80:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d85:	75 07                	jne    c0020d8e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d87:	b8 04 00 00 00       	mov    eax,0x4
c0020d8c:	eb 3d                	jmp    c0020dcb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d92:	50                   	push   eax
c0020d93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d9f:	e8 a9 48 fe ff       	call   c000564d <f_write>
c0020da4:	83 c4 10             	add    esp,0x10
c0020da7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020daf:	89 c2                	mov    edx,eax
c0020db1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020db5:	89 10                	mov    DWORD PTR [eax],edx
c0020db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dbb:	85 c0                	test   eax,eax
c0020dbd:	75 07                	jne    c0020dc6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020dbf:	b8 00 00 00 00       	mov    eax,0x0
c0020dc4:	eb 05                	jmp    c0020dcb <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020dc6:	b8 01 00 00 00       	mov    eax,0x1
c0020dcb:	83 c4 1c             	add    esp,0x1c
c0020dce:	c3                   	ret    
c0020dcf:	90                   	nop

c0020dd0 <FAT::close(void*)>:
c0020dd0:	83 ec 1c             	sub    esp,0x1c
c0020dd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dd8:	75 07                	jne    c0020de1 <FAT::close(void*)+0x11>
c0020dda:	b8 04 00 00 00       	mov    eax,0x4
c0020ddf:	eb 36                	jmp    c0020e17 <FAT::close(void*)+0x47>
c0020de1:	83 ec 0c             	sub    esp,0xc
c0020de4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de8:	e8 f6 4c fe ff       	call   c0005ae3 <f_close>
c0020ded:	83 c4 10             	add    esp,0x10
c0020df0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df4:	83 ec 0c             	sub    esp,0xc
c0020df7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dfb:	e8 53 ea fe ff       	call   c000f853 <free>
c0020e00:	83 c4 10             	add    esp,0x10
c0020e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e07:	85 c0                	test   eax,eax
c0020e09:	75 07                	jne    c0020e12 <FAT::close(void*)+0x42>
c0020e0b:	b8 00 00 00 00       	mov    eax,0x0
c0020e10:	eb 05                	jmp    c0020e17 <FAT::close(void*)+0x47>
c0020e12:	b8 01 00 00 00       	mov    eax,0x1
c0020e17:	83 c4 1c             	add    esp,0x1c
c0020e1a:	c3                   	ret    
c0020e1b:	90                   	nop

c0020e1c <FAT::closeDir(void*)>:
c0020e1c:	83 ec 1c             	sub    esp,0x1c
c0020e1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e24:	75 07                	jne    c0020e2d <FAT::closeDir(void*)+0x11>
c0020e26:	b8 04 00 00 00       	mov    eax,0x4
c0020e2b:	eb 36                	jmp    c0020e63 <FAT::closeDir(void*)+0x47>
c0020e2d:	83 ec 0c             	sub    esp,0xc
c0020e30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e34:	e8 92 52 fe ff       	call   c00060cb <f_closedir>
c0020e39:	83 c4 10             	add    esp,0x10
c0020e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e40:	83 ec 0c             	sub    esp,0xc
c0020e43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e47:	e8 07 ea fe ff       	call   c000f853 <free>
c0020e4c:	83 c4 10             	add    esp,0x10
c0020e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e53:	85 c0                	test   eax,eax
c0020e55:	75 07                	jne    c0020e5e <FAT::closeDir(void*)+0x42>
c0020e57:	b8 00 00 00 00       	mov    eax,0x0
c0020e5c:	eb 05                	jmp    c0020e63 <FAT::closeDir(void*)+0x47>
c0020e5e:	b8 01 00 00 00       	mov    eax,0x1
c0020e63:	83 c4 1c             	add    esp,0x1c
c0020e66:	c3                   	ret    
c0020e67:	90                   	nop

c0020e68 <FAT::seek(void*, unsigned long long)>:
c0020e68:	83 ec 2c             	sub    esp,0x2c
c0020e6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e7b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e80:	75 07                	jne    c0020e89 <FAT::seek(void*, unsigned long long)+0x21>
c0020e82:	b8 04 00 00 00       	mov    eax,0x4
c0020e87:	eb 2f                	jmp    c0020eb8 <FAT::seek(void*, unsigned long long)+0x50>
c0020e89:	83 ec 04             	sub    esp,0x4
c0020e8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e90:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e98:	e8 75 4c fe ff       	call   c0005b12 <f_lseek>
c0020e9d:	83 c4 10             	add    esp,0x10
c0020ea0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ea8:	85 c0                	test   eax,eax
c0020eaa:	75 07                	jne    c0020eb3 <FAT::seek(void*, unsigned long long)+0x4b>
c0020eac:	b8 00 00 00 00       	mov    eax,0x0
c0020eb1:	eb 05                	jmp    c0020eb8 <FAT::seek(void*, unsigned long long)+0x50>
c0020eb3:	b8 01 00 00 00       	mov    eax,0x1
c0020eb8:	83 c4 2c             	add    esp,0x2c
c0020ebb:	c3                   	ret    

c0020ebc <fatWrapperReadDisk>:
c0020ebc:	83 ec 1c             	sub    esp,0x1c
c0020ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ec7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ece:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ed6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020edb:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020ee2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ee6:	83 ec 0c             	sub    esp,0xc
c0020ee9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eed:	52                   	push   edx
c0020eee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef6:	50                   	push   eax
c0020ef7:	e8 58 59 ff ff       	call   c0016854 <LogicalDisk::read(unsigned long long, int, void*)>
c0020efc:	83 c4 20             	add    esp,0x20
c0020eff:	83 c4 1c             	add    esp,0x1c
c0020f02:	c3                   	ret    

c0020f03 <fatWrapperWriteDisk>:
c0020f03:	83 ec 1c             	sub    esp,0x1c
c0020f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f0a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f12:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f1d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f22:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020f29:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f2d:	83 ec 0c             	sub    esp,0xc
c0020f30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f34:	52                   	push   edx
c0020f35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f3d:	50                   	push   eax
c0020f3e:	e8 7d 59 ff ff       	call   c00168c0 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f43:	83 c4 20             	add    esp,0x20
c0020f46:	83 c4 1c             	add    esp,0x1c
c0020f49:	c3                   	ret    

c0020f4a <fatWrapperIoctl>:
c0020f4a:	53                   	push   ebx
c0020f4b:	83 ec 28             	sub    esp,0x28
c0020f4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f56:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f5e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f63:	75 31                	jne    c0020f96 <fatWrapperIoctl+0x4c>
c0020f65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f72:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020f79:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f89:	66 89 02             	mov    WORD PTR [edx],ax
c0020f8c:	b8 00 00 00 00       	mov    eax,0x0
c0020f91:	e9 b2 00 00 00       	jmp    c0021048 <fatWrapperIoctl+0xfe>
c0020f96:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f9b:	75 6a                	jne    c0021007 <fatWrapperIoctl+0xbd>
c0020f9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020fa5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020faa:	8b 04 85 a0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1460]
c0020fb1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fb7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020fbd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020fc3:	89 c8                	mov    eax,ecx
c0020fc5:	89 da                	mov    edx,ebx
c0020fc7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020fcb:	c1 e0 0a             	shl    eax,0xa
c0020fce:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020fd3:	8b 0c 8d a0 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1460]
c0020fda:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020fe0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fe6:	89 cb                	mov    ebx,ecx
c0020fe8:	c1 fb 1f             	sar    ebx,0x1f
c0020feb:	53                   	push   ebx
c0020fec:	51                   	push   ecx
c0020fed:	52                   	push   edx
c0020fee:	50                   	push   eax
c0020fef:	e8 c8 5a 00 00       	call   c0026abc <__udivdi3>
c0020ff4:	83 c4 10             	add    esp,0x10
c0020ff7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020ffb:	89 01                	mov    DWORD PTR [ecx],eax
c0020ffd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021000:	b8 00 00 00 00       	mov    eax,0x0
c0021005:	eb 41                	jmp    c0021048 <fatWrapperIoctl+0xfe>
c0021007:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002100c:	75 07                	jne    c0021015 <fatWrapperIoctl+0xcb>
c002100e:	b8 00 00 00 00       	mov    eax,0x0
c0021013:	eb 33                	jmp    c0021048 <fatWrapperIoctl+0xfe>
c0021015:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002101a:	75 19                	jne    c0021035 <fatWrapperIoctl+0xeb>
c002101c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021024:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021028:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002102e:	b8 00 00 00 00       	mov    eax,0x0
c0021033:	eb 13                	jmp    c0021048 <fatWrapperIoctl+0xfe>
c0021035:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002103a:	75 07                	jne    c0021043 <fatWrapperIoctl+0xf9>
c002103c:	b8 00 00 00 00       	mov    eax,0x0
c0021041:	eb 05                	jmp    c0021048 <fatWrapperIoctl+0xfe>
c0021043:	b8 04 00 00 00       	mov    eax,0x4
c0021048:	83 c4 28             	add    esp,0x28
c002104b:	5b                   	pop    ebx
c002104c:	c3                   	ret    
c002104d:	90                   	nop

c002104e <FAT::FAT()>:
c002104e:	83 ec 1c             	sub    esp,0x1c
c0021051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021055:	83 ec 0c             	sub    esp,0xc
c0021058:	50                   	push   eax
c0021059:	e8 de 22 ff ff       	call   c001333c <Filesystem::Filesystem()>
c002105e:	83 c4 10             	add    esp,0x10
c0021061:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0021066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002106a:	89 10                	mov    DWORD PTR [eax],edx
c002106c:	c7 05 c0 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bc0,0x0
c0021076:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002107e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021083:	7f 15                	jg     c002109a <FAT::FAT()+0x4c>
c0021085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021089:	c7 04 85 e0 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce420],0xffffffff
c0021094:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021098:	eb e4                	jmp    c002107e <FAT::FAT()+0x30>
c002109a:	90                   	nop
c002109b:	83 c4 1c             	add    esp,0x1c
c002109e:	c3                   	ret    
c002109f:	90                   	nop

c00210a0 <FAT::fixFilepath(char*)>:
c00210a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a4:	8a 00                	mov    al,BYTE PTR [eax]
c00210a6:	3c 40                	cmp    al,0x40
c00210a8:	7e 2c                	jle    c00210d6 <FAT::fixFilepath(char*)+0x36>
c00210aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210ae:	8a 00                	mov    al,BYTE PTR [eax]
c00210b0:	83 e8 41             	sub    eax,0x41
c00210b3:	88 c2                	mov    dl,al
c00210b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210b9:	88 10                	mov    BYTE PTR [eax],dl
c00210bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210bf:	8a 00                	mov    al,BYTE PTR [eax]
c00210c1:	0f be c0             	movsx  eax,al
c00210c4:	8b 04 85 e0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce420]
c00210cb:	83 c0 30             	add    eax,0x30
c00210ce:	88 c2                	mov    dl,al
c00210d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210d4:	88 10                	mov    BYTE PTR [eax],dl
c00210d6:	90                   	nop
c00210d7:	c3                   	ret    

c00210d8 <FAT::open(char const*, void**, FileOpenMode)>:
c00210d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210e6:	74 0a                	je     c00210f2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210f0:	75 0a                	jne    c00210fc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210f2:	b8 04 00 00 00       	mov    eax,0x4
c00210f7:	e9 fd 00 00 00       	jmp    c00211f9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210fc:	83 ec 08             	sub    esp,0x8
c00210ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021106:	8d 44 24 14          	lea    eax,[esp+0x14]
c002110a:	50                   	push   eax
c002110b:	e8 24 f7 fd ff       	call   c0000834 <strcpy>
c0021110:	83 c4 10             	add    esp,0x10
c0021113:	83 ec 08             	sub    esp,0x8
c0021116:	8d 44 24 10          	lea    eax,[esp+0x10]
c002111a:	50                   	push   eax
c002111b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021122:	e8 79 ff ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c0021127:	83 c4 10             	add    esp,0x10
c002112a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021132:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021139:	83 e0 01             	and    eax,0x1
c002113c:	74 08                	je     c0021146 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002113e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021146:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002114d:	83 e0 04             	and    eax,0x4
c0021150:	74 10                	je     c0021162 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021152:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002115a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021162:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021169:	83 e0 02             	and    eax,0x2
c002116c:	74 08                	je     c0021176 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002116e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021176:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002117d:	83 e0 08             	and    eax,0x8
c0021180:	74 08                	je     c002118a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021182:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002118a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021191:	83 e0 10             	and    eax,0x10
c0021194:	74 08                	je     c002119e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021196:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002119e:	83 ec 0c             	sub    esp,0xc
c00211a1:	68 50 02 00 00       	push   0x250
c00211a6:	e8 98 e6 fe ff       	call   c000f843 <malloc>
c00211ab:	83 c4 10             	add    esp,0x10
c00211ae:	89 c2                	mov    edx,eax
c00211b0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211b7:	89 10                	mov    DWORD PTR [eax],edx
c00211b9:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00211c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ca:	83 ec 04             	sub    esp,0x4
c00211cd:	52                   	push   edx
c00211ce:	8d 54 24 10          	lea    edx,[esp+0x10]
c00211d2:	52                   	push   edx
c00211d3:	50                   	push   eax
c00211d4:	e8 b8 3d fe ff       	call   c0004f91 <f_open>
c00211d9:	83 c4 10             	add    esp,0x10
c00211dc:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211e3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211eb:	74 07                	je     c00211f4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211ed:	b8 01 00 00 00       	mov    eax,0x1
c00211f2:	eb 05                	jmp    c00211f9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211f4:	b8 00 00 00 00       	mov    eax,0x0
c00211f9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211ff:	c3                   	ret    

c0021200 <FAT::openDir(char const*, void**)>:
c0021200:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021206:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002120e:	74 0a                	je     c002121a <FAT::openDir(char const*, void**)+0x1a>
c0021210:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021218:	75 07                	jne    c0021221 <FAT::openDir(char const*, void**)+0x21>
c002121a:	b8 04 00 00 00       	mov    eax,0x4
c002121f:	eb 7d                	jmp    c002129e <FAT::openDir(char const*, void**)+0x9e>
c0021221:	83 ec 08             	sub    esp,0x8
c0021224:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002122b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002122f:	50                   	push   eax
c0021230:	e8 ff f5 fd ff       	call   c0000834 <strcpy>
c0021235:	83 c4 10             	add    esp,0x10
c0021238:	83 ec 08             	sub    esp,0x8
c002123b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002123f:	50                   	push   eax
c0021240:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021247:	e8 54 fe ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c002124c:	83 c4 10             	add    esp,0x10
c002124f:	83 ec 0c             	sub    esp,0xc
c0021252:	6a 4c                	push   0x4c
c0021254:	e8 ea e5 fe ff       	call   c000f843 <malloc>
c0021259:	83 c4 10             	add    esp,0x10
c002125c:	89 c2                	mov    edx,eax
c002125e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021265:	89 10                	mov    DWORD PTR [eax],edx
c0021267:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002126e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021270:	83 ec 08             	sub    esp,0x8
c0021273:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021277:	52                   	push   edx
c0021278:	50                   	push   eax
c0021279:	e8 4b 4d fe ff       	call   c0005fc9 <f_opendir>
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021288:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021290:	74 07                	je     c0021299 <FAT::openDir(char const*, void**)+0x99>
c0021292:	b8 01 00 00 00       	mov    eax,0x1
c0021297:	eb 05                	jmp    c002129e <FAT::openDir(char const*, void**)+0x9e>
c0021299:	b8 00 00 00 00       	mov    eax,0x0
c002129e:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212a4:	c3                   	ret    
c00212a5:	90                   	nop

c00212a6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00212a6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00212ac:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00212b4:	75 0a                	jne    c00212c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00212b6:	b8 04 00 00 00       	mov    eax,0x4
c00212bb:	e9 c9 00 00 00       	jmp    c0021389 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00212c8:	75 0a                	jne    c00212d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00212ca:	b8 04 00 00 00       	mov    eax,0x4
c00212cf:	e9 b5 00 00 00       	jmp    c0021389 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212d4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00212dc:	75 0a                	jne    c00212e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00212de:	b8 04 00 00 00       	mov    eax,0x4
c00212e3:	e9 a1 00 00 00       	jmp    c0021389 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212e8:	83 ec 08             	sub    esp,0x8
c00212eb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212f2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212f9:	50                   	push   eax
c00212fa:	e8 35 f5 fd ff       	call   c0000834 <strcpy>
c00212ff:	83 c4 10             	add    esp,0x10
c0021302:	83 ec 08             	sub    esp,0x8
c0021305:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002130c:	50                   	push   eax
c002130d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021314:	e8 87 fd ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c0021319:	83 c4 10             	add    esp,0x10
c002131c:	83 ec 08             	sub    esp,0x8
c002131f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021323:	50                   	push   eax
c0021324:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002132b:	50                   	push   eax
c002132c:	e8 57 4e fe ff       	call   c0006188 <f_stat>
c0021331:	83 c4 10             	add    esp,0x10
c0021334:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002133b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021342:	85 c0                	test   eax,eax
c0021344:	74 07                	je     c002134d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021346:	83 f8 04             	cmp    eax,0x4
c0021349:	74 32                	je     c002137d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002134b:	eb 37                	jmp    c0021384 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002134d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021351:	0f b6 c0             	movzx  eax,al
c0021354:	83 e0 10             	and    eax,0x10
c0021357:	0f 95 c2             	setne  dl
c002135a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021361:	88 10                	mov    BYTE PTR [eax],dl
c0021363:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021366:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002136a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021371:	89 01                	mov    DWORD PTR [ecx],eax
c0021373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021376:	b8 00 00 00 00       	mov    eax,0x0
c002137b:	eb 0c                	jmp    c0021389 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002137d:	b8 02 00 00 00       	mov    eax,0x2
c0021382:	eb 05                	jmp    c0021389 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021384:	b8 01 00 00 00       	mov    eax,0x1
c0021389:	81 c4 2c 02 00 00    	add    esp,0x22c
c002138f:	c3                   	ret    

c0021390 <FAT::unlink(char const*)>:
c0021390:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021396:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002139e:	75 07                	jne    c00213a7 <FAT::unlink(char const*)+0x17>
c00213a0:	b8 04 00 00 00       	mov    eax,0x4
c00213a5:	eb 5c                	jmp    c0021403 <FAT::unlink(char const*)+0x73>
c00213a7:	83 ec 08             	sub    esp,0x8
c00213aa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213b5:	50                   	push   eax
c00213b6:	e8 79 f4 fd ff       	call   c0000834 <strcpy>
c00213bb:	83 c4 10             	add    esp,0x10
c00213be:	83 ec 08             	sub    esp,0x8
c00213c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213c5:	50                   	push   eax
c00213c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213cd:	e8 ce fc ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c00213d2:	83 c4 10             	add    esp,0x10
c00213d5:	83 ec 0c             	sub    esp,0xc
c00213d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213dc:	50                   	push   eax
c00213dd:	e8 f8 50 fe ff       	call   c00064da <f_unlink>
c00213e2:	83 c4 10             	add    esp,0x10
c00213e5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213ec:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213f3:	85 c0                	test   eax,eax
c00213f5:	75 07                	jne    c00213fe <FAT::unlink(char const*)+0x6e>
c00213f7:	b8 00 00 00 00       	mov    eax,0x0
c00213fc:	eb 05                	jmp    c0021403 <FAT::unlink(char const*)+0x73>
c00213fe:	b8 01 00 00 00       	mov    eax,0x1
c0021403:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021409:	c3                   	ret    

c002140a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002140a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021410:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021417:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002141e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021422:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021426:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002142e:	75 0a                	jne    c002143a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021430:	b8 04 00 00 00       	mov    eax,0x4
c0021435:	e9 1c 01 00 00       	jmp    c0021556 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002143a:	83 ec 08             	sub    esp,0x8
c002143d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021444:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021448:	50                   	push   eax
c0021449:	e8 e6 f3 fd ff       	call   c0000834 <strcpy>
c002144e:	83 c4 10             	add    esp,0x10
c0021451:	83 ec 08             	sub    esp,0x8
c0021454:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021458:	50                   	push   eax
c0021459:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021460:	e8 3b fc ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c0021465:	83 c4 10             	add    esp,0x10
c0021468:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021470:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021478:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002147d:	83 e0 01             	and    eax,0x1
c0021480:	74 08                	je     c002148a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021482:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002148a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002148f:	83 e0 02             	and    eax,0x2
c0021492:	74 08                	je     c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021494:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002149c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214a1:	83 e0 04             	and    eax,0x4
c00214a4:	74 08                	je     c00214ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00214a6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00214ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00214b3:	83 e0 08             	and    eax,0x8
c00214b6:	74 08                	je     c00214c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00214b8:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00214c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214c5:	83 e0 01             	and    eax,0x1
c00214c8:	74 08                	je     c00214d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00214ca:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00214d2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214d7:	83 e0 02             	and    eax,0x2
c00214da:	74 08                	je     c00214e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00214dc:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214e9:	83 e0 04             	and    eax,0x4
c00214ec:	74 08                	je     c00214f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214ee:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214f6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214fb:	83 e0 08             	and    eax,0x8
c00214fe:	74 08                	je     c0021508 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021500:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021508:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002150f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021516:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002151e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021526:	83 ec 04             	sub    esp,0x4
c0021529:	52                   	push   edx
c002152a:	50                   	push   eax
c002152b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002152f:	50                   	push   eax
c0021530:	e8 47 56 fe ff       	call   c0006b7c <f_chmod>
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002153f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021546:	85 c0                	test   eax,eax
c0021548:	75 07                	jne    c0021551 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002154a:	b8 00 00 00 00       	mov    eax,0x0
c002154f:	eb 05                	jmp    c0021556 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021551:	b8 01 00 00 00       	mov    eax,0x1
c0021556:	81 c4 2c 01 00 00    	add    esp,0x12c
c002155c:	c3                   	ret    
c002155d:	90                   	nop

c002155e <FAT::rename(char const*, char const*)>:
c002155e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021564:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002156c:	74 0a                	je     c0021578 <FAT::rename(char const*, char const*)+0x1a>
c002156e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021576:	75 0a                	jne    c0021582 <FAT::rename(char const*, char const*)+0x24>
c0021578:	b8 04 00 00 00       	mov    eax,0x4
c002157d:	e9 98 00 00 00       	jmp    c002161a <FAT::rename(char const*, char const*)+0xbc>
c0021582:	83 ec 08             	sub    esp,0x8
c0021585:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002158c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021593:	50                   	push   eax
c0021594:	e8 9b f2 fd ff       	call   c0000834 <strcpy>
c0021599:	83 c4 10             	add    esp,0x10
c002159c:	83 ec 08             	sub    esp,0x8
c002159f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00215a6:	50                   	push   eax
c00215a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215ae:	e8 ed fa ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	83 ec 08             	sub    esp,0x8
c00215b9:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00215c0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215c4:	50                   	push   eax
c00215c5:	e8 6a f2 fd ff       	call   c0000834 <strcpy>
c00215ca:	83 c4 10             	add    esp,0x10
c00215cd:	83 ec 08             	sub    esp,0x8
c00215d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d4:	50                   	push   eax
c00215d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215dc:	e8 bf fa ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	83 ec 08             	sub    esp,0x8
c00215e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215eb:	50                   	push   eax
c00215ec:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215f3:	50                   	push   eax
c00215f4:	e8 90 52 fe ff       	call   c0006889 <f_rename>
c00215f9:	83 c4 10             	add    esp,0x10
c00215fc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021603:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002160a:	85 c0                	test   eax,eax
c002160c:	75 07                	jne    c0021615 <FAT::rename(char const*, char const*)+0xb7>
c002160e:	b8 00 00 00 00       	mov    eax,0x0
c0021613:	eb 05                	jmp    c002161a <FAT::rename(char const*, char const*)+0xbc>
c0021615:	b8 01 00 00 00       	mov    eax,0x1
c002161a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021620:	c3                   	ret    
c0021621:	90                   	nop

c0021622 <FAT::mkdir(char const*)>:
c0021622:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021628:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021630:	75 07                	jne    c0021639 <FAT::mkdir(char const*)+0x17>
c0021632:	b8 04 00 00 00       	mov    eax,0x4
c0021637:	eb 5c                	jmp    c0021695 <FAT::mkdir(char const*)+0x73>
c0021639:	83 ec 08             	sub    esp,0x8
c002163c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021643:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021647:	50                   	push   eax
c0021648:	e8 e7 f1 fd ff       	call   c0000834 <strcpy>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	83 ec 08             	sub    esp,0x8
c0021653:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021657:	50                   	push   eax
c0021658:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002165f:	e8 3c fa ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c0021664:	83 c4 10             	add    esp,0x10
c0021667:	83 ec 0c             	sub    esp,0xc
c002166a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002166e:	50                   	push   eax
c002166f:	e8 e9 4f fe ff       	call   c000665d <f_mkdir>
c0021674:	83 c4 10             	add    esp,0x10
c0021677:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002167e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021685:	85 c0                	test   eax,eax
c0021687:	75 07                	jne    c0021690 <FAT::mkdir(char const*)+0x6e>
c0021689:	b8 00 00 00 00       	mov    eax,0x0
c002168e:	eb 05                	jmp    c0021695 <FAT::mkdir(char const*)+0x73>
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	81 c4 1c 01 00 00    	add    esp,0x11c
c002169b:	c3                   	ret    

c002169c <FAT::exists(char const*)>:
c002169c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00216a2:	83 ec 08             	sub    esp,0x8
c00216a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216b0:	50                   	push   eax
c00216b1:	e8 7e f1 fd ff       	call   c0000834 <strcpy>
c00216b6:	83 c4 10             	add    esp,0x10
c00216b9:	83 ec 08             	sub    esp,0x8
c00216bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216c0:	50                   	push   eax
c00216c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216c8:	e8 d3 f9 ff ff       	call   c00210a0 <FAT::fixFilepath(char*)>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	83 ec 08             	sub    esp,0x8
c00216d3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00216da:	50                   	push   eax
c00216db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216df:	50                   	push   eax
c00216e0:	e8 a3 4a fe ff       	call   c0006188 <f_stat>
c00216e5:	83 c4 10             	add    esp,0x10
c00216e8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216ef:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216f6:	85 c0                	test   eax,eax
c00216f8:	75 04                	jne    c00216fe <FAT::exists(char const*)+0x62>
c00216fa:	b0 01                	mov    al,0x1
c00216fc:	eb 02                	jmp    c0021700 <FAT::exists(char const*)+0x64>
c00216fe:	b0 00                	mov    al,0x0
c0021700:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021706:	c3                   	ret    
c0021707:	90                   	nop

c0021708 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021708:	b8 08 00 00 00       	mov    eax,0x8
c002170d:	c3                   	ret    

c002170e <ISO9660::seek(void*, unsigned long long)>:
c002170e:	53                   	push   ebx
c002170f:	b8 04 00 00 00       	mov    eax,0x4
c0021714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021718:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002171c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021720:	85 d2                	test   edx,edx
c0021722:	74 17                	je     c002173b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021724:	89 c8                	mov    eax,ecx
c0021726:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021729:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002172c:	b8 01 00 00 00       	mov    eax,0x1
c0021731:	73 08                	jae    c002173b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021733:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021736:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021739:	31 c0                	xor    eax,eax
c002173b:	5b                   	pop    ebx
c002173c:	c3                   	ret    
c002173d:	90                   	nop

c002173e <ISO9660::tell(void*, unsigned long long*)>:
c002173e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021746:	85 d2                	test   edx,edx
c0021748:	74 12                	je     c002175c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002174a:	85 c0                	test   eax,eax
c002174c:	74 0e                	je     c002175c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002174e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021751:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021754:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021757:	89 10                	mov    DWORD PTR [eax],edx
c0021759:	31 c0                	xor    eax,eax
c002175b:	c3                   	ret    
c002175c:	b8 04 00 00 00       	mov    eax,0x4
c0021761:	c3                   	ret    

c0021762 <ISO9660::getName()>:
c0021762:	b8 3c ca 02 c0       	mov    eax,0xc002ca3c
c0021767:	c3                   	ret    

c0021768 <ISO9660::stat(void*, unsigned long long*)>:
c0021768:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002176c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021770:	85 d2                	test   edx,edx
c0021772:	74 12                	je     c0021786 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021774:	85 c0                	test   eax,eax
c0021776:	74 0e                	je     c0021786 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021778:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002177b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002177e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021781:	89 10                	mov    DWORD PTR [eax],edx
c0021783:	31 c0                	xor    eax,eax
c0021785:	c3                   	ret    
c0021786:	b8 04 00 00 00       	mov    eax,0x4
c002178b:	c3                   	ret    

c002178c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002178c:	b8 01 00 00 00       	mov    eax,0x1
c0021791:	c3                   	ret    

c0021792 <ISO9660::unlink(char const*)>:
c0021792:	b8 01 00 00 00       	mov    eax,0x1
c0021797:	c3                   	ret    

c0021798 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021798:	b8 01 00 00 00       	mov    eax,0x1
c002179d:	c3                   	ret    

c002179e <ISO9660::rename(char const*, char const*)>:
c002179e:	b8 01 00 00 00       	mov    eax,0x1
c00217a3:	c3                   	ret    

c00217a4 <ISO9660::mkdir(char const*)>:
c00217a4:	b8 01 00 00 00       	mov    eax,0x1
c00217a9:	c3                   	ret    

c00217aa <ISO9660::close(void*)>:
c00217aa:	83 ec 0c             	sub    esp,0xc
c00217ad:	b8 04 00 00 00       	mov    eax,0x4
c00217b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217b6:	85 d2                	test   edx,edx
c00217b8:	74 0e                	je     c00217c8 <ISO9660::close(void*)+0x1e>
c00217ba:	83 ec 0c             	sub    esp,0xc
c00217bd:	52                   	push   edx
c00217be:	e8 90 e0 fe ff       	call   c000f853 <free>
c00217c3:	83 c4 10             	add    esp,0x10
c00217c6:	31 c0                	xor    eax,eax
c00217c8:	83 c4 0c             	add    esp,0xc
c00217cb:	c3                   	ret    

c00217cc <ISO9660::closeDir(void*)>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	b8 04 00 00 00       	mov    eax,0x4
c00217d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217d8:	85 d2                	test   edx,edx
c00217da:	74 0e                	je     c00217ea <ISO9660::closeDir(void*)+0x1e>
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	52                   	push   edx
c00217e0:	e8 6e e0 fe ff       	call   c000f853 <free>
c00217e5:	83 c4 10             	add    esp,0x10
c00217e8:	31 c0                	xor    eax,eax
c00217ea:	83 c4 0c             	add    esp,0xc
c00217ed:	c3                   	ret    

c00217ee <ISO9660::~ISO9660()>:
c00217ee:	83 ec 0c             	sub    esp,0xc
c00217f1:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c00217f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217fa:	89 10                	mov    DWORD PTR [eax],edx
c00217fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021800:	83 ec 0c             	sub    esp,0xc
c0021803:	50                   	push   eax
c0021804:	e8 57 1b ff ff       	call   c0013360 <Filesystem::~Filesystem()>
c0021809:	83 c4 10             	add    esp,0x10
c002180c:	90                   	nop
c002180d:	83 c4 0c             	add    esp,0xc
c0021810:	c3                   	ret    
c0021811:	90                   	nop

c0021812 <ISO9660::~ISO9660()>:
c0021812:	83 ec 0c             	sub    esp,0xc
c0021815:	83 ec 0c             	sub    esp,0xc
c0021818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002181c:	e8 cd ff ff ff       	call   c00217ee <ISO9660::~ISO9660()>
c0021821:	83 c4 10             	add    esp,0x10
c0021824:	83 ec 08             	sub    esp,0x8
c0021827:	6a 08                	push   0x8
c0021829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002182d:	e8 26 17 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0021832:	83 c4 10             	add    esp,0x10
c0021835:	83 c4 0c             	add    esp,0xc
c0021838:	c3                   	ret    

c0021839 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021839:	55                   	push   ebp
c002183a:	31 c9                	xor    ecx,ecx
c002183c:	57                   	push   edi
c002183d:	56                   	push   esi
c002183e:	53                   	push   ebx
c002183f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021843:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021847:	89 eb                	mov    ebx,ebp
c0021849:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002184d:	39 ce                	cmp    esi,ecx
c002184f:	7e 17                	jle    c0021868 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021851:	31 d2                	xor    edx,edx
c0021853:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021857:	7d 13                	jge    c002186c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021859:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002185d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021860:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021863:	75 0d                	jne    c0021872 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021865:	42                   	inc    edx
c0021866:	eb eb                	jmp    c0021853 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021868:	31 c0                	xor    eax,eax
c002186a:	eb 0a                	jmp    c0021876 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002186c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021870:	eb 04                	jmp    c0021876 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021872:	41                   	inc    ecx
c0021873:	43                   	inc    ebx
c0021874:	eb d7                	jmp    c002184d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021876:	5b                   	pop    ebx
c0021877:	5e                   	pop    esi
c0021878:	5f                   	pop    edi
c0021879:	5d                   	pop    ebp
c002187a:	c3                   	ret    

c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002187b:	56                   	push   esi
c002187c:	53                   	push   ebx
c002187d:	52                   	push   edx
c002187e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021882:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021886:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002188a:	39 0d c0 1c 03 c0    	cmp    DWORD PTR ds:0xc0031cc0,ecx
c0021890:	75 08                	jne    c002189a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021892:	38 05 f4 da 02 c0    	cmp    BYTE PTR ds:0xc002daf4,al
c0021898:	74 2b                	je     c00218c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002189a:	83 ec 0c             	sub    esp,0xc
c002189d:	a2 f4 da 02 c0       	mov    ds:0xc002daf4,al
c00218a2:	68 e0 1c 03 c0       	push   0xc0031ce0
c00218a7:	0f be c0             	movsx  eax,al
c00218aa:	6a 01                	push   0x1
c00218ac:	89 0d c0 1c 03 c0    	mov    DWORD PTR ds:0xc0031cc0,ecx
c00218b2:	31 db                	xor    ebx,ebx
c00218b4:	53                   	push   ebx
c00218b5:	51                   	push   ecx
c00218b6:	ff 34 85 9c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1564]
c00218bd:	e8 92 4f ff ff       	call   c0016854 <LogicalDisk::read(unsigned long long, int, void*)>
c00218c2:	83 c4 20             	add    esp,0x20
c00218c5:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00218cd:	c7 44 24 14 e0 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ce0
c00218d5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218d9:	58                   	pop    eax
c00218da:	5b                   	pop    ebx
c00218db:	5e                   	pop    esi
c00218dc:	e9 63 ee fd ff       	jmp    c0000744 <memcpy>
c00218e1:	90                   	nop

c00218e2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00218e2:	81 ec 10 08 00 00    	sub    esp,0x810
c00218e8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218ef:	83 c0 41             	add    eax,0x41
c00218f2:	0f be c0             	movsx  eax,al
c00218f5:	50                   	push   eax
c00218f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218fa:	50                   	push   eax
c00218fb:	6a 10                	push   0x10
c00218fd:	e8 79 ff ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021902:	83 c4 10             	add    esp,0x10
c0021905:	31 c0                	xor    eax,eax
c0021907:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002190c:	75 1d                	jne    c002192b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002190e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021913:	75 16                	jne    c002192b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021915:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002191a:	75 0f                	jne    c002192b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002191c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021921:	75 08                	jne    c002192b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021923:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021928:	0f 94 c0             	sete   al
c002192b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021931:	c3                   	ret    

c0021932 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021932:	55                   	push   ebp
c0021933:	57                   	push   edi
c0021934:	56                   	push   esi
c0021935:	53                   	push   ebx
c0021936:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002193c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021943:	85 ed                	test   ebp,ebp
c0021945:	0f 84 d6 01 00 00    	je     c0021b21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002194b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021953:	0f 84 c8 01 00 00    	je     c0021b21 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021959:	b8 01 00 00 00       	mov    eax,0x1
c002195e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021962:	0f 85 be 01 00 00    	jne    c0021b26 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021968:	31 d2                	xor    edx,edx
c002196a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021971:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021974:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021977:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002197b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002197e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021981:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021985:	01 f0                	add    eax,esi
c0021987:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002198a:	11 fa                	adc    edx,edi
c002198c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021990:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021994:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021998:	19 d1                	sbb    ecx,edx
c002199a:	72 0a                	jb     c00219a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002199c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00219a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00219a4:	eb 13                	jmp    c00219b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00219a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219ae:	29 f0                	sub    eax,esi
c00219b0:	19 fa                	sbb    edx,edi
c00219b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00219b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00219bc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00219bf:	0f a4 c2 0b          	shld   edx,eax,0xb
c00219c3:	51                   	push   ecx
c00219c4:	c1 e0 0b             	shl    eax,0xb
c00219c7:	01 c6                	add    esi,eax
c00219c9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219cd:	11 d7                	adc    edi,edx
c00219cf:	50                   	push   eax
c00219d0:	89 fa                	mov    edx,edi
c00219d2:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00219d6:	89 f0                	mov    eax,esi
c00219d8:	53                   	push   ebx
c00219d9:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219dd:	50                   	push   eax
c00219de:	e8 98 fe ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219ea:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219ee:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219f4:	83 c4 10             	add    esp,0x10
c00219f7:	b8 00 08 00 00       	mov    eax,0x800
c00219fc:	29 d0                	sub    eax,edx
c00219fe:	39 c1                	cmp    ecx,eax
c0021a00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021a04:	83 d9 00             	sbb    ecx,0x0
c0021a07:	7d 1c                	jge    c0021a25 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021a09:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021a0e:	75 12                	jne    c0021a22 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021a10:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a1d:	e9 fb 00 00 00       	jmp    c0021b1d <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a22:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a25:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a28:	31 d2                	xor    edx,edx
c0021a2a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a2e:	39 c2                	cmp    edx,eax
c0021a30:	7d 14                	jge    c0021a46 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a32:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a3d:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a40:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a43:	42                   	inc    edx
c0021a44:	eb e8                	jmp    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a46:	89 c3                	mov    ebx,eax
c0021a48:	85 c0                	test   eax,eax
c0021a4a:	79 02                	jns    c0021a4e <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a4c:	31 db                	xor    ebx,ebx
c0021a4e:	99                   	cdq    
c0021a4f:	01 c3                	add    ebx,eax
c0021a51:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a58:	01 c6                	add    esi,eax
c0021a5a:	11 d7                	adc    edi,edx
c0021a5c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a60:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a64:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a6b:	29 c6                	sub    esi,eax
c0021a6d:	19 d7                	sbb    edi,edx
c0021a6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a72:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a76:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a7b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a7e:	b8 00 00 00 00       	mov    eax,0x0
c0021a83:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a87:	7d 3e                	jge    c0021ac7 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a89:	52                   	push   edx
c0021a8a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a8e:	50                   	push   eax
c0021a8f:	53                   	push   ebx
c0021a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a98:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a9c:	50                   	push   eax
c0021a9d:	e8 d9 fd ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa2:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021aaa:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021aaf:	81 c3 00 08 00 00    	add    ebx,0x800
c0021ab5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021abd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021ac2:	83 c4 10             	add    esp,0x10
c0021ac5:	eb af                	jmp    c0021a76 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021acb:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ace:	74 32                	je     c0021b02 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021ad0:	50                   	push   eax
c0021ad1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ad5:	50                   	push   eax
c0021ad6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ada:	50                   	push   eax
c0021adb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021adf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021ae3:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021ae7:	56                   	push   esi
c0021ae8:	e8 8e fd ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aed:	83 c4 0c             	add    esp,0xc
c0021af0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021af4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021af8:	50                   	push   eax
c0021af9:	53                   	push   ebx
c0021afa:	e8 45 ec fd ff       	call   c0000744 <memcpy>
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021b0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021b11:	89 38                	mov    DWORD PTR [eax],edi
c0021b13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b17:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b1a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b1d:	31 c0                	xor    eax,eax
c0021b1f:	eb 05                	jmp    c0021b26 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b21:	b8 04 00 00 00       	mov    eax,0x4
c0021b26:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b2c:	5b                   	pop    ebx
c0021b2d:	5e                   	pop    esi
c0021b2e:	5f                   	pop    edi
c0021b2f:	5d                   	pop    ebp
c0021b30:	c3                   	ret    
c0021b31:	90                   	nop

c0021b32 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b32:	55                   	push   ebp
c0021b33:	57                   	push   edi
c0021b34:	56                   	push   esi
c0021b35:	53                   	push   ebx
c0021b36:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b3c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b43:	85 f6                	test   esi,esi
c0021b45:	0f 84 64 02 00 00    	je     c0021daf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b4b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b53:	0f 84 56 02 00 00    	je     c0021daf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b59:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b5c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b5f:	75 0a                	jne    c0021b6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b61:	b8 07 00 00 00       	mov    eax,0x7
c0021b66:	e9 49 02 00 00       	jmp    c0021db4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b6b:	50                   	push   eax
c0021b6c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b70:	50                   	push   eax
c0021b71:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b78:	53                   	push   ebx
c0021b79:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b7b:	c1 e0 0b             	shl    eax,0xb
c0021b7e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b81:	c1 e8 0b             	shr    eax,0xb
c0021b84:	50                   	push   eax
c0021b85:	e8 f1 fc ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b8a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b8d:	83 c4 10             	add    esp,0x10
c0021b90:	89 c1                	mov    ecx,eax
c0021b92:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b95:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b9b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b9e:	84 db                	test   bl,bl
c0021ba0:	0f 85 90 00 00 00    	jne    c0021c36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021ba6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021bac:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bb2:	29 c7                	sub    edi,eax
c0021bb4:	89 fb                	mov    ebx,edi
c0021bb6:	c1 fb 1f             	sar    ebx,0x1f
c0021bb9:	01 f8                	add    eax,edi
c0021bbb:	11 da                	adc    edx,ebx
c0021bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bc5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021bc8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021bcb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bd4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bd8:	89 d8                	mov    eax,ebx
c0021bda:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021bdd:	ba 00 00 00 00       	mov    edx,0x0
c0021be2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021be6:	b8 00 00 00 00       	mov    eax,0x0
c0021beb:	73 0b                	jae    c0021bf8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bf4:	29 f8                	sub    eax,edi
c0021bf6:	19 da                	sbb    edx,ebx
c0021bf8:	89 d3                	mov    ebx,edx
c0021bfa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bfd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c00:	09 c3                	or     ebx,eax
c0021c02:	0f 84 59 ff ff ff    	je     c0021b61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021c08:	55                   	push   ebp
c0021c09:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021c0d:	50                   	push   eax
c0021c0e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c15:	53                   	push   ebx
c0021c16:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c18:	c1 e0 0b             	shl    eax,0xb
c0021c1b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c1f:	c1 e8 0b             	shr    eax,0xb
c0021c22:	50                   	push   eax
c0021c23:	e8 53 fc ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c28:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	25 ff 07 00 00       	and    eax,0x7ff
c0021c33:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c36:	57                   	push   edi
c0021c37:	6a 28                	push   0x28
c0021c39:	6a 00                	push   0x0
c0021c3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c3f:	50                   	push   eax
c0021c40:	e8 33 eb fd ff       	call   c0000778 <memset>
c0021c45:	31 d2                	xor    edx,edx
c0021c47:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c4a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c50:	89 f8                	mov    eax,edi
c0021c52:	83 c0 21             	add    eax,0x21
c0021c55:	83 d2 00             	adc    edx,0x0
c0021c58:	89 c7                	mov    edi,eax
c0021c5a:	89 d5                	mov    ebp,edx
c0021c5c:	83 c4 10             	add    esp,0x10
c0021c5f:	31 c9                	xor    ecx,ecx
c0021c61:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c68:	83 f9 28             	cmp    ecx,0x28
c0021c6b:	88 04 24             	mov    BYTE PTR [esp],al
c0021c6e:	0f 94 c2             	sete   dl
c0021c71:	88 d0                	mov    al,dl
c0021c73:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c78:	39 fa                	cmp    edx,edi
c0021c7a:	ba 00 00 00 00       	mov    edx,0x0
c0021c7f:	19 ea                	sbb    edx,ebp
c0021c81:	0f 92 c2             	setb   dl
c0021c84:	09 c2                	or     edx,eax
c0021c86:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c8a:	0f 94 c0             	sete   al
c0021c8d:	08 d0                	or     al,dl
c0021c8f:	75 16                	jne    c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c91:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c95:	74 10                	je     c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c97:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c9a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c9e:	41                   	inc    ecx
c0021c9f:	83 c7 01             	add    edi,0x1
c0021ca2:	83 d5 00             	adc    ebp,0x0
c0021ca5:	eb ba                	jmp    c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021ca7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021cae:	83 ec 0c             	sub    esp,0xc
c0021cb1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021cb5:	57                   	push   edi
c0021cb6:	e8 d9 ea fd ff       	call   c0000794 <strlen>
c0021cbb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021cc3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cc7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021cce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021cd1:	5a                   	pop    edx
c0021cd2:	25 ff 07 00 00       	and    eax,0x7ff
c0021cd7:	01 c8                	add    eax,ecx
c0021cd9:	59                   	pop    ecx
c0021cda:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ce0:	83 e0 02             	and    eax,0x2
c0021ce3:	3c 01                	cmp    al,0x1
c0021ce5:	19 c0                	sbb    eax,eax
c0021ce7:	83 c0 02             	add    eax,0x2
c0021cea:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cee:	57                   	push   edi
c0021cef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cf3:	50                   	push   eax
c0021cf4:	e8 3b eb fd ff       	call   c0000834 <strcpy>
c0021cf9:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cfd:	83 c4 10             	add    esp,0x10
c0021d00:	84 c0                	test   al,al
c0021d02:	75 21                	jne    c0021d25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021d04:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021d0c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d14:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d1c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d23:	eb 28                	jmp    c0021d4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d25:	fe c8                	dec    al
c0021d27:	75 24                	jne    c0021d4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d29:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d31:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d39:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d41:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d48:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d4d:	0f b6 fb             	movzx  edi,bl
c0021d50:	31 db                	xor    ebx,ebx
c0021d52:	50                   	push   eax
c0021d53:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d5a:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d5e:	50                   	push   eax
c0021d5f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d66:	e8 d9 e9 fd ff       	call   c0000744 <memcpy>
c0021d6b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d72:	89 f9                	mov    ecx,edi
c0021d74:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d7a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d7d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d80:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d83:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d86:	83 c4 10             	add    esp,0x10
c0021d89:	39 c7                	cmp    edi,eax
c0021d8b:	89 df                	mov    edi,ebx
c0021d8d:	19 d7                	sbb    edi,edx
c0021d8f:	72 10                	jb     c0021da1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d91:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d98:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d9f:	eb 0a                	jmp    c0021dab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021da1:	29 c8                	sub    eax,ecx
c0021da3:	19 da                	sbb    edx,ebx
c0021da5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021da8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021dab:	31 c0                	xor    eax,eax
c0021dad:	eb 05                	jmp    c0021db4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021daf:	b8 04 00 00 00       	mov    eax,0x4
c0021db4:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021dba:	5b                   	pop    ebx
c0021dbb:	5e                   	pop    esi
c0021dbc:	5f                   	pop    edi
c0021dbd:	5d                   	pop    ebp
c0021dbe:	c3                   	ret    

c0021dbf <readRoot(unsigned int*, unsigned int*, char)>:
c0021dbf:	81 ec 40 08 00 00    	sub    esp,0x840
c0021dc5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021dcd:	50                   	push   eax
c0021dce:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021dd2:	50                   	push   eax
c0021dd3:	6a 10                	push   0x10
c0021dd5:	e8 a1 fa ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dda:	83 c4 0c             	add    esp,0xc
c0021ddd:	6a 22                	push   0x22
c0021ddf:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021de6:	50                   	push   eax
c0021de7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021deb:	50                   	push   eax
c0021dec:	e8 53 e9 fd ff       	call   c0000744 <memcpy>
c0021df1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021df8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021dfc:	89 10                	mov    DWORD PTR [eax],edx
c0021dfe:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021e05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021e09:	89 10                	mov    DWORD PTR [eax],edx
c0021e0b:	b0 01                	mov    al,0x1
c0021e0d:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021e13:	c3                   	ret    

c0021e14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021e14:	55                   	push   ebp
c0021e15:	57                   	push   edi
c0021e16:	56                   	push   esi
c0021e17:	53                   	push   ebx
c0021e18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e1e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e25:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e30:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e34:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e3c:	75 03                	jne    c0021e41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e3e:	83 c3 02             	add    ebx,0x2
c0021e41:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e44:	75 03                	jne    c0021e49 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e46:	43                   	inc    ebx
c0021e47:	eb f8                	jmp    c0021e41 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e49:	51                   	push   ecx
c0021e4a:	68 00 01 00 00       	push   0x100
c0021e4f:	6a 00                	push   0x0
c0021e51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e55:	50                   	push   eax
c0021e56:	e8 1d e9 fd ff       	call   c0000778 <memset>
c0021e5b:	83 c4 10             	add    esp,0x10
c0021e5e:	31 d2                	xor    edx,edx
c0021e60:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e63:	84 c0                	test   al,al
c0021e65:	74 21                	je     c0021e88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e67:	3c 2f                	cmp    al,0x2f
c0021e69:	75 0b                	jne    c0021e76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e6b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e6f:	bd 01 00 00 00       	mov    ebp,0x1
c0021e74:	eb 14                	jmp    c0021e8a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e76:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e79:	80 f9 19             	cmp    cl,0x19
c0021e7c:	77 03                	ja     c0021e81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e7e:	83 e8 20             	sub    eax,0x20
c0021e81:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e85:	42                   	inc    edx
c0021e86:	eb d8                	jmp    c0021e60 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e88:	31 ed                	xor    ebp,ebp
c0021e8a:	83 ec 0c             	sub    esp,0xc
c0021e8d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e94:	e8 aa d9 fe ff       	call   c000f843 <malloc>
c0021e99:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021ea0:	89 c6                	mov    esi,eax
c0021ea2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021ea8:	c1 ef 0b             	shr    edi,0xb
c0021eab:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021eb2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021eb6:	83 c4 10             	add    esp,0x10
c0021eb9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ebe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ec2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021ec9:	74 28                	je     c0021ef3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ecb:	52                   	push   edx
c0021ecc:	57                   	push   edi
c0021ecd:	50                   	push   eax
c0021ece:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ed2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021ed9:	e8 9d f9 ff ff       	call   c002187b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ee2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ee9:	05 00 08 00 00       	add    eax,0x800
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	eb cb                	jmp    c0021ebe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ef3:	83 ec 0c             	sub    esp,0xc
c0021ef6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021efa:	57                   	push   edi
c0021efb:	e8 94 e8 fd ff       	call   c0000794 <strlen>
c0021f00:	50                   	push   eax
c0021f01:	57                   	push   edi
c0021f02:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021f09:	56                   	push   esi
c0021f0a:	e8 2a f9 ff ff       	call   c0021839 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021f0f:	83 c4 20             	add    esp,0x20
c0021f12:	85 c0                	test   eax,eax
c0021f14:	75 13                	jne    c0021f29 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021f16:	83 ec 0c             	sub    esp,0xc
c0021f19:	56                   	push   esi
c0021f1a:	e8 34 d9 fe ff       	call   c000f853 <free>
c0021f1f:	83 c4 10             	add    esp,0x10
c0021f22:	31 c0                	xor    eax,eax
c0021f24:	e9 b3 00 00 00       	jmp    c0021fdc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f29:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f2d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f31:	c1 e7 08             	shl    edi,0x8
c0021f34:	c1 e2 10             	shl    edx,0x10
c0021f37:	09 d7                	or     edi,edx
c0021f39:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f3d:	09 d7                	or     edi,edx
c0021f3f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f43:	c1 e2 18             	shl    edx,0x18
c0021f46:	09 d7                	or     edi,edx
c0021f48:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f4c:	89 d1                	mov    ecx,edx
c0021f4e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f52:	c1 e1 08             	shl    ecx,0x8
c0021f55:	c1 e2 10             	shl    edx,0x10
c0021f58:	09 ca                	or     edx,ecx
c0021f5a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f5e:	09 ca                	or     edx,ecx
c0021f60:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f64:	c1 e1 18             	shl    ecx,0x18
c0021f67:	09 ca                	or     edx,ecx
c0021f69:	89 e9                	mov    ecx,ebp
c0021f6b:	84 c9                	test   cl,cl
c0021f6d:	74 3c                	je     c0021fab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f6f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f73:	83 ec 0c             	sub    esp,0xc
c0021f76:	56                   	push   esi
c0021f77:	e8 d7 d8 fe ff       	call   c000f853 <free>
c0021f7c:	83 c4 0c             	add    esp,0xc
c0021f7f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f86:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f8b:	50                   	push   eax
c0021f8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f93:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f9e:	52                   	push   edx
c0021f9f:	57                   	push   edi
c0021fa0:	53                   	push   ebx
c0021fa1:	e8 6e fe ff ff       	call   c0021e14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fa6:	83 c4 20             	add    esp,0x20
c0021fa9:	eb 31                	jmp    c0021fdc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021fab:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021fae:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021fb5:	d0 e8                	shr    al,1
c0021fb7:	89 3b                	mov    DWORD PTR [ebx],edi
c0021fb9:	83 e0 01             	and    eax,0x1
c0021fbc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021fc3:	83 ec 0c             	sub    esp,0xc
c0021fc6:	89 13                	mov    DWORD PTR [ebx],edx
c0021fc8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021fcf:	89 03                	mov    DWORD PTR [ebx],eax
c0021fd1:	56                   	push   esi
c0021fd2:	e8 7c d8 fe ff       	call   c000f853 <free>
c0021fd7:	83 c4 10             	add    esp,0x10
c0021fda:	b0 01                	mov    al,0x1
c0021fdc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fe2:	5b                   	pop    ebx
c0021fe3:	5e                   	pop    esi
c0021fe4:	5f                   	pop    edi
c0021fe5:	5d                   	pop    ebp
c0021fe6:	c3                   	ret    

c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fe7:	55                   	push   ebp
c0021fe8:	57                   	push   edi
c0021fe9:	56                   	push   esi
c0021fea:	53                   	push   ebx
c0021feb:	83 ec 20             	sub    esp,0x20
c0021fee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021ff2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021ff6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ffa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022002:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002200a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002200f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022015:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002201b:	57                   	push   edi
c002201c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022020:	50                   	push   eax
c0022021:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022025:	50                   	push   eax
c0022026:	e8 94 fd ff ff       	call   c0021dbf <readRoot(unsigned int*, unsigned int*, char)>
c002202b:	5a                   	pop    edx
c002202c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022030:	e8 5f e7 fd ff       	call   c0000794 <strlen>
c0022035:	83 c4 10             	add    esp,0x10
c0022038:	83 f8 03             	cmp    eax,0x3
c002203b:	77 17                	ja     c0022054 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002203d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022041:	89 03                	mov    DWORD PTR [ebx],eax
c0022043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022047:	89 06                	mov    DWORD PTR [esi],eax
c0022049:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022050:	b0 01                	mov    al,0x1
c0022052:	eb 19                	jmp    c002206d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022054:	50                   	push   eax
c0022055:	55                   	push   ebp
c0022056:	57                   	push   edi
c0022057:	56                   	push   esi
c0022058:	53                   	push   ebx
c0022059:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002205d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022065:	e8 aa fd ff ff       	call   c0021e14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002206a:	83 c4 20             	add    esp,0x20
c002206d:	83 c4 1c             	add    esp,0x1c
c0022070:	5b                   	pop    ebx
c0022071:	5e                   	pop    esi
c0022072:	5f                   	pop    edi
c0022073:	5d                   	pop    ebp
c0022074:	c3                   	ret    
c0022075:	90                   	nop

c0022076 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022076:	57                   	push   edi
c0022077:	56                   	push   esi
c0022078:	53                   	push   ebx
c0022079:	83 ec 10             	sub    esp,0x10
c002207c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022080:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022084:	85 ff                	test   edi,edi
c0022086:	0f 84 9d 00 00 00    	je     c0022129 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002208c:	85 f6                	test   esi,esi
c002208e:	0f 84 95 00 00 00    	je     c0022129 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022094:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022099:	74 17                	je     c00220b2 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002209b:	83 ec 0c             	sub    esp,0xc
c002209e:	68 57 ca 02 c0       	push   0xc002ca57
c00220a3:	e8 90 0f ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00220a8:	83 c4 10             	add    esp,0x10
c00220ab:	b8 03 00 00 00       	mov    eax,0x3
c00220b0:	eb 7c                	jmp    c002212e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220b2:	83 ec 0c             	sub    esp,0xc
c00220b5:	6a 1c                	push   0x1c
c00220b7:	e8 87 d7 fe ff       	call   c000f843 <malloc>
c00220bc:	89 07                	mov    DWORD PTR [edi],eax
c00220be:	89 c3                	mov    ebx,eax
c00220c0:	58                   	pop    eax
c00220c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220c5:	50                   	push   eax
c00220c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220c9:	50                   	push   eax
c00220ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220ce:	50                   	push   eax
c00220cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d3:	50                   	push   eax
c00220d4:	56                   	push   esi
c00220d5:	e8 0d ff ff ff       	call   c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220da:	83 c4 20             	add    esp,0x20
c00220dd:	84 c0                	test   al,al
c00220df:	74 07                	je     c00220e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00220e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220e6:	74 0b                	je     c00220f3 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220e8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220ec:	b8 01 00 00 00       	mov    eax,0x1
c00220f1:	eb 3b                	jmp    c002212e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220fb:	89 03                	mov    DWORD PTR [ebx],eax
c00220fd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022108:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002210f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022116:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022119:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022120:	8a 06                	mov    al,BYTE PTR [esi]
c0022122:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022125:	31 c0                	xor    eax,eax
c0022127:	eb 05                	jmp    c002212e <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022129:	b8 04 00 00 00       	mov    eax,0x4
c002212e:	83 c4 10             	add    esp,0x10
c0022131:	5b                   	pop    ebx
c0022132:	5e                   	pop    esi
c0022133:	5f                   	pop    edi
c0022134:	c3                   	ret    
c0022135:	90                   	nop

c0022136 <ISO9660::exists(char const*)>:
c0022136:	83 ec 28             	sub    esp,0x28
c0022139:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002213d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022141:	52                   	push   edx
c0022142:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022145:	52                   	push   edx
c0022146:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002214a:	52                   	push   edx
c002214b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002214f:	52                   	push   edx
c0022150:	50                   	push   eax
c0022151:	e8 91 fe ff ff       	call   c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022156:	83 c4 3c             	add    esp,0x3c
c0022159:	c3                   	ret    

c002215a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002215a:	56                   	push   esi
c002215b:	53                   	push   ebx
c002215c:	83 ec 14             	sub    esp,0x14
c002215f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022163:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022167:	85 db                	test   ebx,ebx
c0022169:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002216d:	0f 94 c2             	sete   dl
c0022170:	85 f6                	test   esi,esi
c0022172:	0f 94 c0             	sete   al
c0022175:	08 c2                	or     dl,al
c0022177:	75 68                	jne    c00221e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022179:	85 c9                	test   ecx,ecx
c002217b:	74 64                	je     c00221e1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022183:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022187:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002218d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022194:	50                   	push   eax
c0022195:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022198:	50                   	push   eax
c0022199:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002219d:	50                   	push   eax
c002219e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221a2:	50                   	push   eax
c00221a3:	51                   	push   ecx
c00221a4:	e8 3e fe ff ff       	call   c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221a9:	83 c4 20             	add    esp,0x20
c00221ac:	ba 01 00 00 00       	mov    edx,0x1
c00221b1:	84 c0                	test   al,al
c00221b3:	74 31                	je     c00221e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221c0:	89 03                	mov    DWORD PTR [ebx],eax
c00221c2:	ba 00 00 00 00       	mov    edx,0x0
c00221c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221cb:	85 c0                	test   eax,eax
c00221cd:	0f 95 06             	setne  BYTE PTR [esi]
c00221d0:	74 14                	je     c00221e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221d2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221d8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221df:	eb 05                	jmp    c00221e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221e1:	ba 04 00 00 00       	mov    edx,0x4
c00221e6:	83 c4 14             	add    esp,0x14
c00221e9:	89 d0                	mov    eax,edx
c00221eb:	5b                   	pop    ebx
c00221ec:	5e                   	pop    esi
c00221ed:	c3                   	ret    

c00221ee <ISO9660::openDir(char const*, void**)>:
c00221ee:	57                   	push   edi
c00221ef:	56                   	push   esi
c00221f0:	53                   	push   ebx
c00221f1:	83 ec 10             	sub    esp,0x10
c00221f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221f8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221fc:	85 ff                	test   edi,edi
c00221fe:	0f 84 95 00 00 00    	je     c0022299 <ISO9660::openDir(char const*, void**)+0xab>
c0022204:	85 f6                	test   esi,esi
c0022206:	0f 84 8d 00 00 00    	je     c0022299 <ISO9660::openDir(char const*, void**)+0xab>
c002220c:	83 ec 0c             	sub    esp,0xc
c002220f:	6a 1c                	push   0x1c
c0022211:	e8 2d d6 fe ff       	call   c000f843 <malloc>
c0022216:	89 07                	mov    DWORD PTR [edi],eax
c0022218:	89 c3                	mov    ebx,eax
c002221a:	59                   	pop    ecx
c002221b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002221f:	50                   	push   eax
c0022220:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022223:	50                   	push   eax
c0022224:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022228:	50                   	push   eax
c0022229:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002222d:	50                   	push   eax
c002222e:	56                   	push   esi
c002222f:	e8 b3 fd ff ff       	call   c0021fe7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022234:	83 c4 20             	add    esp,0x20
c0022237:	84 c0                	test   al,al
c0022239:	74 07                	je     c0022242 <ISO9660::openDir(char const*, void**)+0x54>
c002223b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022240:	75 21                	jne    c0022263 <ISO9660::openDir(char const*, void**)+0x75>
c0022242:	0f b6 c0             	movzx  eax,al
c0022245:	52                   	push   edx
c0022246:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002224a:	50                   	push   eax
c002224b:	68 7d ca 02 c0       	push   0xc002ca7d
c0022250:	e8 e3 0d ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0022255:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	b8 01 00 00 00       	mov    eax,0x1
c0022261:	eb 3b                	jmp    c002229e <ISO9660::openDir(char const*, void**)+0xb0>
c0022263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022267:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002226b:	89 03                	mov    DWORD PTR [ebx],eax
c002226d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022278:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002227f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022286:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022289:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022290:	8a 06                	mov    al,BYTE PTR [esi]
c0022292:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022295:	31 c0                	xor    eax,eax
c0022297:	eb 05                	jmp    c002229e <ISO9660::openDir(char const*, void**)+0xb0>
c0022299:	b8 04 00 00 00       	mov    eax,0x4
c002229e:	83 c4 10             	add    esp,0x10
c00222a1:	5b                   	pop    ebx
c00222a2:	5e                   	pop    esi
c00222a3:	5f                   	pop    edi
c00222a4:	c3                   	ret    
c00222a5:	90                   	nop

c00222a6 <ISO9660::ISO9660()>:
c00222a6:	83 ec 0c             	sub    esp,0xc
c00222a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ad:	83 ec 0c             	sub    esp,0xc
c00222b0:	50                   	push   eax
c00222b1:	e8 86 10 ff ff       	call   c001333c <Filesystem::Filesystem()>
c00222b6:	83 c4 10             	add    esp,0x10
c00222b9:	ba a0 ca 02 c0       	mov    edx,0xc002caa0
c00222be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c2:	89 10                	mov    DWORD PTR [eax],edx
c00222c4:	90                   	nop
c00222c5:	83 c4 0c             	add    esp,0xc
c00222c8:	c3                   	ret    
c00222c9:	90                   	nop

c00222ca <SoundChannel::~SoundChannel()>:
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	50                   	push   eax
c00222d8:	e8 76 d5 fe ff       	call   c000f853 <free>
c00222dd:	83 c4 10             	add    esp,0x10
c00222e0:	90                   	nop
c00222e1:	83 c4 0c             	add    esp,0xc
c00222e4:	c3                   	ret    
c00222e5:	90                   	nop

c00222e6 <SoundChannel::setSpeed(float)>:
c00222e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222f1:	c3                   	ret    

c00222f2 <SoundChannel::getSpeed()>:
c00222f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222f9:	c3                   	ret    

c00222fa <SoundChannel::setVolume(int)>:
c00222fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222fe:	83 f8 64             	cmp    eax,0x64
c0022301:	7e 05                	jle    c0022308 <SoundChannel::setVolume(int)+0xe>
c0022303:	b8 64 00 00 00       	mov    eax,0x64
c0022308:	85 c0                	test   eax,eax
c002230a:	79 02                	jns    c002230e <SoundChannel::setVolume(int)+0x14>
c002230c:	31 c0                	xor    eax,eax
c002230e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022312:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022315:	c3                   	ret    

c0022316 <SoundChannel::getVolume()>:
c0022316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002231d:	c3                   	ret    

c002231e <SoundChannel::pause()>:
c002231e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022322:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022326:	c3                   	ret    
c0022327:	90                   	nop

c0022328 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022328:	83 ec 1c             	sub    esp,0x1c
c002232b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002232f:	e8 ea ff ff ff       	call   c002231e <SoundChannel::pause()>
c0022334:	83 c4 04             	add    esp,0x4
c0022337:	6a 50                	push   0x50
c0022339:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002233d:	e8 b8 ff ff ff       	call   c00222fa <SoundChannel::setVolume(int)>
c0022342:	83 c4 08             	add    esp,0x8
c0022345:	a1 18 cb 02 c0       	mov    eax,ds:0xc002cb18
c002234a:	50                   	push   eax
c002234b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002234f:	e8 92 ff ff ff       	call   c00222e6 <SoundChannel::setSpeed(float)>
c0022354:	83 c4 08             	add    esp,0x8
c0022357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002235f:	89 10                	mov    DWORD PTR [eax],edx
c0022361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022365:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022369:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002236c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022370:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022374:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022377:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002237c:	75 23                	jne    c00223a1 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002237e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022382:	8b 10                	mov    edx,DWORD PTR [eax]
c0022384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002238b:	0f af c2             	imul   eax,edx
c002238e:	85 c0                	test   eax,eax
c0022390:	79 03                	jns    c0022395 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022392:	83 c0 03             	add    eax,0x3
c0022395:	c1 f8 02             	sar    eax,0x2
c0022398:	05 a0 0f 00 00       	add    eax,0xfa0
c002239d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00223a9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00223ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00223b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223c9:	c1 e0 02             	shl    eax,0x2
c00223cc:	83 ec 0c             	sub    esp,0xc
c00223cf:	50                   	push   eax
c00223d0:	e8 6e d4 fe ff       	call   c000f843 <malloc>
c00223d5:	83 c4 10             	add    esp,0x10
c00223d8:	89 c2                	mov    edx,eax
c00223da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00223e1:	83 ec 04             	sub    esp,0x4
c00223e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223e8:	50                   	push   eax
c00223e9:	6a 01                	push   0x1
c00223eb:	6a 04                	push   0x4
c00223ed:	e8 ad 67 fe ff       	call   c0008b9f <src_new>
c00223f2:	83 c4 10             	add    esp,0x10
c00223f5:	89 c2                	mov    edx,eax
c00223f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022402:	85 c0                	test   eax,eax
c0022404:	74 10                	je     c0022416 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022406:	83 ec 0c             	sub    esp,0xc
c0022409:	68 fc ca 02 c0       	push   0xc002cafc
c002240e:	e8 d2 82 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0022413:	83 c4 10             	add    esp,0x10
c0022416:	a0 e0 28 03 c0       	mov    al,ds:0xc00328e0
c002241b:	83 f0 01             	xor    eax,0x1
c002241e:	84 c0                	test   al,al
c0022420:	74 57                	je     c0022479 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022422:	a1 1c cb 02 c0       	mov    eax,ds:0xc002cb1c
c0022427:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002242b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022433:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002243b:	7f 35                	jg     c0022472 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c002243d:	83 ec 0c             	sub    esp,0xc
c0022440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022444:	e8 9e 4f 00 00       	call   c00273e7 <__floatsisf>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	8b 15 1c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb1c
c0022452:	83 ec 08             	sub    esp,0x8
c0022455:	52                   	push   edx
c0022456:	50                   	push   eax
c0022457:	e8 9d 4b 00 00       	call   c0026ff9 <__mulsf3>
c002245c:	83 c4 10             	add    esp,0x10
c002245f:	89 c2                	mov    edx,eax
c0022461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022465:	89 14 85 e0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb20],edx
c002246c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022470:	eb c1                	jmp    c0022433 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022472:	c6 05 e0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328e0,0x1
c0022479:	90                   	nop
c002247a:	83 c4 1c             	add    esp,0x1c
c002247d:	c3                   	ret    

c002247e <SoundChannel::play()>:
c002247e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022482:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022486:	c3                   	ret    
c0022487:	90                   	nop

c0022488 <SoundChannel::paused()>:
c0022488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002248f:	c3                   	ret    

c0022490 <SoundChannel::getSampleRate()>:
c0022490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022494:	8b 00                	mov    eax,DWORD PTR [eax]
c0022496:	c3                   	ret    
c0022497:	90                   	nop

c0022498 <SoundChannel::getBits()>:
c0022498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002249c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002249f:	c3                   	ret    

c00224a0 <SoundChannel::getBufferUsed()>:
c00224a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224a4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00224a7:	c3                   	ret    

c00224a8 <SoundChannel::getBufferSize()>:
c00224a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224af:	c3                   	ret    

c00224b0 <SoundChannel::unbuffer(float*, int, int)>:
c00224b0:	56                   	push   esi
c00224b1:	53                   	push   ebx
c00224b2:	83 ec 40             	sub    esp,0x40
c00224b5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00224b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00224bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00224c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00224c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00224cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00224d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00224db:	e8 07 4f 00 00       	call   c00273e7 <__floatsisf>
c00224e0:	5a                   	pop    edx
c00224e1:	89 c6                	mov    esi,eax
c00224e3:	ff 33                	push   DWORD PTR [ebx]
c00224e5:	e8 fd 4e 00 00       	call   c00273e7 <__floatsisf>
c00224ea:	59                   	pop    ecx
c00224eb:	5a                   	pop    edx
c00224ec:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224ef:	50                   	push   eax
c00224f0:	e8 04 4b 00 00       	call   c0026ff9 <__mulsf3>
c00224f5:	59                   	pop    ecx
c00224f6:	5a                   	pop    edx
c00224f7:	50                   	push   eax
c00224f8:	56                   	push   esi
c00224f9:	e8 be 4c 00 00       	call   c00271bc <__divsf3>
c00224fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0022501:	e8 b1 61 00 00       	call   c00286b7 <__extendsfdf2>
c0022506:	59                   	pop    ecx
c0022507:	5e                   	pop    esi
c0022508:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002250c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022510:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022518:	8d 44 24 14          	lea    eax,[esp+0x14]
c002251c:	50                   	push   eax
c002251d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022520:	e8 6f 62 fe ff       	call   c0008794 <src_process>
c0022525:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022529:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002252c:	83 c4 0c             	add    esp,0xc
c002252f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022532:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022535:	29 d0                	sub    eax,edx
c0022537:	c1 e0 02             	shl    eax,0x2
c002253a:	50                   	push   eax
c002253b:	8d 04 91             	lea    eax,[ecx+edx*4]
c002253e:	50                   	push   eax
c002253f:	51                   	push   ecx
c0022540:	e8 37 e1 fd ff       	call   c000067c <memmove>
c0022545:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022549:	83 c4 44             	add    esp,0x44
c002254c:	5b                   	pop    ebx
c002254d:	5e                   	pop    esi
c002254e:	c3                   	ret    
c002254f:	90                   	nop

c0022550 <SoundChannel::buffer8(unsigned char*, int)>:
c0022550:	55                   	push   ebp
c0022551:	57                   	push   edi
c0022552:	56                   	push   esi
c0022553:	53                   	push   ebx
c0022554:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022558:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002255c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002255f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022563:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022566:	74 7a                	je     c00225e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022568:	85 ff                	test   edi,edi
c002256a:	7e 76                	jle    c00225e2 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002256c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022570:	8d 70 01             	lea    esi,[eax+0x1]
c0022573:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022576:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022579:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c0022580:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022583:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022586:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022589:	74 5e                	je     c00225e9 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002258b:	83 ff 01             	cmp    edi,0x1
c002258e:	74 4b                	je     c00225db <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022590:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022594:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022597:	8d 70 01             	lea    esi,[eax+0x1]
c002259a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002259d:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c00225a4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00225a7:	b8 02 00 00 00       	mov    eax,0x2
c00225ac:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225af:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225b2:	75 23                	jne    c00225d7 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00225b4:	eb 27                	jmp    c00225dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225b6:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00225bb:	8d 71 01             	lea    esi,[ecx+0x1]
c00225be:	40                   	inc    eax
c00225bf:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225c2:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00225c5:	8b 1c 9d e0 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb20]
c00225cc:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00225cf:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225d2:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225d5:	74 06                	je     c00225dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225d7:	39 c7                	cmp    edi,eax
c00225d9:	75 db                	jne    c00225b6 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00225db:	89 f8                	mov    eax,edi
c00225dd:	5b                   	pop    ebx
c00225de:	5e                   	pop    esi
c00225df:	5f                   	pop    edi
c00225e0:	5d                   	pop    ebp
c00225e1:	c3                   	ret    
c00225e2:	5b                   	pop    ebx
c00225e3:	31 c0                	xor    eax,eax
c00225e5:	5e                   	pop    esi
c00225e6:	5f                   	pop    edi
c00225e7:	5d                   	pop    ebp
c00225e8:	c3                   	ret    
c00225e9:	b8 01 00 00 00       	mov    eax,0x1
c00225ee:	eb ed                	jmp    c00225dd <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225f0 <SoundDevice::SoundDevice(char const*)>:
c00225f0:	83 ec 1c             	sub    esp,0x1c
c00225f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f7:	83 ec 08             	sub    esp,0x8
c00225fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225fe:	50                   	push   eax
c00225ff:	e8 4a 20 ff ff       	call   c001464e <Device::Device(char const*)>
c0022604:	83 c4 10             	add    esp,0x10
c0022607:	ba 28 cb 02 c0       	mov    edx,0xc002cb28
c002260c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022610:	89 10                	mov    DWORD PTR [eax],edx
c0022612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022616:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022624:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002262e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022636:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002263b:	7f 19                	jg     c0022656 <SoundDevice::SoundDevice(char const*)+0x66>
c002263d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022641:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022645:	83 c2 54             	add    edx,0x54
c0022648:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022650:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022654:	eb e0                	jmp    c0022636 <SoundDevice::SoundDevice(char const*)+0x46>
c0022656:	90                   	nop
c0022657:	83 c4 1c             	add    esp,0x1c
c002265a:	c3                   	ret    
c002265b:	90                   	nop

c002265c <SoundDevice::~SoundDevice()>:
c002265c:	53                   	push   ebx
c002265d:	83 ec 18             	sub    esp,0x18
c0022660:	ba 28 cb 02 c0       	mov    edx,0xc002cb28
c0022665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022669:	89 10                	mov    DWORD PTR [eax],edx
c002266b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022673:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022678:	7f 46                	jg     c00226c0 <SoundDevice::~SoundDevice()+0x64>
c002267a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002267e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022682:	83 c2 54             	add    edx,0x54
c0022685:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022689:	85 c0                	test   eax,eax
c002268b:	74 2d                	je     c00226ba <SoundDevice::~SoundDevice()+0x5e>
c002268d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022691:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022695:	83 c2 54             	add    edx,0x54
c0022698:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002269c:	85 db                	test   ebx,ebx
c002269e:	74 1a                	je     c00226ba <SoundDevice::~SoundDevice()+0x5e>
c00226a0:	83 ec 0c             	sub    esp,0xc
c00226a3:	53                   	push   ebx
c00226a4:	e8 21 fc ff ff       	call   c00222ca <SoundChannel::~SoundChannel()>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	83 ec 08             	sub    esp,0x8
c00226af:	6a 2c                	push   0x2c
c00226b1:	53                   	push   ebx
c00226b2:	e8 a1 08 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00226b7:	83 c4 10             	add    esp,0x10
c00226ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226be:	eb b3                	jmp    c0022673 <SoundDevice::~SoundDevice()+0x17>
c00226c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226c4:	83 ec 0c             	sub    esp,0xc
c00226c7:	50                   	push   eax
c00226c8:	e8 63 1c ff ff       	call   c0014330 <Device::~Device()>
c00226cd:	83 c4 10             	add    esp,0x10
c00226d0:	90                   	nop
c00226d1:	83 c4 18             	add    esp,0x18
c00226d4:	5b                   	pop    ebx
c00226d5:	c3                   	ret    

c00226d6 <SoundDevice::~SoundDevice()>:
c00226d6:	83 ec 0c             	sub    esp,0xc
c00226d9:	83 ec 0c             	sub    esp,0xc
c00226dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226e0:	e8 77 ff ff ff       	call   c002265c <SoundDevice::~SoundDevice()>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	83 ec 08             	sub    esp,0x8
c00226eb:	68 e4 01 00 00       	push   0x1e4
c00226f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226f4:	e8 5f 08 ff ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00226f9:	83 c4 10             	add    esp,0x10
c00226fc:	83 c4 0c             	add    esp,0xc
c00226ff:	c3                   	ret    

c0022700 <SoundDevice::getFreeChannelNum()>:
c0022700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022704:	31 c0                	xor    eax,eax
c0022706:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002270e:	74 09                	je     c0022719 <SoundDevice::getFreeChannelNum()+0x19>
c0022710:	40                   	inc    eax
c0022711:	83 f8 20             	cmp    eax,0x20
c0022714:	75 f0                	jne    c0022706 <SoundDevice::getFreeChannelNum()+0x6>
c0022716:	83 c8 ff             	or     eax,0xffffffff
c0022719:	c3                   	ret    

c002271a <SoundDevice::addChannel(SoundChannel*)>:
c002271a:	56                   	push   esi
c002271b:	53                   	push   ebx
c002271c:	51                   	push   ecx
c002271d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022721:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022725:	53                   	push   ebx
c0022726:	e8 d5 ff ff ff       	call   c0022700 <SoundDevice::getFreeChannelNum()>
c002272b:	5a                   	pop    edx
c002272c:	83 f8 ff             	cmp    eax,0xffffffff
c002272f:	74 51                	je     c0022782 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022731:	85 f6                	test   esi,esi
c0022733:	74 4d                	je     c0022782 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022735:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002273c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022743:	75 30                	jne    c0022775 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022745:	83 ec 0c             	sub    esp,0xc
c0022748:	56                   	push   esi
c0022749:	e8 42 fd ff ff       	call   c0022490 <SoundChannel::getSampleRate()>
c002274e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022754:	89 34 24             	mov    DWORD PTR [esp],esi
c0022757:	e8 3c fd ff ff       	call   c0022498 <SoundChannel::getBits()>
c002275c:	83 c4 0c             	add    esp,0xc
c002275f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022765:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022767:	50                   	push   eax
c0022768:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002276e:	53                   	push   ebx
c002276f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022772:	83 c4 10             	add    esp,0x10
c0022775:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002277b:	b8 01 00 00 00       	mov    eax,0x1
c0022780:	eb 03                	jmp    c0022785 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022782:	83 c8 ff             	or     eax,0xffffffff
c0022785:	5a                   	pop    edx
c0022786:	5b                   	pop    ebx
c0022787:	5e                   	pop    esi
c0022788:	c3                   	ret    
c0022789:	90                   	nop

c002278a <SoundDevice::removeChannel(int)>:
c002278a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002278e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022792:	83 fa 1f             	cmp    edx,0x1f
c0022795:	77 23                	ja     c00227ba <SoundDevice::removeChannel(int)+0x30>
c0022797:	8d 14 90             	lea    edx,[eax+edx*4]
c002279a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00227a1:	74 17                	je     c00227ba <SoundDevice::removeChannel(int)+0x30>
c00227a3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00227ad:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00227b3:	75 05                	jne    c00227ba <SoundDevice::removeChannel(int)+0x30>
c00227b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00227b7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00227ba:	c3                   	ret    
c00227bb:	90                   	nop

c00227bc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227bc:	57                   	push   edi
c00227bd:	56                   	push   esi
c00227be:	53                   	push   ebx
c00227bf:	31 db                	xor    ebx,ebx
c00227c1:	83 ec 10             	sub    esp,0x10
c00227c4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227c8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227cc:	0f 8d cb 00 00 00    	jge    c002289d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227d2:	83 ec 0c             	sub    esp,0xc
c00227d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227d9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227dc:	e8 d6 5e 00 00       	call   c00286b7 <__extendsfdf2>
c00227e1:	83 c4 10             	add    esp,0x10
c00227e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227ec:	68 00 00 f0 3f       	push   0x3ff00000
c00227f1:	6a 00                	push   0x0
c00227f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fb:	e8 43 4e 00 00       	call   c0027643 <__adddf3>
c0022800:	83 c4 10             	add    esp,0x10
c0022803:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022807:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002280b:	68 00 00 e0 3f       	push   0x3fe00000
c0022810:	6a 00                	push   0x0
c0022812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281a:	e8 a1 54 00 00       	call   c0027cc0 <__muldf3>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022826:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002282a:	68 00 00 60 40       	push   0x40600000
c002282f:	6a 00                	push   0x0
c0022831:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022835:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022839:	e8 82 54 00 00       	call   c0027cc0 <__muldf3>
c002283e:	59                   	pop    ecx
c002283f:	5f                   	pop    edi
c0022840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022844:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002284c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022850:	e8 3e 5d 00 00       	call   c0028593 <__truncdfsf2>
c0022855:	5a                   	pop    edx
c0022856:	89 c7                	mov    edi,eax
c0022858:	59                   	pop    ecx
c0022859:	68 00 00 fe 42       	push   0x42fe0000
c002285e:	50                   	push   eax
c002285f:	e8 d9 4d 00 00       	call   c002763d <__gesf2>
c0022864:	83 c4 10             	add    esp,0x10
c0022867:	85 c0                	test   eax,eax
c0022869:	78 06                	js     c0022871 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002286b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002286f:	eb 26                	jmp    c0022897 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022871:	50                   	push   eax
c0022872:	50                   	push   eax
c0022873:	6a 00                	push   0x0
c0022875:	57                   	push   edi
c0022876:	e8 c6 4d 00 00       	call   c0027641 <__lesf2>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	85 c0                	test   eax,eax
c0022880:	7f 06                	jg     c0022888 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022882:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022886:	eb 0f                	jmp    c0022897 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022888:	83 ec 0c             	sub    esp,0xc
c002288b:	57                   	push   edi
c002288c:	e8 bb 5e 00 00       	call   c002874c <lrintf>
c0022891:	83 c4 10             	add    esp,0x10
c0022894:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022897:	43                   	inc    ebx
c0022898:	e9 2b ff ff ff       	jmp    c00227c8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002289d:	83 c4 10             	add    esp,0x10
c00228a0:	5b                   	pop    ebx
c00228a1:	5e                   	pop    esi
c00228a2:	5f                   	pop    edi
c00228a3:	c3                   	ret    

c00228a4 <SoundDevice::getAudio(int, float*, float*)>:
c00228a4:	55                   	push   ebp
c00228a5:	57                   	push   edi
c00228a6:	56                   	push   esi
c00228a7:	53                   	push   ebx
c00228a8:	31 db                	xor    ebx,ebx
c00228aa:	83 ec 20             	sub    esp,0x20
c00228ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00228b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00228b5:	c1 e0 02             	shl    eax,0x2
c00228b8:	50                   	push   eax
c00228b9:	6a 00                	push   0x0
c00228bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228bf:	e8 b4 de fd ff       	call   c0000778 <memset>
c00228c4:	83 c4 10             	add    esp,0x10
c00228c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00228cb:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00228d2:	85 c0                	test   eax,eax
c00228d4:	0f 84 d7 00 00 00    	je     c00229b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228da:	83 ec 0c             	sub    esp,0xc
c00228dd:	50                   	push   eax
c00228de:	e8 a5 fb ff ff       	call   c0022488 <SoundChannel::paused()>
c00228e3:	83 c4 10             	add    esp,0x10
c00228e6:	84 c0                	test   al,al
c00228e8:	0f 85 c3 00 00 00    	jne    c00229b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ee:	83 ec 0c             	sub    esp,0xc
c00228f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228f8:	e8 19 fa ff ff       	call   c0022316 <SoundChannel::getVolume()>
c00228fd:	83 c4 10             	add    esp,0x10
c0022900:	85 c0                	test   eax,eax
c0022902:	0f 84 a9 00 00 00    	je     c00229b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022908:	83 ec 0c             	sub    esp,0xc
c002290b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022912:	e8 ff f9 ff ff       	call   c0022316 <SoundChannel::getVolume()>
c0022917:	83 ec 0c             	sub    esp,0xc
c002291a:	50                   	push   eax
c002291b:	e8 c7 4a 00 00       	call   c00273e7 <__floatsisf>
c0022920:	59                   	pop    ecx
c0022921:	5d                   	pop    ebp
c0022922:	31 ed                	xor    ebp,ebp
c0022924:	68 00 00 c8 42       	push   0x42c80000
c0022929:	50                   	push   eax
c002292a:	e8 8d 48 00 00       	call   c00271bc <__divsf3>
c002292f:	83 c4 10             	add    esp,0x10
c0022932:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022936:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002293a:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022940:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022944:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002294b:	e8 60 fb ff ff       	call   c00224b0 <SoundChannel::unbuffer(float*, int, int)>
c0022950:	83 c4 20             	add    esp,0x20
c0022953:	89 c1                	mov    ecx,eax
c0022955:	39 cd                	cmp    ebp,ecx
c0022957:	7d 52                	jge    c00229ab <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022959:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002295d:	50                   	push   eax
c002295e:	50                   	push   eax
c002295f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022963:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022966:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002296a:	e8 8a 46 00 00       	call   c0026ff9 <__mulsf3>
c002296f:	5a                   	pop    edx
c0022970:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022974:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002297a:	e8 68 4a 00 00       	call   c00273e7 <__floatsisf>
c002297f:	59                   	pop    ecx
c0022980:	5a                   	pop    edx
c0022981:	50                   	push   eax
c0022982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022986:	e8 31 48 00 00       	call   c00271bc <__divsf3>
c002298b:	59                   	pop    ecx
c002298c:	5a                   	pop    edx
c002298d:	50                   	push   eax
c002298e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022992:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022995:	e8 3c 43 00 00       	call   c0026cd6 <__addsf3>
c002299a:	83 c4 10             	add    esp,0x10
c002299d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00229a5:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00229a8:	45                   	inc    ebp
c00229a9:	eb aa                	jmp    c0022955 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00229ab:	39 cf                	cmp    edi,ecx
c00229ad:	7e 02                	jle    c00229b1 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00229af:	89 cf                	mov    edi,ecx
c00229b1:	43                   	inc    ebx
c00229b2:	83 fb 20             	cmp    ebx,0x20
c00229b5:	0f 85 10 ff ff ff    	jne    c00228cb <SoundDevice::getAudio(int, float*, float*)+0x27>
c00229bb:	83 c4 1c             	add    esp,0x1c
c00229be:	89 f8                	mov    eax,edi
c00229c0:	5b                   	pop    ebx
c00229c1:	5e                   	pop    esi
c00229c2:	5f                   	pop    edi
c00229c3:	5d                   	pop    ebp
c00229c4:	c3                   	ret    
c00229c5:	90                   	nop

c00229c6 <PCI::open(int, int, void*)>:
c00229c6:	83 ec 18             	sub    esp,0x18
c00229c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00229cf:	50                   	push   eax
c00229d0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229d3:	31 c0                	xor    eax,eax
c00229d5:	83 c4 1c             	add    esp,0x1c
c00229d8:	c3                   	ret    
c00229d9:	90                   	nop

c00229da <PCI::close(int, int, void*)>:
c00229da:	31 c0                	xor    eax,eax
c00229dc:	c3                   	ret    
c00229dd:	90                   	nop

c00229de <PCI::PCI()>:
c00229de:	83 ec 0c             	sub    esp,0xc
c00229e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e5:	83 ec 08             	sub    esp,0x8
c00229e8:	68 58 cb 02 c0       	push   0xc002cb58
c00229ed:	50                   	push   eax
c00229ee:	e8 df 12 ff ff       	call   c0013cd2 <Bus::Bus(char const*)>
c00229f3:	83 c4 10             	add    esp,0x10
c00229f6:	ba c4 cb 02 c0       	mov    edx,0xc002cbc4
c00229fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ff:	89 10                	mov    DWORD PTR [eax],edx
c0022a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a0b:	0f b6 d0             	movzx  edx,al
c0022a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a12:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a23:	0f b6 d0             	movzx  edx,al
c0022a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a39:	8d 50 01             	lea    edx,[eax+0x1]
c0022a3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a40:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a46:	0f b6 d0             	movzx  edx,al
c0022a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a51:	83 c9 c0             	or     ecx,0xffffffc0
c0022a54:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a58:	90                   	nop
c0022a59:	83 c4 0c             	add    esp,0xc
c0022a5c:	c3                   	ret    
c0022a5d:	90                   	nop

c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a67:	89 ca                	mov    edx,ecx
c0022a69:	c1 e0 10             	shl    eax,0x10
c0022a6c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a72:	09 d0                	or     eax,edx
c0022a74:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a79:	c1 e2 08             	shl    edx,0x8
c0022a7c:	09 d0                	or     eax,edx
c0022a7e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a83:	c1 e2 0b             	shl    edx,0xb
c0022a86:	09 d0                	or     eax,edx
c0022a88:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a8d:	0d 00 00 00 80       	or     eax,0x80000000
c0022a92:	ef                   	out    dx,eax
c0022a93:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a98:	ed                   	in     eax,dx
c0022a99:	83 e1 02             	and    ecx,0x2
c0022a9c:	0f b6 c9             	movzx  ecx,cl
c0022a9f:	c1 e1 03             	shl    ecx,0x3
c0022aa2:	d3 e8                	shr    eax,cl
c0022aa4:	c3                   	ret    
c0022aa5:	90                   	nop

c0022aa6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022aa6:	6a 00                	push   0x0
c0022aa8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aad:	50                   	push   eax
c0022aae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab3:	50                   	push   eax
c0022ab4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab9:	50                   	push   eax
c0022aba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022abe:	e8 9b ff ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac3:	83 c4 14             	add    esp,0x14
c0022ac6:	c3                   	ret    
c0022ac7:	90                   	nop

c0022ac8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022ac8:	6a 0e                	push   0xe
c0022aca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acf:	50                   	push   eax
c0022ad0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad5:	50                   	push   eax
c0022ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adb:	50                   	push   eax
c0022adc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ae0:	e8 79 ff ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ae5:	83 c4 14             	add    esp,0x14
c0022ae8:	0f b6 c0             	movzx  eax,al
c0022aeb:	c3                   	ret    

c0022aec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aec:	55                   	push   ebp
c0022aed:	57                   	push   edi
c0022aee:	56                   	push   esi
c0022aef:	53                   	push   ebx
c0022af0:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022af5:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022afa:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022aff:	6a 0a                	push   0xa
c0022b01:	56                   	push   esi
c0022b02:	55                   	push   ebp
c0022b03:	57                   	push   edi
c0022b04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022b08:	e8 51 ff ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b0d:	6a 0a                	push   0xa
c0022b0f:	89 c3                	mov    ebx,eax
c0022b11:	56                   	push   esi
c0022b12:	0f b6 db             	movzx  ebx,bl
c0022b15:	55                   	push   ebp
c0022b16:	57                   	push   edi
c0022b17:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b1b:	e8 3e ff ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b20:	83 c4 28             	add    esp,0x28
c0022b23:	25 00 ff 00 00       	and    eax,0xff00
c0022b28:	09 d8                	or     eax,ebx
c0022b2a:	5b                   	pop    ebx
c0022b2b:	5e                   	pop    esi
c0022b2c:	5f                   	pop    edi
c0022b2d:	5d                   	pop    ebp
c0022b2e:	c3                   	ret    
c0022b2f:	90                   	nop

c0022b30 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b30:	6a 08                	push   0x8
c0022b32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b37:	50                   	push   eax
c0022b38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3d:	50                   	push   eax
c0022b3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b43:	50                   	push   eax
c0022b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b48:	e8 11 ff ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4d:	83 c4 14             	add    esp,0x14
c0022b50:	0f b6 c4             	movzx  eax,ah
c0022b53:	c3                   	ret    

c0022b54 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b54:	6a 08                	push   0x8
c0022b56:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5b:	50                   	push   eax
c0022b5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b61:	50                   	push   eax
c0022b62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b67:	50                   	push   eax
c0022b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6c:	e8 ed fe ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b71:	83 c4 14             	add    esp,0x14
c0022b74:	c3                   	ret    
c0022b75:	90                   	nop

c0022b76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b76:	6a 3c                	push   0x3c
c0022b78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b7d:	50                   	push   eax
c0022b7e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b83:	50                   	push   eax
c0022b84:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b89:	50                   	push   eax
c0022b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b8e:	e8 cb fe ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b93:	83 c4 14             	add    esp,0x14
c0022b96:	c3                   	ret    
c0022b97:	90                   	nop

c0022b98 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b98:	6a 18                	push   0x18
c0022b9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b9f:	50                   	push   eax
c0022ba0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba5:	50                   	push   eax
c0022ba6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bab:	50                   	push   eax
c0022bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bb0:	e8 a9 fe ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb5:	83 c4 14             	add    esp,0x14
c0022bb8:	0f b6 c4             	movzx  eax,ah
c0022bbb:	c3                   	ret    

c0022bbc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022bbc:	55                   	push   ebp
c0022bbd:	57                   	push   edi
c0022bbe:	56                   	push   esi
c0022bbf:	53                   	push   ebx
c0022bc0:	50                   	push   eax
c0022bc1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022bc5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022bca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022bcf:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022bd4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bdb:	8d 43 12             	lea    eax,[ebx+0x12]
c0022bde:	83 c3 10             	add    ebx,0x10
c0022be1:	0f b6 c0             	movzx  eax,al
c0022be4:	0f b6 db             	movzx  ebx,bl
c0022be7:	50                   	push   eax
c0022be8:	51                   	push   ecx
c0022be9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bed:	57                   	push   edi
c0022bee:	55                   	push   ebp
c0022bef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bf3:	e8 66 fe ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf8:	53                   	push   ebx
c0022bf9:	89 c6                	mov    esi,eax
c0022bfb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bff:	c1 e6 10             	shl    esi,0x10
c0022c02:	51                   	push   ecx
c0022c03:	57                   	push   edi
c0022c04:	55                   	push   ebp
c0022c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c09:	e8 50 fe ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c0e:	83 c4 2c             	add    esp,0x2c
c0022c11:	0f b7 c0             	movzx  eax,ax
c0022c14:	5b                   	pop    ebx
c0022c15:	09 f0                	or     eax,esi
c0022c17:	5e                   	pop    esi
c0022c18:	5f                   	pop    edi
c0022c19:	5d                   	pop    ebp
c0022c1a:	c3                   	ret    
c0022c1b:	90                   	nop

c0022c1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c1c:	53                   	push   ebx
c0022c1d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c22:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c2b:	c1 e1 10             	shl    ecx,0x10
c0022c2e:	25 fc 00 00 00       	and    eax,0xfc
c0022c33:	09 c1                	or     ecx,eax
c0022c35:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c3a:	c1 e0 08             	shl    eax,0x8
c0022c3d:	09 c1                	or     ecx,eax
c0022c3f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c44:	c1 e0 0b             	shl    eax,0xb
c0022c47:	09 c1                	or     ecx,eax
c0022c49:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c4f:	89 c8                	mov    eax,ecx
c0022c51:	ef                   	out    dx,eax
c0022c52:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c57:	ed                   	in     eax,dx
c0022c58:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c5d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c62:	74 0a                	je     c0022c6e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c64:	0f b7 d8             	movzx  ebx,ax
c0022c67:	89 d0                	mov    eax,edx
c0022c69:	c1 e0 10             	shl    eax,0x10
c0022c6c:	eb 05                	jmp    c0022c73 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c6e:	66 31 c0             	xor    ax,ax
c0022c71:	89 d3                	mov    ebx,edx
c0022c73:	09 c3                	or     ebx,eax
c0022c75:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c7a:	89 c8                	mov    eax,ecx
c0022c7c:	ef                   	out    dx,eax
c0022c7d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c82:	89 d8                	mov    eax,ebx
c0022c84:	ef                   	out    dx,eax
c0022c85:	5b                   	pop    ebx
c0022c86:	c3                   	ret    
c0022c87:	90                   	nop

c0022c88 <PCI::checkBus(unsigned char)>:
c0022c88:	56                   	push   esi
c0022c89:	53                   	push   ebx
c0022c8a:	31 db                	xor    ebx,ebx
c0022c8c:	51                   	push   ecx
c0022c8d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c92:	52                   	push   edx
c0022c93:	53                   	push   ebx
c0022c94:	43                   	inc    ebx
c0022c95:	56                   	push   esi
c0022c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c9a:	e8 2b 03 00 00       	call   c0022fca <PCI::checkDevice(unsigned char, unsigned char)>
c0022c9f:	83 c4 10             	add    esp,0x10
c0022ca2:	83 fb 20             	cmp    ebx,0x20
c0022ca5:	75 eb                	jne    c0022c92 <PCI::checkBus(unsigned char)+0xa>
c0022ca7:	58                   	pop    eax
c0022ca8:	5b                   	pop    ebx
c0022ca9:	5e                   	pop    esi
c0022caa:	c3                   	ret    
c0022cab:	90                   	nop

c0022cac <PCI::foundDevice(PCIDeviceInfo)>:
c0022cac:	55                   	push   ebp
c0022cad:	57                   	push   edi
c0022cae:	56                   	push   esi
c0022caf:	53                   	push   ebx
c0022cb0:	83 ec 1c             	sub    esp,0x1c
c0022cb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022cb7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022cbd:	0f 84 52 01 00 00    	je     c0022e15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cc3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022cc7:	66 81 f9 06 04       	cmp    cx,0x406
c0022ccc:	75 2c                	jne    c0022cfa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cd3:	50                   	push   eax
c0022cd4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cd9:	50                   	push   eax
c0022cda:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022cdf:	50                   	push   eax
c0022ce0:	56                   	push   esi
c0022ce1:	e8 b2 fe ff ff       	call   c0022b98 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ce6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cea:	0f b6 c0             	movzx  eax,al
c0022ced:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cf1:	83 c4 2c             	add    esp,0x2c
c0022cf4:	5b                   	pop    ebx
c0022cf5:	5e                   	pop    esi
c0022cf6:	5f                   	pop    edi
c0022cf7:	5d                   	pop    ebp
c0022cf8:	eb 8e                	jmp    c0022c88 <PCI::checkBus(unsigned char)>
c0022cfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cfe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022d04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d08:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022d0c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022d10:	88 d3                	mov    bl,dl
c0022d12:	85 c0                	test   eax,eax
c0022d14:	74 33                	je     c0022d49 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022d16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022d19:	85 d2                	test   edx,edx
c0022d1b:	74 28                	je     c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d1d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d23:	31 ef                	xor    edi,ebp
c0022d25:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d2b:	75 18                	jne    c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d31:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d37:	75 0c                	jne    c0022d45 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d39:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d3f:	0f 84 d0 00 00 00    	je     c0022e15 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d47:	eb c9                	jmp    c0022d12 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d49:	66 81 f9 01 06       	cmp    cx,0x601
c0022d4e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d52:	75 19                	jne    c0022d6d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d54:	83 ec 0c             	sub    esp,0xc
c0022d57:	68 64 01 00 00       	push   0x164
c0022d5c:	e8 e2 ca fe ff       	call   c000f843 <malloc>
c0022d61:	89 c5                	mov    ebp,eax
c0022d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d66:	e8 95 0f 00 00       	call   c0023d00 <SATABus::SATABus()>
c0022d6b:	eb 1e                	jmp    c0022d8b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d6d:	66 81 f9 01 01       	cmp    cx,0x101
c0022d72:	75 60                	jne    c0022dd4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d74:	83 ec 0c             	sub    esp,0xc
c0022d77:	68 70 02 00 00       	push   0x270
c0022d7c:	e8 c2 ca fe ff       	call   c000f843 <malloc>
c0022d81:	89 c5                	mov    ebp,eax
c0022d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d86:	e8 03 03 00 00       	call   c002308e <IDE::IDE()>
c0022d8b:	58                   	pop    eax
c0022d8c:	5a                   	pop    edx
c0022d8d:	55                   	push   ebp
c0022d8e:	56                   	push   esi
c0022d8f:	e8 ca 16 ff ff       	call   c001445e <Device::addChild(Device*)>
c0022d94:	83 ec 1c             	sub    esp,0x1c
c0022d97:	b9 09 00 00 00       	mov    ecx,0x9
c0022d9c:	fc                   	cld    
c0022d9d:	89 e7                	mov    edi,esp
c0022d9f:	89 de                	mov    esi,ebx
c0022da1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022da3:	55                   	push   ebp
c0022da4:	e8 bf 15 ff ff       	call   c0014368 <Device::preOpenPCI(PCIDeviceInfo)>
c0022da9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022dac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022db0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022db8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022dc0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022dc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dcb:	83 c4 4c             	add    esp,0x4c
c0022dce:	5b                   	pop    ebx
c0022dcf:	5e                   	pop    esi
c0022dd0:	5f                   	pop    edi
c0022dd1:	5d                   	pop    ebp
c0022dd2:	ff e0                	jmp    eax
c0022dd4:	83 ec 0c             	sub    esp,0xc
c0022dd7:	68 58 01 00 00       	push   0x158
c0022ddc:	e8 62 ca fe ff       	call   c000f843 <malloc>
c0022de1:	89 c5                	mov    ebp,eax
c0022de3:	58                   	pop    eax
c0022de4:	5a                   	pop    edx
c0022de5:	68 60 cb 02 c0       	push   0xc002cb60
c0022dea:	55                   	push   ebp
c0022deb:	e8 64 19 ff ff       	call   c0014754 <DriverlessDevice::DriverlessDevice(char const*)>
c0022df0:	59                   	pop    ecx
c0022df1:	5f                   	pop    edi
c0022df2:	55                   	push   ebp
c0022df3:	56                   	push   esi
c0022df4:	e8 65 16 ff ff       	call   c001445e <Device::addChild(Device*)>
c0022df9:	b9 09 00 00 00       	mov    ecx,0x9
c0022dfe:	fc                   	cld    
c0022dff:	89 df                	mov    edi,ebx
c0022e01:	89 de                	mov    esi,ebx
c0022e03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e05:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022e09:	83 c4 2c             	add    esp,0x2c
c0022e0c:	5b                   	pop    ebx
c0022e0d:	5e                   	pop    esi
c0022e0e:	5f                   	pop    edi
c0022e0f:	5d                   	pop    ebp
c0022e10:	e9 53 15 ff ff       	jmp    c0014368 <Device::preOpenPCI(PCIDeviceInfo)>
c0022e15:	83 c4 1c             	add    esp,0x1c
c0022e18:	5b                   	pop    ebx
c0022e19:	5e                   	pop    esi
c0022e1a:	5f                   	pop    edi
c0022e1b:	5d                   	pop    ebp
c0022e1c:	c3                   	ret    
c0022e1d:	90                   	nop

c0022e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e1e:	55                   	push   ebp
c0022e1f:	57                   	push   edi
c0022e20:	56                   	push   esi
c0022e21:	53                   	push   ebx
c0022e22:	83 ec 5c             	sub    esp,0x5c
c0022e25:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e2d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e31:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e3a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e3e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e47:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e4c:	6a 0c                	push   0xc
c0022e4e:	55                   	push   ebp
c0022e4f:	53                   	push   ebx
c0022e50:	57                   	push   edi
c0022e51:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e58:	e8 01 fc ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e5d:	55                   	push   ebp
c0022e5e:	53                   	push   ebx
c0022e5f:	57                   	push   edi
c0022e60:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e67:	e8 80 fc ff ff       	call   c0022aec <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e6c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e71:	83 c4 24             	add    esp,0x24
c0022e74:	55                   	push   ebp
c0022e75:	53                   	push   ebx
c0022e76:	57                   	push   edi
c0022e77:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e7b:	e8 f6 fc ff ff       	call   c0022b76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e80:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e84:	6a 3c                	push   0x3c
c0022e86:	55                   	push   ebp
c0022e87:	53                   	push   ebx
c0022e88:	57                   	push   edi
c0022e89:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e90:	e8 c9 fb ff ff       	call   c0022a5e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e95:	0f b6 c4             	movzx  eax,ah
c0022e98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e9c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ea0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022ea4:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0022ea9:	83 c4 24             	add    esp,0x24
c0022eac:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022eb2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022eb9:	74 6c                	je     c0022f27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ebb:	31 f6                	xor    esi,esi
c0022ebd:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c0022ec3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ec9:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022ecf:	7e 56                	jle    c0022f27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ed1:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022ed4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022edb:	39 cb                	cmp    ebx,ecx
c0022edd:	75 45                	jne    c0022f24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022edf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ee6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022eea:	75 38                	jne    c0022f24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022eec:	83 ec 0c             	sub    esp,0xc
c0022eef:	68 7a cb 02 c0       	push   0xc002cb7a
c0022ef4:	e8 3f 01 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0022ef9:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c0022eff:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022f05:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022f0d:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022f11:	52                   	push   edx
c0022f12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022f16:	53                   	push   ebx
c0022f17:	68 9f cb 02 c0       	push   0xc002cb9f
c0022f1c:	e8 17 01 ff ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0022f21:	83 c4 20             	add    esp,0x20
c0022f24:	46                   	inc    esi
c0022f25:	eb 96                	jmp    c0022ebd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f27:	31 d2                	xor    edx,edx
c0022f29:	83 ec 0c             	sub    esp,0xc
c0022f2c:	55                   	push   ebp
c0022f2d:	53                   	push   ebx
c0022f2e:	57                   	push   edi
c0022f2f:	52                   	push   edx
c0022f30:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f34:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f3b:	e8 7c fc ff ff       	call   c0022bbc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f40:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f48:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f4c:	42                   	inc    edx
c0022f4d:	83 c4 20             	add    esp,0x20
c0022f50:	83 fa 06             	cmp    edx,0x6
c0022f53:	75 d4                	jne    c0022f29 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f55:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f59:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f5d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f61:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f65:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f69:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f6d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f72:	86 e0                	xchg   al,ah
c0022f74:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f79:	55                   	push   ebp
c0022f7a:	53                   	push   ebx
c0022f7b:	57                   	push   edi
c0022f7c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f80:	e8 ab fb ff ff       	call   c0022b30 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f85:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f89:	55                   	push   ebp
c0022f8a:	53                   	push   ebx
c0022f8b:	57                   	push   edi
c0022f8c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f93:	e8 0e fb ff ff       	call   c0022aa6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f98:	83 ec 0c             	sub    esp,0xc
c0022f9b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022fa0:	b9 09 00 00 00       	mov    ecx,0x9
c0022fa5:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022fa9:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022fad:	fc                   	cld    
c0022fae:	89 e7                	mov    edi,esp
c0022fb0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022fb2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022fb9:	e8 ee fc ff ff       	call   c0022cac <PCI::foundDevice(PCIDeviceInfo)>
c0022fbe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022fc4:	5b                   	pop    ebx
c0022fc5:	5e                   	pop    esi
c0022fc6:	5f                   	pop    edi
c0022fc7:	5d                   	pop    ebp
c0022fc8:	c3                   	ret    
c0022fc9:	90                   	nop

c0022fca <PCI::checkDevice(unsigned char, unsigned char)>:
c0022fca:	55                   	push   ebp
c0022fcb:	57                   	push   edi
c0022fcc:	56                   	push   esi
c0022fcd:	53                   	push   ebx
c0022fce:	83 ec 0c             	sub    esp,0xc
c0022fd1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fd5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fda:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fdf:	6a 00                	push   0x0
c0022fe1:	56                   	push   esi
c0022fe2:	57                   	push   edi
c0022fe3:	55                   	push   ebp
c0022fe4:	e8 bd fa ff ff       	call   c0022aa6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fe9:	6a 00                	push   0x0
c0022feb:	56                   	push   esi
c0022fec:	57                   	push   edi
c0022fed:	55                   	push   ebp
c0022fee:	e8 2b fe ff ff       	call   c0022e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ff3:	83 c4 20             	add    esp,0x20
c0022ff6:	6a 00                	push   0x0
c0022ff8:	56                   	push   esi
c0022ff9:	57                   	push   edi
c0022ffa:	55                   	push   ebp
c0022ffb:	e8 c8 fa ff ff       	call   c0022ac8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023000:	83 c4 10             	add    esp,0x10
c0023003:	84 c0                	test   al,al
c0023005:	79 27                	jns    c002302e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023007:	bb 01 00 00 00       	mov    ebx,0x1
c002300c:	53                   	push   ebx
c002300d:	56                   	push   esi
c002300e:	57                   	push   edi
c002300f:	55                   	push   ebp
c0023010:	e8 91 fa ff ff       	call   c0022aa6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023015:	83 c4 10             	add    esp,0x10
c0023018:	66 40                	inc    ax
c002301a:	74 0c                	je     c0023028 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002301c:	53                   	push   ebx
c002301d:	56                   	push   esi
c002301e:	57                   	push   edi
c002301f:	55                   	push   ebp
c0023020:	e8 f9 fd ff ff       	call   c0022e1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023025:	83 c4 10             	add    esp,0x10
c0023028:	43                   	inc    ebx
c0023029:	83 fb 08             	cmp    ebx,0x8
c002302c:	75 de                	jne    c002300c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002302e:	83 c4 0c             	add    esp,0xc
c0023031:	5b                   	pop    ebx
c0023032:	5e                   	pop    esi
c0023033:	5f                   	pop    edi
c0023034:	5d                   	pop    ebp
c0023035:	c3                   	ret    

c0023036 <PCI::detect()>:
c0023036:	56                   	push   esi
c0023037:	53                   	push   ebx
c0023038:	53                   	push   ebx
c0023039:	31 db                	xor    ebx,ebx
c002303b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002303f:	6a 00                	push   0x0
c0023041:	6a 00                	push   0x0
c0023043:	6a 00                	push   0x0
c0023045:	56                   	push   esi
c0023046:	e8 7d fa ff ff       	call   c0022ac8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002304b:	83 c4 10             	add    esp,0x10
c002304e:	a8 80                	test   al,0x80
c0023050:	75 21                	jne    c0023073 <PCI::detect()+0x3d>
c0023052:	51                   	push   ecx
c0023053:	51                   	push   ecx
c0023054:	6a 00                	push   0x0
c0023056:	56                   	push   esi
c0023057:	e8 2c fc ff ff       	call   c0022c88 <PCI::checkBus(unsigned char)>
c002305c:	83 c4 10             	add    esp,0x10
c002305f:	eb 24                	jmp    c0023085 <PCI::detect()+0x4f>
c0023061:	52                   	push   edx
c0023062:	52                   	push   edx
c0023063:	53                   	push   ebx
c0023064:	43                   	inc    ebx
c0023065:	56                   	push   esi
c0023066:	e8 1d fc ff ff       	call   c0022c88 <PCI::checkBus(unsigned char)>
c002306b:	83 c4 10             	add    esp,0x10
c002306e:	83 fb 08             	cmp    ebx,0x8
c0023071:	74 12                	je     c0023085 <PCI::detect()+0x4f>
c0023073:	53                   	push   ebx
c0023074:	6a 00                	push   0x0
c0023076:	6a 00                	push   0x0
c0023078:	56                   	push   esi
c0023079:	e8 28 fa ff ff       	call   c0022aa6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002307e:	83 c4 10             	add    esp,0x10
c0023081:	66 40                	inc    ax
c0023083:	74 dc                	je     c0023061 <PCI::detect()+0x2b>
c0023085:	58                   	pop    eax
c0023086:	5b                   	pop    ebx
c0023087:	5e                   	pop    esi
c0023088:	c3                   	ret    
c0023089:	90                   	nop

c002308a <IDE::close(int, int, void*)>:
c002308a:	83 c8 ff             	or     eax,0xffffffff
c002308d:	c3                   	ret    

c002308e <IDE::IDE()>:
c002308e:	83 ec 0c             	sub    esp,0xc
c0023091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023095:	83 ec 08             	sub    esp,0x8
c0023098:	68 e8 cb 02 c0       	push   0xc002cbe8
c002309d:	50                   	push   eax
c002309e:	e8 47 17 ff ff       	call   c00147ea <HardDiskController::HardDiskController(char const*)>
c00230a3:	83 c4 10             	add    esp,0x10
c00230a6:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c00230ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230af:	89 10                	mov    DWORD PTR [eax],edx
c00230b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00230bc:	90                   	nop
c00230bd:	83 c4 0c             	add    esp,0xc
c00230c0:	c3                   	ret    
c00230c1:	90                   	nop

c00230c2 <IDE::prepareInterrupt(unsigned char)>:
c00230c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230c7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230cb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230d3:	c3                   	ret    

c00230d4 <selectDrive(unsigned char, unsigned char)>:
c00230d4:	c3                   	ret    
c00230d5:	90                   	nop

c00230d6 <IDE::getBase(unsigned char)>:
c00230d6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230df:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230e7:	c3                   	ret    

c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230e8:	55                   	push   ebp
c00230e9:	57                   	push   edi
c00230ea:	56                   	push   esi
c00230eb:	53                   	push   ebx
c00230ec:	83 ec 1c             	sub    esp,0x1c
c00230ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230f7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230fa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023102:	80 f9 03             	cmp    cl,0x3
c0023105:	77 51                	ja     c0023158 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002310b:	0f b6 f2             	movzx  esi,dl
c002310e:	0f b6 db             	movzx  ebx,bl
c0023111:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023114:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023118:	83 ca 80             	or     edx,0xffffff80
c002311b:	0f b6 d2             	movzx  edx,dl
c002311e:	52                   	push   edx
c002311f:	6a 0c                	push   0xc
c0023121:	56                   	push   esi
c0023122:	57                   	push   edi
c0023123:	e8 c0 ff ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023128:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002312d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023131:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023135:	ee                   	out    dx,al
c0023136:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002313b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002313f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023143:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023147:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002314f:	83 c4 2c             	add    esp,0x2c
c0023152:	5b                   	pop    ebx
c0023153:	5e                   	pop    esi
c0023154:	5f                   	pop    edi
c0023155:	5d                   	pop    ebp
c0023156:	eb 90                	jmp    c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023158:	80 fb 07             	cmp    bl,0x7
c002315b:	77 12                	ja     c002316f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002315d:	0f b6 d2             	movzx  edx,dl
c0023160:	0f b6 db             	movzx  ebx,bl
c0023163:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002316b:	89 da                	mov    edx,ebx
c002316d:	eb 2f                	jmp    c002319e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002316f:	80 fb 0d             	cmp    bl,0xd
c0023172:	77 13                	ja     c0023187 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023174:	0f b6 d2             	movzx  edx,dl
c0023177:	0f b6 db             	movzx  ebx,bl
c002317a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023181:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023185:	eb 17                	jmp    c002319e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023187:	80 fb 15             	cmp    bl,0x15
c002318a:	77 13                	ja     c002319f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002318c:	0f b6 d2             	movzx  edx,dl
c002318f:	0f b6 db             	movzx  ebx,bl
c0023192:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002319a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002319e:	ee                   	out    dx,al
c002319f:	83 c4 1c             	add    esp,0x1c
c00231a2:	5b                   	pop    ebx
c00231a3:	5e                   	pop    esi
c00231a4:	5f                   	pop    edi
c00231a5:	5d                   	pop    ebp
c00231a6:	c3                   	ret    
c00231a7:	90                   	nop

c00231a8 <IDE::read(unsigned char, unsigned char)>:
c00231a8:	55                   	push   ebp
c00231a9:	57                   	push   edi
c00231aa:	56                   	push   esi
c00231ab:	53                   	push   ebx
c00231ac:	83 ec 1c             	sub    esp,0x1c
c00231af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00231b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00231b7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00231ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231be:	3c 03                	cmp    al,0x3
c00231c0:	77 43                	ja     c0023205 <IDE::read(unsigned char, unsigned char)+0x5d>
c00231c2:	0f b6 f2             	movzx  esi,dl
c00231c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231c8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231cc:	83 c8 80             	or     eax,0xffffff80
c00231cf:	0f b6 c0             	movzx  eax,al
c00231d2:	50                   	push   eax
c00231d3:	6a 0c                	push   0xc
c00231d5:	56                   	push   esi
c00231d6:	57                   	push   edi
c00231d7:	e8 0c ff ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231dc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231e1:	0f b6 c3             	movzx  eax,bl
c00231e4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231e8:	ec                   	in     al,dx
c00231e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231ed:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231f2:	52                   	push   edx
c00231f3:	6a 0c                	push   0xc
c00231f5:	56                   	push   esi
c00231f6:	57                   	push   edi
c00231f7:	e8 ec fe ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231fc:	83 c4 20             	add    esp,0x20
c00231ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023203:	eb 49                	jmp    c002324e <IDE::read(unsigned char, unsigned char)+0xa6>
c0023205:	80 fb 07             	cmp    bl,0x7
c0023208:	77 12                	ja     c002321c <IDE::read(unsigned char, unsigned char)+0x74>
c002320a:	0f b6 d2             	movzx  edx,dl
c002320d:	0f b6 c3             	movzx  eax,bl
c0023210:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023218:	89 c2                	mov    edx,eax
c002321a:	eb 31                	jmp    c002324d <IDE::read(unsigned char, unsigned char)+0xa5>
c002321c:	80 fb 0d             	cmp    bl,0xd
c002321f:	77 13                	ja     c0023234 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023221:	0f b6 d2             	movzx  edx,dl
c0023224:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002322b:	0f b6 d3             	movzx  edx,bl
c002322e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023232:	eb 19                	jmp    c002324d <IDE::read(unsigned char, unsigned char)+0xa5>
c0023234:	31 c0                	xor    eax,eax
c0023236:	80 fb 15             	cmp    bl,0x15
c0023239:	77 13                	ja     c002324e <IDE::read(unsigned char, unsigned char)+0xa6>
c002323b:	0f b6 d2             	movzx  edx,dl
c002323e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023246:	0f b6 d3             	movzx  edx,bl
c0023249:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002324d:	ec                   	in     al,dx
c002324e:	83 c4 1c             	add    esp,0x1c
c0023251:	5b                   	pop    ebx
c0023252:	5e                   	pop    esi
c0023253:	5f                   	pop    edi
c0023254:	5d                   	pop    ebp
c0023255:	c3                   	ret    

c0023256 <IDE::waitInterrupt(unsigned char)>:
c0023256:	55                   	push   ebp
c0023257:	57                   	push   edi
c0023258:	56                   	push   esi
c0023259:	53                   	push   ebx
c002325a:	31 db                	xor    ebx,ebx
c002325c:	83 ec 0c             	sub    esp,0xc
c002325f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023263:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023268:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023270:	89 e8                	mov    eax,ebp
c0023272:	84 c0                	test   al,al
c0023274:	75 34                	jne    c00232aa <IDE::waitInterrupt(unsigned char)+0x54>
c0023276:	52                   	push   edx
c0023277:	6a 0c                	push   0xc
c0023279:	56                   	push   esi
c002327a:	57                   	push   edi
c002327b:	e8 28 ff ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023280:	83 c4 10             	add    esp,0x10
c0023283:	a8 01                	test   al,0x1
c0023285:	75 2b                	jne    c00232b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023287:	f6 c3 04             	test   bl,0x4
c002328a:	75 16                	jne    c00232a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c002328c:	83 fb 32             	cmp    ebx,0x32
c002328f:	7e 11                	jle    c00232a2 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023291:	50                   	push   eax
c0023292:	50                   	push   eax
c0023293:	6a 00                	push   0x0
c0023295:	68 80 96 98 00       	push   0x989680
c002329a:	e8 8b b1 ff ff       	call   c001e42a <nanoSleep(unsigned long long)>
c002329f:	83 c4 10             	add    esp,0x10
c00232a2:	83 fb 3c             	cmp    ebx,0x3c
c00232a5:	74 0b                	je     c00232b2 <IDE::waitInterrupt(unsigned char)+0x5c>
c00232a7:	43                   	inc    ebx
c00232a8:	eb be                	jmp    c0023268 <IDE::waitInterrupt(unsigned char)+0x12>
c00232aa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00232b2:	83 c4 0c             	add    esp,0xc
c00232b5:	89 e8                	mov    eax,ebp
c00232b7:	5b                   	pop    ebx
c00232b8:	5e                   	pop    esi
c00232b9:	5f                   	pop    edi
c00232ba:	5d                   	pop    ebp
c00232bb:	c3                   	ret    

c00232bc <ideChannel0IRQHandler(regs*, void*)>:
c00232bc:	83 ec 10             	sub    esp,0x10
c00232bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232c3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232ca:	6a 07                	push   0x7
c00232cc:	6a 00                	push   0x0
c00232ce:	50                   	push   eax
c00232cf:	e8 d4 fe ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00232d4:	83 c4 1c             	add    esp,0x1c
c00232d7:	c3                   	ret    

c00232d8 <ideChannel1IRQHandler(regs*, void*)>:
c00232d8:	83 ec 10             	sub    esp,0x10
c00232db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232df:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232e6:	6a 07                	push   0x7
c00232e8:	6a 01                	push   0x1
c00232ea:	50                   	push   eax
c00232eb:	e8 b8 fe ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00232f0:	83 c4 1c             	add    esp,0x1c
c00232f3:	c3                   	ret    

c00232f4 <IDE::enableIRQs(unsigned char, bool)>:
c00232f4:	57                   	push   edi
c00232f5:	56                   	push   esi
c00232f6:	be 04 00 00 00       	mov    esi,0x4
c00232fb:	53                   	push   ebx
c00232fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023305:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002330a:	0f 94 c0             	sete   al
c002330d:	d1 e0                	shl    eax,1
c002330f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023316:	0f b6 c0             	movzx  eax,al
c0023319:	50                   	push   eax
c002331a:	6a 0c                	push   0xc
c002331c:	57                   	push   edi
c002331d:	53                   	push   ebx
c002331e:	e8 c5 fd ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023323:	83 c4 10             	add    esp,0x10
c0023326:	50                   	push   eax
c0023327:	6a 0c                	push   0xc
c0023329:	57                   	push   edi
c002332a:	53                   	push   ebx
c002332b:	e8 78 fe ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023330:	83 c4 10             	add    esp,0x10
c0023333:	4e                   	dec    esi
c0023334:	75 f0                	jne    c0023326 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023336:	5b                   	pop    ebx
c0023337:	5e                   	pop    esi
c0023338:	5f                   	pop    edi
c0023339:	c3                   	ret    

c002333a <IDE::open(int, int, void*)>:
c002333a:	55                   	push   ebp
c002333b:	57                   	push   edi
c002333c:	56                   	push   esi
c002333d:	53                   	push   ebx
c002333e:	83 ec 1c             	sub    esp,0x1c
c0023341:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023345:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002334e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023357:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002335e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023365:	0f 85 b0 02 00 00    	jne    c002361b <IDE::open(int, int, void*)+0x2e1>
c002336b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023371:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023375:	83 e0 7f             	and    eax,0x7f
c0023378:	3c 05                	cmp    al,0x5
c002337a:	74 04                	je     c0023380 <IDE::open(int, int, void*)+0x46>
c002337c:	3c 0f                	cmp    al,0xf
c002337e:	75 32                	jne    c00233b2 <IDE::open(int, int, void*)+0x78>
c0023380:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023386:	83 e0 fc             	and    eax,0xfffffffc
c0023389:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023390:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023396:	83 e0 fc             	and    eax,0xfffffffc
c0023399:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00233a0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00233a6:	83 e0 fc             	and    eax,0xfffffffc
c00233a9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233b0:	eb 14                	jmp    c00233c6 <IDE::open(int, int, void*)+0x8c>
c00233b2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233bc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233cd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233d8:	89 c6                	mov    esi,eax
c00233da:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233df:	c1 e6 10             	shl    esi,0x10
c00233e2:	89 e8                	mov    eax,ebp
c00233e4:	89 fa                	mov    edx,edi
c00233e6:	c1 e0 0b             	shl    eax,0xb
c00233e9:	09 f0                	or     eax,esi
c00233eb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233f2:	c1 e6 08             	shl    esi,0x8
c00233f5:	09 c6                	or     esi,eax
c00233f7:	89 f0                	mov    eax,esi
c00233f9:	0d 08 00 00 80       	or     eax,0x80000008
c00233fe:	ef                   	out    dx,eax
c00233ff:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023404:	89 ca                	mov    edx,ecx
c0023406:	ed                   	in     eax,dx
c0023407:	c1 e8 10             	shr    eax,0x10
c002340a:	3d ff ff 00 00       	cmp    eax,0xffff
c002340f:	0f 84 f5 00 00 00    	je     c002350a <IDE::open(int, int, void*)+0x1d0>
c0023415:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002341b:	89 fa                	mov    edx,edi
c002341d:	89 f0                	mov    eax,esi
c002341f:	ef                   	out    dx,eax
c0023420:	b0 fe                	mov    al,0xfe
c0023422:	89 ca                	mov    edx,ecx
c0023424:	ee                   	out    dx,al
c0023425:	89 f0                	mov    eax,esi
c0023427:	89 fa                	mov    edx,edi
c0023429:	ef                   	out    dx,eax
c002342a:	89 ca                	mov    edx,ecx
c002342c:	ed                   	in     eax,dx
c002342d:	3c fe                	cmp    al,0xfe
c002342f:	0f 85 a9 00 00 00    	jne    c00234de <IDE::open(int, int, void*)+0x1a4>
c0023435:	8b 15 68 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e568
c002343b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023442:	74 33                	je     c0023477 <IDE::open(int, int, void*)+0x13d>
c0023444:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002344a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002344e:	40                   	inc    eax
c002344f:	83 ec 0c             	sub    esp,0xc
c0023452:	0f b6 c0             	movzx  eax,al
c0023455:	50                   	push   eax
c0023456:	55                   	push   ebp
c0023457:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002345b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023461:	51                   	push   ecx
c0023462:	e8 d7 4e ff ff       	call   c001833e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023467:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002346c:	83 c4 1c             	add    esp,0x1c
c002346f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023475:	eb 0a                	jmp    c0023481 <IDE::open(int, int, void*)+0x147>
c0023477:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023481:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023488:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002348f:	c1 e1 10             	shl    ecx,0x10
c0023492:	c1 e0 08             	shl    eax,0x8
c0023495:	bf f8 0c 00 00       	mov    edi,0xcf8
c002349a:	09 c1                	or     ecx,eax
c002349c:	89 fa                	mov    edx,edi
c002349e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00234a5:	c1 e0 0b             	shl    eax,0xb
c00234a8:	09 c1                	or     ecx,eax
c00234aa:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00234b0:	89 c8                	mov    eax,ecx
c00234b2:	ef                   	out    dx,eax
c00234b3:	be fc 0c 00 00       	mov    esi,0xcfc
c00234b8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00234be:	89 f2                	mov    edx,esi
c00234c0:	ee                   	out    dx,al
c00234c1:	89 c8                	mov    eax,ecx
c00234c3:	89 fa                	mov    edx,edi
c00234c5:	ef                   	out    dx,eax
c00234c6:	89 f2                	mov    edx,esi
c00234c8:	ed                   	in     eax,dx
c00234c9:	0f b6 c0             	movzx  eax,al
c00234cc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234d2:	74 46                	je     c002351a <IDE::open(int, int, void*)+0x1e0>
c00234d4:	83 ec 0c             	sub    esp,0xc
c00234d7:	68 00 cc 02 c0       	push   0xc002cc00
c00234dc:	eb 34                	jmp    c0023512 <IDE::open(int, int, void*)+0x1d8>
c00234de:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234e7:	75 17                	jne    c0023500 <IDE::open(int, int, void*)+0x1c6>
c00234e9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234ee:	74 07                	je     c00234f7 <IDE::open(int, int, void*)+0x1bd>
c00234f0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234f5:	75 09                	jne    c0023500 <IDE::open(int, int, void*)+0x1c6>
c00234f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234fe:	eb 1a                	jmp    c002351a <IDE::open(int, int, void*)+0x1e0>
c0023500:	83 ec 0c             	sub    esp,0xc
c0023503:	68 08 cc 02 c0       	push   0xc002cc08
c0023508:	eb 08                	jmp    c0023512 <IDE::open(int, int, void*)+0x1d8>
c002350a:	83 ec 0c             	sub    esp,0xc
c002350d:	68 39 cc 02 c0       	push   0xc002cc39
c0023512:	e8 ce 71 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0023517:	83 c4 10             	add    esp,0x10
c002351a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023521:	79 1a                	jns    c002353d <IDE::open(int, int, void*)+0x203>
c0023523:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023529:	83 e0 fc             	and    eax,0xfffffffc
c002352c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023533:	83 c0 08             	add    eax,0x8
c0023536:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002353d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023543:	89 c2                	mov    edx,eax
c0023545:	83 e2 0f             	and    edx,0xf
c0023548:	66 83 fa 08          	cmp    dx,0x8
c002354c:	75 0a                	jne    c0023558 <IDE::open(int, int, void*)+0x21e>
c002354e:	83 e8 02             	sub    eax,0x2
c0023551:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023558:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002355e:	89 c2                	mov    edx,eax
c0023560:	83 e2 0f             	and    edx,0xf
c0023563:	66 83 fa 08          	cmp    dx,0x8
c0023567:	75 0a                	jne    c0023573 <IDE::open(int, int, void*)+0x239>
c0023569:	83 e8 02             	sub    eax,0x2
c002356c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023573:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002357a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023581:	89 d0                	mov    eax,edx
c0023583:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023586:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002358a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002358e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023591:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023596:	0f b6 c9             	movzx  ecx,cl
c0023599:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00235a0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235a3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235a7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00235ab:	8d 50 02             	lea    edx,[eax+0x2]
c00235ae:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235b3:	0f b6 d2             	movzx  edx,dl
c00235b6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00235bc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235bf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235c7:	8d 48 03             	lea    ecx,[eax+0x3]
c00235ca:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235cf:	0f b6 c9             	movzx  ecx,cl
c00235d2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235df:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235e3:	8d 50 04             	lea    edx,[eax+0x4]
c00235e6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235f1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235f8:	66 85 f6             	test   si,si
c00235fb:	74 3e                	je     c002363b <IDE::open(int, int, void*)+0x301>
c00235fd:	0f b6 d2             	movzx  edx,dl
c0023600:	83 c0 05             	add    eax,0x5
c0023603:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023606:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002360a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002360e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023614:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023619:	eb 20                	jmp    c002363b <IDE::open(int, int, void*)+0x301>
c002361b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023625:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002362f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023636:	e9 02 ff ff ff       	jmp    c002353d <IDE::open(int, int, void*)+0x203>
c002363b:	52                   	push   edx
c002363c:	52                   	push   edx
c002363d:	6a 00                	push   0x0
c002363f:	53                   	push   ebx
c0023640:	e8 7d fa ff ff       	call   c00230c2 <IDE::prepareInterrupt(unsigned char)>
c0023645:	59                   	pop    ecx
c0023646:	5e                   	pop    esi
c0023647:	6a 01                	push   0x1
c0023649:	53                   	push   ebx
c002364a:	e8 73 fa ff ff       	call   c00230c2 <IDE::prepareInterrupt(unsigned char)>
c002364f:	83 c4 0c             	add    esp,0xc
c0023652:	6a 00                	push   0x0
c0023654:	6a 00                	push   0x0
c0023656:	53                   	push   ebx
c0023657:	e8 98 fc ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c002365c:	83 c4 0c             	add    esp,0xc
c002365f:	6a 00                	push   0x0
c0023661:	6a 01                	push   0x1
c0023663:	53                   	push   ebx
c0023664:	e8 8b fc ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c0023669:	83 c4 10             	add    esp,0x10
c002366c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023673:	74 40                	je     c00236b5 <IDE::open(int, int, void*)+0x37b>
c0023675:	83 ec 0c             	sub    esp,0xc
c0023678:	68 63 cc 02 c0       	push   0xc002cc63
c002367d:	e8 b6 f9 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023682:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023685:	6a 01                	push   0x1
c0023687:	68 bc 32 02 c0       	push   0xc00232bc
c002368c:	6a 0e                	push   0xe
c002368e:	53                   	push   ebx
c002368f:	e8 4e 0d ff ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023694:	83 c4 14             	add    esp,0x14
c0023697:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002369d:	53                   	push   ebx
c002369e:	6a 01                	push   0x1
c00236a0:	68 d8 32 02 c0       	push   0xc00232d8
c00236a5:	6a 0f                	push   0xf
c00236a7:	53                   	push   ebx
c00236a8:	e8 35 0d ff ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236ad:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00236b3:	eb 4a                	jmp    c00236ff <IDE::open(int, int, void*)+0x3c5>
c00236b5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00236bf:	50                   	push   eax
c00236c0:	6a 0f                	push   0xf
c00236c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236c8:	68 7f cc 02 c0       	push   0xc002cc7f
c00236cd:	e8 66 f9 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c00236d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236d5:	6a 00                	push   0x0
c00236d7:	68 bc 32 02 c0       	push   0xc00232bc
c00236dc:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236e2:	53                   	push   ebx
c00236e3:	e8 fa 0c ff ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236e8:	83 c4 14             	add    esp,0x14
c00236eb:	53                   	push   ebx
c00236ec:	6a 00                	push   0x0
c00236ee:	68 d8 32 02 c0       	push   0xc00232d8
c00236f3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236f9:	53                   	push   ebx
c00236fa:	e8 e3 0c ff ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023701:	83 c4 20             	add    esp,0x20
c0023704:	83 ec 0c             	sub    esp,0xc
c0023707:	53                   	push   ebx
c0023708:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002370b:	83 c4 0c             	add    esp,0xc
c002370e:	6a 07                	push   0x7
c0023710:	6a 00                	push   0x0
c0023712:	53                   	push   ebx
c0023713:	e8 90 fa ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023718:	83 c4 0c             	add    esp,0xc
c002371b:	6a 07                	push   0x7
c002371d:	6a 01                	push   0x1
c002371f:	53                   	push   ebx
c0023720:	e8 83 fa ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023725:	83 c4 0c             	add    esp,0xc
c0023728:	6a 01                	push   0x1
c002372a:	6a 00                	push   0x0
c002372c:	53                   	push   ebx
c002372d:	e8 c2 fb ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c0023732:	83 c4 0c             	add    esp,0xc
c0023735:	6a 01                	push   0x1
c0023737:	6a 01                	push   0x1
c0023739:	53                   	push   ebx
c002373a:	e8 b5 fb ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c002373f:	83 c4 2c             	add    esp,0x2c
c0023742:	31 c0                	xor    eax,eax
c0023744:	5b                   	pop    ebx
c0023745:	5e                   	pop    esi
c0023746:	5f                   	pop    edi
c0023747:	5d                   	pop    ebp
c0023748:	c3                   	ret    
c0023749:	90                   	nop

c002374a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002374a:	55                   	push   ebp
c002374b:	57                   	push   edi
c002374c:	56                   	push   esi
c002374d:	53                   	push   ebx
c002374e:	83 ec 1c             	sub    esp,0x1c
c0023751:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023755:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023759:	8d 50 f8             	lea    edx,[eax-0x8]
c002375c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023760:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023764:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023768:	80 fa 03             	cmp    dl,0x3
c002376b:	77 5d                	ja     c00237ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002376d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023775:	0f b6 db             	movzx  ebx,bl
c0023778:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002377b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002377f:	83 ca 80             	or     edx,0xffffff80
c0023782:	0f b6 d2             	movzx  edx,dl
c0023785:	52                   	push   edx
c0023786:	6a 0c                	push   0xc
c0023788:	53                   	push   ebx
c0023789:	56                   	push   esi
c002378a:	e8 59 f9 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002378f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023798:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002379c:	0f b6 c0             	movzx  eax,al
c002379f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00237a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237a5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00237aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00237ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00237b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00237b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237be:	83 c4 2c             	add    esp,0x2c
c00237c1:	5b                   	pop    ebx
c00237c2:	5e                   	pop    esi
c00237c3:	5f                   	pop    edi
c00237c4:	5d                   	pop    ebp
c00237c5:	e9 1e f9 ff ff       	jmp    c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ca:	3c 07                	cmp    al,0x7
c00237cc:	77 10                	ja     c00237de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237ce:	0f b6 db             	movzx  ebx,bl
c00237d1:	0f b6 d0             	movzx  edx,al
c00237d4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237dc:	eb 2d                	jmp    c002380b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237de:	3c 0d                	cmp    al,0xd
c00237e0:	77 13                	ja     c00237f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237e2:	0f b6 db             	movzx  ebx,bl
c00237e5:	0f b6 c0             	movzx  eax,al
c00237e8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237ef:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237f3:	eb 16                	jmp    c002380b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237f5:	3c 15                	cmp    al,0x15
c00237f7:	77 14                	ja     c002380d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237f9:	0f b6 db             	movzx  ebx,bl
c00237fc:	0f b6 c0             	movzx  eax,al
c00237ff:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023807:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002380b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002380d:	83 c4 1c             	add    esp,0x1c
c0023810:	5b                   	pop    ebx
c0023811:	5e                   	pop    esi
c0023812:	5f                   	pop    edi
c0023813:	5d                   	pop    ebp
c0023814:	c3                   	ret    
c0023815:	90                   	nop

c0023816 <IDE::detect()>:
c0023816:	55                   	push   ebp
c0023817:	57                   	push   edi
c0023818:	56                   	push   esi
c0023819:	53                   	push   ebx
c002381a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023820:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023827:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002382e:	0f 85 be 02 00 00    	jne    c0023af2 <IDE::detect()+0x2dc>
c0023834:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002383b:	31 f6                	xor    esi,esi
c002383d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023845:	31 ed                	xor    ebp,ebp
c0023847:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002384b:	c1 e0 06             	shl    eax,0x6
c002384e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023856:	89 e8                	mov    eax,ebp
c0023858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002385c:	c1 e0 04             	shl    eax,0x4
c002385f:	83 c8 a0             	or     eax,0xffffffa0
c0023862:	0f b6 c0             	movzx  eax,al
c0023865:	50                   	push   eax
c0023866:	6a 06                	push   0x6
c0023868:	56                   	push   esi
c0023869:	53                   	push   ebx
c002386a:	e8 79 f8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002386f:	83 c4 0c             	add    esp,0xc
c0023872:	6a 0c                	push   0xc
c0023874:	56                   	push   esi
c0023875:	53                   	push   ebx
c0023876:	e8 2d f9 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c002387b:	83 c4 0c             	add    esp,0xc
c002387e:	6a 0c                	push   0xc
c0023880:	56                   	push   esi
c0023881:	53                   	push   ebx
c0023882:	e8 21 f9 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023887:	83 c4 0c             	add    esp,0xc
c002388a:	6a 0c                	push   0xc
c002388c:	56                   	push   esi
c002388d:	53                   	push   ebx
c002388e:	e8 15 f9 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023893:	83 c4 0c             	add    esp,0xc
c0023896:	6a 0c                	push   0xc
c0023898:	56                   	push   esi
c0023899:	53                   	push   ebx
c002389a:	e8 09 f9 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c002389f:	68 ec 00 00 00       	push   0xec
c00238a4:	6a 07                	push   0x7
c00238a6:	56                   	push   esi
c00238a7:	53                   	push   ebx
c00238a8:	e8 3b f8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ad:	83 c4 1c             	add    esp,0x1c
c00238b0:	6a 0c                	push   0xc
c00238b2:	56                   	push   esi
c00238b3:	53                   	push   ebx
c00238b4:	e8 ef f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00238b9:	83 c4 0c             	add    esp,0xc
c00238bc:	6a 0c                	push   0xc
c00238be:	56                   	push   esi
c00238bf:	53                   	push   ebx
c00238c0:	e8 e3 f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00238c5:	83 c4 0c             	add    esp,0xc
c00238c8:	6a 0c                	push   0xc
c00238ca:	56                   	push   esi
c00238cb:	53                   	push   ebx
c00238cc:	e8 d7 f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00238d1:	83 c4 0c             	add    esp,0xc
c00238d4:	6a 0c                	push   0xc
c00238d6:	56                   	push   esi
c00238d7:	53                   	push   ebx
c00238d8:	e8 cb f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00238dd:	83 c4 0c             	add    esp,0xc
c00238e0:	6a 0c                	push   0xc
c00238e2:	56                   	push   esi
c00238e3:	53                   	push   ebx
c00238e4:	e8 bf f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c00238e9:	83 c4 10             	add    esp,0x10
c00238ec:	84 c0                	test   al,al
c00238ee:	0f 84 8b 01 00 00    	je     c0023a7f <IDE::detect()+0x269>
c00238f4:	31 ff                	xor    edi,edi
c00238f6:	50                   	push   eax
c00238f7:	6a 0c                	push   0xc
c00238f9:	56                   	push   esi
c00238fa:	53                   	push   ebx
c00238fb:	e8 a8 f8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023900:	83 c4 10             	add    esp,0x10
c0023903:	a8 01                	test   al,0x1
c0023905:	0f 85 8e 01 00 00    	jne    c0023a99 <IDE::detect()+0x283>
c002390b:	84 c0                	test   al,al
c002390d:	78 04                	js     c0023913 <IDE::detect()+0xfd>
c002390f:	a8 08                	test   al,0x8
c0023911:	75 27                	jne    c002393a <IDE::detect()+0x124>
c0023913:	47                   	inc    edi
c0023914:	81 ff 17 01 00 00    	cmp    edi,0x117
c002391a:	7e da                	jle    c00238f6 <IDE::detect()+0xe0>
c002391c:	50                   	push   eax
c002391d:	50                   	push   eax
c002391e:	6a 00                	push   0x0
c0023920:	68 40 4b 4c 00       	push   0x4c4b40
c0023925:	e8 00 ab ff ff       	call   c001e42a <nanoSleep(unsigned long long)>
c002392a:	83 c4 10             	add    esp,0x10
c002392d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023933:	75 c1                	jne    c00238f6 <IDE::detect()+0xe0>
c0023935:	e9 5f 01 00 00       	jmp    c0023a99 <IDE::detect()+0x283>
c002393a:	31 c9                	xor    ecx,ecx
c002393c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023940:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023944:	83 ec 0c             	sub    esp,0xc
c0023947:	68 80 00 00 00       	push   0x80
c002394c:	57                   	push   edi
c002394d:	6a 00                	push   0x0
c002394f:	56                   	push   esi
c0023950:	53                   	push   ebx
c0023951:	e8 f4 fd ff ff       	call   c002374a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023956:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002395b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002395f:	89 d1                	mov    ecx,edx
c0023961:	c1 e0 06             	shl    eax,0x6
c0023964:	01 d8                	add    eax,ebx
c0023966:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002396d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023974:	89 f2                	mov    edx,esi
c0023976:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002397c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023980:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023986:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002398a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023991:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023999:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00239a0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00239a8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00239ae:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00239b5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00239bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00239bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239c3:	83 c4 20             	add    esp,0x20
c00239c6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239c9:	83 c0 02             	add    eax,0x2
c00239cc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239d2:	83 c7 02             	add    edi,0x2
c00239d5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239d8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239de:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239e2:	75 e2                	jne    c00239c6 <IDE::detect()+0x1b0>
c00239e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239e8:	c1 e0 06             	shl    eax,0x6
c00239eb:	01 d8                	add    eax,ebx
c00239ed:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239f3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239fa:	66 c1 ea 09          	shr    dx,0x9
c00239fe:	83 e2 01             	and    edx,0x1
c0023a01:	84 c9                	test   cl,cl
c0023a03:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023a09:	75 2f                	jne    c0023a3a <IDE::detect()+0x224>
c0023a0b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023a11:	85 c0                	test   eax,eax
c0023a13:	74 66                	je     c0023a7b <IDE::detect()+0x265>
c0023a15:	50                   	push   eax
c0023a16:	55                   	push   ebp
c0023a17:	56                   	push   esi
c0023a18:	68 9b cc 02 c0       	push   0xc002cc9b
c0023a1d:	e8 16 f6 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023a22:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a29:	e8 15 be fe ff       	call   c000f843 <malloc>
c0023a2e:	89 c7                	mov    edi,eax
c0023a30:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a33:	e8 78 06 00 00       	call   c00240b0 <ATA::ATA()>
c0023a38:	eb 28                	jmp    c0023a62 <IDE::detect()+0x24c>
c0023a3a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a40:	55                   	push   ebp
c0023a41:	56                   	push   esi
c0023a42:	68 ca cc 02 c0       	push   0xc002ccca
c0023a47:	e8 ec f5 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023a4c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a53:	e8 eb bd fe ff       	call   c000f843 <malloc>
c0023a58:	89 c7                	mov    edi,eax
c0023a5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a5d:	e8 8e 0c 00 00       	call   c00246f0 <ATAPI::ATAPI()>
c0023a62:	5a                   	pop    edx
c0023a63:	59                   	pop    ecx
c0023a64:	57                   	push   edi
c0023a65:	53                   	push   ebx
c0023a66:	e8 f3 09 ff ff       	call   c001445e <Device::addChild(Device*)>
c0023a6b:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a6d:	53                   	push   ebx
c0023a6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a72:	6a 00                	push   0x0
c0023a74:	57                   	push   edi
c0023a75:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a78:	83 c4 20             	add    esp,0x20
c0023a7b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a7f:	4d                   	dec    ebp
c0023a80:	74 0a                	je     c0023a8c <IDE::detect()+0x276>
c0023a82:	bd 01 00 00 00       	mov    ebp,0x1
c0023a87:	e9 bb fd ff ff       	jmp    c0023847 <IDE::detect()+0x31>
c0023a8c:	4e                   	dec    esi
c0023a8d:	74 63                	je     c0023af2 <IDE::detect()+0x2dc>
c0023a8f:	be 01 00 00 00       	mov    esi,0x1
c0023a94:	e9 ac fd ff ff       	jmp    c0023845 <IDE::detect()+0x2f>
c0023a99:	50                   	push   eax
c0023a9a:	6a 04                	push   0x4
c0023a9c:	56                   	push   esi
c0023a9d:	53                   	push   ebx
c0023a9e:	e8 05 f7 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023aa3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023aa7:	83 c4 0c             	add    esp,0xc
c0023aaa:	6a 05                	push   0x5
c0023aac:	56                   	push   esi
c0023aad:	53                   	push   ebx
c0023aae:	e8 f5 f6 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023ab3:	83 c4 10             	add    esp,0x10
c0023ab6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023aba:	80 fa 14             	cmp    dl,0x14
c0023abd:	75 04                	jne    c0023ac3 <IDE::detect()+0x2ad>
c0023abf:	3c eb                	cmp    al,0xeb
c0023ac1:	eb 07                	jmp    c0023aca <IDE::detect()+0x2b4>
c0023ac3:	3c 96                	cmp    al,0x96
c0023ac5:	75 b8                	jne    c0023a7f <IDE::detect()+0x269>
c0023ac7:	80 fa 69             	cmp    dl,0x69
c0023aca:	75 b3                	jne    c0023a7f <IDE::detect()+0x269>
c0023acc:	68 a1 00 00 00       	push   0xa1
c0023ad1:	6a 07                	push   0x7
c0023ad3:	56                   	push   esi
c0023ad4:	53                   	push   ebx
c0023ad5:	e8 0e f6 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ada:	5f                   	pop    edi
c0023adb:	58                   	pop    eax
c0023adc:	6a 00                	push   0x0
c0023ade:	68 40 42 0f 00       	push   0xf4240
c0023ae3:	e8 42 a9 ff ff       	call   c001e42a <nanoSleep(unsigned long long)>
c0023ae8:	83 c4 10             	add    esp,0x10
c0023aeb:	b1 01                	mov    cl,0x1
c0023aed:	e9 4a fe ff ff       	jmp    c002393c <IDE::detect()+0x126>
c0023af2:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023af8:	5b                   	pop    ebx
c0023af9:	5e                   	pop    esi
c0023afa:	5f                   	pop    edi
c0023afb:	5d                   	pop    ebp
c0023afc:	c3                   	ret    
c0023afd:	90                   	nop

c0023afe <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023afe:	55                   	push   ebp
c0023aff:	57                   	push   edi
c0023b00:	56                   	push   esi
c0023b01:	53                   	push   ebx
c0023b02:	83 ec 1c             	sub    esp,0x1c
c0023b05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023b09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b0d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023b11:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023b15:	88 c3                	mov    bl,al
c0023b17:	84 c0                	test   al,al
c0023b19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b1d:	0f 84 67 01 00 00    	je     c0023c8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b23:	83 ec 0c             	sub    esp,0xc
c0023b26:	68 fb cc 02 c0       	push   0xc002ccfb
c0023b2b:	e8 08 f5 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b37:	3c 01                	cmp    al,0x1
c0023b39:	75 17                	jne    c0023b52 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b3b:	83 ec 0c             	sub    esp,0xc
c0023b3e:	b3 13                	mov    bl,0x13
c0023b40:	68 07 cd 02 c0       	push   0xc002cd07
c0023b45:	e8 ee f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023b4a:	83 c4 10             	add    esp,0x10
c0023b4d:	e9 25 01 00 00       	jmp    c0023c77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b52:	3c 02                	cmp    al,0x2
c0023b54:	0f 85 ef 00 00 00    	jne    c0023c49 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b5a:	d1 e6                	shl    esi,1
c0023b5c:	09 ee                	or     esi,ebp
c0023b5e:	52                   	push   edx
c0023b5f:	89 f0                	mov    eax,esi
c0023b61:	6a 01                	push   0x1
c0023b63:	0f b6 f0             	movzx  esi,al
c0023b66:	c1 e6 06             	shl    esi,0x6
c0023b69:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b71:	50                   	push   eax
c0023b72:	57                   	push   edi
c0023b73:	e8 30 f6 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	89 c6                	mov    esi,eax
c0023b7d:	a8 01                	test   al,0x1
c0023b7f:	74 12                	je     c0023b93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	b3 07                	mov    bl,0x7
c0023b86:	68 1c cd 02 c0       	push   0xc002cd1c
c0023b8b:	e8 a8 f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023b90:	83 c4 10             	add    esp,0x10
c0023b93:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b99:	74 12                	je     c0023bad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	b3 03                	mov    bl,0x3
c0023ba0:	68 3a cd 02 c0       	push   0xc002cd3a
c0023ba5:	e8 8e f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023baa:	83 c4 10             	add    esp,0x10
c0023bad:	f7 c6 04 00 00 00    	test   esi,0x4
c0023bb3:	74 12                	je     c0023bc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023bb5:	83 ec 0c             	sub    esp,0xc
c0023bb8:	b3 14                	mov    bl,0x14
c0023bba:	68 5a cd 02 c0       	push   0xc002cd5a
c0023bbf:	e8 74 f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	f7 c6 08 00 00 00    	test   esi,0x8
c0023bcd:	74 12                	je     c0023be1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023bcf:	83 ec 0c             	sub    esp,0xc
c0023bd2:	b3 03                	mov    bl,0x3
c0023bd4:	68 3a cd 02 c0       	push   0xc002cd3a
c0023bd9:	e8 5a f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023bde:	83 c4 10             	add    esp,0x10
c0023be1:	f7 c6 10 00 00 00    	test   esi,0x10
c0023be7:	74 12                	je     c0023bfb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023be9:	83 ec 0c             	sub    esp,0xc
c0023bec:	b3 15                	mov    bl,0x15
c0023bee:	68 72 cd 02 c0       	push   0xc002cd72
c0023bf3:	e8 40 f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023bf8:	83 c4 10             	add    esp,0x10
c0023bfb:	f7 c6 20 00 00 00    	test   esi,0x20
c0023c01:	74 12                	je     c0023c15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023c03:	83 ec 0c             	sub    esp,0xc
c0023c06:	b3 03                	mov    bl,0x3
c0023c08:	68 3a cd 02 c0       	push   0xc002cd3a
c0023c0d:	e8 26 f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c12:	83 c4 10             	add    esp,0x10
c0023c15:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c1b:	74 12                	je     c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c1d:	83 ec 0c             	sub    esp,0xc
c0023c20:	b3 16                	mov    bl,0x16
c0023c22:	68 8c cd 02 c0       	push   0xc002cd8c
c0023c27:	e8 0c f4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c2c:	83 c4 10             	add    esp,0x10
c0023c2f:	89 f0                	mov    eax,esi
c0023c31:	84 c0                	test   al,al
c0023c33:	79 42                	jns    c0023c77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c35:	83 ec 0c             	sub    esp,0xc
c0023c38:	b3 0d                	mov    bl,0xd
c0023c3a:	68 ad cd 02 c0       	push   0xc002cdad
c0023c3f:	e8 f4 f3 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c44:	83 c4 10             	add    esp,0x10
c0023c47:	eb 2e                	jmp    c0023c77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c49:	3c 03                	cmp    al,0x3
c0023c4b:	75 14                	jne    c0023c61 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c4d:	83 ec 0c             	sub    esp,0xc
c0023c50:	b3 17                	mov    bl,0x17
c0023c52:	68 c1 cd 02 c0       	push   0xc002cdc1
c0023c57:	e8 dc f3 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c5c:	83 c4 10             	add    esp,0x10
c0023c5f:	eb 16                	jmp    c0023c77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c61:	3c 04                	cmp    al,0x4
c0023c63:	75 12                	jne    c0023c77 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c65:	83 ec 0c             	sub    esp,0xc
c0023c68:	b3 08                	mov    bl,0x8
c0023c6a:	68 d7 cd 02 c0       	push   0xc002cdd7
c0023c6f:	e8 c4 f3 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	50                   	push   eax
c0023c78:	50                   	push   eax
c0023c79:	0f b6 c3             	movzx  eax,bl
c0023c7c:	50                   	push   eax
c0023c7d:	68 ef cd 02 c0       	push   0xc002cdef
c0023c82:	e8 b1 f3 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023c87:	83 c4 10             	add    esp,0x10
c0023c8a:	83 c4 1c             	add    esp,0x1c
c0023c8d:	88 d8                	mov    al,bl
c0023c8f:	5b                   	pop    ebx
c0023c90:	5e                   	pop    esi
c0023c91:	5f                   	pop    edi
c0023c92:	5d                   	pop    ebp
c0023c93:	c3                   	ret    

c0023c94 <IDE::polling(unsigned char, unsigned int)>:
c0023c94:	57                   	push   edi
c0023c95:	56                   	push   esi
c0023c96:	53                   	push   ebx
c0023c97:	bb 04 00 00 00       	mov    ebx,0x4
c0023c9c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023ca0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023ca5:	52                   	push   edx
c0023ca6:	6a 0c                	push   0xc
c0023ca8:	56                   	push   esi
c0023ca9:	57                   	push   edi
c0023caa:	e8 f9 f4 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023caf:	83 c4 10             	add    esp,0x10
c0023cb2:	4b                   	dec    ebx
c0023cb3:	75 f0                	jne    c0023ca5 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023cb5:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023cba:	50                   	push   eax
c0023cbb:	6a 0c                	push   0xc
c0023cbd:	56                   	push   esi
c0023cbe:	57                   	push   edi
c0023cbf:	e8 e4 f4 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0023cc4:	83 c4 10             	add    esp,0x10
c0023cc7:	a8 01                	test   al,0x1
c0023cc9:	74 12                	je     c0023cdd <IDE::polling(unsigned char, unsigned int)+0x49>
c0023ccb:	83 ec 0c             	sub    esp,0xc
c0023cce:	68 09 ce 02 c0       	push   0xc002ce09
c0023cd3:	e8 60 f3 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023cd8:	83 c4 10             	add    esp,0x10
c0023cdb:	eb 17                	jmp    c0023cf4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cdd:	a8 20                	test   al,0x20
c0023cdf:	75 0f                	jne    c0023cf0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023ce1:	4b                   	dec    ebx
c0023ce2:	74 10                	je     c0023cf4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023ce4:	84 c0                	test   al,al
c0023ce6:	78 d2                	js     c0023cba <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ce8:	a8 08                	test   al,0x8
c0023cea:	74 ce                	je     c0023cba <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cec:	31 c0                	xor    eax,eax
c0023cee:	eb 06                	jmp    c0023cf6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cf0:	b0 01                	mov    al,0x1
c0023cf2:	eb 02                	jmp    c0023cf6 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cf4:	b0 02                	mov    al,0x2
c0023cf6:	5b                   	pop    ebx
c0023cf7:	5e                   	pop    esi
c0023cf8:	5f                   	pop    edi
c0023cf9:	c3                   	ret    

c0023cfa <SATABus::close(int, int, void*)>:
c0023cfa:	31 c0                	xor    eax,eax
c0023cfc:	c3                   	ret    
c0023cfd:	90                   	nop

c0023cfe <SATABus::detect()>:
c0023cfe:	c3                   	ret    
c0023cff:	90                   	nop

c0023d00 <SATABus::SATABus()>:
c0023d00:	83 ec 0c             	sub    esp,0xc
c0023d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d07:	83 ec 08             	sub    esp,0x8
c0023d0a:	68 4c ce 02 c0       	push   0xc002ce4c
c0023d0f:	50                   	push   eax
c0023d10:	e8 d5 0a ff ff       	call   c00147ea <HardDiskController::HardDiskController(char const*)>
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	ba 08 cf 02 c0       	mov    edx,0xc002cf08
c0023d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d21:	89 10                	mov    DWORD PTR [eax],edx
c0023d23:	83 ec 0c             	sub    esp,0xc
c0023d26:	6a 50                	push   0x50
c0023d28:	e8 fe c2 fe ff       	call   c001002b <Phys::allocateContiguousPages(int)>
c0023d2d:	83 c4 10             	add    esp,0x10
c0023d30:	89 c2                	mov    edx,eax
c0023d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d36:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d3c:	83 ec 0c             	sub    esp,0xc
c0023d3f:	6a 50                	push   0x50
c0023d41:	e8 5f de fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0023d46:	83 c4 10             	add    esp,0x10
c0023d49:	89 c2                	mov    edx,eax
c0023d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d55:	e8 e6 e0 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0023d5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d5e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d68:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d6e:	83 ec 0c             	sub    esp,0xc
c0023d71:	6a 03                	push   0x3
c0023d73:	6a 50                	push   0x50
c0023d75:	51                   	push   ecx
c0023d76:	52                   	push   edx
c0023d77:	50                   	push   eax
c0023d78:	e8 f3 e8 fe ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d7d:	83 c4 20             	add    esp,0x20
c0023d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d84:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d8e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d94:	83 ec 04             	sub    esp,0x4
c0023d97:	52                   	push   edx
c0023d98:	50                   	push   eax
c0023d99:	68 70 ce 02 c0       	push   0xc002ce70
c0023d9e:	e8 95 f2 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023da3:	83 c4 10             	add    esp,0x10
c0023da6:	90                   	nop
c0023da7:	83 c4 0c             	add    esp,0xc
c0023daa:	c3                   	ret    
c0023dab:	90                   	nop

c0023dac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023dac:	83 ec 0c             	sub    esp,0xc
c0023daf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023db3:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023db6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023db9:	09 c2                	or     edx,eax
c0023dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023dc5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023dc7:	31 c0                	xor    eax,eax
c0023dc9:	c1 e9 08             	shr    ecx,0x8
c0023dcc:	83 e1 0f             	and    ecx,0xf
c0023dcf:	39 c8                	cmp    eax,ecx
c0023dd1:	74 0a                	je     c0023ddd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023dd3:	f6 c2 01             	test   dl,0x1
c0023dd6:	74 18                	je     c0023df0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dd8:	d1 ea                	shr    edx,1
c0023dda:	40                   	inc    eax
c0023ddb:	eb f2                	jmp    c0023dcf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ddd:	83 ec 0c             	sub    esp,0xc
c0023de0:	68 94 ce 02 c0       	push   0xc002ce94
c0023de5:	e8 fb 68 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0023dea:	83 c4 10             	add    esp,0x10
c0023ded:	83 c8 ff             	or     eax,0xffffffff
c0023df0:	83 c4 0c             	add    esp,0xc
c0023df3:	c3                   	ret    

c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023df4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023df8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023dfb:	89 c2                	mov    edx,eax
c0023dfd:	c1 ea 08             	shr    edx,0x8
c0023e00:	83 e2 0f             	and    edx,0xf
c0023e03:	fe ca                	dec    dl
c0023e05:	75 31                	jne    c0023e38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e07:	83 e0 0f             	and    eax,0xf
c0023e0a:	3c 03                	cmp    al,0x3
c0023e0c:	75 2a                	jne    c0023e38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023e0e:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023e11:	b8 02 00 00 00       	mov    eax,0x2
c0023e16:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e1c:	74 1c                	je     c0023e3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e1e:	b8 04 00 00 00       	mov    eax,0x4
c0023e23:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e29:	74 0f                	je     c0023e3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e2b:	31 c0                	xor    eax,eax
c0023e2d:	83 fa 03             	cmp    edx,0x3
c0023e30:	0f 94 c0             	sete   al
c0023e33:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e37:	c3                   	ret    
c0023e38:	31 c0                	xor    eax,eax
c0023e3a:	c3                   	ret    
c0023e3b:	90                   	nop

c0023e3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e40:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e43:	0f ba e2 0f          	bt     edx,0xf
c0023e47:	72 f7                	jb     c0023e40 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e49:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e4c:	83 ca 10             	or     edx,0x10
c0023e4f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e55:	83 ca 01             	or     edx,0x1
c0023e58:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e5b:	c3                   	ret    

c0023e5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e63:	83 e2 fe             	and    edx,0xfffffffe
c0023e66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e6c:	83 e2 ef             	and    edx,0xffffffef
c0023e6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e75:	0f ba e2 0e          	bt     edx,0xe
c0023e79:	72 f7                	jb     c0023e72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e7b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e7e:	0f ba e2 0f          	bt     edx,0xf
c0023e82:	72 ee                	jb     c0023e72 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e84:	c3                   	ret    
c0023e85:	90                   	nop

c0023e86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e86:	55                   	push   ebp
c0023e87:	57                   	push   edi
c0023e88:	56                   	push   esi
c0023e89:	53                   	push   ebx
c0023e8a:	83 ec 1c             	sub    esp,0x1c
c0023e8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e95:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e99:	53                   	push   ebx
c0023e9a:	89 fd                	mov    ebp,edi
c0023e9c:	56                   	push   esi
c0023e9d:	c1 e5 0a             	shl    ebp,0xa
c0023ea0:	e8 b7 ff ff ff       	call   c0023e5c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023ea5:	83 ec 0c             	sub    esp,0xc
c0023ea8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023eae:	01 e8                	add    eax,ebp
c0023eb0:	89 03                	mov    DWORD PTR [ebx],eax
c0023eb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb4:	68 00 04 00 00       	push   0x400
c0023eb9:	6a 00                	push   0x0
c0023ebb:	50                   	push   eax
c0023ebc:	e8 b7 c8 fd ff       	call   c0000778 <memset>
c0023ec1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ec7:	89 fa                	mov    edx,edi
c0023ec9:	01 e8                	add    eax,ebp
c0023ecb:	c1 e7 0d             	shl    edi,0xd
c0023ece:	89 03                	mov    DWORD PTR [ebx],eax
c0023ed0:	c1 e2 08             	shl    edx,0x8
c0023ed3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023eda:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ee4:	89 d0                	mov    eax,edx
c0023ee6:	83 c4 1c             	add    esp,0x1c
c0023ee9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023eef:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ef2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ef5:	68 00 01 00 00       	push   0x100
c0023efa:	6a 00                	push   0x0
c0023efc:	50                   	push   eax
c0023efd:	e8 76 c8 fd ff       	call   c0000778 <memset>
c0023f02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023f06:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023f0c:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023f12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023f16:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023f19:	83 c4 10             	add    esp,0x10
c0023f1c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f23:	31 ff                	xor    edi,edi
c0023f25:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f2b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f35:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f3b:	83 c5 20             	add    ebp,0x20
c0023f3e:	01 f8                	add    eax,edi
c0023f40:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f43:	52                   	push   edx
c0023f44:	68 00 01 00 00       	push   0x100
c0023f49:	6a 00                	push   0x0
c0023f4b:	50                   	push   eax
c0023f4c:	e8 27 c8 fd ff       	call   c0000778 <memset>
c0023f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f55:	83 c4 10             	add    esp,0x10
c0023f58:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f5e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f65:	01 f8                	add    eax,edi
c0023f67:	81 c7 00 01 00 00    	add    edi,0x100
c0023f6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f70:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f76:	75 b3                	jne    c0023f2b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f78:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f7c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f80:	83 c4 1c             	add    esp,0x1c
c0023f83:	5b                   	pop    ebx
c0023f84:	5e                   	pop    esi
c0023f85:	5f                   	pop    edi
c0023f86:	5d                   	pop    ebp
c0023f87:	e9 b0 fe ff ff       	jmp    c0023e3c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f8c:	55                   	push   ebp
c0023f8d:	57                   	push   edi
c0023f8e:	56                   	push   esi
c0023f8f:	53                   	push   ebx
c0023f90:	31 db                	xor    ebx,ebx
c0023f92:	83 ec 0c             	sub    esp,0xc
c0023f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f9d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023fa0:	f7 c7 01 00 00 00    	test   edi,0x1
c0023fa6:	0f 84 aa 00 00 00    	je     c0024056 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023fb0:	89 d8                	mov    eax,ebx
c0023fb2:	c1 e0 07             	shl    eax,0x7
c0023fb5:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023fbc:	55                   	push   ebp
c0023fbd:	56                   	push   esi
c0023fbe:	e8 31 fe ff ff       	call   c0023df4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fc3:	5a                   	pop    edx
c0023fc4:	83 f8 01             	cmp    eax,0x1
c0023fc7:	59                   	pop    ecx
c0023fc8:	75 30                	jne    c0023ffa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023fca:	50                   	push   eax
c0023fcb:	50                   	push   eax
c0023fcc:	53                   	push   ebx
c0023fcd:	68 b9 ce 02 c0       	push   0xc002ceb9
c0023fd2:	e8 61 f0 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	53                   	push   ebx
c0023fdb:	55                   	push   ebp
c0023fdc:	56                   	push   esi
c0023fdd:	e8 a4 fe ff ff       	call   c0023e86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fe2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fe9:	e8 55 b8 fe ff       	call   c000f843 <malloc>
c0023fee:	89 c5                	mov    ebp,eax
c0023ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ff3:	e8 60 0d 00 00       	call   c0024d58 <SATA::SATA()>
c0023ff8:	eb 33                	jmp    c002402d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023ffa:	83 f8 04             	cmp    eax,0x4
c0023ffd:	75 47                	jne    c0024046 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fff:	50                   	push   eax
c0024000:	50                   	push   eax
c0024001:	53                   	push   ebx
c0024002:	68 d0 ce 02 c0       	push   0xc002ced0
c0024007:	e8 2c f0 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c002400c:	83 c4 0c             	add    esp,0xc
c002400f:	53                   	push   ebx
c0024010:	55                   	push   ebp
c0024011:	56                   	push   esi
c0024012:	e8 6f fe ff ff       	call   c0023e86 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024017:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002401e:	e8 20 b8 fe ff       	call   c000f843 <malloc>
c0024023:	89 c5                	mov    ebp,eax
c0024025:	89 04 24             	mov    DWORD PTR [esp],eax
c0024028:	e8 d7 10 00 00       	call   c0025104 <SATAPI::SATAPI()>
c002402d:	5a                   	pop    edx
c002402e:	59                   	pop    ecx
c002402f:	55                   	push   ebp
c0024030:	56                   	push   esi
c0024031:	e8 28 04 ff ff       	call   c001445e <Device::addChild(Device*)>
c0024036:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024039:	56                   	push   esi
c002403a:	6a 00                	push   0x0
c002403c:	53                   	push   ebx
c002403d:	55                   	push   ebp
c002403e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024041:	83 c4 20             	add    esp,0x20
c0024044:	eb 10                	jmp    c0024056 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024046:	50                   	push   eax
c0024047:	50                   	push   eax
c0024048:	53                   	push   ebx
c0024049:	68 e9 ce 02 c0       	push   0xc002cee9
c002404e:	e8 e5 ef fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0024053:	83 c4 10             	add    esp,0x10
c0024056:	d1 ef                	shr    edi,1
c0024058:	43                   	inc    ebx
c0024059:	83 fb 20             	cmp    ebx,0x20
c002405c:	0f 85 3e ff ff ff    	jne    c0023fa0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024062:	83 c4 0c             	add    esp,0xc
c0024065:	5b                   	pop    ebx
c0024066:	5e                   	pop    esi
c0024067:	5f                   	pop    edi
c0024068:	5d                   	pop    ebp
c0024069:	c3                   	ret    

c002406a <SATABus::open(int, int, void*)>:
c002406a:	83 ec 14             	sub    esp,0x14
c002406d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024071:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024077:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002407d:	52                   	push   edx
c002407e:	50                   	push   eax
c002407f:	e8 08 ff ff ff       	call   c0023f8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024084:	31 c0                	xor    eax,eax
c0024086:	83 c4 1c             	add    esp,0x1c
c0024089:	c3                   	ret    

c002408a <ATA::close(int, int, void*)>:
c002408a:	83 ec 0c             	sub    esp,0xc
c002408d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024091:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024097:	85 c0                	test   eax,eax
c0024099:	74 0c                	je     c00240a7 <ATA::close(int, int, void*)+0x1d>
c002409b:	83 ec 0c             	sub    esp,0xc
c002409e:	8b 10                	mov    edx,DWORD PTR [eax]
c00240a0:	50                   	push   eax
c00240a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00240a4:	83 c4 10             	add    esp,0x10
c00240a7:	31 c0                	xor    eax,eax
c00240a9:	83 c4 0c             	add    esp,0xc
c00240ac:	c3                   	ret    
c00240ad:	90                   	nop

c00240ae <ATA::powerSaving(PowerSavingLevel)>:
c00240ae:	c3                   	ret    
c00240af:	90                   	nop

c00240b0 <ATA::ATA()>:
c00240b0:	83 ec 0c             	sub    esp,0xc
c00240b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240b7:	83 ec 04             	sub    esp,0x4
c00240ba:	68 00 02 00 00       	push   0x200
c00240bf:	68 d1 cf 02 c0       	push   0xc002cfd1
c00240c4:	50                   	push   eax
c00240c5:	e8 b8 07 ff ff       	call   c0014882 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240ca:	83 c4 10             	add    esp,0x10
c00240cd:	ba 54 cf 02 c0       	mov    edx,0xc002cf54
c00240d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240d6:	89 10                	mov    DWORD PTR [eax],edx
c00240d8:	90                   	nop
c00240d9:	83 c4 0c             	add    esp,0xc
c00240dc:	c3                   	ret    
c00240dd:	90                   	nop

c00240de <ATA::flush(bool)>:
c00240de:	53                   	push   ebx
c00240df:	83 ec 08             	sub    esp,0x8
c00240e2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240eb:	19 c0                	sbb    eax,eax
c00240ed:	83 e0 fd             	and    eax,0xfffffffd
c00240f0:	05 ea 00 00 00       	add    eax,0xea
c00240f5:	50                   	push   eax
c00240f6:	6a 07                	push   0x7
c00240f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ff:	50                   	push   eax
c0024100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024106:	e8 dd ef ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002410b:	83 c4 0c             	add    esp,0xc
c002410e:	6a 00                	push   0x0
c0024110:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024117:	50                   	push   eax
c0024118:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002411e:	e8 71 fb ff ff       	call   c0023c94 <IDE::polling(unsigned char, unsigned int)>
c0024123:	83 c4 18             	add    esp,0x18
c0024126:	5b                   	pop    ebx
c0024127:	c3                   	ret    

c0024128 <ATA::readyForCommand()>:
c0024128:	56                   	push   esi
c0024129:	53                   	push   ebx
c002412a:	31 db                	xor    ebx,ebx
c002412c:	50                   	push   eax
c002412d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024131:	50                   	push   eax
c0024132:	6a 0c                	push   0xc
c0024134:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002413b:	50                   	push   eax
c002413c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024142:	e8 61 f0 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0024147:	83 c4 10             	add    esp,0x10
c002414a:	a8 88                	test   al,0x88
c002414c:	74 23                	je     c0024171 <ATA::readyForCommand()+0x49>
c002414e:	43                   	inc    ebx
c002414f:	83 fb 63             	cmp    ebx,0x63
c0024152:	7e dd                	jle    c0024131 <ATA::readyForCommand()+0x9>
c0024154:	51                   	push   ecx
c0024155:	51                   	push   ecx
c0024156:	6a 00                	push   0x0
c0024158:	68 40 42 0f 00       	push   0xf4240
c002415d:	e8 c8 a2 ff ff       	call   c001e42a <nanoSleep(unsigned long long)>
c0024162:	83 c4 10             	add    esp,0x10
c0024165:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002416b:	75 c4                	jne    c0024131 <ATA::readyForCommand()+0x9>
c002416d:	31 c0                	xor    eax,eax
c002416f:	eb 02                	jmp    c0024173 <ATA::readyForCommand()+0x4b>
c0024171:	b0 01                	mov    al,0x1
c0024173:	5a                   	pop    edx
c0024174:	5b                   	pop    ebx
c0024175:	5e                   	pop    esi
c0024176:	c3                   	ret    
c0024177:	90                   	nop

c0024178 <ATA::access(unsigned long long, int, void*, bool)>:
c0024178:	55                   	push   ebp
c0024179:	57                   	push   edi
c002417a:	56                   	push   esi
c002417b:	53                   	push   ebx
c002417c:	83 ec 2c             	sub    esp,0x2c
c002417f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024183:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024187:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002418b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002418f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024193:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024197:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002419b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00241a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241a5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00241af:	c1 e0 06             	shl    eax,0x6
c00241b2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00241ba:	74 5d                	je     c0024219 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00241bc:	89 fa                	mov    edx,edi
c00241be:	89 f0                	mov    eax,esi
c00241c0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241c4:	c1 ea 1c             	shr    edx,0x1c
c00241c7:	89 d1                	mov    ecx,edx
c00241c9:	09 c1                	or     ecx,eax
c00241cb:	74 25                	je     c00241f2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00241cd:	31 ed                	xor    ebp,ebp
c00241cf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241d6:	89 fa                	mov    edx,edi
c00241d8:	89 f0                	mov    eax,esi
c00241da:	0f ad d0             	shrd   eax,edx,cl
c00241dd:	d3 ea                	shr    edx,cl
c00241df:	f6 c1 20             	test   cl,0x20
c00241e2:	74 02                	je     c00241e6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241e4:	89 d0                	mov    eax,edx
c00241e6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241ea:	45                   	inc    ebp
c00241eb:	83 fd 06             	cmp    ebp,0x6
c00241ee:	75 df                	jne    c00241cf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241f0:	eb 76                	jmp    c0024268 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241f2:	89 f0                	mov    eax,esi
c00241f4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241f9:	89 fa                	mov    edx,edi
c00241fb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024202:	0f ac d0 10          	shrd   eax,edx,0x10
c0024206:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002420b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002420f:	c1 ee 18             	shr    esi,0x18
c0024212:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024217:	eb 56                	jmp    c002426f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024219:	6a 00                	push   0x0
c002421b:	6a 3f                	push   0x3f
c002421d:	57                   	push   edi
c002421e:	56                   	push   esi
c002421f:	e8 98 29 00 00       	call   c0026bbc <__umoddi3>
c0024224:	83 c4 10             	add    esp,0x10
c0024227:	40                   	inc    eax
c0024228:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002422c:	6a 00                	push   0x0
c002422e:	68 f0 03 00 00       	push   0x3f0
c0024233:	57                   	push   edi
c0024234:	56                   	push   esi
c0024235:	e8 82 28 00 00       	call   c0026abc <__udivdi3>
c002423a:	83 c4 10             	add    esp,0x10
c002423d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024242:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024249:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002424e:	6a 00                	push   0x0
c0024250:	6a 3f                	push   0x3f
c0024252:	57                   	push   edi
c0024253:	56                   	push   esi
c0024254:	e8 63 28 00 00       	call   c0026abc <__udivdi3>
c0024259:	83 c4 10             	add    esp,0x10
c002425c:	89 c6                	mov    esi,eax
c002425e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024263:	83 e6 0f             	and    esi,0xf
c0024266:	eb 07                	jmp    c002426f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024268:	31 f6                	xor    esi,esi
c002426a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002426f:	bf 01 00 00 00       	mov    edi,0x1
c0024274:	50                   	push   eax
c0024275:	6a 00                	push   0x0
c0024277:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002427e:	50                   	push   eax
c002427f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024283:	e8 6c f0 ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c0024288:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002428b:	e8 98 fe ff ff       	call   c0024128 <ATA::readyForCommand()>
c0024290:	83 c4 10             	add    esp,0x10
c0024293:	84 c0                	test   al,al
c0024295:	0f 84 5a 02 00 00    	je     c00244f5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002429b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00242a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242a7:	c1 e0 04             	shl    eax,0x4
c00242aa:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00242b1:	09 c6                	or     esi,eax
c00242b3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00242b8:	75 05                	jne    c00242bf <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00242ba:	83 ce a0             	or     esi,0xffffffa0
c00242bd:	eb 03                	jmp    c00242c2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00242bf:	83 ce e0             	or     esi,0xffffffe0
c00242c2:	89 f0                	mov    eax,esi
c00242c4:	0f b6 f0             	movzx  esi,al
c00242c7:	56                   	push   esi
c00242c8:	6a 06                	push   0x6
c00242ca:	51                   	push   ecx
c00242cb:	52                   	push   edx
c00242cc:	e8 17 ee ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d1:	83 c4 10             	add    esp,0x10
c00242d4:	6a 00                	push   0x0
c00242d6:	6a 01                	push   0x1
c00242d8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242df:	50                   	push   eax
c00242e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e6:	e8 fd ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242eb:	83 c4 10             	add    esp,0x10
c00242ee:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242f3:	75 6e                	jne    c0024363 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242f5:	6a 00                	push   0x0
c00242f7:	6a 08                	push   0x8
c00242f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024300:	50                   	push   eax
c0024301:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024307:	e8 dc ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024311:	50                   	push   eax
c0024312:	6a 09                	push   0x9
c0024314:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431b:	50                   	push   eax
c002431c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024322:	e8 c1 ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024327:	83 c4 20             	add    esp,0x20
c002432a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002432f:	50                   	push   eax
c0024330:	6a 0a                	push   0xa
c0024332:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024339:	50                   	push   eax
c002433a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024340:	e8 a3 ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024345:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002434a:	50                   	push   eax
c002434b:	6a 0b                	push   0xb
c002434d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024354:	50                   	push   eax
c0024355:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435b:	e8 88 ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024360:	83 c4 20             	add    esp,0x20
c0024363:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024368:	50                   	push   eax
c0024369:	6a 02                	push   0x2
c002436b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024372:	50                   	push   eax
c0024373:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024379:	e8 6a ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024383:	50                   	push   eax
c0024384:	6a 03                	push   0x3
c0024386:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002438d:	50                   	push   eax
c002438e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024394:	e8 4f ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024399:	83 c4 20             	add    esp,0x20
c002439c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00243a1:	50                   	push   eax
c00243a2:	6a 04                	push   0x4
c00243a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ab:	50                   	push   eax
c00243ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b2:	e8 31 ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00243bc:	50                   	push   eax
c00243bd:	6a 05                	push   0x5
c00243bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c6:	50                   	push   eax
c00243c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243cd:	e8 16 ed ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d2:	83 c4 20             	add    esp,0x20
c00243d5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243da:	0f 94 c0             	sete   al
c00243dd:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243e2:	74 09                	je     c00243ed <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243e4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243eb:	eb 07                	jmp    c00243f4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243ed:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243f4:	0f b6 c0             	movzx  eax,al
c00243f7:	50                   	push   eax
c00243f8:	6a 07                	push   0x7
c00243fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024401:	50                   	push   eax
c0024402:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024408:	e8 db ec ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024411:	83 c4 10             	add    esp,0x10
c0024414:	85 f6                	test   esi,esi
c0024416:	0f 84 ba 00 00 00    	je     c00244d6 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002441c:	50                   	push   eax
c002441d:	6a 01                	push   0x1
c002441f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024426:	50                   	push   eax
c0024427:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002442d:	e8 62 f8 ff ff       	call   c0023c94 <IDE::polling(unsigned char, unsigned int)>
c0024432:	83 c4 10             	add    esp,0x10
c0024435:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002443b:	84 c0                	test   al,al
c002443d:	74 2c                	je     c002446b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002443f:	0f b6 f8             	movzx  edi,al
c0024442:	0f b6 d2             	movzx  edx,dl
c0024445:	57                   	push   edi
c0024446:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002444d:	50                   	push   eax
c002444e:	52                   	push   edx
c002444f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024455:	e8 a4 f6 ff ff       	call   c0023afe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002445a:	c7 04 24 2c cf 02 c0 	mov    DWORD PTR [esp],0xc002cf2c
c0024461:	e8 d2 eb fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0024466:	e9 87 00 00 00       	jmp    c00244f2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002446b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024470:	74 33                	je     c00244a5 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024472:	31 ed                	xor    ebp,ebp
c0024474:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024478:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002447c:	50                   	push   eax
c002447d:	50                   	push   eax
c002447e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024485:	50                   	push   eax
c0024486:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002448c:	e8 45 ec ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c0024491:	89 c2                	mov    edx,eax
c0024493:	89 f8                	mov    eax,edi
c0024495:	66 ef                	out    dx,ax
c0024497:	45                   	inc    ebp
c0024498:	83 c4 10             	add    esp,0x10
c002449b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00244a1:	75 d1                	jne    c0024474 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00244a3:	eb 23                	jmp    c00244c8 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00244a5:	0f b6 d2             	movzx  edx,dl
c00244a8:	51                   	push   ecx
c00244a9:	51                   	push   ecx
c00244aa:	52                   	push   edx
c00244ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00244b1:	e8 20 ec ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c00244b6:	b9 00 01 00 00       	mov    ecx,0x100
c00244bb:	89 c2                	mov    edx,eax
c00244bd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00244c1:	fc                   	cld    
c00244c2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00244c5:	83 c4 10             	add    esp,0x10
c00244c8:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00244d0:	4e                   	dec    esi
c00244d1:	e9 3e ff ff ff       	jmp    c0024414 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00244d6:	31 ff                	xor    edi,edi
c00244d8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244dd:	74 16                	je     c00244f5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00244df:	50                   	push   eax
c00244e0:	50                   	push   eax
c00244e1:	31 c0                	xor    eax,eax
c00244e3:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244e8:	0f 94 c0             	sete   al
c00244eb:	50                   	push   eax
c00244ec:	53                   	push   ebx
c00244ed:	e8 ec fb ff ff       	call   c00240de <ATA::flush(bool)>
c00244f2:	83 c4 10             	add    esp,0x10
c00244f5:	83 c4 2c             	add    esp,0x2c
c00244f8:	89 f8                	mov    eax,edi
c00244fa:	5b                   	pop    ebx
c00244fb:	5e                   	pop    esi
c00244fc:	5f                   	pop    edi
c00244fd:	5d                   	pop    ebp
c00244fe:	c3                   	ret    
c00244ff:	90                   	nop

c0024500 <ATA::read(unsigned long long, int, void*)>:
c0024500:	57                   	push   edi
c0024501:	b8 04 00 00 00       	mov    eax,0x4
c0024506:	56                   	push   esi
c0024507:	53                   	push   ebx
c0024508:	83 ec 10             	sub    esp,0x10
c002450b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002450f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024513:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024516:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002451a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002451e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024524:	77 3b                	ja     c0024561 <ATA::read(unsigned long long, int, void*)+0x61>
c0024526:	b8 06 00 00 00       	mov    eax,0x6
c002452b:	85 d2                	test   edx,edx
c002452d:	74 32                	je     c0024561 <ATA::read(unsigned long long, int, void*)+0x61>
c002452f:	50                   	push   eax
c0024530:	50                   	push   eax
c0024531:	6a 00                	push   0x0
c0024533:	52                   	push   edx
c0024534:	53                   	push   ebx
c0024535:	57                   	push   edi
c0024536:	56                   	push   esi
c0024537:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002453b:	e8 38 fc ff ff       	call   c0024178 <ATA::access(unsigned long long, int, void*, bool)>
c0024540:	83 c4 20             	add    esp,0x20
c0024543:	85 c0                	test   eax,eax
c0024545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024549:	75 11                	jne    c002455c <ATA::read(unsigned long long, int, void*)+0x5c>
c002454b:	01 1d e8 28 03 c0    	add    DWORD PTR ds:0xc00328e8,ebx
c0024551:	e8 a4 c4 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0024556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002455a:	eb 05                	jmp    c0024561 <ATA::read(unsigned long long, int, void*)+0x61>
c002455c:	b8 01 00 00 00       	mov    eax,0x1
c0024561:	83 c4 10             	add    esp,0x10
c0024564:	5b                   	pop    ebx
c0024565:	5e                   	pop    esi
c0024566:	5f                   	pop    edi
c0024567:	c3                   	ret    

c0024568 <ATA::write(unsigned long long, int, void*)>:
c0024568:	57                   	push   edi
c0024569:	b8 04 00 00 00       	mov    eax,0x4
c002456e:	56                   	push   esi
c002456f:	53                   	push   ebx
c0024570:	83 ec 10             	sub    esp,0x10
c0024573:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024577:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002457b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002457e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024582:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024586:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002458c:	77 3b                	ja     c00245c9 <ATA::write(unsigned long long, int, void*)+0x61>
c002458e:	b8 06 00 00 00       	mov    eax,0x6
c0024593:	85 d2                	test   edx,edx
c0024595:	74 32                	je     c00245c9 <ATA::write(unsigned long long, int, void*)+0x61>
c0024597:	50                   	push   eax
c0024598:	50                   	push   eax
c0024599:	6a 01                	push   0x1
c002459b:	52                   	push   edx
c002459c:	53                   	push   ebx
c002459d:	57                   	push   edi
c002459e:	56                   	push   esi
c002459f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00245a3:	e8 d0 fb ff ff       	call   c0024178 <ATA::access(unsigned long long, int, void*, bool)>
c00245a8:	83 c4 20             	add    esp,0x20
c00245ab:	85 c0                	test   eax,eax
c00245ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245b1:	75 11                	jne    c00245c4 <ATA::write(unsigned long long, int, void*)+0x5c>
c00245b3:	01 1d e4 28 03 c0    	add    DWORD PTR ds:0xc00328e4,ebx
c00245b9:	e8 3c c4 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c00245be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245c2:	eb 05                	jmp    c00245c9 <ATA::write(unsigned long long, int, void*)+0x61>
c00245c4:	b8 01 00 00 00       	mov    eax,0x1
c00245c9:	83 c4 10             	add    esp,0x10
c00245cc:	5b                   	pop    ebx
c00245cd:	5e                   	pop    esi
c00245ce:	5f                   	pop    edi
c00245cf:	c3                   	ret    

c00245d0 <ATA::detectCHS()>:
c00245d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245d4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00245da:	c1 e0 06             	shl    eax,0x6
c00245dd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245e3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245ed:	c7 44 24 04 37 cf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cf37
c00245f5:	e9 eb 60 ff ff       	jmp    c001a6e5 <Krnl::panic(char const*)>

c00245fa <ATA::open(int, int, void*)>:
c00245fa:	53                   	push   ebx
c00245fb:	83 ec 08             	sub    esp,0x8
c00245fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024602:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024606:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002460a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024610:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024616:	c1 e0 06             	shl    eax,0x6
c0024619:	01 d0                	add    eax,edx
c002461b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024622:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024628:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002462f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024639:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002463f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024646:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002464d:	75 0c                	jne    c002465b <ATA::open(int, int, void*)+0x61>
c002464f:	83 ec 0c             	sub    esp,0xc
c0024652:	53                   	push   ebx
c0024653:	e8 78 ff ff ff       	call   c00245d0 <ATA::detectCHS()>
c0024658:	83 c4 10             	add    esp,0x10
c002465b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024661:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024667:	c1 e0 06             	shl    eax,0x6
c002466a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024671:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002467b:	d1 e8                	shr    eax,1
c002467d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024683:	6a 04                	push   0x4
c0024685:	6a 0c                	push   0xc
c0024687:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002468e:	50                   	push   eax
c002468f:	52                   	push   edx
c0024690:	e8 53 ea ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024695:	90                   	nop
c0024696:	90                   	nop
c0024697:	6a 00                	push   0x0
c0024699:	6a 0c                	push   0xc
c002469b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246a2:	50                   	push   eax
c00246a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246a9:	e8 3a ea ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ae:	83 c4 14             	add    esp,0x14
c00246b1:	53                   	push   ebx
c00246b2:	e8 33 02 ff ff       	call   c00148ea <PhysicalDisk::startCache()>
c00246b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246ba:	e8 ad 23 ff ff       	call   c0016a6c <createPartitionsForDisk(PhysicalDisk*)>
c00246bf:	31 c0                	xor    eax,eax
c00246c1:	83 c4 18             	add    esp,0x18
c00246c4:	5b                   	pop    ebx
c00246c5:	c3                   	ret    

c00246c6 <ATAPI::write(unsigned long long, int, void*)>:
c00246c6:	b8 03 00 00 00       	mov    eax,0x3
c00246cb:	c3                   	ret    

c00246cc <ATAPI::close(int, int, void*)>:
c00246cc:	83 ec 0c             	sub    esp,0xc
c00246cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246d9:	85 c0                	test   eax,eax
c00246db:	74 0c                	je     c00246e9 <ATAPI::close(int, int, void*)+0x1d>
c00246dd:	83 ec 0c             	sub    esp,0xc
c00246e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00246e2:	50                   	push   eax
c00246e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246e6:	83 c4 10             	add    esp,0x10
c00246e9:	31 c0                	xor    eax,eax
c00246eb:	83 c4 0c             	add    esp,0xc
c00246ee:	c3                   	ret    
c00246ef:	90                   	nop

c00246f0 <ATAPI::ATAPI()>:
c00246f0:	83 ec 0c             	sub    esp,0xc
c00246f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246f7:	83 ec 04             	sub    esp,0x4
c00246fa:	68 00 08 00 00       	push   0x800
c00246ff:	68 71 d0 02 c0       	push   0xc002d071
c0024704:	50                   	push   eax
c0024705:	e8 78 01 ff ff       	call   c0014882 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002470a:	83 c4 10             	add    esp,0x10
c002470d:	ba 8c cf 02 c0       	mov    edx,0xc002cf8c
c0024712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024716:	89 10                	mov    DWORD PTR [eax],edx
c0024718:	90                   	nop
c0024719:	83 c4 0c             	add    esp,0xc
c002471c:	c3                   	ret    
c002471d:	90                   	nop

c002471e <ATAPI::readyForCommand()>:
c002471e:	56                   	push   esi
c002471f:	53                   	push   ebx
c0024720:	31 db                	xor    ebx,ebx
c0024722:	50                   	push   eax
c0024723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024727:	50                   	push   eax
c0024728:	6a 0c                	push   0xc
c002472a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024731:	50                   	push   eax
c0024732:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024738:	e8 6b ea ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c002473d:	83 c4 10             	add    esp,0x10
c0024740:	a8 88                	test   al,0x88
c0024742:	74 23                	je     c0024767 <ATAPI::readyForCommand()+0x49>
c0024744:	43                   	inc    ebx
c0024745:	83 fb 63             	cmp    ebx,0x63
c0024748:	7e dd                	jle    c0024727 <ATAPI::readyForCommand()+0x9>
c002474a:	51                   	push   ecx
c002474b:	51                   	push   ecx
c002474c:	6a 00                	push   0x0
c002474e:	68 40 42 0f 00       	push   0xf4240
c0024753:	e8 d2 9c ff ff       	call   c001e42a <nanoSleep(unsigned long long)>
c0024758:	83 c4 10             	add    esp,0x10
c002475b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024761:	75 c4                	jne    c0024727 <ATAPI::readyForCommand()+0x9>
c0024763:	31 c0                	xor    eax,eax
c0024765:	eb 02                	jmp    c0024769 <ATAPI::readyForCommand()+0x4b>
c0024767:	b0 01                	mov    al,0x1
c0024769:	5a                   	pop    edx
c002476a:	5b                   	pop    ebx
c002476b:	5e                   	pop    esi
c002476c:	c3                   	ret    
c002476d:	90                   	nop

c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002476e:	55                   	push   ebp
c002476f:	57                   	push   edi
c0024770:	56                   	push   esi
c0024771:	53                   	push   ebx
c0024772:	83 ec 20             	sub    esp,0x20
c0024775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024779:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002477d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024781:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024785:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024789:	6a 01                	push   0x1
c002478b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024792:	50                   	push   eax
c0024793:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024799:	e8 56 eb ff ff       	call   c00232f4 <IDE::enableIRQs(unsigned char, bool)>
c002479e:	5e                   	pop    esi
c002479f:	58                   	pop    eax
c00247a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a7:	50                   	push   eax
c00247a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ae:	e8 0f e9 ff ff       	call   c00230c2 <IDE::prepareInterrupt(unsigned char)>
c00247b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00247b6:	e8 63 ff ff ff       	call   c002471e <ATAPI::readyForCommand()>
c00247bb:	83 c4 10             	add    esp,0x10
c00247be:	84 c0                	test   al,al
c00247c0:	75 0a                	jne    c00247cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00247c2:	bb 01 00 00 00       	mov    ebx,0x1
c00247c7:	e9 57 02 00 00       	jmp    c0024a23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247cc:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00247d2:	c1 e0 04             	shl    eax,0x4
c00247d5:	0f b6 c0             	movzx  eax,al
c00247d8:	50                   	push   eax
c00247d9:	6a 06                	push   0x6
c00247db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e2:	50                   	push   eax
c00247e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e9:	e8 fa e8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247ee:	6a 00                	push   0x0
c00247f0:	6a 01                	push   0x1
c00247f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247f9:	50                   	push   eax
c00247fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024800:	e8 e3 e8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024805:	83 c4 20             	add    esp,0x20
c0024808:	0f b6 c3             	movzx  eax,bl
c002480b:	0f b6 df             	movzx  ebx,bh
c002480e:	50                   	push   eax
c002480f:	6a 04                	push   0x4
c0024811:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024818:	50                   	push   eax
c0024819:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002481f:	e8 c4 e8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024824:	53                   	push   ebx
c0024825:	6a 05                	push   0x5
c0024827:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002482e:	50                   	push   eax
c002482f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024835:	e8 ae e8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002483a:	83 c4 20             	add    esp,0x20
c002483d:	68 a0 00 00 00       	push   0xa0
c0024842:	6a 07                	push   0x7
c0024844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484b:	50                   	push   eax
c002484c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024852:	e8 91 e8 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024857:	83 c4 0c             	add    esp,0xc
c002485a:	6a 01                	push   0x1
c002485c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024863:	50                   	push   eax
c0024864:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002486a:	e8 25 f4 ff ff       	call   c0023c94 <IDE::polling(unsigned char, unsigned int)>
c002486f:	83 c4 10             	add    esp,0x10
c0024872:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024878:	84 c0                	test   al,al
c002487a:	74 23                	je     c002489f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002487c:	0f b6 d8             	movzx  ebx,al
c002487f:	0f b6 d2             	movzx  edx,dl
c0024882:	53                   	push   ebx
c0024883:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002488a:	50                   	push   eax
c002488b:	52                   	push   edx
c002488c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024892:	e8 67 f2 ff ff       	call   c0023afe <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024897:	83 c4 10             	add    esp,0x10
c002489a:	e9 84 01 00 00       	jmp    c0024a23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002489f:	0f b6 d2             	movzx  edx,dl
c00248a2:	53                   	push   ebx
c00248a3:	53                   	push   ebx
c00248a4:	52                   	push   edx
c00248a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ab:	e8 26 e8 ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c00248b0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248b4:	b9 06 00 00 00       	mov    ecx,0x6
c00248b9:	89 c2                	mov    edx,eax
c00248bb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00248be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00248c2:	83 c4 10             	add    esp,0x10
c00248c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248d2:	85 db                	test   ebx,ebx
c00248d4:	0f 84 ec 00 00 00    	je     c00249c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00248da:	51                   	push   ecx
c00248db:	51                   	push   ecx
c00248dc:	52                   	push   edx
c00248dd:	50                   	push   eax
c00248de:	e8 73 e9 ff ff       	call   c0023256 <IDE::waitInterrupt(unsigned char)>
c00248e3:	83 c4 10             	add    esp,0x10
c00248e6:	84 c0                	test   al,al
c00248e8:	0f 84 d4 fe ff ff    	je     c00247c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248ee:	56                   	push   esi
c00248ef:	56                   	push   esi
c00248f0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248f7:	50                   	push   eax
c00248f8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248fe:	e8 bf e7 ff ff       	call   c00230c2 <IDE::prepareInterrupt(unsigned char)>
c0024903:	83 c4 0c             	add    esp,0xc
c0024906:	6a 04                	push   0x4
c0024908:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002490f:	50                   	push   eax
c0024910:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024916:	e8 8d e8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c002491b:	83 c4 0c             	add    esp,0xc
c002491e:	89 c6                	mov    esi,eax
c0024920:	6a 05                	push   0x5
c0024922:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024929:	50                   	push   eax
c002492a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024930:	e8 73 e8 ff ff       	call   c00231a8 <IDE::read(unsigned char, unsigned char)>
c0024935:	89 f1                	mov    ecx,esi
c0024937:	0f b6 c0             	movzx  eax,al
c002493a:	0f b6 f1             	movzx  esi,cl
c002493d:	c1 e0 08             	shl    eax,0x8
c0024940:	09 c6                	or     esi,eax
c0024942:	d1 fe                	sar    esi,1
c0024944:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024948:	83 c4 10             	add    esp,0x10
c002494b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024950:	74 41                	je     c0024993 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024952:	31 c9                	xor    ecx,ecx
c0024954:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002495a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024961:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024965:	75 0a                	jne    c0024971 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024967:	01 c9                	add    ecx,ecx
c0024969:	01 cd                	add    ebp,ecx
c002496b:	4b                   	dec    ebx
c002496c:	e9 54 ff ff ff       	jmp    c00248c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024971:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024976:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002497a:	51                   	push   ecx
c002497b:	51                   	push   ecx
c002497c:	52                   	push   edx
c002497d:	50                   	push   eax
c002497e:	e8 53 e7 ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c0024983:	89 c2                	mov    edx,eax
c0024985:	89 f0                	mov    eax,esi
c0024987:	66 ef                	out    dx,ax
c0024989:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002498d:	83 c4 10             	add    esp,0x10
c0024990:	41                   	inc    ecx
c0024991:	eb c1                	jmp    c0024954 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024993:	31 f6                	xor    esi,esi
c0024995:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002499b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00249a2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00249a6:	75 06                	jne    c00249ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00249a8:	01 f6                	add    esi,esi
c00249aa:	01 f5                	add    ebp,esi
c00249ac:	eb bd                	jmp    c002496b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00249ae:	51                   	push   ecx
c00249af:	51                   	push   ecx
c00249b0:	52                   	push   edx
c00249b1:	50                   	push   eax
c00249b2:	e8 1f e7 ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c00249b7:	89 c2                	mov    edx,eax
c00249b9:	66 ed                	in     ax,dx
c00249bb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249c0:	83 c4 10             	add    esp,0x10
c00249c3:	46                   	inc    esi
c00249c4:	eb cf                	jmp    c0024995 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00249c6:	51                   	push   ecx
c00249c7:	51                   	push   ecx
c00249c8:	52                   	push   edx
c00249c9:	50                   	push   eax
c00249ca:	e8 87 e8 ff ff       	call   c0023256 <IDE::waitInterrupt(unsigned char)>
c00249cf:	83 c4 10             	add    esp,0x10
c00249d2:	84 c0                	test   al,al
c00249d4:	0f 84 e8 fd ff ff    	je     c00247c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249da:	bb a0 86 01 00       	mov    ebx,0x186a0
c00249df:	52                   	push   edx
c00249e0:	52                   	push   edx
c00249e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249e8:	50                   	push   eax
c00249e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249ef:	e8 ce e6 ff ff       	call   c00230c2 <IDE::prepareInterrupt(unsigned char)>
c00249f4:	83 c4 10             	add    esp,0x10
c00249f7:	50                   	push   eax
c00249f8:	50                   	push   eax
c00249f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024a00:	50                   	push   eax
c0024a01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024a07:	e8 ca e6 ff ff       	call   c00230d6 <IDE::getBase(unsigned char)>
c0024a0c:	8d 50 07             	lea    edx,[eax+0x7]
c0024a0f:	ec                   	in     al,dx
c0024a10:	83 c4 10             	add    esp,0x10
c0024a13:	a8 88                	test   al,0x88
c0024a15:	74 0a                	je     c0024a21 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024a17:	4b                   	dec    ebx
c0024a18:	75 dd                	jne    c00249f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a1a:	bb 02 00 00 00       	mov    ebx,0x2
c0024a1f:	eb 02                	jmp    c0024a23 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a21:	31 db                	xor    ebx,ebx
c0024a23:	83 c4 1c             	add    esp,0x1c
c0024a26:	89 d8                	mov    eax,ebx
c0024a28:	5b                   	pop    ebx
c0024a29:	5e                   	pop    esi
c0024a2a:	5f                   	pop    edi
c0024a2b:	5d                   	pop    ebp
c0024a2c:	c3                   	ret    
c0024a2d:	90                   	nop

c0024a2e <ATAPI::diskRemoved()>:
c0024a2e:	83 ec 18             	sub    esp,0x18
c0024a31:	68 7d d0 02 c0       	push   0xc002d07d
c0024a36:	e8 fd e5 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0024a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a3f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a46:	83 c4 1c             	add    esp,0x1c
c0024a49:	c3                   	ret    

c0024a4a <ATAPI::eject()>:
c0024a4a:	57                   	push   edi
c0024a4b:	b9 03 00 00 00       	mov    ecx,0x3
c0024a50:	53                   	push   ebx
c0024a51:	83 ec 14             	sub    esp,0x14
c0024a54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a58:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a5c:	fc                   	cld    
c0024a5d:	31 c0                	xor    eax,eax
c0024a5f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a61:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a66:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a6b:	50                   	push   eax
c0024a6c:	50                   	push   eax
c0024a6d:	6a 00                	push   0x0
c0024a6f:	6a 00                	push   0x0
c0024a71:	6a 00                	push   0x0
c0024a73:	6a 02                	push   0x2
c0024a75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a79:	50                   	push   eax
c0024a7a:	53                   	push   ebx
c0024a7b:	e8 ee fc ff ff       	call   c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a80:	83 c4 14             	add    esp,0x14
c0024a83:	53                   	push   ebx
c0024a84:	e8 a5 ff ff ff       	call   c0024a2e <ATAPI::diskRemoved()>
c0024a89:	83 c4 24             	add    esp,0x24
c0024a8c:	31 c0                	xor    eax,eax
c0024a8e:	5b                   	pop    ebx
c0024a8f:	5f                   	pop    edi
c0024a90:	c3                   	ret    
c0024a91:	90                   	nop

c0024a92 <ATAPI::diskInserted()>:
c0024a92:	53                   	push   ebx
c0024a93:	83 ec 14             	sub    esp,0x14
c0024a96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a9a:	68 94 d0 02 c0       	push   0xc002d094
c0024a9f:	e8 94 e5 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0024aa4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024aab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024aae:	e8 37 fe fe ff       	call   c00148ea <PhysicalDisk::startCache()>
c0024ab3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ab7:	83 c4 18             	add    esp,0x18
c0024aba:	5b                   	pop    ebx
c0024abb:	e9 ac 1f ff ff       	jmp    c0016a6c <createPartitionsForDisk(PhysicalDisk*)>

c0024ac0 <ATAPI::detectMedia()>:
c0024ac0:	56                   	push   esi
c0024ac1:	53                   	push   ebx
c0024ac2:	83 ec 28             	sub    esp,0x28
c0024ac5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ac9:	6a 0c                	push   0xc
c0024acb:	6a 00                	push   0x0
c0024acd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ad1:	56                   	push   esi
c0024ad2:	e8 a1 bc fd ff       	call   c0000778 <memset>
c0024ad7:	58                   	pop    eax
c0024ad8:	5a                   	pop    edx
c0024ad9:	6a 00                	push   0x0
c0024adb:	6a 00                	push   0x0
c0024add:	6a 00                	push   0x0
c0024adf:	6a 00                	push   0x0
c0024ae1:	56                   	push   esi
c0024ae2:	53                   	push   ebx
c0024ae3:	e8 86 fc ff ff       	call   c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ae8:	83 c4 1c             	add    esp,0x1c
c0024aeb:	6a 0c                	push   0xc
c0024aed:	6a 00                	push   0x0
c0024aef:	56                   	push   esi
c0024af0:	e8 83 bc fd ff       	call   c0000778 <memset>
c0024af5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024afa:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024aff:	59                   	pop    ecx
c0024b00:	58                   	pop    eax
c0024b01:	6a 01                	push   0x1
c0024b03:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024b07:	50                   	push   eax
c0024b08:	6a 00                	push   0x0
c0024b0a:	6a 12                	push   0x12
c0024b0c:	56                   	push   esi
c0024b0d:	53                   	push   ebx
c0024b0e:	e8 5b fc ff ff       	call   c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b13:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024b17:	83 c4 20             	add    esp,0x20
c0024b1a:	83 e0 7f             	and    eax,0x7f
c0024b1d:	3c 70                	cmp    al,0x70
c0024b1f:	74 15                	je     c0024b36 <ATAPI::detectMedia()+0x76>
c0024b21:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b28:	75 0c                	jne    c0024b36 <ATAPI::detectMedia()+0x76>
c0024b2a:	83 ec 0c             	sub    esp,0xc
c0024b2d:	53                   	push   ebx
c0024b2e:	e8 5f ff ff ff       	call   c0024a92 <ATAPI::diskInserted()>
c0024b33:	83 c4 10             	add    esp,0x10
c0024b36:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b3a:	83 e0 0f             	and    eax,0xf
c0024b3d:	3c 02                	cmp    al,0x2
c0024b3f:	75 1b                	jne    c0024b5c <ATAPI::detectMedia()+0x9c>
c0024b41:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b46:	75 2d                	jne    c0024b75 <ATAPI::detectMedia()+0xb5>
c0024b48:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b4f:	74 24                	je     c0024b75 <ATAPI::detectMedia()+0xb5>
c0024b51:	83 ec 0c             	sub    esp,0xc
c0024b54:	53                   	push   ebx
c0024b55:	e8 d4 fe ff ff       	call   c0024a2e <ATAPI::diskRemoved()>
c0024b5a:	eb 16                	jmp    c0024b72 <ATAPI::detectMedia()+0xb2>
c0024b5c:	84 c0                	test   al,al
c0024b5e:	75 15                	jne    c0024b75 <ATAPI::detectMedia()+0xb5>
c0024b60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b67:	75 0c                	jne    c0024b75 <ATAPI::detectMedia()+0xb5>
c0024b69:	83 ec 0c             	sub    esp,0xc
c0024b6c:	53                   	push   ebx
c0024b6d:	e8 20 ff ff ff       	call   c0024a92 <ATAPI::diskInserted()>
c0024b72:	83 c4 10             	add    esp,0x10
c0024b75:	83 c4 24             	add    esp,0x24
c0024b78:	5b                   	pop    ebx
c0024b79:	5e                   	pop    esi
c0024b7a:	c3                   	ret    
c0024b7b:	90                   	nop

c0024b7c <ATAPI::open(int, int, void*)>:
c0024b7c:	53                   	push   ebx
c0024b7d:	83 ec 08             	sub    esp,0x8
c0024b80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b8c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b92:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b98:	c1 e0 06             	shl    eax,0x6
c0024b9b:	01 d0                	add    eax,edx
c0024b9d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ba4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024baa:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024bb1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024bbb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024bc1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024bc8:	6a 04                	push   0x4
c0024bca:	6a 0c                	push   0xc
c0024bcc:	51                   	push   ecx
c0024bcd:	52                   	push   edx
c0024bce:	e8 15 e5 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd3:	90                   	nop
c0024bd4:	90                   	nop
c0024bd5:	6a 00                	push   0x0
c0024bd7:	6a 0c                	push   0xc
c0024bd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024be0:	50                   	push   eax
c0024be1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be7:	e8 fc e4 ff ff       	call   c00230e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bf3:	83 c4 14             	add    esp,0x14
c0024bf6:	53                   	push   ebx
c0024bf7:	e8 c4 fe ff ff       	call   c0024ac0 <ATAPI::detectMedia()>
c0024bfc:	31 c0                	xor    eax,eax
c0024bfe:	83 c4 18             	add    esp,0x18
c0024c01:	5b                   	pop    ebx
c0024c02:	c3                   	ret    
c0024c03:	90                   	nop

c0024c04 <ATAPI::read(unsigned long long, int, void*)>:
c0024c04:	55                   	push   ebp
c0024c05:	57                   	push   edi
c0024c06:	56                   	push   esi
c0024c07:	53                   	push   ebx
c0024c08:	83 ec 1c             	sub    esp,0x1c
c0024c0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024c0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024c13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024c17:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c1e:	74 41                	je     c0024c61 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c24:	b9 03 00 00 00       	mov    ecx,0x3
c0024c29:	fc                   	cld    
c0024c2a:	31 c0                	xor    eax,eax
c0024c2c:	86 fb                	xchg   bl,bh
c0024c2e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c30:	c1 c3 10             	rol    ebx,0x10
c0024c33:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c38:	89 e8                	mov    eax,ebp
c0024c3a:	86 fb                	xchg   bl,bh
c0024c3c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c40:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c44:	50                   	push   eax
c0024c45:	50                   	push   eax
c0024c46:	55                   	push   ebp
c0024c47:	c1 e5 0b             	shl    ebp,0xb
c0024c4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c4e:	6a 00                	push   0x0
c0024c50:	55                   	push   ebp
c0024c51:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c55:	50                   	push   eax
c0024c56:	56                   	push   esi
c0024c57:	e8 12 fb ff ff       	call   c002476e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c5c:	83 c4 20             	add    esp,0x20
c0024c5f:	eb 1a                	jmp    c0024c7b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c61:	83 ec 0c             	sub    esp,0xc
c0024c64:	56                   	push   esi
c0024c65:	e8 56 fe ff ff       	call   c0024ac0 <ATAPI::detectMedia()>
c0024c6a:	83 c4 10             	add    esp,0x10
c0024c6d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c74:	75 aa                	jne    c0024c20 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c76:	b8 02 00 00 00       	mov    eax,0x2
c0024c7b:	83 c4 1c             	add    esp,0x1c
c0024c7e:	5b                   	pop    ebx
c0024c7f:	5e                   	pop    esi
c0024c80:	5f                   	pop    edi
c0024c81:	5d                   	pop    ebp
c0024c82:	c3                   	ret    
c0024c83:	90                   	nop

c0024c84 <SATA::close(int, int, void*)>:
c0024c84:	83 ec 0c             	sub    esp,0xc
c0024c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c91:	85 c0                	test   eax,eax
c0024c93:	74 0c                	je     c0024ca1 <SATA::close(int, int, void*)+0x1d>
c0024c95:	83 ec 0c             	sub    esp,0xc
c0024c98:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c9a:	50                   	push   eax
c0024c9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c9e:	83 c4 10             	add    esp,0x10
c0024ca1:	31 c0                	xor    eax,eax
c0024ca3:	83 c4 0c             	add    esp,0xc
c0024ca6:	c3                   	ret    
c0024ca7:	90                   	nop

c0024ca8 <SATA::powerSaving(PowerSavingLevel)>:
c0024ca8:	c3                   	ret    
c0024ca9:	90                   	nop

c0024caa <SATA::open(int, int, void*)>:
c0024caa:	56                   	push   esi
c0024cab:	53                   	push   ebx
c0024cac:	50                   	push   eax
c0024cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cb5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024cbf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024cc5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024ccf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cd3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024cdd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ce3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cea:	e8 f6 b1 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024cef:	89 c6                	mov    esi,eax
c0024cf1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cf7:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cfd:	e8 e3 b1 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024d02:	39 c6                	cmp    esi,eax
c0024d04:	74 10                	je     c0024d16 <SATA::open(int, int, void*)+0x6c>
c0024d06:	83 ec 0c             	sub    esp,0xc
c0024d09:	68 bc cf 02 c0       	push   0xc002cfbc
c0024d0e:	e8 d2 59 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0024d13:	83 c4 10             	add    esp,0x10
c0024d16:	83 ec 0c             	sub    esp,0xc
c0024d19:	6a 02                	push   0x2
c0024d1b:	e8 85 ce fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0024d20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d26:	e8 15 d1 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0024d2b:	6a 03                	push   0x3
c0024d2d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d33:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d39:	50                   	push   eax
c0024d3a:	e8 3d d6 fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d3f:	83 c4 14             	add    esp,0x14
c0024d42:	53                   	push   ebx
c0024d43:	e8 a2 fb fe ff       	call   c00148ea <PhysicalDisk::startCache()>
c0024d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d4b:	e8 1c 1d ff ff       	call   c0016a6c <createPartitionsForDisk(PhysicalDisk*)>
c0024d50:	83 c4 14             	add    esp,0x14
c0024d53:	31 c0                	xor    eax,eax
c0024d55:	5b                   	pop    ebx
c0024d56:	5e                   	pop    esi
c0024d57:	c3                   	ret    

c0024d58 <SATA::SATA()>:
c0024d58:	83 ec 0c             	sub    esp,0xc
c0024d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d5f:	83 ec 04             	sub    esp,0x4
c0024d62:	68 00 02 00 00       	push   0x200
c0024d67:	68 d0 cf 02 c0       	push   0xc002cfd0
c0024d6c:	50                   	push   eax
c0024d6d:	e8 10 fb fe ff       	call   c0014882 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d72:	83 c4 10             	add    esp,0x10
c0024d75:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c0024d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d7e:	89 10                	mov    DWORD PTR [eax],edx
c0024d80:	90                   	nop
c0024d81:	83 c4 0c             	add    esp,0xc
c0024d84:	c3                   	ret    
c0024d85:	90                   	nop

c0024d86 <SATA::access(unsigned long long, int, void*, bool)>:
c0024d86:	55                   	push   ebp
c0024d87:	57                   	push   edi
c0024d88:	56                   	push   esi
c0024d89:	53                   	push   ebx
c0024d8a:	83 ec 2c             	sub    esp,0x2c
c0024d8d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d91:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d99:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d9d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024da1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024da6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024daa:	7e 10                	jle    c0024dbc <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024dac:	83 ec 0c             	sub    esp,0xc
c0024daf:	68 e0 cf 02 c0       	push   0xc002cfe0
c0024db4:	e8 2c 59 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0024db9:	83 c4 10             	add    esp,0x10
c0024dbc:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024dc2:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dc8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dd2:	89 f0                	mov    eax,esi
c0024dd4:	c1 e0 07             	shl    eax,0x7
c0024dd7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ddb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024de5:	53                   	push   ebx
c0024de6:	8d 46 02             	lea    eax,[esi+0x2]
c0024de9:	53                   	push   ebx
c0024dea:	c1 e0 07             	shl    eax,0x7
c0024ded:	bb 01 00 00 00       	mov    ebx,0x1
c0024df2:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024df6:	50                   	push   eax
c0024df7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024dfd:	e8 aa ef ff ff       	call   c0023dac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024e06:	83 c4 10             	add    esp,0x10
c0024e09:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024e0e:	0f 84 ce 01 00 00    	je     c0024fe2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e18:	c1 e0 09             	shl    eax,0x9
c0024e1b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e24:	74 17                	je     c0024e3d <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e26:	51                   	push   ecx
c0024e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e2b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e2f:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e35:	e8 0a b9 fd ff       	call   c0000744 <memcpy>
c0024e3a:	83 c4 10             	add    esp,0x10
c0024e3d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e43:	8d 46 02             	lea    eax,[esi+0x2]
c0024e46:	c1 e0 07             	shl    eax,0x7
c0024e49:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e4f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e55:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e5f:	c1 e1 05             	shl    ecx,0x5
c0024e62:	01 c8                	add    eax,ecx
c0024e64:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e68:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e6a:	83 e1 01             	and    ecx,0x1
c0024e6d:	83 e3 bf             	and    ebx,0xffffffbf
c0024e70:	c1 e1 06             	shl    ecx,0x6
c0024e73:	09 d9                	or     ecx,ebx
c0024e75:	88 08                	mov    BYTE PTR [eax],cl
c0024e77:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e79:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e7f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e85:	89 08                	mov    DWORD PTR [eax],ecx
c0024e87:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e8d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e93:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e99:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e9c:	52                   	push   edx
c0024e9d:	68 90 00 00 00       	push   0x90
c0024ea2:	6a 00                	push   0x0
c0024ea4:	53                   	push   ebx
c0024ea5:	e8 ce b8 fd ff       	call   c0000778 <memset>
c0024eaa:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024eb0:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024eb4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024eba:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ebe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ec2:	83 c4 10             	add    esp,0x10
c0024ec5:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ec8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024ece:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024ed4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ed9:	09 c8                	or     eax,ecx
c0024edb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ee1:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ee4:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024eeb:	66 25 00 7f          	and    ax,0x7f00
c0024eef:	66 0d 27 80          	or     ax,0x8027
c0024ef3:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024ef8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024efb:	19 c0                	sbb    eax,eax
c0024efd:	83 e0 f0             	and    eax,0xfffffff0
c0024f00:	83 c0 35             	add    eax,0x35
c0024f03:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024f06:	89 f8                	mov    eax,edi
c0024f08:	c1 e8 10             	shr    eax,0x10
c0024f0b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024f0e:	89 f8                	mov    eax,edi
c0024f10:	c1 e8 18             	shr    eax,0x18
c0024f13:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024f16:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f1a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f21:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f28:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f2c:	89 f3                	mov    ebx,esi
c0024f2e:	31 c0                	xor    eax,eax
c0024f30:	c1 e3 07             	shl    ebx,0x7
c0024f33:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f37:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f3d:	80 e1 88             	and    cl,0x88
c0024f40:	74 0a                	je     c0024f4c <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f42:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f47:	74 0a                	je     c0024f53 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f49:	40                   	inc    eax
c0024f4a:	eb eb                	jmp    c0024f37 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f4c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f51:	75 0a                	jne    c0024f5d <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f53:	83 ec 0c             	sub    esp,0xc
c0024f56:	68 19 d0 02 c0       	push   0xc002d019
c0024f5b:	eb 56                	jmp    c0024fb3 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f5d:	b8 01 00 00 00       	mov    eax,0x1
c0024f62:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f66:	c1 e6 07             	shl    esi,0x7
c0024f69:	d3 e0                	shl    eax,cl
c0024f6b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f6f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f75:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f7b:	85 c8                	test   eax,ecx
c0024f7d:	74 20                	je     c0024f9f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f7f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f85:	0f ba e1 1e          	bt     ecx,0x1e
c0024f89:	73 ea                	jae    c0024f75 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f8b:	83 ec 0c             	sub    esp,0xc
c0024f8e:	31 db                	xor    ebx,ebx
c0024f90:	68 27 d0 02 c0       	push   0xc002d027
c0024f95:	e8 4b 57 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0024f9a:	83 c4 10             	add    esp,0x10
c0024f9d:	eb 43                	jmp    c0024fe2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f9f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024fa5:	0f ba e0 1e          	bt     eax,0x1e
c0024fa9:	73 17                	jae    c0024fc2 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024fab:	83 ec 0c             	sub    esp,0xc
c0024fae:	68 27 d0 02 c0       	push   0xc002d027
c0024fb3:	e8 2d 57 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0024fb8:	bb 01 00 00 00       	mov    ebx,0x1
c0024fbd:	83 c4 10             	add    esp,0x10
c0024fc0:	eb 20                	jmp    c0024fe2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fc2:	31 db                	xor    ebx,ebx
c0024fc4:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024fc9:	75 17                	jne    c0024fe2 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fcb:	50                   	push   eax
c0024fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fd0:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024fd6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024fda:	e8 65 b7 fd ff       	call   c0000744 <memcpy>
c0024fdf:	83 c4 10             	add    esp,0x10
c0024fe2:	83 c4 2c             	add    esp,0x2c
c0024fe5:	89 d8                	mov    eax,ebx
c0024fe7:	5b                   	pop    ebx
c0024fe8:	5e                   	pop    esi
c0024fe9:	5f                   	pop    edi
c0024fea:	5d                   	pop    ebp
c0024feb:	c3                   	ret    

c0024fec <SATA::read(unsigned long long, int, void*)>:
c0024fec:	57                   	push   edi
c0024fed:	b8 04 00 00 00       	mov    eax,0x4
c0024ff2:	56                   	push   esi
c0024ff3:	53                   	push   ebx
c0024ff4:	83 ec 10             	sub    esp,0x10
c0024ff7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ffb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fff:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025002:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025006:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002500a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025010:	77 3b                	ja     c002504d <SATA::read(unsigned long long, int, void*)+0x61>
c0025012:	b8 06 00 00 00       	mov    eax,0x6
c0025017:	85 d2                	test   edx,edx
c0025019:	74 32                	je     c002504d <SATA::read(unsigned long long, int, void*)+0x61>
c002501b:	50                   	push   eax
c002501c:	50                   	push   eax
c002501d:	6a 00                	push   0x0
c002501f:	52                   	push   edx
c0025020:	53                   	push   ebx
c0025021:	57                   	push   edi
c0025022:	56                   	push   esi
c0025023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025027:	e8 5a fd ff ff       	call   c0024d86 <SATA::access(unsigned long long, int, void*, bool)>
c002502c:	83 c4 20             	add    esp,0x20
c002502f:	85 c0                	test   eax,eax
c0025031:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025035:	75 11                	jne    c0025048 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025037:	01 1d e8 28 03 c0    	add    DWORD PTR ds:0xc00328e8,ebx
c002503d:	e8 b8 b9 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0025042:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025046:	eb 05                	jmp    c002504d <SATA::read(unsigned long long, int, void*)+0x61>
c0025048:	b8 01 00 00 00       	mov    eax,0x1
c002504d:	83 c4 10             	add    esp,0x10
c0025050:	5b                   	pop    ebx
c0025051:	5e                   	pop    esi
c0025052:	5f                   	pop    edi
c0025053:	c3                   	ret    

c0025054 <SATA::write(unsigned long long, int, void*)>:
c0025054:	55                   	push   ebp
c0025055:	b8 04 00 00 00       	mov    eax,0x4
c002505a:	57                   	push   edi
c002505b:	56                   	push   esi
c002505c:	53                   	push   ebx
c002505d:	83 ec 1c             	sub    esp,0x1c
c0025060:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025064:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025068:	8d 75 ff             	lea    esi,[ebp-0x1]
c002506b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002506f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025073:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025079:	77 56                	ja     c00250d1 <SATA::write(unsigned long long, int, void*)+0x7d>
c002507b:	b8 06 00 00 00       	mov    eax,0x6
c0025080:	85 ff                	test   edi,edi
c0025082:	74 4d                	je     c00250d1 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025084:	89 ee                	mov    esi,ebp
c0025086:	c1 e6 09             	shl    esi,0x9
c0025089:	01 fe                	add    esi,edi
c002508b:	89 c8                	mov    eax,ecx
c002508d:	89 da                	mov    edx,ebx
c002508f:	83 c0 01             	add    eax,0x1
c0025092:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025096:	83 d2 00             	adc    edx,0x0
c0025099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002509d:	50                   	push   eax
c002509e:	50                   	push   eax
c002509f:	6a 01                	push   0x1
c00250a1:	57                   	push   edi
c00250a2:	81 c7 00 02 00 00    	add    edi,0x200
c00250a8:	6a 01                	push   0x1
c00250aa:	53                   	push   ebx
c00250ab:	51                   	push   ecx
c00250ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00250b0:	e8 d1 fc ff ff       	call   c0024d86 <SATA::access(unsigned long long, int, void*, bool)>
c00250b5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00250b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250bd:	83 c4 20             	add    esp,0x20
c00250c0:	39 f7                	cmp    edi,esi
c00250c2:	75 c7                	jne    c002508b <SATA::write(unsigned long long, int, void*)+0x37>
c00250c4:	01 2d e4 28 03 c0    	add    DWORD PTR ds:0xc00328e4,ebp
c00250ca:	e8 2b b9 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c00250cf:	31 c0                	xor    eax,eax
c00250d1:	83 c4 1c             	add    esp,0x1c
c00250d4:	5b                   	pop    ebx
c00250d5:	5e                   	pop    esi
c00250d6:	5f                   	pop    edi
c00250d7:	5d                   	pop    ebp
c00250d8:	c3                   	ret    
c00250d9:	90                   	nop

c00250da <SATAPI::write(unsigned long long, int, void*)>:
c00250da:	b8 03 00 00 00       	mov    eax,0x3
c00250df:	c3                   	ret    

c00250e0 <SATAPI::close(int, int, void*)>:
c00250e0:	83 ec 0c             	sub    esp,0xc
c00250e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250ed:	85 c0                	test   eax,eax
c00250ef:	74 0c                	je     c00250fd <SATAPI::close(int, int, void*)+0x1d>
c00250f1:	83 ec 0c             	sub    esp,0xc
c00250f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00250f6:	50                   	push   eax
c00250f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250fa:	83 c4 10             	add    esp,0x10
c00250fd:	31 c0                	xor    eax,eax
c00250ff:	83 c4 0c             	add    esp,0xc
c0025102:	c3                   	ret    
c0025103:	90                   	nop

c0025104 <SATAPI::SATAPI()>:
c0025104:	83 ec 0c             	sub    esp,0xc
c0025107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002510b:	83 ec 04             	sub    esp,0x4
c002510e:	68 00 08 00 00       	push   0x800
c0025113:	68 70 d0 02 c0       	push   0xc002d070
c0025118:	50                   	push   eax
c0025119:	e8 64 f7 fe ff       	call   c0014882 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002511e:	83 c4 10             	add    esp,0x10
c0025121:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0025126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512a:	89 10                	mov    DWORD PTR [eax],edx
c002512c:	90                   	nop
c002512d:	83 c4 0c             	add    esp,0xc
c0025130:	c3                   	ret    
c0025131:	90                   	nop

c0025132 <SATAPI::diskRemoved()>:
c0025132:	83 ec 18             	sub    esp,0x18
c0025135:	68 7c d0 02 c0       	push   0xc002d07c
c002513a:	e8 f9 de fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c002513f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025143:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002514a:	83 c4 1c             	add    esp,0x1c
c002514d:	c3                   	ret    

c002514e <SATAPI::diskInserted()>:
c002514e:	53                   	push   ebx
c002514f:	83 ec 14             	sub    esp,0x14
c0025152:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025156:	68 93 d0 02 c0       	push   0xc002d093
c002515b:	e8 d8 de fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0025160:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025167:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002516a:	e8 7b f7 fe ff       	call   c00148ea <PhysicalDisk::startCache()>
c002516f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025173:	83 c4 18             	add    esp,0x18
c0025176:	5b                   	pop    ebx
c0025177:	e9 f0 18 ff ff       	jmp    c0016a6c <createPartitionsForDisk(PhysicalDisk*)>

c002517c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002517c:	55                   	push   ebp
c002517d:	57                   	push   edi
c002517e:	56                   	push   esi
c002517f:	53                   	push   ebx
c0025180:	83 ec 24             	sub    esp,0x24
c0025183:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025187:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002518b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025191:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025195:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025199:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002519f:	8d 5f 02             	lea    ebx,[edi+0x2]
c00251a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00251a8:	c1 e3 07             	shl    ebx,0x7
c00251ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00251af:	89 f8                	mov    eax,edi
c00251b1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00251b5:	c1 e0 07             	shl    eax,0x7
c00251b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251c0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251ca:	53                   	push   ebx
c00251cb:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00251d1:	e8 d6 eb ff ff       	call   c0023dac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251da:	83 c4 10             	add    esp,0x10
c00251dd:	b8 01 00 00 00       	mov    eax,0x1
c00251e2:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251e7:	0f 84 8a 01 00 00    	je     c0025377 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251ed:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251f5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251fb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025201:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025205:	c1 e1 05             	shl    ecx,0x5
c0025208:	01 c8                	add    eax,ecx
c002520a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002520c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025212:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025218:	89 08                	mov    DWORD PTR [eax],ecx
c002521a:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025220:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025226:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002522c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002522f:	52                   	push   edx
c0025230:	68 90 00 00 00       	push   0x90
c0025235:	6a 00                	push   0x0
c0025237:	53                   	push   ebx
c0025238:	e8 3b b5 fd ff       	call   c0000778 <memset>
c002523d:	83 c4 0c             	add    esp,0xc
c0025240:	8d 43 40             	lea    eax,[ebx+0x40]
c0025243:	6a 0c                	push   0xc
c0025245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025249:	50                   	push   eax
c002524a:	e8 f5 b4 fd ff       	call   c0000744 <memcpy>
c002524f:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025255:	89 ea                	mov    edx,ebp
c0025257:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002525d:	c1 ea 18             	shr    edx,0x18
c0025260:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025264:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025267:	8d 48 ff             	lea    ecx,[eax-0x1]
c002526a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002526e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025274:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002527a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002527f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025283:	09 c8                	or     eax,ecx
c0025285:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025289:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002528f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025292:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025299:	66 25 00 7f          	and    ax,0x7f00
c002529d:	66 0d 27 80          	or     ax,0x8027
c00252a1:	66 89 03             	mov    WORD PTR [ebx],ax
c00252a4:	89 e8                	mov    eax,ebp
c00252a6:	c1 e8 10             	shr    eax,0x10
c00252a9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00252ac:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00252b0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00252b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00252b7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00252ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00252be:	83 c4 10             	add    esp,0x10
c00252c1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252c5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00252c9:	31 c0                	xor    eax,eax
c00252cb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00252d1:	80 e1 88             	and    cl,0x88
c00252d4:	74 0a                	je     c00252e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00252d6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252db:	74 0a                	je     c00252e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252dd:	40                   	inc    eax
c00252de:	eb eb                	jmp    c00252cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00252e0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252e5:	75 0f                	jne    c00252f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252e7:	83 ec 0c             	sub    esp,0xc
c00252ea:	68 19 d0 02 c0       	push   0xc002d019
c00252ef:	e8 f1 53 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c00252f4:	eb 3a                	jmp    c0025330 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252f6:	b8 01 00 00 00       	mov    eax,0x1
c00252fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252ff:	c1 e7 07             	shl    edi,0x7
c0025302:	d3 e0                	shl    eax,cl
c0025304:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025307:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002530d:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025313:	85 d0                	test   eax,edx
c0025315:	74 23                	je     c002533a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025317:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002531d:	0f ba e2 1e          	bt     edx,0x1e
c0025321:	73 ea                	jae    c002530d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025323:	83 ec 0c             	sub    esp,0xc
c0025326:	68 ab d0 02 c0       	push   0xc002d0ab
c002532b:	e8 08 dd fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0025330:	83 c4 10             	add    esp,0x10
c0025333:	b8 01 00 00 00       	mov    eax,0x1
c0025338:	eb 3d                	jmp    c0025377 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002533a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025340:	0f ba e0 1e          	bt     eax,0x1e
c0025344:	73 0a                	jae    c0025350 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025346:	83 ec 0c             	sub    esp,0xc
c0025349:	68 be d0 02 c0       	push   0xc002d0be
c002534e:	eb db                	jmp    c002532b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025350:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025355:	74 1e                	je     c0025375 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025357:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c002535c:	74 17                	je     c0025375 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002535e:	50                   	push   eax
c002535f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025363:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025369:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002536d:	e8 d2 b3 fd ff       	call   c0000744 <memcpy>
c0025372:	83 c4 10             	add    esp,0x10
c0025375:	31 c0                	xor    eax,eax
c0025377:	83 c4 1c             	add    esp,0x1c
c002537a:	5b                   	pop    ebx
c002537b:	5e                   	pop    esi
c002537c:	5f                   	pop    edi
c002537d:	5d                   	pop    ebp
c002537e:	c3                   	ret    
c002537f:	90                   	nop

c0025380 <SATAPI::eject()>:
c0025380:	57                   	push   edi
c0025381:	b9 03 00 00 00       	mov    ecx,0x3
c0025386:	53                   	push   ebx
c0025387:	83 ec 14             	sub    esp,0x14
c002538a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002538e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025392:	fc                   	cld    
c0025393:	31 c0                	xor    eax,eax
c0025395:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025397:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002539c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00253a1:	50                   	push   eax
c00253a2:	6a 00                	push   0x0
c00253a4:	6a 00                	push   0x0
c00253a6:	6a 00                	push   0x0
c00253a8:	6a 00                	push   0x0
c00253aa:	6a 02                	push   0x2
c00253ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253b0:	50                   	push   eax
c00253b1:	53                   	push   ebx
c00253b2:	e8 c5 fd ff ff       	call   c002517c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253b7:	83 c4 14             	add    esp,0x14
c00253ba:	53                   	push   ebx
c00253bb:	e8 72 fd ff ff       	call   c0025132 <SATAPI::diskRemoved()>
c00253c0:	83 c4 24             	add    esp,0x24
c00253c3:	31 c0                	xor    eax,eax
c00253c5:	5b                   	pop    ebx
c00253c6:	5f                   	pop    edi
c00253c7:	c3                   	ret    

c00253c8 <SATAPI::detectMedia()>:
c00253c8:	56                   	push   esi
c00253c9:	53                   	push   ebx
c00253ca:	83 ec 28             	sub    esp,0x28
c00253cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253d1:	6a 0c                	push   0xc
c00253d3:	6a 00                	push   0x0
c00253d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253d9:	56                   	push   esi
c00253da:	e8 99 b3 fd ff       	call   c0000778 <memset>
c00253df:	83 c4 0c             	add    esp,0xc
c00253e2:	6a 00                	push   0x0
c00253e4:	6a 00                	push   0x0
c00253e6:	6a 00                	push   0x0
c00253e8:	6a 00                	push   0x0
c00253ea:	6a 00                	push   0x0
c00253ec:	56                   	push   esi
c00253ed:	53                   	push   ebx
c00253ee:	e8 89 fd ff ff       	call   c002517c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253f3:	83 c4 1c             	add    esp,0x1c
c00253f6:	6a 0c                	push   0xc
c00253f8:	6a 00                	push   0x0
c00253fa:	56                   	push   esi
c00253fb:	e8 78 b3 fd ff       	call   c0000778 <memset>
c0025400:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025405:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002540a:	83 c4 0c             	add    esp,0xc
c002540d:	6a 01                	push   0x1
c002540f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025413:	50                   	push   eax
c0025414:	6a 00                	push   0x0
c0025416:	6a 00                	push   0x0
c0025418:	6a 12                	push   0x12
c002541a:	56                   	push   esi
c002541b:	53                   	push   ebx
c002541c:	e8 5b fd ff ff       	call   c002517c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025421:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025425:	83 c4 20             	add    esp,0x20
c0025428:	83 e0 7f             	and    eax,0x7f
c002542b:	3c 70                	cmp    al,0x70
c002542d:	74 15                	je     c0025444 <SATAPI::detectMedia()+0x7c>
c002542f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025436:	75 0c                	jne    c0025444 <SATAPI::detectMedia()+0x7c>
c0025438:	83 ec 0c             	sub    esp,0xc
c002543b:	53                   	push   ebx
c002543c:	e8 0d fd ff ff       	call   c002514e <SATAPI::diskInserted()>
c0025441:	83 c4 10             	add    esp,0x10
c0025444:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025448:	83 e0 0f             	and    eax,0xf
c002544b:	3c 02                	cmp    al,0x2
c002544d:	75 1b                	jne    c002546a <SATAPI::detectMedia()+0xa2>
c002544f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025454:	75 2d                	jne    c0025483 <SATAPI::detectMedia()+0xbb>
c0025456:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002545d:	74 24                	je     c0025483 <SATAPI::detectMedia()+0xbb>
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	53                   	push   ebx
c0025463:	e8 ca fc ff ff       	call   c0025132 <SATAPI::diskRemoved()>
c0025468:	eb 16                	jmp    c0025480 <SATAPI::detectMedia()+0xb8>
c002546a:	84 c0                	test   al,al
c002546c:	75 15                	jne    c0025483 <SATAPI::detectMedia()+0xbb>
c002546e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025475:	75 0c                	jne    c0025483 <SATAPI::detectMedia()+0xbb>
c0025477:	83 ec 0c             	sub    esp,0xc
c002547a:	53                   	push   ebx
c002547b:	e8 ce fc ff ff       	call   c002514e <SATAPI::diskInserted()>
c0025480:	83 c4 10             	add    esp,0x10
c0025483:	83 c4 24             	add    esp,0x24
c0025486:	5b                   	pop    ebx
c0025487:	5e                   	pop    esi
c0025488:	c3                   	ret    
c0025489:	90                   	nop

c002548a <SATAPI::open(int, int, void*)>:
c002548a:	56                   	push   esi
c002548b:	53                   	push   ebx
c002548c:	50                   	push   eax
c002548d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025491:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025495:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002549f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00254a5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00254af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254b3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00254bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254c3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254ca:	e8 16 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c00254cf:	89 c6                	mov    esi,eax
c00254d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254d7:	81 c6 00 10 00 00    	add    esi,0x1000
c00254dd:	e8 03 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c00254e2:	39 c6                	cmp    esi,eax
c00254e4:	74 10                	je     c00254f6 <SATAPI::open(int, int, void*)+0x6c>
c00254e6:	83 ec 0c             	sub    esp,0xc
c00254e9:	68 d3 d0 02 c0       	push   0xc002d0d3
c00254ee:	e8 f2 51 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c00254f3:	83 c4 10             	add    esp,0x10
c00254f6:	83 ec 0c             	sub    esp,0xc
c00254f9:	6a 02                	push   0x2
c00254fb:	e8 a5 c6 fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0025500:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025506:	e8 35 c9 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c002550b:	6a 03                	push   0x3
c002550d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025513:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025519:	50                   	push   eax
c002551a:	e8 5d ce fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c002551f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025526:	83 c4 14             	add    esp,0x14
c0025529:	53                   	push   ebx
c002552a:	e8 99 fe ff ff       	call   c00253c8 <SATAPI::detectMedia()>
c002552f:	83 c4 14             	add    esp,0x14
c0025532:	31 c0                	xor    eax,eax
c0025534:	5b                   	pop    ebx
c0025535:	5e                   	pop    esi
c0025536:	c3                   	ret    
c0025537:	90                   	nop

c0025538 <SATAPI::read(unsigned long long, int, void*)>:
c0025538:	55                   	push   ebp
c0025539:	57                   	push   edi
c002553a:	56                   	push   esi
c002553b:	53                   	push   ebx
c002553c:	83 ec 1c             	sub    esp,0x1c
c002553f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025543:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025547:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002554b:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025552:	74 19                	je     c002556d <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025554:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025559:	7e 2e                	jle    c0025589 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002555b:	83 ec 0c             	sub    esp,0xc
c002555e:	68 e9 d0 02 c0       	push   0xc002d0e9
c0025563:	e8 7d 51 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0025568:	83 c4 10             	add    esp,0x10
c002556b:	eb 1c                	jmp    c0025589 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002556d:	83 ec 0c             	sub    esp,0xc
c0025570:	55                   	push   ebp
c0025571:	e8 52 fe ff ff       	call   c00253c8 <SATAPI::detectMedia()>
c0025576:	83 c4 10             	add    esp,0x10
c0025579:	b8 02 00 00 00       	mov    eax,0x2
c002557e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025585:	75 cd                	jne    c0025554 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025587:	eb 49                	jmp    c00255d2 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025589:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002558d:	b9 03 00 00 00       	mov    ecx,0x3
c0025592:	fc                   	cld    
c0025593:	31 c0                	xor    eax,eax
c0025595:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025597:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002559c:	89 d8                	mov    eax,ebx
c002559e:	86 e0                	xchg   al,ah
c00255a0:	c1 c0 10             	rol    eax,0x10
c00255a3:	86 e0                	xchg   al,ah
c00255a5:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00255a9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00255ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255b1:	50                   	push   eax
c00255b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00255b6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00255ba:	56                   	push   esi
c00255bb:	53                   	push   ebx
c00255bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255c0:	c1 e0 0b             	shl    eax,0xb
c00255c3:	50                   	push   eax
c00255c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255c8:	50                   	push   eax
c00255c9:	55                   	push   ebp
c00255ca:	e8 ad fb ff ff       	call   c002517c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255cf:	83 c4 20             	add    esp,0x20
c00255d2:	83 c4 1c             	add    esp,0x1c
c00255d5:	5b                   	pop    ebx
c00255d6:	5e                   	pop    esi
c00255d7:	5f                   	pop    edi
c00255d8:	5d                   	pop    ebp
c00255d9:	c3                   	ret    

c00255da <AVX::open(int, int, void*)>:
c00255da:	83 ec 0c             	sub    esp,0xc
c00255dd:	e8 46 11 00 00       	call   c0026728 <avxInit>
c00255e2:	b8 00 00 00 00       	mov    eax,0x0
c00255e7:	83 c4 0c             	add    esp,0xc
c00255ea:	c3                   	ret    
c00255eb:	90                   	nop

c00255ec <AVX::close(int, int, void*)>:
c00255ec:	83 ec 0c             	sub    esp,0xc
c00255ef:	e8 35 11 00 00       	call   c0026729 <avxClose>
c00255f4:	b8 00 00 00 00       	mov    eax,0x0
c00255f9:	83 c4 0c             	add    esp,0xc
c00255fc:	c3                   	ret    
c00255fd:	90                   	nop

c00255fe <AVX::available()>:
c00255fe:	83 ec 0c             	sub    esp,0xc
c0025601:	e8 1a 11 00 00       	call   c0026720 <avxDetect>
c0025606:	85 c0                	test   eax,eax
c0025608:	0f 95 c0             	setne  al
c002560b:	83 c4 0c             	add    esp,0xc
c002560e:	c3                   	ret    
c002560f:	90                   	nop

c0025610 <AVX::save(void*)>:
c0025610:	83 ec 0c             	sub    esp,0xc
c0025613:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025617:	83 ec 0c             	sub    esp,0xc
c002561a:	50                   	push   eax
c002561b:	e8 06 11 00 00       	call   c0026726 <avxSave>
c0025620:	83 c4 10             	add    esp,0x10
c0025623:	90                   	nop
c0025624:	83 c4 0c             	add    esp,0xc
c0025627:	c3                   	ret    

c0025628 <AVX::load(void*)>:
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002562f:	83 ec 0c             	sub    esp,0xc
c0025632:	50                   	push   eax
c0025633:	e8 ef 10 00 00       	call   c0026727 <avxLoad>
c0025638:	83 c4 10             	add    esp,0x10
c002563b:	90                   	nop
c002563c:	83 c4 0c             	add    esp,0xc
c002563f:	c3                   	ret    

c0025640 <AVX::AVX()>:
c0025640:	83 ec 0c             	sub    esp,0xc
c0025643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025647:	83 ec 08             	sub    esp,0x8
c002564a:	68 4c d1 02 c0       	push   0xc002d14c
c002564f:	50                   	push   eax
c0025650:	e8 0b f3 fe ff       	call   c0014960 <FPU::FPU(char const*)>
c0025655:	83 c4 10             	add    esp,0x10
c0025658:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c002565d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025661:	89 10                	mov    DWORD PTR [eax],edx
c0025663:	90                   	nop
c0025664:	83 c4 0c             	add    esp,0xc
c0025667:	c3                   	ret    

c0025668 <MMX::available()>:
c0025668:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c002566d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025673:	83 e0 20             	and    eax,0x20
c0025676:	84 c0                	test   al,al
c0025678:	0f 95 c0             	setne  al
c002567b:	c3                   	ret    

c002567c <MMX::open(int, int, void*)>:
c002567c:	83 ec 0c             	sub    esp,0xc
c002567f:	e8 28 11 00 00       	call   c00267ac <x87Init>
c0025684:	b8 00 00 00 00       	mov    eax,0x0
c0025689:	83 c4 0c             	add    esp,0xc
c002568c:	c3                   	ret    
c002568d:	90                   	nop

c002568e <MMX::close(int, int, void*)>:
c002568e:	83 ec 0c             	sub    esp,0xc
c0025691:	e8 30 11 00 00       	call   c00267c6 <x87Close>
c0025696:	b8 00 00 00 00       	mov    eax,0x0
c002569b:	83 c4 0c             	add    esp,0xc
c002569e:	c3                   	ret    
c002569f:	90                   	nop

c00256a0 <MMX::save(void*)>:
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a7:	83 ec 0c             	sub    esp,0xc
c00256aa:	50                   	push   eax
c00256ab:	e8 f1 10 00 00       	call   c00267a1 <x87Save>
c00256b0:	83 c4 10             	add    esp,0x10
c00256b3:	90                   	nop
c00256b4:	83 c4 0c             	add    esp,0xc
c00256b7:	c3                   	ret    

c00256b8 <MMX::load(void*)>:
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256bf:	83 ec 0c             	sub    esp,0xc
c00256c2:	50                   	push   eax
c00256c3:	e8 df 10 00 00       	call   c00267a7 <x87Load>
c00256c8:	83 c4 10             	add    esp,0x10
c00256cb:	90                   	nop
c00256cc:	83 c4 0c             	add    esp,0xc
c00256cf:	c3                   	ret    

c00256d0 <MMX::MMX()>:
c00256d0:	83 ec 0c             	sub    esp,0xc
c00256d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d7:	83 ec 08             	sub    esp,0x8
c00256da:	68 8c d1 02 c0       	push   0xc002d18c
c00256df:	50                   	push   eax
c00256e0:	e8 7b f2 fe ff       	call   c0014960 <FPU::FPU(char const*)>
c00256e5:	83 c4 10             	add    esp,0x10
c00256e8:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c00256ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f1:	89 10                	mov    DWORD PTR [eax],edx
c00256f3:	90                   	nop
c00256f4:	83 c4 0c             	add    esp,0xc
c00256f7:	c3                   	ret    

c00256f8 <SSE::open(int, int, void*)>:
c00256f8:	83 ec 0c             	sub    esp,0xc
c00256fb:	e8 64 10 00 00       	call   c0026764 <sseInit>
c0025700:	b8 00 00 00 00       	mov    eax,0x0
c0025705:	83 c4 0c             	add    esp,0xc
c0025708:	c3                   	ret    
c0025709:	90                   	nop

c002570a <SSE::close(int, int, void*)>:
c002570a:	83 ec 0c             	sub    esp,0xc
c002570d:	e8 62 10 00 00       	call   c0026774 <sseClose>
c0025712:	b8 00 00 00 00       	mov    eax,0x0
c0025717:	83 c4 0c             	add    esp,0xc
c002571a:	c3                   	ret    
c002571b:	90                   	nop

c002571c <SSE::available()>:
c002571c:	83 ec 1c             	sub    esp,0x1c
c002571f:	e8 1c 10 00 00       	call   c0026740 <absolutelyNoChanceInHell>
c0025724:	85 c0                	test   eax,eax
c0025726:	0f 95 c0             	setne  al
c0025729:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002572d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025731:	83 c4 1c             	add    esp,0x1c
c0025734:	c3                   	ret    
c0025735:	90                   	nop

c0025736 <SSE::save(void*)>:
c0025736:	83 ec 0c             	sub    esp,0xc
c0025739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002573d:	83 ec 0c             	sub    esp,0xc
c0025740:	50                   	push   eax
c0025741:	e8 12 10 00 00       	call   c0026758 <sseSave>
c0025746:	83 c4 10             	add    esp,0x10
c0025749:	90                   	nop
c002574a:	83 c4 0c             	add    esp,0xc
c002574d:	c3                   	ret    

c002574e <SSE::load(void*)>:
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025755:	83 ec 0c             	sub    esp,0xc
c0025758:	50                   	push   eax
c0025759:	e8 00 10 00 00       	call   c002675e <sseLoad>
c002575e:	83 c4 10             	add    esp,0x10
c0025761:	90                   	nop
c0025762:	83 c4 0c             	add    esp,0xc
c0025765:	c3                   	ret    

c0025766 <SSE::SSE()>:
c0025766:	83 ec 0c             	sub    esp,0xc
c0025769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576d:	83 ec 08             	sub    esp,0x8
c0025770:	68 cc d1 02 c0       	push   0xc002d1cc
c0025775:	50                   	push   eax
c0025776:	e8 e5 f1 fe ff       	call   c0014960 <FPU::FPU(char const*)>
c002577b:	83 c4 10             	add    esp,0x10
c002577e:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c0025783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025787:	89 10                	mov    DWORD PTR [eax],edx
c0025789:	90                   	nop
c002578a:	83 c4 0c             	add    esp,0xc
c002578d:	c3                   	ret    

c002578e <x87::open(int, int, void*)>:
c002578e:	83 ec 0c             	sub    esp,0xc
c0025791:	e8 16 10 00 00       	call   c00267ac <x87Init>
c0025796:	b8 00 00 00 00       	mov    eax,0x0
c002579b:	83 c4 0c             	add    esp,0xc
c002579e:	c3                   	ret    
c002579f:	90                   	nop

c00257a0 <x87::close(int, int, void*)>:
c00257a0:	83 ec 0c             	sub    esp,0xc
c00257a3:	e8 1e 10 00 00       	call   c00267c6 <x87Close>
c00257a8:	b8 00 00 00 00       	mov    eax,0x0
c00257ad:	83 c4 0c             	add    esp,0xc
c00257b0:	c3                   	ret    
c00257b1:	90                   	nop

c00257b2 <x87::available()>:
c00257b2:	83 ec 0c             	sub    esp,0xc
c00257b5:	e8 cc 0f 00 00       	call   c0026786 <x87Detect>
c00257ba:	85 c0                	test   eax,eax
c00257bc:	0f 95 c0             	setne  al
c00257bf:	83 c4 0c             	add    esp,0xc
c00257c2:	c3                   	ret    
c00257c3:	90                   	nop

c00257c4 <x87::save(void*)>:
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257cb:	83 ec 0c             	sub    esp,0xc
c00257ce:	50                   	push   eax
c00257cf:	e8 cd 0f 00 00       	call   c00267a1 <x87Save>
c00257d4:	83 c4 10             	add    esp,0x10
c00257d7:	90                   	nop
c00257d8:	83 c4 0c             	add    esp,0xc
c00257db:	c3                   	ret    

c00257dc <x87::load(void*)>:
c00257dc:	83 ec 0c             	sub    esp,0xc
c00257df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257e3:	83 ec 0c             	sub    esp,0xc
c00257e6:	50                   	push   eax
c00257e7:	e8 bb 0f 00 00       	call   c00267a7 <x87Load>
c00257ec:	83 c4 10             	add    esp,0x10
c00257ef:	90                   	nop
c00257f0:	83 c4 0c             	add    esp,0xc
c00257f3:	c3                   	ret    

c00257f4 <x87::x87()>:
c00257f4:	83 ec 0c             	sub    esp,0xc
c00257f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fb:	83 ec 08             	sub    esp,0x8
c00257fe:	68 0c d2 02 c0       	push   0xc002d20c
c0025803:	50                   	push   eax
c0025804:	e8 57 f1 fe ff       	call   c0014960 <FPU::FPU(char const*)>
c0025809:	83 c4 10             	add    esp,0x10
c002580c:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0025811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025815:	89 10                	mov    DWORD PTR [eax],edx
c0025817:	90                   	nop
c0025818:	83 c4 0c             	add    esp,0xc
c002581b:	c3                   	ret    

c002581c <APIC::disable()>:
c002581c:	90                   	nop
c002581d:	c3                   	ret    

c002581e <APIC::close(int, int, void*)>:
c002581e:	55                   	push   ebp
c002581f:	89 e5                	mov    ebp,esp
c0025821:	83 ec 08             	sub    esp,0x8
c0025824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025827:	8b 00                	mov    eax,DWORD PTR [eax]
c0025829:	83 c0 3c             	add    eax,0x3c
c002582c:	8b 00                	mov    eax,DWORD PTR [eax]
c002582e:	83 ec 0c             	sub    esp,0xc
c0025831:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025834:	ff d0                	call   eax
c0025836:	83 c4 10             	add    esp,0x10
c0025839:	b8 00 00 00 00       	mov    eax,0x0
c002583e:	c9                   	leave  
c002583f:	c3                   	ret    

c0025840 <IOAPIC::close(int, int, void*)>:
c0025840:	b8 00 00 00 00       	mov    eax,0x0
c0025845:	c3                   	ret    

c0025846 <APIC::io_wait()>:
c0025846:	eb 00                	jmp    c0025848 <APIC::io_wait()+0x2>
c0025848:	eb 00                	jmp    c002584a <APIC::io_wait()+0x4>
c002584a:	90                   	nop
c002584b:	c3                   	ret    

c002584c <APIC::getBase()>:
c002584c:	55                   	push   ebp
c002584d:	89 e5                	mov    ebp,esp
c002584f:	83 ec 18             	sub    esp,0x18
c0025852:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025857:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002585d:	83 e0 08             	and    eax,0x8
c0025860:	84 c0                	test   al,al
c0025862:	75 07                	jne    c002586b <APIC::getBase()+0x1f>
c0025864:	b8 00 00 00 00       	mov    eax,0x0
c0025869:	eb 21                	jmp    c002588c <APIC::getBase()+0x40>
c002586b:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025870:	83 ec 08             	sub    esp,0x8
c0025873:	6a 1b                	push   0x1b
c0025875:	50                   	push   eax
c0025876:	e8 6d 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002587b:	83 c4 10             	add    esp,0x10
c002587e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025881:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025884:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025887:	25 00 f0 ff ff       	and    eax,0xfffff000
c002588c:	c9                   	leave  
c002588d:	c3                   	ret    

c002588e <APIC::eoi(unsigned char)>:
c002588e:	55                   	push   ebp
c002588f:	89 e5                	mov    ebp,esp
c0025891:	83 ec 28             	sub    esp,0x28
c0025894:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025897:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002589a:	83 ec 0c             	sub    esp,0xc
c002589d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258a0:	e8 a7 ff ff ff       	call   c002584c <APIC::getBase()>
c00258a5:	83 c4 10             	add    esp,0x10
c00258a8:	05 b0 00 00 00       	add    eax,0xb0
c00258ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00258b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00258b3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00258b9:	90                   	nop
c00258ba:	c9                   	leave  
c00258bb:	c3                   	ret    

c00258bc <APIC::open(int, int, void*)>:
c00258bc:	55                   	push   ebp
c00258bd:	89 e5                	mov    ebp,esp
c00258bf:	57                   	push   edi
c00258c0:	56                   	push   esi
c00258c1:	53                   	push   ebx
c00258c2:	83 ec 2c             	sub    esp,0x2c
c00258c5:	83 ec 0c             	sub    esp,0xc
c00258c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cb:	e8 7c ff ff ff       	call   c002584c <APIC::getBase()>
c00258d0:	83 c4 10             	add    esp,0x10
c00258d3:	89 c2                	mov    edx,eax
c00258d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258de:	0f b6 f8             	movzx  edi,al
c00258e1:	89 d0                	mov    eax,edx
c00258e3:	ba 00 00 00 00       	mov    edx,0x0
c00258e8:	89 c1                	mov    ecx,eax
c00258ea:	80 e5 ff             	and    ch,0xff
c00258ed:	89 cb                	mov    ebx,ecx
c00258ef:	0f b6 f2             	movzx  esi,dl
c00258f2:	89 d8                	mov    eax,ebx
c00258f4:	89 f2                	mov    edx,esi
c00258f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258f9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258fc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025900:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025904:	83 e0 00             	and    eax,0x0
c0025907:	09 d0                	or     eax,edx
c0025909:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002590d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025910:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025916:	8d 50 01             	lea    edx,[eax+0x1]
c0025919:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002591c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025922:	0f b6 d0             	movzx  edx,al
c0025925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025928:	83 c2 08             	add    edx,0x8
c002592b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002592f:	0f b6 c9             	movzx  ecx,cl
c0025932:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025938:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025942:	e8 05 ff ff ff       	call   c002584c <APIC::getBase()>
c0025947:	83 c4 10             	add    esp,0x10
c002594a:	05 f0 00 00 00       	add    eax,0xf0
c002594f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025952:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025955:	8b 00                	mov    eax,DWORD PTR [eax]
c0025957:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002595a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025961:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025968:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002596b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002596e:	89 10                	mov    DWORD PTR [eax],edx
c0025970:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025977:	a1 70 0e 03 c0       	mov    eax,ds:0xc0030e70
c002597c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002597f:	7d 7c                	jge    c00259fd <APIC::open(int, int, void*)+0x141>
c0025981:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025984:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c002598b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002598e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025991:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c0025998:	c1 e8 08             	shr    eax,0x8
c002599b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002599f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259a2:	8b 04 85 80 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf180]
c00259a9:	c1 e8 18             	shr    eax,0x18
c00259ac:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00259af:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00259b3:	75 40                	jne    c00259f5 <APIC::open(int, int, void*)+0x139>
c00259b5:	83 ec 0c             	sub    esp,0xc
c00259b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259bb:	e8 8c fe ff ff       	call   c002584c <APIC::getBase()>
c00259c0:	83 c4 10             	add    esp,0x10
c00259c3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259c7:	75 07                	jne    c00259d0 <APIC::open(int, int, void*)+0x114>
c00259c9:	ba 60 03 00 00       	mov    edx,0x360
c00259ce:	eb 05                	jmp    c00259d5 <APIC::open(int, int, void*)+0x119>
c00259d0:	ba 50 03 00 00       	mov    edx,0x350
c00259d5:	01 d0                	add    eax,edx
c00259d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259da:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00259df:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259e2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259e9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259ed:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259f0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259f3:	89 10                	mov    DWORD PTR [eax],edx
c00259f5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259f8:	e9 7a ff ff ff       	jmp    c0025977 <APIC::open(int, int, void*)+0xbb>
c00259fd:	b8 00 00 00 00       	mov    eax,0x0
c0025a02:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a05:	5b                   	pop    ebx
c0025a06:	5e                   	pop    esi
c0025a07:	5f                   	pop    edi
c0025a08:	5d                   	pop    ebp
c0025a09:	c3                   	ret    

c0025a0a <IOAPIC::IOAPIC()>:
c0025a0a:	83 ec 0c             	sub    esp,0xc
c0025a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a11:	83 ec 08             	sub    esp,0x8
c0025a14:	68 4c d2 02 c0       	push   0xc002d24c
c0025a19:	50                   	push   eax
c0025a1a:	e8 2f ec fe ff       	call   c001464e <Device::Device(char const*)>
c0025a1f:	83 c4 10             	add    esp,0x10
c0025a22:	ba 74 d3 02 c0       	mov    edx,0xc002d374
c0025a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a2b:	89 10                	mov    DWORD PTR [eax],edx
c0025a2d:	90                   	nop
c0025a2e:	83 c4 0c             	add    esp,0xc
c0025a31:	c3                   	ret    

c0025a32 <APIC::APIC()>:
c0025a32:	53                   	push   ebx
c0025a33:	83 ec 18             	sub    esp,0x18
c0025a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a3a:	83 ec 08             	sub    esp,0x8
c0025a3d:	68 54 d2 02 c0       	push   0xc002d254
c0025a42:	50                   	push   eax
c0025a43:	e8 72 f3 fe ff       	call   c0014dba <InterruptController::InterruptController(char const*)>
c0025a48:	83 c4 10             	add    esp,0x10
c0025a4b:	ba 2c d3 02 c0       	mov    edx,0xc002d32c
c0025a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a54:	89 10                	mov    DWORD PTR [eax],edx
c0025a56:	a0 40 29 03 c0       	mov    al,ds:0xc0032940
c0025a5b:	83 f0 01             	xor    eax,0x1
c0025a5e:	84 c0                	test   al,al
c0025a60:	0f 84 a1 00 00 00    	je     c0025b07 <APIC::APIC()+0xd5>
c0025a66:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a6b:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0025a70:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a74:	0f 83 86 00 00 00    	jae    c0025b00 <APIC::APIC()+0xce>
c0025a7a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a82:	83 ec 0c             	sub    esp,0xc
c0025a85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a89:	e8 b5 9d fe ff       	call   c000f843 <malloc>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	89 c3                	mov    ebx,eax
c0025a93:	83 ec 0c             	sub    esp,0xc
c0025a96:	53                   	push   ebx
c0025a97:	e8 6e ff ff ff       	call   c0025a0a <IOAPIC::IOAPIC()>
c0025a9c:	83 c4 10             	add    esp,0x10
c0025a9f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025aa3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025aa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025aac:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0025ab3:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0025ab8:	40                   	inc    eax
c0025ab9:	a3 00 29 03 c0       	mov    ds:0xc0032900,eax
c0025abe:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0025ac3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025ac9:	83 ec 08             	sub    esp,0x8
c0025acc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ad0:	50                   	push   eax
c0025ad1:	e8 88 e9 fe ff       	call   c001445e <Device::addChild(Device*)>
c0025ad6:	83 c4 10             	add    esp,0x10
c0025ad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025add:	8b 00                	mov    eax,DWORD PTR [eax]
c0025adf:	83 c0 08             	add    eax,0x8
c0025ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ae4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025ae9:	6a 00                	push   0x0
c0025aeb:	6a 00                	push   0x0
c0025aed:	52                   	push   edx
c0025aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025af2:	ff d0                	call   eax
c0025af4:	83 c4 10             	add    esp,0x10
c0025af7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025afb:	e9 6b ff ff ff       	jmp    c0025a6b <APIC::APIC()+0x39>
c0025b00:	c6 05 40 29 03 c0 01 	mov    BYTE PTR ds:0xc0032940,0x1
c0025b07:	90                   	nop
c0025b08:	83 c4 18             	add    esp,0x18
c0025b0b:	5b                   	pop    ebx
c0025b0c:	c3                   	ret    
c0025b0d:	90                   	nop

c0025b0e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025b0e:	55                   	push   ebp
c0025b0f:	89 e5                	mov    ebp,esp
c0025b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b1a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b1d:	72 1d                	jb     c0025b3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b22:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b31:	01 d0                	add    eax,edx
c0025b33:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b36:	73 04                	jae    c0025b3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b38:	b0 01                	mov    al,0x1
c0025b3a:	eb 02                	jmp    c0025b3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b3c:	b0 00                	mov    al,0x0
c0025b3e:	5d                   	pop    ebp
c0025b3f:	c3                   	ret    

c0025b40 <IOAPIC::read(int)>:
c0025b40:	55                   	push   ebp
c0025b41:	89 e5                	mov    ebp,esp
c0025b43:	83 ec 10             	sub    esp,0x10
c0025b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b55:	0f b6 d0             	movzx  edx,al
c0025b58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b5b:	89 10                	mov    DWORD PTR [eax],edx
c0025b5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b60:	83 c0 10             	add    eax,0x10
c0025b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b65:	c9                   	leave  
c0025b66:	c3                   	ret    
c0025b67:	90                   	nop

c0025b68 <IOAPIC::open(int, int, void*)>:
c0025b68:	55                   	push   ebp
c0025b69:	89 e5                	mov    ebp,esp
c0025b6b:	57                   	push   edi
c0025b6c:	56                   	push   esi
c0025b6d:	53                   	push   ebx
c0025b6e:	83 ec 0c             	sub    esp,0xc
c0025b71:	83 ec 0c             	sub    esp,0xc
c0025b74:	68 7f d2 02 c0       	push   0xc002d27f
c0025b79:	e8 ba d4 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0025b7e:	83 c4 10             	add    esp,0x10
c0025b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b90:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b96:	8b 14 85 60 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf0a0]
c0025b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025baf:	8b 14 85 e0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf020]
c0025bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bc2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bcb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bd1:	0f b6 f8             	movzx  edi,al
c0025bd4:	89 d0                	mov    eax,edx
c0025bd6:	ba 00 00 00 00       	mov    edx,0x0
c0025bdb:	89 c1                	mov    ecx,eax
c0025bdd:	80 e5 ff             	and    ch,0xff
c0025be0:	89 cb                	mov    ebx,ecx
c0025be2:	0f b6 f2             	movzx  esi,dl
c0025be5:	89 d8                	mov    eax,ebx
c0025be7:	89 f2                	mov    edx,esi
c0025be9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bec:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bef:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bf3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bf7:	83 e0 00             	and    eax,0x0
c0025bfa:	09 d0                	or     eax,edx
c0025bfc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c03:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c09:	8d 50 01             	lea    edx,[eax+0x1]
c0025c0c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025c0f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025c15:	0f b6 d0             	movzx  edx,al
c0025c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1b:	83 c2 08             	add    edx,0x8
c0025c1e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c22:	0f b6 c9             	movzx  ecx,cl
c0025c25:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c2b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c2f:	83 ec 08             	sub    esp,0x8
c0025c32:	6a 01                	push   0x1
c0025c34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c37:	e8 04 ff ff ff       	call   c0025b40 <IOAPIC::read(int)>
c0025c3c:	83 c4 10             	add    esp,0x10
c0025c3f:	c1 f8 10             	sar    eax,0x10
c0025c42:	0f b6 c0             	movzx  eax,al
c0025c45:	8d 50 01             	lea    edx,[eax+0x1]
c0025c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c51:	b8 00 00 00 00       	mov    eax,0x0
c0025c56:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c59:	5b                   	pop    ebx
c0025c5a:	5e                   	pop    esi
c0025c5b:	5f                   	pop    edi
c0025c5c:	5d                   	pop    ebp
c0025c5d:	c3                   	ret    

c0025c5e <IOAPIC::write(int, int)>:
c0025c5e:	55                   	push   ebp
c0025c5f:	89 e5                	mov    ebp,esp
c0025c61:	83 ec 10             	sub    esp,0x10
c0025c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c67:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c6d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c73:	0f b6 d0             	movzx  edx,al
c0025c76:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c79:	89 10                	mov    DWORD PTR [eax],edx
c0025c7b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c7e:	8d 50 10             	lea    edx,[eax+0x10]
c0025c81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c84:	89 02                	mov    DWORD PTR [edx],eax
c0025c86:	90                   	nop
c0025c87:	c9                   	leave  
c0025c88:	c3                   	ret    
c0025c89:	90                   	nop

c0025c8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c8a:	55                   	push   ebp
c0025c8b:	89 e5                	mov    ebp,esp
c0025c8d:	53                   	push   ebx
c0025c8e:	83 ec 2c             	sub    esp,0x2c
c0025c91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c94:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c97:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c9a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c9d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ca0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025ca3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025ca6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ca9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025cac:	88 d8                	mov    al,bl
c0025cae:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025cb1:	88 c8                	mov    al,cl
c0025cb3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025cb6:	88 d0                	mov    al,dl
c0025cb8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025cbb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cbf:	83 c0 08             	add    eax,0x8
c0025cc2:	01 c0                	add    eax,eax
c0025cc4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025cc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ccb:	83 c0 08             	add    eax,0x8
c0025cce:	01 c0                	add    eax,eax
c0025cd0:	40                   	inc    eax
c0025cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cd4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cd7:	50                   	push   eax
c0025cd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cdb:	e8 60 fe ff ff       	call   c0025b40 <IOAPIC::read(int)>
c0025ce0:	83 c4 08             	add    esp,0x8
c0025ce3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ce6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ced:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cf0:	c1 e0 18             	shl    eax,0x18
c0025cf3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cf6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cf9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cfc:	52                   	push   edx
c0025cfd:	50                   	push   eax
c0025cfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d01:	e8 58 ff ff ff       	call   c0025c5e <IOAPIC::write(int, int)>
c0025d06:	83 c4 0c             	add    esp,0xc
c0025d09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d0c:	50                   	push   eax
c0025d0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d10:	e8 2b fe ff ff       	call   c0025b40 <IOAPIC::read(int)>
c0025d15:	83 c4 08             	add    esp,0x8
c0025d18:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d1b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d22:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d29:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d30:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d34:	74 09                	je     c0025d3f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d36:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d3d:	eb 07                	jmp    c0025d46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d3f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d46:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d4a:	74 09                	je     c0025d55 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d4c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d53:	eb 07                	jmp    c0025d5c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d55:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d5c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d63:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d67:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d6a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d70:	52                   	push   edx
c0025d71:	50                   	push   eax
c0025d72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d75:	e8 e4 fe ff ff       	call   c0025c5e <IOAPIC::write(int, int)>
c0025d7a:	83 c4 0c             	add    esp,0xc
c0025d7d:	90                   	nop
c0025d7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d81:	c9                   	leave  
c0025d82:	c3                   	ret    
c0025d83:	90                   	nop

c0025d84 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d84:	55                   	push   ebp
c0025d85:	89 e5                	mov    ebp,esp
c0025d87:	57                   	push   edi
c0025d88:	56                   	push   esi
c0025d89:	53                   	push   ebx
c0025d8a:	83 ec 2c             	sub    esp,0x2c
c0025d8d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d90:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d93:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d97:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d9b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d9f:	74 5a                	je     c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da1:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025da5:	7f 44                	jg     c0025deb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025da7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025daa:	05 c0 d7 02 c0       	add    eax,0xc002d7c0
c0025daf:	8a 00                	mov    al,BYTE PTR [eax]
c0025db1:	0f b6 c0             	movzx  eax,al
c0025db4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025db7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dba:	66 8b 84 00 00 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf100]
c0025dc2:	0f b7 c0             	movzx  eax,ax
c0025dc5:	83 e0 02             	and    eax,0x2
c0025dc8:	85 c0                	test   eax,eax
c0025dca:	74 04                	je     c0025dd0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025dcc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025dd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dd3:	66 8b 84 00 00 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf100]
c0025ddb:	0f b7 c0             	movzx  eax,ax
c0025dde:	83 e0 08             	and    eax,0x8
c0025de1:	85 c0                	test   eax,eax
c0025de3:	74 16                	je     c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025de5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025de9:	eb 10                	jmp    c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025deb:	83 ec 0c             	sub    esp,0xc
c0025dee:	68 90 d2 02 c0       	push   0xc002d290
c0025df3:	e8 ed 48 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0025df8:	83 c4 10             	add    esp,0x10
c0025dfb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025dff:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0025e04:	83 ec 08             	sub    esp,0x8
c0025e07:	50                   	push   eax
c0025e08:	68 c8 d2 02 c0       	push   0xc002d2c8
c0025e0d:	e8 26 d2 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e1c:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0025e21:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e24:	7d 67                	jge    c0025e8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e29:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0025e30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e33:	83 ec 08             	sub    esp,0x8
c0025e36:	52                   	push   edx
c0025e37:	50                   	push   eax
c0025e38:	e8 d1 fc ff ff       	call   c0025b0e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e3d:	83 c4 10             	add    esp,0x10
c0025e40:	84 c0                	test   al,al
c0025e42:	74 44                	je     c0025e88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e44:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e47:	8b 1c 85 20 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd6e0]
c0025e4e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e52:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e55:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e5c:	83 c0 20             	add    eax,0x20
c0025e5f:	0f b6 f0             	movzx  esi,al
c0025e62:	b8 00 00 00 00       	mov    eax,0x0
c0025e67:	99                   	cdq    
c0025e68:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e6b:	0f b6 c9             	movzx  ecx,cl
c0025e6e:	83 ec 04             	sub    esp,0x4
c0025e71:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e74:	57                   	push   edi
c0025e75:	56                   	push   esi
c0025e76:	52                   	push   edx
c0025e77:	50                   	push   eax
c0025e78:	51                   	push   ecx
c0025e79:	53                   	push   ebx
c0025e7a:	e8 0b fe ff ff       	call   c0025c8a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e7f:	83 c4 20             	add    esp,0x20
c0025e82:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e86:	eb 05                	jmp    c0025e8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e88:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e8b:	eb 8f                	jmp    c0025e1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e8d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e90:	83 f0 01             	xor    eax,0x1
c0025e93:	84 c0                	test   al,al
c0025e95:	74 10                	je     c0025ea7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e97:	83 ec 0c             	sub    esp,0xc
c0025e9a:	68 df d2 02 c0       	push   0xc002d2df
c0025e9f:	e8 41 48 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0025ea4:	83 c4 10             	add    esp,0x10
c0025ea7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025eab:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025eb2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025eb6:	7f 65                	jg     c0025f1d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ebe:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ec5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ec8:	01 ca                	add    edx,ecx
c0025eca:	83 c2 54             	add    edx,0x54
c0025ecd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025ed1:	85 c0                	test   eax,eax
c0025ed3:	75 43                	jne    c0025f18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ed8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025edb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ee2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee5:	01 ca                	add    edx,ecx
c0025ee7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025eea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025eed:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ef4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ef7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025efe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f01:	01 ca                	add    edx,ecx
c0025f03:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025f09:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025f0c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025f10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f13:	83 e8 20             	sub    eax,0x20
c0025f16:	eb 1a                	jmp    c0025f32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025f18:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f1b:	eb 95                	jmp    c0025eb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f1d:	83 ec 0c             	sub    esp,0xc
c0025f20:	68 ec d2 02 c0       	push   0xc002d2ec
c0025f25:	e8 bb 47 ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0025f2a:	83 c4 10             	add    esp,0x10
c0025f2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f32:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f35:	5b                   	pop    ebx
c0025f36:	5e                   	pop    esi
c0025f37:	5f                   	pop    edi
c0025f38:	5d                   	pop    ebp
c0025f39:	c3                   	ret    

c0025f3a <PIC::disable()>:
c0025f3a:	55                   	push   ebp
c0025f3b:	89 e5                	mov    ebp,esp
c0025f3d:	83 ec 10             	sub    esp,0x10
c0025f40:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f46:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f4d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f51:	ee                   	out    dx,al
c0025f52:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f58:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f5c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f5f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f63:	ee                   	out    dx,al
c0025f64:	90                   	nop
c0025f65:	c9                   	leave  
c0025f66:	c3                   	ret    
c0025f67:	90                   	nop

c0025f68 <PIC::close(int, int, void*)>:
c0025f68:	55                   	push   ebp
c0025f69:	89 e5                	mov    ebp,esp
c0025f6b:	83 ec 08             	sub    esp,0x8
c0025f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f73:	83 c0 3c             	add    eax,0x3c
c0025f76:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f78:	83 ec 0c             	sub    esp,0xc
c0025f7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f7e:	ff d0                	call   eax
c0025f80:	83 c4 10             	add    esp,0x10
c0025f83:	b8 00 00 00 00       	mov    eax,0x0
c0025f88:	c9                   	leave  
c0025f89:	c3                   	ret    

c0025f8a <PIC::PIC()>:
c0025f8a:	83 ec 0c             	sub    esp,0xc
c0025f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f91:	83 ec 08             	sub    esp,0x8
c0025f94:	68 98 d3 02 c0       	push   0xc002d398
c0025f99:	50                   	push   eax
c0025f9a:	e8 1b ee fe ff       	call   c0014dba <InterruptController::InterruptController(char const*)>
c0025f9f:	83 c4 10             	add    esp,0x10
c0025fa2:	ba c4 d3 02 c0       	mov    edx,0xc002d3c4
c0025fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fab:	89 10                	mov    DWORD PTR [eax],edx
c0025fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb7:	0f b6 d0             	movzx  edx,al
c0025fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbe:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fcf:	0f b6 d0             	movzx  edx,al
c0025fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fdf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fe5:	8d 50 01             	lea    edx,[eax+0x1]
c0025fe8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fec:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ff2:	0f b6 d0             	movzx  edx,al
c0025ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ffd:	83 e1 3f             	and    ecx,0x3f
c0026000:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026008:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002600e:	0f b6 d0             	movzx  edx,al
c0026011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026015:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002601c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026020:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026026:	0f b6 d0             	movzx  edx,al
c0026029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026036:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002603c:	8d 50 01             	lea    edx,[eax+0x1]
c002603f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026043:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026049:	0f b6 d0             	movzx  edx,al
c002604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026050:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026054:	83 e1 3f             	and    ecx,0x3f
c0026057:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002605b:	90                   	nop
c002605c:	83 c4 0c             	add    esp,0xc
c002605f:	c3                   	ret    

c0026060 <PIC::ioWait()>:
c0026060:	eb 00                	jmp    c0026062 <PIC::ioWait()+0x2>
c0026062:	eb 00                	jmp    c0026064 <PIC::ioWait()+0x4>
c0026064:	90                   	nop
c0026065:	c3                   	ret    

c0026066 <PIC::getIRQReg(int)>:
c0026066:	55                   	push   ebp
c0026067:	89 e5                	mov    ebp,esp
c0026069:	83 ec 10             	sub    esp,0x10
c002606c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002606f:	0f b6 c0             	movzx  eax,al
c0026072:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026078:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002607b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002607e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026082:	ee                   	out    dx,al
c0026083:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026086:	0f b6 c0             	movzx  eax,al
c0026089:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002608f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026092:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026095:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026099:	ee                   	out    dx,al
c002609a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00260a0:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00260a4:	89 c2                	mov    edx,eax
c00260a6:	ec                   	in     al,dx
c00260a7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00260aa:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260ad:	0f b6 c0             	movzx  eax,al
c00260b0:	c1 e0 08             	shl    eax,0x8
c00260b3:	89 c1                	mov    ecx,eax
c00260b5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260bb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260bf:	89 c2                	mov    edx,eax
c00260c1:	ec                   	in     al,dx
c00260c2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260c5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260c8:	0f b6 c0             	movzx  eax,al
c00260cb:	09 c8                	or     eax,ecx
c00260cd:	c9                   	leave  
c00260ce:	c3                   	ret    
c00260cf:	90                   	nop

c00260d0 <PIC::eoi(unsigned char)>:
c00260d0:	55                   	push   ebp
c00260d1:	89 e5                	mov    ebp,esp
c00260d3:	83 ec 14             	sub    esp,0x14
c00260d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260d9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260dc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260e0:	75 1e                	jne    c0026100 <PIC::eoi(unsigned char)+0x30>
c00260e2:	6a 0b                	push   0xb
c00260e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e7:	e8 7a ff ff ff       	call   c0026066 <PIC::getIRQReg(int)>
c00260ec:	83 c4 08             	add    esp,0x8
c00260ef:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260f3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260f7:	25 80 00 00 00       	and    eax,0x80
c00260fc:	85 c0                	test   eax,eax
c00260fe:	74 5f                	je     c002615f <PIC::eoi(unsigned char)+0x8f>
c0026100:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026104:	75 2d                	jne    c0026133 <PIC::eoi(unsigned char)+0x63>
c0026106:	6a 0b                	push   0xb
c0026108:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002610b:	e8 56 ff ff ff       	call   c0026066 <PIC::getIRQReg(int)>
c0026110:	83 c4 08             	add    esp,0x8
c0026113:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026117:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002611a:	66 85 c0             	test   ax,ax
c002611d:	78 14                	js     c0026133 <PIC::eoi(unsigned char)+0x63>
c002611f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026125:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026129:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002612c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026130:	ee                   	out    dx,al
c0026131:	eb 2d                	jmp    c0026160 <PIC::eoi(unsigned char)+0x90>
c0026133:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026137:	76 12                	jbe    c002614b <PIC::eoi(unsigned char)+0x7b>
c0026139:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002613f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026143:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026146:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002614a:	ee                   	out    dx,al
c002614b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026151:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026155:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026158:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002615c:	ee                   	out    dx,al
c002615d:	eb 01                	jmp    c0026160 <PIC::eoi(unsigned char)+0x90>
c002615f:	90                   	nop
c0026160:	c9                   	leave  
c0026161:	c3                   	ret    

c0026162 <PIC::remap()>:
c0026162:	55                   	push   ebp
c0026163:	89 e5                	mov    ebp,esp
c0026165:	83 ec 48             	sub    esp,0x48
c0026168:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c002616f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026176:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002617c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c002617f:	89 c2                	mov    edx,eax
c0026181:	ec                   	in     al,dx
c0026182:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026185:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026188:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002618b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026191:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026194:	89 c2                	mov    edx,eax
c0026196:	ec                   	in     al,dx
c0026197:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002619a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002619d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00261a0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00261a6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00261aa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00261ad:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00261b0:	ee                   	out    dx,al
c00261b1:	83 ec 0c             	sub    esp,0xc
c00261b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b7:	e8 a4 fe ff ff       	call   c0026060 <PIC::ioWait()>
c00261bc:	83 c4 10             	add    esp,0x10
c00261bf:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261c5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261c9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261cc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261cf:	ee                   	out    dx,al
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d6:	e8 85 fe ff ff       	call   c0026060 <PIC::ioWait()>
c00261db:	83 c4 10             	add    esp,0x10
c00261de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261e1:	0f b6 c0             	movzx  eax,al
c00261e4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261ea:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261ed:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261f0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261f3:	ee                   	out    dx,al
c00261f4:	83 ec 0c             	sub    esp,0xc
c00261f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261fa:	e8 61 fe ff ff       	call   c0026060 <PIC::ioWait()>
c00261ff:	83 c4 10             	add    esp,0x10
c0026202:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026205:	0f b6 c0             	movzx  eax,al
c0026208:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002620e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026211:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026214:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026217:	ee                   	out    dx,al
c0026218:	83 ec 0c             	sub    esp,0xc
c002621b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002621e:	e8 3d fe ff ff       	call   c0026060 <PIC::ioWait()>
c0026223:	83 c4 10             	add    esp,0x10
c0026226:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002622c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026230:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026233:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026236:	ee                   	out    dx,al
c0026237:	83 ec 0c             	sub    esp,0xc
c002623a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002623d:	e8 1e fe ff ff       	call   c0026060 <PIC::ioWait()>
c0026242:	83 c4 10             	add    esp,0x10
c0026245:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002624b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002624f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026252:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026255:	ee                   	out    dx,al
c0026256:	83 ec 0c             	sub    esp,0xc
c0026259:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002625c:	e8 ff fd ff ff       	call   c0026060 <PIC::ioWait()>
c0026261:	83 c4 10             	add    esp,0x10
c0026264:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002626a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002626e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026271:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026274:	ee                   	out    dx,al
c0026275:	83 ec 0c             	sub    esp,0xc
c0026278:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627b:	e8 e0 fd ff ff       	call   c0026060 <PIC::ioWait()>
c0026280:	83 c4 10             	add    esp,0x10
c0026283:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026289:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002628d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026290:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026293:	ee                   	out    dx,al
c0026294:	83 ec 0c             	sub    esp,0xc
c0026297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002629a:	e8 c1 fd ff ff       	call   c0026060 <PIC::ioWait()>
c002629f:	83 c4 10             	add    esp,0x10
c00262a2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00262a6:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00262ac:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00262af:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00262b2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00262b5:	ee                   	out    dx,al
c00262b6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00262ba:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262c0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262c3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262c9:	ee                   	out    dx,al
c00262ca:	90                   	nop
c00262cb:	c9                   	leave  
c00262cc:	c3                   	ret    
c00262cd:	90                   	nop

c00262ce <PIC::open(int, int, void*)>:
c00262ce:	55                   	push   ebp
c00262cf:	89 e5                	mov    ebp,esp
c00262d1:	83 ec 18             	sub    esp,0x18
c00262d4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262da:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262de:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262e1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262e5:	ee                   	out    dx,al
c00262e6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262ec:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262f0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262f3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262f7:	ee                   	out    dx,al
c00262f8:	83 ec 0c             	sub    esp,0xc
c00262fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262fe:	e8 5f fe ff ff       	call   c0026162 <PIC::remap()>
c0026303:	83 c4 10             	add    esp,0x10
c0026306:	b8 00 00 00 00       	mov    eax,0x0
c002630b:	c9                   	leave  
c002630c:	c3                   	ret    
c002630d:	90                   	nop

c002630e <APICTimer::close(int, int, void*)>:
c002630e:	b8 00 00 00 00       	mov    eax,0x0
c0026313:	c3                   	ret    

c0026314 <apicTimerHandler(regs*, void*)>:
c0026314:	83 ec 0c             	sub    esp,0xc
c0026317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002631b:	8b 00                	mov    eax,DWORD PTR [eax]
c002631d:	99                   	cdq    
c002631e:	52                   	push   edx
c002631f:	50                   	push   eax
c0026320:	6a 00                	push   0x0
c0026322:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026327:	e8 90 07 00 00       	call   c0026abc <__udivdi3>
c002632c:	83 c4 10             	add    esp,0x10
c002632f:	83 ec 08             	sub    esp,0x8
c0026332:	52                   	push   edx
c0026333:	50                   	push   eax
c0026334:	e8 d8 0a ff ff       	call   c0016e11 <timerHandler(unsigned long long)>
c0026339:	83 c4 10             	add    esp,0x10
c002633c:	90                   	nop
c002633d:	83 c4 0c             	add    esp,0xc
c0026340:	c3                   	ret    
c0026341:	90                   	nop

c0026342 <APICTimer::write(int)>:
c0026342:	53                   	push   ebx
c0026343:	83 ec 28             	sub    esp,0x28
c0026346:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002634a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002634e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026354:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0026359:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002635f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026365:	83 ec 0c             	sub    esp,0xc
c0026368:	50                   	push   eax
c0026369:	e8 de f4 ff ff       	call   c002584c <APIC::getBase()>
c002636e:	83 c4 10             	add    esp,0x10
c0026371:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026375:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c002637a:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c0026380:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026384:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638c:	05 e0 03 00 00       	add    eax,0x3e0
c0026391:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639b:	05 80 03 00 00       	add    eax,0x380
c00263a0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00263a6:	fb                   	sti    
c00263a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00263af:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00263b4:	83 d2 00             	adc    edx,0x0
c00263b7:	89 c1                	mov    ecx,eax
c00263b9:	89 d3                	mov    ebx,edx
c00263bb:	a1 10 ec 02 c0       	mov    eax,ds:0xc002ec10
c00263c0:	8b 15 14 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec14
c00263c6:	39 c8                	cmp    eax,ecx
c00263c8:	89 d0                	mov    eax,edx
c00263ca:	19 d8                	sbb    eax,ebx
c00263cc:	73 02                	jae    c00263d0 <APICTimer::write(int)+0x8e>
c00263ce:	eb d7                	jmp    c00263a7 <APICTimer::write(int)+0x65>
c00263d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d4:	05 20 03 00 00       	add    eax,0x320
c00263d9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263e3:	05 90 03 00 00       	add    eax,0x390
c00263e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ea:	f7 d0                	not    eax
c00263ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263f8:	ba 00 00 00 00       	mov    edx,0x0
c00263fd:	f7 f3                	div    ebx
c00263ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026407:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002640d:	0d 00 00 02 00       	or     eax,0x20000
c0026412:	89 c2                	mov    edx,eax
c0026414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026418:	05 20 03 00 00       	add    eax,0x320
c002641d:	89 10                	mov    DWORD PTR [eax],edx
c002641f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026423:	05 e0 03 00 00       	add    eax,0x3e0
c0026428:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002642e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026432:	05 80 03 00 00       	add    eax,0x380
c0026437:	89 c2                	mov    edx,eax
c0026439:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002643d:	89 02                	mov    DWORD PTR [edx],eax
c002643f:	90                   	nop
c0026440:	83 c4 28             	add    esp,0x28
c0026443:	5b                   	pop    ebx
c0026444:	c3                   	ret    
c0026445:	90                   	nop

c0026446 <APICTimer::open(int, int, void*)>:
c0026446:	57                   	push   edi
c0026447:	56                   	push   esi
c0026448:	53                   	push   ebx
c0026449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644d:	8b 00                	mov    eax,DWORD PTR [eax]
c002644f:	83 c0 24             	add    eax,0x24
c0026452:	8b 00                	mov    eax,DWORD PTR [eax]
c0026454:	83 ec 08             	sub    esp,0x8
c0026457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002645b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002645f:	ff d0                	call   eax
c0026461:	83 c4 10             	add    esp,0x10
c0026464:	a1 68 e5 02 c0       	mov    eax,ds:0xc002e568
c0026469:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002646f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026475:	83 ec 0c             	sub    esp,0xc
c0026478:	50                   	push   eax
c0026479:	e8 ce f3 ff ff       	call   c002584c <APIC::getBase()>
c002647e:	83 c4 10             	add    esp,0x10
c0026481:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026491:	0f b6 f8             	movzx  edi,al
c0026494:	89 d0                	mov    eax,edx
c0026496:	ba 00 00 00 00       	mov    edx,0x0
c002649b:	89 c1                	mov    ecx,eax
c002649d:	80 e5 ff             	and    ch,0xff
c00264a0:	89 cb                	mov    ebx,ecx
c00264a2:	0f b6 f2             	movzx  esi,dl
c00264a5:	89 d8                	mov    eax,ebx
c00264a7:	89 f2                	mov    edx,esi
c00264a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264ad:	8d 5f 08             	lea    ebx,[edi+0x8]
c00264b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00264b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00264b8:	83 e0 00             	and    eax,0x0
c00264bb:	09 d0                	or     eax,edx
c00264bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264cb:	8d 50 01             	lea    edx,[eax+0x1]
c00264ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264d2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264d8:	0f b6 d0             	movzx  edx,al
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	83 c2 08             	add    edx,0x8
c00264e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264e6:	0f b6 c9             	movzx  ecx,cl
c00264e9:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264fb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026505:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026509:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002650f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026513:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026519:	83 ec 0c             	sub    esp,0xc
c002651c:	51                   	push   ecx
c002651d:	6a 01                	push   0x1
c002651f:	68 14 63 02 c0       	push   0xc0026314
c0026524:	52                   	push   edx
c0026525:	50                   	push   eax
c0026526:	e8 b7 de fe ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002652b:	83 c4 20             	add    esp,0x20
c002652e:	89 c2                	mov    edx,eax
c0026530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026534:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002653a:	b8 00 00 00 00       	mov    eax,0x0
c002653f:	5b                   	pop    ebx
c0026540:	5e                   	pop    esi
c0026541:	5f                   	pop    edi
c0026542:	c3                   	ret    
c0026543:	90                   	nop

c0026544 <APICTimer::APICTimer()>:
c0026544:	83 ec 0c             	sub    esp,0xc
c0026547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654b:	83 ec 08             	sub    esp,0x8
c002654e:	68 04 d4 02 c0       	push   0xc002d404
c0026553:	50                   	push   eax
c0026554:	e8 29 08 ff ff       	call   c0016d82 <Timer::Timer(char const*)>
c0026559:	83 c4 10             	add    esp,0x10
c002655c:	ba 18 d4 02 c0       	mov    edx,0xc002d418
c0026561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026565:	89 10                	mov    DWORD PTR [eax],edx
c0026567:	90                   	nop
c0026568:	83 c4 0c             	add    esp,0xc
c002656b:	c3                   	ret    

c002656c <PIT::write(int)>:
c002656c:	83 ec 10             	sub    esp,0x10
c002656f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026573:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026577:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002657d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026581:	a3 44 29 03 c0       	mov    ds:0xc0032944,eax
c0026586:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002658b:	99                   	cdq    
c002658c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026594:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002659b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00265a0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00265a4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00265a9:	ee                   	out    dx,al
c00265aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265ae:	0f b6 c0             	movzx  eax,al
c00265b1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00265b8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00265bc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265c0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265c5:	ee                   	out    dx,al
c00265c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265ca:	c1 f8 08             	sar    eax,0x8
c00265cd:	0f b6 c0             	movzx  eax,al
c00265d0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265d7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265e4:	ee                   	out    dx,al
c00265e5:	90                   	nop
c00265e6:	83 c4 10             	add    esp,0x10
c00265e9:	c3                   	ret    

c00265ea <pitHandler(regs*, void*)>:
c00265ea:	83 ec 0c             	sub    esp,0xc
c00265ed:	a1 44 29 03 c0       	mov    eax,ds:0xc0032944
c00265f2:	99                   	cdq    
c00265f3:	52                   	push   edx
c00265f4:	50                   	push   eax
c00265f5:	6a 00                	push   0x0
c00265f7:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265fc:	e8 bb 04 00 00       	call   c0026abc <__udivdi3>
c0026601:	83 c4 10             	add    esp,0x10
c0026604:	83 ec 08             	sub    esp,0x8
c0026607:	52                   	push   edx
c0026608:	50                   	push   eax
c0026609:	e8 03 08 ff ff       	call   c0016e11 <timerHandler(unsigned long long)>
c002660e:	83 c4 10             	add    esp,0x10
c0026611:	90                   	nop
c0026612:	83 c4 0c             	add    esp,0xc
c0026615:	c3                   	ret    

c0026616 <PIT::open(int, int, void*)>:
c0026616:	83 ec 0c             	sub    esp,0xc
c0026619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661d:	8b 00                	mov    eax,DWORD PTR [eax]
c002661f:	83 c0 24             	add    eax,0x24
c0026622:	8b 00                	mov    eax,DWORD PTR [eax]
c0026624:	83 ec 08             	sub    esp,0x8
c0026627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002662b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002662f:	ff d0                	call   eax
c0026631:	83 c4 10             	add    esp,0x10
c0026634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026638:	83 ec 0c             	sub    esp,0xc
c002663b:	6a 00                	push   0x0
c002663d:	6a 01                	push   0x1
c002663f:	68 ea 65 02 c0       	push   0xc00265ea
c0026644:	6a 00                	push   0x0
c0026646:	50                   	push   eax
c0026647:	e8 96 dd fe ff       	call   c00143e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002664c:	83 c4 20             	add    esp,0x20
c002664f:	89 c2                	mov    edx,eax
c0026651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026655:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002665b:	b8 00 00 00 00       	mov    eax,0x0
c0026660:	83 c4 0c             	add    esp,0xc
c0026663:	c3                   	ret    

c0026664 <PIT::close(int, int, void*)>:
c0026664:	83 ec 0c             	sub    esp,0xc
c0026667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026679:	6a 01                	push   0x1
c002667b:	68 ea 65 02 c0       	push   0xc00265ea
c0026680:	6a 00                	push   0x0
c0026682:	50                   	push   eax
c0026683:	e8 98 dd fe ff       	call   c0014420 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026688:	83 c4 10             	add    esp,0x10
c002668b:	b8 00 00 00 00       	mov    eax,0x0
c0026690:	83 c4 0c             	add    esp,0xc
c0026693:	c3                   	ret    

c0026694 <PIT::PIT()>:
c0026694:	83 ec 0c             	sub    esp,0xc
c0026697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669b:	83 ec 08             	sub    esp,0x8
c002669e:	68 40 d4 02 c0       	push   0xc002d440
c00266a3:	50                   	push   eax
c00266a4:	e8 d9 06 ff ff       	call   c0016d82 <Timer::Timer(char const*)>
c00266a9:	83 c4 10             	add    esp,0x10
c00266ac:	ba 68 d4 02 c0       	mov    edx,0xc002d468
c00266b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b5:	89 10                	mov    DWORD PTR [eax],edx
c00266b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c1:	0f b6 d0             	movzx  edx,al
c00266c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d9:	0f b6 d0             	movzx  edx,al
c00266dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ef:	8d 50 01             	lea    edx,[eax+0x1]
c00266f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266f6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266fc:	0f b6 d0             	movzx  edx,al
c00266ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026703:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026707:	83 e1 3f             	and    ecx,0x3f
c002670a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002670e:	90                   	nop
c002670f:	83 c4 0c             	add    esp,0xc
c0026712:	c3                   	ret    
c0026713:	66 90                	xchg   ax,ax
c0026715:	66 90                	xchg   ax,ax
c0026717:	66 90                	xchg   ax,ax
c0026719:	66 90                	xchg   ax,ax
c002671b:	66 90                	xchg   ax,ax
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <avxDetect>:
c0026720:	b8 00 00 00 00       	mov    eax,0x0
c0026725:	c3                   	ret    

c0026726 <avxSave>:
c0026726:	c3                   	ret    

c0026727 <avxLoad>:
c0026727:	c3                   	ret    

c0026728 <avxInit>:
c0026728:	c3                   	ret    

c0026729 <avxClose>:
c0026729:	c3                   	ret    

c002672a <wouldSheSayYes>:
c002672a:	c3                   	ret    
c002672b:	49                   	dec    ecx
c002672c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026730:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026734:	75 20                	jne    c0026756 <sseDetect.noSSE+0x1>
c0026736:	4e                   	dec    esi
c0026737:	79 61                	jns    c002679a <x87Detect+0x14>
c0026739:	68 2e 2e 2e 00       	push   0x2e2e2e
c002673e:	66 90                	xchg   ax,ax

c0026740 <absolutelyNoChanceInHell>:
c0026740:	b8 01 00 00 00       	mov    eax,0x1
c0026745:	0f a2                	cpuid  
c0026747:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002674d:	74 06                	je     c0026755 <sseDetect.noSSE>
c002674f:	b8 01 00 00 00       	mov    eax,0x1
c0026754:	c3                   	ret    

c0026755 <sseDetect.noSSE>:
c0026755:	31 c0                	xor    eax,eax
c0026757:	c3                   	ret    

c0026758 <sseSave>:
c0026758:	0f ae 44 24 08       	fxsave [esp+0x8]
c002675d:	c3                   	ret    

c002675e <sseLoad>:
c002675e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026763:	c3                   	ret    

c0026764 <sseInit>:
c0026764:	e8 43 00 00 00       	call   c00267ac <x87Init>
c0026769:	0f 20 e0             	mov    eax,cr4
c002676c:	66 0d 00 06          	or     ax,0x600
c0026770:	0f 22 e0             	mov    cr4,eax
c0026773:	c3                   	ret    

c0026774 <sseClose>:
c0026774:	c3                   	ret    
c0026775:	66 90                	xchg   ax,ax
c0026777:	66 90                	xchg   ax,ax
c0026779:	66 90                	xchg   ax,ax
c002677b:	66 90                	xchg   ax,ax
c002677d:	66 90                	xchg   ax,ax
c002677f:	90                   	nop

c0026780 <value_37F>:
c0026780:	7f 03                	jg     c0026785 <value_37A+0x1>

c0026782 <value_37E>:
c0026782:	7e 03                	jle    c0026787 <x87Detect+0x1>

c0026784 <value_37A>:
c0026784:	7a 03                	jp     c0026789 <x87Detect+0x3>

c0026786 <x87Detect>:
c0026786:	b8 01 00 00 00       	mov    eax,0x1
c002678b:	0f a2                	cpuid  
c002678d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026793:	74 06                	je     c002679b <x87Detect.nox87>
c0026795:	b8 01 00 00 00       	mov    eax,0x1
c002679a:	c3                   	ret    

c002679b <x87Detect.nox87>:
c002679b:	b8 00 00 00 00       	mov    eax,0x0
c00267a0:	c3                   	ret    

c00267a1 <x87Save>:
c00267a1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00267a6:	c3                   	ret    

c00267a7 <x87Load>:
c00267a7:	dd 64 24 08          	frstor [esp+0x8]
c00267ab:	c3                   	ret    

c00267ac <x87Init>:
c00267ac:	9b db e3             	finit  
c00267af:	0f 20 c0             	mov    eax,cr0
c00267b2:	66 25 fb ff          	and    ax,0xfffb
c00267b6:	66 0d 22 00          	or     ax,0x22
c00267ba:	0f 22 c0             	mov    cr0,eax
c00267bd:	0f 06                	clts   
c00267bf:	d9 2d 84 67 02 c0    	fldcw  WORD PTR ds:0xc0026784
c00267c5:	c3                   	ret    

c00267c6 <x87Close>:
c00267c6:	c3                   	ret    
c00267c7:	90                   	nop

c00267c8 <__do_global_ctors_aux>:
c00267c8:	a1 0c 93 02 c0       	mov    eax,ds:0xc002930c
c00267cd:	83 f8 ff             	cmp    eax,0xffffffff
c00267d0:	74 1a                	je     c00267ec <__do_global_ctors_aux+0x24>
c00267d2:	55                   	push   ebp
c00267d3:	89 e5                	mov    ebp,esp
c00267d5:	53                   	push   ebx
c00267d6:	52                   	push   edx
c00267d7:	bb 0c 93 02 c0       	mov    ebx,0xc002930c
c00267dc:	ff d0                	call   eax
c00267de:	83 eb 04             	sub    ebx,0x4
c00267e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267e3:	83 f8 ff             	cmp    eax,0xffffffff
c00267e6:	75 f4                	jne    c00267dc <__do_global_ctors_aux+0x14>
c00267e8:	58                   	pop    eax
c00267e9:	5b                   	pop    ebx
c00267ea:	5d                   	pop    ebp
c00267eb:	c3                   	ret    
c00267ec:	c3                   	ret    
c00267ed:	66 90                	xchg   ax,ax
c00267ef:	90                   	nop

c00267f0 <__divdi3>:
c00267f0:	55                   	push   ebp
c00267f1:	57                   	push   edi
c00267f2:	56                   	push   esi
c00267f3:	53                   	push   ebx
c00267f4:	83 ec 1c             	sub    esp,0x1c
c00267f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026802:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026806:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002680a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002680e:	85 db                	test   ebx,ebx
c0026810:	0f 88 8e 00 00 00    	js     c00268a4 <__divdi3+0xb4>
c0026816:	89 dd                	mov    ebp,ebx
c0026818:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026820:	89 d3                	mov    ebx,edx
c0026822:	85 d2                	test   edx,edx
c0026824:	79 0d                	jns    c0026833 <__divdi3+0x43>
c0026826:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002682a:	f7 d8                	neg    eax
c002682c:	83 d2 00             	adc    edx,0x0
c002682f:	f7 da                	neg    edx
c0026831:	89 d3                	mov    ebx,edx
c0026833:	89 c7                	mov    edi,eax
c0026835:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026838:	85 db                	test   ebx,ebx
c002683a:	75 48                	jne    c0026884 <__divdi3+0x94>
c002683c:	39 ef                	cmp    edi,ebp
c002683e:	76 24                	jbe    c0026864 <__divdi3+0x74>
c0026840:	89 ea                	mov    edx,ebp
c0026842:	f7 f7                	div    edi
c0026844:	89 c1                	mov    ecx,eax
c0026846:	31 f6                	xor    esi,esi
c0026848:	89 c8                	mov    eax,ecx
c002684a:	89 f2                	mov    edx,esi
c002684c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026850:	85 c9                	test   ecx,ecx
c0026852:	74 07                	je     c002685b <__divdi3+0x6b>
c0026854:	f7 d8                	neg    eax
c0026856:	83 d2 00             	adc    edx,0x0
c0026859:	f7 da                	neg    edx
c002685b:	83 c4 1c             	add    esp,0x1c
c002685e:	5b                   	pop    ebx
c002685f:	5e                   	pop    esi
c0026860:	5f                   	pop    edi
c0026861:	5d                   	pop    ebp
c0026862:	c3                   	ret    
c0026863:	90                   	nop
c0026864:	85 ff                	test   edi,edi
c0026866:	75 0b                	jne    c0026873 <__divdi3+0x83>
c0026868:	b8 01 00 00 00       	mov    eax,0x1
c002686d:	31 d2                	xor    edx,edx
c002686f:	f7 f3                	div    ebx
c0026871:	89 c7                	mov    edi,eax
c0026873:	31 d2                	xor    edx,edx
c0026875:	89 e8                	mov    eax,ebp
c0026877:	f7 f7                	div    edi
c0026879:	89 c6                	mov    esi,eax
c002687b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002687e:	f7 f7                	div    edi
c0026880:	89 c1                	mov    ecx,eax
c0026882:	eb c4                	jmp    c0026848 <__divdi3+0x58>
c0026884:	39 eb                	cmp    ebx,ebp
c0026886:	77 3c                	ja     c00268c4 <__divdi3+0xd4>
c0026888:	0f bd f3             	bsr    esi,ebx
c002688b:	83 f6 1f             	xor    esi,0x1f
c002688e:	75 40                	jne    c00268d0 <__divdi3+0xe0>
c0026890:	39 eb                	cmp    ebx,ebp
c0026892:	72 09                	jb     c002689d <__divdi3+0xad>
c0026894:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026897:	0f 87 97 00 00 00    	ja     c0026934 <__divdi3+0x144>
c002689d:	b9 01 00 00 00       	mov    ecx,0x1
c00268a2:	eb a4                	jmp    c0026848 <__divdi3+0x58>
c00268a4:	f7 d9                	neg    ecx
c00268a6:	83 d3 00             	adc    ebx,0x0
c00268a9:	f7 db                	neg    ebx
c00268ab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00268ae:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00268b2:	89 dd                	mov    ebp,ebx
c00268b4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00268bc:	e9 5f ff ff ff       	jmp    c0026820 <__divdi3+0x30>
c00268c1:	8d 76 00             	lea    esi,[esi+0x0]
c00268c4:	31 f6                	xor    esi,esi
c00268c6:	31 c9                	xor    ecx,ecx
c00268c8:	e9 7b ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c00268cd:	8d 76 00             	lea    esi,[esi+0x0]
c00268d0:	b8 20 00 00 00       	mov    eax,0x20
c00268d5:	29 f0                	sub    eax,esi
c00268d7:	89 f1                	mov    ecx,esi
c00268d9:	d3 e3                	shl    ebx,cl
c00268db:	89 fa                	mov    edx,edi
c00268dd:	88 c1                	mov    cl,al
c00268df:	d3 ea                	shr    edx,cl
c00268e1:	09 da                	or     edx,ebx
c00268e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268e7:	89 f1                	mov    ecx,esi
c00268e9:	d3 e7                	shl    edi,cl
c00268eb:	89 eb                	mov    ebx,ebp
c00268ed:	88 c1                	mov    cl,al
c00268ef:	d3 eb                	shr    ebx,cl
c00268f1:	89 f1                	mov    ecx,esi
c00268f3:	d3 e5                	shl    ebp,cl
c00268f5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268f8:	88 c1                	mov    cl,al
c00268fa:	d3 ea                	shr    edx,cl
c00268fc:	09 d5                	or     ebp,edx
c00268fe:	89 e8                	mov    eax,ebp
c0026900:	89 da                	mov    edx,ebx
c0026902:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026906:	89 d3                	mov    ebx,edx
c0026908:	89 c5                	mov    ebp,eax
c002690a:	f7 e7                	mul    edi
c002690c:	39 d3                	cmp    ebx,edx
c002690e:	72 18                	jb     c0026928 <__divdi3+0x138>
c0026910:	74 0a                	je     c002691c <__divdi3+0x12c>
c0026912:	89 e9                	mov    ecx,ebp
c0026914:	31 f6                	xor    esi,esi
c0026916:	e9 2d ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c002691b:	90                   	nop
c002691c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002691f:	89 f1                	mov    ecx,esi
c0026921:	d3 e7                	shl    edi,cl
c0026923:	39 c7                	cmp    edi,eax
c0026925:	73 eb                	jae    c0026912 <__divdi3+0x122>
c0026927:	90                   	nop
c0026928:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002692b:	31 f6                	xor    esi,esi
c002692d:	e9 16 ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c0026932:	66 90                	xchg   ax,ax
c0026934:	31 c9                	xor    ecx,ecx
c0026936:	e9 0d ff ff ff       	jmp    c0026848 <__divdi3+0x58>
c002693b:	90                   	nop

c002693c <__moddi3>:
c002693c:	55                   	push   ebp
c002693d:	57                   	push   edi
c002693e:	56                   	push   esi
c002693f:	53                   	push   ebx
c0026940:	83 ec 2c             	sub    esp,0x2c
c0026943:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026947:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002694b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002694f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026953:	85 db                	test   ebx,ebx
c0026955:	0f 88 85 00 00 00    	js     c00269e0 <__moddi3+0xa4>
c002695b:	89 de                	mov    esi,ebx
c002695d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026965:	89 d7                	mov    edi,edx
c0026967:	85 d2                	test   edx,edx
c0026969:	79 09                	jns    c0026974 <__moddi3+0x38>
c002696b:	f7 d8                	neg    eax
c002696d:	83 d2 00             	adc    edx,0x0
c0026970:	f7 da                	neg    edx
c0026972:	89 d7                	mov    edi,edx
c0026974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026978:	89 cd                	mov    ebp,ecx
c002697a:	85 ff                	test   edi,edi
c002697c:	75 52                	jne    c00269d0 <__moddi3+0x94>
c002697e:	89 c3                	mov    ebx,eax
c0026980:	39 f0                	cmp    eax,esi
c0026982:	76 24                	jbe    c00269a8 <__moddi3+0x6c>
c0026984:	89 c8                	mov    eax,ecx
c0026986:	89 f2                	mov    edx,esi
c0026988:	f7 f3                	div    ebx
c002698a:	89 d6                	mov    esi,edx
c002698c:	89 f0                	mov    eax,esi
c002698e:	31 d2                	xor    edx,edx
c0026990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026994:	85 c9                	test   ecx,ecx
c0026996:	74 07                	je     c002699f <__moddi3+0x63>
c0026998:	f7 d8                	neg    eax
c002699a:	83 d2 00             	adc    edx,0x0
c002699d:	f7 da                	neg    edx
c002699f:	83 c4 2c             	add    esp,0x2c
c00269a2:	5b                   	pop    ebx
c00269a3:	5e                   	pop    esi
c00269a4:	5f                   	pop    edi
c00269a5:	5d                   	pop    ebp
c00269a6:	c3                   	ret    
c00269a7:	90                   	nop
c00269a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00269ac:	85 db                	test   ebx,ebx
c00269ae:	75 0d                	jne    c00269bd <__moddi3+0x81>
c00269b0:	b8 01 00 00 00       	mov    eax,0x1
c00269b5:	31 d2                	xor    edx,edx
c00269b7:	f7 f7                	div    edi
c00269b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00269bd:	89 f0                	mov    eax,esi
c00269bf:	31 d2                	xor    edx,edx
c00269c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269c5:	f7 f7                	div    edi
c00269c7:	89 e8                	mov    eax,ebp
c00269c9:	f7 f7                	div    edi
c00269cb:	89 d6                	mov    esi,edx
c00269cd:	eb bd                	jmp    c002698c <__moddi3+0x50>
c00269cf:	90                   	nop
c00269d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269d4:	39 f7                	cmp    edi,esi
c00269d6:	76 20                	jbe    c00269f8 <__moddi3+0xbc>
c00269d8:	89 c8                	mov    eax,ecx
c00269da:	89 f2                	mov    edx,esi
c00269dc:	eb b2                	jmp    c0026990 <__moddi3+0x54>
c00269de:	66 90                	xchg   ax,ax
c00269e0:	f7 d9                	neg    ecx
c00269e2:	83 d3 00             	adc    ebx,0x0
c00269e5:	f7 db                	neg    ebx
c00269e7:	89 de                	mov    esi,ebx
c00269e9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269f1:	e9 6f ff ff ff       	jmp    c0026965 <__moddi3+0x29>
c00269f6:	66 90                	xchg   ax,ax
c00269f8:	0f bd c7             	bsr    eax,edi
c00269fb:	83 f0 1f             	xor    eax,0x1f
c00269fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026a02:	75 24                	jne    c0026a28 <__moddi3+0xec>
c0026a04:	39 f7                	cmp    edi,esi
c0026a06:	72 06                	jb     c0026a0e <__moddi3+0xd2>
c0026a08:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026a0c:	77 0c                	ja     c0026a1a <__moddi3+0xde>
c0026a0e:	89 e9                	mov    ecx,ebp
c0026a10:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026a14:	19 fe                	sbb    esi,edi
c0026a16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026a1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a1e:	89 f2                	mov    edx,esi
c0026a20:	e9 6b ff ff ff       	jmp    c0026990 <__moddi3+0x54>
c0026a25:	8d 76 00             	lea    esi,[esi+0x0]
c0026a28:	b8 20 00 00 00       	mov    eax,0x20
c0026a2d:	89 c2                	mov    edx,eax
c0026a2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a33:	29 da                	sub    edx,ebx
c0026a35:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a39:	88 d9                	mov    cl,bl
c0026a3b:	d3 e7                	shl    edi,cl
c0026a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a41:	88 d1                	mov    cl,dl
c0026a43:	d3 e8                	shr    eax,cl
c0026a45:	09 c7                	or     edi,eax
c0026a47:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a4b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a4f:	89 d8                	mov    eax,ebx
c0026a51:	88 d9                	mov    cl,bl
c0026a53:	d3 e7                	shl    edi,cl
c0026a55:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a59:	89 f3                	mov    ebx,esi
c0026a5b:	88 d1                	mov    cl,dl
c0026a5d:	d3 eb                	shr    ebx,cl
c0026a5f:	89 c7                	mov    edi,eax
c0026a61:	88 c1                	mov    cl,al
c0026a63:	d3 e6                	shl    esi,cl
c0026a65:	89 e8                	mov    eax,ebp
c0026a67:	88 d1                	mov    cl,dl
c0026a69:	d3 e8                	shr    eax,cl
c0026a6b:	09 f0                	or     eax,esi
c0026a6d:	89 f9                	mov    ecx,edi
c0026a6f:	d3 e5                	shl    ebp,cl
c0026a71:	89 da                	mov    edx,ebx
c0026a73:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a77:	89 d3                	mov    ebx,edx
c0026a79:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a7d:	89 c6                	mov    esi,eax
c0026a7f:	89 d1                	mov    ecx,edx
c0026a81:	39 d3                	cmp    ebx,edx
c0026a83:	72 27                	jb     c0026aac <__moddi3+0x170>
c0026a85:	74 21                	je     c0026aa8 <__moddi3+0x16c>
c0026a87:	29 f5                	sub    ebp,esi
c0026a89:	19 cb                	sbb    ebx,ecx
c0026a8b:	89 de                	mov    esi,ebx
c0026a8d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a91:	d3 e6                	shl    esi,cl
c0026a93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a97:	89 f9                	mov    ecx,edi
c0026a99:	d3 ed                	shr    ebp,cl
c0026a9b:	09 ee                	or     esi,ebp
c0026a9d:	89 f0                	mov    eax,esi
c0026a9f:	d3 eb                	shr    ebx,cl
c0026aa1:	89 da                	mov    edx,ebx
c0026aa3:	e9 e8 fe ff ff       	jmp    c0026990 <__moddi3+0x54>
c0026aa8:	39 c5                	cmp    ebp,eax
c0026aaa:	73 db                	jae    c0026a87 <__moddi3+0x14b>
c0026aac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ab0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026ab4:	89 d1                	mov    ecx,edx
c0026ab6:	89 c6                	mov    esi,eax
c0026ab8:	eb cd                	jmp    c0026a87 <__moddi3+0x14b>
c0026aba:	66 90                	xchg   ax,ax

c0026abc <__udivdi3>:
c0026abc:	55                   	push   ebp
c0026abd:	57                   	push   edi
c0026abe:	56                   	push   esi
c0026abf:	53                   	push   ebx
c0026ac0:	83 ec 1c             	sub    esp,0x1c
c0026ac3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026ac7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026acb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026acf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ad3:	85 d2                	test   edx,edx
c0026ad5:	75 41                	jne    c0026b18 <__udivdi3+0x5c>
c0026ad7:	39 f7                	cmp    edi,esi
c0026ad9:	76 15                	jbe    c0026af0 <__udivdi3+0x34>
c0026adb:	89 e8                	mov    eax,ebp
c0026add:	89 f2                	mov    edx,esi
c0026adf:	f7 f7                	div    edi
c0026ae1:	31 db                	xor    ebx,ebx
c0026ae3:	89 da                	mov    edx,ebx
c0026ae5:	83 c4 1c             	add    esp,0x1c
c0026ae8:	5b                   	pop    ebx
c0026ae9:	5e                   	pop    esi
c0026aea:	5f                   	pop    edi
c0026aeb:	5d                   	pop    ebp
c0026aec:	c3                   	ret    
c0026aed:	8d 76 00             	lea    esi,[esi+0x0]
c0026af0:	89 f9                	mov    ecx,edi
c0026af2:	85 ff                	test   edi,edi
c0026af4:	75 0b                	jne    c0026b01 <__udivdi3+0x45>
c0026af6:	b8 01 00 00 00       	mov    eax,0x1
c0026afb:	31 d2                	xor    edx,edx
c0026afd:	f7 f7                	div    edi
c0026aff:	89 c1                	mov    ecx,eax
c0026b01:	31 d2                	xor    edx,edx
c0026b03:	89 f0                	mov    eax,esi
c0026b05:	f7 f1                	div    ecx
c0026b07:	89 c3                	mov    ebx,eax
c0026b09:	89 e8                	mov    eax,ebp
c0026b0b:	f7 f1                	div    ecx
c0026b0d:	89 da                	mov    edx,ebx
c0026b0f:	83 c4 1c             	add    esp,0x1c
c0026b12:	5b                   	pop    ebx
c0026b13:	5e                   	pop    esi
c0026b14:	5f                   	pop    edi
c0026b15:	5d                   	pop    ebp
c0026b16:	c3                   	ret    
c0026b17:	90                   	nop
c0026b18:	39 f2                	cmp    edx,esi
c0026b1a:	77 1c                	ja     c0026b38 <__udivdi3+0x7c>
c0026b1c:	0f bd da             	bsr    ebx,edx
c0026b1f:	83 f3 1f             	xor    ebx,0x1f
c0026b22:	75 24                	jne    c0026b48 <__udivdi3+0x8c>
c0026b24:	39 f2                	cmp    edx,esi
c0026b26:	72 08                	jb     c0026b30 <__udivdi3+0x74>
c0026b28:	39 ef                	cmp    edi,ebp
c0026b2a:	0f 87 84 00 00 00    	ja     c0026bb4 <__udivdi3+0xf8>
c0026b30:	b8 01 00 00 00       	mov    eax,0x1
c0026b35:	eb ac                	jmp    c0026ae3 <__udivdi3+0x27>
c0026b37:	90                   	nop
c0026b38:	31 db                	xor    ebx,ebx
c0026b3a:	31 c0                	xor    eax,eax
c0026b3c:	89 da                	mov    edx,ebx
c0026b3e:	83 c4 1c             	add    esp,0x1c
c0026b41:	5b                   	pop    ebx
c0026b42:	5e                   	pop    esi
c0026b43:	5f                   	pop    edi
c0026b44:	5d                   	pop    ebp
c0026b45:	c3                   	ret    
c0026b46:	66 90                	xchg   ax,ax
c0026b48:	b8 20 00 00 00       	mov    eax,0x20
c0026b4d:	29 d8                	sub    eax,ebx
c0026b4f:	88 d9                	mov    cl,bl
c0026b51:	d3 e2                	shl    edx,cl
c0026b53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b57:	89 fa                	mov    edx,edi
c0026b59:	88 c1                	mov    cl,al
c0026b5b:	d3 ea                	shr    edx,cl
c0026b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b61:	09 d1                	or     ecx,edx
c0026b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b67:	88 d9                	mov    cl,bl
c0026b69:	d3 e7                	shl    edi,cl
c0026b6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b6f:	89 f7                	mov    edi,esi
c0026b71:	88 c1                	mov    cl,al
c0026b73:	d3 ef                	shr    edi,cl
c0026b75:	88 d9                	mov    cl,bl
c0026b77:	d3 e6                	shl    esi,cl
c0026b79:	89 ea                	mov    edx,ebp
c0026b7b:	88 c1                	mov    cl,al
c0026b7d:	d3 ea                	shr    edx,cl
c0026b7f:	09 d6                	or     esi,edx
c0026b81:	89 f0                	mov    eax,esi
c0026b83:	89 fa                	mov    edx,edi
c0026b85:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b89:	89 d7                	mov    edi,edx
c0026b8b:	89 c6                	mov    esi,eax
c0026b8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b91:	39 d7                	cmp    edi,edx
c0026b93:	72 13                	jb     c0026ba8 <__udivdi3+0xec>
c0026b95:	74 09                	je     c0026ba0 <__udivdi3+0xe4>
c0026b97:	89 f0                	mov    eax,esi
c0026b99:	31 db                	xor    ebx,ebx
c0026b9b:	e9 43 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026ba0:	88 d9                	mov    cl,bl
c0026ba2:	d3 e5                	shl    ebp,cl
c0026ba4:	39 c5                	cmp    ebp,eax
c0026ba6:	73 ef                	jae    c0026b97 <__udivdi3+0xdb>
c0026ba8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bab:	31 db                	xor    ebx,ebx
c0026bad:	e9 31 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026bb2:	66 90                	xchg   ax,ax
c0026bb4:	31 c0                	xor    eax,eax
c0026bb6:	e9 28 ff ff ff       	jmp    c0026ae3 <__udivdi3+0x27>
c0026bbb:	90                   	nop

c0026bbc <__umoddi3>:
c0026bbc:	55                   	push   ebp
c0026bbd:	57                   	push   edi
c0026bbe:	56                   	push   esi
c0026bbf:	53                   	push   ebx
c0026bc0:	83 ec 1c             	sub    esp,0x1c
c0026bc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026bc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bcb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026bcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bd3:	89 da                	mov    edx,ebx
c0026bd5:	85 c0                	test   eax,eax
c0026bd7:	75 37                	jne    c0026c10 <__umoddi3+0x54>
c0026bd9:	39 df                	cmp    edi,ebx
c0026bdb:	76 13                	jbe    c0026bf0 <__umoddi3+0x34>
c0026bdd:	89 f0                	mov    eax,esi
c0026bdf:	f7 f7                	div    edi
c0026be1:	89 d0                	mov    eax,edx
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	83 c4 1c             	add    esp,0x1c
c0026be8:	5b                   	pop    ebx
c0026be9:	5e                   	pop    esi
c0026bea:	5f                   	pop    edi
c0026beb:	5d                   	pop    ebp
c0026bec:	c3                   	ret    
c0026bed:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf0:	89 fd                	mov    ebp,edi
c0026bf2:	85 ff                	test   edi,edi
c0026bf4:	75 0b                	jne    c0026c01 <__umoddi3+0x45>
c0026bf6:	b8 01 00 00 00       	mov    eax,0x1
c0026bfb:	31 d2                	xor    edx,edx
c0026bfd:	f7 f7                	div    edi
c0026bff:	89 c5                	mov    ebp,eax
c0026c01:	89 d8                	mov    eax,ebx
c0026c03:	31 d2                	xor    edx,edx
c0026c05:	f7 f5                	div    ebp
c0026c07:	89 f0                	mov    eax,esi
c0026c09:	f7 f5                	div    ebp
c0026c0b:	89 d0                	mov    eax,edx
c0026c0d:	eb d4                	jmp    c0026be3 <__umoddi3+0x27>
c0026c0f:	90                   	nop
c0026c10:	89 f1                	mov    ecx,esi
c0026c12:	39 d8                	cmp    eax,ebx
c0026c14:	76 0a                	jbe    c0026c20 <__umoddi3+0x64>
c0026c16:	89 f0                	mov    eax,esi
c0026c18:	83 c4 1c             	add    esp,0x1c
c0026c1b:	5b                   	pop    ebx
c0026c1c:	5e                   	pop    esi
c0026c1d:	5f                   	pop    edi
c0026c1e:	5d                   	pop    ebp
c0026c1f:	c3                   	ret    
c0026c20:	0f bd e8             	bsr    ebp,eax
c0026c23:	83 f5 1f             	xor    ebp,0x1f
c0026c26:	75 1c                	jne    c0026c44 <__umoddi3+0x88>
c0026c28:	39 d8                	cmp    eax,ebx
c0026c2a:	72 04                	jb     c0026c30 <__umoddi3+0x74>
c0026c2c:	39 f7                	cmp    edi,esi
c0026c2e:	77 08                	ja     c0026c38 <__umoddi3+0x7c>
c0026c30:	89 da                	mov    edx,ebx
c0026c32:	29 fe                	sub    esi,edi
c0026c34:	19 c2                	sbb    edx,eax
c0026c36:	89 f1                	mov    ecx,esi
c0026c38:	89 c8                	mov    eax,ecx
c0026c3a:	83 c4 1c             	add    esp,0x1c
c0026c3d:	5b                   	pop    ebx
c0026c3e:	5e                   	pop    esi
c0026c3f:	5f                   	pop    edi
c0026c40:	5d                   	pop    ebp
c0026c41:	c3                   	ret    
c0026c42:	66 90                	xchg   ax,ax
c0026c44:	ba 20 00 00 00       	mov    edx,0x20
c0026c49:	29 ea                	sub    edx,ebp
c0026c4b:	89 e9                	mov    ecx,ebp
c0026c4d:	d3 e0                	shl    eax,cl
c0026c4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c53:	89 f8                	mov    eax,edi
c0026c55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c59:	88 d1                	mov    cl,dl
c0026c5b:	d3 e8                	shr    eax,cl
c0026c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c61:	09 c1                	or     ecx,eax
c0026c63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c67:	89 e9                	mov    ecx,ebp
c0026c69:	d3 e7                	shl    edi,cl
c0026c6b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c6f:	89 d8                	mov    eax,ebx
c0026c71:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c75:	88 d1                	mov    cl,dl
c0026c77:	d3 e8                	shr    eax,cl
c0026c79:	89 c7                	mov    edi,eax
c0026c7b:	89 e9                	mov    ecx,ebp
c0026c7d:	d3 e3                	shl    ebx,cl
c0026c7f:	89 f0                	mov    eax,esi
c0026c81:	88 d1                	mov    cl,dl
c0026c83:	d3 e8                	shr    eax,cl
c0026c85:	09 d8                	or     eax,ebx
c0026c87:	89 e9                	mov    ecx,ebp
c0026c89:	d3 e6                	shl    esi,cl
c0026c8b:	89 f3                	mov    ebx,esi
c0026c8d:	89 fa                	mov    edx,edi
c0026c8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c93:	89 d1                	mov    ecx,edx
c0026c95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c99:	89 c6                	mov    esi,eax
c0026c9b:	89 d7                	mov    edi,edx
c0026c9d:	39 d1                	cmp    ecx,edx
c0026c9f:	72 27                	jb     c0026cc8 <__umoddi3+0x10c>
c0026ca1:	74 21                	je     c0026cc4 <__umoddi3+0x108>
c0026ca3:	89 ca                	mov    edx,ecx
c0026ca5:	29 f3                	sub    ebx,esi
c0026ca7:	19 fa                	sbb    edx,edi
c0026ca9:	89 d0                	mov    eax,edx
c0026cab:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026caf:	d3 e0                	shl    eax,cl
c0026cb1:	89 e9                	mov    ecx,ebp
c0026cb3:	d3 eb                	shr    ebx,cl
c0026cb5:	09 d8                	or     eax,ebx
c0026cb7:	d3 ea                	shr    edx,cl
c0026cb9:	83 c4 1c             	add    esp,0x1c
c0026cbc:	5b                   	pop    ebx
c0026cbd:	5e                   	pop    esi
c0026cbe:	5f                   	pop    edi
c0026cbf:	5d                   	pop    ebp
c0026cc0:	c3                   	ret    
c0026cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0026cc4:	39 c3                	cmp    ebx,eax
c0026cc6:	73 db                	jae    c0026ca3 <__umoddi3+0xe7>
c0026cc8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026ccc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cd0:	89 d7                	mov    edi,edx
c0026cd2:	89 c6                	mov    esi,eax
c0026cd4:	eb cd                	jmp    c0026ca3 <__umoddi3+0xe7>

c0026cd6 <__addsf3>:
c0026cd6:	55                   	push   ebp
c0026cd7:	89 e5                	mov    ebp,esp
c0026cd9:	57                   	push   edi
c0026cda:	56                   	push   esi
c0026cdb:	53                   	push   ebx
c0026cdc:	83 ec 08             	sub    esp,0x8
c0026cdf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026ce2:	89 fa                	mov    edx,edi
c0026ce4:	89 f8                	mov    eax,edi
c0026ce6:	c1 f8 17             	sar    eax,0x17
c0026ce9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026cec:	c1 e2 08             	shl    edx,0x8
c0026cef:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cf5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cf8:	89 de                	mov    esi,ebx
c0026cfa:	c1 fe 17             	sar    esi,0x17
c0026cfd:	c1 e3 08             	shl    ebx,0x8
c0026d00:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d06:	31 f0                	xor    eax,esi
c0026d08:	0f 88 3b 01 00 00    	js     c0026e49 <__addsf3+0x173>
c0026d0e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026d11:	29 f1                	sub    ecx,esi
c0026d13:	85 c9                	test   ecx,ecx
c0026d15:	7e 54                	jle    c0026d6b <__addsf3+0x95>
c0026d17:	89 f0                	mov    eax,esi
c0026d19:	84 c0                	test   al,al
c0026d1b:	75 10                	jne    c0026d2d <__addsf3+0x57>
c0026d1d:	85 db                	test   ebx,ebx
c0026d1f:	0f 84 aa 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d25:	49                   	dec    ecx
c0026d26:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d29:	74 38                	je     c0026d63 <__addsf3+0x8d>
c0026d2b:	eb 13                	jmp    c0026d40 <__addsf3+0x6a>
c0026d2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d30:	f7 d0                	not    eax
c0026d32:	84 c0                	test   al,al
c0026d34:	0f 84 95 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d3a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d40:	83 f9 1f             	cmp    ecx,0x1f
c0026d43:	0f 8f 86 02 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026d49:	89 de                	mov    esi,ebx
c0026d4b:	d3 ee                	shr    esi,cl
c0026d4d:	b8 20 00 00 00       	mov    eax,0x20
c0026d52:	29 c8                	sub    eax,ecx
c0026d54:	89 c1                	mov    ecx,eax
c0026d56:	d3 e3                	shl    ebx,cl
c0026d58:	31 c0                	xor    eax,eax
c0026d5a:	85 db                	test   ebx,ebx
c0026d5c:	0f 95 c0             	setne  al
c0026d5f:	09 f0                	or     eax,esi
c0026d61:	01 d0                	add    eax,edx
c0026d63:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d66:	e9 b6 00 00 00       	jmp    c0026e21 <__addsf3+0x14b>
c0026d6b:	74 5c                	je     c0026dc9 <__addsf3+0xf3>
c0026d6d:	89 f1                	mov    ecx,esi
c0026d6f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d75:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d79:	75 14                	jne    c0026d8f <__addsf3+0xb9>
c0026d7b:	85 d2                	test   edx,edx
c0026d7d:	0f 84 4c 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d83:	49                   	dec    ecx
c0026d84:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d87:	0f 84 94 00 00 00    	je     c0026e21 <__addsf3+0x14b>
c0026d8d:	eb 12                	jmp    c0026da1 <__addsf3+0xcb>
c0026d8f:	89 f0                	mov    eax,esi
c0026d91:	f7 d0                	not    eax
c0026d93:	84 c0                	test   al,al
c0026d95:	0f 84 34 02 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026d9b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026da4:	83 f9 1f             	cmp    ecx,0x1f
c0026da7:	0f 8f 22 02 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026dad:	89 d7                	mov    edi,edx
c0026daf:	d3 ef                	shr    edi,cl
c0026db1:	b8 20 00 00 00       	mov    eax,0x20
c0026db6:	29 c8                	sub    eax,ecx
c0026db8:	89 c1                	mov    ecx,eax
c0026dba:	d3 e2                	shl    edx,cl
c0026dbc:	31 c0                	xor    eax,eax
c0026dbe:	85 d2                	test   edx,edx
c0026dc0:	0f 95 c0             	setne  al
c0026dc3:	09 f8                	or     eax,edi
c0026dc5:	01 d8                	add    eax,ebx
c0026dc7:	eb 58                	jmp    c0026e21 <__addsf3+0x14b>
c0026dc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dcc:	8d 70 01             	lea    esi,[eax+0x1]
c0026dcf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026dd5:	75 32                	jne    c0026e09 <__addsf3+0x133>
c0026dd7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ddb:	75 1f                	jne    c0026dfc <__addsf3+0x126>
c0026ddd:	85 d2                	test   edx,edx
c0026ddf:	0f 84 e0 01 00 00    	je     c0026fc5 <__addsf3+0x2ef>
c0026de5:	85 db                	test   ebx,ebx
c0026de7:	0f 84 e2 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ded:	89 d0                	mov    eax,edx
c0026def:	01 d8                	add    eax,ebx
c0026df1:	0f 89 a9 01 00 00    	jns    c0026fa0 <__addsf3+0x2ca>
c0026df7:	e9 9d 01 00 00       	jmp    c0026f99 <__addsf3+0x2c3>
c0026dfc:	85 d2                	test   edx,edx
c0026dfe:	0f 85 cb 01 00 00    	jne    c0026fcf <__addsf3+0x2f9>
c0026e04:	e9 bc 01 00 00       	jmp    c0026fc5 <__addsf3+0x2ef>
c0026e09:	31 c0                	xor    eax,eax
c0026e0b:	89 f1                	mov    ecx,esi
c0026e0d:	f7 d1                	not    ecx
c0026e0f:	84 c9                	test   cl,cl
c0026e11:	0f 84 90 01 00 00    	je     c0026fa7 <__addsf3+0x2d1>
c0026e17:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026e1a:	d1 e8                	shr    eax,1
c0026e1c:	e9 86 01 00 00       	jmp    c0026fa7 <__addsf3+0x2d1>
c0026e21:	85 c0                	test   eax,eax
c0026e23:	0f 89 7e 01 00 00    	jns    c0026fa7 <__addsf3+0x2d1>
c0026e29:	46                   	inc    esi
c0026e2a:	89 f2                	mov    edx,esi
c0026e2c:	f7 d2                	not    edx
c0026e2e:	84 d2                	test   dl,dl
c0026e30:	0f 84 6f 01 00 00    	je     c0026fa5 <__addsf3+0x2cf>
c0026e36:	89 c2                	mov    edx,eax
c0026e38:	83 e2 01             	and    edx,0x1
c0026e3b:	d1 e8                	shr    eax,1
c0026e3d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e42:	09 d0                	or     eax,edx
c0026e44:	e9 5e 01 00 00       	jmp    c0026fa7 <__addsf3+0x2d1>
c0026e49:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e50:	89 f0                	mov    eax,esi
c0026e52:	0f b6 c0             	movzx  eax,al
c0026e55:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e58:	29 c1                	sub    ecx,eax
c0026e5a:	85 c9                	test   ecx,ecx
c0026e5c:	7e 55                	jle    c0026eb3 <__addsf3+0x1dd>
c0026e5e:	85 c0                	test   eax,eax
c0026e60:	75 11                	jne    c0026e73 <__addsf3+0x19d>
c0026e62:	85 db                	test   ebx,ebx
c0026e64:	0f 84 65 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026e6a:	49                   	dec    ecx
c0026e6b:	75 19                	jne    c0026e86 <__addsf3+0x1b0>
c0026e6d:	89 d0                	mov    eax,edx
c0026e6f:	29 d8                	sub    eax,ebx
c0026e71:	eb 38                	jmp    c0026eab <__addsf3+0x1d5>
c0026e73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e76:	f7 d0                	not    eax
c0026e78:	84 c0                	test   al,al
c0026e7a:	0f 84 4f 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026e80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e86:	83 f9 1f             	cmp    ecx,0x1f
c0026e89:	0f 8f 40 01 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026e8f:	89 de                	mov    esi,ebx
c0026e91:	d3 ee                	shr    esi,cl
c0026e93:	b8 20 00 00 00       	mov    eax,0x20
c0026e98:	29 c8                	sub    eax,ecx
c0026e9a:	89 c1                	mov    ecx,eax
c0026e9c:	d3 e3                	shl    ebx,cl
c0026e9e:	31 c0                	xor    eax,eax
c0026ea0:	85 db                	test   ebx,ebx
c0026ea2:	0f 95 c0             	setne  al
c0026ea5:	09 f0                	or     eax,esi
c0026ea7:	29 c2                	sub    edx,eax
c0026ea9:	89 d0                	mov    eax,edx
c0026eab:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026eae:	e9 af 00 00 00       	jmp    c0026f62 <__addsf3+0x28c>
c0026eb3:	74 5c                	je     c0026f11 <__addsf3+0x23b>
c0026eb5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026eb8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ebb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ebf:	75 14                	jne    c0026ed5 <__addsf3+0x1ff>
c0026ec1:	85 d2                	test   edx,edx
c0026ec3:	0f 84 06 01 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ec9:	48                   	dec    eax
c0026eca:	75 1b                	jne    c0026ee7 <__addsf3+0x211>
c0026ecc:	89 d8                	mov    eax,ebx
c0026ece:	29 d0                	sub    eax,edx
c0026ed0:	e9 8d 00 00 00       	jmp    c0026f62 <__addsf3+0x28c>
c0026ed5:	89 f1                	mov    ecx,esi
c0026ed7:	f7 d1                	not    ecx
c0026ed9:	84 c9                	test   cl,cl
c0026edb:	0f 84 ee 00 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026ee1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ee7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eea:	83 f8 1f             	cmp    eax,0x1f
c0026eed:	0f 8f dc 00 00 00    	jg     c0026fcf <__addsf3+0x2f9>
c0026ef3:	89 d7                	mov    edi,edx
c0026ef5:	88 c1                	mov    cl,al
c0026ef7:	d3 ef                	shr    edi,cl
c0026ef9:	b9 20 00 00 00       	mov    ecx,0x20
c0026efe:	29 c1                	sub    ecx,eax
c0026f00:	d3 e2                	shl    edx,cl
c0026f02:	31 c0                	xor    eax,eax
c0026f04:	85 d2                	test   edx,edx
c0026f06:	0f 95 c0             	setne  al
c0026f09:	09 f8                	or     eax,edi
c0026f0b:	29 c3                	sub    ebx,eax
c0026f0d:	89 d8                	mov    eax,ebx
c0026f0f:	eb 51                	jmp    c0026f62 <__addsf3+0x28c>
c0026f11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026f14:	40                   	inc    eax
c0026f15:	a8 fe                	test   al,0xfe
c0026f17:	75 3d                	jne    c0026f56 <__addsf3+0x280>
c0026f19:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026f1d:	0f 85 a7 00 00 00    	jne    c0026fca <__addsf3+0x2f4>
c0026f23:	85 d2                	test   edx,edx
c0026f25:	75 12                	jne    c0026f39 <__addsf3+0x263>
c0026f27:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f2a:	85 db                	test   ebx,ebx
c0026f2c:	0f 85 9d 00 00 00    	jne    c0026fcf <__addsf3+0x2f9>
c0026f32:	31 ff                	xor    edi,edi
c0026f34:	e9 96 00 00 00       	jmp    c0026fcf <__addsf3+0x2f9>
c0026f39:	85 db                	test   ebx,ebx
c0026f3b:	0f 84 8e 00 00 00    	je     c0026fcf <__addsf3+0x2f9>
c0026f41:	89 d0                	mov    eax,edx
c0026f43:	29 d8                	sub    eax,ebx
c0026f45:	79 06                	jns    c0026f4d <__addsf3+0x277>
c0026f47:	89 d8                	mov    eax,ebx
c0026f49:	29 d0                	sub    eax,edx
c0026f4b:	eb 5a                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026f4d:	bf 00 00 00 00       	mov    edi,0x0
c0026f52:	74 7b                	je     c0026fcf <__addsf3+0x2f9>
c0026f54:	eb 4a                	jmp    c0026fa0 <__addsf3+0x2ca>
c0026f56:	89 d0                	mov    eax,edx
c0026f58:	29 d8                	sub    eax,ebx
c0026f5a:	79 12                	jns    c0026f6e <__addsf3+0x298>
c0026f5c:	89 d8                	mov    eax,ebx
c0026f5e:	29 d0                	sub    eax,edx
c0026f60:	eb 09                	jmp    c0026f6b <__addsf3+0x295>
c0026f62:	85 c0                	test   eax,eax
c0026f64:	79 41                	jns    c0026fa7 <__addsf3+0x2d1>
c0026f66:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f6b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f6e:	31 f6                	xor    esi,esi
c0026f70:	85 c0                	test   eax,eax
c0026f72:	74 33                	je     c0026fa7 <__addsf3+0x2d1>
c0026f74:	0f bd c8             	bsr    ecx,eax
c0026f77:	83 f1 1f             	xor    ecx,0x1f
c0026f7a:	d3 e0                	shl    eax,cl
c0026f7c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f80:	39 ca                	cmp    edx,ecx
c0026f82:	7f 10                	jg     c0026f94 <__addsf3+0x2be>
c0026f84:	29 d1                	sub    ecx,edx
c0026f86:	41                   	inc    ecx
c0026f87:	d3 e8                	shr    eax,cl
c0026f89:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f8c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f92:	eb 13                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026f94:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f97:	29 ce                	sub    esi,ecx
c0026f99:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f9e:	eb 07                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026fa0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026fa3:	eb 02                	jmp    c0026fa7 <__addsf3+0x2d1>
c0026fa5:	31 c0                	xor    eax,eax
c0026fa7:	89 c2                	mov    edx,eax
c0026fa9:	c1 ea 08             	shr    edx,0x8
c0026fac:	a8 7f                	test   al,0x7f
c0026fae:	0f 95 c1             	setne  cl
c0026fb1:	09 d1                	or     ecx,edx
c0026fb3:	83 e1 01             	and    ecx,0x1
c0026fb6:	c1 e8 07             	shr    eax,0x7
c0026fb9:	21 c8                	and    eax,ecx
c0026fbb:	c1 e6 17             	shl    esi,0x17
c0026fbe:	09 d6                	or     esi,edx
c0026fc0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fc3:	eb 0a                	jmp    c0026fcf <__addsf3+0x2f9>
c0026fc5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fc8:	eb 05                	jmp    c0026fcf <__addsf3+0x2f9>
c0026fca:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026fcf:	89 f8                	mov    eax,edi
c0026fd1:	5a                   	pop    edx
c0026fd2:	59                   	pop    ecx
c0026fd3:	5b                   	pop    ebx
c0026fd4:	5e                   	pop    esi
c0026fd5:	5f                   	pop    edi
c0026fd6:	5d                   	pop    ebp
c0026fd7:	c3                   	ret    

c0026fd8 <__subsf3>:
c0026fd8:	55                   	push   ebp
c0026fd9:	89 e5                	mov    ebp,esp
c0026fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fde:	05 00 00 00 80       	add    eax,0x80000000
c0026fe3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fe6:	5d                   	pop    ebp
c0026fe7:	e9 ea fc ff ff       	jmp    c0026cd6 <__addsf3>

c0026fec <__negsf2>:
c0026fec:	55                   	push   ebp
c0026fed:	89 e5                	mov    ebp,esp
c0026fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ff2:	05 00 00 00 80       	add    eax,0x80000000
c0026ff7:	5d                   	pop    ebp
c0026ff8:	c3                   	ret    

c0026ff9 <__mulsf3>:
c0026ff9:	55                   	push   ebp
c0026ffa:	89 e5                	mov    ebp,esp
c0026ffc:	57                   	push   edi
c0026ffd:	56                   	push   esi
c0026ffe:	53                   	push   ebx
c0026fff:	83 ec 1c             	sub    esp,0x1c
c0027002:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027005:	89 f0                	mov    eax,esi
c0027007:	89 f1                	mov    ecx,esi
c0027009:	c1 f9 17             	sar    ecx,0x17
c002700c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002700f:	c1 e0 08             	shl    eax,0x8
c0027012:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027017:	89 c1                	mov    ecx,eax
c0027019:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002701c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002701f:	89 c7                	mov    edi,eax
c0027021:	c1 ff 17             	sar    edi,0x17
c0027024:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027028:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002702b:	89 f8                	mov    eax,edi
c002702d:	0f b6 c0             	movzx  eax,al
c0027030:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027033:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027037:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002703a:	42                   	inc    edx
c002703b:	80 e2 fe             	and    dl,0xfe
c002703e:	75 7b                	jne    c00270bb <__mulsf3+0xc2>
c0027040:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027044:	74 54                	je     c002709a <__mulsf3+0xa1>
c0027046:	85 c9                	test   ecx,ecx
c0027048:	0f 85 64 01 00 00    	jne    c00271b2 <__mulsf3+0x1b9>
c002704e:	8d 57 01             	lea    edx,[edi+0x1]
c0027051:	80 e2 fe             	and    dl,0xfe
c0027054:	75 1f                	jne    c0027075 <__mulsf3+0x7c>
c0027056:	85 c0                	test   eax,eax
c0027058:	b8 00 00 00 00       	mov    eax,0x0
c002705d:	74 29                	je     c0027088 <__mulsf3+0x8f>
c002705f:	53                   	push   ebx
c0027060:	53                   	push   ebx
c0027061:	50                   	push   eax
c0027062:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027065:	e8 96 05 00 00       	call   c0027600 <__nesf2>
c002706a:	83 c4 10             	add    esp,0x10
c002706d:	85 c0                	test   eax,eax
c002706f:	0f 85 3a 01 00 00    	jne    c00271af <__mulsf3+0x1b6>
c0027075:	85 ff                	test   edi,edi
c0027077:	0f 89 35 01 00 00    	jns    c00271b2 <__mulsf3+0x1b9>
c002707d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027083:	e9 2a 01 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c0027088:	51                   	push   ecx
c0027089:	51                   	push   ecx
c002708a:	50                   	push   eax
c002708b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002708e:	e8 6d 05 00 00       	call   c0027600 <__nesf2>
c0027093:	83 c4 10             	add    esp,0x10
c0027096:	85 c0                	test   eax,eax
c0027098:	eb 15                	jmp    c00270af <__mulsf3+0xb6>
c002709a:	85 c9                	test   ecx,ecx
c002709c:	74 0b                	je     c00270a9 <__mulsf3+0xb0>
c002709e:	8d 53 ff             	lea    edx,[ebx-0x1]
c00270a1:	01 c9                	add    ecx,ecx
c00270a3:	78 16                	js     c00270bb <__mulsf3+0xc2>
c00270a5:	89 d3                	mov    ebx,edx
c00270a7:	eb f5                	jmp    c002709e <__mulsf3+0xa5>
c00270a9:	89 f8                	mov    eax,edi
c00270ab:	f7 d0                	not    eax
c00270ad:	84 c0                	test   al,al
c00270af:	75 c4                	jne    c0027075 <__mulsf3+0x7c>
c00270b1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00270b6:	e9 f7 00 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c00270bb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00270be:	c1 e6 08             	shl    esi,0x8
c00270c1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270c7:	8d 57 01             	lea    edx,[edi+0x1]
c00270ca:	80 e2 fe             	and    dl,0xfe
c00270cd:	75 63                	jne    c0027132 <__mulsf3+0x139>
c00270cf:	85 c0                	test   eax,eax
c00270d1:	74 2f                	je     c0027102 <__mulsf3+0x109>
c00270d3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270d7:	0f 89 d2 00 00 00    	jns    c00271af <__mulsf3+0x1b6>
c00270dd:	52                   	push   edx
c00270de:	52                   	push   edx
c00270df:	6a 00                	push   0x0
c00270e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270e4:	e8 dc 04 00 00       	call   c00275c5 <__eqsf2>
c00270e9:	83 c4 10             	add    esp,0x10
c00270ec:	85 c0                	test   eax,eax
c00270ee:	0f 85 bb 00 00 00    	jne    c00271af <__mulsf3+0x1b6>
c00270f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270f7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270fd:	e9 b0 00 00 00       	jmp    c00271b2 <__mulsf3+0x1b9>
c0027102:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027105:	50                   	push   eax
c0027106:	50                   	push   eax
c0027107:	6a 00                	push   0x0
c0027109:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002710c:	e8 b4 04 00 00       	call   c00275c5 <__eqsf2>
c0027111:	83 c4 10             	add    esp,0x10
c0027114:	85 c0                	test   eax,eax
c0027116:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027119:	75 0c                	jne    c0027127 <__mulsf3+0x12e>
c002711b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002711f:	0f 89 8a 00 00 00    	jns    c00271af <__mulsf3+0x1b6>
c0027125:	eb cd                	jmp    c00270f4 <__mulsf3+0xfb>
c0027127:	8d 43 ff             	lea    eax,[ebx-0x1]
c002712a:	01 f6                	add    esi,esi
c002712c:	78 04                	js     c0027132 <__mulsf3+0x139>
c002712e:	89 c3                	mov    ebx,eax
c0027130:	eb f5                	jmp    c0027127 <__mulsf3+0x12e>
c0027132:	89 c8                	mov    eax,ecx
c0027134:	0d 00 00 00 80       	or     eax,0x80000000
c0027139:	81 ce 00 00 00 80    	or     esi,0x80000000
c002713f:	f7 e6                	mul    esi
c0027141:	85 c0                	test   eax,eax
c0027143:	0f 95 c0             	setne  al
c0027146:	0f b6 c0             	movzx  eax,al
c0027149:	09 c2                	or     edx,eax
c002714b:	78 03                	js     c0027150 <__mulsf3+0x157>
c002714d:	01 d2                	add    edx,edx
c002714f:	4b                   	dec    ebx
c0027150:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027156:	7f 22                	jg     c002717a <__mulsf3+0x181>
c0027158:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002715e:	85 db                	test   ebx,ebx
c0027160:	7f 23                	jg     c0027185 <__mulsf3+0x18c>
c0027162:	83 fb e9             	cmp    ebx,0xffffffe9
c0027165:	7c 1a                	jl     c0027181 <__mulsf3+0x188>
c0027167:	81 ca 00 00 00 80    	or     edx,0x80000000
c002716d:	b9 01 00 00 00       	mov    ecx,0x1
c0027172:	29 d9                	sub    ecx,ebx
c0027174:	d3 ea                	shr    edx,cl
c0027176:	31 db                	xor    ebx,ebx
c0027178:	eb 0b                	jmp    c0027185 <__mulsf3+0x18c>
c002717a:	bb ff 00 00 00       	mov    ebx,0xff
c002717f:	eb 02                	jmp    c0027183 <__mulsf3+0x18a>
c0027181:	31 db                	xor    ebx,ebx
c0027183:	31 d2                	xor    edx,edx
c0027185:	89 d0                	mov    eax,edx
c0027187:	c1 e8 08             	shr    eax,0x8
c002718a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002718d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027193:	09 fb                	or     ebx,edi
c0027195:	c1 e3 17             	shl    ebx,0x17
c0027198:	09 c3                	or     ebx,eax
c002719a:	f6 c2 7f             	test   dl,0x7f
c002719d:	0f 95 c1             	setne  cl
c00271a0:	09 c8                	or     eax,ecx
c00271a2:	83 e0 01             	and    eax,0x1
c00271a5:	c1 ea 07             	shr    edx,0x7
c00271a8:	21 c2                	and    edx,eax
c00271aa:	8d 34 13             	lea    esi,[ebx+edx*1]
c00271ad:	eb 03                	jmp    c00271b2 <__mulsf3+0x1b9>
c00271af:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00271b2:	89 f0                	mov    eax,esi
c00271b4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271b7:	5b                   	pop    ebx
c00271b8:	5e                   	pop    esi
c00271b9:	5f                   	pop    edi
c00271ba:	5d                   	pop    ebp
c00271bb:	c3                   	ret    

c00271bc <__divsf3>:
c00271bc:	55                   	push   ebp
c00271bd:	89 e5                	mov    ebp,esp
c00271bf:	57                   	push   edi
c00271c0:	56                   	push   esi
c00271c1:	53                   	push   ebx
c00271c2:	83 ec 1c             	sub    esp,0x1c
c00271c5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271c8:	89 d8                	mov    eax,ebx
c00271ca:	89 d9                	mov    ecx,ebx
c00271cc:	c1 f9 17             	sar    ecx,0x17
c00271cf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271d2:	c1 e0 08             	shl    eax,0x8
c00271d5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271da:	89 c1                	mov    ecx,eax
c00271dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271df:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271e2:	89 c7                	mov    edi,eax
c00271e4:	c1 ff 17             	sar    edi,0x17
c00271e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ee:	89 f8                	mov    eax,edi
c00271f0:	0f b6 c0             	movzx  eax,al
c00271f3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271f6:	29 c6                	sub    esi,eax
c00271f8:	83 c6 7f             	add    esi,0x7f
c00271fb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271fe:	42                   	inc    edx
c00271ff:	80 e2 fe             	and    dl,0xfe
c0027202:	0f 85 9c 00 00 00    	jne    c00272a4 <__divsf3+0xe8>
c0027208:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002720c:	74 33                	je     c0027241 <__divsf3+0x85>
c002720e:	85 c9                	test   ecx,ecx
c0027210:	0f 85 c7 01 00 00    	jne    c00273dd <__divsf3+0x221>
c0027216:	8d 57 01             	lea    edx,[edi+0x1]
c0027219:	80 e2 fe             	and    dl,0xfe
c002721c:	75 2f                	jne    c002724d <__divsf3+0x91>
c002721e:	85 c0                	test   eax,eax
c0027220:	74 2b                	je     c002724d <__divsf3+0x91>
c0027222:	51                   	push   ecx
c0027223:	51                   	push   ecx
c0027224:	6a 00                	push   0x0
c0027226:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027229:	e8 d2 03 00 00       	call   c0027600 <__nesf2>
c002722e:	83 c4 10             	add    esp,0x10
c0027231:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027234:	85 c0                	test   eax,eax
c0027236:	0f 85 a1 01 00 00    	jne    c00273dd <__divsf3+0x221>
c002723c:	e9 92 01 00 00       	jmp    c00273d3 <__divsf3+0x217>
c0027241:	85 c9                	test   ecx,ecx
c0027243:	75 1b                	jne    c0027260 <__divsf3+0xa4>
c0027245:	8d 57 01             	lea    edx,[edi+0x1]
c0027248:	80 e2 fe             	and    dl,0xfe
c002724b:	74 1e                	je     c002726b <__divsf3+0xaf>
c002724d:	85 ff                	test   edi,edi
c002724f:	0f 89 88 01 00 00    	jns    c00273dd <__divsf3+0x221>
c0027255:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002725b:	e9 7d 01 00 00       	jmp    c00273dd <__divsf3+0x221>
c0027260:	8d 56 ff             	lea    edx,[esi-0x1]
c0027263:	01 c9                	add    ecx,ecx
c0027265:	78 3d                	js     c00272a4 <__divsf3+0xe8>
c0027267:	89 d6                	mov    esi,edx
c0027269:	eb f5                	jmp    c0027260 <__divsf3+0xa4>
c002726b:	85 c0                	test   eax,eax
c002726d:	b8 00 00 00 00       	mov    eax,0x0
c0027272:	74 18                	je     c002728c <__divsf3+0xd0>
c0027274:	52                   	push   edx
c0027275:	52                   	push   edx
c0027276:	50                   	push   eax
c0027277:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002727a:	e8 81 03 00 00       	call   c0027600 <__nesf2>
c002727f:	83 c4 10             	add    esp,0x10
c0027282:	85 c0                	test   eax,eax
c0027284:	0f 85 50 01 00 00    	jne    c00273da <__divsf3+0x21e>
c002728a:	eb c1                	jmp    c002724d <__divsf3+0x91>
c002728c:	56                   	push   esi
c002728d:	56                   	push   esi
c002728e:	50                   	push   eax
c002728f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027292:	e8 69 03 00 00       	call   c0027600 <__nesf2>
c0027297:	83 c4 10             	add    esp,0x10
c002729a:	85 c0                	test   eax,eax
c002729c:	0f 84 31 01 00 00    	je     c00273d3 <__divsf3+0x217>
c00272a2:	eb a9                	jmp    c002724d <__divsf3+0x91>
c00272a4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00272a7:	c1 e3 08             	shl    ebx,0x8
c00272aa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272b0:	8d 57 01             	lea    edx,[edi+0x1]
c00272b3:	80 e2 fe             	and    dl,0xfe
c00272b6:	75 71                	jne    c0027329 <__divsf3+0x16d>
c00272b8:	85 c0                	test   eax,eax
c00272ba:	ba 00 00 00 00       	mov    edx,0x0
c00272bf:	74 2f                	je     c00272f0 <__divsf3+0x134>
c00272c1:	51                   	push   ecx
c00272c2:	51                   	push   ecx
c00272c3:	52                   	push   edx
c00272c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272c7:	e8 f9 02 00 00       	call   c00275c5 <__eqsf2>
c00272cc:	83 c4 10             	add    esp,0x10
c00272cf:	85 c0                	test   eax,eax
c00272d1:	0f 85 03 01 00 00    	jne    c00273da <__divsf3+0x21e>
c00272d7:	31 d2                	xor    edx,edx
c00272d9:	89 d3                	mov    ebx,edx
c00272db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272de:	31 f8                	xor    eax,edi
c00272e0:	0f 89 f7 00 00 00    	jns    c00273dd <__divsf3+0x221>
c00272e6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272eb:	e9 ed 00 00 00       	jmp    c00273dd <__divsf3+0x221>
c00272f0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272f3:	50                   	push   eax
c00272f4:	50                   	push   eax
c00272f5:	52                   	push   edx
c00272f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272f9:	e8 c7 02 00 00       	call   c00275c5 <__eqsf2>
c00272fe:	83 c4 10             	add    esp,0x10
c0027301:	85 c0                	test   eax,eax
c0027303:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027306:	75 16                	jne    c002731e <__divsf3+0x162>
c0027308:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002730b:	31 fb                	xor    ebx,edi
c002730d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027313:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027319:	e9 bf 00 00 00       	jmp    c00273dd <__divsf3+0x221>
c002731e:	8d 46 01             	lea    eax,[esi+0x1]
c0027321:	01 db                	add    ebx,ebx
c0027323:	78 04                	js     c0027329 <__divsf3+0x16d>
c0027325:	89 c6                	mov    esi,eax
c0027327:	eb f5                	jmp    c002731e <__divsf3+0x162>
c0027329:	89 c8                	mov    eax,ecx
c002732b:	0d 00 00 00 80       	or     eax,0x80000000
c0027330:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027336:	31 d2                	xor    edx,edx
c0027338:	39 d8                	cmp    eax,ebx
c002733a:	72 07                	jb     c0027343 <__divsf3+0x187>
c002733c:	29 d8                	sub    eax,ebx
c002733e:	ba 01 00 00 00       	mov    edx,0x1
c0027343:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002734a:	01 d2                	add    edx,edx
c002734c:	89 c1                	mov    ecx,eax
c002734e:	01 c0                	add    eax,eax
c0027350:	85 c9                	test   ecx,ecx
c0027352:	78 04                	js     c0027358 <__divsf3+0x19c>
c0027354:	39 c3                	cmp    ebx,eax
c0027356:	77 05                	ja     c002735d <__divsf3+0x1a1>
c0027358:	29 d8                	sub    eax,ebx
c002735a:	83 ca 01             	or     edx,0x1
c002735d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027360:	75 e8                	jne    c002734a <__divsf3+0x18e>
c0027362:	85 c0                	test   eax,eax
c0027364:	0f 95 c0             	setne  al
c0027367:	0f b6 c0             	movzx  eax,al
c002736a:	c1 e2 06             	shl    edx,0x6
c002736d:	09 c2                	or     edx,eax
c002736f:	78 03                	js     c0027374 <__divsf3+0x1b8>
c0027371:	01 d2                	add    edx,edx
c0027373:	4e                   	dec    esi
c0027374:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002737a:	7f 22                	jg     c002739e <__divsf3+0x1e2>
c002737c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027382:	85 f6                	test   esi,esi
c0027384:	7f 23                	jg     c00273a9 <__divsf3+0x1ed>
c0027386:	83 fe e9             	cmp    esi,0xffffffe9
c0027389:	7c 1a                	jl     c00273a5 <__divsf3+0x1e9>
c002738b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027391:	b9 01 00 00 00       	mov    ecx,0x1
c0027396:	29 f1                	sub    ecx,esi
c0027398:	d3 ea                	shr    edx,cl
c002739a:	31 f6                	xor    esi,esi
c002739c:	eb 0b                	jmp    c00273a9 <__divsf3+0x1ed>
c002739e:	be ff 00 00 00       	mov    esi,0xff
c00273a3:	eb 02                	jmp    c00273a7 <__divsf3+0x1eb>
c00273a5:	31 f6                	xor    esi,esi
c00273a7:	31 d2                	xor    edx,edx
c00273a9:	89 d0                	mov    eax,edx
c00273ab:	c1 e8 08             	shr    eax,0x8
c00273ae:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00273b1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00273b7:	09 fe                	or     esi,edi
c00273b9:	c1 e6 17             	shl    esi,0x17
c00273bc:	09 c6                	or     esi,eax
c00273be:	f6 c2 7f             	test   dl,0x7f
c00273c1:	0f 95 c1             	setne  cl
c00273c4:	09 c8                	or     eax,ecx
c00273c6:	83 e0 01             	and    eax,0x1
c00273c9:	c1 ea 07             	shr    edx,0x7
c00273cc:	21 c2                	and    edx,eax
c00273ce:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273d1:	eb 0a                	jmp    c00273dd <__divsf3+0x221>
c00273d3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273d8:	eb 03                	jmp    c00273dd <__divsf3+0x221>
c00273da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273dd:	89 d8                	mov    eax,ebx
c00273df:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273e2:	5b                   	pop    ebx
c00273e3:	5e                   	pop    esi
c00273e4:	5f                   	pop    edi
c00273e5:	5d                   	pop    ebp
c00273e6:	c3                   	ret    

c00273e7 <__floatsisf>:
c00273e7:	55                   	push   ebp
c00273e8:	89 e5                	mov    ebp,esp
c00273ea:	53                   	push   ebx
c00273eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ee:	85 d2                	test   edx,edx
c00273f0:	7e 2b                	jle    c002741d <__floatsisf+0x36>
c00273f2:	0f bd ca             	bsr    ecx,edx
c00273f5:	83 f1 1f             	xor    ecx,0x1f
c00273f8:	d3 e2                	shl    edx,cl
c00273fa:	89 d0                	mov    eax,edx
c00273fc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027401:	89 c3                	mov    ebx,eax
c0027403:	c1 eb 08             	shr    ebx,0x8
c0027406:	80 e2 7f             	and    dl,0x7f
c0027409:	0f 95 c2             	setne  dl
c002740c:	09 da                	or     edx,ebx
c002740e:	83 e2 01             	and    edx,0x1
c0027411:	c1 e8 07             	shr    eax,0x7
c0027414:	21 c2                	and    edx,eax
c0027416:	b8 9e 00 00 00       	mov    eax,0x9e
c002741b:	eb 32                	jmp    c002744f <__floatsisf+0x68>
c002741d:	b8 00 00 00 00       	mov    eax,0x0
c0027422:	74 34                	je     c0027458 <__floatsisf+0x71>
c0027424:	f7 da                	neg    edx
c0027426:	0f bd ca             	bsr    ecx,edx
c0027429:	83 f1 1f             	xor    ecx,0x1f
c002742c:	d3 e2                	shl    edx,cl
c002742e:	89 d0                	mov    eax,edx
c0027430:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027435:	89 c3                	mov    ebx,eax
c0027437:	c1 eb 08             	shr    ebx,0x8
c002743a:	80 e2 7f             	and    dl,0x7f
c002743d:	0f 95 c2             	setne  dl
c0027440:	09 da                	or     edx,ebx
c0027442:	83 e2 01             	and    edx,0x1
c0027445:	c1 e8 07             	shr    eax,0x7
c0027448:	21 c2                	and    edx,eax
c002744a:	b8 9e 01 00 00       	mov    eax,0x19e
c002744f:	29 c8                	sub    eax,ecx
c0027451:	c1 e0 17             	shl    eax,0x17
c0027454:	09 d8                	or     eax,ebx
c0027456:	01 d0                	add    eax,edx
c0027458:	5b                   	pop    ebx
c0027459:	5d                   	pop    ebp
c002745a:	c3                   	ret    

c002745b <__floatunsisf>:
c002745b:	55                   	push   ebp
c002745c:	89 e5                	mov    ebp,esp
c002745e:	53                   	push   ebx
c002745f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027462:	31 c0                	xor    eax,eax
c0027464:	85 d2                	test   edx,edx
c0027466:	74 32                	je     c002749a <__floatunsisf+0x3f>
c0027468:	0f bd ca             	bsr    ecx,edx
c002746b:	83 f1 1f             	xor    ecx,0x1f
c002746e:	d3 e2                	shl    edx,cl
c0027470:	89 d0                	mov    eax,edx
c0027472:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027477:	89 c3                	mov    ebx,eax
c0027479:	c1 eb 08             	shr    ebx,0x8
c002747c:	80 e2 7f             	and    dl,0x7f
c002747f:	0f 95 c2             	setne  dl
c0027482:	09 da                	or     edx,ebx
c0027484:	83 e2 01             	and    edx,0x1
c0027487:	c1 e8 07             	shr    eax,0x7
c002748a:	21 c2                	and    edx,eax
c002748c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027491:	29 c8                	sub    eax,ecx
c0027493:	c1 e0 17             	shl    eax,0x17
c0027496:	09 d8                	or     eax,ebx
c0027498:	01 d0                	add    eax,edx
c002749a:	5b                   	pop    ebx
c002749b:	5d                   	pop    ebp
c002749c:	c3                   	ret    

c002749d <__fixsfsi>:
c002749d:	55                   	push   ebp
c002749e:	89 e5                	mov    ebp,esp
c00274a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274a3:	89 d1                	mov    ecx,edx
c00274a5:	c1 e1 08             	shl    ecx,0x8
c00274a8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00274ae:	c1 fa 17             	sar    edx,0x17
c00274b1:	78 1c                	js     c00274cf <__fixsfsi+0x32>
c00274b3:	83 ea 7f             	sub    edx,0x7f
c00274b6:	31 c0                	xor    eax,eax
c00274b8:	83 fa 1e             	cmp    edx,0x1e
c00274bb:	77 40                	ja     c00274fd <__fixsfsi+0x60>
c00274bd:	89 c8                	mov    eax,ecx
c00274bf:	0d 00 00 00 80       	or     eax,0x80000000
c00274c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274c9:	29 d1                	sub    ecx,edx
c00274cb:	d3 e8                	shr    eax,cl
c00274cd:	eb 2e                	jmp    c00274fd <__fixsfsi+0x60>
c00274cf:	31 c0                	xor    eax,eax
c00274d1:	81 c2 81 00 00 00    	add    edx,0x81
c00274d7:	78 24                	js     c00274fd <__fixsfsi+0x60>
c00274d9:	83 fa 1e             	cmp    edx,0x1e
c00274dc:	7e 09                	jle    c00274e7 <__fixsfsi+0x4a>
c00274de:	83 fa 1f             	cmp    edx,0x1f
c00274e1:	75 18                	jne    c00274fb <__fixsfsi+0x5e>
c00274e3:	85 c9                	test   ecx,ecx
c00274e5:	75 14                	jne    c00274fb <__fixsfsi+0x5e>
c00274e7:	89 c8                	mov    eax,ecx
c00274e9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274f3:	29 d1                	sub    ecx,edx
c00274f5:	d3 e8                	shr    eax,cl
c00274f7:	f7 d8                	neg    eax
c00274f9:	eb 02                	jmp    c00274fd <__fixsfsi+0x60>
c00274fb:	31 c0                	xor    eax,eax
c00274fd:	5d                   	pop    ebp
c00274fe:	c3                   	ret    

c00274ff <__fixunssfsi>:
c00274ff:	55                   	push   ebp
c0027500:	89 e5                	mov    ebp,esp
c0027502:	53                   	push   ebx
c0027503:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027506:	89 d3                	mov    ebx,edx
c0027508:	c1 fb 17             	sar    ebx,0x17
c002750b:	83 eb 7f             	sub    ebx,0x7f
c002750e:	31 c0                	xor    eax,eax
c0027510:	83 fb 1f             	cmp    ebx,0x1f
c0027513:	77 18                	ja     c002752d <__fixunssfsi+0x2e>
c0027515:	89 d0                	mov    eax,edx
c0027517:	c1 e0 08             	shl    eax,0x8
c002751a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002751f:	0d 00 00 00 80       	or     eax,0x80000000
c0027524:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027529:	29 d9                	sub    ecx,ebx
c002752b:	d3 e8                	shr    eax,cl
c002752d:	5b                   	pop    ebx
c002752e:	5d                   	pop    ebp
c002752f:	c3                   	ret    

c0027530 <__cmpsf2>:
c0027530:	55                   	push   ebp
c0027531:	89 e5                	mov    ebp,esp
c0027533:	57                   	push   edi
c0027534:	56                   	push   esi
c0027535:	53                   	push   ebx
c0027536:	83 ec 24             	sub    esp,0x24
c0027539:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002753c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002753f:	e8 4f 10 00 00       	call   c0028593 <__truncdfsf2>
c0027544:	5a                   	pop    edx
c0027545:	59                   	pop    ecx
c0027546:	89 c3                	mov    ebx,eax
c0027548:	c1 e8 17             	shr    eax,0x17
c002754b:	0f b6 f0             	movzx  esi,al
c002754e:	89 d8                	mov    eax,ebx
c0027550:	c1 e8 1f             	shr    eax,0x1f
c0027553:	31 c6                	xor    esi,eax
c0027555:	c1 e3 08             	shl    ebx,0x8
c0027558:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002755b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002755e:	e8 30 10 00 00       	call   c0028593 <__truncdfsf2>
c0027563:	83 c4 10             	add    esp,0x10
c0027566:	89 c1                	mov    ecx,eax
c0027568:	c1 e9 17             	shr    ecx,0x17
c002756b:	0f b6 c9             	movzx  ecx,cl
c002756e:	89 c7                	mov    edi,eax
c0027570:	c1 ef 1f             	shr    edi,0x1f
c0027573:	89 ca                	mov    edx,ecx
c0027575:	31 fa                	xor    edx,edi
c0027577:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002757a:	c1 e0 08             	shl    eax,0x8
c002757d:	89 c2                	mov    edx,eax
c002757f:	89 d8                	mov    eax,ebx
c0027581:	09 d0                	or     eax,edx
c0027583:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027588:	09 f0                	or     eax,esi
c002758a:	75 08                	jne    c0027594 <__cmpsf2+0x64>
c002758c:	31 c0                	xor    eax,eax
c002758e:	39 f9                	cmp    ecx,edi
c0027590:	75 0c                	jne    c002759e <__cmpsf2+0x6e>
c0027592:	eb 29                	jmp    c00275bd <__cmpsf2+0x8d>
c0027594:	b8 01 00 00 00       	mov    eax,0x1
c0027599:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002759c:	7f 1f                	jg     c00275bd <__cmpsf2+0x8d>
c002759e:	83 c8 ff             	or     eax,0xffffffff
c00275a1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00275a4:	7c 17                	jl     c00275bd <__cmpsf2+0x8d>
c00275a6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00275ac:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00275b2:	b8 01 00 00 00       	mov    eax,0x1
c00275b7:	39 d3                	cmp    ebx,edx
c00275b9:	77 02                	ja     c00275bd <__cmpsf2+0x8d>
c00275bb:	19 c0                	sbb    eax,eax
c00275bd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275c0:	5b                   	pop    ebx
c00275c1:	5e                   	pop    esi
c00275c2:	5f                   	pop    edi
c00275c3:	5d                   	pop    ebp
c00275c4:	c3                   	ret    

c00275c5 <__eqsf2>:
c00275c5:	55                   	push   ebp
c00275c6:	89 e5                	mov    ebp,esp
c00275c8:	83 ec 24             	sub    esp,0x24
c00275cb:	6a 01                	push   0x1
c00275cd:	83 ec 0c             	sub    esp,0xc
c00275d0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275d3:	e8 df 10 00 00       	call   c00286b7 <__extendsfdf2>
c00275d8:	83 c4 10             	add    esp,0x10
c00275db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e1:	52                   	push   edx
c00275e2:	50                   	push   eax
c00275e3:	50                   	push   eax
c00275e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275e7:	e8 cb 10 00 00       	call   c00286b7 <__extendsfdf2>
c00275ec:	59                   	pop    ecx
c00275ed:	59                   	pop    ecx
c00275ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275f1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275f4:	52                   	push   edx
c00275f5:	50                   	push   eax
c00275f6:	e8 35 ff ff ff       	call   c0027530 <__cmpsf2>
c00275fb:	83 c4 20             	add    esp,0x20
c00275fe:	c9                   	leave  
c00275ff:	c3                   	ret    

c0027600 <__nesf2>:
c0027600:	eb c3                	jmp    c00275c5 <__eqsf2>

c0027602 <__gtsf2>:
c0027602:	55                   	push   ebp
c0027603:	89 e5                	mov    ebp,esp
c0027605:	83 ec 24             	sub    esp,0x24
c0027608:	6a ff                	push   0xffffffff
c002760a:	83 ec 0c             	sub    esp,0xc
c002760d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027610:	e8 a2 10 00 00       	call   c00286b7 <__extendsfdf2>
c0027615:	83 c4 10             	add    esp,0x10
c0027618:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002761b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002761e:	52                   	push   edx
c002761f:	50                   	push   eax
c0027620:	50                   	push   eax
c0027621:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027624:	e8 8e 10 00 00       	call   c00286b7 <__extendsfdf2>
c0027629:	59                   	pop    ecx
c002762a:	59                   	pop    ecx
c002762b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002762e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027631:	52                   	push   edx
c0027632:	50                   	push   eax
c0027633:	e8 f8 fe ff ff       	call   c0027530 <__cmpsf2>
c0027638:	83 c4 20             	add    esp,0x20
c002763b:	c9                   	leave  
c002763c:	c3                   	ret    

c002763d <__gesf2>:
c002763d:	eb c3                	jmp    c0027602 <__gtsf2>

c002763f <__ltsf2>:
c002763f:	eb 84                	jmp    c00275c5 <__eqsf2>

c0027641 <__lesf2>:
c0027641:	eb 82                	jmp    c00275c5 <__eqsf2>

c0027643 <__adddf3>:
c0027643:	55                   	push   ebp
c0027644:	89 e5                	mov    ebp,esp
c0027646:	57                   	push   edi
c0027647:	56                   	push   esi
c0027648:	53                   	push   ebx
c0027649:	83 ec 24             	sub    esp,0x24
c002764c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002764f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027652:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027655:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027658:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002765b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002765e:	89 c8                	mov    eax,ecx
c0027660:	89 ce                	mov    esi,ecx
c0027662:	c1 fe 14             	sar    esi,0x14
c0027665:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027668:	89 fb                	mov    ebx,edi
c002766a:	89 fa                	mov    edx,edi
c002766c:	c1 e2 0b             	shl    edx,0xb
c002766f:	c1 e0 0b             	shl    eax,0xb
c0027672:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027677:	c1 eb 15             	shr    ebx,0x15
c002767a:	09 d8                	or     eax,ebx
c002767c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002767f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027682:	c1 fe 14             	sar    esi,0x14
c0027685:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027688:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002768b:	89 f3                	mov    ebx,esi
c002768d:	c1 e3 0b             	shl    ebx,0xb
c0027690:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027693:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027696:	c1 e3 0b             	shl    ebx,0xb
c0027699:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002769f:	c1 ee 15             	shr    esi,0x15
c00276a2:	09 f3                	or     ebx,esi
c00276a4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00276a7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276aa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00276ad:	0f 88 5f 02 00 00    	js     c0027912 <__adddf3+0x2cf>
c00276b3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276b6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00276b9:	85 db                	test   ebx,ebx
c00276bb:	0f 8e c7 00 00 00    	jle    c0027788 <__adddf3+0x145>
c00276c1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276c8:	75 1a                	jne    c00276e4 <__adddf3+0xa1>
c00276ca:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276cd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276d0:	0f 84 b2 05 00 00    	je     c0027c88 <__adddf3+0x645>
c00276d6:	4b                   	dec    ebx
c00276d7:	75 23                	jne    c00276fc <__adddf3+0xb9>
c00276d9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276dc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276df:	e9 99 00 00 00       	jmp    c002777d <__adddf3+0x13a>
c00276e4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276e7:	f7 d6                	not    esi
c00276e9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276ef:	0f 84 93 05 00 00    	je     c0027c88 <__adddf3+0x645>
c00276f5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276fc:	83 fb 1f             	cmp    ebx,0x1f
c00276ff:	7e 42                	jle    c0027743 <__adddf3+0x100>
c0027701:	83 fb 3f             	cmp    ebx,0x3f
c0027704:	0f 8f 7e 05 00 00    	jg     c0027c88 <__adddf3+0x645>
c002770a:	83 e3 1f             	and    ebx,0x1f
c002770d:	89 d9                	mov    ecx,ebx
c002770f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027712:	d3 ef                	shr    edi,cl
c0027714:	31 db                	xor    ebx,ebx
c0027716:	85 c9                	test   ecx,ecx
c0027718:	74 15                	je     c002772f <__adddf3+0xec>
c002771a:	be 20 00 00 00       	mov    esi,0x20
c002771f:	29 ce                	sub    esi,ecx
c0027721:	89 f1                	mov    ecx,esi
c0027723:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027726:	d3 e6                	shl    esi,cl
c0027728:	31 db                	xor    ebx,ebx
c002772a:	85 f6                	test   esi,esi
c002772c:	0f 95 c3             	setne  bl
c002772f:	31 c9                	xor    ecx,ecx
c0027731:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027735:	0f 95 c1             	setne  cl
c0027738:	09 cf                	or     edi,ecx
c002773a:	09 fb                	or     ebx,edi
c002773c:	01 da                	add    edx,ebx
c002773e:	83 d0 00             	adc    eax,0x0
c0027741:	eb 3a                	jmp    c002777d <__adddf3+0x13a>
c0027743:	bf 20 00 00 00       	mov    edi,0x20
c0027748:	29 df                	sub    edi,ebx
c002774a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002774d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027750:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027753:	d3 e6                	shl    esi,cl
c0027755:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027758:	88 d9                	mov    cl,bl
c002775a:	d3 ef                	shr    edi,cl
c002775c:	09 fe                	or     esi,edi
c002775e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027761:	88 d9                	mov    cl,bl
c0027763:	d3 ef                	shr    edi,cl
c0027765:	89 fb                	mov    ebx,edi
c0027767:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002776a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002776d:	d3 e7                	shl    edi,cl
c002776f:	85 ff                	test   edi,edi
c0027771:	0f 95 c1             	setne  cl
c0027774:	0f b6 c9             	movzx  ecx,cl
c0027777:	09 ce                	or     esi,ecx
c0027779:	01 f2                	add    edx,esi
c002777b:	11 d8                	adc    eax,ebx
c002777d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027780:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027783:	e9 52 01 00 00       	jmp    c00278da <__adddf3+0x297>
c0027788:	0f 84 d5 00 00 00    	je     c0027863 <__adddf3+0x220>
c002778e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027791:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027794:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027797:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002779a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277a1:	75 20                	jne    c00277c3 <__adddf3+0x180>
c00277a3:	89 d6                	mov    esi,edx
c00277a5:	09 c6                	or     esi,eax
c00277a7:	0f 84 db 04 00 00    	je     c0027c88 <__adddf3+0x645>
c00277ad:	4b                   	dec    ebx
c00277ae:	75 29                	jne    c00277d9 <__adddf3+0x196>
c00277b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277b6:	01 d1                	add    ecx,edx
c00277b8:	11 c6                	adc    esi,eax
c00277ba:	89 f0                	mov    eax,esi
c00277bc:	89 ca                	mov    edx,ecx
c00277be:	e9 17 01 00 00       	jmp    c00278da <__adddf3+0x297>
c00277c3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277c6:	f7 d6                	not    esi
c00277c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ce:	0f 84 b4 04 00 00    	je     c0027c88 <__adddf3+0x645>
c00277d4:	0d 00 00 00 80       	or     eax,0x80000000
c00277d9:	83 fb 1f             	cmp    ebx,0x1f
c00277dc:	7e 48                	jle    c0027826 <__adddf3+0x1e3>
c00277de:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277e1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277e4:	83 fb 3f             	cmp    ebx,0x3f
c00277e7:	0f 8f 9b 04 00 00    	jg     c0027c88 <__adddf3+0x645>
c00277ed:	83 e3 1f             	and    ebx,0x1f
c00277f0:	89 d9                	mov    ecx,ebx
c00277f2:	89 c7                	mov    edi,eax
c00277f4:	d3 ef                	shr    edi,cl
c00277f6:	31 db                	xor    ebx,ebx
c00277f8:	85 c9                	test   ecx,ecx
c00277fa:	74 12                	je     c002780e <__adddf3+0x1cb>
c00277fc:	be 20 00 00 00       	mov    esi,0x20
c0027801:	29 ce                	sub    esi,ecx
c0027803:	89 f1                	mov    ecx,esi
c0027805:	d3 e0                	shl    eax,cl
c0027807:	31 db                	xor    ebx,ebx
c0027809:	85 c0                	test   eax,eax
c002780b:	0f 95 c3             	setne  bl
c002780e:	31 c0                	xor    eax,eax
c0027810:	85 d2                	test   edx,edx
c0027812:	0f 95 c0             	setne  al
c0027815:	09 c7                	or     edi,eax
c0027817:	09 fb                	or     ebx,edi
c0027819:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002781c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002781f:	01 da                	add    edx,ebx
c0027821:	83 d6 00             	adc    esi,0x0
c0027824:	eb 39                	jmp    c002785f <__adddf3+0x21c>
c0027826:	be 20 00 00 00       	mov    esi,0x20
c002782b:	29 de                	sub    esi,ebx
c002782d:	89 c7                	mov    edi,eax
c002782f:	89 f1                	mov    ecx,esi
c0027831:	d3 e7                	shl    edi,cl
c0027833:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027836:	89 d7                	mov    edi,edx
c0027838:	88 d9                	mov    cl,bl
c002783a:	d3 ef                	shr    edi,cl
c002783c:	89 f9                	mov    ecx,edi
c002783e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027841:	09 cf                	or     edi,ecx
c0027843:	88 d9                	mov    cl,bl
c0027845:	d3 e8                	shr    eax,cl
c0027847:	89 f1                	mov    ecx,esi
c0027849:	d3 e2                	shl    edx,cl
c002784b:	85 d2                	test   edx,edx
c002784d:	0f 95 c2             	setne  dl
c0027850:	0f b6 d2             	movzx  edx,dl
c0027853:	09 d7                	or     edi,edx
c0027855:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027858:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002785b:	01 fa                	add    edx,edi
c002785d:	11 c6                	adc    esi,eax
c002785f:	89 f0                	mov    eax,esi
c0027861:	eb 77                	jmp    c00278da <__adddf3+0x297>
c0027863:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027866:	46                   	inc    esi
c0027867:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002786a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027870:	75 41                	jne    c00278b3 <__adddf3+0x270>
c0027872:	89 d3                	mov    ebx,edx
c0027874:	09 c3                	or     ebx,eax
c0027876:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002787d:	75 27                	jne    c00278a6 <__adddf3+0x263>
c002787f:	85 db                	test   ebx,ebx
c0027881:	0f 84 fb 03 00 00    	je     c0027c82 <__adddf3+0x63f>
c0027887:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002788a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002788d:	0f 84 f5 03 00 00    	je     c0027c88 <__adddf3+0x645>
c0027893:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027896:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027899:	85 c0                	test   eax,eax
c002789b:	0f 89 91 03 00 00    	jns    c0027c32 <__adddf3+0x5ef>
c00278a1:	e9 85 03 00 00       	jmp    c0027c2b <__adddf3+0x5e8>
c00278a6:	85 db                	test   ebx,ebx
c00278a8:	0f 85 da 03 00 00    	jne    c0027c88 <__adddf3+0x645>
c00278ae:	e9 cf 03 00 00       	jmp    c0027c82 <__adddf3+0x63f>
c00278b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00278b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00278b9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278bc:	f7 d1                	not    ecx
c00278be:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278c4:	0f 84 70 03 00 00    	je     c0027c3a <__adddf3+0x5f7>
c00278ca:	d1 ea                	shr    edx,1
c00278cc:	89 c1                	mov    ecx,eax
c00278ce:	c1 e1 1f             	shl    ecx,0x1f
c00278d1:	09 ca                	or     edx,ecx
c00278d3:	d1 e8                	shr    eax,1
c00278d5:	e9 6f 03 00 00       	jmp    c0027c49 <__adddf3+0x606>
c00278da:	85 c0                	test   eax,eax
c00278dc:	0f 89 67 03 00 00    	jns    c0027c49 <__adddf3+0x606>
c00278e2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278e5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278e8:	f7 d1                	not    ecx
c00278ea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278f0:	0f 84 44 03 00 00    	je     c0027c3a <__adddf3+0x5f7>
c00278f6:	89 d1                	mov    ecx,edx
c00278f8:	d1 e9                	shr    ecx,1
c00278fa:	83 e2 01             	and    edx,0x1
c00278fd:	09 ca                	or     edx,ecx
c00278ff:	89 c1                	mov    ecx,eax
c0027901:	c1 e1 1f             	shl    ecx,0x1f
c0027904:	09 ca                	or     edx,ecx
c0027906:	d1 e8                	shr    eax,1
c0027908:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002790d:	e9 37 03 00 00       	jmp    c0027c49 <__adddf3+0x606>
c0027912:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027915:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002791b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002791e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027921:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027927:	29 de                	sub    esi,ebx
c0027929:	85 f6                	test   esi,esi
c002792b:	0f 8e bd 00 00 00    	jle    c00279ee <__adddf3+0x3ab>
c0027931:	85 db                	test   ebx,ebx
c0027933:	75 17                	jne    c002794c <__adddf3+0x309>
c0027935:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027938:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002793b:	0f 84 47 03 00 00    	je     c0027c88 <__adddf3+0x645>
c0027941:	4e                   	dec    esi
c0027942:	75 20                	jne    c0027964 <__adddf3+0x321>
c0027944:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027947:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002794a:	eb 5b                	jmp    c00279a7 <__adddf3+0x364>
c002794c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002794f:	f7 d3                	not    ebx
c0027951:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027957:	0f 84 2b 03 00 00    	je     c0027c88 <__adddf3+0x645>
c002795d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027964:	83 fe 1f             	cmp    esi,0x1f
c0027967:	7e 49                	jle    c00279b2 <__adddf3+0x36f>
c0027969:	83 fe 3f             	cmp    esi,0x3f
c002796c:	0f 8f 16 03 00 00    	jg     c0027c88 <__adddf3+0x645>
c0027972:	83 e6 1f             	and    esi,0x1f
c0027975:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027978:	89 f1                	mov    ecx,esi
c002797a:	d3 ef                	shr    edi,cl
c002797c:	31 db                	xor    ebx,ebx
c002797e:	85 f6                	test   esi,esi
c0027980:	74 13                	je     c0027995 <__adddf3+0x352>
c0027982:	b9 20 00 00 00       	mov    ecx,0x20
c0027987:	29 f1                	sub    ecx,esi
c0027989:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002798c:	d3 e6                	shl    esi,cl
c002798e:	31 db                	xor    ebx,ebx
c0027990:	85 f6                	test   esi,esi
c0027992:	0f 95 c3             	setne  bl
c0027995:	31 c9                	xor    ecx,ecx
c0027997:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002799b:	0f 95 c1             	setne  cl
c002799e:	09 cf                	or     edi,ecx
c00279a0:	09 fb                	or     ebx,edi
c00279a2:	29 da                	sub    edx,ebx
c00279a4:	83 d8 00             	sbb    eax,0x0
c00279a7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279aa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279ad:	e9 aa 01 00 00       	jmp    c0027b5c <__adddf3+0x519>
c00279b2:	bf 20 00 00 00       	mov    edi,0x20
c00279b7:	29 f7                	sub    edi,esi
c00279b9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279bc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00279bf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279c2:	d3 e3                	shl    ebx,cl
c00279c4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279c7:	89 f1                	mov    ecx,esi
c00279c9:	d3 ef                	shr    edi,cl
c00279cb:	09 fb                	or     ebx,edi
c00279cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279d0:	89 f1                	mov    ecx,esi
c00279d2:	d3 ef                	shr    edi,cl
c00279d4:	89 fe                	mov    esi,edi
c00279d6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279d9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279dc:	d3 e7                	shl    edi,cl
c00279de:	85 ff                	test   edi,edi
c00279e0:	0f 95 c1             	setne  cl
c00279e3:	0f b6 c9             	movzx  ecx,cl
c00279e6:	09 cb                	or     ebx,ecx
c00279e8:	29 da                	sub    edx,ebx
c00279ea:	19 f0                	sbb    eax,esi
c00279ec:	eb b9                	jmp    c00279a7 <__adddf3+0x364>
c00279ee:	0f 84 cd 00 00 00    	je     c0027ac1 <__adddf3+0x47e>
c00279f4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279f7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279fa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279fd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a01:	75 1b                	jne    c0027a1e <__adddf3+0x3db>
c0027a03:	89 d6                	mov    esi,edx
c0027a05:	09 c6                	or     esi,eax
c0027a07:	0f 84 7b 02 00 00    	je     c0027c88 <__adddf3+0x645>
c0027a0d:	4b                   	dec    ebx
c0027a0e:	75 24                	jne    c0027a34 <__adddf3+0x3f1>
c0027a10:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a13:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a16:	29 d1                	sub    ecx,edx
c0027a18:	19 c6                	sbb    esi,eax
c0027a1a:	89 ca                	mov    edx,ecx
c0027a1c:	eb 61                	jmp    c0027a7f <__adddf3+0x43c>
c0027a1e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a21:	f7 d6                	not    esi
c0027a23:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a29:	0f 84 59 02 00 00    	je     c0027c88 <__adddf3+0x645>
c0027a2f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a34:	83 fb 1f             	cmp    ebx,0x1f
c0027a37:	7e 4d                	jle    c0027a86 <__adddf3+0x443>
c0027a39:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a3c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a3f:	83 fb 3f             	cmp    ebx,0x3f
c0027a42:	0f 8f 40 02 00 00    	jg     c0027c88 <__adddf3+0x645>
c0027a48:	83 e3 1f             	and    ebx,0x1f
c0027a4b:	89 d9                	mov    ecx,ebx
c0027a4d:	89 c7                	mov    edi,eax
c0027a4f:	d3 ef                	shr    edi,cl
c0027a51:	31 db                	xor    ebx,ebx
c0027a53:	85 c9                	test   ecx,ecx
c0027a55:	74 12                	je     c0027a69 <__adddf3+0x426>
c0027a57:	be 20 00 00 00       	mov    esi,0x20
c0027a5c:	29 ce                	sub    esi,ecx
c0027a5e:	89 f1                	mov    ecx,esi
c0027a60:	d3 e0                	shl    eax,cl
c0027a62:	31 db                	xor    ebx,ebx
c0027a64:	85 c0                	test   eax,eax
c0027a66:	0f 95 c3             	setne  bl
c0027a69:	31 c0                	xor    eax,eax
c0027a6b:	85 d2                	test   edx,edx
c0027a6d:	0f 95 c0             	setne  al
c0027a70:	09 c7                	or     edi,eax
c0027a72:	09 fb                	or     ebx,edi
c0027a74:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a77:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a7a:	29 da                	sub    edx,ebx
c0027a7c:	83 de 00             	sbb    esi,0x0
c0027a7f:	89 f0                	mov    eax,esi
c0027a81:	e9 d6 00 00 00       	jmp    c0027b5c <__adddf3+0x519>
c0027a86:	be 20 00 00 00       	mov    esi,0x20
c0027a8b:	29 de                	sub    esi,ebx
c0027a8d:	89 c7                	mov    edi,eax
c0027a8f:	89 f1                	mov    ecx,esi
c0027a91:	d3 e7                	shl    edi,cl
c0027a93:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a96:	89 d7                	mov    edi,edx
c0027a98:	88 d9                	mov    cl,bl
c0027a9a:	d3 ef                	shr    edi,cl
c0027a9c:	89 f9                	mov    ecx,edi
c0027a9e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa1:	09 cf                	or     edi,ecx
c0027aa3:	88 d9                	mov    cl,bl
c0027aa5:	d3 e8                	shr    eax,cl
c0027aa7:	89 f1                	mov    ecx,esi
c0027aa9:	d3 e2                	shl    edx,cl
c0027aab:	85 d2                	test   edx,edx
c0027aad:	0f 95 c2             	setne  dl
c0027ab0:	0f b6 d2             	movzx  edx,dl
c0027ab3:	09 d7                	or     edi,edx
c0027ab5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ab8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027abb:	29 fa                	sub    edx,edi
c0027abd:	19 c6                	sbb    esi,eax
c0027abf:	eb be                	jmp    c0027a7f <__adddf3+0x43c>
c0027ac1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ac4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027ac7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027acd:	75 6a                	jne    c0027b39 <__adddf3+0x4f6>
c0027acf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ad3:	75 58                	jne    c0027b2d <__adddf3+0x4ea>
c0027ad5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ad8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027adb:	89 d6                	mov    esi,edx
c0027add:	09 c6                	or     esi,eax
c0027adf:	75 17                	jne    c0027af8 <__adddf3+0x4b5>
c0027ae1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ae4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ae7:	85 db                	test   ebx,ebx
c0027ae9:	0f 85 99 01 00 00    	jne    c0027c88 <__adddf3+0x645>
c0027aef:	31 ff                	xor    edi,edi
c0027af1:	31 c9                	xor    ecx,ecx
c0027af3:	e9 90 01 00 00       	jmp    c0027c88 <__adddf3+0x645>
c0027af8:	85 db                	test   ebx,ebx
c0027afa:	0f 84 88 01 00 00    	je     c0027c88 <__adddf3+0x645>
c0027b00:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027b03:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027b06:	85 c0                	test   eax,eax
c0027b08:	79 10                	jns    c0027b1a <__adddf3+0x4d7>
c0027b0a:	31 c9                	xor    ecx,ecx
c0027b0c:	f7 da                	neg    edx
c0027b0e:	0f 95 c1             	setne  cl
c0027b11:	01 c8                	add    eax,ecx
c0027b13:	f7 d8                	neg    eax
c0027b15:	e9 2f 01 00 00       	jmp    c0027c49 <__adddf3+0x606>
c0027b1a:	31 ff                	xor    edi,edi
c0027b1c:	31 c9                	xor    ecx,ecx
c0027b1e:	89 c3                	mov    ebx,eax
c0027b20:	09 d3                	or     ebx,edx
c0027b22:	0f 84 60 01 00 00    	je     c0027c88 <__adddf3+0x645>
c0027b28:	e9 05 01 00 00       	jmp    c0027c32 <__adddf3+0x5ef>
c0027b2d:	31 ff                	xor    edi,edi
c0027b2f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b34:	e9 4f 01 00 00       	jmp    c0027c88 <__adddf3+0x645>
c0027b39:	89 c1                	mov    ecx,eax
c0027b3b:	89 d0                	mov    eax,edx
c0027b3d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b40:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b43:	89 ca                	mov    edx,ecx
c0027b45:	85 c9                	test   ecx,ecx
c0027b47:	79 2c                	jns    c0027b75 <__adddf3+0x532>
c0027b49:	31 c9                	xor    ecx,ecx
c0027b4b:	f7 d8                	neg    eax
c0027b4d:	0f 95 c1             	setne  cl
c0027b50:	01 ca                	add    edx,ecx
c0027b52:	f7 da                	neg    edx
c0027b54:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b57:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b5a:	eb 19                	jmp    c0027b75 <__adddf3+0x532>
c0027b5c:	85 c0                	test   eax,eax
c0027b5e:	0f 89 e5 00 00 00    	jns    c0027c49 <__adddf3+0x606>
c0027b64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b69:	89 c1                	mov    ecx,eax
c0027b6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b6e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b71:	89 d0                	mov    eax,edx
c0027b73:	89 ca                	mov    edx,ecx
c0027b75:	85 d2                	test   edx,edx
c0027b77:	74 59                	je     c0027bd2 <__adddf3+0x58f>
c0027b79:	0f bd da             	bsr    ebx,edx
c0027b7c:	83 f3 1f             	xor    ebx,0x1f
c0027b7f:	88 d9                	mov    cl,bl
c0027b81:	d3 e2                	shl    edx,cl
c0027b83:	bf 20 00 00 00       	mov    edi,0x20
c0027b88:	89 f9                	mov    ecx,edi
c0027b8a:	29 d9                	sub    ecx,ebx
c0027b8c:	89 c6                	mov    esi,eax
c0027b8e:	d3 ee                	shr    esi,cl
c0027b90:	09 d6                	or     esi,edx
c0027b92:	88 d9                	mov    cl,bl
c0027b94:	d3 e0                	shl    eax,cl
c0027b96:	89 c2                	mov    edx,eax
c0027b98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b9b:	25 ff 07 00 00       	and    eax,0x7ff
c0027ba0:	39 d8                	cmp    eax,ebx
c0027ba2:	7f 22                	jg     c0027bc6 <__adddf3+0x583>
c0027ba4:	29 c3                	sub    ebx,eax
c0027ba6:	43                   	inc    ebx
c0027ba7:	88 d9                	mov    cl,bl
c0027ba9:	d3 ea                	shr    edx,cl
c0027bab:	29 df                	sub    edi,ebx
c0027bad:	89 f9                	mov    ecx,edi
c0027baf:	89 f0                	mov    eax,esi
c0027bb1:	d3 e0                	shl    eax,cl
c0027bb3:	09 c2                	or     edx,eax
c0027bb5:	89 f0                	mov    eax,esi
c0027bb7:	88 d9                	mov    cl,bl
c0027bb9:	d3 e8                	shr    eax,cl
c0027bbb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bbe:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027bc4:	eb 6f                	jmp    c0027c35 <__adddf3+0x5f2>
c0027bc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bc9:	29 d8                	sub    eax,ebx
c0027bcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bce:	89 f0                	mov    eax,esi
c0027bd0:	eb 59                	jmp    c0027c2b <__adddf3+0x5e8>
c0027bd2:	85 c0                	test   eax,eax
c0027bd4:	74 6a                	je     c0027c40 <__adddf3+0x5fd>
c0027bd6:	0f bd c8             	bsr    ecx,eax
c0027bd9:	83 f1 1f             	xor    ecx,0x1f
c0027bdc:	d3 e0                	shl    eax,cl
c0027bde:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027be1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027be7:	83 c1 20             	add    ecx,0x20
c0027bea:	39 cb                	cmp    ebx,ecx
c0027bec:	7f 35                	jg     c0027c23 <__adddf3+0x5e0>
c0027bee:	29 d9                	sub    ecx,ebx
c0027bf0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bf3:	83 fe 1f             	cmp    esi,0x1f
c0027bf6:	7e 09                	jle    c0027c01 <__adddf3+0x5be>
c0027bf8:	83 e9 1f             	sub    ecx,0x1f
c0027bfb:	d3 e8                	shr    eax,cl
c0027bfd:	89 c3                	mov    ebx,eax
c0027bff:	eb 11                	jmp    c0027c12 <__adddf3+0x5cf>
c0027c01:	b9 20 00 00 00       	mov    ecx,0x20
c0027c06:	29 f1                	sub    ecx,esi
c0027c08:	89 c3                	mov    ebx,eax
c0027c0a:	d3 e3                	shl    ebx,cl
c0027c0c:	89 f1                	mov    ecx,esi
c0027c0e:	d3 e8                	shr    eax,cl
c0027c10:	89 c2                	mov    edx,eax
c0027c12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c15:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c1d:	89 d0                	mov    eax,edx
c0027c1f:	89 da                	mov    edx,ebx
c0027c21:	eb 26                	jmp    c0027c49 <__adddf3+0x606>
c0027c23:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c26:	29 cf                	sub    edi,ecx
c0027c28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c2b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c30:	eb 17                	jmp    c0027c49 <__adddf3+0x606>
c0027c32:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c35:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c38:	eb 0f                	jmp    c0027c49 <__adddf3+0x606>
c0027c3a:	31 d2                	xor    edx,edx
c0027c3c:	31 c0                	xor    eax,eax
c0027c3e:	eb 09                	jmp    c0027c49 <__adddf3+0x606>
c0027c40:	89 c2                	mov    edx,eax
c0027c42:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c49:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c4c:	c1 e1 14             	shl    ecx,0x14
c0027c4f:	89 c3                	mov    ebx,eax
c0027c51:	c1 eb 0b             	shr    ebx,0xb
c0027c54:	09 d9                	or     ecx,ebx
c0027c56:	89 d3                	mov    ebx,edx
c0027c58:	c1 eb 0b             	shr    ebx,0xb
c0027c5b:	c1 e0 15             	shl    eax,0x15
c0027c5e:	09 d8                	or     eax,ebx
c0027c60:	89 c7                	mov    edi,eax
c0027c62:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c68:	0f 95 c0             	setne  al
c0027c6b:	89 c6                	mov    esi,eax
c0027c6d:	09 f3                	or     ebx,esi
c0027c6f:	83 e3 01             	and    ebx,0x1
c0027c72:	c1 ea 0a             	shr    edx,0xa
c0027c75:	21 da                	and    edx,ebx
c0027c77:	89 f8                	mov    eax,edi
c0027c79:	01 d0                	add    eax,edx
c0027c7b:	83 d1 00             	adc    ecx,0x0
c0027c7e:	89 c7                	mov    edi,eax
c0027c80:	eb 06                	jmp    c0027c88 <__adddf3+0x645>
c0027c82:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c85:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c88:	89 f8                	mov    eax,edi
c0027c8a:	89 ca                	mov    edx,ecx
c0027c8c:	83 c4 24             	add    esp,0x24
c0027c8f:	5b                   	pop    ebx
c0027c90:	5e                   	pop    esi
c0027c91:	5f                   	pop    edi
c0027c92:	5d                   	pop    ebp
c0027c93:	c3                   	ret    

c0027c94 <__subdf3>:
c0027c94:	55                   	push   ebp
c0027c95:	89 e5                	mov    ebp,esp
c0027c97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c9d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ca3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027ca6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027ca9:	5d                   	pop    ebp
c0027caa:	e9 94 f9 ff ff       	jmp    c0027643 <__adddf3>

c0027caf <__negdf2>:
c0027caf:	55                   	push   ebp
c0027cb0:	89 e5                	mov    ebp,esp
c0027cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027cb5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027cb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cbe:	5d                   	pop    ebp
c0027cbf:	c3                   	ret    

c0027cc0 <__muldf3>:
c0027cc0:	55                   	push   ebp
c0027cc1:	89 e5                	mov    ebp,esp
c0027cc3:	57                   	push   edi
c0027cc4:	56                   	push   esi
c0027cc5:	53                   	push   ebx
c0027cc6:	83 ec 24             	sub    esp,0x24
c0027cc9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ccc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027ccf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cd5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cd8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cdb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cde:	89 c8                	mov    eax,ecx
c0027ce0:	c1 f8 14             	sar    eax,0x14
c0027ce3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ce6:	89 f8                	mov    eax,edi
c0027ce8:	89 fb                	mov    ebx,edi
c0027cea:	c1 e3 0b             	shl    ebx,0xb
c0027ced:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cf0:	c1 e1 0b             	shl    ecx,0xb
c0027cf3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cf9:	c1 e8 15             	shr    eax,0x15
c0027cfc:	09 c1                	or     ecx,eax
c0027cfe:	89 d6                	mov    esi,edx
c0027d00:	89 d0                	mov    eax,edx
c0027d02:	c1 f8 14             	sar    eax,0x14
c0027d05:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027d08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027d0b:	89 c3                	mov    ebx,eax
c0027d0d:	c1 e3 0b             	shl    ebx,0xb
c0027d10:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d13:	c1 e6 0b             	shl    esi,0xb
c0027d16:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d1c:	c1 e8 15             	shr    eax,0x15
c0027d1f:	09 c6                	or     esi,eax
c0027d21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d24:	25 ff 07 00 00       	and    eax,0x7ff
c0027d29:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d2f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d34:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d37:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d3a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d3d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d47:	40                   	inc    eax
c0027d48:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d4d:	0f 85 8d 00 00 00    	jne    c0027de0 <__muldf3+0x120>
c0027d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d56:	09 c8                	or     eax,ecx
c0027d58:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d5c:	74 44                	je     c0027da2 <__muldf3+0xe2>
c0027d5e:	85 c0                	test   eax,eax
c0027d60:	0f 85 31 02 00 00    	jne    c0027f97 <__muldf3+0x2d7>
c0027d66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d69:	40                   	inc    eax
c0027d6a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d6f:	75 13                	jne    c0027d84 <__muldf3+0xc4>
c0027d71:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d74:	09 f1                	or     ecx,esi
c0027d76:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d7a:	74 22                	je     c0027d9e <__muldf3+0xde>
c0027d7c:	85 c9                	test   ecx,ecx
c0027d7e:	0f 85 0d 02 00 00    	jne    c0027f91 <__muldf3+0x2d1>
c0027d84:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d88:	0f 89 09 02 00 00    	jns    c0027f97 <__muldf3+0x2d7>
c0027d8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d91:	05 00 00 00 80       	add    eax,0x80000000
c0027d96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d99:	e9 f9 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027d9e:	85 c9                	test   ecx,ecx
c0027da0:	eb 2e                	jmp    c0027dd0 <__muldf3+0x110>
c0027da2:	85 c0                	test   eax,eax
c0027da4:	74 20                	je     c0027dc6 <__muldf3+0x106>
c0027da6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027da9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dac:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027daf:	c1 ef 1f             	shr    edi,0x1f
c0027db2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027db5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027db8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dbe:	09 f9                	or     ecx,edi
c0027dc0:	78 1e                	js     c0027de0 <__muldf3+0x120>
c0027dc2:	89 c3                	mov    ebx,eax
c0027dc4:	eb e0                	jmp    c0027da6 <__muldf3+0xe6>
c0027dc6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dc9:	f7 d0                	not    eax
c0027dcb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027dd0:	75 b2                	jne    c0027d84 <__muldf3+0xc4>
c0027dd2:	31 ff                	xor    edi,edi
c0027dd4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027ddb:	e9 b7 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027de0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027de3:	40                   	inc    eax
c0027de4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027de9:	75 57                	jne    c0027e42 <__muldf3+0x182>
c0027deb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dee:	09 f0                	or     eax,esi
c0027df0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027df4:	74 23                	je     c0027e19 <__muldf3+0x159>
c0027df6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dfa:	0f 89 91 01 00 00    	jns    c0027f91 <__muldf3+0x2d1>
c0027e00:	85 c0                	test   eax,eax
c0027e02:	0f 85 89 01 00 00    	jne    c0027f91 <__muldf3+0x2d1>
c0027e08:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e0b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027e11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e14:	e9 7e 01 00 00       	jmp    c0027f97 <__muldf3+0x2d7>
c0027e19:	85 c0                	test   eax,eax
c0027e1b:	75 0c                	jne    c0027e29 <__muldf3+0x169>
c0027e1d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e21:	0f 89 6a 01 00 00    	jns    c0027f91 <__muldf3+0x2d1>
c0027e27:	eb df                	jmp    c0027e08 <__muldf3+0x148>
c0027e29:	01 f6                	add    esi,esi
c0027e2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e2e:	c1 ea 1f             	shr    edx,0x1f
c0027e31:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e34:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e3a:	09 d6                	or     esi,edx
c0027e3c:	78 04                	js     c0027e42 <__muldf3+0x182>
c0027e3e:	89 c3                	mov    ebx,eax
c0027e40:	eb e7                	jmp    c0027e29 <__muldf3+0x169>
c0027e42:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e4e:	89 c8                	mov    eax,ecx
c0027e50:	f7 e6                	mul    esi
c0027e52:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e55:	89 c7                	mov    edi,eax
c0027e57:	89 c8                	mov    eax,ecx
c0027e59:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e5c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e5f:	89 c1                	mov    ecx,eax
c0027e61:	89 f0                	mov    eax,esi
c0027e63:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e66:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e69:	89 c6                	mov    esi,eax
c0027e6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e6e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e71:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e74:	31 c0                	xor    eax,eax
c0027e76:	01 f1                	add    ecx,esi
c0027e78:	0f 92 c0             	setb   al
c0027e7b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e7e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e81:	83 d6 00             	adc    esi,0x0
c0027e84:	01 c7                	add    edi,eax
c0027e86:	83 d6 00             	adc    esi,0x0
c0027e89:	01 ca                	add    edx,ecx
c0027e8b:	0f 92 c1             	setb   cl
c0027e8e:	0f b6 c9             	movzx  ecx,cl
c0027e91:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e94:	83 d6 00             	adc    esi,0x0
c0027e97:	01 cf                	add    edi,ecx
c0027e99:	83 d6 00             	adc    esi,0x0
c0027e9c:	31 c9                	xor    ecx,ecx
c0027e9e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ea1:	0f 95 c1             	setne  cl
c0027ea4:	09 cf                	or     edi,ecx
c0027ea6:	85 f6                	test   esi,esi
c0027ea8:	78 0c                	js     c0027eb6 <__muldf3+0x1f6>
c0027eaa:	01 f6                	add    esi,esi
c0027eac:	89 f8                	mov    eax,edi
c0027eae:	c1 e8 1f             	shr    eax,0x1f
c0027eb1:	09 c6                	or     esi,eax
c0027eb3:	01 ff                	add    edi,edi
c0027eb5:	4b                   	dec    ebx
c0027eb6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027ebc:	0f 8f 85 00 00 00    	jg     c0027f47 <__muldf3+0x287>
c0027ec2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ec8:	85 db                	test   ebx,ebx
c0027eca:	0f 8f 84 00 00 00    	jg     c0027f54 <__muldf3+0x294>
c0027ed0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027ed3:	7c 79                	jl     c0027f4e <__muldf3+0x28e>
c0027ed5:	ba 01 00 00 00       	mov    edx,0x1
c0027eda:	29 da                	sub    edx,ebx
c0027edc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ee2:	83 fa 1f             	cmp    edx,0x1f
c0027ee5:	7e 30                	jle    c0027f17 <__muldf3+0x257>
c0027ee7:	83 fa 20             	cmp    edx,0x20
c0027eea:	75 0b                	jne    c0027ef7 <__muldf3+0x237>
c0027eec:	31 c0                	xor    eax,eax
c0027eee:	85 ff                	test   edi,edi
c0027ef0:	0f 95 c0             	setne  al
c0027ef3:	89 c7                	mov    edi,eax
c0027ef5:	eb 1a                	jmp    c0027f11 <__muldf3+0x251>
c0027ef7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027efa:	89 f0                	mov    eax,esi
c0027efc:	d3 e0                	shl    eax,cl
c0027efe:	09 f8                	or     eax,edi
c0027f00:	0f 95 c0             	setne  al
c0027f03:	0f b6 c0             	movzx  eax,al
c0027f06:	89 c7                	mov    edi,eax
c0027f08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027f0d:	29 d9                	sub    ecx,ebx
c0027f0f:	d3 ee                	shr    esi,cl
c0027f11:	09 f7                	or     edi,esi
c0027f13:	31 db                	xor    ebx,ebx
c0027f15:	eb 3b                	jmp    c0027f52 <__muldf3+0x292>
c0027f17:	83 c3 1f             	add    ebx,0x1f
c0027f1a:	89 f0                	mov    eax,esi
c0027f1c:	88 d9                	mov    cl,bl
c0027f1e:	d3 e0                	shl    eax,cl
c0027f20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f23:	89 f8                	mov    eax,edi
c0027f25:	88 d1                	mov    cl,dl
c0027f27:	d3 e8                	shr    eax,cl
c0027f29:	89 c1                	mov    ecx,eax
c0027f2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f2e:	09 c8                	or     eax,ecx
c0027f30:	88 d9                	mov    cl,bl
c0027f32:	d3 e7                	shl    edi,cl
c0027f34:	31 db                	xor    ebx,ebx
c0027f36:	85 ff                	test   edi,edi
c0027f38:	0f 95 c3             	setne  bl
c0027f3b:	89 df                	mov    edi,ebx
c0027f3d:	09 c7                	or     edi,eax
c0027f3f:	88 d1                	mov    cl,dl
c0027f41:	d3 ee                	shr    esi,cl
c0027f43:	31 db                	xor    ebx,ebx
c0027f45:	eb 0d                	jmp    c0027f54 <__muldf3+0x294>
c0027f47:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f4c:	eb 02                	jmp    c0027f50 <__muldf3+0x290>
c0027f4e:	31 db                	xor    ebx,ebx
c0027f50:	31 ff                	xor    edi,edi
c0027f52:	31 f6                	xor    esi,esi
c0027f54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f57:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f5a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f5f:	09 c3                	or     ebx,eax
c0027f61:	c1 e3 14             	shl    ebx,0x14
c0027f64:	89 f0                	mov    eax,esi
c0027f66:	c1 e8 0b             	shr    eax,0xb
c0027f69:	09 c3                	or     ebx,eax
c0027f6b:	89 f8                	mov    eax,edi
c0027f6d:	c1 e8 0b             	shr    eax,0xb
c0027f70:	c1 e6 15             	shl    esi,0x15
c0027f73:	09 c6                	or     esi,eax
c0027f75:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f7b:	0f 95 c1             	setne  cl
c0027f7e:	09 c8                	or     eax,ecx
c0027f80:	83 e0 01             	and    eax,0x1
c0027f83:	c1 ef 0a             	shr    edi,0xa
c0027f86:	21 c7                	and    edi,eax
c0027f88:	01 f7                	add    edi,esi
c0027f8a:	83 d3 00             	adc    ebx,0x0
c0027f8d:	89 da                	mov    edx,ebx
c0027f8f:	eb 03                	jmp    c0027f94 <__muldf3+0x2d4>
c0027f91:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f94:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f97:	89 f8                	mov    eax,edi
c0027f99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f9c:	83 c4 24             	add    esp,0x24
c0027f9f:	5b                   	pop    ebx
c0027fa0:	5e                   	pop    esi
c0027fa1:	5f                   	pop    edi
c0027fa2:	5d                   	pop    ebp
c0027fa3:	c3                   	ret    

c0027fa4 <__divdf3>:
c0027fa4:	55                   	push   ebp
c0027fa5:	89 e5                	mov    ebp,esp
c0027fa7:	57                   	push   edi
c0027fa8:	56                   	push   esi
c0027fa9:	53                   	push   ebx
c0027faa:	83 ec 2c             	sub    esp,0x2c
c0027fad:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027fb0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027fb6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027fb9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027fbc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027fbf:	89 ce                	mov    esi,ecx
c0027fc1:	89 c8                	mov    eax,ecx
c0027fc3:	c1 f8 14             	sar    eax,0x14
c0027fc6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fc9:	89 f8                	mov    eax,edi
c0027fcb:	89 fb                	mov    ebx,edi
c0027fcd:	c1 e3 0b             	shl    ebx,0xb
c0027fd0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fd3:	c1 e6 0b             	shl    esi,0xb
c0027fd6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fdc:	c1 e8 15             	shr    eax,0x15
c0027fdf:	09 c6                	or     esi,eax
c0027fe1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fe4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fe7:	89 c2                	mov    edx,eax
c0027fe9:	c1 fa 14             	sar    edx,0x14
c0027fec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fef:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ff2:	89 de                	mov    esi,ebx
c0027ff4:	c1 e6 0b             	shl    esi,0xb
c0027ff7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027ffa:	c1 e0 0b             	shl    eax,0xb
c0027ffd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028002:	c1 eb 15             	shr    ebx,0x15
c0028005:	09 d8                	or     eax,ebx
c0028007:	89 c2                	mov    edx,eax
c0028009:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002800c:	25 ff 07 00 00       	and    eax,0x7ff
c0028011:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028014:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028017:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002801d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028020:	29 d8                	sub    eax,ebx
c0028022:	05 ff 03 00 00       	add    eax,0x3ff
c0028027:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002802a:	46                   	inc    esi
c002802b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028031:	0f 85 a5 00 00 00    	jne    c00280dc <__divdf3+0x138>
c0028037:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002803a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002803d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028041:	74 2a                	je     c002806d <__divdf3+0xc9>
c0028043:	85 f6                	test   esi,esi
c0028045:	0f 85 cc 02 00 00    	jne    c0028317 <__divdf3+0x373>
c002804b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002804e:	40                   	inc    eax
c002804f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028054:	75 26                	jne    c002807c <__divdf3+0xd8>
c0028056:	85 db                	test   ebx,ebx
c0028058:	74 22                	je     c002807c <__divdf3+0xd8>
c002805a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002805d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028060:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028063:	09 d0                	or     eax,edx
c0028065:	0f 85 ac 02 00 00    	jne    c0028317 <__divdf3+0x373>
c002806b:	eb 63                	jmp    c00280d0 <__divdf3+0x12c>
c002806d:	85 f6                	test   esi,esi
c002806f:	75 22                	jne    c0028093 <__divdf3+0xef>
c0028071:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028074:	40                   	inc    eax
c0028075:	a9 fe 07 00 00       	test   eax,0x7fe
c002807a:	74 36                	je     c00280b2 <__divdf3+0x10e>
c002807c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028080:	0f 89 91 02 00 00    	jns    c0028317 <__divdf3+0x373>
c0028086:	89 f8                	mov    eax,edi
c0028088:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002808e:	e9 80 02 00 00       	jmp    c0028313 <__divdf3+0x36f>
c0028093:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028096:	01 f6                	add    esi,esi
c0028098:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002809b:	c1 ef 1f             	shr    edi,0x1f
c002809e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00280a1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00280a4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00280a7:	09 f7                	or     edi,esi
c00280a9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00280ac:	78 2e                	js     c00280dc <__divdf3+0x138>
c00280ae:	89 c8                	mov    eax,ecx
c00280b0:	eb e1                	jmp    c0028093 <__divdf3+0xef>
c00280b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00280b5:	09 d0                	or     eax,edx
c00280b7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280bb:	74 0f                	je     c00280cc <__divdf3+0x128>
c00280bd:	85 c0                	test   eax,eax
c00280bf:	74 bb                	je     c002807c <__divdf3+0xd8>
c00280c1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280c4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280c7:	e9 4b 02 00 00       	jmp    c0028317 <__divdf3+0x373>
c00280cc:	85 c0                	test   eax,eax
c00280ce:	75 ac                	jne    c002807c <__divdf3+0xd8>
c00280d0:	31 ff                	xor    edi,edi
c00280d2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280d7:	e9 3b 02 00 00       	jmp    c0028317 <__divdf3+0x373>
c00280dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280e2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280e8:	75 6b                	jne    c0028155 <__divdf3+0x1b1>
c00280ea:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280ed:	09 d6                	or     esi,edx
c00280ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280f3:	74 28                	je     c002811d <__divdf3+0x179>
c00280f5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280f8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280fb:	85 f6                	test   esi,esi
c00280fd:	0f 85 14 02 00 00    	jne    c0028317 <__divdf3+0x373>
c0028103:	31 ff                	xor    edi,edi
c0028105:	31 c9                	xor    ecx,ecx
c0028107:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002810a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002810d:	0f 89 04 02 00 00    	jns    c0028317 <__divdf3+0x373>
c0028113:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028118:	e9 fa 01 00 00       	jmp    c0028317 <__divdf3+0x373>
c002811d:	85 f6                	test   esi,esi
c002811f:	75 1b                	jne    c002813c <__divdf3+0x198>
c0028121:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028124:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028127:	25 00 00 00 80       	and    eax,0x80000000
c002812c:	31 c9                	xor    ecx,ecx
c002812e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028133:	89 cf                	mov    edi,ecx
c0028135:	89 c1                	mov    ecx,eax
c0028137:	e9 db 01 00 00       	jmp    c0028317 <__divdf3+0x373>
c002813c:	01 d2                	add    edx,edx
c002813e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028141:	c1 eb 1f             	shr    ebx,0x1f
c0028144:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028147:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002814a:	8d 48 01             	lea    ecx,[eax+0x1]
c002814d:	09 da                	or     edx,ebx
c002814f:	78 04                	js     c0028155 <__divdf3+0x1b1>
c0028151:	89 c8                	mov    eax,ecx
c0028153:	eb e7                	jmp    c002813c <__divdf3+0x198>
c0028155:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028158:	81 ce 00 00 00 80    	or     esi,0x80000000
c002815e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028164:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028167:	39 d6                	cmp    esi,edx
c0028169:	77 0d                	ja     c0028178 <__divdf3+0x1d4>
c002816b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002816e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028171:	72 1b                	jb     c002818e <__divdf3+0x1ea>
c0028173:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028176:	75 16                	jne    c002818e <__divdf3+0x1ea>
c0028178:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002817b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002817e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028181:	83 de 00             	sbb    esi,0x0
c0028184:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028187:	ba 01 00 00 00       	mov    edx,0x1
c002818c:	eb 02                	jmp    c0028190 <__divdf3+0x1ec>
c002818e:	31 d2                	xor    edx,edx
c0028190:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028197:	31 ff                	xor    edi,edi
c0028199:	01 ff                	add    edi,edi
c002819b:	89 d1                	mov    ecx,edx
c002819d:	c1 e9 1f             	shr    ecx,0x1f
c00281a0:	09 cf                	or     edi,ecx
c00281a2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00281a5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00281a8:	89 da                	mov    edx,ebx
c00281aa:	89 f3                	mov    ebx,esi
c00281ac:	8d 34 36             	lea    esi,[esi+esi*1]
c00281af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281b2:	c1 e9 1f             	shr    ecx,0x1f
c00281b5:	09 ce                	or     esi,ecx
c00281b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281ba:	01 c9                	add    ecx,ecx
c00281bc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00281bf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281c2:	85 db                	test   ebx,ebx
c00281c4:	78 29                	js     c00281ef <__divdf3+0x24b>
c00281c6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281c9:	72 07                	jb     c00281d2 <__divdf3+0x22e>
c00281cb:	75 3c                	jne    c0028209 <__divdf3+0x265>
c00281cd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d0:	77 37                	ja     c0028209 <__divdf3+0x265>
c00281d2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281d5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281d8:	31 d2                	xor    edx,edx
c00281da:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281dd:	0f 97 c2             	seta   dl
c00281e0:	29 d6                	sub    esi,edx
c00281e2:	89 d9                	mov    ecx,ebx
c00281e4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281ed:	eb 17                	jmp    c0028206 <__divdf3+0x262>
c00281ef:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281f2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281f8:	0f 97 c1             	seta   cl
c00281fb:	0f b6 c9             	movzx  ecx,cl
c00281fe:	29 ce                	sub    esi,ecx
c0028200:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028203:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028206:	83 ca 01             	or     edx,0x1
c0028209:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002820c:	75 8b                	jne    c0028199 <__divdf3+0x1f5>
c002820e:	c1 e7 09             	shl    edi,0x9
c0028211:	89 d1                	mov    ecx,edx
c0028213:	c1 e9 17             	shr    ecx,0x17
c0028216:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028219:	09 f3                	or     ebx,esi
c002821b:	0f 95 c3             	setne  bl
c002821e:	0f b6 db             	movzx  ebx,bl
c0028221:	c1 e2 09             	shl    edx,0x9
c0028224:	09 d3                	or     ebx,edx
c0028226:	89 ca                	mov    edx,ecx
c0028228:	09 fa                	or     edx,edi
c002822a:	78 0c                	js     c0028238 <__divdf3+0x294>
c002822c:	01 d2                	add    edx,edx
c002822e:	89 d9                	mov    ecx,ebx
c0028230:	c1 e9 1f             	shr    ecx,0x1f
c0028233:	09 ca                	or     edx,ecx
c0028235:	01 db                	add    ebx,ebx
c0028237:	48                   	dec    eax
c0028238:	3d fe 07 00 00       	cmp    eax,0x7fe
c002823d:	0f 8f 83 00 00 00    	jg     c00282c6 <__divdf3+0x322>
c0028243:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028249:	85 c0                	test   eax,eax
c002824b:	0f 8f 82 00 00 00    	jg     c00282d3 <__divdf3+0x32f>
c0028251:	83 f8 cc             	cmp    eax,0xffffffcc
c0028254:	7c 77                	jl     c00282cd <__divdf3+0x329>
c0028256:	be 01 00 00 00       	mov    esi,0x1
c002825b:	29 c6                	sub    esi,eax
c002825d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028263:	83 fe 1f             	cmp    esi,0x1f
c0028266:	7e 2f                	jle    c0028297 <__divdf3+0x2f3>
c0028268:	83 fe 20             	cmp    esi,0x20
c002826b:	75 0a                	jne    c0028277 <__divdf3+0x2d3>
c002826d:	85 db                	test   ebx,ebx
c002826f:	0f 95 c3             	setne  bl
c0028272:	0f b6 db             	movzx  ebx,bl
c0028275:	eb 1a                	jmp    c0028291 <__divdf3+0x2ed>
c0028277:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002827a:	89 d7                	mov    edi,edx
c002827c:	d3 e7                	shl    edi,cl
c002827e:	89 f9                	mov    ecx,edi
c0028280:	09 d9                	or     ecx,ebx
c0028282:	0f 95 c3             	setne  bl
c0028285:	0f b6 db             	movzx  ebx,bl
c0028288:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002828d:	29 c1                	sub    ecx,eax
c002828f:	d3 ea                	shr    edx,cl
c0028291:	09 d3                	or     ebx,edx
c0028293:	31 c0                	xor    eax,eax
c0028295:	eb 3a                	jmp    c00282d1 <__divdf3+0x32d>
c0028297:	83 c0 1f             	add    eax,0x1f
c002829a:	89 d7                	mov    edi,edx
c002829c:	88 c1                	mov    cl,al
c002829e:	d3 e7                	shl    edi,cl
c00282a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282a3:	89 df                	mov    edi,ebx
c00282a5:	89 f1                	mov    ecx,esi
c00282a7:	d3 ef                	shr    edi,cl
c00282a9:	89 f9                	mov    ecx,edi
c00282ab:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282ae:	09 cf                	or     edi,ecx
c00282b0:	88 c1                	mov    cl,al
c00282b2:	d3 e3                	shl    ebx,cl
c00282b4:	85 db                	test   ebx,ebx
c00282b6:	0f 95 c3             	setne  bl
c00282b9:	0f b6 db             	movzx  ebx,bl
c00282bc:	09 fb                	or     ebx,edi
c00282be:	89 f1                	mov    ecx,esi
c00282c0:	d3 ea                	shr    edx,cl
c00282c2:	31 c0                	xor    eax,eax
c00282c4:	eb 0d                	jmp    c00282d3 <__divdf3+0x32f>
c00282c6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282cb:	eb 02                	jmp    c00282cf <__divdf3+0x32b>
c00282cd:	31 c0                	xor    eax,eax
c00282cf:	31 db                	xor    ebx,ebx
c00282d1:	31 d2                	xor    edx,edx
c00282d3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282d6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282d9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282df:	09 c8                	or     eax,ecx
c00282e1:	c1 e0 14             	shl    eax,0x14
c00282e4:	89 d1                	mov    ecx,edx
c00282e6:	c1 e9 0b             	shr    ecx,0xb
c00282e9:	09 c8                	or     eax,ecx
c00282eb:	89 c6                	mov    esi,eax
c00282ed:	89 d9                	mov    ecx,ebx
c00282ef:	c1 e9 0b             	shr    ecx,0xb
c00282f2:	c1 e2 15             	shl    edx,0x15
c00282f5:	09 ca                	or     edx,ecx
c00282f7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282fd:	0f 95 c0             	setne  al
c0028300:	09 c1                	or     ecx,eax
c0028302:	83 e1 01             	and    ecx,0x1
c0028305:	c1 eb 0a             	shr    ebx,0xa
c0028308:	21 cb                	and    ebx,ecx
c002830a:	01 d3                	add    ebx,edx
c002830c:	89 d8                	mov    eax,ebx
c002830e:	83 d6 00             	adc    esi,0x0
c0028311:	89 f2                	mov    edx,esi
c0028313:	89 c7                	mov    edi,eax
c0028315:	89 d1                	mov    ecx,edx
c0028317:	89 f8                	mov    eax,edi
c0028319:	89 ca                	mov    edx,ecx
c002831b:	83 c4 2c             	add    esp,0x2c
c002831e:	5b                   	pop    ebx
c002831f:	5e                   	pop    esi
c0028320:	5f                   	pop    edi
c0028321:	5d                   	pop    ebp
c0028322:	c3                   	ret    

c0028323 <__floatsidf>:
c0028323:	55                   	push   ebp
c0028324:	89 e5                	mov    ebp,esp
c0028326:	56                   	push   esi
c0028327:	53                   	push   ebx
c0028328:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002832b:	85 db                	test   ebx,ebx
c002832d:	7e 15                	jle    c0028344 <__floatsidf+0x21>
c002832f:	0f bd cb             	bsr    ecx,ebx
c0028332:	83 f1 1f             	xor    ecx,0x1f
c0028335:	d3 e3                	shl    ebx,cl
c0028337:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002833d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028342:	eb 21                	jmp    c0028365 <__floatsidf+0x42>
c0028344:	b8 00 00 00 00       	mov    eax,0x0
c0028349:	ba 00 00 00 00       	mov    edx,0x0
c002834e:	74 2a                	je     c002837a <__floatsidf+0x57>
c0028350:	f7 db                	neg    ebx
c0028352:	0f bd cb             	bsr    ecx,ebx
c0028355:	83 f1 1f             	xor    ecx,0x1f
c0028358:	d3 e3                	shl    ebx,cl
c002835a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028360:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028365:	29 c8                	sub    eax,ecx
c0028367:	c1 e0 14             	shl    eax,0x14
c002836a:	89 c1                	mov    ecx,eax
c002836c:	89 de                	mov    esi,ebx
c002836e:	c1 ee 0b             	shr    esi,0xb
c0028371:	09 f1                	or     ecx,esi
c0028373:	89 ca                	mov    edx,ecx
c0028375:	c1 e3 15             	shl    ebx,0x15
c0028378:	89 d8                	mov    eax,ebx
c002837a:	5b                   	pop    ebx
c002837b:	5e                   	pop    esi
c002837c:	5d                   	pop    ebp
c002837d:	c3                   	ret    

c002837e <__floatunsidf>:
c002837e:	55                   	push   ebp
c002837f:	89 e5                	mov    ebp,esp
c0028381:	56                   	push   esi
c0028382:	53                   	push   ebx
c0028383:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028386:	85 db                	test   ebx,ebx
c0028388:	74 2a                	je     c00283b4 <__floatunsidf+0x36>
c002838a:	0f bd cb             	bsr    ecx,ebx
c002838d:	83 f1 1f             	xor    ecx,0x1f
c0028390:	d3 e3                	shl    ebx,cl
c0028392:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028398:	b8 1e 04 00 00       	mov    eax,0x41e
c002839d:	29 c8                	sub    eax,ecx
c002839f:	c1 e0 14             	shl    eax,0x14
c00283a2:	89 c1                	mov    ecx,eax
c00283a4:	89 de                	mov    esi,ebx
c00283a6:	c1 ee 0b             	shr    esi,0xb
c00283a9:	09 f1                	or     ecx,esi
c00283ab:	89 ca                	mov    edx,ecx
c00283ad:	c1 e3 15             	shl    ebx,0x15
c00283b0:	89 d8                	mov    eax,ebx
c00283b2:	eb 04                	jmp    c00283b8 <__floatunsidf+0x3a>
c00283b4:	31 c0                	xor    eax,eax
c00283b6:	31 d2                	xor    edx,edx
c00283b8:	5b                   	pop    ebx
c00283b9:	5e                   	pop    esi
c00283ba:	5d                   	pop    ebp
c00283bb:	c3                   	ret    

c00283bc <__fixdfsi>:
c00283bc:	55                   	push   ebp
c00283bd:	89 e5                	mov    ebp,esp
c00283bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283c2:	89 d1                	mov    ecx,edx
c00283c4:	c1 e1 0b             	shl    ecx,0xb
c00283c7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283d0:	c1 e8 15             	shr    eax,0x15
c00283d3:	09 c1                	or     ecx,eax
c00283d5:	c1 fa 14             	sar    edx,0x14
c00283d8:	78 1f                	js     c00283f9 <__fixdfsi+0x3d>
c00283da:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283e0:	31 c0                	xor    eax,eax
c00283e2:	83 fa 1e             	cmp    edx,0x1e
c00283e5:	77 40                	ja     c0028427 <__fixdfsi+0x6b>
c00283e7:	89 c8                	mov    eax,ecx
c00283e9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ee:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283f3:	29 d1                	sub    ecx,edx
c00283f5:	d3 e8                	shr    eax,cl
c00283f7:	eb 2e                	jmp    c0028427 <__fixdfsi+0x6b>
c00283f9:	31 c0                	xor    eax,eax
c00283fb:	81 c2 01 04 00 00    	add    edx,0x401
c0028401:	78 24                	js     c0028427 <__fixdfsi+0x6b>
c0028403:	83 fa 1e             	cmp    edx,0x1e
c0028406:	7e 09                	jle    c0028411 <__fixdfsi+0x55>
c0028408:	83 fa 1f             	cmp    edx,0x1f
c002840b:	75 18                	jne    c0028425 <__fixdfsi+0x69>
c002840d:	85 c9                	test   ecx,ecx
c002840f:	75 14                	jne    c0028425 <__fixdfsi+0x69>
c0028411:	89 c8                	mov    eax,ecx
c0028413:	0d 00 00 00 80       	or     eax,0x80000000
c0028418:	b9 1f 00 00 00       	mov    ecx,0x1f
c002841d:	29 d1                	sub    ecx,edx
c002841f:	d3 e8                	shr    eax,cl
c0028421:	f7 d8                	neg    eax
c0028423:	eb 02                	jmp    c0028427 <__fixdfsi+0x6b>
c0028425:	31 c0                	xor    eax,eax
c0028427:	5d                   	pop    ebp
c0028428:	c3                   	ret    

c0028429 <__fixunsdfsi>:
c0028429:	55                   	push   ebp
c002842a:	89 e5                	mov    ebp,esp
c002842c:	53                   	push   ebx
c002842d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028430:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028433:	89 d3                	mov    ebx,edx
c0028435:	c1 fb 14             	sar    ebx,0x14
c0028438:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002843e:	31 c0                	xor    eax,eax
c0028440:	83 fb 1f             	cmp    ebx,0x1f
c0028443:	77 1d                	ja     c0028462 <__fixunsdfsi+0x39>
c0028445:	89 d0                	mov    eax,edx
c0028447:	c1 e0 0b             	shl    eax,0xb
c002844a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002844f:	c1 e9 15             	shr    ecx,0x15
c0028452:	09 c8                	or     eax,ecx
c0028454:	0d 00 00 00 80       	or     eax,0x80000000
c0028459:	b9 1f 00 00 00       	mov    ecx,0x1f
c002845e:	29 d9                	sub    ecx,ebx
c0028460:	d3 e8                	shr    eax,cl
c0028462:	5b                   	pop    ebx
c0028463:	5d                   	pop    ebp
c0028464:	c3                   	ret    

c0028465 <__cmpdf2>:
c0028465:	55                   	push   ebp
c0028466:	89 e5                	mov    ebp,esp
c0028468:	57                   	push   edi
c0028469:	56                   	push   esi
c002846a:	53                   	push   ebx
c002846b:	83 ec 0c             	sub    esp,0xc
c002846e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028471:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028474:	89 ca                	mov    edx,ecx
c0028476:	c1 ea 14             	shr    edx,0x14
c0028479:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002847f:	89 cb                	mov    ebx,ecx
c0028481:	c1 fb 1f             	sar    ebx,0x1f
c0028484:	31 da                	xor    edx,ebx
c0028486:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028489:	89 df                	mov    edi,ebx
c002848b:	c1 e7 0b             	shl    edi,0xb
c002848e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028491:	c1 e1 0b             	shl    ecx,0xb
c0028494:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002849a:	c1 eb 15             	shr    ebx,0x15
c002849d:	09 d9                	or     ecx,ebx
c002849f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00284a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284a5:	89 ce                	mov    esi,ecx
c00284a7:	c1 ee 14             	shr    esi,0x14
c00284aa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00284b0:	89 cb                	mov    ebx,ecx
c00284b2:	c1 fb 1f             	sar    ebx,0x1f
c00284b5:	31 de                	xor    esi,ebx
c00284b7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00284ba:	89 df                	mov    edi,ebx
c00284bc:	c1 e7 0b             	shl    edi,0xb
c00284bf:	c1 e1 0b             	shl    ecx,0xb
c00284c2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284c8:	c1 eb 15             	shr    ebx,0x15
c00284cb:	09 d9                	or     ecx,ebx
c00284cd:	89 d3                	mov    ebx,edx
c00284cf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284d5:	43                   	inc    ebx
c00284d6:	83 fb 01             	cmp    ebx,0x1
c00284d9:	77 08                	ja     c00284e3 <__cmpdf2+0x7e>
c00284db:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284de:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284e1:	75 68                	jne    c002854b <__cmpdf2+0xe6>
c00284e3:	89 f3                	mov    ebx,esi
c00284e5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284eb:	43                   	inc    ebx
c00284ec:	83 fb 01             	cmp    ebx,0x1
c00284ef:	77 06                	ja     c00284f7 <__cmpdf2+0x92>
c00284f1:	89 fb                	mov    ebx,edi
c00284f3:	09 cb                	or     ebx,ecx
c00284f5:	75 54                	jne    c002854b <__cmpdf2+0xe6>
c00284f7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284fa:	09 f8                	or     eax,edi
c00284fc:	09 c8                	or     eax,ecx
c00284fe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028501:	75 12                	jne    c0028515 <__cmpdf2+0xb0>
c0028503:	8d 42 01             	lea    eax,[edx+0x1]
c0028506:	83 f8 01             	cmp    eax,0x1
c0028509:	77 0a                	ja     c0028515 <__cmpdf2+0xb0>
c002850b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002850e:	31 c0                	xor    eax,eax
c0028510:	83 fb 01             	cmp    ebx,0x1
c0028513:	76 36                	jbe    c002854b <__cmpdf2+0xe6>
c0028515:	b8 01 00 00 00       	mov    eax,0x1
c002851a:	39 f2                	cmp    edx,esi
c002851c:	7f 2d                	jg     c002854b <__cmpdf2+0xe6>
c002851e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028523:	7c 26                	jl     c002854b <__cmpdf2+0xe6>
c0028525:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028528:	77 07                	ja     c0028531 <__cmpdf2+0xcc>
c002852a:	72 16                	jb     c0028542 <__cmpdf2+0xdd>
c002852c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002852f:	76 0a                	jbe    c002853b <__cmpdf2+0xd6>
c0028531:	89 d0                	mov    eax,edx
c0028533:	c1 f8 1f             	sar    eax,0x1f
c0028536:	83 c8 01             	or     eax,0x1
c0028539:	eb 10                	jmp    c002854b <__cmpdf2+0xe6>
c002853b:	b8 00 00 00 00       	mov    eax,0x0
c0028540:	73 09                	jae    c002854b <__cmpdf2+0xe6>
c0028542:	89 d0                	mov    eax,edx
c0028544:	c1 f8 1f             	sar    eax,0x1f
c0028547:	83 e0 02             	and    eax,0x2
c002854a:	48                   	dec    eax
c002854b:	83 c4 0c             	add    esp,0xc
c002854e:	5b                   	pop    ebx
c002854f:	5e                   	pop    esi
c0028550:	5f                   	pop    edi
c0028551:	5d                   	pop    ebp
c0028552:	c3                   	ret    

c0028553 <__eqdf2>:
c0028553:	55                   	push   ebp
c0028554:	89 e5                	mov    ebp,esp
c0028556:	50                   	push   eax
c0028557:	6a 01                	push   0x1
c0028559:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002855c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002855f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028562:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028565:	e8 fb fe ff ff       	call   c0028465 <__cmpdf2>
c002856a:	83 c4 18             	add    esp,0x18
c002856d:	c9                   	leave  
c002856e:	c3                   	ret    

c002856f <__nedf2>:
c002856f:	eb e2                	jmp    c0028553 <__eqdf2>

c0028571 <__gtdf2>:
c0028571:	55                   	push   ebp
c0028572:	89 e5                	mov    ebp,esp
c0028574:	50                   	push   eax
c0028575:	6a ff                	push   0xffffffff
c0028577:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002857a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002857d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028580:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028583:	e8 dd fe ff ff       	call   c0028465 <__cmpdf2>
c0028588:	83 c4 18             	add    esp,0x18
c002858b:	c9                   	leave  
c002858c:	c3                   	ret    

c002858d <__gedf2>:
c002858d:	eb e2                	jmp    c0028571 <__gtdf2>

c002858f <__ltdf2>:
c002858f:	eb c2                	jmp    c0028553 <__eqdf2>

c0028591 <__ledf2>:
c0028591:	eb c0                	jmp    c0028553 <__eqdf2>

c0028593 <__truncdfsf2>:
c0028593:	55                   	push   ebp
c0028594:	89 e5                	mov    ebp,esp
c0028596:	57                   	push   edi
c0028597:	56                   	push   esi
c0028598:	53                   	push   ebx
c0028599:	83 ec 0c             	sub    esp,0xc
c002859c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002859f:	89 d1                	mov    ecx,edx
c00285a1:	c1 f9 14             	sar    ecx,0x14
c00285a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00285a7:	89 df                	mov    edi,ebx
c00285a9:	c1 e7 0b             	shl    edi,0xb
c00285ac:	89 d0                	mov    eax,edx
c00285ae:	c1 e0 0b             	shl    eax,0xb
c00285b1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00285b6:	c1 eb 15             	shr    ebx,0x15
c00285b9:	09 d8                	or     eax,ebx
c00285bb:	89 cb                	mov    ebx,ecx
c00285bd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285c3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285c9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285cf:	0f 86 9e 00 00 00    	jbe    c0028673 <__truncdfsf2+0xe0>
c00285d5:	85 db                	test   ebx,ebx
c00285d7:	75 0a                	jne    c00285e3 <__truncdfsf2+0x50>
c00285d9:	c1 fa 17             	sar    edx,0x17
c00285dc:	30 d2                	xor    dl,dl
c00285de:	e9 84 00 00 00       	jmp    c0028667 <__truncdfsf2+0xd4>
c00285e3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285e9:	83 fe 83             	cmp    esi,0xffffff83
c00285ec:	7d 4b                	jge    c0028639 <__truncdfsf2+0xa6>
c00285ee:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285f3:	29 f1                	sub    ecx,esi
c00285f5:	83 f9 1f             	cmp    ecx,0x1f
c00285f8:	7f 6b                	jg     c0028665 <__truncdfsf2+0xd2>
c00285fa:	0d 00 00 00 80       	or     eax,0x80000000
c00285ff:	89 c3                	mov    ebx,eax
c0028601:	d3 eb                	shr    ebx,cl
c0028603:	be 01 00 00 00       	mov    esi,0x1
c0028608:	d3 e6                	shl    esi,cl
c002860a:	4e                   	dec    esi
c002860b:	21 f0                	and    eax,esi
c002860d:	09 f8                	or     eax,edi
c002860f:	0f 95 c0             	setne  al
c0028612:	0f b6 c0             	movzx  eax,al
c0028615:	09 c3                	or     ebx,eax
c0028617:	89 d9                	mov    ecx,ebx
c0028619:	c1 e9 08             	shr    ecx,0x8
c002861c:	f6 c3 7f             	test   bl,0x7f
c002861f:	0f 95 c0             	setne  al
c0028622:	09 c8                	or     eax,ecx
c0028624:	83 e0 01             	and    eax,0x1
c0028627:	c1 eb 07             	shr    ebx,0x7
c002862a:	21 c3                	and    ebx,eax
c002862c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028632:	09 d1                	or     ecx,edx
c0028634:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028637:	eb 76                	jmp    c00286af <__truncdfsf2+0x11c>
c0028639:	83 c6 80             	add    esi,0xffffff80
c002863c:	7e 1d                	jle    c002865b <__truncdfsf2+0xc8>
c002863e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028644:	75 0b                	jne    c0028651 <__truncdfsf2+0xbe>
c0028646:	09 f8                	or     eax,edi
c0028648:	74 09                	je     c0028653 <__truncdfsf2+0xc0>
c002864a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002864f:	eb 02                	jmp    c0028653 <__truncdfsf2+0xc0>
c0028651:	31 c0                	xor    eax,eax
c0028653:	c1 fa 17             	sar    edx,0x17
c0028656:	80 ca ff             	or     dl,0xff
c0028659:	eb 0e                	jmp    c0028669 <__truncdfsf2+0xd6>
c002865b:	c1 fa 1f             	sar    edx,0x1f
c002865e:	c1 e2 08             	shl    edx,0x8
c0028661:	09 ca                	or     edx,ecx
c0028663:	eb 04                	jmp    c0028669 <__truncdfsf2+0xd6>
c0028665:	31 d2                	xor    edx,edx
c0028667:	31 c0                	xor    eax,eax
c0028669:	c1 e2 17             	shl    edx,0x17
c002866c:	c1 e8 08             	shr    eax,0x8
c002866f:	09 d0                	or     eax,edx
c0028671:	eb 3c                	jmp    c00286af <__truncdfsf2+0x11c>
c0028673:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028679:	89 ca                	mov    edx,ecx
c002867b:	c1 fa 0b             	sar    edx,0xb
c002867e:	c1 e2 08             	shl    edx,0x8
c0028681:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028684:	31 db                	xor    ebx,ebx
c0028686:	85 ff                	test   edi,edi
c0028688:	0f 95 c3             	setne  bl
c002868b:	09 d8                	or     eax,ebx
c002868d:	89 c3                	mov    ebx,eax
c002868f:	c1 eb 08             	shr    ebx,0x8
c0028692:	a8 7f                	test   al,0x7f
c0028694:	0f 95 c2             	setne  dl
c0028697:	89 d6                	mov    esi,edx
c0028699:	09 de                	or     esi,ebx
c002869b:	83 e6 01             	and    esi,0x1
c002869e:	c1 e8 07             	shr    eax,0x7
c00286a1:	21 f0                	and    eax,esi
c00286a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286a6:	09 ca                	or     edx,ecx
c00286a8:	c1 e2 17             	shl    edx,0x17
c00286ab:	09 da                	or     edx,ebx
c00286ad:	01 d0                	add    eax,edx
c00286af:	83 c4 0c             	add    esp,0xc
c00286b2:	5b                   	pop    ebx
c00286b3:	5e                   	pop    esi
c00286b4:	5f                   	pop    edi
c00286b5:	5d                   	pop    ebp
c00286b6:	c3                   	ret    

c00286b7 <__extendsfdf2>:
c00286b7:	55                   	push   ebp
c00286b8:	89 e5                	mov    ebp,esp
c00286ba:	57                   	push   edi
c00286bb:	56                   	push   esi
c00286bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00286bf:	89 d1                	mov    ecx,edx
c00286c1:	c1 f9 17             	sar    ecx,0x17
c00286c4:	c1 e2 08             	shl    edx,0x8
c00286c7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286cd:	89 c8                	mov    eax,ecx
c00286cf:	80 e4 f8             	and    ah,0xf8
c00286d2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286d5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286db:	75 27                	jne    c0028704 <__extendsfdf2+0x4d>
c00286dd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286e3:	75 18                	jne    c00286fd <__extendsfdf2+0x46>
c00286e5:	85 d2                	test   edx,edx
c00286e7:	74 20                	je     c0028709 <__extendsfdf2+0x52>
c00286e9:	41                   	inc    ecx
c00286ea:	01 d2                	add    edx,edx
c00286ec:	79 fb                	jns    c00286e9 <__extendsfdf2+0x32>
c00286ee:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286f4:	29 c8                	sub    eax,ecx
c00286f6:	05 81 03 00 00       	add    eax,0x381
c00286fb:	eb 0c                	jmp    c0028709 <__extendsfdf2+0x52>
c00286fd:	05 00 07 00 00       	add    eax,0x700
c0028702:	eb 05                	jmp    c0028709 <__extendsfdf2+0x52>
c0028704:	05 80 03 00 00       	add    eax,0x380
c0028709:	c1 e0 14             	shl    eax,0x14
c002870c:	89 c1                	mov    ecx,eax
c002870e:	89 d0                	mov    eax,edx
c0028710:	c1 e8 0b             	shr    eax,0xb
c0028713:	09 c1                	or     ecx,eax
c0028715:	c1 e2 15             	shl    edx,0x15
c0028718:	89 d0                	mov    eax,edx
c002871a:	89 ca                	mov    edx,ecx
c002871c:	5e                   	pop    esi
c002871d:	5f                   	pop    edi
c002871e:	5d                   	pop    ebp
c002871f:	c3                   	ret    

c0028720 <fabs>:
c0028720:	83 ec 0c             	sub    esp,0xc
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	89 04 24             	mov    DWORD PTR [esp],eax
c002872a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002872e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028737:	dd 04 24             	fld    QWORD PTR [esp]
c002873a:	83 c4 0c             	add    esp,0xc
c002873d:	c3                   	ret    
c002873e:	66 90                	xchg   ax,ax

c0028740 <lrint>:
c0028740:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028744:	83 ec 04             	sub    esp,0x4
c0028747:	db 1c 24             	fistp  DWORD PTR [esp]
c002874a:	58                   	pop    eax
c002874b:	c3                   	ret    

c002874c <lrintf>:
c002874c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028750:	83 ec 04             	sub    esp,0x4
c0028753:	db 1c 24             	fistp  DWORD PTR [esp]
c0028756:	58                   	pop    eax
c0028757:	c3                   	ret    

Disassembly of section .init:

c0028758 <_init>:
c0028758:	55                   	push   ebp
c0028759:	89 e5                	mov    ebp,esp
c002875b:	e8 b8 79 fd ff       	call   c0000118 <frame_dummy>
c0028760:	e8 63 e0 ff ff       	call   c00267c8 <__do_global_ctors_aux>
c0028765:	5d                   	pop    ebp
c0028766:	c3                   	ret    

Disassembly of section .fini:

c0028767 <_fini>:
c0028767:	55                   	push   ebp
c0028768:	89 e5                	mov    ebp,esp
c002876a:	e8 39 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002876f:	5d                   	pop    ebp
c0028770:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028772 <Computer::~Computer()>:
c0028772:	83 ec 0c             	sub    esp,0xc
c0028775:	ba a8 a2 02 c0       	mov    edx,0xc002a2a8
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	89 10                	mov    DWORD PTR [eax],edx
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	83 ec 0c             	sub    esp,0xc
c0028787:	50                   	push   eax
c0028788:	e8 a3 bb fe ff       	call   c0014330 <Device::~Device()>
c002878d:	83 c4 10             	add    esp,0x10
c0028790:	90                   	nop
c0028791:	83 c4 0c             	add    esp,0xc
c0028794:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028796 <Computer::~Computer()>:
c0028796:	83 ec 0c             	sub    esp,0xc
c0028799:	83 ec 0c             	sub    esp,0xc
c002879c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287a0:	e8 cd ff ff ff       	call   c0028772 <Computer::~Computer()>
c00287a5:	83 c4 10             	add    esp,0x10
c00287a8:	83 ec 08             	sub    esp,0x8
c00287ab:	68 ec 01 00 00       	push   0x1ec
c00287b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287b4:	e8 9f a7 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00287b9:	83 c4 10             	add    esp,0x10
c00287bc:	83 c4 0c             	add    esp,0xc
c00287bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287c0 <idleCommon()>:
c00287c0:	83 ec 0c             	sub    esp,0xc
c00287c3:	e8 12 57 ff ff       	call   c001deda <lockScheduler()>
c00287c8:	e8 49 5a ff ff       	call   c001e216 <schedule()>
c00287cd:	83 c4 0c             	add    esp,0xc
c00287d0:	e9 07 57 ff ff       	jmp    c001dedc <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287d6 <LinkedList<UnixFile>::~LinkedList()>:
c00287d6:	90                   	nop
c00287d7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287d8 <LinkedList<UnixFile>::LinkedList()>:
c00287d8:	83 ec 0c             	sub    esp,0xc
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028814:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002881b:	83 ec 0c             	sub    esp,0xc
c002881e:	68 66 a5 02 c0       	push   0xc002a566
c0028823:	e8 10 a8 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0028828:	83 c4 10             	add    esp,0x10
c002882b:	90                   	nop
c002882c:	83 c4 0c             	add    esp,0xc
c002882f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028830 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028838:	75 10                	jne    c002884a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002883a:	83 ec 0c             	sub    esp,0xc
c002883d:	68 80 a5 02 c0       	push   0xc002a580
c0028842:	e8 9e 1e ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	85 c0                	test   eax,eax
c0028852:	74 34                	je     c0028888 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028858:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885b:	85 c0                	test   eax,eax
c002885d:	74 29                	je     c0028888 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002885f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028863:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028866:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002886a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002886d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028871:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028875:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028886:	eb 65                	jmp    c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888c:	8b 00                	mov    eax,DWORD PTR [eax]
c002888e:	85 c0                	test   eax,eax
c0028890:	75 4b                	jne    c00288dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	85 c0                	test   eax,eax
c002889b:	75 40                	jne    c00288dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288a5:	89 10                	mov    DWORD PTR [eax],edx
c00288a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c7:	85 c0                	test   eax,eax
c00288c9:	74 22                	je     c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288cb:	83 ec 0c             	sub    esp,0xc
c00288ce:	68 a2 a5 02 c0       	push   0xc002a5a2
c00288d3:	e8 0d 1e ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c00288d8:	83 c4 10             	add    esp,0x10
c00288db:	eb 10                	jmp    c00288ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288dd:	83 ec 0c             	sub    esp,0xc
c00288e0:	68 ac a5 02 c0       	push   0xc002a5ac
c00288e5:	e8 fb 1d ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c00288ea:	83 c4 10             	add    esp,0x10
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f4:	8d 50 01             	lea    edx,[eax+0x1]
c00288f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288fe:	90                   	nop
c00288ff:	83 c4 0c             	add    esp,0xc
c0028902:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028904 <LinkedList<UnixFile>::getFirstElement()>:
c0028904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028908:	8b 00                	mov    eax,DWORD PTR [eax]
c002890a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002890c <LinkedList<UnixFile>::removeFirst()>:
c002890c:	83 ec 0c             	sub    esp,0xc
c002890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028913:	8b 00                	mov    eax,DWORD PTR [eax]
c0028915:	85 c0                	test   eax,eax
c0028917:	75 12                	jne    c002892b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	68 b8 a5 02 c0       	push   0xc002a5b8
c0028921:	e8 bf 1d ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028926:	83 c4 10             	add    esp,0x10
c0028929:	eb 7e                	jmp    c00289a9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002892b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028932:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028935:	85 c0                	test   eax,eax
c0028937:	74 10                	je     c0028949 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028939:	83 ec 0c             	sub    esp,0xc
c002893c:	68 03 a6 02 c0       	push   0xc002a603
c0028941:	e8 9f 1d ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028946:	83 c4 10             	add    esp,0x10
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	8b 00                	mov    eax,DWORD PTR [eax]
c002894f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028952:	85 c0                	test   eax,eax
c0028954:	75 33                	jne    c0028989 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028964:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028972:	83 f8 01             	cmp    eax,0x1
c0028975:	74 21                	je     c0028998 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028977:	83 ec 0c             	sub    esp,0xc
c002897a:	68 dc a5 02 c0       	push   0xc002a5dc
c002897f:	e8 61 1d ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028984:	83 c4 10             	add    esp,0x10
c0028987:	eb 0f                	jmp    c0028998 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898d:	8b 00                	mov    eax,DWORD PTR [eax]
c002898f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	89 10                	mov    DWORD PTR [eax],edx
c0028998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002899f:	8d 50 ff             	lea    edx,[eax-0x1]
c00289a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289a9:	83 c4 0c             	add    esp,0xc
c00289ac:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00289ae <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00289ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00289b6 <DriverlessDevice::~DriverlessDevice()>:
c00289b6:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c00289bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289bf:	89 10                	mov    DWORD PTR [eax],edx
c00289c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c5:	50                   	push   eax
c00289c6:	e8 65 b9 fe ff       	call   c0014330 <Device::~Device()>
c00289cb:	83 c4 04             	add    esp,0x4
c00289ce:	90                   	nop
c00289cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289d0 <DriverlessDevice::~DriverlessDevice()>:
c00289d0:	83 ec 0c             	sub    esp,0xc
c00289d3:	83 ec 0c             	sub    esp,0xc
c00289d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289da:	e8 d7 ff ff ff       	call   c00289b6 <DriverlessDevice::~DriverlessDevice()>
c00289df:	83 c4 10             	add    esp,0x10
c00289e2:	83 ec 08             	sub    esp,0x8
c00289e5:	68 58 01 00 00       	push   0x158
c00289ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ee:	e8 65 a5 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00289f3:	83 c4 10             	add    esp,0x10
c00289f6:	83 c4 0c             	add    esp,0xc
c00289f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289fa <LinkedList<Device>::addElement(Device*)>:
c00289fa:	83 ec 0c             	sub    esp,0xc
c00289fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a02:	75 10                	jne    c0028a14 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028a04:	83 ec 0c             	sub    esp,0xc
c0028a07:	68 80 a5 02 c0       	push   0xc002a580
c0028a0c:	e8 d4 1c ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028a11:	83 c4 10             	add    esp,0x10
c0028a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1a:	85 c0                	test   eax,eax
c0028a1c:	74 3a                	je     c0028a58 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a25:	85 c0                	test   eax,eax
c0028a27:	74 2f                	je     c0028a58 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a34:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a42:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a4c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a56:	eb 68                	jmp    c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5e:	85 c0                	test   eax,eax
c0028a60:	75 4e                	jne    c0028ab0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	85 c0                	test   eax,eax
c0028a6b:	75 43                	jne    c0028ab0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a75:	89 10                	mov    DWORD PTR [eax],edx
c0028a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a89:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a9a:	85 c0                	test   eax,eax
c0028a9c:	74 22                	je     c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a9e:	83 ec 0c             	sub    esp,0xc
c0028aa1:	68 a2 a5 02 c0       	push   0xc002a5a2
c0028aa6:	e8 3a 1c ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028aab:	83 c4 10             	add    esp,0x10
c0028aae:	eb 10                	jmp    c0028ac0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	68 ac a5 02 c0       	push   0xc002a5ac
c0028ab8:	e8 28 1c ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ac7:	8d 50 01             	lea    edx,[eax+0x1]
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ad1:	90                   	nop
c0028ad2:	83 c4 0c             	add    esp,0xc
c0028ad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ad6 <LinkedList<Device>::LinkedList()>:
c0028ad6:	83 ec 0c             	sub    esp,0xc
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b12:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b19:	83 ec 0c             	sub    esp,0xc
c0028b1c:	68 66 a5 02 c0       	push   0xc002a566
c0028b21:	e8 12 a5 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0028b26:	83 c4 10             	add    esp,0x10
c0028b29:	90                   	nop
c0028b2a:	83 c4 0c             	add    esp,0xc
c0028b2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3c:	85 c0                	test   eax,eax
c0028b3e:	75 0e                	jne    c0028b4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b47:	85 c0                	test   eax,eax
c0028b49:	75 03                	jne    c0028b4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b4b:	b0 01                	mov    al,0x1
c0028b4d:	c3                   	ret    
c0028b4e:	b0 00                	mov    al,0x0
c0028b50:	90                   	nop
c0028b51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b52:	83 ec 0c             	sub    esp,0xc
c0028b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b5b:	85 c0                	test   eax,eax
c0028b5d:	75 15                	jne    c0028b74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b5f:	83 ec 0c             	sub    esp,0xc
c0028b62:	68 b8 a5 02 c0       	push   0xc002a5b8
c0028b67:	e8 79 1b ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028b6c:	83 c4 10             	add    esp,0x10
c0028b6f:	e9 88 00 00 00       	jmp    c0028bfc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b7e:	85 c0                	test   eax,eax
c0028b80:	0f 95 c0             	setne  al
c0028b83:	84 c0                	test   al,al
c0028b85:	74 10                	je     c0028b97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b87:	83 ec 0c             	sub    esp,0xc
c0028b8a:	68 03 a6 02 c0       	push   0xc002a603
c0028b8f:	e8 51 1b ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028b94:	83 c4 10             	add    esp,0x10
c0028b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ba0:	85 c0                	test   eax,eax
c0028ba2:	0f 94 c0             	sete   al
c0028ba5:	84 c0                	test   al,al
c0028ba7:	74 33                	je     c0028bdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc5:	83 f8 01             	cmp    eax,0x1
c0028bc8:	74 21                	je     c0028beb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bca:	83 ec 0c             	sub    esp,0xc
c0028bcd:	68 dc a5 02 c0       	push   0xc002a5dc
c0028bd2:	e8 0e 1b ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	eb 0f                	jmp    c0028beb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028be2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be9:	89 10                	mov    DWORD PTR [eax],edx
c0028beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bfc:	83 c4 0c             	add    esp,0xc
c0028bff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028c00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028c00:	83 ec 0c             	sub    esp,0xc
c0028c03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028c08:	75 10                	jne    c0028c1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028c0a:	83 ec 0c             	sub    esp,0xc
c0028c0d:	68 80 a5 02 c0       	push   0xc002a580
c0028c12:	e8 ce 1a ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c20:	85 c0                	test   eax,eax
c0028c22:	74 34                	je     c0028c58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c2b:	85 c0                	test   eax,eax
c0028c2d:	74 29                	je     c0028c58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c56:	eb 65                	jmp    c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c5e:	85 c0                	test   eax,eax
c0028c60:	75 4b                	jne    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c69:	85 c0                	test   eax,eax
c0028c6b:	75 40                	jne    c0028cad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c75:	89 10                	mov    DWORD PTR [eax],edx
c0028c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c97:	85 c0                	test   eax,eax
c0028c99:	74 22                	je     c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c9b:	83 ec 0c             	sub    esp,0xc
c0028c9e:	68 a2 a5 02 c0       	push   0xc002a5a2
c0028ca3:	e8 3d 1a ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028ca8:	83 c4 10             	add    esp,0x10
c0028cab:	eb 10                	jmp    c0028cbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028cad:	83 ec 0c             	sub    esp,0xc
c0028cb0:	68 ac a5 02 c0       	push   0xc002a5ac
c0028cb5:	e8 2b 1a ff ff       	call   c001a6e5 <Krnl::panic(char const*)>
c0028cba:	83 c4 10             	add    esp,0x10
c0028cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028cc4:	8d 50 01             	lea    edx,[eax+0x1]
c0028cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cce:	90                   	nop
c0028ccf:	83 c4 0c             	add    esp,0xc
c0028cd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cd4 <ACPI::~ACPI()>:
c0028cd4:	83 ec 0c             	sub    esp,0xc
c0028cd7:	ba 48 b7 02 c0       	mov    edx,0xc002b748
c0028cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce0:	89 10                	mov    DWORD PTR [eax],edx
c0028ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce6:	83 ec 0c             	sub    esp,0xc
c0028ce9:	50                   	push   eax
c0028cea:	e8 41 b6 fe ff       	call   c0014330 <Device::~Device()>
c0028cef:	83 c4 10             	add    esp,0x10
c0028cf2:	90                   	nop
c0028cf3:	83 c4 0c             	add    esp,0xc
c0028cf6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cf8 <ACPI::~ACPI()>:
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	83 ec 0c             	sub    esp,0xc
c0028cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d02:	e8 cd ff ff ff       	call   c0028cd4 <ACPI::~ACPI()>
c0028d07:	83 c4 10             	add    esp,0x10
c0028d0a:	83 ec 08             	sub    esp,0x8
c0028d0d:	68 68 12 00 00       	push   0x1268
c0028d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d16:	e8 3d a2 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028d1b:	83 c4 10             	add    esp,0x10
c0028d1e:	83 c4 0c             	add    esp,0xc
c0028d21:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d22 <CPU::~CPU()>:
c0028d22:	83 ec 0c             	sub    esp,0xc
c0028d25:	ba 38 bb 02 c0       	mov    edx,0xc002bb38
c0028d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2e:	89 10                	mov    DWORD PTR [eax],edx
c0028d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d34:	83 ec 0c             	sub    esp,0xc
c0028d37:	50                   	push   eax
c0028d38:	e8 f3 b5 fe ff       	call   c0014330 <Device::~Device()>
c0028d3d:	83 c4 10             	add    esp,0x10
c0028d40:	90                   	nop
c0028d41:	83 c4 0c             	add    esp,0xc
c0028d44:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d46 <CPU::~CPU()>:
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	83 ec 0c             	sub    esp,0xc
c0028d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d50:	e8 cd ff ff ff       	call   c0028d22 <CPU::~CPU()>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	83 ec 08             	sub    esp,0x8
c0028d5b:	68 98 11 00 00       	push   0x1198
c0028d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d64:	e8 ef a1 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	83 c4 0c             	add    esp,0xc
c0028d6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d70 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d70:	90                   	nop
c0028d71:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d72 <ThreadControlBlock::ThreadControlBlock()>:
c0028d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d76:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d81:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d97:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028da2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028daa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028dae:	90                   	nop
c0028daf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028db0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028db0:	83 ec 0c             	sub    esp,0xc
c0028db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028df3:	83 ec 0c             	sub    esp,0xc
c0028df6:	68 66 a5 02 c0       	push   0xc002a566
c0028dfb:	e8 38 a2 fe ff       	call   c0013038 <Dbg::kprintf(char const*, ...)>
c0028e00:	83 c4 10             	add    esp,0x10
c0028e03:	90                   	nop
c0028e04:	83 c4 0c             	add    esp,0xc
c0028e07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028e08 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028e0f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028e10 <Vm::_FPUState::_FPUState()>:
c0028e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028e14:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028e1b:	90                   	nop
c0028e1c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028e1e <PCI::~PCI()>:
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	ba c4 cb 02 c0       	mov    edx,0xc002cbc4
c0028e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2a:	89 10                	mov    DWORD PTR [eax],edx
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	50                   	push   eax
c0028e34:	e8 cf ae fe ff       	call   c0013d08 <Bus::~Bus()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	90                   	nop
c0028e3d:	83 c4 0c             	add    esp,0xc
c0028e40:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e42 <PCI::~PCI()>:
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	83 ec 0c             	sub    esp,0xc
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 cd ff ff ff       	call   c0028e1e <PCI::~PCI()>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 ec 08             	sub    esp,0x8
c0028e57:	68 58 01 00 00       	push   0x158
c0028e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e60:	e8 f3 a0 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	83 c4 0c             	add    esp,0xc
c0028e6b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e6c <IDE::~IDE()>:
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	ba 28 ce 02 c0       	mov    edx,0xc002ce28
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	89 10                	mov    DWORD PTR [eax],edx
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	50                   	push   eax
c0028e82:	e8 99 b9 fe ff       	call   c0014820 <HardDiskController::~HardDiskController()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	90                   	nop
c0028e8b:	83 c4 0c             	add    esp,0xc
c0028e8e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e90 <IDE::~IDE()>:
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	83 ec 0c             	sub    esp,0xc
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 cd ff ff ff       	call   c0028e6c <IDE::~IDE()>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 ec 08             	sub    esp,0x8
c0028ea5:	68 70 02 00 00       	push   0x270
c0028eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eae:	e8 a5 a0 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028eb3:	83 c4 10             	add    esp,0x10
c0028eb6:	83 c4 0c             	add    esp,0xc
c0028eb9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028eba <SATABus::~SATABus()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	ba 08 cf 02 c0       	mov    edx,0xc002cf08
c0028ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec6:	89 10                	mov    DWORD PTR [eax],edx
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	50                   	push   eax
c0028ed0:	e8 4b b9 fe ff       	call   c0014820 <HardDiskController::~HardDiskController()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	90                   	nop
c0028ed9:	83 c4 0c             	add    esp,0xc
c0028edc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ede <SATABus::~SATABus()>:
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	83 ec 0c             	sub    esp,0xc
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 cd ff ff ff       	call   c0028eba <SATABus::~SATABus()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 ec 08             	sub    esp,0x8
c0028ef3:	68 64 01 00 00       	push   0x164
c0028ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efc:	e8 57 a0 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	83 c4 0c             	add    esp,0xc
c0028f07:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028f08 <ATA::~ATA()>:
c0028f08:	83 ec 0c             	sub    esp,0xc
c0028f0b:	ba 54 cf 02 c0       	mov    edx,0xc002cf54
c0028f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f14:	89 10                	mov    DWORD PTR [eax],edx
c0028f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1a:	83 ec 0c             	sub    esp,0xc
c0028f1d:	50                   	push   eax
c0028f1e:	e8 ef b9 fe ff       	call   c0014912 <PhysicalDisk::~PhysicalDisk()>
c0028f23:	83 c4 10             	add    esp,0x10
c0028f26:	90                   	nop
c0028f27:	83 c4 0c             	add    esp,0xc
c0028f2a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f2c <ATA::~ATA()>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	83 ec 0c             	sub    esp,0xc
c0028f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f36:	e8 cd ff ff ff       	call   c0028f08 <ATA::~ATA()>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	83 ec 08             	sub    esp,0x8
c0028f41:	68 7c 01 00 00       	push   0x17c
c0028f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f4a:	e8 09 a0 fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028f4f:	83 c4 10             	add    esp,0x10
c0028f52:	83 c4 0c             	add    esp,0xc
c0028f55:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f56 <ATAPI::~ATAPI()>:
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	ba 8c cf 02 c0       	mov    edx,0xc002cf8c
c0028f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f62:	89 10                	mov    DWORD PTR [eax],edx
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	83 ec 0c             	sub    esp,0xc
c0028f6b:	50                   	push   eax
c0028f6c:	e8 a1 b9 fe ff       	call   c0014912 <PhysicalDisk::~PhysicalDisk()>
c0028f71:	83 c4 10             	add    esp,0x10
c0028f74:	90                   	nop
c0028f75:	83 c4 0c             	add    esp,0xc
c0028f78:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f7a <ATAPI::~ATAPI()>:
c0028f7a:	83 ec 0c             	sub    esp,0xc
c0028f7d:	83 ec 0c             	sub    esp,0xc
c0028f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f84:	e8 cd ff ff ff       	call   c0028f56 <ATAPI::~ATAPI()>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	83 ec 08             	sub    esp,0x8
c0028f8f:	68 80 01 00 00       	push   0x180
c0028f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f98:	e8 bb 9f fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028f9d:	83 c4 10             	add    esp,0x10
c0028fa0:	83 c4 0c             	add    esp,0xc
c0028fa3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028fa4 <SATA::~SATA()>:
c0028fa4:	83 ec 0c             	sub    esp,0xc
c0028fa7:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c0028fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb0:	89 10                	mov    DWORD PTR [eax],edx
c0028fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	50                   	push   eax
c0028fba:	e8 53 b9 fe ff       	call   c0014912 <PhysicalDisk::~PhysicalDisk()>
c0028fbf:	83 c4 10             	add    esp,0x10
c0028fc2:	90                   	nop
c0028fc3:	83 c4 0c             	add    esp,0xc
c0028fc6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fc8 <SATA::~SATA()>:
c0028fc8:	83 ec 0c             	sub    esp,0xc
c0028fcb:	83 ec 0c             	sub    esp,0xc
c0028fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd2:	e8 cd ff ff ff       	call   c0028fa4 <SATA::~SATA()>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	83 ec 08             	sub    esp,0x8
c0028fdd:	68 7c 01 00 00       	push   0x17c
c0028fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe6:	e8 6d 9f fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0028feb:	83 c4 10             	add    esp,0x10
c0028fee:	83 c4 0c             	add    esp,0xc
c0028ff1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028ff2 <SATAPI::~SATAPI()>:
c0028ff2:	83 ec 0c             	sub    esp,0xc
c0028ff5:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0028ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffe:	89 10                	mov    DWORD PTR [eax],edx
c0029000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029004:	83 ec 0c             	sub    esp,0xc
c0029007:	50                   	push   eax
c0029008:	e8 05 b9 fe ff       	call   c0014912 <PhysicalDisk::~PhysicalDisk()>
c002900d:	83 c4 10             	add    esp,0x10
c0029010:	90                   	nop
c0029011:	83 c4 0c             	add    esp,0xc
c0029014:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029016 <SATAPI::~SATAPI()>:
c0029016:	83 ec 0c             	sub    esp,0xc
c0029019:	83 ec 0c             	sub    esp,0xc
c002901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029020:	e8 cd ff ff ff       	call   c0028ff2 <SATAPI::~SATAPI()>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	83 ec 08             	sub    esp,0x8
c002902b:	68 80 01 00 00       	push   0x180
c0029030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029034:	e8 1f 9f fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0029039:	83 c4 10             	add    esp,0x10
c002903c:	83 c4 0c             	add    esp,0xc
c002903f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029040 <AVX::~AVX()>:
c0029040:	83 ec 0c             	sub    esp,0xc
c0029043:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c0029048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904c:	89 10                	mov    DWORD PTR [eax],edx
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	83 ec 0c             	sub    esp,0xc
c0029055:	50                   	push   eax
c0029056:	e8 3b b9 fe ff       	call   c0014996 <FPU::~FPU()>
c002905b:	83 c4 10             	add    esp,0x10
c002905e:	90                   	nop
c002905f:	83 c4 0c             	add    esp,0xc
c0029062:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029064 <AVX::~AVX()>:
c0029064:	83 ec 0c             	sub    esp,0xc
c0029067:	83 ec 0c             	sub    esp,0xc
c002906a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906e:	e8 cd ff ff ff       	call   c0029040 <AVX::~AVX()>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	83 ec 08             	sub    esp,0x8
c0029079:	68 58 01 00 00       	push   0x158
c002907e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029082:	e8 d1 9e fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0029087:	83 c4 10             	add    esp,0x10
c002908a:	83 c4 0c             	add    esp,0xc
c002908d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002908e <MMX::~MMX()>:
c002908e:	83 ec 0c             	sub    esp,0xc
c0029091:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c0029096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909a:	89 10                	mov    DWORD PTR [eax],edx
c002909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a0:	83 ec 0c             	sub    esp,0xc
c00290a3:	50                   	push   eax
c00290a4:	e8 ed b8 fe ff       	call   c0014996 <FPU::~FPU()>
c00290a9:	83 c4 10             	add    esp,0x10
c00290ac:	90                   	nop
c00290ad:	83 c4 0c             	add    esp,0xc
c00290b0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00290b2 <MMX::~MMX()>:
c00290b2:	83 ec 0c             	sub    esp,0xc
c00290b5:	83 ec 0c             	sub    esp,0xc
c00290b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290bc:	e8 cd ff ff ff       	call   c002908e <MMX::~MMX()>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	83 ec 08             	sub    esp,0x8
c00290c7:	68 58 01 00 00       	push   0x158
c00290cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d0:	e8 83 9e fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00290d5:	83 c4 10             	add    esp,0x10
c00290d8:	83 c4 0c             	add    esp,0xc
c00290db:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290dc <SSE::~SSE()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	89 10                	mov    DWORD PTR [eax],edx
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	83 ec 0c             	sub    esp,0xc
c00290f1:	50                   	push   eax
c00290f2:	e8 9f b8 fe ff       	call   c0014996 <FPU::~FPU()>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	90                   	nop
c00290fb:	83 c4 0c             	add    esp,0xc
c00290fe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029100 <SSE::~SSE()>:
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	83 ec 0c             	sub    esp,0xc
c0029106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910a:	e8 cd ff ff ff       	call   c00290dc <SSE::~SSE()>
c002910f:	83 c4 10             	add    esp,0x10
c0029112:	83 ec 08             	sub    esp,0x8
c0029115:	68 58 01 00 00       	push   0x158
c002911a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911e:	e8 35 9e fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0029123:	83 c4 10             	add    esp,0x10
c0029126:	83 c4 0c             	add    esp,0xc
c0029129:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002912a <x87::~x87()>:
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c0029132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029136:	89 10                	mov    DWORD PTR [eax],edx
c0029138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913c:	83 ec 0c             	sub    esp,0xc
c002913f:	50                   	push   eax
c0029140:	e8 51 b8 fe ff       	call   c0014996 <FPU::~FPU()>
c0029145:	83 c4 10             	add    esp,0x10
c0029148:	90                   	nop
c0029149:	83 c4 0c             	add    esp,0xc
c002914c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002914e <x87::~x87()>:
c002914e:	83 ec 0c             	sub    esp,0xc
c0029151:	83 ec 0c             	sub    esp,0xc
c0029154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029158:	e8 cd ff ff ff       	call   c002912a <x87::~x87()>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	83 ec 08             	sub    esp,0x8
c0029163:	68 58 01 00 00       	push   0x158
c0029168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916c:	e8 e7 9d fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c0029171:	83 c4 10             	add    esp,0x10
c0029174:	83 c4 0c             	add    esp,0xc
c0029177:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029178 <IOAPIC::~IOAPIC()>:
c0029178:	83 ec 0c             	sub    esp,0xc
c002917b:	ba 74 d3 02 c0       	mov    edx,0xc002d374
c0029180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029184:	89 10                	mov    DWORD PTR [eax],edx
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	83 ec 0c             	sub    esp,0xc
c002918d:	50                   	push   eax
c002918e:	e8 9d b1 fe ff       	call   c0014330 <Device::~Device()>
c0029193:	83 c4 10             	add    esp,0x10
c0029196:	90                   	nop
c0029197:	83 c4 0c             	add    esp,0xc
c002919a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002919c <IOAPIC::~IOAPIC()>:
c002919c:	83 ec 0c             	sub    esp,0xc
c002919f:	83 ec 0c             	sub    esp,0xc
c00291a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a6:	e8 cd ff ff ff       	call   c0029178 <IOAPIC::~IOAPIC()>
c00291ab:	83 c4 10             	add    esp,0x10
c00291ae:	83 ec 08             	sub    esp,0x8
c00291b1:	68 68 01 00 00       	push   0x168
c00291b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291ba:	e8 99 9d fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00291bf:	83 c4 10             	add    esp,0x10
c00291c2:	83 c4 0c             	add    esp,0xc
c00291c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291c6 <APIC::~APIC()>:
c00291c6:	83 ec 0c             	sub    esp,0xc
c00291c9:	ba 2c d3 02 c0       	mov    edx,0xc002d32c
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	89 10                	mov    DWORD PTR [eax],edx
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	83 ec 0c             	sub    esp,0xc
c00291db:	50                   	push   eax
c00291dc:	e8 7f bc fe ff       	call   c0014e60 <InterruptController::~InterruptController()>
c00291e1:	83 c4 10             	add    esp,0x10
c00291e4:	90                   	nop
c00291e5:	83 c4 0c             	add    esp,0xc
c00291e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291ea <APIC::~APIC()>:
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	83 ec 0c             	sub    esp,0xc
c00291f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f4:	e8 cd ff ff ff       	call   c00291c6 <APIC::~APIC()>
c00291f9:	83 c4 10             	add    esp,0x10
c00291fc:	83 ec 08             	sub    esp,0x8
c00291ff:	68 58 21 00 00       	push   0x2158
c0029204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029208:	e8 4b 9d fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c002920d:	83 c4 10             	add    esp,0x10
c0029210:	83 c4 0c             	add    esp,0xc
c0029213:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029214 <PIC::~PIC()>:
c0029214:	83 ec 0c             	sub    esp,0xc
c0029217:	ba c4 d3 02 c0       	mov    edx,0xc002d3c4
c002921c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029220:	89 10                	mov    DWORD PTR [eax],edx
c0029222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029226:	83 ec 0c             	sub    esp,0xc
c0029229:	50                   	push   eax
c002922a:	e8 31 bc fe ff       	call   c0014e60 <InterruptController::~InterruptController()>
c002922f:	83 c4 10             	add    esp,0x10
c0029232:	90                   	nop
c0029233:	83 c4 0c             	add    esp,0xc
c0029236:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029238 <PIC::~PIC()>:
c0029238:	83 ec 0c             	sub    esp,0xc
c002923b:	83 ec 0c             	sub    esp,0xc
c002923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029242:	e8 cd ff ff ff       	call   c0029214 <PIC::~PIC()>
c0029247:	83 c4 10             	add    esp,0x10
c002924a:	83 ec 08             	sub    esp,0x8
c002924d:	68 58 21 00 00       	push   0x2158
c0029252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029256:	e8 fd 9c fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c002925b:	83 c4 10             	add    esp,0x10
c002925e:	83 c4 0c             	add    esp,0xc
c0029261:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029262 <APICTimer::~APICTimer()>:
c0029262:	83 ec 0c             	sub    esp,0xc
c0029265:	ba 18 d4 02 c0       	mov    edx,0xc002d418
c002926a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926e:	89 10                	mov    DWORD PTR [eax],edx
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	83 ec 0c             	sub    esp,0xc
c0029277:	50                   	push   eax
c0029278:	e8 3b db fe ff       	call   c0016db8 <Timer::~Timer()>
c002927d:	83 c4 10             	add    esp,0x10
c0029280:	90                   	nop
c0029281:	83 c4 0c             	add    esp,0xc
c0029284:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029286 <APICTimer::~APICTimer()>:
c0029286:	83 ec 0c             	sub    esp,0xc
c0029289:	83 ec 0c             	sub    esp,0xc
c002928c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029290:	e8 cd ff ff ff       	call   c0029262 <APICTimer::~APICTimer()>
c0029295:	83 c4 10             	add    esp,0x10
c0029298:	83 ec 08             	sub    esp,0x8
c002929b:	68 60 01 00 00       	push   0x160
c00292a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a4:	e8 af 9c fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00292a9:	83 c4 10             	add    esp,0x10
c00292ac:	83 c4 0c             	add    esp,0xc
c00292af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00292b0 <PIT::~PIT()>:
c00292b0:	83 ec 0c             	sub    esp,0xc
c00292b3:	ba 68 d4 02 c0       	mov    edx,0xc002d468
c00292b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bc:	89 10                	mov    DWORD PTR [eax],edx
c00292be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c2:	83 ec 0c             	sub    esp,0xc
c00292c5:	50                   	push   eax
c00292c6:	e8 ed da fe ff       	call   c0016db8 <Timer::~Timer()>
c00292cb:	83 c4 10             	add    esp,0x10
c00292ce:	90                   	nop
c00292cf:	83 c4 0c             	add    esp,0xc
c00292d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292d4 <PIT::~PIT()>:
c00292d4:	83 ec 0c             	sub    esp,0xc
c00292d7:	83 ec 0c             	sub    esp,0xc
c00292da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292de:	e8 cd ff ff ff       	call   c00292b0 <PIT::~PIT()>
c00292e3:	83 c4 10             	add    esp,0x10
c00292e6:	83 ec 08             	sub    esp,0x8
c00292e9:	68 5c 01 00 00       	push   0x15c
c00292ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f2:	e8 61 9c fe ff       	call   c0012f58 <operator delete(void*, unsigned long)>
c00292f7:	83 c4 10             	add    esp,0x10
c00292fa:	83 c4 0c             	add    esp,0xc
c00292fd:	c3                   	ret    
